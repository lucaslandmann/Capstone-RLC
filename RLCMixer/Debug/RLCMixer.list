
RLCMixer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124b0  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08012724  08012724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012824  08012824  00014034  2**0
                  CONTENTS
  4 .ARM          00000008  08012824  08012824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801282c  0801282c  00014034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801282c  0801282c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012830  08012830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08012834  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00033bbc  20000034  08012868  00014034  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20033bf0  08012868  00014bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003367c  00000000  00000000  0001406a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005027  00000000  00000000  000476e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b10  00000000  00000000  0004c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021c1  00000000  00000000  0004f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047681  00000000  00000000  000513e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036803  00000000  00000000  00098a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bcbc5  00000000  00000000  000cf265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0028be2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf14  00000000  00000000  0028be70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00297d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000034 	.word	0x20000034
 8000290:	00000000 	.word	0x00000000
 8000294:	0801270c 	.word	0x0801270c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000038 	.word	0x20000038
 80002b0:	0801270c 	.word	0x0801270c

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Do_Comb0>:

struct delayInit delayChannel[6] = {0};


float Do_Comb0(float inSample, int channelNum)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005d6:	6038      	str	r0, [r7, #0]
	delayChannel[2].cf_g = 0.8;
 80005d8:	4b46      	ldr	r3, [pc, #280]	@ (80006f4 <Do_Comb0+0x128>)
 80005da:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80005de:	f603 53e8 	addw	r3, r3, #3560	@ 0xde8
 80005e2:	4a45      	ldr	r2, [pc, #276]	@ (80006f8 <Do_Comb0+0x12c>)
 80005e4:	601a      	str	r2, [r3, #0]

	float readback = delayChannel[channelNum].cfbuf[delayChannel[channelNum].cf_p];
 80005e6:	4a43      	ldr	r2, [pc, #268]	@ (80006f4 <Do_Comb0+0x128>)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80005ee:	fb01 f303 	mul.w	r3, r1, r3
 80005f2:	4413      	add	r3, r2
 80005f4:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80005f8:	3320      	adds	r3, #32
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	493d      	ldr	r1, [pc, #244]	@ (80006f4 <Do_Comb0+0x128>)
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 8000604:	fb00 f202 	mul.w	r2, r0, r2
 8000608:	4413      	add	r3, r2
 800060a:	3302      	adds	r3, #2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	60fb      	str	r3, [r7, #12]
	float new = readback*(delayChannel[channelNum].cf_g) + inSample;
 8000614:	4a37      	ldr	r2, [pc, #220]	@ (80006f4 <Do_Comb0+0x128>)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 800061c:	fb01 f303 	mul.w	r3, r1, r3
 8000620:	4413      	add	r3, r2
 8000622:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000626:	3318      	adds	r3, #24
 8000628:	ed93 7a00 	vldr	s14, [r3]
 800062c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000634:	ed97 7a01 	vldr	s14, [r7, #4]
 8000638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800063c:	edc7 7a02 	vstr	s15, [r7, #8]
	delayChannel[channelNum].cfbuf[delayChannel[channelNum].cf_p] = new;
 8000640:	4a2c      	ldr	r2, [pc, #176]	@ (80006f4 <Do_Comb0+0x128>)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000648:	fb01 f303 	mul.w	r3, r1, r3
 800064c:	4413      	add	r3, r2
 800064e:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000652:	3320      	adds	r3, #32
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4927      	ldr	r1, [pc, #156]	@ (80006f4 <Do_Comb0+0x128>)
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 800065e:	fb00 f202 	mul.w	r2, r0, r2
 8000662:	4413      	add	r3, r2
 8000664:	3302      	adds	r3, #2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	601a      	str	r2, [r3, #0]
	delayChannel[channelNum].cf_p++;
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <Do_Comb0+0x128>)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	4413      	add	r3, r2
 800067c:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000680:	3320      	adds	r3, #32
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	491b      	ldr	r1, [pc, #108]	@ (80006f4 <Do_Comb0+0x128>)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 800068e:	fb00 f303 	mul.w	r3, r0, r3
 8000692:	440b      	add	r3, r1
 8000694:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000698:	3320      	adds	r3, #32
 800069a:	601a      	str	r2, [r3, #0]
	if (delayChannel[channelNum].cf_p==delayChannel[channelNum].cf_lim)
 800069c:	4a15      	ldr	r2, [pc, #84]	@ (80006f4 <Do_Comb0+0x128>)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80006a4:	fb01 f303 	mul.w	r3, r1, r3
 80006a8:	4413      	add	r3, r2
 80006aa:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80006ae:	3320      	adds	r3, #32
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4910      	ldr	r1, [pc, #64]	@ (80006f4 <Do_Comb0+0x128>)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 80006ba:	fb00 f303 	mul.w	r3, r0, r3
 80006be:	440b      	add	r3, r1
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d10b      	bne.n	80006de <Do_Comb0+0x112>
	{
		delayChannel[channelNum].cf_p = 0;
 80006c6:	4a0b      	ldr	r2, [pc, #44]	@ (80006f4 <Do_Comb0+0x128>)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80006ce:	fb01 f303 	mul.w	r3, r1, r3
 80006d2:	4413      	add	r3, r2
 80006d4:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80006d8:	3320      	adds	r3, #32
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
	}
	return readback;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	ee07 3a90 	vmov	s15, r3

}
 80006e4:	eeb0 0a67 	vmov.f32	s0, s15
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000d84 	.word	0x20000d84
 80006f8:	3f4ccccd 	.word	0x3f4ccccd

080006fc <Do_Allpass0>:
float Do_Allpass0(float inSample, int channelNum)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	ed87 0a01 	vstr	s0, [r7, #4]
 8000706:	6038      	str	r0, [r7, #0]
	delayChannel[2].ap_g = 0.7;
 8000708:	4b4e      	ldr	r3, [pc, #312]	@ (8000844 <Do_Allpass0+0x148>)
 800070a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800070e:	f603 53ec 	addw	r3, r3, #3564	@ 0xdec
 8000712:	4a4d      	ldr	r2, [pc, #308]	@ (8000848 <Do_Allpass0+0x14c>)
 8000714:	601a      	str	r2, [r3, #0]

	float readback = delayChannel[channelNum].apbuf[delayChannel[channelNum].ap_p];
 8000716:	4a4b      	ldr	r2, [pc, #300]	@ (8000844 <Do_Allpass0+0x148>)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 800071e:	fb01 f303 	mul.w	r3, r1, r3
 8000722:	4413      	add	r3, r2
 8000724:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 8000728:	3324      	adds	r3, #36	@ 0x24
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4945      	ldr	r1, [pc, #276]	@ (8000844 <Do_Allpass0+0x148>)
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 8000734:	fb00 f202 	mul.w	r2, r0, r2
 8000738:	4413      	add	r3, r2
 800073a:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 800073e:	3306      	adds	r3, #6
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	440b      	add	r3, r1
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	60fb      	str	r3, [r7, #12]
	readback += (-delayChannel[channelNum].ap_g) * inSample;
 8000748:	4a3e      	ldr	r2, [pc, #248]	@ (8000844 <Do_Allpass0+0x148>)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000750:	fb01 f303 	mul.w	r3, r1, r3
 8000754:	4413      	add	r3, r2
 8000756:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800075a:	331c      	adds	r3, #28
 800075c:	edd3 7a00 	vldr	s15, [r3]
 8000760:	eeb1 7a67 	vneg.f32	s14, s15
 8000764:	edd7 7a01 	vldr	s15, [r7, #4]
 8000768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000774:	edc7 7a03 	vstr	s15, [r7, #12]
	float new = readback*delayChannel[0].ap_g + inSample;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <Do_Allpass0+0x148>)
 800077a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800077e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8000782:	ed93 7a00 	vldr	s14, [r3]
 8000786:	edd7 7a03 	vldr	s15, [r7, #12]
 800078a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800078e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000796:	edc7 7a02 	vstr	s15, [r7, #8]
	delayChannel[channelNum].apbuf[delayChannel[channelNum].ap_p] = new;
 800079a:	4a2a      	ldr	r2, [pc, #168]	@ (8000844 <Do_Allpass0+0x148>)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80007a2:	fb01 f303 	mul.w	r3, r1, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007ac:	3324      	adds	r3, #36	@ 0x24
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4924      	ldr	r1, [pc, #144]	@ (8000844 <Do_Allpass0+0x148>)
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	f641 502a 	movw	r0, #7466	@ 0x1d2a
 80007b8:	fb00 f202 	mul.w	r2, r0, r2
 80007bc:	4413      	add	r3, r2
 80007be:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 80007c2:	3306      	adds	r3, #6
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	601a      	str	r2, [r3, #0]
	delayChannel[channelNum].ap_p++;
 80007cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000844 <Do_Allpass0+0x148>)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 80007d4:	fb01 f303 	mul.w	r3, r1, r3
 80007d8:	4413      	add	r3, r2
 80007da:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007de:	3324      	adds	r3, #36	@ 0x24
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	4917      	ldr	r1, [pc, #92]	@ (8000844 <Do_Allpass0+0x148>)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	f247 40a8 	movw	r0, #29864	@ 0x74a8
 80007ec:	fb00 f303 	mul.w	r3, r0, r3
 80007f0:	440b      	add	r3, r1
 80007f2:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 80007f6:	3324      	adds	r3, #36	@ 0x24
 80007f8:	601a      	str	r2, [r3, #0]
	if (delayChannel[channelNum].ap_p == delayChannel[0].ap_lim)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <Do_Allpass0+0x148>)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000802:	fb01 f303 	mul.w	r3, r1, r3
 8000806:	4413      	add	r3, r2
 8000808:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800080c:	3324      	adds	r3, #36	@ 0x24
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <Do_Allpass0+0x148>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	d10b      	bne.n	8000830 <Do_Allpass0+0x134>
	{
		delayChannel[channelNum].ap_p = 0;
 8000818:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <Do_Allpass0+0x148>)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f247 41a8 	movw	r1, #29864	@ 0x74a8
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	4413      	add	r3, r2
 8000826:	f503 43e9 	add.w	r3, r3, #29824	@ 0x7480
 800082a:	3324      	adds	r3, #36	@ 0x24
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
	}
	return readback;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	ee07 3a90 	vmov	s15, r3

}
 8000836:	eeb0 0a67 	vmov.f32	s0, s15
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000d84 	.word	0x20000d84
 8000848:	3f333333 	.word	0x3f333333

0800084c <Do_Delay>:
float Do_Delay(float inSample, int channelNum) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	ed87 0a01 	vstr	s0, [r7, #4]
 8000856:	6038      	str	r0, [r7, #0]
	float newsample = (Do_Comb0(inSample, channelNum));
 8000858:	6838      	ldr	r0, [r7, #0]
 800085a:	ed97 0a01 	vldr	s0, [r7, #4]
 800085e:	f7ff feb5 	bl	80005cc <Do_Comb0>
 8000862:	ed87 0a03 	vstr	s0, [r7, #12]
	newsample = Do_Allpass0(newsample, channelNum);
 8000866:	6838      	ldr	r0, [r7, #0]
 8000868:	ed97 0a03 	vldr	s0, [r7, #12]
 800086c:	f7ff ff46 	bl	80006fc <Do_Allpass0>
 8000870:	ed87 0a03 	vstr	s0, [r7, #12]
	return newsample;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	ee07 3a90 	vmov	s15, r3
}
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	ed2d 8b02 	vpush	{d8}
 800088a:	b08c      	sub	sp, #48	@ 0x30
 800088c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

  //code credits start 'yetanotherelectronicschannel'
  delayChannel[0].cf_lim = (int)(time*CB);
 800088e:	4bb5      	ldr	r3, [pc, #724]	@ (8000b64 <main+0x2e0>)
 8000890:	edd3 7a00 	vldr	s15, [r3]
 8000894:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000b68 <main+0x2e4>
 8000898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800089c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008a4:	ee17 2a90 	vmov	r2, s15
 80008a8:	4bb0      	ldr	r3, [pc, #704]	@ (8000b6c <main+0x2e8>)
 80008aa:	601a      	str	r2, [r3, #0]
  delayChannel[0].ap_lim = (int)(time*AP);
 80008ac:	4bad      	ldr	r3, [pc, #692]	@ (8000b64 <main+0x2e0>)
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8000b70 <main+0x2ec>
 80008b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c2:	ee17 2a90 	vmov	r2, s15
 80008c6:	4ba9      	ldr	r3, [pc, #676]	@ (8000b6c <main+0x2e8>)
 80008c8:	605a      	str	r2, [r3, #4]

  delayChannel[1].cf_lim = (int)(time*CB);
 80008ca:	4ba6      	ldr	r3, [pc, #664]	@ (8000b64 <main+0x2e0>)
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8000b68 <main+0x2e4>
 80008d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80008dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e0:	ee17 2a90 	vmov	r2, s15
 80008e4:	4ba1      	ldr	r3, [pc, #644]	@ (8000b6c <main+0x2e8>)
 80008e6:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80008ea:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
  delayChannel[1].ap_lim = (int)(time*AP);
 80008ee:	4b9d      	ldr	r3, [pc, #628]	@ (8000b64 <main+0x2e0>)
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8000b70 <main+0x2ec>
 80008f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000904:	ee17 2a90 	vmov	r2, s15
 8000908:	4b98      	ldr	r3, [pc, #608]	@ (8000b6c <main+0x2e8>)
 800090a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800090e:	f8c3 24ac 	str.w	r2, [r3, #1196]	@ 0x4ac

  delayChannel[2].cf_lim = (int)(time*CB);
 8000912:	4b94      	ldr	r3, [pc, #592]	@ (8000b64 <main+0x2e0>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8000b68 <main+0x2e4>
 800091c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000920:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000928:	ee17 2a90 	vmov	r2, s15
 800092c:	4b8f      	ldr	r3, [pc, #572]	@ (8000b6c <main+0x2e8>)
 800092e:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000932:	f8c3 2950 	str.w	r2, [r3, #2384]	@ 0x950
  delayChannel[2].ap_lim = (int)(time*AP);
 8000936:	4b8b      	ldr	r3, [pc, #556]	@ (8000b64 <main+0x2e0>)
 8000938:	edd3 7a00 	vldr	s15, [r3]
 800093c:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8000b70 <main+0x2ec>
 8000940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000944:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800094c:	ee17 2a90 	vmov	r2, s15
 8000950:	4b86      	ldr	r3, [pc, #536]	@ (8000b6c <main+0x2e8>)
 8000952:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000956:	f8c3 2954 	str.w	r2, [r3, #2388]	@ 0x954

  delayChannel[3].cf_lim = (int)(time*CB);
 800095a:	4b82      	ldr	r3, [pc, #520]	@ (8000b64 <main+0x2e0>)
 800095c:	edd3 7a00 	vldr	s15, [r3]
 8000960:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8000b68 <main+0x2e4>
 8000964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800096c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000970:	ee17 2a90 	vmov	r2, s15
 8000974:	4b7d      	ldr	r3, [pc, #500]	@ (8000b6c <main+0x2e8>)
 8000976:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800097a:	f8c3 2df8 	str.w	r2, [r3, #3576]	@ 0xdf8
  delayChannel[3].ap_lim = (int)(time*AP);
 800097e:	4b79      	ldr	r3, [pc, #484]	@ (8000b64 <main+0x2e0>)
 8000980:	edd3 7a00 	vldr	s15, [r3]
 8000984:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8000b70 <main+0x2ec>
 8000988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000994:	ee17 2a90 	vmov	r2, s15
 8000998:	4b74      	ldr	r3, [pc, #464]	@ (8000b6c <main+0x2e8>)
 800099a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800099e:	f8c3 2dfc 	str.w	r2, [r3, #3580]	@ 0xdfc

  delayChannel[4].cf_lim = (int)(time*CB);
 80009a2:	4b70      	ldr	r3, [pc, #448]	@ (8000b64 <main+0x2e0>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8000b68 <main+0x2e4>
 80009ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b8:	ee17 2a90 	vmov	r2, s15
 80009bc:	4b6b      	ldr	r3, [pc, #428]	@ (8000b6c <main+0x2e8>)
 80009be:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 80009c2:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
  delayChannel[4].ap_lim = (int)(time*AP);
 80009c6:	4b67      	ldr	r3, [pc, #412]	@ (8000b64 <main+0x2e0>)
 80009c8:	edd3 7a00 	vldr	s15, [r3]
 80009cc:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8000b70 <main+0x2ec>
 80009d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009dc:	ee17 2a90 	vmov	r2, s15
 80009e0:	4b62      	ldr	r3, [pc, #392]	@ (8000b6c <main+0x2e8>)
 80009e2:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 80009e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  delayChannel[5].cf_lim = (int)(time*CB);
 80009ea:	4b5e      	ldr	r3, [pc, #376]	@ (8000b64 <main+0x2e0>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000b68 <main+0x2e4>
 80009f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a00:	ee17 2a90 	vmov	r2, s15
 8000a04:	4b59      	ldr	r3, [pc, #356]	@ (8000b6c <main+0x2e8>)
 8000a06:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a0a:	f8c3 2748 	str.w	r2, [r3, #1864]	@ 0x748
  delayChannel[5].ap_lim = (int)(time*AP);
 8000a0e:	4b55      	ldr	r3, [pc, #340]	@ (8000b64 <main+0x2e0>)
 8000a10:	edd3 7a00 	vldr	s15, [r3]
 8000a14:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000b70 <main+0x2ec>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a24:	ee17 2a90 	vmov	r2, s15
 8000a28:	4b50      	ldr	r3, [pc, #320]	@ (8000b6c <main+0x2e8>)
 8000a2a:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a2e:	f8c3 274c 	str.w	r2, [r3, #1868]	@ 0x74c

  delayChannel[0].cf_p = 0;
 8000a32:	4b4e      	ldr	r3, [pc, #312]	@ (8000b6c <main+0x2e8>)
 8000a34:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c2 34a0 	str.w	r3, [r2, #1184]	@ 0x4a0
  delayChannel[1].cf_p = 0;
 8000a40:	4b4a      	ldr	r3, [pc, #296]	@ (8000b6c <main+0x2e8>)
 8000a42:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000a46:	461a      	mov	r2, r3
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c2 3948 	str.w	r3, [r2, #2376]	@ 0x948
  delayChannel[2].cf_p = 0;
 8000a4e:	4b47      	ldr	r3, [pc, #284]	@ (8000b6c <main+0x2e8>)
 8000a50:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8000a54:	461a      	mov	r2, r3
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c2 3df0 	str.w	r3, [r2, #3568]	@ 0xdf0
  delayChannel[3].cf_p = 0;
 8000a5c:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <main+0x2e8>)
 8000a5e:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8000a62:	461a      	mov	r2, r3
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c2 3298 	str.w	r3, [r2, #664]	@ 0x298
  delayChannel[4].cf_p = 0;
 8000a6a:	4b40      	ldr	r3, [pc, #256]	@ (8000b6c <main+0x2e8>)
 8000a6c:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000a70:	461a      	mov	r2, r3
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c2 3740 	str.w	r3, [r2, #1856]	@ 0x740
  delayChannel[5].cf_p = 0;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	@ (8000b6c <main+0x2e8>)
 8000a7a:	f503 332c 	add.w	r3, r3, #176128	@ 0x2b000
 8000a7e:	461a      	mov	r2, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c2 3be8 	str.w	r3, [r2, #3048]	@ 0xbe8

  delayChannel[0].ap_p = 0;
 8000a86:	4b39      	ldr	r3, [pc, #228]	@ (8000b6c <main+0x2e8>)
 8000a88:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c2 34a4 	str.w	r3, [r2, #1188]	@ 0x4a4
  delayChannel[1].ap_p = 0;
 8000a94:	4b35      	ldr	r3, [pc, #212]	@ (8000b6c <main+0x2e8>)
 8000a96:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c2 394c 	str.w	r3, [r2, #2380]	@ 0x94c
  delayChannel[2].ap_p = 0;
 8000aa2:	4b32      	ldr	r3, [pc, #200]	@ (8000b6c <main+0x2e8>)
 8000aa4:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c2 3df4 	str.w	r3, [r2, #3572]	@ 0xdf4
  delayChannel[3].ap_p = 0;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <main+0x2e8>)
 8000ab2:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c2 329c 	str.w	r3, [r2, #668]	@ 0x29c
  delayChannel[4].ap_p = 0;
 8000abe:	4b2b      	ldr	r3, [pc, #172]	@ (8000b6c <main+0x2e8>)
 8000ac0:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c2 3744 	str.w	r3, [r2, #1860]	@ 0x744
  delayChannel[5].ap_p = 0;
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <main+0x2e8>)
 8000ace:	f503 332c 	add.w	r3, r3, #176128	@ 0x2b000
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c2 3bec 	str.w	r3, [r2, #3052]	@ 0xbec
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f002 fbdb 	bl	8003294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 f9c3 	bl	8000e68 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae2:	f000 fa2d 	bl	8000f40 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ae6:	f000 fa62 	bl	8000fae <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aea:	f000 ffc3 	bl	8001a74 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000aee:	f000 fc51 	bl	8001394 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 8000af2:	f000 fc11 	bl	8001318 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 8000af6:	f000 fc85 	bl	8001404 <MX_HSPI1_Init>
  MX_I2C2_Init();
 8000afa:	f000 fd01 	bl	8001500 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8000afe:	f000 fd3f 	bl	8001580 <MX_ICACHE_Init>
  MX_LTDC_Init();
 8000b02:	f000 fd51 	bl	80015a8 <MX_LTDC_Init>
  MX_RTC_Init();
 8000b06:	f000 fdcf 	bl	80016a8 <MX_RTC_Init>
  MX_TIM3_Init();
 8000b0a:	f000 fe87 	bl	800181c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000b0e:	f000 fa5d 	bl	8000fcc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b12:	f000 ff35 	bl	8001980 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000b16:	f000 fe15 	bl	8001744 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000b1a:	f000 fb81 	bl	8001220 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000b1e:	f000 fcaf 	bl	8001480 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000b22:	f000 ff79 	bl	8001a18 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 8000b26:	f000 fedb 	bl	80018e0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //Begins DMA transfer for first ADC
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1));
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	4911      	ldr	r1, [pc, #68]	@ (8000b74 <main+0x2f0>)
 8000b2e:	4812      	ldr	r0, [pc, #72]	@ (8000b78 <main+0x2f4>)
 8000b30:	f003 fa86 	bl	8004040 <HAL_ADC_Start_DMA>
  //begins DMA transfer for fourth ADC
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4));
 8000b34:	2202      	movs	r2, #2
 8000b36:	4911      	ldr	r1, [pc, #68]	@ (8000b7c <main+0x2f8>)
 8000b38:	4811      	ldr	r0, [pc, #68]	@ (8000b80 <main+0x2fc>)
 8000b3a:	f003 fa81 	bl	8004040 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000b3e:	4811      	ldr	r0, [pc, #68]	@ (8000b84 <main+0x300>)
 8000b40:	f00e fd12 	bl	800f568 <HAL_TIM_Base_Start>
  //Config ADC/DAC

  HAL_Delay(2000);
 8000b44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b48:	f002 fbf4 	bl	8003334 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2104      	movs	r1, #4
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <main+0x304>)
 8000b52:	f007 f9b3 	bl	8007ebc <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000b56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b5a:	f002 fbeb 	bl	8003334 <HAL_Delay>

  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b62:	e024      	b.n	8000bae <main+0x32a>
 8000b64:	20000004 	.word	0x20000004
 8000b68:	454b2000 	.word	0x454b2000
 8000b6c:	20000d84 	.word	0x20000d84
 8000b70:	43f00000 	.word	0x43f00000
 8000b74:	2002c974 	.word	0x2002c974
 8000b78:	20000050 	.word	0x20000050
 8000b7c:	2002c98c 	.word	0x2002c98c
 8000b80:	200000dc 	.word	0x200000dc
 8000b84:	200007c0 	.word	0x200007c0
 8000b88:	42021000 	.word	0x42021000
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4aa5      	ldr	r2, [pc, #660]	@ (8000e28 <main+0x5a4>)
 8000b92:	441a      	add	r2, r3
 8000b94:	2364      	movs	r3, #100	@ 0x64
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2302      	movs	r3, #2
 8000b9a:	2190      	movs	r1, #144	@ 0x90
 8000b9c:	48a3      	ldr	r0, [pc, #652]	@ (8000e2c <main+0x5a8>)
 8000b9e:	f007 fa97 	bl	80080d0 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000ba2:	200a      	movs	r0, #10
 8000ba4:	f002 fbc6 	bl	8003334 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	3301      	adds	r3, #1
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb0:	2b1d      	cmp	r3, #29
 8000bb2:	d9eb      	bls.n	8000b8c <main+0x308>
  }

  HAL_Delay(100);
 8000bb4:	2064      	movs	r0, #100	@ 0x64
 8000bb6:	f002 fbbd 	bl	8003334 <HAL_Delay>
  //Begins DMA transfer for PCM6260
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData));
 8000bba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bbe:	499c      	ldr	r1, [pc, #624]	@ (8000e30 <main+0x5ac>)
 8000bc0:	489c      	ldr	r0, [pc, #624]	@ (8000e34 <main+0x5b0>)
 8000bc2:	f00e f947 	bl	800ee54 <HAL_SAI_Receive_DMA>
  //Begins DMA transfer for CS4334k-QZ
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacDataBuffer, DIM(dacDataBuffer));
 8000bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bca:	499b      	ldr	r1, [pc, #620]	@ (8000e38 <main+0x5b4>)
 8000bcc:	489b      	ldr	r0, [pc, #620]	@ (8000e3c <main+0x5b8>)
 8000bce:	f00e f83f 	bl	800ec50 <HAL_SAI_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t heartBeatTick = HAL_GetTick() + 1000;
 8000bd2:	f002 fba3 	bl	800331c <HAL_GetTick>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000bdc:	623b      	str	r3, [r7, #32]
  uint16_t index = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	83fb      	strh	r3, [r7, #30]
  int channelNumber = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	  if(HAL_GetTick() >= heartBeatTick)
 8000be6:	f002 fb99 	bl	800331c <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d809      	bhi.n	8000c06 <main+0x382>
	  {
		 heartBeatTick = HAL_GetTick() + 1000;
 8000bf2:	f002 fb93 	bl	800331c <HAL_GetTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000bfc:	623b      	str	r3, [r7, #32]
		 HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000bfe:	2104      	movs	r1, #4
 8000c00:	488f      	ldr	r0, [pc, #572]	@ (8000e40 <main+0x5bc>)
 8000c02:	f007 f973 	bl	8007eec <HAL_GPIO_TogglePin>
	  }
	  //Slider/Pot Processing
	  volumeLRPoll(index);
 8000c06:	8bfb      	ldrh	r3, [r7, #30]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f87f 	bl	8001d0c <volumeLRPoll>
	  index++;
 8000c0e:	8bfb      	ldrh	r3, [r7, #30]
 8000c10:	3301      	adds	r3, #1
 8000c12:	83fb      	strh	r3, [r7, #30]

	  uint16_t currChannelLR = channels[index % 6].lr >> 2;
 8000c14:	8bfa      	ldrh	r2, [r7, #30]
 8000c16:	4b8b      	ldr	r3, [pc, #556]	@ (8000e44 <main+0x5c0>)
 8000c18:	fba3 1302 	umull	r1, r3, r3, r2
 8000c1c:	0899      	lsrs	r1, r3, #2
 8000c1e:	460b      	mov	r3, r1
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	440b      	add	r3, r1
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4a86      	ldr	r2, [pc, #536]	@ (8000e48 <main+0x5c4>)
 8000c2e:	460b      	mov	r3, r1
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	440b      	add	r3, r1
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	4413      	add	r3, r2
 8000c38:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	80fb      	strh	r3, [r7, #6]
//	  {
//		  channels[index % 6].lFloat = (float)pan / 512.0f;
//		  channels[index %6].rFloat = 1;
//	  }

	  if(adcReady)
 8000c42:	4b82      	ldr	r3, [pc, #520]	@ (8000e4c <main+0x5c8>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d067      	beq.n	8000d1c <main+0x498>
	  {
		  //Loads sample data into Structs
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	83bb      	strh	r3, [r7, #28]
 8000c50:	e05e      	b.n	8000d10 <main+0x48c>
		  {
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	837b      	strh	r3, [r7, #26]
 8000c56:	e055      	b.n	8000d04 <main+0x480>
		        {
		            channels[channel].channelData[sample] = signExtend24((uint32_t)(adcData[channelCount*sample + channel]));
 8000c58:	4b7d      	ldr	r3, [pc, #500]	@ (8000e50 <main+0x5cc>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	8b7b      	ldrh	r3, [r7, #26]
 8000c5e:	00d9      	lsls	r1, r3, #3
 8000c60:	8bbb      	ldrh	r3, [r7, #28]
 8000c62:	440b      	add	r3, r1
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	8bbc      	ldrh	r4, [r7, #28]
 8000c6c:	8b7d      	ldrh	r5, [r7, #26]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 f836 	bl	8001ce0 <signExtend24>
 8000c74:	4602      	mov	r2, r0
 8000c76:	4974      	ldr	r1, [pc, #464]	@ (8000e48 <main+0x5c4>)
 8000c78:	4623      	mov	r3, r4
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	4423      	add	r3, r4
 8000c7e:	011b      	lsls	r3, r3, #4
 8000c80:	442b      	add	r3, r5
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		            if(channel == 1){
 8000c86:	8bbb      	ldrh	r3, [r7, #28]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d138      	bne.n	8000cfe <main+0x47a>
		            channels[channel].channelData[sample] = (int32_t)((1.0f-wet)*((float)channels[1].channelData[sample])
 8000c8c:	4b71      	ldr	r3, [pc, #452]	@ (8000e54 <main+0x5d0>)
 8000c8e:	edd3 7a00 	vldr	s15, [r3]
 8000c92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c9a:	8b7b      	ldrh	r3, [r7, #26]
 8000c9c:	4a6a      	ldr	r2, [pc, #424]	@ (8000e48 <main+0x5c4>)
 8000c9e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8000ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca6:	ee07 3a90 	vmov	s15, r3
 8000caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cae:	ee27 8a27 	vmul.f32	s16, s14, s15
							    + wet*Do_Delay((float)channels[1].channelData[sample], 1));
 8000cb2:	8b7b      	ldrh	r3, [r7, #26]
 8000cb4:	4a64      	ldr	r2, [pc, #400]	@ (8000e48 <main+0x5c4>)
 8000cb6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8000cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ccc:	f7ff fdbe 	bl	800084c <Do_Delay>
 8000cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8000cd4:	4b5f      	ldr	r3, [pc, #380]	@ (8000e54 <main+0x5d0>)
 8000cd6:	edd3 7a00 	vldr	s15, [r3]
 8000cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cde:	ee78 7a27 	vadd.f32	s15, s16, s15
		            channels[channel].channelData[sample] = (int32_t)((1.0f-wet)*((float)channels[1].channelData[sample])
 8000ce2:	8bba      	ldrh	r2, [r7, #28]
 8000ce4:	8b79      	ldrh	r1, [r7, #26]
 8000ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cea:	ee17 4a90 	vmov	r4, s15
 8000cee:	4856      	ldr	r0, [pc, #344]	@ (8000e48 <main+0x5c4>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	4413      	add	r3, r2
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	440b      	add	r3, r1
 8000cfa:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000cfe:	8b7b      	ldrh	r3, [r7, #26]
 8000d00:	3301      	adds	r3, #1
 8000d02:	837b      	strh	r3, [r7, #26]
 8000d04:	8b7b      	ldrh	r3, [r7, #26]
 8000d06:	2bff      	cmp	r3, #255	@ 0xff
 8000d08:	d9a6      	bls.n	8000c58 <main+0x3d4>
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000d0a:	8bbb      	ldrh	r3, [r7, #28]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	83bb      	strh	r3, [r7, #28]
 8000d10:	8bbb      	ldrh	r3, [r7, #28]
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	d99d      	bls.n	8000c52 <main+0x3ce>
		            }
		        }
		  }
		  //TODO: apply effects
		  //TODO: mix
		  adcReady = false;
 8000d16:	4b4d      	ldr	r3, [pc, #308]	@ (8000e4c <main+0x5c8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
	  }
	  if(dacReady)
 8000d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8000e58 <main+0x5d4>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f43f af5f 	beq.w	8000be6 <main+0x362>
	  {
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	833b      	strh	r3, [r7, #24]
 8000d2c:	e074      	b.n	8000e18 <main+0x594>
		  {
			  int32_t mixedSignalLeft = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
			  int32_t mixedSignalRight = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	81fb      	strh	r3, [r7, #14]
 8000d3a:	e04a      	b.n	8000dd2 <main+0x54e>
			  {
				  float digGain = (float)(channels[currChannel].volumeRunner >> 6) / 512.0f;
 8000d3c:	89fa      	ldrh	r2, [r7, #14]
 8000d3e:	4942      	ldr	r1, [pc, #264]	@ (8000e48 <main+0x5c4>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	4413      	add	r3, r2
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	440b      	add	r3, r1
 8000d4a:	f203 4312 	addw	r3, r3, #1042	@ 0x412
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	099b      	lsrs	r3, r3, #6
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d5c:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8000e5c <main+0x5d8>
 8000d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d64:	edc7 7a00 	vstr	s15, [r7]
				  digGain = digGain * maxGain;
 8000d68:	edd7 7a00 	vldr	s15, [r7]
 8000d6c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d74:	edc7 7a00 	vstr	s15, [r7]

				  mixedSignalLeft += (int32_t)((float)channels[currChannel].channelData[sample]); //* digGain * channels[currChannel].lFloat);
 8000d78:	89fa      	ldrh	r2, [r7, #14]
 8000d7a:	8b39      	ldrh	r1, [r7, #24]
 8000d7c:	4832      	ldr	r0, [pc, #200]	@ (8000e48 <main+0x5c4>)
 8000d7e:	4613      	mov	r3, r2
 8000d80:	011b      	lsls	r3, r3, #4
 8000d82:	4413      	add	r3, r2
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	440b      	add	r3, r1
 8000d88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000d8c:	ee07 3a90 	vmov	s15, r3
 8000d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d98:	ee17 2a90 	vmov	r2, s15
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	4413      	add	r3, r2
 8000da0:	617b      	str	r3, [r7, #20]
				  mixedSignalRight += (int32_t)((float)channels[currChannel].channelData[sample]); //* digGain * channels[currChannel].rFloat);
 8000da2:	89fa      	ldrh	r2, [r7, #14]
 8000da4:	8b39      	ldrh	r1, [r7, #24]
 8000da6:	4828      	ldr	r0, [pc, #160]	@ (8000e48 <main+0x5c4>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4413      	add	r3, r2
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	440b      	add	r3, r1
 8000db2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000db6:	ee07 3a90 	vmov	s15, r3
 8000dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dc2:	ee17 2a90 	vmov	r2, s15
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4413      	add	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	81fb      	strh	r3, [r7, #14]
 8000dd2:	89fb      	ldrh	r3, [r7, #14]
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	d9b1      	bls.n	8000d3c <main+0x4b8>
			  }
			  mixedSignalLeft = mixedSignalLeft / 6;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <main+0x5dc>)
 8000ddc:	fb82 1203 	smull	r1, r2, r2, r3
 8000de0:	17db      	asrs	r3, r3, #31
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	617b      	str	r3, [r7, #20]
			  mixedSignalRight = mixedSignalRight / 6;
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e60 <main+0x5dc>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	17db      	asrs	r3, r3, #31
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	613b      	str	r3, [r7, #16]
			  dacData[(sample * 2)] =  mixedSignalLeft;//channels[2].channelData[sample];
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <main+0x5e0>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	8b3b      	ldrh	r3, [r7, #24]
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	601a      	str	r2, [r3, #0]
			  dacData[(sample * 2) + 1] = mixedSignalRight;//channels[2].channelData[sample];
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <main+0x5e0>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	8b3b      	ldrh	r3, [r7, #24]
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	601a      	str	r2, [r3, #0]
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000e12:	8b3b      	ldrh	r3, [r7, #24]
 8000e14:	3301      	adds	r3, #1
 8000e16:	833b      	strh	r3, [r7, #24]
 8000e18:	8b3b      	ldrh	r3, [r7, #24]
 8000e1a:	2bff      	cmp	r3, #255	@ 0xff
 8000e1c:	d987      	bls.n	8000d2e <main+0x4aa>
		  }
		  dacReady = false;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <main+0x5d4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
  {
 8000e24:	e6df      	b.n	8000be6 <main+0x362>
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	2000035c 	.word	0x2000035c
 8000e30:	2002c990 	.word	0x2002c990
 8000e34:	20000574 	.word	0x20000574
 8000e38:	20030990 	.word	0x20030990
 8000e3c:	200004dc 	.word	0x200004dc
 8000e40:	42020c00 	.word	0x42020c00
 8000e44:	aaaaaaab 	.word	0xaaaaaaab
 8000e48:	20031990 	.word	0x20031990
 8000e4c:	20033b90 	.word	0x20033b90
 8000e50:	20033b94 	.word	0x20033b94
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20033b91 	.word	0x20033b91
 8000e5c:	44000000 	.word	0x44000000
 8000e60:	2aaaaaab 	.word	0x2aaaaaab
 8000e64:	20033b98 	.word	0x20033b98

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09e      	sub	sp, #120	@ 0x78
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	2260      	movs	r2, #96	@ 0x60
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f011 fc1b 	bl	80126b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e8c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000e90:	f008 ff62 	bl	8009d58 <HAL_PWREx_ControlVoltageScaling>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000e9a:	f000 ffad 	bl	8001df8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e9e:	f008 ff4b 	bl	8009d38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ea2:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <SystemClock_Config+0xd4>)
 8000ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ea8:	4a24      	ldr	r2, [pc, #144]	@ (8000f3c <SystemClock_Config+0xd4>)
 8000eaa:	f023 0318 	bic.w	r3, r3, #24
 8000eae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ebc:	2381      	movs	r3, #129	@ 0x81
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000eda:	2308      	movs	r3, #8
 8000edc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000eea:	230c      	movs	r3, #12
 8000eec:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f009 f858 	bl	8009fac <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f02:	f000 ff79 	bl	8001df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	231f      	movs	r3, #31
 8000f08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2103      	movs	r1, #3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f009 ff1e 	bl	800ad64 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f2e:	f000 ff63 	bl	8001df8 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3778      	adds	r7, #120	@ 0x78
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	46020c00 	.word	0x46020c00

08000f40 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0b8      	sub	sp, #224	@ 0xe0
 8000f44:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	22e0      	movs	r2, #224	@ 0xe0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f011 fbb0 	bl	80126b2 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8000f52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f56:	f04f 0301 	mov.w	r3, #1
 8000f5a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000f64:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000f68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8000f74:	230c      	movs	r3, #12
 8000f76:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8000f80:	2304      	movs	r3, #4
 8000f82:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000f84:	230c      	movs	r3, #12
 8000f86:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000f8e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4618      	mov	r0, r3
 8000f98:	f00a faec 	bl	800b574 <HAL_RCCEx_PeriphCLKConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000fa2:	f000 ff29 	bl	8001df8 <Error_Handler>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	37e0      	adds	r7, #224	@ 0xe0
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000fb2:	f008 ffbd 	bl	8009f30 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	f008 ff5a 	bl	8009e70 <HAL_PWREx_ConfigSupply>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000fc2:	f000 ff19 	bl	8001df8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f011 fb6a 	bl	80126b2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fde:	4b82      	ldr	r3, [pc, #520]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8000fe0:	4a82      	ldr	r2, [pc, #520]	@ (80011ec <MX_ADC1_Init+0x220>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe4:	4b80      	ldr	r3, [pc, #512]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b7f      	ldr	r3, [pc, #508]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8000fec:	2204      	movs	r2, #4
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001002:	4b79      	ldr	r3, [pc, #484]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001004:	2204      	movs	r2, #4
 8001006:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8001008:	4b77      	ldr	r3, [pc, #476]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 800100a:	2201      	movs	r2, #1
 800100c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800100e:	4b76      	ldr	r3, [pc, #472]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 12;
 8001016:	4b74      	ldr	r3, [pc, #464]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001018:	220c      	movs	r2, #12
 800101a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101c:	4b72      	ldr	r3, [pc, #456]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001024:	4b70      	ldr	r3, [pc, #448]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001026:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 800102a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800102c:	4b6e      	ldr	r3, [pc, #440]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 800102e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001032:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001034:	4b6c      	ldr	r3, [pc, #432]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001036:	2201      	movs	r2, #1
 8001038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800103c:	4b6a      	ldr	r3, [pc, #424]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 800103e:	2200      	movs	r2, #0
 8001040:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001042:	4b69      	ldr	r3, [pc, #420]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001044:	2200      	movs	r2, #0
 8001046:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001048:	4b67      	ldr	r3, [pc, #412]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 800104a:	2200      	movs	r2, #0
 800104c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800104e:	4b66      	ldr	r3, [pc, #408]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001050:	2203      	movs	r2, #3
 8001052:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001054:	4b64      	ldr	r3, [pc, #400]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105c:	4862      	ldr	r0, [pc, #392]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 800105e:	f002 fd07 	bl	8003a70 <HAL_ADC_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001068:	f000 fec6 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800106c:	4b60      	ldr	r3, [pc, #384]	@ (80011f0 <MX_ADC1_Init+0x224>)
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001070:	2306      	movs	r3, #6
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001078:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107e:	2304      	movs	r3, #4
 8001080:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4857      	ldr	r0, [pc, #348]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 800108c:	f003 fc1e 	bl	80048cc <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001096:	f000 feaf 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800109a:	4b56      	ldr	r3, [pc, #344]	@ (80011f4 <MX_ADC1_Init+0x228>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800109e:	230c      	movs	r3, #12
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4850      	ldr	r0, [pc, #320]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 80010a8:	f003 fc10 	bl	80048cc <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80010b2:	f000 fea1 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010b6:	4b50      	ldr	r3, [pc, #320]	@ (80011f8 <MX_ADC1_Init+0x22c>)
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010ba:	2312      	movs	r3, #18
 80010bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4849      	ldr	r0, [pc, #292]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 80010c4:	f003 fc02 	bl	80048cc <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80010ce:	f000 fe93 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010d2:	4b4a      	ldr	r3, [pc, #296]	@ (80011fc <MX_ADC1_Init+0x230>)
 80010d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010d6:	2318      	movs	r3, #24
 80010d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4842      	ldr	r0, [pc, #264]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 80010e0:	f003 fbf4 	bl	80048cc <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 80010ea:	f000 fe85 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010ee:	4b44      	ldr	r3, [pc, #272]	@ (8001200 <MX_ADC1_Init+0x234>)
 80010f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80010f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	483a      	ldr	r0, [pc, #232]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 80010fe:	f003 fbe5 	bl	80048cc <HAL_ADC_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8001108:	f000 fe76 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800110c:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <MX_ADC1_Init+0x238>)
 800110e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001110:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001114:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	4619      	mov	r1, r3
 800111a:	4833      	ldr	r0, [pc, #204]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 800111c:	f003 fbd6 	bl	80048cc <HAL_ADC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001126:	f000 fe67 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800112a:	4b37      	ldr	r3, [pc, #220]	@ (8001208 <MX_ADC1_Init+0x23c>)
 800112c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800112e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001132:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	482b      	ldr	r0, [pc, #172]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 800113a:	f003 fbc7 	bl	80048cc <HAL_ADC_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8001144:	f000 fe58 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001148:	4b30      	ldr	r3, [pc, #192]	@ (800120c <MX_ADC1_Init+0x240>)
 800114a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800114c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001150:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	4619      	mov	r1, r3
 8001156:	4824      	ldr	r0, [pc, #144]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001158:	f003 fbb8 	bl	80048cc <HAL_ADC_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8001162:	f000 fe49 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001166:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <MX_ADC1_Init+0x244>)
 8001168:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800116a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800116e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	481c      	ldr	r0, [pc, #112]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001176:	f003 fba9 	bl	80048cc <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8001180:	f000 fe3a 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001184:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <MX_ADC1_Init+0x248>)
 8001186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800118c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	4815      	ldr	r0, [pc, #84]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 8001194:	f003 fb9a 	bl	80048cc <HAL_ADC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 800119e:	f000 fe2b 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <MX_ADC1_Init+0x24c>)
 80011a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80011a6:	f240 2306 	movw	r3, #518	@ 0x206
 80011aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	4619      	mov	r1, r3
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 80011b2:	f003 fb8b 	bl	80048cc <HAL_ADC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 80011bc:	f000 fe1c 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <MX_ADC1_Init+0x250>)
 80011c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80011c4:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80011c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	@ (80011e8 <MX_ADC1_Init+0x21c>)
 80011d0:	f003 fb7c 	bl	80048cc <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 80011da:	f000 fe0d 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000050 	.word	0x20000050
 80011ec:	42028000 	.word	0x42028000
 80011f0:	04000002 	.word	0x04000002
 80011f4:	08000004 	.word	0x08000004
 80011f8:	0c000008 	.word	0x0c000008
 80011fc:	10000010 	.word	0x10000010
 8001200:	14000020 	.word	0x14000020
 8001204:	1c000080 	.word	0x1c000080
 8001208:	20000100 	.word	0x20000100
 800120c:	2a000400 	.word	0x2a000400
 8001210:	2e000800 	.word	0x2e000800
 8001214:	32001000 	.word	0x32001000
 8001218:	3e008000 	.word	0x3e008000
 800121c:	42010000 	.word	0x42010000

08001220 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	2220      	movs	r2, #32
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f011 fa40 	bl	80126b2 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001232:	4b35      	ldr	r3, [pc, #212]	@ (8001308 <MX_ADC4_Init+0xe8>)
 8001234:	4a35      	ldr	r2, [pc, #212]	@ (800130c <MX_ADC4_Init+0xec>)
 8001236:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001238:	4b33      	ldr	r3, [pc, #204]	@ (8001308 <MX_ADC4_Init+0xe8>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800123e:	4b32      	ldr	r3, [pc, #200]	@ (8001308 <MX_ADC4_Init+0xe8>)
 8001240:	2204      	movs	r2, #4
 8001242:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001244:	4b30      	ldr	r3, [pc, #192]	@ (8001308 <MX_ADC4_Init+0xe8>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 800124a:	4b2f      	ldr	r3, [pc, #188]	@ (8001308 <MX_ADC4_Init+0xe8>)
 800124c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001250:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001252:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <MX_ADC4_Init+0xe8>)
 8001254:	2204      	movs	r2, #4
 8001256:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8001258:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <MX_ADC4_Init+0xe8>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800125e:	4b2a      	ldr	r3, [pc, #168]	@ (8001308 <MX_ADC4_Init+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001264:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <MX_ADC4_Init+0xe8>)
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <MX_ADC4_Init+0xe8>)
 800126e:	2202      	movs	r2, #2
 8001270:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC4_EXTERNALTRIG_T15_TRGO;
 8001272:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <MX_ADC4_Init+0xe8>)
 8001274:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8001278:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <MX_ADC4_Init+0xe8>)
 800127c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001280:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001282:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_ADC4_Init+0xe8>)
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_ADC4_Init+0xe8>)
 800128c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001290:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <MX_ADC4_Init+0xe8>)
 8001294:	2200      	movs	r2, #0
 8001296:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_ADC4_Init+0xe8>)
 800129a:	2200      	movs	r2, #0
 800129c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 800129e:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_ADC4_Init+0xe8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_ADC4_Init+0xe8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80012ac:	4816      	ldr	r0, [pc, #88]	@ (8001308 <MX_ADC4_Init+0xe8>)
 80012ae:	f002 fbdf 	bl	8003a70 <HAL_ADC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC4_Init+0x9c>
  {
    Error_Handler();
 80012b8:	f000 fd9e 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_ADC4_Init+0xf0>)
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c8:	2304      	movs	r3, #4
 80012ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <MX_ADC4_Init+0xe8>)
 80012d6:	f003 faf9 	bl	80048cc <HAL_ADC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC4_Init+0xc4>
  {
    Error_Handler();
 80012e0:	f000 fd8a 	bl	8001df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MX_ADC4_Init+0xf4>)
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 80012e8:	2304      	movs	r3, #4
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_ADC4_Init+0xe8>)
 80012f2:	f003 faeb 	bl	80048cc <HAL_ADC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC4_Init+0xe0>
  {
    Error_Handler();
 80012fc:	f000 fd7c 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200000dc 	.word	0x200000dc
 800130c:	46021000 	.word	0x46021000
 8001310:	1c000080 	.word	0x1c000080
 8001314:	20000100 	.word	0x20000100

08001318 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_DMA2D_Init+0x74>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <MX_DMA2D_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_DMA2D_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_DMA2D_Init+0x74>)
 800132a:	2201      	movs	r2, #1
 800132c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <MX_DMA2D_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <MX_DMA2D_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <MX_DMA2D_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_DMA2D_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_DMA2D_Init+0x74>)
 8001348:	2201      	movs	r2, #1
 800134a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_DMA2D_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_DMA2D_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_DMA2D_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <MX_DMA2D_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001364:	4809      	ldr	r0, [pc, #36]	@ (800138c <MX_DMA2D_Init+0x74>)
 8001366:	f005 f9df 	bl	8006728 <HAL_DMA2D_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 fd42 	bl	8001df8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001374:	2101      	movs	r1, #1
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_DMA2D_Init+0x74>)
 8001378:	f005 fa38 	bl	80067ec <HAL_DMA2D_ConfigLayer>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8001382:	f000 fd39 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000294 	.word	0x20000294
 8001390:	4002b000 	.word	0x4002b000

08001394 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <MX_GPDMA1_Init+0x6c>)
 800139c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a0:	4a17      	ldr	r2, [pc, #92]	@ (8001400 <MX_GPDMA1_Init+0x6c>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <MX_GPDMA1_Init+0x6c>)
 80013ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	201d      	movs	r0, #29
 80013be:	f004 fab1 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80013c2:	201d      	movs	r0, #29
 80013c4:	f004 fac8 	bl	8005958 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	201e      	movs	r0, #30
 80013ce:	f004 faa9 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80013d2:	201e      	movs	r0, #30
 80013d4:	f004 fac0 	bl	8005958 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	201f      	movs	r0, #31
 80013de:	f004 faa1 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 80013e2:	201f      	movs	r0, #31
 80013e4:	f004 fab8 	bl	8005958 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2020      	movs	r0, #32
 80013ee:	f004 fa99 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80013f2:	2020      	movs	r0, #32
 80013f4:	f004 fab0 	bl	8005958 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	46020c00 	.word	0x46020c00

08001404 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_HSPI1_Init+0x74>)
 800140a:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <MX_HSPI1_Init+0x78>)
 800140c:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_HSPI1_Init+0x74>)
 8001410:	2204      	movs	r2, #4
 8001412:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_HSPI1_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_HSPI1_Init+0x74>)
 800141c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001420:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_HSPI1_Init+0x74>)
 8001424:	221a      	movs	r2, #26
 8001426:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8001428:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <MX_HSPI1_Init+0x74>)
 800142a:	2202      	movs	r2, #2
 800142c:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_HSPI1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8001434:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <MX_HSPI1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_HSPI1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8001440:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <MX_HSPI1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <MX_HSPI1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <MX_HSPI1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_HSPI1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <MX_HSPI1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_HSPI1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_HSPI1_Init+0x74>)
 8001466:	f010 fcbd 	bl	8011de4 <HAL_XSPI_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8001470:	f000 fcc2 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002fc 	.word	0x200002fc
 800147c:	420d3400 	.word	0x420d3400

08001480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <MX_I2C1_Init+0x74>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	@ (80014f8 <MX_I2C1_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 800148a:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <MX_I2C1_Init+0x74>)
 800148c:	4a1b      	ldr	r2, [pc, #108]	@ (80014fc <MX_I2C1_Init+0x7c>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001490:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <MX_I2C1_Init+0x74>)
 8001498:	2201      	movs	r2, #1
 800149a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <MX_I2C1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014a2:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <MX_I2C1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <MX_I2C1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_I2C1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <MX_I2C1_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ba:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <MX_I2C1_Init+0x74>)
 80014bc:	f006 fd6c 	bl	8007f98 <HAL_I2C_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014c6:	f000 fc97 	bl	8001df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ca:	2100      	movs	r1, #0
 80014cc:	4809      	ldr	r0, [pc, #36]	@ (80014f4 <MX_I2C1_Init+0x74>)
 80014ce:	f007 fef7 	bl	80092c0 <HAL_I2CEx_ConfigAnalogFilter>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014d8:	f000 fc8e 	bl	8001df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014dc:	2100      	movs	r1, #0
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_I2C1_Init+0x74>)
 80014e0:	f007 ff39 	bl	8009356 <HAL_I2CEx_ConfigDigitalFilter>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 fc85 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000035c 	.word	0x2000035c
 80014f8:	40005400 	.word	0x40005400
 80014fc:	20a0c4df 	.word	0x20a0c4df

08001500 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <MX_I2C2_Init+0x74>)
 8001506:	4a1c      	ldr	r2, [pc, #112]	@ (8001578 <MX_I2C2_Init+0x78>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_I2C2_Init+0x74>)
 800150c:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <MX_I2C2_Init+0x7c>)
 800150e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_I2C2_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <MX_I2C2_Init+0x74>)
 8001518:	2201      	movs	r2, #1
 800151a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800151c:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_I2C2_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001522:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <MX_I2C2_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <MX_I2C2_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_I2C2_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_I2C2_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800153a:	480e      	ldr	r0, [pc, #56]	@ (8001574 <MX_I2C2_Init+0x74>)
 800153c:	f006 fd2c 	bl	8007f98 <HAL_I2C_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001546:	f000 fc57 	bl	8001df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800154a:	2100      	movs	r1, #0
 800154c:	4809      	ldr	r0, [pc, #36]	@ (8001574 <MX_I2C2_Init+0x74>)
 800154e:	f007 feb7 	bl	80092c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001558:	f000 fc4e 	bl	8001df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800155c:	2100      	movs	r1, #0
 800155e:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_I2C2_Init+0x74>)
 8001560:	f007 fef9 	bl	8009356 <HAL_I2CEx_ConfigDigitalFilter>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800156a:	f000 fc45 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200003b0 	.word	0x200003b0
 8001578:	40005800 	.word	0x40005800
 800157c:	20a0c4df 	.word	0x20a0c4df

08001580 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001584:	2000      	movs	r0, #0
 8001586:	f007 ff33 	bl	80093f0 <HAL_ICACHE_ConfigAssociativityMode>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001590:	f000 fc32 	bl	8001df8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001594:	f007 ff4c 	bl	8009430 <HAL_ICACHE_Enable>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800159e:	f000 fc2b 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	@ 0x38
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2234      	movs	r2, #52	@ 0x34
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f011 f87c 	bl	80126b2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015ba:	4b39      	ldr	r3, [pc, #228]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015bc:	4a39      	ldr	r2, [pc, #228]	@ (80016a4 <MX_LTDC_Init+0xfc>)
 80015be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015c0:	4b37      	ldr	r3, [pc, #220]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015c6:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015cc:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015d2:	4b33      	ldr	r3, [pc, #204]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 80015d8:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015da:	2203      	movs	r2, #3
 80015dc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80015de:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015e0:	2203      	movs	r2, #3
 80015e2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 80015e4:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015e6:	220b      	movs	r2, #11
 80015e8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80015ea:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015ec:	220b      	movs	r2, #11
 80015ee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015f2:	f240 322b 	movw	r2, #811	@ 0x32b
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 80015f8:	4b29      	ldr	r3, [pc, #164]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 80015fa:	f240 12eb 	movw	r2, #491	@ 0x1eb
 80015fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 8001602:	f240 3233 	movw	r2, #819	@ 0x333
 8001606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8001608:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 800160a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800160e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001628:	481d      	ldr	r0, [pc, #116]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 800162a:	f007 ff11 	bl	8009450 <HAL_LTDC_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001634:	f000 fbe0 	bl	8001df8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 800163c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001640:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001646:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800164a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800164c:	2301      	movs	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001650:	23ff      	movs	r3, #255	@ 0xff
 8001652:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001658:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800165c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800165e:	2307      	movs	r3, #7
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	@ (80016a0 <MX_LTDC_Init+0xf8>)
 8001688:	f008 f874 	bl	8009774 <HAL_LTDC_ConfigLayer>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001692:	f000 fbb1 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3738      	adds	r7, #56	@ 0x38
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000404 	.word	0x20000404
 80016a4:	40016800 	.word	0x40016800

080016a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
 80016bc:	615a      	str	r2, [r3, #20]
 80016be:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <MX_RTC_Init+0x94>)
 80016c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001740 <MX_RTC_Init+0x98>)
 80016c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <MX_RTC_Init+0x94>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <MX_RTC_Init+0x94>)
 80016ce:	227f      	movs	r2, #127	@ 0x7f
 80016d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_RTC_Init+0x94>)
 80016d4:	22ff      	movs	r2, #255	@ 0xff
 80016d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016d8:	4b18      	ldr	r3, [pc, #96]	@ (800173c <MX_RTC_Init+0x94>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016de:	4b17      	ldr	r3, [pc, #92]	@ (800173c <MX_RTC_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <MX_RTC_Init+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <MX_RTC_Init+0x94>)
 80016ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016f0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <MX_RTC_Init+0x94>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80016f8:	4b10      	ldr	r3, [pc, #64]	@ (800173c <MX_RTC_Init+0x94>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016fe:	480f      	ldr	r0, [pc, #60]	@ (800173c <MX_RTC_Init+0x94>)
 8001700:	f00c ff34 	bl	800e56c <HAL_RTC_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800170a:	f000 fb75 	bl	8001df8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	@ (800173c <MX_RTC_Init+0x94>)
 8001724:	f00d f850 	bl	800e7c8 <HAL_RTCEx_PrivilegeModeSet>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800172e:	f000 fb63 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200004ac 	.word	0x200004ac
 8001740:	46007800 	.word	0x46007800

08001744 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001748:	4b30      	ldr	r3, [pc, #192]	@ (800180c <MX_SAI2_Init+0xc8>)
 800174a:	4a31      	ldr	r2, [pc, #196]	@ (8001810 <MX_SAI2_Init+0xcc>)
 800174c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800174e:	4b2f      	ldr	r3, [pc, #188]	@ (800180c <MX_SAI2_Init+0xc8>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001754:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <MX_SAI2_Init+0xc8>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800175a:	4b2c      	ldr	r3, [pc, #176]	@ (800180c <MX_SAI2_Init+0xc8>)
 800175c:	2200      	movs	r2, #0
 800175e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001760:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <MX_SAI2_Init+0xc8>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001766:	4b29      	ldr	r3, [pc, #164]	@ (800180c <MX_SAI2_Init+0xc8>)
 8001768:	2200      	movs	r2, #0
 800176a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800176c:	4b27      	ldr	r3, [pc, #156]	@ (800180c <MX_SAI2_Init+0xc8>)
 800176e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001772:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001774:	4b25      	ldr	r3, [pc, #148]	@ (800180c <MX_SAI2_Init+0xc8>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 800177a:	4b24      	ldr	r3, [pc, #144]	@ (800180c <MX_SAI2_Init+0xc8>)
 800177c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001780:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001782:	4b22      	ldr	r3, [pc, #136]	@ (800180c <MX_SAI2_Init+0xc8>)
 8001784:	2200      	movs	r2, #0
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001788:	4b20      	ldr	r3, [pc, #128]	@ (800180c <MX_SAI2_Init+0xc8>)
 800178a:	2200      	movs	r2, #0
 800178c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 800178e:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <MX_SAI2_Init+0xc8>)
 8001790:	2210      	movs	r2, #16
 8001792:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001794:	2302      	movs	r3, #2
 8001796:	2202      	movs	r2, #2
 8001798:	2101      	movs	r1, #1
 800179a:	481c      	ldr	r0, [pc, #112]	@ (800180c <MX_SAI2_Init+0xc8>)
 800179c:	f00d f842 	bl	800e824 <HAL_SAI_InitProtocol>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_SAI2_Init+0x66>
  {
    Error_Handler();
 80017a6:	f000 fb27 	bl	8001df8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001818 <MX_SAI2_Init+0xd4>)
 80017ae:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017ca:	2202      	movs	r2, #2
 80017cc:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017d0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80017d4:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80017dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017e2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80017f0:	2308      	movs	r3, #8
 80017f2:	2202      	movs	r2, #2
 80017f4:	2100      	movs	r1, #0
 80017f6:	4807      	ldr	r0, [pc, #28]	@ (8001814 <MX_SAI2_Init+0xd0>)
 80017f8:	f00d f814 	bl	800e824 <HAL_SAI_InitProtocol>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_SAI2_Init+0xc2>
  {
    Error_Handler();
 8001802:	f000 faf9 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200004dc 	.word	0x200004dc
 8001810:	40015804 	.word	0x40015804
 8001814:	20000574 	.word	0x20000574
 8001818:	40015824 	.word	0x40015824

0800181c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	@ 0x28
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182e:	463b      	mov	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001840:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 8001842:	4a26      	ldr	r2, [pc, #152]	@ (80018dc <MX_TIM3_Init+0xc0>)
 8001844:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 8001848:	22a0      	movs	r2, #160	@ 0xa0
 800184a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 8001854:	2264      	movs	r2, #100	@ 0x64
 8001856:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001864:	481c      	ldr	r0, [pc, #112]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 8001866:	f00d ffb7 	bl	800f7d8 <HAL_TIM_PWM_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001870:	f000 fac2 	bl	8001df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	4815      	ldr	r0, [pc, #84]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 8001884:	f00f f904 	bl	8010a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800188e:	f000 fab3 	bl	8001df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001892:	2360      	movs	r3, #96	@ 0x60
 8001894:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001896:	234b      	movs	r3, #75	@ 0x4b
 8001898:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018a2:	463b      	mov	r3, r7
 80018a4:	220c      	movs	r2, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	480b      	ldr	r0, [pc, #44]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 80018aa:	f00e f93b 	bl	800fb24 <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80018b4:	f000 faa0 	bl	8001df8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 80018b8:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018c6:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018c8:	4803      	ldr	r0, [pc, #12]	@ (80018d8 <MX_TIM3_Init+0xbc>)
 80018ca:	f001 f857 	bl	800297c <HAL_TIM_MspPostInit>

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	@ 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000774 	.word	0x20000774
 80018dc:	40000400 	.word	0x40000400

080018e0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <MX_TIM15_Init+0x98>)
 8001900:	4a1e      	ldr	r2, [pc, #120]	@ (800197c <MX_TIM15_Init+0x9c>)
 8001902:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001904:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_TIM15_Init+0x98>)
 8001906:	221a      	movs	r2, #26
 8001908:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <MX_TIM15_Init+0x98>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <MX_TIM15_Init+0x98>)
 8001912:	2231      	movs	r2, #49	@ 0x31
 8001914:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <MX_TIM15_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <MX_TIM15_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <MX_TIM15_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001928:	4813      	ldr	r0, [pc, #76]	@ (8001978 <MX_TIM15_Init+0x98>)
 800192a:	f00d fdc6 	bl	800f4ba <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001934:	f000 fa60 	bl	8001df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <MX_TIM15_Init+0x98>)
 8001946:	f00e fa01 	bl	800fd4c <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001950:	f000 fa52 	bl	8001df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001954:	2320      	movs	r3, #32
 8001956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	@ (8001978 <MX_TIM15_Init+0x98>)
 8001962:	f00f f895 	bl	8010a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 800196c:	f000 fa44 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200007c0 	.word	0x200007c0
 800197c:	40014000 	.word	0x40014000

08001980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001984:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 8001986:	4a23      	ldr	r2, [pc, #140]	@ (8001a14 <MX_USART1_UART_Init+0x94>)
 8001988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800198a:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 800198c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800199e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c2:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019c8:	4811      	ldr	r0, [pc, #68]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019ca:	f00f f969 	bl	8010ca0 <HAL_UART_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019d4:	f000 fa10 	bl	8001df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d8:	2100      	movs	r1, #0
 80019da:	480d      	ldr	r0, [pc, #52]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019dc:	f010 f937 	bl	8011c4e <HAL_UARTEx_SetTxFifoThreshold>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019e6:	f000 fa07 	bl	8001df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ea:	2100      	movs	r1, #0
 80019ec:	4808      	ldr	r0, [pc, #32]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019ee:	f010 f96c 	bl	8011cca <HAL_UARTEx_SetRxFifoThreshold>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019f8:	f000 f9fe 	bl	8001df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <MX_USART1_UART_Init+0x90>)
 80019fe:	f010 f8ed 	bl	8011bdc <HAL_UARTEx_DisableFifoMode>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a08:	f000 f9f6 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000080c 	.word	0x2000080c
 8001a14:	40013800 	.word	0x40013800

08001a18 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a1e:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001a20:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a24:	2209      	movs	r2, #9
 8001a26:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001a28:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a30:	2203      	movs	r2, #3
 8001a32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001a34:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001a58:	4804      	ldr	r0, [pc, #16]	@ (8001a6c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001a5a:	f008 f83c 	bl	8009ad6 <HAL_PCD_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8001a64:	f000 f9c8 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200008a0 	.word	0x200008a0
 8001a70:	42040000 	.word	0x42040000

08001a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08e      	sub	sp, #56	@ 0x38
 8001a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a90:	4a8a      	ldr	r2, [pc, #552]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a9a:	4b88      	ldr	r3, [pc, #544]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	623b      	str	r3, [r7, #32]
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa8:	4b84      	ldr	r3, [pc, #528]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aae:	4a83      	ldr	r2, [pc, #524]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ab8:	4b80      	ldr	r3, [pc, #512]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac6:	4b7d      	ldr	r3, [pc, #500]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001acc:	4a7b      	ldr	r2, [pc, #492]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001ace:	f043 0320 	orr.w	r3, r3, #32
 8001ad2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ad6:	4b79      	ldr	r3, [pc, #484]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae4:	4b75      	ldr	r3, [pc, #468]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aea:	4a74      	ldr	r2, [pc, #464]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001af4:	4b71      	ldr	r3, [pc, #452]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	4b6e      	ldr	r3, [pc, #440]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b08:	4a6c      	ldr	r2, [pc, #432]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b12:	4b6a      	ldr	r3, [pc, #424]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b66      	ldr	r3, [pc, #408]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b26:	4a65      	ldr	r2, [pc, #404]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b30:	4b62      	ldr	r3, [pc, #392]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b44:	4a5d      	ldr	r2, [pc, #372]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5c:	4b57      	ldr	r3, [pc, #348]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b62:	4a56      	ldr	r2, [pc, #344]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b6c:	4b53      	ldr	r3, [pc, #332]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b7a:	4b50      	ldr	r3, [pc, #320]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b80:	4a4e      	ldr	r2, [pc, #312]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8001cbc <MX_GPIO_Init+0x248>)
 8001b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	4848      	ldr	r0, [pc, #288]	@ (8001cc0 <MX_GPIO_Init+0x24c>)
 8001b9e:	f006 f98d 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	4846      	ldr	r0, [pc, #280]	@ (8001cc0 <MX_GPIO_Init+0x24c>)
 8001ba8:	f006 f988 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2114      	movs	r1, #20
 8001bb0:	4844      	ldr	r0, [pc, #272]	@ (8001cc4 <MX_GPIO_Init+0x250>)
 8001bb2:	f006 f983 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001bb6:	2314      	movs	r3, #20
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bca:	4619      	mov	r1, r3
 8001bcc:	483c      	ldr	r0, [pc, #240]	@ (8001cc0 <MX_GPIO_Init+0x24c>)
 8001bce:	f005 ff9d 	bl	8007b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc8 <MX_GPIO_Init+0x254>)
 8001bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	4836      	ldr	r0, [pc, #216]	@ (8001cc0 <MX_GPIO_Init+0x24c>)
 8001be6:	f005 ff91 	bl	8007b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001bea:	2302      	movs	r3, #2
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bee:	4b37      	ldr	r3, [pc, #220]	@ (8001ccc <MX_GPIO_Init+0x258>)
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4834      	ldr	r0, [pc, #208]	@ (8001cd0 <MX_GPIO_Init+0x25c>)
 8001bfe:	f005 ff85 	bl	8007b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001c02:	2310      	movs	r3, #16
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c06:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <MX_GPIO_Init+0x260>)
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c12:	4619      	mov	r1, r3
 8001c14:	482e      	ldr	r0, [pc, #184]	@ (8001cd0 <MX_GPIO_Init+0x25c>)
 8001c16:	f005 ff79 	bl	8007b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001c1a:	2314      	movs	r3, #20
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4824      	ldr	r0, [pc, #144]	@ (8001cc4 <MX_GPIO_Init+0x250>)
 8001c32:	f005 ff6b 	bl	8007b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8001c36:	2380      	movs	r3, #128	@ 0x80
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c46:	4619      	mov	r1, r3
 8001c48:	481e      	ldr	r0, [pc, #120]	@ (8001cc4 <MX_GPIO_Init+0x250>)
 8001c4a:	f005 ff5f 	bl	8007b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 8001c4e:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c60:	4619      	mov	r1, r3
 8001c62:	481d      	ldr	r0, [pc, #116]	@ (8001cd8 <MX_GPIO_Init+0x264>)
 8001c64:	f005 ff52 	bl	8007b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001c68:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4817      	ldr	r0, [pc, #92]	@ (8001cdc <MX_GPIO_Init+0x268>)
 8001c7e:	f005 ff45 	bl	8007b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	200c      	movs	r0, #12
 8001c88:	f003 fe4c 	bl	8005924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c8c:	200c      	movs	r0, #12
 8001c8e:	f003 fe63 	bl	8005958 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	200f      	movs	r0, #15
 8001c98:	f003 fe44 	bl	8005924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c9c:	200f      	movs	r0, #15
 8001c9e:	f003 fe5b 	bl	8005958 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2010      	movs	r0, #16
 8001ca8:	f003 fe3c 	bl	8005924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001cac:	2010      	movs	r0, #16
 8001cae:	f003 fe53 	bl	8005958 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb2:	bf00      	nop
 8001cb4:	3738      	adds	r7, #56	@ 0x38
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	46020c00 	.word	0x46020c00
 8001cc0:	42021000 	.word	0x42021000
 8001cc4:	42020c00 	.word	0x42020c00
 8001cc8:	10110000 	.word	0x10110000
 8001ccc:	10310000 	.word	0x10310000
 8001cd0:	42020000 	.word	0x42020000
 8001cd4:	10210000 	.word	0x10210000
 8001cd8:	42021800 	.word	0x42021800
 8001cdc:	42020400 	.word	0x42020400

08001ce0 <signExtend24>:

/* USER CODE BEGIN 4 */

static inline int32_t signExtend24(uint32_t value)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    return (int32_t)((value & (1 << 23)) ? value | 0xFF000000 : value & 0x007FFFFF);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <signExtend24+0x1a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cf8:	e002      	b.n	8001d00 <signExtend24+0x20>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <volumeLRPoll>:

static void volumeLRPoll(uint16_t index)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
//	  //Channel 5 LR
//	  channels[4].lr = adcGroup4[c5LR];
//
//	  //Channel 6 LR
//	  channels[5].lr = adcGroup4[c6LR];
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	adcReady = true;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <HAL_SAI_RxHalfCpltCallback+0x20>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[0];
 8001d32:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <HAL_SAI_RxHalfCpltCallback+0x24>)
 8001d34:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <HAL_SAI_RxHalfCpltCallback+0x28>)
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	20033b90 	.word	0x20033b90
 8001d48:	20033b94 	.word	0x20033b94
 8001d4c:	2002c990 	.word	0x2002c990

08001d50 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	adcReady = true;
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_SAI_RxCpltCallback+0x20>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[sampleSize * (channelCount / 2)];
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_SAI_RxCpltCallback+0x24>)
 8001d60:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <HAL_SAI_RxCpltCallback+0x28>)
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	20033b90 	.word	0x20033b90
 8001d74:	20033b94 	.word	0x20033b94
 8001d78:	2002e990 	.word	0x2002e990

08001d7c <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_SAI_TxHalfCpltCallback+0x20>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[0];
 8001d8a:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_SAI_TxHalfCpltCallback+0x24>)
 8001d8c:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <HAL_SAI_TxHalfCpltCallback+0x28>)
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	20033b91 	.word	0x20033b91
 8001da0:	20033b98 	.word	0x20033b98
 8001da4:	20030990 	.word	0x20030990

08001da8 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_SAI_TxCpltCallback+0x20>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[sampleSize];
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <HAL_SAI_TxCpltCallback+0x24>)
 8001db8:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <HAL_SAI_TxCpltCallback+0x28>)
 8001dba:	601a      	str	r2, [r3, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	20033b91 	.word	0x20033b91
 8001dcc:	20033b98 	.word	0x20033b98
 8001dd0:	20031190 	.word	0x20031190

08001dd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001de6:	f001 fa85 	bl	80032f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40001000 	.word	0x40001000

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfc:	b672      	cpsid	i
}
 8001dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <Error_Handler+0x8>

08001e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_MspInit+0x30>)
 8001e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e10:	4a08      	ldr	r2, [pc, #32]	@ (8001e34 <HAL_MspInit+0x30>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_MspInit+0x30>)
 8001e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001e28:	f008 f892 	bl	8009f50 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	46020c00 	.word	0x46020c00

08001e38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b0e4      	sub	sp, #400	@ 0x190
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e42:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e46:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  DMA_TriggerConfTypeDef TriggerConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e58:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e5c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e60:	4618      	mov	r0, r3
 8001e62:	23e0      	movs	r3, #224	@ 0xe0
 8001e64:	461a      	mov	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	f010 fc23 	bl	80126b2 <memset>
  if(hadc->Instance==ADC1)
 8001e6c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e70:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4aa1      	ldr	r2, [pc, #644]	@ (8002100 <HAL_ADC_MspInit+0x2c8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	f040 8152 	bne.w	8002124 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001e80:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e84:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8001e88:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001e94:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e98:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ea0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea4:	f107 0320 	add.w	r3, r7, #32
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f009 fb63 	bl	800b574 <HAL_RCCEx_PeriphCLKConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001eb4:	f7ff ffa0 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001eb8:	4b92      	ldr	r3, [pc, #584]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ebe:	4a91      	ldr	r2, [pc, #580]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001ec0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ec4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ec8:	4b8e      	ldr	r3, [pc, #568]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ece:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001ed2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001ed6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001ee0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ee4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	4b87      	ldr	r3, [pc, #540]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eec:	4a85      	ldr	r2, [pc, #532]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ef6:	4b83      	ldr	r3, [pc, #524]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001efc:	f003 0204 	and.w	r2, r3, #4
 8001f00:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f04:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f0e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001f12:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b7b      	ldr	r3, [pc, #492]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f1a:	4a7a      	ldr	r2, [pc, #488]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f24:	4b77      	ldr	r3, [pc, #476]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f2a:	f003 0201 	and.w	r2, r3, #1
 8001f2e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f32:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f3c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001f40:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	4b70      	ldr	r3, [pc, #448]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f48:	4a6e      	ldr	r2, [pc, #440]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f52:	4b6c      	ldr	r3, [pc, #432]	@ (8002104 <HAL_ADC_MspInit+0x2cc>)
 8001f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f58:	f003 0202 	and.w	r2, r3, #2
 8001f5c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f60:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f6a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001f6e:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8001f70:	230f      	movs	r3, #15
 8001f72:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f76:	2303      	movs	r3, #3
 8001f78:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f82:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001f86:	4619      	mov	r1, r3
 8001f88:	485f      	ldr	r0, [pc, #380]	@ (8002108 <HAL_ADC_MspInit+0x2d0>)
 8001f8a:	f005 fdbf 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8001f8e:	23ed      	movs	r3, #237	@ 0xed
 8001f90:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f94:	2303      	movs	r3, #3
 8001f96:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4859      	ldr	r0, [pc, #356]	@ (800210c <HAL_ADC_MspInit+0x2d4>)
 8001fa8:	f005 fdb0 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8001fac:	2303      	movs	r3, #3
 8001fae:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbe:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4852      	ldr	r0, [pc, #328]	@ (8002110 <HAL_ADC_MspInit+0x2d8>)
 8001fc6:	f005 fda1 	bl	8007b0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001fca:	2321      	movs	r3, #33	@ 0x21
 8001fcc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001fe8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001fec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001ff6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ffa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.SrcBurstLength = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.DestBurstLength = 1;
 8002004:	2301      	movs	r3, #1
 8002006:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800200a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800200e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8002024:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002028:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 800202c:	232b      	movs	r3, #43	@ 0x2b
 800202e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 800203e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002042:	4934      	ldr	r1, [pc, #208]	@ (8002114 <HAL_ADC_MspInit+0x2dc>)
 8002044:	4618      	mov	r0, r3
 8002046:	f004 fe3f 	bl	8006cc8 <HAL_DMAEx_List_BuildNode>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 8002050:	f7ff fed2 	bl	8001df8 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8002054:	4a2f      	ldr	r2, [pc, #188]	@ (8002114 <HAL_ADC_MspInit+0x2dc>)
 8002056:	2100      	movs	r1, #0
 8002058:	482f      	ldr	r0, [pc, #188]	@ (8002118 <HAL_ADC_MspInit+0x2e0>)
 800205a:	f004 fe61 	bl	8006d20 <HAL_DMAEx_List_InsertNode>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 8002064:	f7ff fec8 	bl	8001df8 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8002068:	482b      	ldr	r0, [pc, #172]	@ (8002118 <HAL_ADC_MspInit+0x2e0>)
 800206a:	f004 ff22 	bl	8006eb2 <HAL_DMAEx_List_SetCircularMode>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 8002074:	f7ff fec0 	bl	8001df8 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8002078:	4b28      	ldr	r3, [pc, #160]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 800207a:	4a29      	ldr	r2, [pc, #164]	@ (8002120 <HAL_ADC_MspInit+0x2e8>)
 800207c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800207e:	4b27      	ldr	r3, [pc, #156]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 8002080:	2200      	movs	r2, #0
 8002082:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002084:	4b25      	ldr	r3, [pc, #148]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 8002086:	2200      	movs	r2, #0
 8002088:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800208a:	4b24      	ldr	r3, [pc, #144]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 800208c:	2200      	movs	r2, #0
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002090:	4b22      	ldr	r3, [pc, #136]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 8002092:	2200      	movs	r2, #0
 8002094:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002096:	4b21      	ldr	r3, [pc, #132]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 8002098:	2281      	movs	r2, #129	@ 0x81
 800209a:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800209c:	481f      	ldr	r0, [pc, #124]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 800209e:	f004 fc53 	bl	8006948 <HAL_DMAEx_List_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 80020a8:	f7ff fea6 	bl	8001df8 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80020ac:	491a      	ldr	r1, [pc, #104]	@ (8002118 <HAL_ADC_MspInit+0x2e0>)
 80020ae:	481b      	ldr	r0, [pc, #108]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 80020b0:	f004 ff60 	bl	8006f74 <HAL_DMAEx_List_LinkQ>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 80020ba:	f7ff fe9d 	bl	8001df8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 80020be:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80020c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a14      	ldr	r2, [pc, #80]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 80020ca:	671a      	str	r2, [r3, #112]	@ 0x70
 80020cc:	4a13      	ldr	r2, [pc, #76]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 80020ce:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80020d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80020da:	2110      	movs	r1, #16
 80020dc:	480f      	ldr	r0, [pc, #60]	@ (800211c <HAL_ADC_MspInit+0x2e4>)
 80020de:	f004 f841 	bl	8006164 <HAL_DMA_ConfigChannelAttributes>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 80020e8:	f7ff fe86 	bl	8001df8 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2025      	movs	r0, #37	@ 0x25
 80020f2:	f003 fc17 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020f6:	2025      	movs	r0, #37	@ 0x25
 80020f8:	f003 fc2e 	bl	8005958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80020fc:	e0d5      	b.n	80022aa <HAL_ADC_MspInit+0x472>
 80020fe:	bf00      	nop
 8002100:	42028000 	.word	0x42028000
 8002104:	46020c00 	.word	0x46020c00
 8002108:	42020800 	.word	0x42020800
 800210c:	42020000 	.word	0x42020000
 8002110:	42020400 	.word	0x42020400
 8002114:	20000168 	.word	0x20000168
 8002118:	2000018c 	.word	0x2000018c
 800211c:	200001a4 	.word	0x200001a4
 8002120:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8002124:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002128:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a60      	ldr	r2, [pc, #384]	@ (80022b4 <HAL_ADC_MspInit+0x47c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	f040 80b9 	bne.w	80022aa <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002138:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800213c:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8002140:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800214c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002150:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002154:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002158:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800215c:	f107 0320 	add.w	r3, r7, #32
 8002160:	4618      	mov	r0, r3
 8002162:	f009 fa07 	bl	800b574 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 800216c:	f7ff fe44 	bl	8001df8 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8002170:	4b51      	ldr	r3, [pc, #324]	@ (80022b8 <HAL_ADC_MspInit+0x480>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002176:	4a50      	ldr	r2, [pc, #320]	@ (80022b8 <HAL_ADC_MspInit+0x480>)
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002180:	4b4d      	ldr	r3, [pc, #308]	@ (80022b8 <HAL_ADC_MspInit+0x480>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002186:	f003 0220 	and.w	r2, r3, #32
 800218a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800218e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002198:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800219c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800219e:	4b46      	ldr	r3, [pc, #280]	@ (80022b8 <HAL_ADC_MspInit+0x480>)
 80021a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a4:	4a44      	ldr	r2, [pc, #272]	@ (80022b8 <HAL_ADC_MspInit+0x480>)
 80021a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021ae:	4b42      	ldr	r3, [pc, #264]	@ (80022b8 <HAL_ADC_MspInit+0x480>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b4:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80021b8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80021bc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80021c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80021ca:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 80021cc:	2303      	movs	r3, #3
 80021ce:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d2:	2303      	movs	r3, #3
 80021d4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021de:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80021e2:	4619      	mov	r1, r3
 80021e4:	4835      	ldr	r0, [pc, #212]	@ (80022bc <HAL_ADC_MspInit+0x484>)
 80021e6:	f005 fc91 	bl	8007b0c <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80021ea:	4b35      	ldr	r3, [pc, #212]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 80021ec:	4a35      	ldr	r2, [pc, #212]	@ (80022c4 <HAL_ADC_MspInit+0x48c>)
 80021ee:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 80021f0:	4b33      	ldr	r3, [pc, #204]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80021f6:	4b32      	ldr	r3, [pc, #200]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021fc:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8002202:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8002208:	4b2d      	ldr	r3, [pc, #180]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 800220a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800220e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002210:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 8002212:	2201      	movs	r2, #1
 8002214:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002216:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 8002218:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800221c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800221e:	4b28      	ldr	r3, [pc, #160]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8002224:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 8002226:	2201      	movs	r2, #1
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 800222a:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 800222c:	2201      	movs	r2, #1
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002230:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 8002232:	2200      	movs	r2, #0
 8002234:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002236:	4b22      	ldr	r3, [pc, #136]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 800223c:	4b20      	ldr	r3, [pc, #128]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 800223e:	2200      	movs	r2, #0
 8002240:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8002242:	481f      	ldr	r0, [pc, #124]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 8002244:	f003 fbee 	bl	8005a24 <HAL_DMA_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 800224e:	f7ff fdd3 	bl	8001df8 <Error_Handler>
    TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8002258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800225c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8002260:	232b      	movs	r3, #43	@ 0x2b
 8002262:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (HAL_DMAEx_ConfigTrigger(&handle_GPDMA1_Channel2, &TriggerConfig) != HAL_OK)
 8002266:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800226a:	4619      	mov	r1, r3
 800226c:	4814      	ldr	r0, [pc, #80]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 800226e:	f004 ff17 	bl	80070a0 <HAL_DMAEx_ConfigTrigger>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_ADC_MspInit+0x444>
      Error_Handler();
 8002278:	f7ff fdbe 	bl	8001df8 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 800227c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002280:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a0e      	ldr	r2, [pc, #56]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 8002288:	671a      	str	r2, [r3, #112]	@ 0x70
 800228a:	4a0d      	ldr	r2, [pc, #52]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 800228c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002290:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002298:	2110      	movs	r1, #16
 800229a:	4809      	ldr	r0, [pc, #36]	@ (80022c0 <HAL_ADC_MspInit+0x488>)
 800229c:	f003 ff62 	bl	8006164 <HAL_DMA_ConfigChannelAttributes>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_ADC_MspInit+0x472>
      Error_Handler();
 80022a6:	f7ff fda7 	bl	8001df8 <Error_Handler>
}
 80022aa:	bf00      	nop
 80022ac:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	46021000 	.word	0x46021000
 80022b8:	46020c00 	.word	0x46020c00
 80022bc:	42021800 	.word	0x42021800
 80022c0:	2000021c 	.word	0x2000021c
 80022c4:	40020150 	.word	0x40020150

080022c8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002304 <HAL_DMA2D_MspInit+0x3c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10e      	bne.n	80022f8 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80022da:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HAL_DMA2D_MspInit+0x40>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e0:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <HAL_DMA2D_MspInit+0x40>)
 80022e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80022ea:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <HAL_DMA2D_MspInit+0x40>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	4002b000 	.word	0x4002b000
 8002308:	46020c00 	.word	0x46020c00

0800230c <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	@ 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2a      	ldr	r2, [pc, #168]	@ (80023d4 <HAL_XSPI_MspInit+0xc8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d14d      	bne.n	80023ca <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 800232e:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <HAL_XSPI_MspInit+0xcc>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002334:	4a28      	ldr	r2, [pc, #160]	@ (80023d8 <HAL_XSPI_MspInit+0xcc>)
 8002336:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800233e:	4b26      	ldr	r3, [pc, #152]	@ (80023d8 <HAL_XSPI_MspInit+0xcc>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800234c:	4b22      	ldr	r3, [pc, #136]	@ (80023d8 <HAL_XSPI_MspInit+0xcc>)
 800234e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002352:	4a21      	ldr	r2, [pc, #132]	@ (80023d8 <HAL_XSPI_MspInit+0xcc>)
 8002354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002358:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800235c:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <HAL_XSPI_MspInit+0xcc>)
 800235e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800236a:	4b1b      	ldr	r3, [pc, #108]	@ (80023d8 <HAL_XSPI_MspInit+0xcc>)
 800236c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002370:	4a19      	ldr	r2, [pc, #100]	@ (80023d8 <HAL_XSPI_MspInit+0xcc>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002376:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800237a:	4b17      	ldr	r3, [pc, #92]	@ (80023d8 <HAL_XSPI_MspInit+0xcc>)
 800237c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8002388:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 800238c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 800239a:	2308      	movs	r3, #8
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	480d      	ldr	r0, [pc, #52]	@ (80023dc <HAL_XSPI_MspInit+0xd0>)
 80023a6:	f005 fbb1 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80023aa:	230f      	movs	r3, #15
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80023ba:	2308      	movs	r3, #8
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	4619      	mov	r1, r3
 80023c4:	4806      	ldr	r0, [pc, #24]	@ (80023e0 <HAL_XSPI_MspInit+0xd4>)
 80023c6:	f005 fba1 	bl	8007b0c <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	@ 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	420d3400 	.word	0x420d3400
 80023d8:	46020c00 	.word	0x46020c00
 80023dc:	42021c00 	.word	0x42021c00
 80023e0:	42022000 	.word	0x42022000

080023e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0c4      	sub	sp, #272	@ 0x110
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023f2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002404:	f107 0318 	add.w	r3, r7, #24
 8002408:	22e0      	movs	r2, #224	@ 0xe0
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f010 f950 	bl	80126b2 <memset>
  if(hi2c->Instance==I2C1)
 8002412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002416:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a63      	ldr	r2, [pc, #396]	@ (80025ac <HAL_I2C_MspInit+0x1c8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d14f      	bne.n	80024c4 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002424:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002436:	f107 0318 	add.w	r3, r7, #24
 800243a:	4618      	mov	r0, r3
 800243c:	f009 f89a 	bl	800b574 <HAL_RCCEx_PeriphCLKConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002446:	f7ff fcd7 	bl	8001df8 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800244a:	4b59      	ldr	r3, [pc, #356]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 800244c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002450:	4a57      	ldr	r2, [pc, #348]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 8002452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002456:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800245a:	4b55      	ldr	r3, [pc, #340]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 800245c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002468:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800246c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002470:	2312      	movs	r3, #18
 8002472:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002482:	2304      	movs	r3, #4
 8002484:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002488:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800248c:	4619      	mov	r1, r3
 800248e:	4849      	ldr	r0, [pc, #292]	@ (80025b4 <HAL_I2C_MspInit+0x1d0>)
 8002490:	f005 fb3c 	bl	8007b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002494:	4b46      	ldr	r3, [pc, #280]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 8002496:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800249a:	4a45      	ldr	r2, [pc, #276]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 800249c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024a0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80024a4:	4b42      	ldr	r3, [pc, #264]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 80024a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024aa:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80024ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024b2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024c0:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024c2:	e06e      	b.n	80025a2 <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 80024c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a39      	ldr	r2, [pc, #228]	@ (80025b8 <HAL_I2C_MspInit+0x1d4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d165      	bne.n	80025a2 <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024d6:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e8:	f107 0318 	add.w	r3, r7, #24
 80024ec:	4618      	mov	r0, r3
 80024ee:	f009 f841 	bl	800b574 <HAL_RCCEx_PeriphCLKConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_MspInit+0x118>
      Error_Handler();
 80024f8:	f7ff fc7e 	bl	8001df8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024fc:	4b2c      	ldr	r3, [pc, #176]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 80024fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002502:	4a2b      	ldr	r2, [pc, #172]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 8002504:	f043 0320 	orr.w	r3, r3, #32
 8002508:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800250c:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 800250e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002512:	f003 0220 	and.w	r2, r3, #32
 8002516:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800251a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002528:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800252a:	2303      	movs	r3, #3
 800252c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002530:	2312      	movs	r3, #18
 8002532:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002542:	2304      	movs	r3, #4
 8002544:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002548:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800254c:	4619      	mov	r1, r3
 800254e:	481b      	ldr	r0, [pc, #108]	@ (80025bc <HAL_I2C_MspInit+0x1d8>)
 8002550:	f005 fadc 	bl	8007b0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002554:	4b16      	ldr	r3, [pc, #88]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 8002556:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800255a:	4a15      	ldr	r2, [pc, #84]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 800255c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002560:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <HAL_I2C_MspInit+0x1cc>)
 8002566:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800256a:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800256e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800257c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002580:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	2039      	movs	r0, #57	@ 0x39
 8002588:	f003 f9cc 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800258c:	2039      	movs	r0, #57	@ 0x39
 800258e:	f003 f9e3 	bl	8005958 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	203a      	movs	r0, #58	@ 0x3a
 8002598:	f003 f9c4 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800259c:	203a      	movs	r0, #58	@ 0x3a
 800259e:	f003 f9db 	bl	8005958 <HAL_NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40005400 	.word	0x40005400
 80025b0:	46020c00 	.word	0x46020c00
 80025b4:	42021800 	.word	0x42021800
 80025b8:	40005800 	.word	0x40005800
 80025bc:	42021400 	.word	0x42021400

080025c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b0c6      	sub	sp, #280	@ 0x118
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80025ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025ce:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025e0:	f107 0320 	add.w	r3, r7, #32
 80025e4:	22e0      	movs	r2, #224	@ 0xe0
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f010 f862 	bl	80126b2 <memset>
  if(hltdc->Instance==LTDC)
 80025ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80025f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a92      	ldr	r2, [pc, #584]	@ (8002844 <HAL_LTDC_MspInit+0x284>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	f040 811b 	bne.w	8002838 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0302 	mov.w	r3, #2
 800260a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8002614:	2303      	movs	r3, #3
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8002618:	2304      	movs	r3, #4
 800261a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 800261c:	2332      	movs	r3, #50	@ 0x32
 800261e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8002620:	2302      	movs	r3, #2
 8002622:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8002624:	2302      	movs	r3, #2
 8002626:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8002628:	2308      	movs	r3, #8
 800262a:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 800262c:	2300      	movs	r3, #0
 800262e:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8002634:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002638:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800263a:	f107 0320 	add.w	r3, r7, #32
 800263e:	4618      	mov	r0, r3
 8002640:	f008 ff98 	bl	800b574 <HAL_RCCEx_PeriphCLKConfig>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 800264a:	f7ff fbd5 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800264e:	4b7e      	ldr	r3, [pc, #504]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 8002650:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002654:	4a7c      	ldr	r2, [pc, #496]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 8002656:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800265a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800265e:	4b7a      	ldr	r3, [pc, #488]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 8002660:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002664:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266c:	4b76      	ldr	r3, [pc, #472]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 800266e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002672:	4a75      	ldr	r2, [pc, #468]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800267c:	4b72      	ldr	r3, [pc, #456]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 800267e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002682:	f003 0202 	and.w	r2, r3, #2
 8002686:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800268a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002694:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002698:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800269a:	4b6b      	ldr	r3, [pc, #428]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a0:	4a69      	ldr	r2, [pc, #420]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 80026a2:	f043 0310 	orr.w	r3, r3, #16
 80026a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026aa:	4b67      	ldr	r3, [pc, #412]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 80026ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b0:	f003 0210 	and.w	r2, r3, #16
 80026b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80026b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80026c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026c6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 80026ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 80026d0:	f043 0308 	orr.w	r3, r3, #8
 80026d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 80026da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026de:	f003 0208 	and.w	r2, r3, #8
 80026e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80026e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80026f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026f4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f6:	4b54      	ldr	r3, [pc, #336]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 80026f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026fc:	4a52      	ldr	r2, [pc, #328]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002706:	4b50      	ldr	r3, [pc, #320]	@ (8002848 <HAL_LTDC_MspInit+0x288>)
 8002708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800270c:	f003 0204 	and.w	r2, r3, #4
 8002710:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002714:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800271e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002722:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002724:	2304      	movs	r3, #4
 8002726:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 800273c:	2308      	movs	r3, #8
 800273e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002742:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002746:	4619      	mov	r1, r3
 8002748:	4840      	ldr	r0, [pc, #256]	@ (800284c <HAL_LTDC_MspInit+0x28c>)
 800274a:	f005 f9df 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800274e:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8002752:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002768:	2308      	movs	r3, #8
 800276a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800276e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002772:	4619      	mov	r1, r3
 8002774:	4836      	ldr	r0, [pc, #216]	@ (8002850 <HAL_LTDC_MspInit+0x290>)
 8002776:	f005 f9c9 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800277a:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 800277e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002794:	2308      	movs	r3, #8
 8002796:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800279a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800279e:	4619      	mov	r1, r3
 80027a0:	482c      	ldr	r0, [pc, #176]	@ (8002854 <HAL_LTDC_MspInit+0x294>)
 80027a2:	f005 f9b3 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027a6:	23c0      	movs	r3, #192	@ 0xc0
 80027a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80027be:	2307      	movs	r3, #7
 80027c0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80027c8:	4619      	mov	r1, r3
 80027ca:	4823      	ldr	r0, [pc, #140]	@ (8002858 <HAL_LTDC_MspInit+0x298>)
 80027cc:	f005 f99e 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80027ea:	2308      	movs	r3, #8
 80027ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80027f4:	4619      	mov	r1, r3
 80027f6:	4818      	ldr	r0, [pc, #96]	@ (8002858 <HAL_LTDC_MspInit+0x298>)
 80027f8:	f005 f988 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002800:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002816:	2307      	movs	r3, #7
 8002818:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002820:	4619      	mov	r1, r3
 8002822:	480a      	ldr	r0, [pc, #40]	@ (800284c <HAL_LTDC_MspInit+0x28c>)
 8002824:	f005 f972 	bl	8007b0c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2100      	movs	r1, #0
 800282c:	2087      	movs	r0, #135	@ 0x87
 800282e:	f003 f879 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002832:	2087      	movs	r0, #135	@ 0x87
 8002834:	f003 f890 	bl	8005958 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002838:	bf00      	nop
 800283a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40016800 	.word	0x40016800
 8002848:	46020c00 	.word	0x46020c00
 800284c:	42020400 	.word	0x42020400
 8002850:	42021000 	.word	0x42021000
 8002854:	42020c00 	.word	0x42020c00
 8002858:	42020800 	.word	0x42020800

0800285c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0bc      	sub	sp, #240	@ 0xf0
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	22e0      	movs	r2, #224	@ 0xe0
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f00f ff20 	bl	80126b2 <memset>
  if(hrtc->Instance==RTC)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1d      	ldr	r2, [pc, #116]	@ (80028ec <HAL_RTC_MspInit+0x90>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d132      	bne.n	80028e2 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800287c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002888:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800288c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	4618      	mov	r0, r3
 8002896:	f008 fe6d 	bl	800b574 <HAL_RCCEx_PeriphCLKConfig>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80028a0:	f7ff faaa 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028a4:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <HAL_RTC_MspInit+0x94>)
 80028a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028aa:	4a11      	ldr	r2, [pc, #68]	@ (80028f0 <HAL_RTC_MspInit+0x94>)
 80028ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80028b4:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <HAL_RTC_MspInit+0x94>)
 80028b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028ba:	4a0d      	ldr	r2, [pc, #52]	@ (80028f0 <HAL_RTC_MspInit+0x94>)
 80028bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028c0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80028c4:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_RTC_MspInit+0x94>)
 80028c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 80028d2:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <HAL_RTC_MspInit+0x94>)
 80028d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028d8:	4a05      	ldr	r2, [pc, #20]	@ (80028f0 <HAL_RTC_MspInit+0x94>)
 80028da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80028e2:	bf00      	nop
 80028e4:	37f0      	adds	r7, #240	@ 0xf0
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	46007800 	.word	0x46007800
 80028f0:	46020c00 	.word	0x46020c00

080028f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0b      	ldr	r2, [pc, #44]	@ (8002930 <HAL_TIM_PWM_MspInit+0x3c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002906:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_TIM_PWM_MspInit+0x40>)
 8002908:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800290c:	4a09      	ldr	r2, [pc, #36]	@ (8002934 <HAL_TIM_PWM_MspInit+0x40>)
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002916:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <HAL_TIM_PWM_MspInit+0x40>)
 8002918:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40000400 	.word	0x40000400
 8002934:	46020c00 	.word	0x46020c00

08002938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0b      	ldr	r2, [pc, #44]	@ (8002974 <HAL_TIM_Base_MspInit+0x3c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10e      	bne.n	8002968 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_TIM_Base_MspInit+0x40>)
 800294c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002950:	4a09      	ldr	r2, [pc, #36]	@ (8002978 <HAL_TIM_Base_MspInit+0x40>)
 8002952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002956:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800295a:	4b07      	ldr	r3, [pc, #28]	@ (8002978 <HAL_TIM_Base_MspInit+0x40>)
 800295c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40014000 	.word	0x40014000
 8002978:	46020c00 	.word	0x46020c00

0800297c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a12      	ldr	r2, [pc, #72]	@ (80029e4 <HAL_TIM_MspPostInit+0x68>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d11e      	bne.n	80029dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800299e:	4b12      	ldr	r3, [pc, #72]	@ (80029e8 <HAL_TIM_MspPostInit+0x6c>)
 80029a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029a4:	4a10      	ldr	r2, [pc, #64]	@ (80029e8 <HAL_TIM_MspPostInit+0x6c>)
 80029a6:	f043 0310 	orr.w	r3, r3, #16
 80029aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029ae:	4b0e      	ldr	r3, [pc, #56]	@ (80029e8 <HAL_TIM_MspPostInit+0x6c>)
 80029b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 80029bc:	2340      	movs	r3, #64	@ 0x40
 80029be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	4619      	mov	r1, r3
 80029d6:	4805      	ldr	r0, [pc, #20]	@ (80029ec <HAL_TIM_MspPostInit+0x70>)
 80029d8:	f005 f898 	bl	8007b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029dc:	bf00      	nop
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40000400 	.word	0x40000400
 80029e8:	46020c00 	.word	0x46020c00
 80029ec:	42021000 	.word	0x42021000

080029f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b0c2      	sub	sp, #264	@ 0x108
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80029fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	22e0      	movs	r2, #224	@ 0xe0
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f00f fe4a 	bl	80126b2 <memset>
  if(huart->Instance==USART1)
 8002a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ae8 <HAL_UART_MspInit+0xf8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d155      	bne.n	8002adc <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a30:	f04f 0201 	mov.w	r2, #1
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	4618      	mov	r0, r3
 8002a46:	f008 fd95 	bl	800b574 <HAL_RCCEx_PeriphCLKConfig>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002a50:	f7ff f9d2 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a54:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <HAL_UART_MspInit+0xfc>)
 8002a56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a5a:	4a24      	ldr	r2, [pc, #144]	@ (8002aec <HAL_UART_MspInit+0xfc>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a60:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002a64:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <HAL_UART_MspInit+0xfc>)
 8002a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	4b1e      	ldr	r3, [pc, #120]	@ (8002aec <HAL_UART_MspInit+0xfc>)
 8002a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a78:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <HAL_UART_MspInit+0xfc>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a82:	4b1a      	ldr	r3, [pc, #104]	@ (8002aec <HAL_UART_MspInit+0xfc>)
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a88:	f003 0201 	and.w	r2, r3, #1
 8002a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002a90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002a9a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a9e:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002aa0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002aa4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aba:	2307      	movs	r3, #7
 8002abc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	480a      	ldr	r0, [pc, #40]	@ (8002af0 <HAL_UART_MspInit+0x100>)
 8002ac8:	f005 f820 	bl	8007b0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	203d      	movs	r0, #61	@ 0x3d
 8002ad2:	f002 ff27 	bl	8005924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ad6:	203d      	movs	r0, #61	@ 0x3d
 8002ad8:	f002 ff3e 	bl	8005958 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002adc:	bf00      	nop
 8002ade:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	46020c00 	.word	0x46020c00
 8002af0:	42020000 	.word	0x42020000

08002af4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b0be      	sub	sp, #248	@ 0xf8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002afc:	f107 0318 	add.w	r3, r7, #24
 8002b00:	22e0      	movs	r2, #224	@ 0xe0
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f00f fdd4 	bl	80126b2 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf8 <HAL_PCD_MspInit+0x104>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d16d      	bne.n	8002bf0 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b14:	4b39      	ldr	r3, [pc, #228]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002b16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b1a:	4a38      	ldr	r2, [pc, #224]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002b24:	4b35      	ldr	r3, [pc, #212]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002b26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0308 	mov.w	r3, #8
 8002b3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b46:	f107 0318 	add.w	r3, r7, #24
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f008 fd12 	bl	800b574 <HAL_RCCEx_PeriphCLKConfig>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 8002b56:	f7ff f94f 	bl	8001df8 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002b5a:	200c      	movs	r0, #12
 8002b5c:	f000 fc22 	bl	80033a4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002b60:	4b26      	ldr	r3, [pc, #152]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b66:	4a25      	ldr	r2, [pc, #148]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b70:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b84:	4a1d      	ldr	r2, [pc, #116]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9c:	4b17      	ldr	r3, [pc, #92]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11b      	bne.n	8002be2 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb0:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002bc8:	f007 f9a2 	bl	8009f10 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002bcc:	f007 f9d0 	bl	8009f70 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bd6:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <HAL_PCD_MspInit+0x108>)
 8002bd8:	f023 0304 	bic.w	r3, r3, #4
 8002bdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002be0:	e003      	b.n	8002bea <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002be2:	f007 f995 	bl	8009f10 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002be6:	f007 f9c3 	bl	8009f70 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8002bea:	2001      	movs	r0, #1
 8002bec:	f000 fbc6 	bl	800337c <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002bf0:	bf00      	nop
 8002bf2:	37f8      	adds	r7, #248	@ 0xf8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	42040000 	.word	0x42040000
 8002bfc:	46020c00 	.word	0x46020c00

08002c00 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b0a4      	sub	sp, #144	@ 0x90
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4abb      	ldr	r2, [pc, #748]	@ (8002efc <HAL_SAI_MspInit+0x2fc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	f040 80ca 	bne.w	8002da8 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002c14:	4bba      	ldr	r3, [pc, #744]	@ (8002f00 <HAL_SAI_MspInit+0x300>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10e      	bne.n	8002c3a <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002c1c:	4bb9      	ldr	r3, [pc, #740]	@ (8002f04 <HAL_SAI_MspInit+0x304>)
 8002c1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c22:	4ab8      	ldr	r2, [pc, #736]	@ (8002f04 <HAL_SAI_MspInit+0x304>)
 8002c24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c28:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002c2c:	4bb5      	ldr	r3, [pc, #724]	@ (8002f04 <HAL_SAI_MspInit+0x304>)
 8002c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002c3a:	4bb1      	ldr	r3, [pc, #708]	@ (8002f00 <HAL_SAI_MspInit+0x300>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	4aaf      	ldr	r2, [pc, #700]	@ (8002f00 <HAL_SAI_MspInit+0x300>)
 8002c42:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002c44:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002c48:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c5c:	230d      	movs	r3, #13
 8002c5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c62:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002c66:	4619      	mov	r1, r3
 8002c68:	48a7      	ldr	r0, [pc, #668]	@ (8002f08 <HAL_SAI_MspInit+0x308>)
 8002c6a:	f004 ff4f 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c86:	230d      	movs	r3, #13
 8002c88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002c90:	4619      	mov	r1, r3
 8002c92:	489d      	ldr	r0, [pc, #628]	@ (8002f08 <HAL_SAI_MspInit+0x308>)
 8002c94:	f004 ff3a 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002cb0:	230d      	movs	r3, #13
 8002cb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cb6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4893      	ldr	r0, [pc, #588]	@ (8002f0c <HAL_SAI_MspInit+0x30c>)
 8002cbe:	f004 ff25 	bl	8007b0c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002cc2:	2321      	movs	r3, #33	@ 0x21
 8002cc4:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8002cc6:	2326      	movs	r3, #38	@ 0x26
 8002cc8:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cd2:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002d02:	2300      	movs	r3, #0
 8002d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8002d06:	f107 0310 	add.w	r3, r7, #16
 8002d0a:	4981      	ldr	r1, [pc, #516]	@ (8002f10 <HAL_SAI_MspInit+0x310>)
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 ffdb 	bl	8006cc8 <HAL_DMAEx_List_BuildNode>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8002d18:	f7ff f86e 	bl	8001df8 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8002d1c:	4a7c      	ldr	r2, [pc, #496]	@ (8002f10 <HAL_SAI_MspInit+0x310>)
 8002d1e:	2100      	movs	r1, #0
 8002d20:	487c      	ldr	r0, [pc, #496]	@ (8002f14 <HAL_SAI_MspInit+0x314>)
 8002d22:	f003 fffd 	bl	8006d20 <HAL_DMAEx_List_InsertNode>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 8002d2c:	f7ff f864 	bl	8001df8 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 8002d30:	4878      	ldr	r0, [pc, #480]	@ (8002f14 <HAL_SAI_MspInit+0x314>)
 8002d32:	f004 f8be 	bl	8006eb2 <HAL_DMAEx_List_SetCircularMode>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 8002d3c:	f7ff f85c 	bl	8001df8 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002d40:	4b75      	ldr	r3, [pc, #468]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d42:	4a76      	ldr	r2, [pc, #472]	@ (8002f1c <HAL_SAI_MspInit+0x31c>)
 8002d44:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8002d46:	4b74      	ldr	r3, [pc, #464]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d48:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d4c:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002d4e:	4b72      	ldr	r3, [pc, #456]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002d54:	4b70      	ldr	r3, [pc, #448]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002d5a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002d60:	4b6d      	ldr	r3, [pc, #436]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d62:	2281      	movs	r2, #129	@ 0x81
 8002d64:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002d66:	486c      	ldr	r0, [pc, #432]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d68:	f003 fdee 	bl	8006948 <HAL_DMAEx_List_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 8002d72:	f7ff f841 	bl	8001df8 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 8002d76:	4967      	ldr	r1, [pc, #412]	@ (8002f14 <HAL_SAI_MspInit+0x314>)
 8002d78:	4867      	ldr	r0, [pc, #412]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d7a:	f004 f8fb 	bl	8006f74 <HAL_DMAEx_List_LinkQ>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 8002d84:	f7ff f838 	bl	8001df8 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a63      	ldr	r2, [pc, #396]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002d90:	4a61      	ldr	r2, [pc, #388]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002d96:	2110      	movs	r1, #16
 8002d98:	485f      	ldr	r0, [pc, #380]	@ (8002f18 <HAL_SAI_MspInit+0x318>)
 8002d9a:	f003 f9e3 	bl	8006164 <HAL_DMA_ConfigChannelAttributes>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8002da4:	f7ff f828 	bl	8001df8 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a5c      	ldr	r2, [pc, #368]	@ (8002f20 <HAL_SAI_MspInit+0x320>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	f040 80eb 	bne.w	8002f8a <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002db4:	4b52      	ldr	r3, [pc, #328]	@ (8002f00 <HAL_SAI_MspInit+0x300>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10e      	bne.n	8002dda <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002dbc:	4b51      	ldr	r3, [pc, #324]	@ (8002f04 <HAL_SAI_MspInit+0x304>)
 8002dbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002dc2:	4a50      	ldr	r2, [pc, #320]	@ (8002f04 <HAL_SAI_MspInit+0x304>)
 8002dc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dc8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002f04 <HAL_SAI_MspInit+0x304>)
 8002dce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002dda:	4b49      	ldr	r3, [pc, #292]	@ (8002f00 <HAL_SAI_MspInit+0x300>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	4a47      	ldr	r2, [pc, #284]	@ (8002f00 <HAL_SAI_MspInit+0x300>)
 8002de2:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002de4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002de8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df6:	2303      	movs	r3, #3
 8002df8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002dfc:	230d      	movs	r3, #13
 8002dfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002e06:	4619      	mov	r1, r3
 8002e08:	4846      	ldr	r0, [pc, #280]	@ (8002f24 <HAL_SAI_MspInit+0x324>)
 8002e0a:	f004 fe7f 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e20:	2303      	movs	r3, #3
 8002e22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002e26:	230d      	movs	r3, #13
 8002e28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002e30:	4619      	mov	r1, r3
 8002e32:	483d      	ldr	r0, [pc, #244]	@ (8002f28 <HAL_SAI_MspInit+0x328>)
 8002e34:	f004 fe6a 	bl	8007b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e38:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002e50:	230d      	movs	r3, #13
 8002e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e56:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4832      	ldr	r0, [pc, #200]	@ (8002f28 <HAL_SAI_MspInit+0x328>)
 8002e5e:	f004 fe55 	bl	8007b0c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002e62:	2321      	movs	r3, #33	@ 0x21
 8002e64:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8002e66:	2327      	movs	r3, #39	@ 0x27
 8002e68:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002e76:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002e80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002e92:	2300      	movs	r3, #0
 8002e94:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002ea6:	f107 0310 	add.w	r3, r7, #16
 8002eaa:	4920      	ldr	r1, [pc, #128]	@ (8002f2c <HAL_SAI_MspInit+0x32c>)
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 ff0b 	bl	8006cc8 <HAL_DMAEx_List_BuildNode>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8002eb8:	f7fe ff9e 	bl	8001df8 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f2c <HAL_SAI_MspInit+0x32c>)
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	481b      	ldr	r0, [pc, #108]	@ (8002f30 <HAL_SAI_MspInit+0x330>)
 8002ec2:	f003 ff2d 	bl	8006d20 <HAL_DMAEx_List_InsertNode>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8002ecc:	f7fe ff94 	bl	8001df8 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8002ed0:	4817      	ldr	r0, [pc, #92]	@ (8002f30 <HAL_SAI_MspInit+0x330>)
 8002ed2:	f003 ffee 	bl	8006eb2 <HAL_DMAEx_List_SetCircularMode>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8002edc:	f7fe ff8c 	bl	8001df8 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002ee0:	4b14      	ldr	r3, [pc, #80]	@ (8002f34 <HAL_SAI_MspInit+0x334>)
 8002ee2:	4a15      	ldr	r2, [pc, #84]	@ (8002f38 <HAL_SAI_MspInit+0x338>)
 8002ee4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8002ee6:	4b13      	ldr	r3, [pc, #76]	@ (8002f34 <HAL_SAI_MspInit+0x334>)
 8002ee8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002eec:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002eee:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <HAL_SAI_MspInit+0x334>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f34 <HAL_SAI_MspInit+0x334>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002efa:	e01f      	b.n	8002f3c <HAL_SAI_MspInit+0x33c>
 8002efc:	40015804 	.word	0x40015804
 8002f00:	20033b9c 	.word	0x20033b9c
 8002f04:	46020c00 	.word	0x46020c00
 8002f08:	42020400 	.word	0x42020400
 8002f0c:	42021800 	.word	0x42021800
 8002f10:	2000060c 	.word	0x2000060c
 8002f14:	20000630 	.word	0x20000630
 8002f18:	20000648 	.word	0x20000648
 8002f1c:	400201d0 	.word	0x400201d0
 8002f20:	40015824 	.word	0x40015824
 8002f24:	42020000 	.word	0x42020000
 8002f28:	42020800 	.word	0x42020800
 8002f2c:	200006c0 	.word	0x200006c0
 8002f30:	200006e4 	.word	0x200006e4
 8002f34:	200006fc 	.word	0x200006fc
 8002f38:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002f3c:	4b15      	ldr	r3, [pc, #84]	@ (8002f94 <HAL_SAI_MspInit+0x394>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002f42:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <HAL_SAI_MspInit+0x394>)
 8002f44:	2281      	movs	r2, #129	@ 0x81
 8002f46:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002f48:	4812      	ldr	r0, [pc, #72]	@ (8002f94 <HAL_SAI_MspInit+0x394>)
 8002f4a:	f003 fcfd 	bl	8006948 <HAL_DMAEx_List_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 8002f54:	f7fe ff50 	bl	8001df8 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002f58:	490f      	ldr	r1, [pc, #60]	@ (8002f98 <HAL_SAI_MspInit+0x398>)
 8002f5a:	480e      	ldr	r0, [pc, #56]	@ (8002f94 <HAL_SAI_MspInit+0x394>)
 8002f5c:	f004 f80a 	bl	8006f74 <HAL_DMAEx_List_LinkQ>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 8002f66:	f7fe ff47 	bl	8001df8 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a09      	ldr	r2, [pc, #36]	@ (8002f94 <HAL_SAI_MspInit+0x394>)
 8002f6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002f72:	4a08      	ldr	r2, [pc, #32]	@ (8002f94 <HAL_SAI_MspInit+0x394>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002f78:	2110      	movs	r1, #16
 8002f7a:	4806      	ldr	r0, [pc, #24]	@ (8002f94 <HAL_SAI_MspInit+0x394>)
 8002f7c:	f003 f8f2 	bl	8006164 <HAL_DMA_ConfigChannelAttributes>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 8002f86:	f7fe ff37 	bl	8001df8 <Error_Handler>
    }

    }
}
 8002f8a:	bf00      	nop
 8002f8c:	3790      	adds	r7, #144	@ 0x90
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	200006fc 	.word	0x200006fc
 8002f98:	200006e4 	.word	0x200006e4

08002f9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08e      	sub	sp, #56	@ 0x38
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fac:	4b2e      	ldr	r3, [pc, #184]	@ (8003068 <HAL_InitTick+0xcc>)
 8002fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8003068 <HAL_InitTick+0xcc>)
 8002fb4:	f043 0310 	orr.w	r3, r3, #16
 8002fb8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003068 <HAL_InitTick+0xcc>)
 8002fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fca:	f107 0210 	add.w	r2, r7, #16
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f008 fa0f 	bl	800b3f8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fda:	f008 f9d1 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 8002fde:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe2:	4a22      	ldr	r2, [pc, #136]	@ (800306c <HAL_InitTick+0xd0>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	0c9b      	lsrs	r3, r3, #18
 8002fea:	3b01      	subs	r3, #1
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fee:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <HAL_InitTick+0xd4>)
 8002ff0:	4a20      	ldr	r2, [pc, #128]	@ (8003074 <HAL_InitTick+0xd8>)
 8002ff2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8003070 <HAL_InitTick+0xd4>)
 8002ff6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ffa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8003070 <HAL_InitTick+0xd4>)
 8002ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003000:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003002:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <HAL_InitTick+0xd4>)
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003008:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <HAL_InitTick+0xd4>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800300e:	4818      	ldr	r0, [pc, #96]	@ (8003070 <HAL_InitTick+0xd4>)
 8003010:	f00c fa53 	bl	800f4ba <HAL_TIM_Base_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800301a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800301e:	2b00      	cmp	r3, #0
 8003020:	d118      	bne.n	8003054 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003022:	4813      	ldr	r0, [pc, #76]	@ (8003070 <HAL_InitTick+0xd4>)
 8003024:	f00c fb38 	bl	800f698 <HAL_TIM_Base_Start_IT>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800302e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b0f      	cmp	r3, #15
 800303a:	d808      	bhi.n	800304e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800303c:	2200      	movs	r2, #0
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	2031      	movs	r0, #49	@ 0x31
 8003042:	f002 fc6f 	bl	8005924 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003046:	4a0c      	ldr	r2, [pc, #48]	@ (8003078 <HAL_InitTick+0xdc>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	e002      	b.n	8003054 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003054:	2031      	movs	r0, #49	@ 0x31
 8003056:	f002 fc7f 	bl	8005958 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800305a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800305e:	4618      	mov	r0, r3
 8003060:	3738      	adds	r7, #56	@ 0x38
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	46020c00 	.word	0x46020c00
 800306c:	431bde83 	.word	0x431bde83
 8003070:	20033ba0 	.word	0x20033ba0
 8003074:	40001000 	.word	0x40001000
 8003078:	2000002c 	.word	0x2000002c

0800307c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003080:	bf00      	nop
 8003082:	e7fd      	b.n	8003080 <NMI_Handler+0x4>

08003084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003088:	bf00      	nop
 800308a:	e7fd      	b.n	8003088 <HardFault_Handler+0x4>

0800308c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <MemManage_Handler+0x4>

08003094 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <BusFault_Handler+0x4>

0800309c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <UsageFault_Handler+0x4>

080030a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80030e0:	2002      	movs	r0, #2
 80030e2:	f004 ff1d 	bl	8007f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}

080030ea <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 80030ee:	2010      	movs	r0, #16
 80030f0:	f004 ff16 	bl	8007f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80030fc:	2020      	movs	r0, #32
 80030fe:	f004 ff0f 	bl	8007f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 800310c:	4802      	ldr	r0, [pc, #8]	@ (8003118 <GPDMA1_Channel0_IRQHandler+0x10>)
 800310e:	f002 feba 	bl	8005e86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200001a4 	.word	0x200001a4

0800311c <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8003120:	4802      	ldr	r0, [pc, #8]	@ (800312c <GPDMA1_Channel1_IRQHandler+0x10>)
 8003122:	f002 feb0 	bl	8005e86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200006fc 	.word	0x200006fc

08003130 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8003134:	4802      	ldr	r0, [pc, #8]	@ (8003140 <GPDMA1_Channel2_IRQHandler+0x10>)
 8003136:	f002 fea6 	bl	8005e86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	2000021c 	.word	0x2000021c

08003144 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8003148:	4802      	ldr	r0, [pc, #8]	@ (8003154 <GPDMA1_Channel3_IRQHandler+0x10>)
 800314a:	f002 fe9c 	bl	8005e86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000648 	.word	0x20000648

08003158 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800315c:	4802      	ldr	r0, [pc, #8]	@ (8003168 <ADC1_2_IRQHandler+0x10>)
 800315e:	f001 f8b9 	bl	80042d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000050 	.word	0x20000050

0800316c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003170:	4802      	ldr	r0, [pc, #8]	@ (800317c <TIM6_IRQHandler+0x10>)
 8003172:	f00c fb88 	bl	800f886 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20033ba0 	.word	0x20033ba0

08003180 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003184:	4802      	ldr	r0, [pc, #8]	@ (8003190 <I2C2_EV_IRQHandler+0x10>)
 8003186:	f005 f897 	bl	80082b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200003b0 	.word	0x200003b0

08003194 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003198:	4802      	ldr	r0, [pc, #8]	@ (80031a4 <I2C2_ER_IRQHandler+0x10>)
 800319a:	f005 f8a7 	bl	80082ec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200003b0 	.word	0x200003b0

080031a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031ac:	4802      	ldr	r0, [pc, #8]	@ (80031b8 <USART1_IRQHandler+0x10>)
 80031ae:	f00d fdc7 	bl	8010d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000080c 	.word	0x2000080c

080031bc <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80031c0:	4802      	ldr	r0, [pc, #8]	@ (80031cc <LTDC_IRQHandler+0x10>)
 80031c2:	f006 fa15 	bl	80095f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000404 	.word	0x20000404

080031d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80031d4:	4b18      	ldr	r3, [pc, #96]	@ (8003238 <SystemInit+0x68>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031da:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <SystemInit+0x68>)
 80031dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80031e4:	4b15      	ldr	r3, [pc, #84]	@ (800323c <SystemInit+0x6c>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80031ea:	4b14      	ldr	r3, [pc, #80]	@ (800323c <SystemInit+0x6c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80031f0:	4b12      	ldr	r3, [pc, #72]	@ (800323c <SystemInit+0x6c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80031f6:	4b11      	ldr	r3, [pc, #68]	@ (800323c <SystemInit+0x6c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80031fc:	4b0f      	ldr	r3, [pc, #60]	@ (800323c <SystemInit+0x6c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0e      	ldr	r2, [pc, #56]	@ (800323c <SystemInit+0x6c>)
 8003202:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003206:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800320a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <SystemInit+0x6c>)
 800320e:	2200      	movs	r2, #0
 8003210:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003212:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <SystemInit+0x6c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a09      	ldr	r2, [pc, #36]	@ (800323c <SystemInit+0x6c>)
 8003218:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800321c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800321e:	4b07      	ldr	r3, [pc, #28]	@ (800323c <SystemInit+0x6c>)
 8003220:	2200      	movs	r2, #0
 8003222:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003224:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <SystemInit+0x68>)
 8003226:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800322a:	609a      	str	r2, [r3, #8]
  #endif
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000ed00 	.word	0xe000ed00
 800323c:	46020c00 	.word	0x46020c00

08003240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003278 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003244:	f7ff ffc4 	bl	80031d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003248:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800324a:	e003      	b.n	8003254 <LoopCopyDataInit>

0800324c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800324e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003250:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003252:	3104      	adds	r1, #4

08003254 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003254:	480a      	ldr	r0, [pc, #40]	@ (8003280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003256:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003258:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800325a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800325c:	d3f6      	bcc.n	800324c <CopyDataInit>
	ldr	r2, =_sbss
 800325e:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003260:	e002      	b.n	8003268 <LoopFillZerobss>

08003262 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003262:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003264:	f842 3b04 	str.w	r3, [r2], #4

08003268 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003268:	4b08      	ldr	r3, [pc, #32]	@ (800328c <LoopForever+0x16>)
	cmp	r2, r3
 800326a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800326c:	d3f9      	bcc.n	8003262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800326e:	f00f fa29 	bl	80126c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003272:	f7fd fb07 	bl	8000884 <main>

08003276 <LoopForever>:

LoopForever:
    b LoopForever
 8003276:	e7fe      	b.n	8003276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003278:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 800327c:	08012834 	.word	0x08012834
	ldr	r0, =_sdata
 8003280:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003284:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 8003288:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 800328c:	20033bf0 	.word	0x20033bf0

08003290 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC4_IRQHandler>
	...

08003294 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003298:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <HAL_Init+0x50>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a11      	ldr	r2, [pc, #68]	@ (80032e4 <HAL_Init+0x50>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a4:	2003      	movs	r0, #3
 80032a6:	f002 fb32 	bl	800590e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80032aa:	f007 ff4d 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b0d      	ldr	r3, [pc, #52]	@ (80032e8 <HAL_Init+0x54>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	490c      	ldr	r1, [pc, #48]	@ (80032ec <HAL_Init+0x58>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
 80032c0:	4a0b      	ldr	r2, [pc, #44]	@ (80032f0 <HAL_Init+0x5c>)
 80032c2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80032c4:	2004      	movs	r0, #4
 80032c6:	f002 fb55 	bl	8005974 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7ff fe66 	bl	8002f9c <HAL_InitTick>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e002      	b.n	80032e0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80032da:	f7fe fd93 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40022000 	.word	0x40022000
 80032e8:	46020c00 	.word	0x46020c00
 80032ec:	08012724 	.word	0x08012724
 80032f0:	20000028 	.word	0x20000028

080032f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032f8:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <HAL_IncTick+0x20>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <HAL_IncTick+0x24>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4413      	add	r3, r2
 8003304:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <HAL_IncTick+0x24>)
 8003306:	6013      	str	r3, [r2, #0]
}
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000030 	.word	0x20000030
 8003318:	20033bec 	.word	0x20033bec

0800331c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return uwTick;
 8003320:	4b03      	ldr	r3, [pc, #12]	@ (8003330 <HAL_GetTick+0x14>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20033bec 	.word	0x20033bec

08003334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800333c:	f7ff ffee 	bl	800331c <HAL_GetTick>
 8003340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d005      	beq.n	800335a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <HAL_Delay+0x44>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800335a:	bf00      	nop
 800335c:	f7ff ffde 	bl	800331c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	429a      	cmp	r2, r3
 800336a:	d8f7      	bhi.n	800335c <HAL_Delay+0x28>
  {
  }
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000030 	.word	0x20000030

0800337c <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8003386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003388:	f023 0201 	bic.w	r2, r3, #1
 800338c:	4904      	ldr	r1, [pc, #16]	@ (80033a0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4313      	orrs	r3, r2
 8003392:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	46000400 	.word	0x46000400

080033a4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80033ac:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80033ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b0:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80033b4:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	46000400 	.word	0x46000400

080033cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	609a      	str	r2, [r3, #8]
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <LL_ADC_SetResolution+0x3c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d104      	bne.n	8003454 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3b01      	subs	r3, #1
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f023 020c 	bic.w	r2, r3, #12
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	46021000 	.word	0x46021000

08003474 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3360      	adds	r3, #96	@ 0x60
 8003486:	461a      	mov	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	430b      	orrs	r3, r1
 80034a4:	431a      	orrs	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3360      	adds	r3, #96	@ 0x60
 80034c4:	461a      	mov	r2, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b087      	sub	sp, #28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3360      	adds	r3, #96	@ 0x60
 80034f2:	461a      	mov	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	431a      	orrs	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3360      	adds	r3, #96	@ 0x60
 8003528:	461a      	mov	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	431a      	orrs	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	601a      	str	r2, [r3, #0]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800354e:	b480      	push	{r7}
 8003550:	b087      	sub	sp, #28
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3360      	adds	r3, #96	@ 0x60
 800355e:	461a      	mov	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	431a      	orrs	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	bf00      	nop
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003596:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	2a00      	cmp	r2, #0
 80035ae:	d002      	beq.n	80035b6 <LL_ADC_SetGainCompensation+0x32>
 80035b0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80035b4:	e000      	b.n	80035b8 <LL_ADC_SetGainCompensation+0x34>
 80035b6:	2200      	movs	r2, #0
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2107      	movs	r1, #7
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	401a      	ands	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	@ 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d020      	beq.n	8003686 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3330      	adds	r3, #48	@ 0x30
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	4413      	add	r3, r2
 8003656:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	211f      	movs	r1, #31
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	401a      	ands	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0e9b      	lsrs	r3, r3, #26
 8003670:	f003 011f 	and.w	r1, r3, #31
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	fa01 f303 	lsl.w	r3, r1, r3
 800367e:	431a      	orrs	r2, r3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003684:	e02b      	b.n	80036de <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	210f      	movs	r1, #15
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	401a      	ands	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <LL_ADC_REG_SetSequencerRanks+0x7e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	0e9b      	lsrs	r3, r3, #26
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	e010      	b.n	80036d0 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	613b      	str	r3, [r7, #16]
  return result;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	f001 011f 	and.w	r1, r1, #31
 80036d6:	408b      	lsls	r3, r1
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036de:	bf00      	nop
 80036e0:	3724      	adds	r7, #36	@ 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	46021000 	.word	0x46021000

080036f0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d107      	bne.n	8003714 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	0e9b      	lsrs	r3, r3, #26
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2201      	movs	r2, #1
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	e015      	b.n	8003740 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	60fb      	str	r3, [r7, #12]
  return result;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e003      	b.n	8003736 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2201      	movs	r2, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	0e9b      	lsrs	r3, r3, #26
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2101      	movs	r1, #1
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	401a      	ands	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0303 	and.w	r3, r3, #3
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ae:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b08b      	sub	sp, #44	@ 0x2c
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a2d      	ldr	r2, [pc, #180]	@ (800388c <LL_ADC_SetChannelSamplingTime+0xc4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d042      	beq.n	8003862 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <LL_ADC_SetChannelSamplingTime+0x28>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	0e9b      	lsrs	r3, r3, #26
 80037ea:	f003 021f 	and.w	r2, r3, #31
 80037ee:	e011      	b.n	8003814 <LL_ADC_SetChannelSamplingTime+0x4c>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	617b      	str	r3, [r7, #20]
  return result;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003806:	2320      	movs	r3, #32
 8003808:	e003      	b.n	8003812 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	0e5b      	lsrs	r3, r3, #25
 8003818:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800381c:	460b      	mov	r3, r1
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	1ad2      	subs	r2, r2, r3
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3314      	adds	r3, #20
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	0e5b      	lsrs	r3, r3, #25
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	4413      	add	r3, r2
 8003840:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	2107      	movs	r1, #7
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	401a      	ands	r2, r3
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	431a      	orrs	r2, r3
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003860:	e00e      	b.n	8003880 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	43db      	mvns	r3, r3
 800386c:	401a      	ands	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	0219      	lsls	r1, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	400b      	ands	r3, r1
 8003876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800387a:	431a      	orrs	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	615a      	str	r2, [r3, #20]
}
 8003880:	bf00      	nop
 8003882:	372c      	adds	r7, #44	@ 0x2c
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	46021000 	.word	0x46021000

08003890 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80038a8:	43db      	mvns	r3, r3
 80038aa:	401a      	ands	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f003 0318 	and.w	r3, r3, #24
 80038b2:	4908      	ldr	r1, [pc, #32]	@ (80038d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80038b4:	40d9      	lsrs	r1, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	400b      	ands	r3, r1
 80038ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80038be:	431a      	orrs	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	000fffff 	.word	0x000fffff

080038d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 031f 	and.w	r3, r3, #31
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003920:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6093      	str	r3, [r2, #8]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003948:	d101      	bne.n	800394e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800396c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003970:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	609a      	str	r2, [r3, #8]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003994:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003998:	d101      	bne.n	800399e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <LL_ADC_IsEnabled+0x18>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <LL_ADC_IsEnabled+0x1a>
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d101      	bne.n	8003a3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d101      	bne.n	8003a60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b08b      	sub	sp, #44	@ 0x2c
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e2ce      	b.n	800402e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a95      	ldr	r2, [pc, #596]	@ (8003cf4 <HAL_ADC_Init+0x284>)
 8003a9e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fe f9c5 	bl	8001e38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff37 	bl	8003934 <LL_ADC_IsDeepPowerDownEnabled>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff1d 	bl	8003910 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ff52 	bl	8003984 <LL_ADC_IsInternalRegulatorEnabled>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d115      	bne.n	8003b12 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff36 	bl	800395c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af0:	4b81      	ldr	r3, [pc, #516]	@ (8003cf8 <HAL_ADC_Init+0x288>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	4a81      	ldr	r2, [pc, #516]	@ (8003cfc <HAL_ADC_Init+0x28c>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	3301      	adds	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b04:	e002      	b.n	8003b0c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f9      	bne.n	8003b06 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff ff34 	bl	8003984 <LL_ADC_IsInternalRegulatorEnabled>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10e      	bne.n	8003b40 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff6c 	bl	8003a22 <LL_ADC_REG_IsConversionOngoing>
 8003b4a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 825f 	bne.w	8004018 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f040 825b 	bne.w	8004018 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b66:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b6a:	f043 0202 	orr.w	r2, r3, #2
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ff2c 	bl	80039d4 <LL_ADC_IsEnabled>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d14f      	bne.n	8003c22 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5b      	ldr	r2, [pc, #364]	@ (8003cf4 <HAL_ADC_Init+0x284>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d037      	beq.n	8003bfc <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5b      	ldr	r2, [pc, #364]	@ (8003d00 <HAL_ADC_Init+0x290>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_ADC_Init+0x130>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a5a      	ldr	r2, [pc, #360]	@ (8003d04 <HAL_ADC_Init+0x294>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10e      	bne.n	8003bbe <HAL_ADC_Init+0x14e>
 8003ba0:	4857      	ldr	r0, [pc, #348]	@ (8003d00 <HAL_ADC_Init+0x290>)
 8003ba2:	f7ff ff17 	bl	80039d4 <LL_ADC_IsEnabled>
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	4856      	ldr	r0, [pc, #344]	@ (8003d04 <HAL_ADC_Init+0x294>)
 8003baa:	f7ff ff13 	bl	80039d4 <LL_ADC_IsEnabled>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4323      	orrs	r3, r4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	e008      	b.n	8003bd0 <HAL_ADC_Init+0x160>
 8003bbe:	484d      	ldr	r0, [pc, #308]	@ (8003cf4 <HAL_ADC_Init+0x284>)
 8003bc0:	f7ff ff08 	bl	80039d4 <LL_ADC_IsEnabled>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d026      	beq.n	8003c22 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a49      	ldr	r2, [pc, #292]	@ (8003d00 <HAL_ADC_Init+0x290>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_ADC_Init+0x178>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a48      	ldr	r2, [pc, #288]	@ (8003d04 <HAL_ADC_Init+0x294>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_ADC_Init+0x17c>
 8003be8:	4a47      	ldr	r2, [pc, #284]	@ (8003d08 <HAL_ADC_Init+0x298>)
 8003bea:	e000      	b.n	8003bee <HAL_ADC_Init+0x17e>
 8003bec:	4a47      	ldr	r2, [pc, #284]	@ (8003d0c <HAL_ADC_Init+0x29c>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7ff fbe9 	bl	80033cc <LL_ADC_SetCommonClock>
 8003bfa:	e012      	b.n	8003c22 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f7ff fc14 	bl	8003434 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003c0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d0c <HAL_ADC_Init+0x29c>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003c1c:	493b      	ldr	r1, [pc, #236]	@ (8003d0c <HAL_ADC_Init+0x29c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a33      	ldr	r2, [pc, #204]	@ (8003cf4 <HAL_ADC_Init+0x284>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d010      	beq.n	8003c4e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c32:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003c38:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003c3e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003c46:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	e035      	b.n	8003cba <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7f1b      	ldrb	r3, [r3, #28]
 8003c52:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c5a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c5c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003c62:	2a00      	cmp	r2, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_ADC_Init+0x1fc>
 8003c66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c6a:	e000      	b.n	8003c6e <HAL_ADC_Init+0x1fe>
 8003c6c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003c6e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003c74:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da04      	bge.n	8003c88 <HAL_ADC_Init+0x218>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c86:	e001      	b.n	8003c8c <HAL_ADC_Init+0x21c>
 8003c88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003c8c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	491b      	ldr	r1, [pc, #108]	@ (8003d00 <HAL_ADC_Init+0x290>)
 8003c94:	428b      	cmp	r3, r1
 8003c96:	d004      	beq.n	8003ca2 <HAL_ADC_Init+0x232>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4919      	ldr	r1, [pc, #100]	@ (8003d04 <HAL_ADC_Init+0x294>)
 8003c9e:	428b      	cmp	r3, r1
 8003ca0:	d103      	bne.n	8003caa <HAL_ADC_Init+0x23a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ca8:	e003      	b.n	8003cb2 <HAL_ADC_Init+0x242>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003cb2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cb4:	6a3a      	ldr	r2, [r7, #32]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d131      	bne.n	8003d28 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <HAL_ADC_Init+0x284>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	045b      	lsls	r3, r3, #17
 8003cd6:	6a3a      	ldr	r2, [r7, #32]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	e024      	b.n	8003d28 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d113      	bne.n	8003d10 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cee:	623b      	str	r3, [r7, #32]
 8003cf0:	e01a      	b.n	8003d28 <HAL_ADC_Init+0x2b8>
 8003cf2:	bf00      	nop
 8003cf4:	46021000 	.word	0x46021000
 8003cf8:	20000028 	.word	0x20000028
 8003cfc:	053e2d63 	.word	0x053e2d63
 8003d00:	42028000 	.word	0x42028000
 8003d04:	42028100 	.word	0x42028100
 8003d08:	42028300 	.word	0x42028300
 8003d0c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d20:	f043 0201 	orr.w	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a75      	ldr	r2, [pc, #468]	@ (8003f04 <HAL_ADC_Init+0x494>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d018      	beq.n	8003d64 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	4313      	orrs	r3, r2
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	4b6c      	ldr	r3, [pc, #432]	@ (8003f08 <HAL_ADC_Init+0x498>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	6a39      	ldr	r1, [r7, #32]
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	60d3      	str	r3, [r2, #12]
 8003d62:	e031      	b.n	8003dc8 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d70:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	6a3a      	ldr	r2, [r7, #32]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	4b61      	ldr	r3, [pc, #388]	@ (8003f0c <HAL_ADC_Init+0x49c>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	6a39      	ldr	r1, [r7, #32]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1a      	ldr	r2, [r3, #32]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a4d      	ldr	r2, [pc, #308]	@ (8003f04 <HAL_ADC_Init+0x494>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	f000 80a4 	beq.w	8003f1c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fe22 	bl	8003a22 <LL_ADC_REG_IsConversionOngoing>
 8003dde:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fe2f 	bl	8003a48 <LL_ADC_INJ_IsConversionOngoing>
 8003dea:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d166      	bne.n	8003ec0 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d163      	bne.n	8003ec0 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7f1b      	ldrb	r3, [r3, #28]
 8003dfc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4943      	ldr	r1, [pc, #268]	@ (8003f10 <HAL_ADC_Init+0x4a0>)
 8003e04:	428b      	cmp	r3, r1
 8003e06:	d004      	beq.n	8003e12 <HAL_ADC_Init+0x3a2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4941      	ldr	r1, [pc, #260]	@ (8003f14 <HAL_ADC_Init+0x4a4>)
 8003e0e:	428b      	cmp	r3, r1
 8003e10:	d102      	bne.n	8003e18 <HAL_ADC_Init+0x3a8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e16:	e002      	b.n	8003e1e <HAL_ADC_Init+0x3ae>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e2c:	f023 0303 	bic.w	r3, r3, #3
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	6a39      	ldr	r1, [r7, #32]
 8003e36:	430b      	orrs	r3, r1
 8003e38:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7ff fb99 	bl	8003584 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d11e      	bne.n	8003e9a <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e60:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	4b2b      	ldr	r3, [pc, #172]	@ (8003f18 <HAL_ADC_Init+0x4a8>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003e70:	0411      	lsls	r1, r2, #16
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e76:	4311      	orrs	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003e7c:	4311      	orrs	r1, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e88:	0892      	lsrs	r2, r2, #2
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	611a      	str	r2, [r3, #16]
 8003e98:	e007      	b.n	8003eaa <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	f023 010f 	bic.w	r1, r3, #15
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	1e5a      	subs	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ee0:	e007      	b.n	8003ef2 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 020f 	bic.w	r2, r2, #15
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003f02:	e092      	b.n	800402a <HAL_ADC_Init+0x5ba>
 8003f04:	46021000 	.word	0x46021000
 8003f08:	fff0c013 	.word	0xfff0c013
 8003f0c:	ffde800d 	.word	0xffde800d
 8003f10:	42028000 	.word	0x42028000
 8003f14:	42028100 	.word	0x42028100
 8003f18:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d111      	bne.n	8003f4a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003f2e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003f34:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003f3a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	4b39      	ldr	r3, [pc, #228]	@ (8004038 <HAL_ADC_Init+0x5c8>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	69f9      	ldr	r1, [r7, #28]
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f66:	461a      	mov	r2, r3
 8003f68:	2100      	movs	r1, #0
 8003f6a:	f7ff fb2e 	bl	80035ca <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f76:	461a      	mov	r2, r3
 8003f78:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003f7c:	f7ff fb25 	bl	80035ca <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d108      	bne.n	8003f9a <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f062 020f 	orn	r2, r2, #15
 8003f96:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f98:	e018      	b.n	8003fcc <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fa2:	d113      	bne.n	8003fcc <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	f003 031c 	and.w	r3, r3, #28
 8003fb6:	f06f 020f 	mvn.w	r2, #15
 8003fba:	fa02 f103 	lsl.w	r1, r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800403c <HAL_ADC_Init+0x5cc>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	6a3a      	ldr	r2, [r7, #32]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d10b      	bne.n	8003ff4 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	f043 0201 	orr.w	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003ff2:	e01a      	b.n	800402a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ff8:	f023 0312 	bic.w	r3, r3, #18
 8003ffc:	f043 0210 	orr.w	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004016:	e008      	b.n	800402a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401c:	f043 0210 	orr.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800402a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800402e:	4618      	mov	r0, r3
 8004030:	372c      	adds	r7, #44	@ 0x2c
 8004032:	46bd      	mov	sp, r7
 8004034:	bd90      	pop	{r4, r7, pc}
 8004036:	bf00      	nop
 8004038:	f7fffc02 	.word	0xf7fffc02
 800403c:	833ffff3 	.word	0x833ffff3

08004040 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b0a2      	sub	sp, #136	@ 0x88
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a98      	ldr	r2, [pc, #608]	@ (80042b4 <HAL_ADC_Start_DMA+0x274>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_ADC_Start_DMA+0x20>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a97      	ldr	r2, [pc, #604]	@ (80042b8 <HAL_ADC_Start_DMA+0x278>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_ADC_Start_DMA+0x24>
 8004060:	4b96      	ldr	r3, [pc, #600]	@ (80042bc <HAL_ADC_Start_DMA+0x27c>)
 8004062:	e000      	b.n	8004066 <HAL_ADC_Start_DMA+0x26>
 8004064:	4b96      	ldr	r3, [pc, #600]	@ (80042c0 <HAL_ADC_Start_DMA+0x280>)
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fc36 	bl	80038d8 <LL_ADC_GetMultimode>
 800406c:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fcd5 	bl	8003a22 <LL_ADC_REG_IsConversionOngoing>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	f040 8111 	bne.w	80042a2 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_ADC_Start_DMA+0x4e>
 800408a:	2302      	movs	r3, #2
 800408c:	e10e      	b.n	80042ac <HAL_ADC_Start_DMA+0x26c>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004096:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d006      	beq.n	80040aa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800409c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800409e:	2b05      	cmp	r3, #5
 80040a0:	d003      	beq.n	80040aa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040a4:	2b09      	cmp	r3, #9
 80040a6:	f040 80f4 	bne.w	8004292 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f001 fa2c 	bl	8005508 <ADC_Enable>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040b6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 80e4 	bne.w	8004288 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a7a      	ldr	r2, [pc, #488]	@ (80042c4 <HAL_ADC_Start_DMA+0x284>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d026      	beq.n	800412c <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a75      	ldr	r2, [pc, #468]	@ (80042b8 <HAL_ADC_Start_DMA+0x278>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d002      	beq.n	80040ee <HAL_ADC_Start_DMA+0xae>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	e000      	b.n	80040f0 <HAL_ADC_Start_DMA+0xb0>
 80040ee:	4b71      	ldr	r3, [pc, #452]	@ (80042b4 <HAL_ADC_Start_DMA+0x274>)
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d002      	beq.n	80040fe <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004102:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800410e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800411a:	f023 0206 	bic.w	r2, r3, #6
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004122:	e006      	b.n	8004132 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	67da      	str	r2, [r3, #124]	@ 0x7c
 800412a:	e002      	b.n	8004132 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	4a64      	ldr	r2, [pc, #400]	@ (80042c8 <HAL_ADC_Start_DMA+0x288>)
 8004138:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413e:	4a63      	ldr	r2, [pc, #396]	@ (80042cc <HAL_ADC_Start_DMA+0x28c>)
 8004140:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	4a62      	ldr	r2, [pc, #392]	@ (80042d0 <HAL_ADC_Start_DMA+0x290>)
 8004148:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	221c      	movs	r2, #28
 8004150:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0210 	orr.w	r2, r2, #16
 8004168:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a55      	ldr	r2, [pc, #340]	@ (80042c4 <HAL_ADC_Start_DMA+0x284>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d107      	bne.n	8004184 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d04f      	beq.n	8004232 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004198:	2b00      	cmp	r3, #0
 800419a:	d046      	beq.n	800422a <HAL_ADC_Start_DMA+0x1ea>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d040      	beq.n	800422a <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	4611      	mov	r1, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f002 fd9c 	bl	8006cf4 <HAL_DMAEx_List_GetNodeConfig>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e072      	b.n	80042ac <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80041c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d104      	bne.n	80041d6 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041d4:	e00a      	b.n	80041ec <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d104      	bne.n	80041e6 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041e4:	e002      	b.n	80041ec <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041f8:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421c:	4618      	mov	r0, r3
 800421e:	f002 fcbf 	bl	8006ba0 <HAL_DMAEx_List_Start_IT>
 8004222:	4603      	mov	r3, r0
 8004224:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004228:	e028      	b.n	800427c <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004230:	e024      	b.n	800427c <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d104      	bne.n	8004246 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004244:	e00c      	b.n	8004260 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d104      	bne.n	800425a <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004258:	e002      	b.n	8004260 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3340      	adds	r3, #64	@ 0x40
 800426a:	4619      	mov	r1, r3
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004272:	f001 fd03 	bl	8005c7c <HAL_DMA_Start_IT>
 8004276:	4603      	mov	r3, r0
 8004278:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fbba 	bl	80039fa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004286:	e00f      	b.n	80042a8 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8004290:	e00a      	b.n	80042a8 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80042a0:	e002      	b.n	80042a8 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
 80042a4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80042a8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3788      	adds	r7, #136	@ 0x88
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	42028000 	.word	0x42028000
 80042b8:	42028100 	.word	0x42028100
 80042bc:	42028300 	.word	0x42028300
 80042c0:	46021300 	.word	0x46021300
 80042c4:	46021000 	.word	0x46021000
 80042c8:	0800563d 	.word	0x0800563d
 80042cc:	08005715 	.word	0x08005715
 80042d0:	08005731 	.word	0x08005731

080042d4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	@ 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80042dc:	2300      	movs	r3, #0
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a77      	ldr	r2, [pc, #476]	@ (80044d4 <HAL_ADC_IRQHandler+0x200>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_ADC_IRQHandler+0x30>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a76      	ldr	r2, [pc, #472]	@ (80044d8 <HAL_ADC_IRQHandler+0x204>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <HAL_ADC_IRQHandler+0x34>
 8004304:	4b75      	ldr	r3, [pc, #468]	@ (80044dc <HAL_ADC_IRQHandler+0x208>)
 8004306:	e000      	b.n	800430a <HAL_ADC_IRQHandler+0x36>
 8004308:	4b75      	ldr	r3, [pc, #468]	@ (80044e0 <HAL_ADC_IRQHandler+0x20c>)
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fae4 	bl	80038d8 <LL_ADC_GetMultimode>
 8004310:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d017      	beq.n	800434c <HAL_ADC_IRQHandler+0x78>
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d012      	beq.n	800434c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b00      	cmp	r3, #0
 8004330:	d105      	bne.n	800433e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004336:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f001 fa2e 	bl	80057a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2202      	movs	r2, #2
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d004      	beq.n	8004360 <HAL_ADC_IRQHandler+0x8c>
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80d1 	beq.w	800450e <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80cb 	beq.w	800450e <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d105      	bne.n	8004390 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004388:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a53      	ldr	r2, [pc, #332]	@ (80044e4 <HAL_ADC_IRQHandler+0x210>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d06c      	beq.n	8004474 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff f932 	bl	8003608 <LL_ADC_REG_IsTriggerSourceSWStart>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80aa 	beq.w	8004500 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a49      	ldr	r2, [pc, #292]	@ (80044d8 <HAL_ADC_IRQHandler+0x204>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d002      	beq.n	80043bc <HAL_ADC_IRQHandler+0xe8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	e000      	b.n	80043be <HAL_ADC_IRQHandler+0xea>
 80043bc:	4b45      	ldr	r3, [pc, #276]	@ (80044d4 <HAL_ADC_IRQHandler+0x200>)
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d008      	beq.n	80043d8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d002      	beq.n	80043d8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b09      	cmp	r3, #9
 80043d6:	d104      	bne.n	80043e2 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	e00c      	b.n	80043fc <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a3c      	ldr	r2, [pc, #240]	@ (80044d8 <HAL_ADC_IRQHandler+0x204>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d002      	beq.n	80043f2 <HAL_ADC_IRQHandler+0x11e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	e000      	b.n	80043f4 <HAL_ADC_IRQHandler+0x120>
 80043f2:	4b38      	ldr	r3, [pc, #224]	@ (80044d4 <HAL_ADC_IRQHandler+0x200>)
 80043f4:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d17c      	bne.n	8004500 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d175      	bne.n	8004500 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fb02 	bl	8003a22 <LL_ADC_REG_IsConversionOngoing>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d11a      	bne.n	800445a <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 020c 	bic.w	r2, r2, #12
 8004432:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004438:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004444:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d159      	bne.n	8004500 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	679a      	str	r2, [r3, #120]	@ 0x78
 8004458:	e052      	b.n	8004500 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800445e:	f043 0210 	orr.w	r2, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800446a:	f043 0201 	orr.w	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004472:	e045      	b.n	8004500 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff f8c5 	bl	8003608 <LL_ADC_REG_IsTriggerSourceSWStart>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d03d      	beq.n	8004500 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d138      	bne.n	8004500 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b08      	cmp	r3, #8
 800449a:	d131      	bne.n	8004500 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fabe 	bl	8003a22 <LL_ADC_REG_IsConversionOngoing>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d11d      	bne.n	80044e8 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 020c 	bic.w	r2, r2, #12
 80044ba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	679a      	str	r2, [r3, #120]	@ 0x78
 80044d0:	e016      	b.n	8004500 <HAL_ADC_IRQHandler+0x22c>
 80044d2:	bf00      	nop
 80044d4:	42028000 	.word	0x42028000
 80044d8:	42028100 	.word	0x42028100
 80044dc:	42028300 	.word	0x42028300
 80044e0:	46021300 	.word	0x46021300
 80044e4:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f8:	f043 0201 	orr.w	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f99d 	bl	8004840 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	220c      	movs	r2, #12
 800450c:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a8c      	ldr	r2, [pc, #560]	@ (8004744 <HAL_ADC_IRQHandler+0x470>)
 8004514:	4293      	cmp	r3, r2
 8004516:	f000 8095 	beq.w	8004644 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <HAL_ADC_IRQHandler+0x25a>
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8085 	beq.w	8004644 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d07f      	beq.n	8004644 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004554:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff f91e 	bl	80037a2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004566:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff f84b 	bl	8003608 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004572:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a73      	ldr	r2, [pc, #460]	@ (8004748 <HAL_ADC_IRQHandler+0x474>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d002      	beq.n	8004584 <HAL_ADC_IRQHandler+0x2b0>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	e000      	b.n	8004586 <HAL_ADC_IRQHandler+0x2b2>
 8004584:	4b71      	ldr	r3, [pc, #452]	@ (800474c <HAL_ADC_IRQHandler+0x478>)
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	4293      	cmp	r3, r2
 800458c:	d008      	beq.n	80045a0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b06      	cmp	r3, #6
 8004598:	d002      	beq.n	80045a0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b07      	cmp	r3, #7
 800459e:	d104      	bne.n	80045aa <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	e00c      	b.n	80045c4 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a66      	ldr	r2, [pc, #408]	@ (8004748 <HAL_ADC_IRQHandler+0x474>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d002      	beq.n	80045ba <HAL_ADC_IRQHandler+0x2e6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	e000      	b.n	80045bc <HAL_ADC_IRQHandler+0x2e8>
 80045ba:	4b64      	ldr	r3, [pc, #400]	@ (800474c <HAL_ADC_IRQHandler+0x478>)
 80045bc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d035      	beq.n	8004636 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <HAL_ADC_IRQHandler+0x310>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02d      	beq.n	8004636 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d128      	bne.n	8004636 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ee:	2b40      	cmp	r3, #64	@ 0x40
 80045f0:	d121      	bne.n	8004636 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fa26 	bl	8003a48 <LL_ADC_INJ_IsConversionOngoing>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d119      	bne.n	8004636 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004610:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004616:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f001 f894 	bl	8005764 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2260      	movs	r2, #96	@ 0x60
 8004642:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d011      	beq.n	8004672 <HAL_ADC_IRQHandler+0x39e>
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00c      	beq.n	8004672 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800465c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f8ff 	bl	8004868 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2280      	movs	r2, #128	@ 0x80
 8004670:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d012      	beq.n	80046a2 <HAL_ADC_IRQHandler+0x3ce>
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800468a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f001 f870 	bl	8005778 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d012      	beq.n	80046d2 <HAL_ADC_IRQHandler+0x3fe>
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 f862 	bl	800578c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05d      	beq.n	8004798 <HAL_ADC_IRQHandler+0x4c4>
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d058      	beq.n	8004798 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 80046ee:	2301      	movs	r3, #1
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f2:	e03b      	b.n	800476c <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a12      	ldr	r2, [pc, #72]	@ (8004744 <HAL_ADC_IRQHandler+0x470>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d02c      	beq.n	8004758 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d015      	beq.n	8004730 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a10      	ldr	r2, [pc, #64]	@ (800474c <HAL_ADC_IRQHandler+0x478>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_ADC_IRQHandler+0x444>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a0d      	ldr	r2, [pc, #52]	@ (8004748 <HAL_ADC_IRQHandler+0x474>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_ADC_IRQHandler+0x448>
 8004718:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <HAL_ADC_IRQHandler+0x47c>)
 800471a:	e000      	b.n	800471e <HAL_ADC_IRQHandler+0x44a>
 800471c:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <HAL_ADC_IRQHandler+0x480>)
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff f8e8 	bl	80038f4 <LL_ADC_GetMultiDMATransfer>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d020      	beq.n	800476c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800472a:	2301      	movs	r3, #1
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
 800472e:	e01d      	b.n	800476c <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800473e:	2301      	movs	r3, #1
 8004740:	627b      	str	r3, [r7, #36]	@ 0x24
 8004742:	e013      	b.n	800476c <HAL_ADC_IRQHandler+0x498>
 8004744:	46021000 	.word	0x46021000
 8004748:	42028100 	.word	0x42028100
 800474c:	42028000 	.word	0x42028000
 8004750:	42028300 	.word	0x42028300
 8004754:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff f812 	bl	8003786 <LL_ADC_REG_GetDMATransfer>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004768:	2301      	movs	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	2b01      	cmp	r3, #1
 8004770:	d10e      	bne.n	8004790 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004776:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004782:	f043 0202 	orr.w	r2, r3, #2
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f876 	bl	800487c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2210      	movs	r2, #16
 8004796:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01b      	beq.n	80047da <HAL_ADC_IRQHandler+0x506>
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d016      	beq.n	80047da <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d105      	bne.n	80047c4 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047bc:	f043 0201 	orr.w	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f877 	bl	80048b8 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a17      	ldr	r2, [pc, #92]	@ (800483c <HAL_ADC_IRQHandler+0x568>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d126      	bne.n	8004832 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <HAL_ADC_IRQHandler+0x534>
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f849 	bl	8004890 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004806:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00f      	beq.n	8004832 <HAL_ADC_IRQHandler+0x55e>
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f841 	bl	80048a4 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004830:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004832:	bf00      	nop
 8004834:	3728      	adds	r7, #40	@ 0x28
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	46021000 	.word	0x46021000

08004840 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b0b7      	sub	sp, #220	@ 0xdc
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4aa8      	ldr	r2, [pc, #672]	@ (8004b88 <HAL_ADC_ConfigChannel+0x2bc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d103      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d102      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x36>
 80048fc:	2302      	movs	r3, #2
 80048fe:	f000 bdfe 	b.w	80054fe <HAL_ADC_ConfigChannel+0xc32>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff f887 	bl	8003a22 <LL_ADC_REG_IsConversionOngoing>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	f040 85c1 	bne.w	800549e <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a99      	ldr	r2, [pc, #612]	@ (8004b88 <HAL_ADC_ConfigChannel+0x2bc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	f000 8409 	beq.w	800513a <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d108      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x7a>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	0e9b      	lsrs	r3, r3, #26
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2201      	movs	r2, #1
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	e01d      	b.n	8004982 <HAL_ADC_ConfigChannel+0xb6>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800495a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800495e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800496a:	2320      	movs	r3, #32
 800496c:	e004      	b.n	8004978 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800496e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2201      	movs	r2, #1
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	69d1      	ldr	r1, [r2, #28]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	430b      	orrs	r3, r1
 800498e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	f7fe fe47 	bl	8003630 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff f83b 	bl	8003a22 <LL_ADC_REG_IsConversionOngoing>
 80049ac:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff f847 	bl	8003a48 <LL_ADC_INJ_IsConversionOngoing>
 80049ba:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 81df 	bne.w	8004d86 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f040 81da 	bne.w	8004d86 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	461a      	mov	r2, r3
 80049e0:	f7fe fef2 	bl	80037c8 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d046      	beq.n	8004a94 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6919      	ldr	r1, [r3, #16]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a16:	f7fe fd2d 	bl	8003474 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6919      	ldr	r1, [r3, #16]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f7fe fd5b 	bl	80034e2 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	7e9b      	ldrb	r3, [r3, #26]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d11e      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x17e>
 8004a44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a48:	e000      	b.n	8004a4c <HAL_ADC_ConfigChannel+0x180>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f7fe fd7e 	bl	800354e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d102      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x19c>
 8004a62:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004a66:	e000      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x19e>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f7fe fd54 	bl	8003518 <LL_ADC_SetOffsetSignedSaturation>
 8004a70:	e189      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	f7fe fd66 	bl	800354e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f7fe fd43 	bl	8003518 <LL_ADC_SetOffsetSignedSaturation>
 8004a92:	e178      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe fd0b 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x1f4>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe fd00 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	0e9b      	lsrs	r3, r3, #26
 8004aba:	f003 021f 	and.w	r2, r3, #31
 8004abe:	e01e      	b.n	8004afe <HAL_ADC_ConfigChannel+0x232>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe fcf5 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ad6:	fa93 f3a3 	rbit	r3, r3
 8004ada:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004ae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004aee:	2320      	movs	r3, #32
 8004af0:	e004      	b.n	8004afc <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004af2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004af6:	fab3 f383 	clz	r3, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d105      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x24a>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	0e9b      	lsrs	r3, r3, #26
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	e018      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x27c>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b22:	fa93 f3a3 	rbit	r3, r3
 8004b26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	e004      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004b3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d107      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	2300      	movs	r3, #0
 8004b56:	2100      	movs	r1, #0
 8004b58:	f7fe fc8c 	bl	8003474 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2101      	movs	r1, #1
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fca7 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10c      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x2c0>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2101      	movs	r1, #1
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fe fc9c 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	0e9b      	lsrs	r3, r3, #26
 8004b82:	f003 021f 	and.w	r2, r3, #31
 8004b86:	e020      	b.n	8004bca <HAL_ADC_ConfigChannel+0x2fe>
 8004b88:	46021000 	.word	0x46021000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe fc8f 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ba2:	fa93 f3a3 	rbit	r3, r3
 8004ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004bae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8004bba:	2320      	movs	r3, #32
 8004bbc:	e004      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d105      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x316>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	0e9b      	lsrs	r3, r3, #26
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	e018      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x348>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004c06:	2320      	movs	r3, #32
 8004c08:	e004      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c0e:	fab3 f383 	clz	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d107      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	2300      	movs	r3, #0
 8004c22:	2101      	movs	r1, #1
 8004c24:	f7fe fc26 	bl	8003474 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fc41 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x388>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2102      	movs	r1, #2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe fc36 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	0e9b      	lsrs	r3, r3, #26
 8004c4e:	f003 021f 	and.w	r2, r3, #31
 8004c52:	e01a      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x3be>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2102      	movs	r1, #2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe fc2b 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004c60:	4603      	mov	r3, r0
 8004c62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c66:	fa93 f3a3 	rbit	r3, r3
 8004c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004c7a:	2320      	movs	r3, #32
 8004c7c:	e004      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d105      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x3d6>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	0e9b      	lsrs	r3, r3, #26
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	e011      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0x3fa>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cb2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004cb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004cba:	2320      	movs	r3, #32
 8004cbc:	e003      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cc0:	fab3 f383 	clz	r3, r3
 8004cc4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d107      	bne.n	8004cda <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	f7fe fbcd 	bl	8003474 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2103      	movs	r1, #3
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fbe8 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <HAL_ADC_ConfigChannel+0x43a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2103      	movs	r1, #3
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fbdd 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	0e9b      	lsrs	r3, r3, #26
 8004d00:	f003 021f 	and.w	r2, r3, #31
 8004d04:	e017      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x46a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2103      	movs	r1, #3
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe fbd2 	bl	80034b6 <LL_ADC_GetOffsetChannel>
 8004d12:	4603      	mov	r3, r0
 8004d14:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d18:	fa93 f3a3 	rbit	r3, r3
 8004d1c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004d1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d20:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004d22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004d28:	2320      	movs	r3, #32
 8004d2a:	e003      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004d2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d2e:	fab3 f383 	clz	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d105      	bne.n	8004d4e <HAL_ADC_ConfigChannel+0x482>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	0e9b      	lsrs	r3, r3, #26
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	e011      	b.n	8004d72 <HAL_ADC_ConfigChannel+0x4a6>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d56:	fa93 f3a3 	rbit	r3, r3
 8004d5a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004d60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8004d66:	2320      	movs	r3, #32
 8004d68:	e003      	b.n	8004d72 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8004d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d6c:	fab3 f383 	clz	r3, r3
 8004d70:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d107      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2103      	movs	r1, #3
 8004d82:	f7fe fb77 	bl	8003474 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe fe22 	bl	80039d4 <LL_ADC_IsEnabled>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 83ad 	bne.w	80054f2 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	461a      	mov	r2, r3
 8004da6:	f7fe fd73 	bl	8003890 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004db2:	f040 80d6 	bne.w	8004f62 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <HAL_ADC_ConfigChannel+0x50e>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	0e9b      	lsrs	r3, r3, #26
 8004dc8:	3301      	adds	r3, #1
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	2b09      	cmp	r3, #9
 8004dd0:	bf94      	ite	ls
 8004dd2:	2301      	movls	r3, #1
 8004dd4:	2300      	movhi	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e019      	b.n	8004e0e <HAL_ADC_ConfigChannel+0x542>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004de2:	fa93 f3a3 	rbit	r3, r3
 8004de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004df2:	2320      	movs	r3, #32
 8004df4:	e003      	b.n	8004dfe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004df8:	fab3 f383 	clz	r3, r3
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2b09      	cmp	r3, #9
 8004e06:	bf94      	ite	ls
 8004e08:	2301      	movls	r3, #1
 8004e0a:	2300      	movhi	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d04d      	beq.n	8004eae <HAL_ADC_ConfigChannel+0x5e2>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d107      	bne.n	8004e2e <HAL_ADC_ConfigChannel+0x562>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	0e9b      	lsrs	r3, r3, #26
 8004e24:	3301      	adds	r3, #1
 8004e26:	069b      	lsls	r3, r3, #26
 8004e28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e2c:	e015      	b.n	8004e5a <HAL_ADC_ConfigChannel+0x58e>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e36:	fa93 f3a3 	rbit	r3, r3
 8004e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004e46:	2320      	movs	r3, #32
 8004e48:	e003      	b.n	8004e52 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4c:	fab3 f383 	clz	r3, r3
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	3301      	adds	r3, #1
 8004e54:	069b      	lsls	r3, r3, #26
 8004e56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x5ae>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	0e9b      	lsrs	r3, r3, #26
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2101      	movs	r1, #1
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	e017      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x5de>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e82:	fa93 f3a3 	rbit	r3, r3
 8004e86:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8004e92:	2320      	movs	r3, #32
 8004e94:	e003      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e98:	fab3 f383 	clz	r3, r3
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	e04e      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x680>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d107      	bne.n	8004eca <HAL_ADC_ConfigChannel+0x5fe>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	0e9b      	lsrs	r3, r3, #26
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	069b      	lsls	r3, r3, #26
 8004ec4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ec8:	e015      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x62a>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	fa93 f3a3 	rbit	r3, r3
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004ee2:	2320      	movs	r3, #32
 8004ee4:	e003      	b.n	8004eee <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	069b      	lsls	r3, r3, #26
 8004ef2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x64a>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	0e9b      	lsrs	r3, r3, #26
 8004f08:	3301      	adds	r3, #1
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	e017      	b.n	8004f46 <HAL_ADC_ConfigChannel+0x67a>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	fa93 f3a3 	rbit	r3, r3
 8004f22:	61bb      	str	r3, [r7, #24]
  return result;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8004f2e:	2320      	movs	r3, #32
 8004f30:	e003      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	fab3 f383 	clz	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004f5e:	f7fe fc33 	bl	80037c8 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f280 82c3 	bge.w	80054f2 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a92      	ldr	r2, [pc, #584]	@ (80051bc <HAL_ADC_ConfigChannel+0x8f0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_ADC_ConfigChannel+0x6b4>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a91      	ldr	r2, [pc, #580]	@ (80051c0 <HAL_ADC_ConfigChannel+0x8f4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d101      	bne.n	8004f84 <HAL_ADC_ConfigChannel+0x6b8>
 8004f80:	4b90      	ldr	r3, [pc, #576]	@ (80051c4 <HAL_ADC_ConfigChannel+0x8f8>)
 8004f82:	e000      	b.n	8004f86 <HAL_ADC_ConfigChannel+0x6ba>
 8004f84:	4b90      	ldr	r3, [pc, #576]	@ (80051c8 <HAL_ADC_ConfigChannel+0x8fc>)
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe fa46 	bl	8003418 <LL_ADC_GetCommonPathInternalCh>
 8004f8c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a89      	ldr	r2, [pc, #548]	@ (80051bc <HAL_ADC_ConfigChannel+0x8f0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_ADC_ConfigChannel+0x6d8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a88      	ldr	r2, [pc, #544]	@ (80051c0 <HAL_ADC_ConfigChannel+0x8f4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d10e      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x6f6>
 8004fa4:	4885      	ldr	r0, [pc, #532]	@ (80051bc <HAL_ADC_ConfigChannel+0x8f0>)
 8004fa6:	f7fe fd15 	bl	80039d4 <LL_ADC_IsEnabled>
 8004faa:	4604      	mov	r4, r0
 8004fac:	4884      	ldr	r0, [pc, #528]	@ (80051c0 <HAL_ADC_ConfigChannel+0x8f4>)
 8004fae:	f7fe fd11 	bl	80039d4 <LL_ADC_IsEnabled>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4323      	orrs	r3, r4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	e008      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x708>
 8004fc2:	4882      	ldr	r0, [pc, #520]	@ (80051cc <HAL_ADC_ConfigChannel+0x900>)
 8004fc4:	f7fe fd06 	bl	80039d4 <LL_ADC_IsEnabled>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80a6 	beq.w	8005126 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a7c      	ldr	r2, [pc, #496]	@ (80051d0 <HAL_ADC_ConfigChannel+0x904>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d13c      	bne.n	800505e <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004fe4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d136      	bne.n	800505e <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a71      	ldr	r2, [pc, #452]	@ (80051bc <HAL_ADC_ConfigChannel+0x8f0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00a      	beq.n	8005010 <HAL_ADC_ConfigChannel+0x744>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a70      	ldr	r2, [pc, #448]	@ (80051c0 <HAL_ADC_ConfigChannel+0x8f4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d005      	beq.n	8005010 <HAL_ADC_ConfigChannel+0x744>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a70      	ldr	r2, [pc, #448]	@ (80051cc <HAL_ADC_ConfigChannel+0x900>)
 800500a:	4293      	cmp	r3, r2
 800500c:	f040 826e 	bne.w	80054ec <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a69      	ldr	r2, [pc, #420]	@ (80051bc <HAL_ADC_ConfigChannel+0x8f0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_ADC_ConfigChannel+0x758>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a68      	ldr	r2, [pc, #416]	@ (80051c0 <HAL_ADC_ConfigChannel+0x8f4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d101      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x75c>
 8005024:	4a67      	ldr	r2, [pc, #412]	@ (80051c4 <HAL_ADC_ConfigChannel+0x8f8>)
 8005026:	e000      	b.n	800502a <HAL_ADC_ConfigChannel+0x75e>
 8005028:	4a67      	ldr	r2, [pc, #412]	@ (80051c8 <HAL_ADC_ConfigChannel+0x8fc>)
 800502a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800502e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7fe f9dc 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800503a:	4b66      	ldr	r3, [pc, #408]	@ (80051d4 <HAL_ADC_ConfigChannel+0x908>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	099b      	lsrs	r3, r3, #6
 8005040:	4a65      	ldr	r2, [pc, #404]	@ (80051d8 <HAL_ADC_ConfigChannel+0x90c>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	099b      	lsrs	r3, r3, #6
 8005048:	3301      	adds	r3, #1
 800504a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800504c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800504e:	e002      	b.n	8005056 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	3b01      	subs	r3, #1
 8005054:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f9      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800505c:	e246      	b.n	80054ec <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a5e      	ldr	r2, [pc, #376]	@ (80051dc <HAL_ADC_ConfigChannel+0x910>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d12b      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800506c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8005070:	2b00      	cmp	r3, #0
 8005072:	d125      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a50      	ldr	r2, [pc, #320]	@ (80051bc <HAL_ADC_ConfigChannel+0x8f0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00a      	beq.n	8005094 <HAL_ADC_ConfigChannel+0x7c8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a4f      	ldr	r2, [pc, #316]	@ (80051c0 <HAL_ADC_ConfigChannel+0x8f4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d005      	beq.n	8005094 <HAL_ADC_ConfigChannel+0x7c8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a4f      	ldr	r2, [pc, #316]	@ (80051cc <HAL_ADC_ConfigChannel+0x900>)
 800508e:	4293      	cmp	r3, r2
 8005090:	f040 822e 	bne.w	80054f0 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a48      	ldr	r2, [pc, #288]	@ (80051bc <HAL_ADC_ConfigChannel+0x8f0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_ADC_ConfigChannel+0x7dc>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a47      	ldr	r2, [pc, #284]	@ (80051c0 <HAL_ADC_ConfigChannel+0x8f4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d101      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x7e0>
 80050a8:	4a46      	ldr	r2, [pc, #280]	@ (80051c4 <HAL_ADC_ConfigChannel+0x8f8>)
 80050aa:	e000      	b.n	80050ae <HAL_ADC_ConfigChannel+0x7e2>
 80050ac:	4a46      	ldr	r2, [pc, #280]	@ (80051c8 <HAL_ADC_ConfigChannel+0x8fc>)
 80050ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f7fe f99a 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050be:	e217      	b.n	80054f0 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a46      	ldr	r2, [pc, #280]	@ (80051e0 <HAL_ADC_ConfigChannel+0x914>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	f040 8213 	bne.w	80054f2 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f040 820c 	bne.w	80054f2 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a37      	ldr	r2, [pc, #220]	@ (80051bc <HAL_ADC_ConfigChannel+0x8f0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00a      	beq.n	80050fa <HAL_ADC_ConfigChannel+0x82e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a35      	ldr	r2, [pc, #212]	@ (80051c0 <HAL_ADC_ConfigChannel+0x8f4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d005      	beq.n	80050fa <HAL_ADC_ConfigChannel+0x82e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a36      	ldr	r2, [pc, #216]	@ (80051cc <HAL_ADC_ConfigChannel+0x900>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	f040 81fc 	bne.w	80054f2 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2f      	ldr	r2, [pc, #188]	@ (80051bc <HAL_ADC_ConfigChannel+0x8f0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_ADC_ConfigChannel+0x842>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2d      	ldr	r2, [pc, #180]	@ (80051c0 <HAL_ADC_ConfigChannel+0x8f4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d101      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x846>
 800510e:	4a2d      	ldr	r2, [pc, #180]	@ (80051c4 <HAL_ADC_ConfigChannel+0x8f8>)
 8005110:	e000      	b.n	8005114 <HAL_ADC_ConfigChannel+0x848>
 8005112:	4a2d      	ldr	r2, [pc, #180]	@ (80051c8 <HAL_ADC_ConfigChannel+0x8fc>)
 8005114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005118:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f7fe f967 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
 8005124:	e1e5      	b.n	80054f2 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005138:	e1db      	b.n	80054f2 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b02      	cmp	r3, #2
 8005148:	f000 811b 	beq.w	8005382 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005154:	d004      	beq.n	8005160 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800515a:	4a22      	ldr	r2, [pc, #136]	@ (80051e4 <HAL_ADC_ConfigChannel+0x918>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d107      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe fac1 	bl	80036f0 <LL_ADC_REG_SetSequencerChAdd>
 800516e:	e059      	b.n	8005224 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	210f      	movs	r1, #15
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	401a      	ands	r2, r3
 8005188:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800518c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x8d4>
 8005194:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005198:	0e9b      	lsrs	r3, r3, #26
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	e027      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x924>
 80051a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80051a4:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	fa93 f3a3 	rbit	r3, r3
 80051ac:	60fb      	str	r3, [r7, #12]
  return result;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d117      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80051b8:	2320      	movs	r3, #32
 80051ba:	e019      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x924>
 80051bc:	42028000 	.word	0x42028000
 80051c0:	42028100 	.word	0x42028100
 80051c4:	42028300 	.word	0x42028300
 80051c8:	46021300 	.word	0x46021300
 80051cc:	46021000 	.word	0x46021000
 80051d0:	ce080000 	.word	0xce080000
 80051d4:	20000028 	.word	0x20000028
 80051d8:	053e2d63 	.word	0x053e2d63
 80051dc:	ca040000 	.word	0xca040000
 80051e0:	80000001 	.word	0x80000001
 80051e4:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	fab3 f383 	clz	r3, r3
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	6849      	ldr	r1, [r1, #4]
 80051f4:	f001 011f 	and.w	r1, r1, #31
 80051f8:	408b      	lsls	r3, r1
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	089b      	lsrs	r3, r3, #2
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520e:	429a      	cmp	r2, r3
 8005210:	d808      	bhi.n	8005224 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800521e:	4619      	mov	r1, r3
 8005220:	f7fe fa06 	bl	8003630 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	461a      	mov	r2, r3
 800522e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005232:	f7fe fac9 	bl	80037c8 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f280 8159 	bge.w	80054f2 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a9b      	ldr	r2, [pc, #620]	@ (80054b4 <HAL_ADC_ConfigChannel+0xbe8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_ADC_ConfigChannel+0x988>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a9a      	ldr	r2, [pc, #616]	@ (80054b8 <HAL_ADC_ConfigChannel+0xbec>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <HAL_ADC_ConfigChannel+0x98c>
 8005254:	4b99      	ldr	r3, [pc, #612]	@ (80054bc <HAL_ADC_ConfigChannel+0xbf0>)
 8005256:	e000      	b.n	800525a <HAL_ADC_ConfigChannel+0x98e>
 8005258:	4b99      	ldr	r3, [pc, #612]	@ (80054c0 <HAL_ADC_ConfigChannel+0xbf4>)
 800525a:	4618      	mov	r0, r3
 800525c:	f7fe f8dc 	bl	8003418 <LL_ADC_GetCommonPathInternalCh>
 8005260:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a96      	ldr	r2, [pc, #600]	@ (80054c4 <HAL_ADC_ConfigChannel+0xbf8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d12b      	bne.n	80052c6 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800526e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d125      	bne.n	80052c6 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a8d      	ldr	r2, [pc, #564]	@ (80054b4 <HAL_ADC_ConfigChannel+0xbe8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <HAL_ADC_ConfigChannel+0x9c2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a8b      	ldr	r2, [pc, #556]	@ (80054b8 <HAL_ADC_ConfigChannel+0xbec>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d101      	bne.n	8005292 <HAL_ADC_ConfigChannel+0x9c6>
 800528e:	4a8b      	ldr	r2, [pc, #556]	@ (80054bc <HAL_ADC_ConfigChannel+0xbf0>)
 8005290:	e000      	b.n	8005294 <HAL_ADC_ConfigChannel+0x9c8>
 8005292:	4a8b      	ldr	r2, [pc, #556]	@ (80054c0 <HAL_ADC_ConfigChannel+0xbf4>)
 8005294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005298:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800529c:	4619      	mov	r1, r3
 800529e:	4610      	mov	r0, r2
 80052a0:	f7fe f8a7 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80052a4:	4b88      	ldr	r3, [pc, #544]	@ (80054c8 <HAL_ADC_ConfigChannel+0xbfc>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	099b      	lsrs	r3, r3, #6
 80052aa:	4a88      	ldr	r2, [pc, #544]	@ (80054cc <HAL_ADC_ConfigChannel+0xc00>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	099b      	lsrs	r3, r3, #6
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80052b6:	e002      	b.n	80052be <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f9      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80052c4:	e045      	b.n	8005352 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a81      	ldr	r2, [pc, #516]	@ (80054d0 <HAL_ADC_ConfigChannel+0xc04>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d11b      	bne.n	8005308 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d115      	bne.n	8005308 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a74      	ldr	r2, [pc, #464]	@ (80054b4 <HAL_ADC_ConfigChannel+0xbe8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_ADC_ConfigChannel+0xa24>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a73      	ldr	r2, [pc, #460]	@ (80054b8 <HAL_ADC_ConfigChannel+0xbec>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d101      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0xa28>
 80052f0:	4a72      	ldr	r2, [pc, #456]	@ (80054bc <HAL_ADC_ConfigChannel+0xbf0>)
 80052f2:	e000      	b.n	80052f6 <HAL_ADC_ConfigChannel+0xa2a>
 80052f4:	4a72      	ldr	r2, [pc, #456]	@ (80054c0 <HAL_ADC_ConfigChannel+0xbf4>)
 80052f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f7fe f876 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
 8005306:	e024      	b.n	8005352 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a71      	ldr	r2, [pc, #452]	@ (80054d4 <HAL_ADC_ConfigChannel+0xc08>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d11f      	bne.n	8005352 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005312:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d115      	bne.n	800534a <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a64      	ldr	r2, [pc, #400]	@ (80054b4 <HAL_ADC_ConfigChannel+0xbe8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <HAL_ADC_ConfigChannel+0xa66>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a62      	ldr	r2, [pc, #392]	@ (80054b8 <HAL_ADC_ConfigChannel+0xbec>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d101      	bne.n	8005336 <HAL_ADC_ConfigChannel+0xa6a>
 8005332:	4a62      	ldr	r2, [pc, #392]	@ (80054bc <HAL_ADC_ConfigChannel+0xbf0>)
 8005334:	e000      	b.n	8005338 <HAL_ADC_ConfigChannel+0xa6c>
 8005336:	4a62      	ldr	r2, [pc, #392]	@ (80054c0 <HAL_ADC_ConfigChannel+0xbf4>)
 8005338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800533c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f7fe f855 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
 8005348:	e003      	b.n	8005352 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a62      	ldr	r2, [pc, #392]	@ (80054d8 <HAL_ADC_ConfigChannel+0xc0c>)
 8005350:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a61      	ldr	r2, [pc, #388]	@ (80054dc <HAL_ADC_ConfigChannel+0xc10>)
 8005358:	4293      	cmp	r3, r2
 800535a:	f040 80ca 	bne.w	80054f2 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800535e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 80c3 	bne.w	80054f2 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005380:	e0b7      	b.n	80054f2 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800538a:	d004      	beq.n	8005396 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005390:	4a53      	ldr	r2, [pc, #332]	@ (80054e0 <HAL_ADC_ConfigChannel+0xc14>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d106      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe f9d9 	bl	8003756 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f280 80a2 	bge.w	80054f2 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a40      	ldr	r2, [pc, #256]	@ (80054b4 <HAL_ADC_ConfigChannel+0xbe8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <HAL_ADC_ConfigChannel+0xaf6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a3e      	ldr	r2, [pc, #248]	@ (80054b8 <HAL_ADC_ConfigChannel+0xbec>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d101      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0xafa>
 80053c2:	4b3e      	ldr	r3, [pc, #248]	@ (80054bc <HAL_ADC_ConfigChannel+0xbf0>)
 80053c4:	e000      	b.n	80053c8 <HAL_ADC_ConfigChannel+0xafc>
 80053c6:	4b3e      	ldr	r3, [pc, #248]	@ (80054c0 <HAL_ADC_ConfigChannel+0xbf4>)
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe f825 	bl	8003418 <LL_ADC_GetCommonPathInternalCh>
 80053ce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a43      	ldr	r2, [pc, #268]	@ (80054e4 <HAL_ADC_ConfigChannel+0xc18>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d115      	bne.n	8005408 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a34      	ldr	r2, [pc, #208]	@ (80054b4 <HAL_ADC_ConfigChannel+0xbe8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_ADC_ConfigChannel+0xb24>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a33      	ldr	r2, [pc, #204]	@ (80054b8 <HAL_ADC_ConfigChannel+0xbec>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0xb28>
 80053f0:	4a32      	ldr	r2, [pc, #200]	@ (80054bc <HAL_ADC_ConfigChannel+0xbf0>)
 80053f2:	e000      	b.n	80053f6 <HAL_ADC_ConfigChannel+0xb2a>
 80053f4:	4a32      	ldr	r2, [pc, #200]	@ (80054c0 <HAL_ADC_ConfigChannel+0xbf4>)
 80053f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f7fd fff6 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
 8005406:	e034      	b.n	8005472 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a36      	ldr	r2, [pc, #216]	@ (80054e8 <HAL_ADC_ConfigChannel+0xc1c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d115      	bne.n	800543e <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a27      	ldr	r2, [pc, #156]	@ (80054b4 <HAL_ADC_ConfigChannel+0xbe8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_ADC_ConfigChannel+0xb5a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a25      	ldr	r2, [pc, #148]	@ (80054b8 <HAL_ADC_ConfigChannel+0xbec>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d101      	bne.n	800542a <HAL_ADC_ConfigChannel+0xb5e>
 8005426:	4a25      	ldr	r2, [pc, #148]	@ (80054bc <HAL_ADC_ConfigChannel+0xbf0>)
 8005428:	e000      	b.n	800542c <HAL_ADC_ConfigChannel+0xb60>
 800542a:	4a25      	ldr	r2, [pc, #148]	@ (80054c0 <HAL_ADC_ConfigChannel+0xbf4>)
 800542c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005430:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fd ffdb 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
 800543c:	e019      	b.n	8005472 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a24      	ldr	r2, [pc, #144]	@ (80054d4 <HAL_ADC_ConfigChannel+0xc08>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d114      	bne.n	8005472 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a19      	ldr	r2, [pc, #100]	@ (80054b4 <HAL_ADC_ConfigChannel+0xbe8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_ADC_ConfigChannel+0xb90>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a18      	ldr	r2, [pc, #96]	@ (80054b8 <HAL_ADC_ConfigChannel+0xbec>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d101      	bne.n	8005460 <HAL_ADC_ConfigChannel+0xb94>
 800545c:	4a17      	ldr	r2, [pc, #92]	@ (80054bc <HAL_ADC_ConfigChannel+0xbf0>)
 800545e:	e000      	b.n	8005462 <HAL_ADC_ConfigChannel+0xb96>
 8005460:	4a17      	ldr	r2, [pc, #92]	@ (80054c0 <HAL_ADC_ConfigChannel+0xbf4>)
 8005462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005466:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f7fd ffc0 	bl	80033f2 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a19      	ldr	r2, [pc, #100]	@ (80054dc <HAL_ADC_ConfigChannel+0xc10>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d13a      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800547c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005480:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d134      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800549c:	e029      	b.n	80054f2 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80054b0:	e01f      	b.n	80054f2 <HAL_ADC_ConfigChannel+0xc26>
 80054b2:	bf00      	nop
 80054b4:	42028000 	.word	0x42028000
 80054b8:	42028100 	.word	0x42028100
 80054bc:	42028300 	.word	0x42028300
 80054c0:	46021300 	.word	0x46021300
 80054c4:	b6002000 	.word	0xb6002000
 80054c8:	20000028 	.word	0x20000028
 80054cc:	053e2d63 	.word	0x053e2d63
 80054d0:	ba004000 	.word	0xba004000
 80054d4:	80000001 	.word	0x80000001
 80054d8:	b2001000 	.word	0xb2001000
 80054dc:	d7200000 	.word	0xd7200000
 80054e0:	80000010 	.word	0x80000010
 80054e4:	ce080000 	.word	0xce080000
 80054e8:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054ec:	bf00      	nop
 80054ee:	e000      	b.n	80054f2 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054f0:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80054fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80054fe:	4618      	mov	r0, r3
 8005500:	37dc      	adds	r7, #220	@ 0xdc
 8005502:	46bd      	mov	sp, r7
 8005504:	bd90      	pop	{r4, r7, pc}
 8005506:	bf00      	nop

08005508 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe fa5d 	bl	80039d4 <LL_ADC_IsEnabled>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d17b      	bne.n	8005618 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	4b3f      	ldr	r3, [pc, #252]	@ (8005624 <ADC_Enable+0x11c>)
 8005528:	4013      	ands	r3, r2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00d      	beq.n	800554a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005532:	f043 0210 	orr.w	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800553e:	f043 0201 	orr.w	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e067      	b.n	800561a <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fa28 	bl	80039ac <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <ADC_Enable+0x66>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2f      	ldr	r2, [pc, #188]	@ (8005628 <ADC_Enable+0x120>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d054      	beq.n	8005618 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800556e:	f7fd fed5 	bl	800331c <HAL_GetTick>
 8005572:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2c      	ldr	r2, [pc, #176]	@ (800562c <ADC_Enable+0x124>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <ADC_Enable+0x80>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2b      	ldr	r2, [pc, #172]	@ (8005630 <ADC_Enable+0x128>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <ADC_Enable+0x84>
 8005588:	4b2a      	ldr	r3, [pc, #168]	@ (8005634 <ADC_Enable+0x12c>)
 800558a:	e000      	b.n	800558e <ADC_Enable+0x86>
 800558c:	4b2a      	ldr	r3, [pc, #168]	@ (8005638 <ADC_Enable+0x130>)
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe f9a2 	bl	80038d8 <LL_ADC_GetMultimode>
 8005594:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a25      	ldr	r2, [pc, #148]	@ (8005630 <ADC_Enable+0x128>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d002      	beq.n	80055a6 <ADC_Enable+0x9e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	e000      	b.n	80055a8 <ADC_Enable+0xa0>
 80055a6:	4b21      	ldr	r3, [pc, #132]	@ (800562c <ADC_Enable+0x124>)
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d02c      	beq.n	800560a <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d130      	bne.n	8005618 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055b6:	e028      	b.n	800560a <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe fa09 	bl	80039d4 <LL_ADC_IsEnabled>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fe f9ed 	bl	80039ac <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80055d2:	f7fd fea3 	bl	800331c <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d914      	bls.n	800560a <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d00d      	beq.n	800560a <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055f2:	f043 0210 	orr.w	r2, r3, #16
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055fe:	f043 0201 	orr.w	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e007      	b.n	800561a <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b01      	cmp	r3, #1
 8005616:	d1cf      	bne.n	80055b8 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	8000003f 	.word	0x8000003f
 8005628:	46021000 	.word	0x46021000
 800562c:	42028000 	.word	0x42028000
 8005630:	42028100 	.word	0x42028100
 8005634:	42028300 	.word	0x42028300
 8005638:	46021300 	.word	0x46021300

0800563c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005648:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800564e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005652:	2b00      	cmp	r3, #0
 8005654:	d14b      	bne.n	80056ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800565a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d021      	beq.n	80056b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7fd ffc7 	bl	8003608 <LL_ADC_REG_IsTriggerSourceSWStart>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d032      	beq.n	80056e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d12b      	bne.n	80056e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005692:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800569e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d11f      	bne.n	80056e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056aa:	f043 0201 	orr.w	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	679a      	str	r2, [r3, #120]	@ 0x78
 80056b2:	e018      	b.n	80056e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d111      	bne.n	80056e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d105      	bne.n	80056e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056de:	f043 0201 	orr.w	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff f8aa 	bl	8004840 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80056ec:	e00e      	b.n	800570c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff f8be 	bl	800487c <HAL_ADC_ErrorCallback>
}
 8005700:	e004      	b.n	800570c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005720:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff f896 	bl	8004854 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800573c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005742:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff f890 	bl	800487c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057c4:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057d0:	4013      	ands	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057e6:	4a04      	ldr	r2, [pc, #16]	@ (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	60d3      	str	r3, [r2, #12]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	e000ed00 	.word	0xe000ed00

080057fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005800:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <__NVIC_GetPriorityGrouping+0x18>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	f003 0307 	and.w	r3, r3, #7
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	e000ed00 	.word	0xe000ed00

08005818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005826:	2b00      	cmp	r3, #0
 8005828:	db0b      	blt.n	8005842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	f003 021f 	and.w	r2, r3, #31
 8005830:	4907      	ldr	r1, [pc, #28]	@ (8005850 <__NVIC_EnableIRQ+0x38>)
 8005832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2001      	movs	r0, #1
 800583a:	fa00 f202 	lsl.w	r2, r0, r2
 800583e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	e000e100 	.word	0xe000e100

08005854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005864:	2b00      	cmp	r3, #0
 8005866:	db0a      	blt.n	800587e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	490c      	ldr	r1, [pc, #48]	@ (80058a0 <__NVIC_SetPriority+0x4c>)
 800586e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005872:	0112      	lsls	r2, r2, #4
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	440b      	add	r3, r1
 8005878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800587c:	e00a      	b.n	8005894 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4908      	ldr	r1, [pc, #32]	@ (80058a4 <__NVIC_SetPriority+0x50>)
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	3b04      	subs	r3, #4
 800588c:	0112      	lsls	r2, r2, #4
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	440b      	add	r3, r1
 8005892:	761a      	strb	r2, [r3, #24]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	e000e100 	.word	0xe000e100
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	@ 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f1c3 0307 	rsb	r3, r3, #7
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	bf28      	it	cs
 80058c6:	2304      	movcs	r3, #4
 80058c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3304      	adds	r3, #4
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d902      	bls.n	80058d8 <NVIC_EncodePriority+0x30>
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3b03      	subs	r3, #3
 80058d6:	e000      	b.n	80058da <NVIC_EncodePriority+0x32>
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	401a      	ands	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058f0:	f04f 31ff 	mov.w	r1, #4294967295
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	43d9      	mvns	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005900:	4313      	orrs	r3, r2
         );
}
 8005902:	4618      	mov	r0, r3
 8005904:	3724      	adds	r7, #36	@ 0x24
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff ff4c 	bl	80057b4 <__NVIC_SetPriorityGrouping>
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005932:	f7ff ff63 	bl	80057fc <__NVIC_GetPriorityGrouping>
 8005936:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	6978      	ldr	r0, [r7, #20]
 800593e:	f7ff ffb3 	bl	80058a8 <NVIC_EncodePriority>
 8005942:	4602      	mov	r2, r0
 8005944:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff ff82 	bl	8005854 <__NVIC_SetPriority>
}
 8005950:	bf00      	nop
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff ff56 	bl	8005818 <__NVIC_EnableIRQ>
}
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b04      	cmp	r3, #4
 8005980:	d844      	bhi.n	8005a0c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005982:	a201      	add	r2, pc, #4	@ (adr r2, 8005988 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059ab 	.word	0x080059ab
 800598c:	080059c9 	.word	0x080059c9
 8005990:	080059eb 	.word	0x080059eb
 8005994:	08005a0d 	.word	0x08005a0d
 8005998:	0800599d 	.word	0x0800599d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800599c:	4b1f      	ldr	r3, [pc, #124]	@ (8005a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059a2:	f043 0304 	orr.w	r3, r3, #4
 80059a6:	6013      	str	r3, [r2, #0]
      break;
 80059a8:	e031      	b.n	8005a0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80059aa:	4b1c      	ldr	r3, [pc, #112]	@ (8005a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1b      	ldr	r2, [pc, #108]	@ (8005a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059b0:	f023 0304 	bic.w	r3, r3, #4
 80059b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80059b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059bc:	4a18      	ldr	r2, [pc, #96]	@ (8005a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059be:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80059c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80059c6:	e022      	b.n	8005a0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80059c8:	4b14      	ldr	r3, [pc, #80]	@ (8005a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a13      	ldr	r2, [pc, #76]	@ (8005a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059ce:	f023 0304 	bic.w	r3, r3, #4
 80059d2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80059d4:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80059de:	4a10      	ldr	r2, [pc, #64]	@ (8005a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80059e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80059e8:	e011      	b.n	8005a0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80059ea:	4b0c      	ldr	r3, [pc, #48]	@ (8005a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a0b      	ldr	r2, [pc, #44]	@ (8005a1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059f0:	f023 0304 	bic.w	r3, r3, #4
 80059f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80059f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059fc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005a00:	4a07      	ldr	r2, [pc, #28]	@ (8005a20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005a0a:	e000      	b.n	8005a0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005a0c:	bf00      	nop
  }
}
 8005a0e:	bf00      	nop
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	e000e010 	.word	0xe000e010
 8005a20:	46020c00 	.word	0x46020c00

08005a24 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005a2c:	f7fd fc76 	bl	800331c <HAL_GetTick>
 8005a30:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0db      	b.n	8005bf4 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a6e      	ldr	r2, [pc, #440]	@ (8005bfc <HAL_DMA_Init+0x1d8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	f000 809f 	beq.w	8005b86 <HAL_DMA_Init+0x162>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a6c      	ldr	r2, [pc, #432]	@ (8005c00 <HAL_DMA_Init+0x1dc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	f000 8099 	beq.w	8005b86 <HAL_DMA_Init+0x162>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a6a      	ldr	r2, [pc, #424]	@ (8005c04 <HAL_DMA_Init+0x1e0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	f000 8093 	beq.w	8005b86 <HAL_DMA_Init+0x162>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a68      	ldr	r2, [pc, #416]	@ (8005c08 <HAL_DMA_Init+0x1e4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	f000 808d 	beq.w	8005b86 <HAL_DMA_Init+0x162>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a66      	ldr	r2, [pc, #408]	@ (8005c0c <HAL_DMA_Init+0x1e8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	f000 8087 	beq.w	8005b86 <HAL_DMA_Init+0x162>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a64      	ldr	r2, [pc, #400]	@ (8005c10 <HAL_DMA_Init+0x1ec>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	f000 8081 	beq.w	8005b86 <HAL_DMA_Init+0x162>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a62      	ldr	r2, [pc, #392]	@ (8005c14 <HAL_DMA_Init+0x1f0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d07b      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a61      	ldr	r2, [pc, #388]	@ (8005c18 <HAL_DMA_Init+0x1f4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d076      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8005c1c <HAL_DMA_Init+0x1f8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d071      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8005c20 <HAL_DMA_Init+0x1fc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d06c      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a5c      	ldr	r2, [pc, #368]	@ (8005c24 <HAL_DMA_Init+0x200>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d067      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a5b      	ldr	r2, [pc, #364]	@ (8005c28 <HAL_DMA_Init+0x204>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d062      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a59      	ldr	r2, [pc, #356]	@ (8005c2c <HAL_DMA_Init+0x208>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d05d      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a58      	ldr	r2, [pc, #352]	@ (8005c30 <HAL_DMA_Init+0x20c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d058      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a56      	ldr	r2, [pc, #344]	@ (8005c34 <HAL_DMA_Init+0x210>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d053      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a55      	ldr	r2, [pc, #340]	@ (8005c38 <HAL_DMA_Init+0x214>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d04e      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a53      	ldr	r2, [pc, #332]	@ (8005c3c <HAL_DMA_Init+0x218>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d049      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a52      	ldr	r2, [pc, #328]	@ (8005c40 <HAL_DMA_Init+0x21c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d044      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a50      	ldr	r2, [pc, #320]	@ (8005c44 <HAL_DMA_Init+0x220>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d03f      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a4f      	ldr	r2, [pc, #316]	@ (8005c48 <HAL_DMA_Init+0x224>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d03a      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a4d      	ldr	r2, [pc, #308]	@ (8005c4c <HAL_DMA_Init+0x228>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d035      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a4c      	ldr	r2, [pc, #304]	@ (8005c50 <HAL_DMA_Init+0x22c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d030      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a4a      	ldr	r2, [pc, #296]	@ (8005c54 <HAL_DMA_Init+0x230>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d02b      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a49      	ldr	r2, [pc, #292]	@ (8005c58 <HAL_DMA_Init+0x234>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d026      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a47      	ldr	r2, [pc, #284]	@ (8005c5c <HAL_DMA_Init+0x238>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d021      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a46      	ldr	r2, [pc, #280]	@ (8005c60 <HAL_DMA_Init+0x23c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d01c      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a44      	ldr	r2, [pc, #272]	@ (8005c64 <HAL_DMA_Init+0x240>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d017      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a43      	ldr	r2, [pc, #268]	@ (8005c68 <HAL_DMA_Init+0x244>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d012      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a41      	ldr	r2, [pc, #260]	@ (8005c6c <HAL_DMA_Init+0x248>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00d      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a40      	ldr	r2, [pc, #256]	@ (8005c70 <HAL_DMA_Init+0x24c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d008      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a3e      	ldr	r2, [pc, #248]	@ (8005c74 <HAL_DMA_Init+0x250>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <HAL_DMA_Init+0x162>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a3d      	ldr	r2, [pc, #244]	@ (8005c78 <HAL_DMA_Init+0x254>)
 8005b84:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0206 	orr.w	r2, r2, #6
 8005ba4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005ba6:	e00f      	b.n	8005bc8 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005ba8:	f7fd fbb8 	bl	800331c <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b05      	cmp	r3, #5
 8005bb4:	d908      	bls.n	8005bc8 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2210      	movs	r2, #16
 8005bba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2203      	movs	r2, #3
 8005bc0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e015      	b.n	8005bf4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e8      	bne.n	8005ba8 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fb26 	bl	8006228 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40020050 	.word	0x40020050
 8005c00:	50020050 	.word	0x50020050
 8005c04:	400200d0 	.word	0x400200d0
 8005c08:	500200d0 	.word	0x500200d0
 8005c0c:	40020150 	.word	0x40020150
 8005c10:	50020150 	.word	0x50020150
 8005c14:	400201d0 	.word	0x400201d0
 8005c18:	500201d0 	.word	0x500201d0
 8005c1c:	40020250 	.word	0x40020250
 8005c20:	50020250 	.word	0x50020250
 8005c24:	400202d0 	.word	0x400202d0
 8005c28:	500202d0 	.word	0x500202d0
 8005c2c:	40020350 	.word	0x40020350
 8005c30:	50020350 	.word	0x50020350
 8005c34:	400203d0 	.word	0x400203d0
 8005c38:	500203d0 	.word	0x500203d0
 8005c3c:	40020450 	.word	0x40020450
 8005c40:	50020450 	.word	0x50020450
 8005c44:	400204d0 	.word	0x400204d0
 8005c48:	500204d0 	.word	0x500204d0
 8005c4c:	40020550 	.word	0x40020550
 8005c50:	50020550 	.word	0x50020550
 8005c54:	400205d0 	.word	0x400205d0
 8005c58:	500205d0 	.word	0x500205d0
 8005c5c:	40020650 	.word	0x40020650
 8005c60:	50020650 	.word	0x50020650
 8005c64:	400206d0 	.word	0x400206d0
 8005c68:	500206d0 	.word	0x500206d0
 8005c6c:	40020750 	.word	0x40020750
 8005c70:	50020750 	.word	0x50020750
 8005c74:	400207d0 	.word	0x400207d0
 8005c78:	500207d0 	.word	0x500207d0

08005c7c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e04f      	b.n	8005d34 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_DMA_Start_IT+0x26>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e048      	b.n	8005d34 <HAL_DMA_Start_IT+0xb8>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d136      	bne.n	8005d24 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fa86 	bl	80061dc <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005cde:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695a      	ldr	r2, [r3, #20]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cf6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d007      	beq.n	8005d10 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d0e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e007      	b.n	8005d34 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2240      	movs	r2, #64	@ 0x40
 8005d28:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005d44:	f7fd faea 	bl	800331c <HAL_GetTick>
 8005d48:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e06b      	b.n	8005e2c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d008      	beq.n	8005d72 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e05c      	b.n	8005e2c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0204 	orr.w	r2, r2, #4
 8005d80:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2205      	movs	r2, #5
 8005d86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005d8a:	e020      	b.n	8005dce <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005d8c:	f7fd fac6 	bl	800331c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d919      	bls.n	8005dce <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9e:	f043 0210 	orr.w	r2, r3, #16
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2203      	movs	r2, #3
 8005daa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e02e      	b.n	8005e2c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0d7      	beq.n	8005d8c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0202 	orr.w	r2, r2, #2
 8005dea:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2204      	movs	r2, #4
 8005df0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005dfc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e16:	2201      	movs	r2, #1
 8005e18:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e019      	b.n	8005e7a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d004      	beq.n	8005e5c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e00e      	b.n	8005e7a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005e72:	f043 0304 	orr.w	r3, r3, #4
 8005e76:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b086      	sub	sp, #24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005e96:	f023 030f 	bic.w	r3, r3, #15
 8005e9a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea4:	3b50      	subs	r3, #80	@ 0x50
 8005ea6:	09db      	lsrs	r3, r3, #7
 8005ea8:	f003 031f 	and.w	r3, r3, #31
 8005eac:	2201      	movs	r2, #1
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 813b 	beq.w	800613c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d011      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005eea:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d011      	beq.n	8005f2a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f1c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f22:	f043 0202 	orr.w	r2, r3, #2
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d011      	beq.n	8005f5c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005f4e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f54:	f043 0204 	orr.w	r2, r3, #4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d011      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005f80:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f86:	f043 0208 	orr.w	r2, r3, #8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d013      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00c      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fb2:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d04c      	beq.n	800606c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d045      	beq.n	800606c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005fe8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d12e      	bne.n	8006054 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006004:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0202 	orr.w	r2, r2, #2
 8006014:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800602e:	2201      	movs	r2, #1
 8006030:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d07a      	beq.n	8006140 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
        }

        return;
 8006052:	e075      	b.n	8006140 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2205      	movs	r2, #5
 8006058:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d039      	beq.n	80060ee <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d032      	beq.n	80060ee <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800608c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006090:	2b00      	cmp	r3, #0
 8006092:	d012      	beq.n	80060ba <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d116      	bne.n	80060cc <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d111      	bne.n	80060cc <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b4:	2201      	movs	r2, #1
 80060b6:	731a      	strb	r2, [r3, #12]
 80060b8:	e008      	b.n	80060cc <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d103      	bne.n	80060cc <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80060d4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d025      	beq.n	8006142 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0202 	orr.w	r2, r2, #2
 8006104:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800611e:	2201      	movs	r2, #1
 8006120:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	4798      	blx	r3
 800613a:	e002      	b.n	8006142 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8006140:	bf00      	nop
    }
  }
}
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006156:	b2db      	uxtb	r3, r3
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e02b      	b.n	80061d0 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006180:	f023 030f 	bic.w	r3, r3, #15
 8006184:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618e:	3b50      	subs	r3, #80	@ 0x50
 8006190:	09db      	lsrs	r3, r3, #7
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	2201      	movs	r2, #1
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d012      	beq.n	80061ce <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f003 0311 	and.w	r3, r3, #17
 80061ae:	2b11      	cmp	r3, #17
 80061b0:	d106      	bne.n	80061c0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	e006      	b.n	80061ce <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	43db      	mvns	r3, r3
 80061c8:	401a      	ands	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	041b      	lsls	r3, r3, #16
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	b291      	uxth	r1, r2
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	430b      	orrs	r3, r1
 80061fe:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8006208:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	430a      	orrs	r2, r1
 8006248:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a53      	ldr	r2, [pc, #332]	@ (80063b4 <DMA_Init+0x18c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	f000 80a0 	beq.w	80063ae <DMA_Init+0x186>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a51      	ldr	r2, [pc, #324]	@ (80063b8 <DMA_Init+0x190>)
 8006274:	4293      	cmp	r3, r2
 8006276:	f000 809a 	beq.w	80063ae <DMA_Init+0x186>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a4f      	ldr	r2, [pc, #316]	@ (80063bc <DMA_Init+0x194>)
 8006280:	4293      	cmp	r3, r2
 8006282:	f000 8094 	beq.w	80063ae <DMA_Init+0x186>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a4d      	ldr	r2, [pc, #308]	@ (80063c0 <DMA_Init+0x198>)
 800628c:	4293      	cmp	r3, r2
 800628e:	f000 808e 	beq.w	80063ae <DMA_Init+0x186>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a4b      	ldr	r2, [pc, #300]	@ (80063c4 <DMA_Init+0x19c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	f000 8088 	beq.w	80063ae <DMA_Init+0x186>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a49      	ldr	r2, [pc, #292]	@ (80063c8 <DMA_Init+0x1a0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	f000 8082 	beq.w	80063ae <DMA_Init+0x186>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a47      	ldr	r2, [pc, #284]	@ (80063cc <DMA_Init+0x1a4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d07c      	beq.n	80063ae <DMA_Init+0x186>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a45      	ldr	r2, [pc, #276]	@ (80063d0 <DMA_Init+0x1a8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d077      	beq.n	80063ae <DMA_Init+0x186>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a44      	ldr	r2, [pc, #272]	@ (80063d4 <DMA_Init+0x1ac>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d072      	beq.n	80063ae <DMA_Init+0x186>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a42      	ldr	r2, [pc, #264]	@ (80063d8 <DMA_Init+0x1b0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d06d      	beq.n	80063ae <DMA_Init+0x186>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a41      	ldr	r2, [pc, #260]	@ (80063dc <DMA_Init+0x1b4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d068      	beq.n	80063ae <DMA_Init+0x186>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a3f      	ldr	r2, [pc, #252]	@ (80063e0 <DMA_Init+0x1b8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d063      	beq.n	80063ae <DMA_Init+0x186>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a3e      	ldr	r2, [pc, #248]	@ (80063e4 <DMA_Init+0x1bc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d05e      	beq.n	80063ae <DMA_Init+0x186>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a3c      	ldr	r2, [pc, #240]	@ (80063e8 <DMA_Init+0x1c0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d059      	beq.n	80063ae <DMA_Init+0x186>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a3b      	ldr	r2, [pc, #236]	@ (80063ec <DMA_Init+0x1c4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d054      	beq.n	80063ae <DMA_Init+0x186>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a39      	ldr	r2, [pc, #228]	@ (80063f0 <DMA_Init+0x1c8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d04f      	beq.n	80063ae <DMA_Init+0x186>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a38      	ldr	r2, [pc, #224]	@ (80063f4 <DMA_Init+0x1cc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d04a      	beq.n	80063ae <DMA_Init+0x186>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a36      	ldr	r2, [pc, #216]	@ (80063f8 <DMA_Init+0x1d0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d045      	beq.n	80063ae <DMA_Init+0x186>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a35      	ldr	r2, [pc, #212]	@ (80063fc <DMA_Init+0x1d4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d040      	beq.n	80063ae <DMA_Init+0x186>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a33      	ldr	r2, [pc, #204]	@ (8006400 <DMA_Init+0x1d8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d03b      	beq.n	80063ae <DMA_Init+0x186>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a32      	ldr	r2, [pc, #200]	@ (8006404 <DMA_Init+0x1dc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d036      	beq.n	80063ae <DMA_Init+0x186>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a30      	ldr	r2, [pc, #192]	@ (8006408 <DMA_Init+0x1e0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d031      	beq.n	80063ae <DMA_Init+0x186>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a2f      	ldr	r2, [pc, #188]	@ (800640c <DMA_Init+0x1e4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d02c      	beq.n	80063ae <DMA_Init+0x186>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a2d      	ldr	r2, [pc, #180]	@ (8006410 <DMA_Init+0x1e8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d027      	beq.n	80063ae <DMA_Init+0x186>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2c      	ldr	r2, [pc, #176]	@ (8006414 <DMA_Init+0x1ec>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d022      	beq.n	80063ae <DMA_Init+0x186>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2a      	ldr	r2, [pc, #168]	@ (8006418 <DMA_Init+0x1f0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01d      	beq.n	80063ae <DMA_Init+0x186>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a29      	ldr	r2, [pc, #164]	@ (800641c <DMA_Init+0x1f4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d018      	beq.n	80063ae <DMA_Init+0x186>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a27      	ldr	r2, [pc, #156]	@ (8006420 <DMA_Init+0x1f8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d013      	beq.n	80063ae <DMA_Init+0x186>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a26      	ldr	r2, [pc, #152]	@ (8006424 <DMA_Init+0x1fc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00e      	beq.n	80063ae <DMA_Init+0x186>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a24      	ldr	r2, [pc, #144]	@ (8006428 <DMA_Init+0x200>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d009      	beq.n	80063ae <DMA_Init+0x186>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a23      	ldr	r2, [pc, #140]	@ (800642c <DMA_Init+0x204>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d004      	beq.n	80063ae <DMA_Init+0x186>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a21      	ldr	r2, [pc, #132]	@ (8006430 <DMA_Init+0x208>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d142      	bne.n	8006434 <DMA_Init+0x20c>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e041      	b.n	8006436 <DMA_Init+0x20e>
 80063b2:	bf00      	nop
 80063b4:	40020050 	.word	0x40020050
 80063b8:	50020050 	.word	0x50020050
 80063bc:	400200d0 	.word	0x400200d0
 80063c0:	500200d0 	.word	0x500200d0
 80063c4:	40020150 	.word	0x40020150
 80063c8:	50020150 	.word	0x50020150
 80063cc:	400201d0 	.word	0x400201d0
 80063d0:	500201d0 	.word	0x500201d0
 80063d4:	40020250 	.word	0x40020250
 80063d8:	50020250 	.word	0x50020250
 80063dc:	400202d0 	.word	0x400202d0
 80063e0:	500202d0 	.word	0x500202d0
 80063e4:	40020350 	.word	0x40020350
 80063e8:	50020350 	.word	0x50020350
 80063ec:	400203d0 	.word	0x400203d0
 80063f0:	500203d0 	.word	0x500203d0
 80063f4:	40020450 	.word	0x40020450
 80063f8:	50020450 	.word	0x50020450
 80063fc:	400204d0 	.word	0x400204d0
 8006400:	500204d0 	.word	0x500204d0
 8006404:	40020550 	.word	0x40020550
 8006408:	50020550 	.word	0x50020550
 800640c:	400205d0 	.word	0x400205d0
 8006410:	500205d0 	.word	0x500205d0
 8006414:	40020650 	.word	0x40020650
 8006418:	50020650 	.word	0x50020650
 800641c:	400206d0 	.word	0x400206d0
 8006420:	500206d0 	.word	0x500206d0
 8006424:	40020750 	.word	0x40020750
 8006428:	50020750 	.word	0x50020750
 800642c:	400207d0 	.word	0x400207d0
 8006430:	500207d0 	.word	0x500207d0
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d012      	beq.n	8006460 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006442:	3b01      	subs	r3, #1
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800644a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006450:	3b01      	subs	r3, #1
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006458:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006466:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	430a      	orrs	r2, r1
 8006472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006492:	f040 80b0 	bne.w	80065f6 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a82      	ldr	r2, [pc, #520]	@ (80066a4 <DMA_Init+0x47c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	f000 80a0 	beq.w	80065e2 <DMA_Init+0x3ba>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a80      	ldr	r2, [pc, #512]	@ (80066a8 <DMA_Init+0x480>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	f000 809a 	beq.w	80065e2 <DMA_Init+0x3ba>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a7e      	ldr	r2, [pc, #504]	@ (80066ac <DMA_Init+0x484>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	f000 8094 	beq.w	80065e2 <DMA_Init+0x3ba>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a7c      	ldr	r2, [pc, #496]	@ (80066b0 <DMA_Init+0x488>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	f000 808e 	beq.w	80065e2 <DMA_Init+0x3ba>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a7a      	ldr	r2, [pc, #488]	@ (80066b4 <DMA_Init+0x48c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	f000 8088 	beq.w	80065e2 <DMA_Init+0x3ba>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a78      	ldr	r2, [pc, #480]	@ (80066b8 <DMA_Init+0x490>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	f000 8082 	beq.w	80065e2 <DMA_Init+0x3ba>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a76      	ldr	r2, [pc, #472]	@ (80066bc <DMA_Init+0x494>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d07c      	beq.n	80065e2 <DMA_Init+0x3ba>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a74      	ldr	r2, [pc, #464]	@ (80066c0 <DMA_Init+0x498>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d077      	beq.n	80065e2 <DMA_Init+0x3ba>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a73      	ldr	r2, [pc, #460]	@ (80066c4 <DMA_Init+0x49c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d072      	beq.n	80065e2 <DMA_Init+0x3ba>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a71      	ldr	r2, [pc, #452]	@ (80066c8 <DMA_Init+0x4a0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d06d      	beq.n	80065e2 <DMA_Init+0x3ba>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a70      	ldr	r2, [pc, #448]	@ (80066cc <DMA_Init+0x4a4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d068      	beq.n	80065e2 <DMA_Init+0x3ba>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a6e      	ldr	r2, [pc, #440]	@ (80066d0 <DMA_Init+0x4a8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d063      	beq.n	80065e2 <DMA_Init+0x3ba>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a6d      	ldr	r2, [pc, #436]	@ (80066d4 <DMA_Init+0x4ac>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d05e      	beq.n	80065e2 <DMA_Init+0x3ba>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a6b      	ldr	r2, [pc, #428]	@ (80066d8 <DMA_Init+0x4b0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d059      	beq.n	80065e2 <DMA_Init+0x3ba>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a6a      	ldr	r2, [pc, #424]	@ (80066dc <DMA_Init+0x4b4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d054      	beq.n	80065e2 <DMA_Init+0x3ba>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a68      	ldr	r2, [pc, #416]	@ (80066e0 <DMA_Init+0x4b8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d04f      	beq.n	80065e2 <DMA_Init+0x3ba>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a67      	ldr	r2, [pc, #412]	@ (80066e4 <DMA_Init+0x4bc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d04a      	beq.n	80065e2 <DMA_Init+0x3ba>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a65      	ldr	r2, [pc, #404]	@ (80066e8 <DMA_Init+0x4c0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d045      	beq.n	80065e2 <DMA_Init+0x3ba>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a64      	ldr	r2, [pc, #400]	@ (80066ec <DMA_Init+0x4c4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d040      	beq.n	80065e2 <DMA_Init+0x3ba>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a62      	ldr	r2, [pc, #392]	@ (80066f0 <DMA_Init+0x4c8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d03b      	beq.n	80065e2 <DMA_Init+0x3ba>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a61      	ldr	r2, [pc, #388]	@ (80066f4 <DMA_Init+0x4cc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d036      	beq.n	80065e2 <DMA_Init+0x3ba>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5f      	ldr	r2, [pc, #380]	@ (80066f8 <DMA_Init+0x4d0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d031      	beq.n	80065e2 <DMA_Init+0x3ba>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a5e      	ldr	r2, [pc, #376]	@ (80066fc <DMA_Init+0x4d4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d02c      	beq.n	80065e2 <DMA_Init+0x3ba>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a5c      	ldr	r2, [pc, #368]	@ (8006700 <DMA_Init+0x4d8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d027      	beq.n	80065e2 <DMA_Init+0x3ba>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a5b      	ldr	r2, [pc, #364]	@ (8006704 <DMA_Init+0x4dc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d022      	beq.n	80065e2 <DMA_Init+0x3ba>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a59      	ldr	r2, [pc, #356]	@ (8006708 <DMA_Init+0x4e0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d01d      	beq.n	80065e2 <DMA_Init+0x3ba>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a58      	ldr	r2, [pc, #352]	@ (800670c <DMA_Init+0x4e4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d018      	beq.n	80065e2 <DMA_Init+0x3ba>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a56      	ldr	r2, [pc, #344]	@ (8006710 <DMA_Init+0x4e8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <DMA_Init+0x3ba>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a55      	ldr	r2, [pc, #340]	@ (8006714 <DMA_Init+0x4ec>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00e      	beq.n	80065e2 <DMA_Init+0x3ba>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a53      	ldr	r2, [pc, #332]	@ (8006718 <DMA_Init+0x4f0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d009      	beq.n	80065e2 <DMA_Init+0x3ba>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a52      	ldr	r2, [pc, #328]	@ (800671c <DMA_Init+0x4f4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <DMA_Init+0x3ba>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a50      	ldr	r2, [pc, #320]	@ (8006720 <DMA_Init+0x4f8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d101      	bne.n	80065e6 <DMA_Init+0x3be>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <DMA_Init+0x3c0>
 80065e6:	2300      	movs	r3, #0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00d      	beq.n	8006608 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e008      	b.n	8006608 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065fe:	d103      	bne.n	8006608 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006606:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800660e:	4b45      	ldr	r3, [pc, #276]	@ (8006724 <DMA_Init+0x4fc>)
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	68f9      	ldr	r1, [r7, #12]
 8006618:	430b      	orrs	r3, r1
 800661a:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2200      	movs	r2, #0
 8006622:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a36      	ldr	r2, [pc, #216]	@ (8006704 <DMA_Init+0x4dc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d022      	beq.n	8006674 <DMA_Init+0x44c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a35      	ldr	r2, [pc, #212]	@ (8006708 <DMA_Init+0x4e0>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d01d      	beq.n	8006674 <DMA_Init+0x44c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a33      	ldr	r2, [pc, #204]	@ (800670c <DMA_Init+0x4e4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d018      	beq.n	8006674 <DMA_Init+0x44c>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a32      	ldr	r2, [pc, #200]	@ (8006710 <DMA_Init+0x4e8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d013      	beq.n	8006674 <DMA_Init+0x44c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a30      	ldr	r2, [pc, #192]	@ (8006714 <DMA_Init+0x4ec>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00e      	beq.n	8006674 <DMA_Init+0x44c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2f      	ldr	r2, [pc, #188]	@ (8006718 <DMA_Init+0x4f0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d009      	beq.n	8006674 <DMA_Init+0x44c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2d      	ldr	r2, [pc, #180]	@ (800671c <DMA_Init+0x4f4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d004      	beq.n	8006674 <DMA_Init+0x44c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2c      	ldr	r2, [pc, #176]	@ (8006720 <DMA_Init+0x4f8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d101      	bne.n	8006678 <DMA_Init+0x450>
 8006674:	2301      	movs	r3, #1
 8006676:	e000      	b.n	800667a <DMA_Init+0x452>
 8006678:	2300      	movs	r3, #0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2200      	movs	r2, #0
 800668c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40020050 	.word	0x40020050
 80066a8:	50020050 	.word	0x50020050
 80066ac:	400200d0 	.word	0x400200d0
 80066b0:	500200d0 	.word	0x500200d0
 80066b4:	40020150 	.word	0x40020150
 80066b8:	50020150 	.word	0x50020150
 80066bc:	400201d0 	.word	0x400201d0
 80066c0:	500201d0 	.word	0x500201d0
 80066c4:	40020250 	.word	0x40020250
 80066c8:	50020250 	.word	0x50020250
 80066cc:	400202d0 	.word	0x400202d0
 80066d0:	500202d0 	.word	0x500202d0
 80066d4:	40020350 	.word	0x40020350
 80066d8:	50020350 	.word	0x50020350
 80066dc:	400203d0 	.word	0x400203d0
 80066e0:	500203d0 	.word	0x500203d0
 80066e4:	40020450 	.word	0x40020450
 80066e8:	50020450 	.word	0x50020450
 80066ec:	400204d0 	.word	0x400204d0
 80066f0:	500204d0 	.word	0x500204d0
 80066f4:	40020550 	.word	0x40020550
 80066f8:	50020550 	.word	0x50020550
 80066fc:	400205d0 	.word	0x400205d0
 8006700:	500205d0 	.word	0x500205d0
 8006704:	40020650 	.word	0x40020650
 8006708:	50020650 	.word	0x50020650
 800670c:	400206d0 	.word	0x400206d0
 8006710:	500206d0 	.word	0x500206d0
 8006714:	40020750 	.word	0x40020750
 8006718:	50020750 	.word	0x50020750
 800671c:	400207d0 	.word	0x400207d0
 8006720:	500207d0 	.word	0x500207d0
 8006724:	3c803180 	.word	0x3c803180

08006728 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e053      	b.n	80067e2 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fb fdba 	bl	80022c8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6851      	ldr	r1, [r2, #4]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	69d2      	ldr	r2, [r2, #28]
 8006772:	4311      	orrs	r1, r2
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	430b      	orrs	r3, r1
 800677a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006782:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6891      	ldr	r1, [r2, #8]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6992      	ldr	r2, [r2, #24]
 8006792:	4311      	orrs	r1, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	430b      	orrs	r3, r1
 800679a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a2:	0c1b      	lsrs	r3, r3, #16
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	68d1      	ldr	r1, [r2, #12]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	430b      	orrs	r3, r1
 80067b0:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	051a      	lsls	r2, r3, #20
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	055b      	lsls	r3, r3, #21
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_DMA2D_ConfigLayer+0x24>
 800680c:	2302      	movs	r3, #2
 800680e:	e092      	b.n	8006936 <HAL_DMA2D_ConfigLayer+0x14a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	4613      	mov	r3, r2
 8006824:	00db      	lsls	r3, r3, #3
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	3328      	adds	r3, #40	@ 0x28
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4413      	add	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	041b      	lsls	r3, r3, #16
 800683c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006844:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006850:	4b3c      	ldr	r3, [pc, #240]	@ (8006944 <HAL_DMA2D_ConfigLayer+0x158>)
 8006852:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b0a      	cmp	r3, #10
 800685a:	d003      	beq.n	8006864 <HAL_DMA2D_ConfigLayer+0x78>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b09      	cmp	r3, #9
 8006862:	d107      	bne.n	8006874 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	e005      	b.n	8006880 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	061b      	lsls	r3, r3, #24
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d120      	bne.n	80068c8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	43db      	mvns	r3, r3
 8006890:	ea02 0103 	and.w	r1, r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	430a      	orrs	r2, r1
 800689c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b0a      	cmp	r3, #10
 80068ae:	d003      	beq.n	80068b8 <HAL_DMA2D_ConfigLayer+0xcc>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b09      	cmp	r3, #9
 80068b6:	d135      	bne.n	8006924 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80068c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80068c6:	e02d      	b.n	8006924 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b0b      	cmp	r3, #11
 80068ce:	d109      	bne.n	80068e4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	049b      	lsls	r3, r3, #18
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80068e2:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69da      	ldr	r2, [r3, #28]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	43db      	mvns	r3, r3
 80068ee:	ea02 0103 	and.w	r1, r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b0a      	cmp	r3, #10
 800690c:	d003      	beq.n	8006916 <HAL_DMA2D_ConfigLayer+0x12a>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b09      	cmp	r3, #9
 8006914:	d106      	bne.n	8006924 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006922:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	ff33000f 	.word	0xff33000f

08006948 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006950:	f7fc fce4 	bl	800331c <HAL_GetTick>
 8006954:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e0db      	b.n	8006b18 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a6e      	ldr	r2, [pc, #440]	@ (8006b20 <HAL_DMAEx_List_Init+0x1d8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	f000 809f 	beq.w	8006aaa <HAL_DMAEx_List_Init+0x162>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a6c      	ldr	r2, [pc, #432]	@ (8006b24 <HAL_DMAEx_List_Init+0x1dc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	f000 8099 	beq.w	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a6a      	ldr	r2, [pc, #424]	@ (8006b28 <HAL_DMAEx_List_Init+0x1e0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	f000 8093 	beq.w	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a68      	ldr	r2, [pc, #416]	@ (8006b2c <HAL_DMAEx_List_Init+0x1e4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	f000 808d 	beq.w	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a66      	ldr	r2, [pc, #408]	@ (8006b30 <HAL_DMAEx_List_Init+0x1e8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	f000 8087 	beq.w	8006aaa <HAL_DMAEx_List_Init+0x162>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a64      	ldr	r2, [pc, #400]	@ (8006b34 <HAL_DMAEx_List_Init+0x1ec>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	f000 8081 	beq.w	8006aaa <HAL_DMAEx_List_Init+0x162>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a62      	ldr	r2, [pc, #392]	@ (8006b38 <HAL_DMAEx_List_Init+0x1f0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d07b      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a61      	ldr	r2, [pc, #388]	@ (8006b3c <HAL_DMAEx_List_Init+0x1f4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d076      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a5f      	ldr	r2, [pc, #380]	@ (8006b40 <HAL_DMAEx_List_Init+0x1f8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d071      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a5e      	ldr	r2, [pc, #376]	@ (8006b44 <HAL_DMAEx_List_Init+0x1fc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d06c      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a5c      	ldr	r2, [pc, #368]	@ (8006b48 <HAL_DMAEx_List_Init+0x200>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d067      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a5b      	ldr	r2, [pc, #364]	@ (8006b4c <HAL_DMAEx_List_Init+0x204>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d062      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a59      	ldr	r2, [pc, #356]	@ (8006b50 <HAL_DMAEx_List_Init+0x208>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d05d      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a58      	ldr	r2, [pc, #352]	@ (8006b54 <HAL_DMAEx_List_Init+0x20c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d058      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a56      	ldr	r2, [pc, #344]	@ (8006b58 <HAL_DMAEx_List_Init+0x210>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d053      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a55      	ldr	r2, [pc, #340]	@ (8006b5c <HAL_DMAEx_List_Init+0x214>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d04e      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a53      	ldr	r2, [pc, #332]	@ (8006b60 <HAL_DMAEx_List_Init+0x218>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d049      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a52      	ldr	r2, [pc, #328]	@ (8006b64 <HAL_DMAEx_List_Init+0x21c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d044      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a50      	ldr	r2, [pc, #320]	@ (8006b68 <HAL_DMAEx_List_Init+0x220>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d03f      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a4f      	ldr	r2, [pc, #316]	@ (8006b6c <HAL_DMAEx_List_Init+0x224>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d03a      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a4d      	ldr	r2, [pc, #308]	@ (8006b70 <HAL_DMAEx_List_Init+0x228>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d035      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a4c      	ldr	r2, [pc, #304]	@ (8006b74 <HAL_DMAEx_List_Init+0x22c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d030      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8006b78 <HAL_DMAEx_List_Init+0x230>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d02b      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a49      	ldr	r2, [pc, #292]	@ (8006b7c <HAL_DMAEx_List_Init+0x234>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d026      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a47      	ldr	r2, [pc, #284]	@ (8006b80 <HAL_DMAEx_List_Init+0x238>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d021      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a46      	ldr	r2, [pc, #280]	@ (8006b84 <HAL_DMAEx_List_Init+0x23c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d01c      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a44      	ldr	r2, [pc, #272]	@ (8006b88 <HAL_DMAEx_List_Init+0x240>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d017      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a43      	ldr	r2, [pc, #268]	@ (8006b8c <HAL_DMAEx_List_Init+0x244>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d012      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a41      	ldr	r2, [pc, #260]	@ (8006b90 <HAL_DMAEx_List_Init+0x248>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00d      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a40      	ldr	r2, [pc, #256]	@ (8006b94 <HAL_DMAEx_List_Init+0x24c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d008      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a3e      	ldr	r2, [pc, #248]	@ (8006b98 <HAL_DMAEx_List_Init+0x250>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d003      	beq.n	8006aaa <HAL_DMAEx_List_Init+0x162>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8006b9c <HAL_DMAEx_List_Init+0x254>)
 8006aa8:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	695a      	ldr	r2, [r3, #20]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0206 	orr.w	r2, r2, #6
 8006ac8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006aca:	e00f      	b.n	8006aec <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006acc:	f7fc fc26 	bl	800331c <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d908      	bls.n	8006aec <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2210      	movs	r2, #16
 8006ade:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2203      	movs	r2, #3
 8006ae4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e015      	b.n	8006b18 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e8      	bne.n	8006acc <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fb16 	bl	800712c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40020050 	.word	0x40020050
 8006b24:	50020050 	.word	0x50020050
 8006b28:	400200d0 	.word	0x400200d0
 8006b2c:	500200d0 	.word	0x500200d0
 8006b30:	40020150 	.word	0x40020150
 8006b34:	50020150 	.word	0x50020150
 8006b38:	400201d0 	.word	0x400201d0
 8006b3c:	500201d0 	.word	0x500201d0
 8006b40:	40020250 	.word	0x40020250
 8006b44:	50020250 	.word	0x50020250
 8006b48:	400202d0 	.word	0x400202d0
 8006b4c:	500202d0 	.word	0x500202d0
 8006b50:	40020350 	.word	0x40020350
 8006b54:	50020350 	.word	0x50020350
 8006b58:	400203d0 	.word	0x400203d0
 8006b5c:	500203d0 	.word	0x500203d0
 8006b60:	40020450 	.word	0x40020450
 8006b64:	50020450 	.word	0x50020450
 8006b68:	400204d0 	.word	0x400204d0
 8006b6c:	500204d0 	.word	0x500204d0
 8006b70:	40020550 	.word	0x40020550
 8006b74:	50020550 	.word	0x50020550
 8006b78:	400205d0 	.word	0x400205d0
 8006b7c:	500205d0 	.word	0x500205d0
 8006b80:	40020650 	.word	0x40020650
 8006b84:	50020650 	.word	0x50020650
 8006b88:	400206d0 	.word	0x400206d0
 8006b8c:	500206d0 	.word	0x500206d0
 8006b90:	40020750 	.word	0x40020750
 8006b94:	50020750 	.word	0x50020750
 8006b98:	400207d0 	.word	0x400207d0
 8006b9c:	500207d0 	.word	0x500207d0

08006ba0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_DMAEx_List_Start_IT+0x16>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e082      	b.n	8006cc0 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006bc0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bcc:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d005      	beq.n	8006be0 <HAL_DMAEx_List_Start_IT+0x40>
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d16a      	bne.n	8006cb0 <HAL_DMAEx_List_Start_IT+0x110>
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d067      	beq.n	8006cb0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d157      	bne.n	8006c9c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_DMAEx_List_Start_IT+0x5a>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e062      	b.n	8006cc0 <HAL_DMAEx_List_Start_IT+0x120>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c0e:	2202      	movs	r2, #2
 8006c10:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006c2e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695a      	ldr	r2, [r3, #20]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c46:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c5e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f107 010c 	add.w	r1, r7, #12
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fe7d 	bl	800796c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	0c0b      	lsrs	r3, r1, #16
 8006c80:	041b      	lsls	r3, r3, #16
 8006c82:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006c90:	4013      	ands	r3, r2
 8006c92:	68f9      	ldr	r1, [r7, #12]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6812      	ldr	r2, [r2, #0]
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695a      	ldr	r2, [r3, #20]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	e007      	b.n	8006cc0 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2240      	movs	r2, #64	@ 0x40
 8006cb4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_DMAEx_List_BuildNode+0x16>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e004      	b.n	8006cec <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fb79 	bl	80073dc <DMA_List_BuildNode>

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e004      	b.n	8006d18 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fcb5 	bl	8007680 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08c      	sub	sp, #48	@ 0x30
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <HAL_DMAEx_List_InsertNode+0x18>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0b6      	b.n	8006eaa <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d104      	bne.n	8006d4e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2204      	movs	r2, #4
 8006d48:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e0ad      	b.n	8006eaa <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fd9c 	bl	8007894 <DMA_List_CheckNodesBaseAddresses>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2205      	movs	r2, #5
 8006d66:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e09e      	b.n	8006eaa <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fdbd 	bl	80078f4 <DMA_List_CheckNodesTypes>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2204      	movs	r2, #4
 8006d84:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e08f      	b.n	8006eaa <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006d96:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fde3 	bl	800796c <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d11a      	bne.n	8006de4 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	609a      	str	r2, [r3, #8]
 8006dc0:	e06c      	b.n	8006e9c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006dce:	4013      	ands	r3, r2
 8006dd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dd4:	4319      	orrs	r1, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2202      	movs	r2, #2
 8006de0:	609a      	str	r2, [r3, #8]
 8006de2:	e05b      	b.n	8006e9c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10f      	bne.n	8006e0a <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006df4:	4013      	ands	r3, r2
 8006df6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dfa:	4319      	orrs	r1, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e043      	b.n	8006e92 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8006e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0c:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006e0e:	f107 0314 	add.w	r3, r7, #20
 8006e12:	461a      	mov	r2, r3
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fdd8 	bl	80079cc <DMA_List_FindNode>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d132      	bne.n	8006e88 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d11a      	bne.n	8006e62 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006e3e:	4013      	ands	r3, r2
 8006e40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e44:	4319      	orrs	r1, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006e52:	4013      	ands	r3, r2
 8006e54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e58:	4319      	orrs	r1, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e60:	e017      	b.n	8006e92 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006e62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006e78:	4013      	ands	r3, r2
 8006e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e7e:	4319      	orrs	r1, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e86:	e004      	b.n	8006e92 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2206      	movs	r2, #6
 8006e8c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e00b      	b.n	8006eaa <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3730      	adds	r7, #48	@ 0x30
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b08a      	sub	sp, #40	@ 0x28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e052      	b.n	8006f6a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e049      	b.n	8006f6a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d101      	bne.n	8006eee <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	e03d      	b.n	8006f6a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e038      	b.n	8006f6a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d104      	bne.n	8006f0a <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2204      	movs	r2, #4
 8006f04:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e02f      	b.n	8006f6a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f107 0220 	add.w	r2, r7, #32
 8006f1e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fd22 	bl	800796c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006f2c:	f107 030c 	add.w	r3, r7, #12
 8006f30:	461a      	mov	r2, r3
 8006f32:	2100      	movs	r1, #0
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fd49 	bl	80079cc <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006f44:	4013      	ands	r3, r2
 8006f46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006f4e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006f50:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3728      	adds	r7, #40	@ 0x28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <HAL_DMAEx_List_LinkQ+0x16>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e072      	b.n	8007074 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006f94:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d002      	beq.n	8006fa8 <HAL_DMAEx_List_LinkQ+0x34>
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	2b05      	cmp	r3, #5
 8006fa6:	d108      	bne.n	8006fba <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2240      	movs	r2, #64	@ 0x40
 8006fac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e05c      	b.n	8007074 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	7b1b      	ldrb	r3, [r3, #12]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d104      	bne.n	8006fce <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e052      	b.n	8007074 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8007080 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d022      	beq.n	800701e <HAL_DMAEx_List_LinkQ+0xaa>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a29      	ldr	r2, [pc, #164]	@ (8007084 <HAL_DMAEx_List_LinkQ+0x110>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01d      	beq.n	800701e <HAL_DMAEx_List_LinkQ+0xaa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a28      	ldr	r2, [pc, #160]	@ (8007088 <HAL_DMAEx_List_LinkQ+0x114>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d018      	beq.n	800701e <HAL_DMAEx_List_LinkQ+0xaa>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a26      	ldr	r2, [pc, #152]	@ (800708c <HAL_DMAEx_List_LinkQ+0x118>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_DMAEx_List_LinkQ+0xaa>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a25      	ldr	r2, [pc, #148]	@ (8007090 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_DMAEx_List_LinkQ+0xaa>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a23      	ldr	r2, [pc, #140]	@ (8007094 <HAL_DMAEx_List_LinkQ+0x120>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_DMAEx_List_LinkQ+0xaa>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a22      	ldr	r2, [pc, #136]	@ (8007098 <HAL_DMAEx_List_LinkQ+0x124>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_DMAEx_List_LinkQ+0xaa>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a20      	ldr	r2, [pc, #128]	@ (800709c <HAL_DMAEx_List_LinkQ+0x128>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d101      	bne.n	8007022 <HAL_DMAEx_List_LinkQ+0xae>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <HAL_DMAEx_List_LinkQ+0xb0>
 8007022:	2300      	movs	r3, #0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10b      	bne.n	8007040 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2203      	movs	r2, #3
 800703a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e019      	b.n	8007074 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007044:	2b81      	cmp	r3, #129	@ 0x81
 8007046:	d108      	bne.n	800705a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10d      	bne.n	800706c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2204      	movs	r2, #4
 8007054:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e00c      	b.n	8007074 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2204      	movs	r2, #4
 8007066:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e003      	b.n	8007074 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	40020650 	.word	0x40020650
 8007084:	50020650 	.word	0x50020650
 8007088:	400206d0 	.word	0x400206d0
 800708c:	500206d0 	.word	0x500206d0
 8007090:	40020750 	.word	0x40020750
 8007094:	50020750 	.word	0x50020750
 8007098:	400207d0 	.word	0x400207d0
 800709c:	500207d0 	.word	0x500207d0

080070a0 <HAL_DMAEx_ConfigTrigger>:
  * @param  pConfigTrigger : Pointer to a DMA_TriggerConfTypeDef structure that contains the trigger configuration.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigTrigger(DMA_HandleTypeDef *const hdma,
                                          DMA_TriggerConfTypeDef const *const pConfigTrigger)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  /* Check the DMA peripheral handle and trigger parameters */
  if ((hdma == NULL) || (pConfigTrigger == NULL))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_DMAEx_ConfigTrigger+0x16>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_DMAEx_ConfigTrigger+0x1a>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e023      	b.n	8007102 <HAL_DMAEx_ConfigTrigger+0x62>
  assert_param(IS_DMA_TRIGGER_POLARITY(pConfigTrigger->TriggerPolarity));
  assert_param(IS_DMA_TRIGGER_MODE(pConfigTrigger->TriggerMode));
  assert_param(IS_DMA_TRIGGER_SELECTION(pConfigTrigger->TriggerSelection));

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d115      	bne.n	80070f2 <HAL_DMAEx_ConfigTrigger+0x52>
  {
    MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM),
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070cc:	f023 735f 	bic.w	r3, r3, #58458112	@ 0x37c0000
 80070d0:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	6851      	ldr	r1, [r2, #4]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	4311      	orrs	r1, r2
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	6892      	ldr	r2, [r2, #8]
 80070e2:	0412      	lsls	r2, r2, #16
 80070e4:	4311      	orrs	r1, r2
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	430b      	orrs	r3, r1
 80070ec:	6453      	str	r3, [r2, #68]	@ 0x44
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e007      	b.n	8007102 <HAL_DMAEx_ConfigTrigger+0x62>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2240      	movs	r2, #64	@ 0x40
 80070f6:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	b2db      	uxtb	r3, r3
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a85      	ldr	r2, [pc, #532]	@ (800735c <DMA_List_Init+0x230>)
 8007146:	4293      	cmp	r3, r2
 8007148:	f000 80a0 	beq.w	800728c <DMA_List_Init+0x160>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a83      	ldr	r2, [pc, #524]	@ (8007360 <DMA_List_Init+0x234>)
 8007152:	4293      	cmp	r3, r2
 8007154:	f000 809a 	beq.w	800728c <DMA_List_Init+0x160>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a81      	ldr	r2, [pc, #516]	@ (8007364 <DMA_List_Init+0x238>)
 800715e:	4293      	cmp	r3, r2
 8007160:	f000 8094 	beq.w	800728c <DMA_List_Init+0x160>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a7f      	ldr	r2, [pc, #508]	@ (8007368 <DMA_List_Init+0x23c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	f000 808e 	beq.w	800728c <DMA_List_Init+0x160>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a7d      	ldr	r2, [pc, #500]	@ (800736c <DMA_List_Init+0x240>)
 8007176:	4293      	cmp	r3, r2
 8007178:	f000 8088 	beq.w	800728c <DMA_List_Init+0x160>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a7b      	ldr	r2, [pc, #492]	@ (8007370 <DMA_List_Init+0x244>)
 8007182:	4293      	cmp	r3, r2
 8007184:	f000 8082 	beq.w	800728c <DMA_List_Init+0x160>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a79      	ldr	r2, [pc, #484]	@ (8007374 <DMA_List_Init+0x248>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d07c      	beq.n	800728c <DMA_List_Init+0x160>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a78      	ldr	r2, [pc, #480]	@ (8007378 <DMA_List_Init+0x24c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d077      	beq.n	800728c <DMA_List_Init+0x160>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a76      	ldr	r2, [pc, #472]	@ (800737c <DMA_List_Init+0x250>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d072      	beq.n	800728c <DMA_List_Init+0x160>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a75      	ldr	r2, [pc, #468]	@ (8007380 <DMA_List_Init+0x254>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d06d      	beq.n	800728c <DMA_List_Init+0x160>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a73      	ldr	r2, [pc, #460]	@ (8007384 <DMA_List_Init+0x258>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d068      	beq.n	800728c <DMA_List_Init+0x160>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a72      	ldr	r2, [pc, #456]	@ (8007388 <DMA_List_Init+0x25c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d063      	beq.n	800728c <DMA_List_Init+0x160>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a70      	ldr	r2, [pc, #448]	@ (800738c <DMA_List_Init+0x260>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d05e      	beq.n	800728c <DMA_List_Init+0x160>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a6f      	ldr	r2, [pc, #444]	@ (8007390 <DMA_List_Init+0x264>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d059      	beq.n	800728c <DMA_List_Init+0x160>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a6d      	ldr	r2, [pc, #436]	@ (8007394 <DMA_List_Init+0x268>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d054      	beq.n	800728c <DMA_List_Init+0x160>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a6c      	ldr	r2, [pc, #432]	@ (8007398 <DMA_List_Init+0x26c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d04f      	beq.n	800728c <DMA_List_Init+0x160>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a6a      	ldr	r2, [pc, #424]	@ (800739c <DMA_List_Init+0x270>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d04a      	beq.n	800728c <DMA_List_Init+0x160>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a69      	ldr	r2, [pc, #420]	@ (80073a0 <DMA_List_Init+0x274>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d045      	beq.n	800728c <DMA_List_Init+0x160>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a67      	ldr	r2, [pc, #412]	@ (80073a4 <DMA_List_Init+0x278>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d040      	beq.n	800728c <DMA_List_Init+0x160>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a66      	ldr	r2, [pc, #408]	@ (80073a8 <DMA_List_Init+0x27c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d03b      	beq.n	800728c <DMA_List_Init+0x160>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a64      	ldr	r2, [pc, #400]	@ (80073ac <DMA_List_Init+0x280>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d036      	beq.n	800728c <DMA_List_Init+0x160>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a63      	ldr	r2, [pc, #396]	@ (80073b0 <DMA_List_Init+0x284>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d031      	beq.n	800728c <DMA_List_Init+0x160>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a61      	ldr	r2, [pc, #388]	@ (80073b4 <DMA_List_Init+0x288>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d02c      	beq.n	800728c <DMA_List_Init+0x160>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a60      	ldr	r2, [pc, #384]	@ (80073b8 <DMA_List_Init+0x28c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d027      	beq.n	800728c <DMA_List_Init+0x160>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a5e      	ldr	r2, [pc, #376]	@ (80073bc <DMA_List_Init+0x290>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d022      	beq.n	800728c <DMA_List_Init+0x160>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a5d      	ldr	r2, [pc, #372]	@ (80073c0 <DMA_List_Init+0x294>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d01d      	beq.n	800728c <DMA_List_Init+0x160>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a5b      	ldr	r2, [pc, #364]	@ (80073c4 <DMA_List_Init+0x298>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d018      	beq.n	800728c <DMA_List_Init+0x160>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a5a      	ldr	r2, [pc, #360]	@ (80073c8 <DMA_List_Init+0x29c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d013      	beq.n	800728c <DMA_List_Init+0x160>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a58      	ldr	r2, [pc, #352]	@ (80073cc <DMA_List_Init+0x2a0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00e      	beq.n	800728c <DMA_List_Init+0x160>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a57      	ldr	r2, [pc, #348]	@ (80073d0 <DMA_List_Init+0x2a4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d009      	beq.n	800728c <DMA_List_Init+0x160>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a55      	ldr	r2, [pc, #340]	@ (80073d4 <DMA_List_Init+0x2a8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <DMA_List_Init+0x160>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a54      	ldr	r2, [pc, #336]	@ (80073d8 <DMA_List_Init+0x2ac>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d101      	bne.n	8007290 <DMA_List_Init+0x164>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <DMA_List_Init+0x166>
 8007290:	2300      	movs	r3, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2200      	movs	r2, #0
 80072ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80072c4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a36      	ldr	r2, [pc, #216]	@ (80073bc <DMA_List_Init+0x290>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d022      	beq.n	800732e <DMA_List_Init+0x202>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a34      	ldr	r2, [pc, #208]	@ (80073c0 <DMA_List_Init+0x294>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01d      	beq.n	800732e <DMA_List_Init+0x202>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a33      	ldr	r2, [pc, #204]	@ (80073c4 <DMA_List_Init+0x298>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d018      	beq.n	800732e <DMA_List_Init+0x202>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a31      	ldr	r2, [pc, #196]	@ (80073c8 <DMA_List_Init+0x29c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d013      	beq.n	800732e <DMA_List_Init+0x202>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a30      	ldr	r2, [pc, #192]	@ (80073cc <DMA_List_Init+0x2a0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00e      	beq.n	800732e <DMA_List_Init+0x202>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a2e      	ldr	r2, [pc, #184]	@ (80073d0 <DMA_List_Init+0x2a4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d009      	beq.n	800732e <DMA_List_Init+0x202>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a2d      	ldr	r2, [pc, #180]	@ (80073d4 <DMA_List_Init+0x2a8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d004      	beq.n	800732e <DMA_List_Init+0x202>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a2b      	ldr	r2, [pc, #172]	@ (80073d8 <DMA_List_Init+0x2ac>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d101      	bne.n	8007332 <DMA_List_Init+0x206>
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <DMA_List_Init+0x208>
 8007332:	2300      	movs	r3, #0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d007      	beq.n	8007348 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2200      	movs	r2, #0
 8007346:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2200      	movs	r2, #0
 800734e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	40020050 	.word	0x40020050
 8007360:	50020050 	.word	0x50020050
 8007364:	400200d0 	.word	0x400200d0
 8007368:	500200d0 	.word	0x500200d0
 800736c:	40020150 	.word	0x40020150
 8007370:	50020150 	.word	0x50020150
 8007374:	400201d0 	.word	0x400201d0
 8007378:	500201d0 	.word	0x500201d0
 800737c:	40020250 	.word	0x40020250
 8007380:	50020250 	.word	0x50020250
 8007384:	400202d0 	.word	0x400202d0
 8007388:	500202d0 	.word	0x500202d0
 800738c:	40020350 	.word	0x40020350
 8007390:	50020350 	.word	0x50020350
 8007394:	400203d0 	.word	0x400203d0
 8007398:	500203d0 	.word	0x500203d0
 800739c:	40020450 	.word	0x40020450
 80073a0:	50020450 	.word	0x50020450
 80073a4:	400204d0 	.word	0x400204d0
 80073a8:	500204d0 	.word	0x500204d0
 80073ac:	40020550 	.word	0x40020550
 80073b0:	50020550 	.word	0x50020550
 80073b4:	400205d0 	.word	0x400205d0
 80073b8:	500205d0 	.word	0x500205d0
 80073bc:	40020650 	.word	0x40020650
 80073c0:	50020650 	.word	0x50020650
 80073c4:	400206d0 	.word	0x400206d0
 80073c8:	500206d0 	.word	0x500206d0
 80073cc:	40020750 	.word	0x40020750
 80073d0:	50020750 	.word	0x50020750
 80073d4:	400207d0 	.word	0x400207d0
 80073d8:	500207d0 	.word	0x500207d0

080073dc <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80073ee:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80073f4:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80073fa:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8007400:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d017      	beq.n	8007442 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007424:	3b01      	subs	r3, #1
 8007426:	051b      	lsls	r3, r3, #20
 8007428:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800742c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	3b01      	subs	r3, #1
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800743a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800743c:	431a      	orrs	r2, r3
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6859      	ldr	r1, [r3, #4]
 800744a:	f240 237f 	movw	r3, #639	@ 0x27f
 800744e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007450:	431a      	orrs	r2, r3
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800745e:	d10c      	bne.n	800747a <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d011      	beq.n	8007490 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	605a      	str	r2, [r3, #4]
 8007478:	e00a      	b.n	8007490 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007482:	d105      	bne.n	8007490 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00f      	beq.n	80074b8 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074aa:	041b      	lsls	r3, r3, #16
 80074ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80074b0:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80074b2:	431a      	orrs	r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074bc:	b29a      	uxth	r2, r3
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d04e      	beq.n	800756c <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074d6:	3b01      	subs	r3, #1
 80074d8:	0419      	lsls	r1, r3, #16
 80074da:	4b67      	ldr	r3, [pc, #412]	@ (8007678 <DMA_List_BuildNode+0x29c>)
 80074dc:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80074de:	431a      	orrs	r2, r3
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	da06      	bge.n	80074fa <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	609a      	str	r2, [r3, #8]
 80074f8:	e005      	b.n	8007506 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800750a:	2b00      	cmp	r3, #0
 800750c:	da06      	bge.n	800751c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	609a      	str	r2, [r3, #8]
 800751a:	e005      	b.n	8007528 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800752c:	2b00      	cmp	r3, #0
 800752e:	da06      	bge.n	800753e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	609a      	str	r2, [r3, #8]
 800753c:	e005      	b.n	800754a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800754e:	2b00      	cmp	r3, #0
 8007550:	da06      	bge.n	8007560 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	609a      	str	r2, [r3, #8]
 800755e:	e005      	b.n	800756c <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d059      	beq.n	800763c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800758c:	2b00      	cmp	r3, #0
 800758e:	da09      	bge.n	80075a4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007594:	425b      	negs	r3, r3
 8007596:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	615a      	str	r2, [r3, #20]
 80075a2:	e005      	b.n	80075b0 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	da0d      	bge.n	80075d4 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075bc:	425b      	negs	r3, r3
 80075be:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	695a      	ldr	r2, [r3, #20]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	0419      	lsls	r1, r3, #16
 80075c8:	4b2c      	ldr	r3, [pc, #176]	@ (800767c <DMA_List_BuildNode+0x2a0>)
 80075ca:	400b      	ands	r3, r1
 80075cc:	431a      	orrs	r2, r3
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	615a      	str	r2, [r3, #20]
 80075d2:	e009      	b.n	80075e8 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075dc:	0419      	lsls	r1, r3, #16
 80075de:	4b27      	ldr	r3, [pc, #156]	@ (800767c <DMA_List_BuildNode+0x2a0>)
 80075e0:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80075e2:	431a      	orrs	r2, r3
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	da08      	bge.n	8007602 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f4:	425b      	negs	r3, r3
 80075f6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	619a      	str	r2, [r3, #24]
 8007600:	e004      	b.n	800760c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007606:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007610:	2b00      	cmp	r3, #0
 8007612:	da0b      	bge.n	800762c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007618:	425b      	negs	r3, r3
 800761a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007624:	431a      	orrs	r2, r3
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	619a      	str	r2, [r3, #24]
 800762a:	e007      	b.n	800763c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007634:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007636:	431a      	orrs	r2, r3
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d006      	beq.n	800765e <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800765c:	e005      	b.n	800766a <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	07ff0000 	.word	0x07ff0000
 800767c:	1fff0000 	.word	0x1fff0000

08007680 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	b2da      	uxtb	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0208 	and.w	r2, r3, #8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0203 	and.w	r2, r3, #3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80076c8:	091b      	lsrs	r3, r3, #4
 80076ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076ce:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80076d8:	0d1b      	lsrs	r3, r3, #20
 80076da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076de:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	4b66      	ldr	r3, [pc, #408]	@ (8007890 <DMA_List_GetNodeConfig+0x210>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800771a:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007722:	60da      	str	r2, [r3, #12]
 8007724:	e013      	b.n	800774e <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007744:	60da      	str	r2, [r3, #12]
 8007746:	e002      	b.n	800774e <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8007776:	0c1b      	lsrs	r3, r3, #16
 8007778:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	b29a      	uxth	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d008      	beq.n	80077b4 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	0c1b      	lsrs	r3, r3, #16
 80077a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077ac:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80077b2:	e002      	b.n	80077ba <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	691a      	ldr	r2, [r3, #16]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d04a      	beq.n	800786c <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077e0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80077e2:	89fa      	ldrh	r2, [r7, #14]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	0c1b      	lsrs	r3, r3, #16
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077f4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80077f6:	89fa      	ldrh	r2, [r7, #14]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800780c:	425a      	negs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007822:	425a      	negs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800782e:	89fa      	ldrh	r2, [r7, #14]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	0c1b      	lsrs	r3, r3, #16
 800783a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 800783c:	89fa      	ldrh	r2, [r7, #14]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007852:	425a      	negs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	da11      	bge.n	8007884 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007864:	425a      	negs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800786a:	e00b      	b.n	8007884 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	0c002000 	.word	0x0c002000

08007894 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	041b      	lsls	r3, r3, #16
 80078ae:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	e00a      	b.n	80078d6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	e004      	b.n	80078d6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	0c1b      	lsrs	r3, r3, #16
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d001      	beq.n	80078e6 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e000      	b.n	80078e8 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d004      	beq.n	8007914 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	e00e      	b.n	8007932 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	b2db      	uxtb	r3, r3
 8007920:	617b      	str	r3, [r7, #20]
 8007922:	e006      	b.n	8007932 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d007      	beq.n	8007948 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	429a      	cmp	r2, r3
 8007942:	d001      	beq.n	8007948 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007944:	2302      	movs	r3, #2
 8007946:	e00b      	b.n	8007960 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	429a      	cmp	r2, r3
 8007958:	d001      	beq.n	800795e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800795a:	2303      	movs	r3, #3
 800795c:	e000      	b.n	8007960 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	371c      	adds	r7, #28
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	4a0d      	ldr	r2, [pc, #52]	@ (80079c4 <DMA_List_GetCLLRNodeInfo+0x58>)
 800798e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00f      	beq.n	80079b6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2207      	movs	r2, #7
 800799a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800799c:	e00b      	b.n	80079b6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4a08      	ldr	r2, [pc, #32]	@ (80079c8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80079a8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2205      	movs	r2, #5
 80079b4:	601a      	str	r2, [r3, #0]
}
 80079b6:	bf00      	nop
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	fe010000 	.word	0xfe010000
 80079c8:	f8010000 	.word	0xf8010000

080079cc <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b089      	sub	sp, #36	@ 0x24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d142      	bne.n	8007a76 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80079f0:	e01d      	b.n	8007a2e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d107      	bne.n	8007a08 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007a02:	4013      	ands	r3, r2
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	e00f      	b.n	8007a28 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4413      	add	r3, r2
 8007a18:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007a20:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007a24:	4013      	ands	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d3dc      	bcc.n	80079f2 <DMA_List_FindNode+0x26>
 8007a38:	e029      	b.n	8007a8e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d107      	bne.n	8007a50 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	e00f      	b.n	8007a70 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	0c1b      	lsrs	r3, r3, #16
 8007a5a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	4413      	add	r3, r2
 8007a60:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007a68:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	3301      	adds	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d206      	bcs.n	8007a8e <DMA_List_FindNode+0xc2>
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007a86:	4013      	ands	r3, r2
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d1d5      	bne.n	8007a3a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d008      	beq.n	8007aa6 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d001      	beq.n	8007aa6 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e02b      	b.n	8007afe <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	69fa      	ldr	r2, [r7, #28]
 8007aaa:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	0c1b      	lsrs	r3, r3, #16
 8007ab2:	041b      	lsls	r3, r3, #16
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00f      	beq.n	8007afc <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007aec:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	0c1b      	lsrs	r3, r3, #16
 8007af4:	041b      	lsls	r3, r3, #16
 8007af6:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3724      	adds	r7, #36	@ 0x24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
	...

08007b0c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b089      	sub	sp, #36	@ 0x24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007b1e:	e1ba      	b.n	8007e96 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	2101      	movs	r1, #1
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	fa01 f303 	lsl.w	r3, r1, r3
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 81aa 	beq.w	8007e90 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a55      	ldr	r2, [pc, #340]	@ (8007c94 <HAL_GPIO_Init+0x188>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d15d      	bne.n	8007c00 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	43db      	mvns	r3, r3
 8007b54:	69fa      	ldr	r2, [r7, #28]
 8007b56:	4013      	ands	r3, r2
 8007b58:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f003 0201 	and.w	r2, r3, #1
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	fa02 f303 	lsl.w	r3, r2, r3
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007b74:	4a48      	ldr	r2, [pc, #288]	@ (8007c98 <HAL_GPIO_Init+0x18c>)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b7c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007b7e:	4a46      	ldr	r2, [pc, #280]	@ (8007c98 <HAL_GPIO_Init+0x18c>)
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	4413      	add	r3, r2
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	08da      	lsrs	r2, r3, #3
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	3208      	adds	r2, #8
 8007b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b96:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	220f      	movs	r2, #15
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	43db      	mvns	r3, r3
 8007ba8:	69fa      	ldr	r2, [r7, #28]
 8007baa:	4013      	ands	r3, r2
 8007bac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	220b      	movs	r2, #11
 8007bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbc:	69fa      	ldr	r2, [r7, #28]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	08da      	lsrs	r2, r3, #3
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	3208      	adds	r2, #8
 8007bca:	69f9      	ldr	r1, [r7, #28]
 8007bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	2203      	movs	r2, #3
 8007bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007be0:	43db      	mvns	r3, r3
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	4013      	ands	r3, r2
 8007be6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	2202      	movs	r2, #2
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e067      	b.n	8007cd0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d003      	beq.n	8007c10 <HAL_GPIO_Init+0x104>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b12      	cmp	r3, #18
 8007c0e:	d145      	bne.n	8007c9c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	08da      	lsrs	r2, r3, #3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3208      	adds	r2, #8
 8007c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f003 0307 	and.w	r3, r3, #7
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	220f      	movs	r2, #15
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	4013      	ands	r3, r2
 8007c32:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	f003 020f 	and.w	r2, r3, #15
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	fa02 f303 	lsl.w	r3, r2, r3
 8007c48:	69fa      	ldr	r2, [r7, #28]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	08da      	lsrs	r2, r3, #3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3208      	adds	r2, #8
 8007c56:	69f9      	ldr	r1, [r7, #28]
 8007c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	2203      	movs	r2, #3
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	4013      	ands	r3, r2
 8007c72:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f003 0203 	and.w	r2, r3, #3
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	fa02 f303 	lsl.w	r3, r2, r3
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	e01e      	b.n	8007cd0 <HAL_GPIO_Init+0x1c4>
 8007c92:	bf00      	nop
 8007c94:	46020000 	.word	0x46020000
 8007c98:	0801277c 	.word	0x0801277c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cac:	43db      	mvns	r3, r3
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f003 0203 	and.w	r2, r3, #3
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d00b      	beq.n	8007cf0 <HAL_GPIO_Init+0x1e4>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d007      	beq.n	8007cf0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ce4:	2b11      	cmp	r3, #17
 8007ce6:	d003      	beq.n	8007cf0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	2b12      	cmp	r3, #18
 8007cee:	d130      	bne.n	8007d52 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	43db      	mvns	r3, r3
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	4013      	ands	r3, r2
 8007d06:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	69fa      	ldr	r2, [r7, #28]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007d26:	2201      	movs	r2, #1
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	69fa      	ldr	r2, [r7, #28]
 8007d32:	4013      	ands	r3, r2
 8007d34:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	091b      	lsrs	r3, r3, #4
 8007d3c:	f003 0201 	and.w	r2, r3, #1
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	69fa      	ldr	r2, [r7, #28]
 8007d50:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d017      	beq.n	8007d8a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	2203      	movs	r2, #3
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	43db      	mvns	r3, r3
 8007d6c:	69fa      	ldr	r2, [r7, #28]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d07c      	beq.n	8007e90 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007d96:	4a47      	ldr	r2, [pc, #284]	@ (8007eb4 <HAL_GPIO_Init+0x3a8>)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	089b      	lsrs	r3, r3, #2
 8007d9c:	3318      	adds	r3, #24
 8007d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f003 0303 	and.w	r3, r3, #3
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	220f      	movs	r2, #15
 8007dae:	fa02 f303 	lsl.w	r3, r2, r3
 8007db2:	43db      	mvns	r3, r3
 8007db4:	69fa      	ldr	r2, [r7, #28]
 8007db6:	4013      	ands	r3, r2
 8007db8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	0a9a      	lsrs	r2, r3, #10
 8007dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8007eb8 <HAL_GPIO_Init+0x3ac>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	f002 0203 	and.w	r2, r2, #3
 8007dc8:	00d2      	lsls	r2, r2, #3
 8007dca:	4093      	lsls	r3, r2
 8007dcc:	69fa      	ldr	r2, [r7, #28]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007dd2:	4938      	ldr	r1, [pc, #224]	@ (8007eb4 <HAL_GPIO_Init+0x3a8>)
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	089b      	lsrs	r3, r3, #2
 8007dd8:	3318      	adds	r3, #24
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007de0:	4b34      	ldr	r3, [pc, #208]	@ (8007eb4 <HAL_GPIO_Init+0x3a8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	43db      	mvns	r3, r3
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	4013      	ands	r3, r2
 8007dee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007e04:	4a2b      	ldr	r2, [pc, #172]	@ (8007eb4 <HAL_GPIO_Init+0x3a8>)
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007eb4 <HAL_GPIO_Init+0x3a8>)
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	43db      	mvns	r3, r3
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	4013      	ands	r3, r2
 8007e18:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007e2e:	4a21      	ldr	r2, [pc, #132]	@ (8007eb4 <HAL_GPIO_Init+0x3a8>)
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007e34:	4b1f      	ldr	r3, [pc, #124]	@ (8007eb4 <HAL_GPIO_Init+0x3a8>)
 8007e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	43db      	mvns	r3, r3
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	4013      	ands	r3, r2
 8007e44:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007e5a:	4a16      	ldr	r2, [pc, #88]	@ (8007eb4 <HAL_GPIO_Init+0x3a8>)
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8007e62:	4b14      	ldr	r3, [pc, #80]	@ (8007eb4 <HAL_GPIO_Init+0x3a8>)
 8007e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e68:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	4013      	ands	r3, r2
 8007e72:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007e88:	4a0a      	ldr	r2, [pc, #40]	@ (8007eb4 <HAL_GPIO_Init+0x3a8>)
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	3301      	adds	r3, #1
 8007e94:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f47f ae3d 	bne.w	8007b20 <HAL_GPIO_Init+0x14>
  }
}
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
 8007eaa:	3724      	adds	r7, #36	@ 0x24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	46022000 	.word	0x46022000
 8007eb8:	002f7f7f 	.word	0x002f7f7f

08007ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	807b      	strh	r3, [r7, #2]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ecc:	787b      	ldrb	r3, [r7, #1]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007ed2:	887a      	ldrh	r2, [r7, #2]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007ed8:	e002      	b.n	8007ee0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007eda:	887a      	ldrh	r2, [r7, #2]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007efe:	887a      	ldrh	r2, [r7, #2]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4013      	ands	r3, r2
 8007f04:	041a      	lsls	r2, r3, #16
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	43d9      	mvns	r1, r3
 8007f0a:	887b      	ldrh	r3, [r7, #2]
 8007f0c:	400b      	ands	r3, r1
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	619a      	str	r2, [r3, #24]
}
 8007f14:	bf00      	nop
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	88fb      	ldrh	r3, [r7, #6]
 8007f30:	4013      	ands	r3, r2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d006      	beq.n	8007f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007f36:	4a0c      	ldr	r2, [pc, #48]	@ (8007f68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f814 	bl	8007f6c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007f44:	4b08      	ldr	r3, [pc, #32]	@ (8007f68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d006      	beq.n	8007f5e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007f50:	4a05      	ldr	r2, [pc, #20]	@ (8007f68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007f56:	88fb      	ldrh	r3, [r7, #6]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 f812 	bl	8007f82 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007f5e:	bf00      	nop
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	46022000 	.word	0x46022000

08007f6c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	4603      	mov	r3, r0
 8007f8a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e08d      	b.n	80080c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fa fa10 	bl	80023e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2224      	movs	r2, #36	@ 0x24
 8007fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0201 	bic.w	r2, r2, #1
 8007fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007fe8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ff8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d107      	bne.n	8008012 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800800e:	609a      	str	r2, [r3, #8]
 8008010:	e006      	b.n	8008020 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689a      	ldr	r2, [r3, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800801e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	2b02      	cmp	r3, #2
 8008026:	d108      	bne.n	800803a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008036:	605a      	str	r2, [r3, #4]
 8008038:	e007      	b.n	800804a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008048:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6812      	ldr	r2, [r2, #0]
 8008054:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800805c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800806c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691a      	ldr	r2, [r3, #16]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	69d9      	ldr	r1, [r3, #28]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0201 	orr.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	607a      	str	r2, [r7, #4]
 80080da:	461a      	mov	r2, r3
 80080dc:	460b      	mov	r3, r1
 80080de:	817b      	strh	r3, [r7, #10]
 80080e0:	4613      	mov	r3, r2
 80080e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b20      	cmp	r3, #32
 80080ee:	f040 80da 	bne.w	80082a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_I2C_Master_Transmit+0x30>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e0d3      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008108:	f7fb f908 	bl	800331c <HAL_GetTick>
 800810c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	2319      	movs	r3, #25
 8008114:	2201      	movs	r2, #1
 8008116:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fe7d 	bl	8008e1a <I2C_WaitOnFlagUntilTimeout>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e0be      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2221      	movs	r2, #33	@ 0x21
 800812e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2210      	movs	r2, #16
 8008136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	893a      	ldrh	r2, [r7, #8]
 800814a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008156:	b29b      	uxth	r3, r3
 8008158:	2bff      	cmp	r3, #255	@ 0xff
 800815a:	d90e      	bls.n	800817a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	22ff      	movs	r2, #255	@ 0xff
 8008160:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008166:	b2da      	uxtb	r2, r3
 8008168:	8979      	ldrh	r1, [r7, #10]
 800816a:	4b51      	ldr	r3, [pc, #324]	@ (80082b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f001 f814 	bl	80091a0 <I2C_TransferConfig>
 8008178:	e06c      	b.n	8008254 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008188:	b2da      	uxtb	r2, r3
 800818a:	8979      	ldrh	r1, [r7, #10]
 800818c:	4b48      	ldr	r3, [pc, #288]	@ (80082b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f001 f803 	bl	80091a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800819a:	e05b      	b.n	8008254 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	6a39      	ldr	r1, [r7, #32]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fe93 	bl	8008ecc <I2C_WaitOnTXISFlagUntilTimeout>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e07b      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b4:	781a      	ldrb	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081d8:	3b01      	subs	r3, #1
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d034      	beq.n	8008254 <HAL_I2C_Master_Transmit+0x184>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d130      	bne.n	8008254 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	2200      	movs	r2, #0
 80081fa:	2180      	movs	r1, #128	@ 0x80
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fe0c 	bl	8008e1a <I2C_WaitOnFlagUntilTimeout>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e04d      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008210:	b29b      	uxth	r3, r3
 8008212:	2bff      	cmp	r3, #255	@ 0xff
 8008214:	d90e      	bls.n	8008234 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	22ff      	movs	r2, #255	@ 0xff
 800821a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008220:	b2da      	uxtb	r2, r3
 8008222:	8979      	ldrh	r1, [r7, #10]
 8008224:	2300      	movs	r3, #0
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 ffb7 	bl	80091a0 <I2C_TransferConfig>
 8008232:	e00f      	b.n	8008254 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008242:	b2da      	uxtb	r2, r3
 8008244:	8979      	ldrh	r1, [r7, #10]
 8008246:	2300      	movs	r3, #0
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 ffa6 	bl	80091a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d19e      	bne.n	800819c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	6a39      	ldr	r1, [r7, #32]
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 fe79 	bl	8008f5a <I2C_WaitOnSTOPFlagUntilTimeout>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e01a      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2220      	movs	r2, #32
 8008278:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6859      	ldr	r1, [r3, #4]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8008286:	400b      	ands	r3, r1
 8008288:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2220      	movs	r2, #32
 800828e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e000      	b.n	80082a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80082a6:	2302      	movs	r3, #2
  }
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	80002000 	.word	0x80002000
 80082b4:	fe00e800 	.word	0xfe00e800

080082b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d005      	beq.n	80082e4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	68f9      	ldr	r1, [r7, #12]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
  }
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00f      	beq.n	800832e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00a      	beq.n	800832e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800831c:	f043 0201 	orr.w	r2, r3, #1
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800832c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00f      	beq.n	8008358 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008346:	f043 0208 	orr.w	r2, r3, #8
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008356:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00f      	beq.n	8008382 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00a      	beq.n	8008382 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008370:	f043 0202 	orr.w	r2, r3, #2
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008380:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008386:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f003 030b 	and.w	r3, r3, #11
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8008392:	68f9      	ldr	r1, [r7, #12]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fbe7 	bl	8008b68 <I2C_ITError>
  }
}
 800839a:	bf00      	nop
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80083be:	bf00      	nop
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70fb      	strb	r3, [r7, #3]
 80083d6:	4613      	mov	r3, r2
 80083d8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b086      	sub	sp, #24
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008432:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <I2C_Slave_ISR_IT+0x24>
 8008442:	2302      	movs	r3, #2
 8008444:	e0e2      	b.n	800860c <I2C_Slave_ISR_IT+0x1ea>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f003 0320 	and.w	r3, r3, #32
 8008454:	2b00      	cmp	r3, #0
 8008456:	d009      	beq.n	800846c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800845e:	2b00      	cmp	r3, #0
 8008460:	d004      	beq.n	800846c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008462:	6939      	ldr	r1, [r7, #16]
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f9b5 	bl	80087d4 <I2C_ITSlaveCplt>
 800846a:	e0ca      	b.n	8008602 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f003 0310 	and.w	r3, r3, #16
 8008472:	2b00      	cmp	r3, #0
 8008474:	d04b      	beq.n	800850e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800847c:	2b00      	cmp	r3, #0
 800847e:	d046      	beq.n	800850e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008484:	b29b      	uxth	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d128      	bne.n	80084dc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b28      	cmp	r3, #40	@ 0x28
 8008494:	d108      	bne.n	80084a8 <I2C_Slave_ISR_IT+0x86>
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800849c:	d104      	bne.n	80084a8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800849e:	6939      	ldr	r1, [r7, #16]
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 fb0d 	bl	8008ac0 <I2C_ITListenCplt>
 80084a6:	e031      	b.n	800850c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b29      	cmp	r3, #41	@ 0x29
 80084b2:	d10e      	bne.n	80084d2 <I2C_Slave_ISR_IT+0xb0>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80084ba:	d00a      	beq.n	80084d2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2210      	movs	r2, #16
 80084c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 fc66 	bl	8008d96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 f926 	bl	800871c <I2C_ITSlaveSeqCplt>
 80084d0:	e01c      	b.n	800850c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2210      	movs	r2, #16
 80084d8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80084da:	e08f      	b.n	80085fc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2210      	movs	r2, #16
 80084e2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e8:	f043 0204 	orr.w	r2, r3, #4
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <I2C_Slave_ISR_IT+0xdc>
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084fc:	d17e      	bne.n	80085fc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008502:	4619      	mov	r1, r3
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fb2f 	bl	8008b68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800850a:	e077      	b.n	80085fc <I2C_Slave_ISR_IT+0x1da>
 800850c:	e076      	b.n	80085fc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d02f      	beq.n	8008578 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800851e:	2b00      	cmp	r3, #0
 8008520:	d02a      	beq.n	8008578 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008526:	b29b      	uxth	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d018      	beq.n	800855e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008548:	3b01      	subs	r3, #1
 800854a:	b29a      	uxth	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008562:	b29b      	uxth	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d14b      	bne.n	8008600 <I2C_Slave_ISR_IT+0x1de>
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800856e:	d047      	beq.n	8008600 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 f8d3 	bl	800871c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008576:	e043      	b.n	8008600 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f003 0308 	and.w	r3, r3, #8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d009      	beq.n	8008596 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008588:	2b00      	cmp	r3, #0
 800858a:	d004      	beq.n	8008596 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800858c:	6939      	ldr	r1, [r7, #16]
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 f840 	bl	8008614 <I2C_ITAddrCplt>
 8008594:	e035      	b.n	8008602 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d030      	beq.n	8008602 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d02b      	beq.n	8008602 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d018      	beq.n	80085e6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b8:	781a      	ldrb	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	3b01      	subs	r3, #1
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085dc:	3b01      	subs	r3, #1
 80085de:	b29a      	uxth	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80085e4:	e00d      	b.n	8008602 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085ec:	d002      	beq.n	80085f4 <I2C_Slave_ISR_IT+0x1d2>
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d106      	bne.n	8008602 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 f891 	bl	800871c <I2C_ITSlaveSeqCplt>
 80085fa:	e002      	b.n	8008602 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80085fc:	bf00      	nop
 80085fe:	e000      	b.n	8008602 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8008600:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008624:	b2db      	uxtb	r3, r3
 8008626:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800862a:	2b28      	cmp	r3, #40	@ 0x28
 800862c:	d16a      	bne.n	8008704 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	0c1b      	lsrs	r3, r3, #16
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	0c1b      	lsrs	r3, r3, #16
 8008646:	b29b      	uxth	r3, r3
 8008648:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800864c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800865a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	b29b      	uxth	r3, r3
 8008664:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008668:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d138      	bne.n	80086e4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008672:	897b      	ldrh	r3, [r7, #10]
 8008674:	09db      	lsrs	r3, r3, #7
 8008676:	b29a      	uxth	r2, r3
 8008678:	89bb      	ldrh	r3, [r7, #12]
 800867a:	4053      	eors	r3, r2
 800867c:	b29b      	uxth	r3, r3
 800867e:	f003 0306 	and.w	r3, r3, #6
 8008682:	2b00      	cmp	r3, #0
 8008684:	d11c      	bne.n	80086c0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008686:	897b      	ldrh	r3, [r7, #10]
 8008688:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008698:	2b02      	cmp	r3, #2
 800869a:	d13b      	bne.n	8008714 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2208      	movs	r2, #8
 80086a8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80086b2:	89ba      	ldrh	r2, [r7, #12]
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7ff fe86 	bl	80083ca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80086be:	e029      	b.n	8008714 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80086c0:	893b      	ldrh	r3, [r7, #8]
 80086c2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80086c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fd9b 	bl	8009204 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80086d6:	89ba      	ldrh	r2, [r7, #12]
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff fe74 	bl	80083ca <HAL_I2C_AddrCallback>
}
 80086e2:	e017      	b.n	8008714 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80086e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fd8b 	bl	8009204 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80086f6:	89ba      	ldrh	r2, [r7, #12]
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff fe64 	bl	80083ca <HAL_I2C_AddrCallback>
}
 8008702:	e007      	b.n	8008714 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2208      	movs	r2, #8
 800870a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008714:	bf00      	nop
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d008      	beq.n	8008750 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	e00c      	b.n	800876a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008768:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b29      	cmp	r3, #41	@ 0x29
 8008774:	d112      	bne.n	800879c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2228      	movs	r2, #40	@ 0x28
 800877a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2221      	movs	r2, #33	@ 0x21
 8008782:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008784:	2101      	movs	r1, #1
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fd3c 	bl	8009204 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff fe04 	bl	80083a2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800879a:	e017      	b.n	80087cc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80087a6:	d111      	bne.n	80087cc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2228      	movs	r2, #40	@ 0x28
 80087ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2222      	movs	r2, #34	@ 0x22
 80087b4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80087b6:	2102      	movs	r1, #2
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fd23 	bl	8009204 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff fdf5 	bl	80083b6 <HAL_I2C_SlaveRxCpltCallback>
}
 80087cc:	bf00      	nop
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80087d4:	b590      	push	{r4, r7, lr}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ee:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087f6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2220      	movs	r2, #32
 80087fe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008800:	7afb      	ldrb	r3, [r7, #11]
 8008802:	2b21      	cmp	r3, #33	@ 0x21
 8008804:	d002      	beq.n	800880c <I2C_ITSlaveCplt+0x38>
 8008806:	7afb      	ldrb	r3, [r7, #11]
 8008808:	2b29      	cmp	r3, #41	@ 0x29
 800880a:	d108      	bne.n	800881e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800880c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fcf7 	bl	8009204 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2221      	movs	r2, #33	@ 0x21
 800881a:	631a      	str	r2, [r3, #48]	@ 0x30
 800881c:	e019      	b.n	8008852 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800881e:	7afb      	ldrb	r3, [r7, #11]
 8008820:	2b22      	cmp	r3, #34	@ 0x22
 8008822:	d002      	beq.n	800882a <I2C_ITSlaveCplt+0x56>
 8008824:	7afb      	ldrb	r3, [r7, #11]
 8008826:	2b2a      	cmp	r3, #42	@ 0x2a
 8008828:	d108      	bne.n	800883c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800882a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fce8 	bl	8009204 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2222      	movs	r2, #34	@ 0x22
 8008838:	631a      	str	r2, [r3, #48]	@ 0x30
 800883a:	e00a      	b.n	8008852 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800883c:	7afb      	ldrb	r3, [r7, #11]
 800883e:	2b28      	cmp	r3, #40	@ 0x28
 8008840:	d107      	bne.n	8008852 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008842:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fcdc 	bl	8009204 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008860:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6859      	ldr	r1, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	4b92      	ldr	r3, [pc, #584]	@ (8008ab8 <I2C_ITSlaveCplt+0x2e4>)
 800886e:	400b      	ands	r3, r1
 8008870:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa8f 	bl	8008d96 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d01c      	beq.n	80088bc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008890:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008896:	2b00      	cmp	r3, #0
 8008898:	d031      	beq.n	80088fe <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088a2:	b29c      	uxth	r4, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fe fc30 	bl	800710e <HAL_DMAEx_GetFifoLevel>
 80088ae:	4603      	mov	r3, r0
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	4423      	add	r3, r4
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80088ba:	e020      	b.n	80088fe <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01b      	beq.n	80088fe <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80088d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00f      	beq.n	80088fe <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088e6:	b29c      	uxth	r4, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fe fc0e 	bl	800710e <HAL_DMAEx_GetFifoLevel>
 80088f2:	4603      	mov	r3, r0
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	4423      	add	r3, r4
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d020      	beq.n	800894a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f023 0304 	bic.w	r3, r3, #4
 800890e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00c      	beq.n	800894a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008934:	3b01      	subs	r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008958:	f043 0204 	orr.w	r2, r3, #4
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f003 0310 	and.w	r3, r3, #16
 8008966:	2b00      	cmp	r3, #0
 8008968:	d049      	beq.n	80089fe <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008970:	2b00      	cmp	r3, #0
 8008972:	d044      	beq.n	80089fe <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008978:	b29b      	uxth	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d128      	bne.n	80089d0 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b28      	cmp	r3, #40	@ 0x28
 8008988:	d108      	bne.n	800899c <I2C_ITSlaveCplt+0x1c8>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008990:	d104      	bne.n	800899c <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008992:	6979      	ldr	r1, [r7, #20]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f893 	bl	8008ac0 <I2C_ITListenCplt>
 800899a:	e030      	b.n	80089fe <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b29      	cmp	r3, #41	@ 0x29
 80089a6:	d10e      	bne.n	80089c6 <I2C_ITSlaveCplt+0x1f2>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089ae:	d00a      	beq.n	80089c6 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2210      	movs	r2, #16
 80089b6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f9ec 	bl	8008d96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff feac 	bl	800871c <I2C_ITSlaveSeqCplt>
 80089c4:	e01b      	b.n	80089fe <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2210      	movs	r2, #16
 80089cc:	61da      	str	r2, [r3, #28]
 80089ce:	e016      	b.n	80089fe <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2210      	movs	r2, #16
 80089d6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089dc:	f043 0204 	orr.w	r2, r3, #4
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <I2C_ITSlaveCplt+0x21e>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089f0:	d105      	bne.n	80089fe <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f8b5 	bl	8008b68 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d010      	beq.n	8008a36 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f8a4 	bl	8008b68 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b28      	cmp	r3, #40	@ 0x28
 8008a2a:	d141      	bne.n	8008ab0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008a2c:	6979      	ldr	r1, [r7, #20]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f846 	bl	8008ac0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a34:	e03c      	b.n	8008ab0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a3e:	d014      	beq.n	8008a6a <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff fe6b 	bl	800871c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a1c      	ldr	r2, [pc, #112]	@ (8008abc <I2C_ITSlaveCplt+0x2e8>)
 8008a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7ff fcbf 	bl	80083e6 <HAL_I2C_ListenCpltCallback>
}
 8008a68:	e022      	b.n	8008ab0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b22      	cmp	r3, #34	@ 0x22
 8008a74:	d10e      	bne.n	8008a94 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff fc92 	bl	80083b6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008a92:	e00d      	b.n	8008ab0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fc79 	bl	80083a2 <HAL_I2C_SlaveTxCpltCallback>
}
 8008ab0:	bf00      	nop
 8008ab2:	371c      	adds	r7, #28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd90      	pop	{r4, r7, pc}
 8008ab8:	fe00e800 	.word	0xfe00e800
 8008abc:	ffff0000 	.word	0xffff0000

08008ac0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a25      	ldr	r2, [pc, #148]	@ (8008b64 <I2C_ITListenCplt+0xa4>)
 8008ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d022      	beq.n	8008b3c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b00:	b2d2      	uxtb	r2, r2
 8008b02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d012      	beq.n	8008b3c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b34:	f043 0204 	orr.w	r2, r3, #4
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b3c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fb5f 	bl	8009204 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2210      	movs	r2, #16
 8008b4c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff fc45 	bl	80083e6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	ffff0000 	.word	0xffff0000

08008b68 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b78:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a6d      	ldr	r2, [pc, #436]	@ (8008d3c <I2C_ITError+0x1d4>)
 8008b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	431a      	orrs	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	2b28      	cmp	r3, #40	@ 0x28
 8008b9e:	d005      	beq.n	8008bac <I2C_ITError+0x44>
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b29      	cmp	r3, #41	@ 0x29
 8008ba4:	d002      	beq.n	8008bac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008baa:	d10b      	bne.n	8008bc4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008bac:	2103      	movs	r1, #3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fb28 	bl	8009204 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2228      	movs	r2, #40	@ 0x28
 8008bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a60      	ldr	r2, [pc, #384]	@ (8008d40 <I2C_ITError+0x1d8>)
 8008bc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8008bc2:	e030      	b.n	8008c26 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008bc4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fb1b 	bl	8009204 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f8e1 	bl	8008d96 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b60      	cmp	r3, #96	@ 0x60
 8008bde:	d01f      	beq.n	8008c20 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	d114      	bne.n	8008c20 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	f003 0310 	and.w	r3, r3, #16
 8008c00:	2b10      	cmp	r3, #16
 8008c02:	d109      	bne.n	8008c18 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2210      	movs	r2, #16
 8008c0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c10:	f043 0204 	orr.w	r2, r3, #4
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c2a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d039      	beq.n	8008ca8 <I2C_ITError+0x140>
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2b11      	cmp	r3, #17
 8008c38:	d002      	beq.n	8008c40 <I2C_ITError+0xd8>
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b21      	cmp	r3, #33	@ 0x21
 8008c3e:	d133      	bne.n	8008ca8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c4e:	d107      	bne.n	8008c60 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fd fa6f 	bl	8006148 <HAL_DMA_GetState>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d017      	beq.n	8008ca0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c74:	4a33      	ldr	r2, [pc, #204]	@ (8008d44 <I2C_ITError+0x1dc>)
 8008c76:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fd f8d5 	bl	8005e34 <HAL_DMA_Abort_IT>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d04d      	beq.n	8008d2c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c9e:	e045      	b.n	8008d2c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f851 	bl	8008d48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ca6:	e041      	b.n	8008d2c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d039      	beq.n	8008d24 <I2C_ITError+0x1bc>
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b12      	cmp	r3, #18
 8008cb4:	d002      	beq.n	8008cbc <I2C_ITError+0x154>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b22      	cmp	r3, #34	@ 0x22
 8008cba:	d133      	bne.n	8008d24 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cca:	d107      	bne.n	8008cdc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008cda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fd fa31 	bl	8006148 <HAL_DMA_GetState>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d017      	beq.n	8008d1c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf0:	4a14      	ldr	r2, [pc, #80]	@ (8008d44 <I2C_ITError+0x1dc>)
 8008cf2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fd f897 	bl	8005e34 <HAL_DMA_Abort_IT>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d011      	beq.n	8008d30 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008d16:	4610      	mov	r0, r2
 8008d18:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d1a:	e009      	b.n	8008d30 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f813 	bl	8008d48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d22:	e005      	b.n	8008d30 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f80f 	bl	8008d48 <I2C_TreatErrorCallback>
  }
}
 8008d2a:	e002      	b.n	8008d32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008d2c:	bf00      	nop
 8008d2e:	e000      	b.n	8008d32 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d30:	bf00      	nop
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	ffff0000 	.word	0xffff0000
 8008d40:	08008423 	.word	0x08008423
 8008d44:	08008ddf 	.word	0x08008ddf

08008d48 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b60      	cmp	r3, #96	@ 0x60
 8008d5a:	d10e      	bne.n	8008d7a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fb4b 	bl	800840e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008d78:	e009      	b.n	8008d8e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff fb36 	bl	80083fa <HAL_I2C_ErrorCallback>
}
 8008d8e:	bf00      	nop
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d103      	bne.n	8008db4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2200      	movs	r2, #0
 8008db2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d007      	beq.n	8008dd2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	699a      	ldr	r2, [r3, #24]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f042 0201 	orr.w	r2, r2, #1
 8008dd0:	619a      	str	r2, [r3, #24]
  }
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df8:	2200      	movs	r2, #0
 8008dfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e08:	2200      	movs	r2, #0
 8008e0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7ff ff9b 	bl	8008d48 <I2C_TreatErrorCallback>
}
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	603b      	str	r3, [r7, #0]
 8008e26:	4613      	mov	r3, r2
 8008e28:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e2a:	e03b      	b.n	8008ea4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 f8d5 	bl	8008fe0 <I2C_IsErrorOccurred>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e041      	b.n	8008ec4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e46:	d02d      	beq.n	8008ea4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e48:	f7fa fa68 	bl	800331c <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d302      	bcc.n	8008e5e <I2C_WaitOnFlagUntilTimeout+0x44>
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d122      	bne.n	8008ea4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4013      	ands	r3, r2
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	bf0c      	ite	eq
 8008e6e:	2301      	moveq	r3, #1
 8008e70:	2300      	movne	r3, #0
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	79fb      	ldrb	r3, [r7, #7]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d113      	bne.n	8008ea4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e80:	f043 0220 	orr.w	r2, r3, #32
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e00f      	b.n	8008ec4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699a      	ldr	r2, [r3, #24]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	4013      	ands	r3, r2
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	bf0c      	ite	eq
 8008eb4:	2301      	moveq	r3, #1
 8008eb6:	2300      	movne	r3, #0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	461a      	mov	r2, r3
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d0b4      	beq.n	8008e2c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ed8:	e033      	b.n	8008f42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 f87e 	bl	8008fe0 <I2C_IsErrorOccurred>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e031      	b.n	8008f52 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef4:	d025      	beq.n	8008f42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef6:	f7fa fa11 	bl	800331c <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d302      	bcc.n	8008f0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d11a      	bne.n	8008f42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d013      	beq.n	8008f42 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1e:	f043 0220 	orr.w	r2, r3, #32
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e007      	b.n	8008f52 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d1c4      	bne.n	8008eda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f66:	e02f      	b.n	8008fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f000 f837 	bl	8008fe0 <I2C_IsErrorOccurred>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e02d      	b.n	8008fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f7c:	f7fa f9ce 	bl	800331c <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d302      	bcc.n	8008f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d11a      	bne.n	8008fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f003 0320 	and.w	r3, r3, #32
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d013      	beq.n	8008fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa4:	f043 0220 	orr.w	r2, r3, #32
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e007      	b.n	8008fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	f003 0320 	and.w	r3, r3, #32
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d1c8      	bne.n	8008f68 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08a      	sub	sp, #40	@ 0x28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	f003 0310 	and.w	r3, r3, #16
 8009008:	2b00      	cmp	r3, #0
 800900a:	d068      	beq.n	80090de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2210      	movs	r2, #16
 8009012:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009014:	e049      	b.n	80090aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901c:	d045      	beq.n	80090aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800901e:	f7fa f97d 	bl	800331c <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	429a      	cmp	r2, r3
 800902c:	d302      	bcc.n	8009034 <I2C_IsErrorOccurred+0x54>
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d13a      	bne.n	80090aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800903e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009046:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009056:	d121      	bne.n	800909c <I2C_IsErrorOccurred+0xbc>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800905e:	d01d      	beq.n	800909c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009060:	7cfb      	ldrb	r3, [r7, #19]
 8009062:	2b20      	cmp	r3, #32
 8009064:	d01a      	beq.n	800909c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009074:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009076:	f7fa f951 	bl	800331c <HAL_GetTick>
 800907a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800907c:	e00e      	b.n	800909c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800907e:	f7fa f94d 	bl	800331c <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	2b19      	cmp	r3, #25
 800908a:	d907      	bls.n	800909c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	f043 0320 	orr.w	r3, r3, #32
 8009092:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800909a:	e006      	b.n	80090aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	f003 0320 	and.w	r3, r3, #32
 80090a6:	2b20      	cmp	r3, #32
 80090a8:	d1e9      	bne.n	800907e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	f003 0320 	and.w	r3, r3, #32
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	d003      	beq.n	80090c0 <I2C_IsErrorOccurred+0xe0>
 80090b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0aa      	beq.n	8009016 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80090c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d103      	bne.n	80090d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2220      	movs	r2, #32
 80090ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	f043 0304 	orr.w	r3, r3, #4
 80090d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	f043 0301 	orr.w	r3, r3, #1
 80090f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009100:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00b      	beq.n	800912a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	f043 0308 	orr.w	r3, r3, #8
 8009118:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009122:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00b      	beq.n	800914c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	f043 0302 	orr.w	r3, r3, #2
 800913a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009144:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800914c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009150:	2b00      	cmp	r3, #0
 8009152:	d01c      	beq.n	800918e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff fe1e 	bl	8008d96 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6859      	ldr	r1, [r3, #4]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <I2C_IsErrorOccurred+0x1bc>)
 8009166:	400b      	ands	r3, r1
 8009168:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	431a      	orrs	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2220      	movs	r2, #32
 800917a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800918e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009192:	4618      	mov	r0, r3
 8009194:	3728      	adds	r7, #40	@ 0x28
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	fe00e800 	.word	0xfe00e800

080091a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	607b      	str	r3, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	817b      	strh	r3, [r7, #10]
 80091ae:	4613      	mov	r3, r2
 80091b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091b2:	897b      	ldrh	r3, [r7, #10]
 80091b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091b8:	7a7b      	ldrb	r3, [r7, #9]
 80091ba:	041b      	lsls	r3, r3, #16
 80091bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	0d5b      	lsrs	r3, r3, #21
 80091da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80091de:	4b08      	ldr	r3, [pc, #32]	@ (8009200 <I2C_TransferConfig+0x60>)
 80091e0:	430b      	orrs	r3, r1
 80091e2:	43db      	mvns	r3, r3
 80091e4:	ea02 0103 	and.w	r1, r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80091f2:	bf00      	nop
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	03ff63ff 	.word	0x03ff63ff

08009204 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009214:	887b      	ldrh	r3, [r7, #2]
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00f      	beq.n	800923e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009224:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009232:	2b28      	cmp	r3, #40	@ 0x28
 8009234:	d003      	beq.n	800923e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800923c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800923e:	887b      	ldrh	r3, [r7, #2]
 8009240:	f003 0302 	and.w	r3, r3, #2
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00f      	beq.n	8009268 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800924e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800925c:	2b28      	cmp	r3, #40	@ 0x28
 800925e:	d003      	beq.n	8009268 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009266:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800926c:	2b00      	cmp	r3, #0
 800926e:	da03      	bge.n	8009278 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009276:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009278:	887b      	ldrh	r3, [r7, #2]
 800927a:	2b10      	cmp	r3, #16
 800927c:	d103      	bne.n	8009286 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009284:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009286:	887b      	ldrh	r3, [r7, #2]
 8009288:	2b20      	cmp	r3, #32
 800928a:	d103      	bne.n	8009294 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f043 0320 	orr.w	r3, r3, #32
 8009292:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009294:	887b      	ldrh	r3, [r7, #2]
 8009296:	2b40      	cmp	r3, #64	@ 0x40
 8009298:	d103      	bne.n	80092a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6819      	ldr	r1, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	43da      	mvns	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	400a      	ands	r2, r1
 80092b2:	601a      	str	r2, [r3, #0]
}
 80092b4:	bf00      	nop
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d138      	bne.n	8009348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d101      	bne.n	80092e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80092e0:	2302      	movs	r3, #2
 80092e2:	e032      	b.n	800934a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2224      	movs	r2, #36	@ 0x24
 80092f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 0201 	bic.w	r2, r2, #1
 8009302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6819      	ldr	r1, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	430a      	orrs	r2, r1
 8009322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f042 0201 	orr.w	r2, r2, #1
 8009332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	e000      	b.n	800934a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009348:	2302      	movs	r3, #2
  }
}
 800934a:	4618      	mov	r0, r3
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b20      	cmp	r3, #32
 800936a:	d139      	bne.n	80093e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009372:	2b01      	cmp	r3, #1
 8009374:	d101      	bne.n	800937a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009376:	2302      	movs	r3, #2
 8009378:	e033      	b.n	80093e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2224      	movs	r2, #36	@ 0x24
 8009386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 0201 	bic.w	r2, r2, #1
 8009398:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80093a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	021b      	lsls	r3, r3, #8
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 0201 	orr.w	r2, r2, #1
 80093ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	e000      	b.n	80093e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80093e0:	2302      	movs	r3, #2
  }
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
	...

080093f0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80093fc:	4b0b      	ldr	r3, [pc, #44]	@ (800942c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	73fb      	strb	r3, [r7, #15]
 800940c:	e007      	b.n	800941e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800940e:	4b07      	ldr	r3, [pc, #28]	@ (800942c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f023 0204 	bic.w	r2, r3, #4
 8009416:	4905      	ldr	r1, [pc, #20]	@ (800942c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4313      	orrs	r3, r2
 800941c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800941e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	40030400 	.word	0x40030400

08009430 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009434:	4b05      	ldr	r3, [pc, #20]	@ (800944c <HAL_ICACHE_Enable+0x1c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a04      	ldr	r2, [pc, #16]	@ (800944c <HAL_ICACHE_Enable+0x1c>)
 800943a:	f043 0301 	orr.w	r3, r3, #1
 800943e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	40030400 	.word	0x40030400

08009450 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e0bf      	b.n	80095e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d106      	bne.n	800947c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7f9 f8a2 	bl	80025c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	699a      	ldr	r2, [r3, #24]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009492:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6999      	ldr	r1, [r3, #24]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80094a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6899      	ldr	r1, [r3, #8]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4b4a      	ldr	r3, [pc, #296]	@ (80095ec <HAL_LTDC_Init+0x19c>)
 80094c4:	400b      	ands	r3, r1
 80094c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	041b      	lsls	r3, r3, #16
 80094ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6899      	ldr	r1, [r3, #8]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699a      	ldr	r2, [r3, #24]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68d9      	ldr	r1, [r3, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	4b3e      	ldr	r3, [pc, #248]	@ (80095ec <HAL_LTDC_Init+0x19c>)
 80094f2:	400b      	ands	r3, r1
 80094f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	041b      	lsls	r3, r3, #16
 80094fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68d9      	ldr	r1, [r3, #12]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a1a      	ldr	r2, [r3, #32]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	431a      	orrs	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6919      	ldr	r1, [r3, #16]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	4b33      	ldr	r3, [pc, #204]	@ (80095ec <HAL_LTDC_Init+0x19c>)
 8009520:	400b      	ands	r3, r1
 8009522:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009528:	041b      	lsls	r3, r3, #16
 800952a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6919      	ldr	r1, [r3, #16]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6959      	ldr	r1, [r3, #20]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	4b27      	ldr	r3, [pc, #156]	@ (80095ec <HAL_LTDC_Init+0x19c>)
 800954e:	400b      	ands	r3, r1
 8009550:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009556:	041b      	lsls	r3, r3, #16
 8009558:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6959      	ldr	r1, [r3, #20]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	431a      	orrs	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009580:	041b      	lsls	r3, r3, #16
 8009582:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009592:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4313      	orrs	r3, r2
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80095a6:	431a      	orrs	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0206 	orr.w	r2, r2, #6
 80095be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	699a      	ldr	r2, [r3, #24]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0201 	orr.w	r2, r2, #1
 80095ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	f000f800 	.word	0xf000f800

080095f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009606:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f003 0304 	and.w	r3, r3, #4
 800960e:	2b00      	cmp	r3, #0
 8009610:	d023      	beq.n	800965a <HAL_LTDC_IRQHandler+0x6a>
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01e      	beq.n	800965a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f022 0204 	bic.w	r2, r2, #4
 800962a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2204      	movs	r2, #4
 8009632:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800963a:	f043 0201 	orr.w	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2204      	movs	r2, #4
 8009648:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f86f 	bl	8009738 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d023      	beq.n	80096ac <HAL_LTDC_IRQHandler+0xbc>
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d01e      	beq.n	80096ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0202 	bic.w	r2, r2, #2
 800967c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2202      	movs	r2, #2
 8009684:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800968c:	f043 0202 	orr.w	r2, r3, #2
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2204      	movs	r2, #4
 800969a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f846 	bl	8009738 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d01b      	beq.n	80096ee <HAL_LTDC_IRQHandler+0xfe>
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d016      	beq.n	80096ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0201 	bic.w	r2, r2, #1
 80096ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2201      	movs	r2, #1
 80096d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f82f 	bl	800974c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f003 0308 	and.w	r3, r3, #8
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d01b      	beq.n	8009730 <HAL_LTDC_IRQHandler+0x140>
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f003 0308 	and.w	r3, r3, #8
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d016      	beq.n	8009730 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 0208 	bic.w	r2, r2, #8
 8009710:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2208      	movs	r2, #8
 8009718:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f818 	bl	8009760 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009730:	bf00      	nop
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009774:	b5b0      	push	{r4, r5, r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_LTDC_ConfigLayer+0x1a>
 800978a:	2302      	movs	r3, #2
 800978c:	e02c      	b.n	80097e8 <HAL_LTDC_ConfigLayer+0x74>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2202      	movs	r2, #2
 800979a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2134      	movs	r1, #52	@ 0x34
 80097a4:	fb01 f303 	mul.w	r3, r1, r3
 80097a8:	4413      	add	r3, r2
 80097aa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	4614      	mov	r4, r2
 80097b2:	461d      	mov	r5, r3
 80097b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	68b9      	ldr	r1, [r7, #8]
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 f811 	bl	80097f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2201      	movs	r2, #1
 80097d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bdb0      	pop	{r4, r5, r7, pc}

080097f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b089      	sub	sp, #36	@ 0x24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	0c1b      	lsrs	r3, r3, #16
 8009808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800980c:	4413      	add	r3, r2
 800980e:	041b      	lsls	r3, r3, #16
 8009810:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	01db      	lsls	r3, r3, #7
 800981c:	4413      	add	r3, r2
 800981e:	3384      	adds	r3, #132	@ 0x84
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	6812      	ldr	r2, [r2, #0]
 8009826:	4611      	mov	r1, r2
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	01d2      	lsls	r2, r2, #7
 800982c:	440a      	add	r2, r1
 800982e:	3284      	adds	r2, #132	@ 0x84
 8009830:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009834:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	0c1b      	lsrs	r3, r3, #16
 8009842:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009846:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009848:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4619      	mov	r1, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	01db      	lsls	r3, r3, #7
 8009854:	440b      	add	r3, r1
 8009856:	3384      	adds	r3, #132	@ 0x84
 8009858:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800985e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800986e:	4413      	add	r3, r2
 8009870:	041b      	lsls	r3, r3, #16
 8009872:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	461a      	mov	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	01db      	lsls	r3, r3, #7
 800987e:	4413      	add	r3, r2
 8009880:	3384      	adds	r3, #132	@ 0x84
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	6812      	ldr	r2, [r2, #0]
 8009888:	4611      	mov	r1, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	01d2      	lsls	r2, r2, #7
 800988e:	440a      	add	r2, r1
 8009890:	3284      	adds	r2, #132	@ 0x84
 8009892:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009896:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098a6:	4413      	add	r3, r2
 80098a8:	1c5a      	adds	r2, r3, #1
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4619      	mov	r1, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	01db      	lsls	r3, r3, #7
 80098b4:	440b      	add	r3, r1
 80098b6:	3384      	adds	r3, #132	@ 0x84
 80098b8:	4619      	mov	r1, r3
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	4313      	orrs	r3, r2
 80098be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	461a      	mov	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	01db      	lsls	r3, r3, #7
 80098ca:	4413      	add	r3, r2
 80098cc:	3384      	adds	r3, #132	@ 0x84
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	4611      	mov	r1, r2
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	01d2      	lsls	r2, r2, #7
 80098da:	440a      	add	r2, r1
 80098dc:	3284      	adds	r2, #132	@ 0x84
 80098de:	f023 0307 	bic.w	r3, r3, #7
 80098e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	461a      	mov	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	01db      	lsls	r3, r3, #7
 80098ee:	4413      	add	r3, r2
 80098f0:	3384      	adds	r3, #132	@ 0x84
 80098f2:	461a      	mov	r2, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800990a:	041b      	lsls	r3, r3, #16
 800990c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	061b      	lsls	r3, r3, #24
 8009914:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800991c:	461a      	mov	r2, r3
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	431a      	orrs	r2, r3
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	431a      	orrs	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4619      	mov	r1, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	01db      	lsls	r3, r3, #7
 8009930:	440b      	add	r3, r1
 8009932:	3384      	adds	r3, #132	@ 0x84
 8009934:	4619      	mov	r1, r3
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	4313      	orrs	r3, r2
 800993a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	461a      	mov	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	01db      	lsls	r3, r3, #7
 8009946:	4413      	add	r3, r2
 8009948:	3384      	adds	r3, #132	@ 0x84
 800994a:	695b      	ldr	r3, [r3, #20]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	6812      	ldr	r2, [r2, #0]
 8009950:	4611      	mov	r1, r2
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	01d2      	lsls	r2, r2, #7
 8009956:	440a      	add	r2, r1
 8009958:	3284      	adds	r2, #132	@ 0x84
 800995a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800995e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	01db      	lsls	r3, r3, #7
 800996a:	4413      	add	r3, r2
 800996c:	3384      	adds	r3, #132	@ 0x84
 800996e:	461a      	mov	r2, r3
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	01db      	lsls	r3, r3, #7
 8009980:	4413      	add	r3, r2
 8009982:	3384      	adds	r3, #132	@ 0x84
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	6812      	ldr	r2, [r2, #0]
 800998a:	4611      	mov	r1, r2
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	01d2      	lsls	r2, r2, #7
 8009990:	440a      	add	r2, r1
 8009992:	3284      	adds	r2, #132	@ 0x84
 8009994:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009998:	f023 0307 	bic.w	r3, r3, #7
 800999c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	69da      	ldr	r2, [r3, #28]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	68f9      	ldr	r1, [r7, #12]
 80099a8:	6809      	ldr	r1, [r1, #0]
 80099aa:	4608      	mov	r0, r1
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	01c9      	lsls	r1, r1, #7
 80099b0:	4401      	add	r1, r0
 80099b2:	3184      	adds	r1, #132	@ 0x84
 80099b4:	4313      	orrs	r3, r2
 80099b6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	01db      	lsls	r3, r3, #7
 80099c2:	4413      	add	r3, r2
 80099c4:	3384      	adds	r3, #132	@ 0x84
 80099c6:	461a      	mov	r2, r3
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099cc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d102      	bne.n	80099dc <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 80099d6:	2304      	movs	r3, #4
 80099d8:	61fb      	str	r3, [r7, #28]
 80099da:	e01b      	b.n	8009a14 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d102      	bne.n	80099ea <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 80099e4:	2303      	movs	r3, #3
 80099e6:	61fb      	str	r3, [r7, #28]
 80099e8:	e014      	b.n	8009a14 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	d00b      	beq.n	8009a0a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d007      	beq.n	8009a0a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d003      	beq.n	8009a0a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009a06:	2b07      	cmp	r3, #7
 8009a08:	d102      	bne.n	8009a10 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	61fb      	str	r3, [r7, #28]
 8009a0e:	e001      	b.n	8009a14 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8009a10:	2301      	movs	r3, #1
 8009a12:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	01db      	lsls	r3, r3, #7
 8009a1e:	4413      	add	r3, r2
 8009a20:	3384      	adds	r3, #132	@ 0x84
 8009a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	6812      	ldr	r2, [r2, #0]
 8009a28:	4611      	mov	r1, r2
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	01d2      	lsls	r2, r2, #7
 8009a2e:	440a      	add	r2, r1
 8009a30:	3284      	adds	r2, #132	@ 0x84
 8009a32:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009a36:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3c:	69fa      	ldr	r2, [r7, #28]
 8009a3e:	fb02 f303 	mul.w	r3, r2, r3
 8009a42:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	6859      	ldr	r1, [r3, #4]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	1acb      	subs	r3, r1, r3
 8009a4e:	69f9      	ldr	r1, [r7, #28]
 8009a50:	fb01 f303 	mul.w	r3, r1, r3
 8009a54:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009a56:	68f9      	ldr	r1, [r7, #12]
 8009a58:	6809      	ldr	r1, [r1, #0]
 8009a5a:	4608      	mov	r0, r1
 8009a5c:	6879      	ldr	r1, [r7, #4]
 8009a5e:	01c9      	lsls	r1, r1, #7
 8009a60:	4401      	add	r1, r0
 8009a62:	3184      	adds	r1, #132	@ 0x84
 8009a64:	4313      	orrs	r3, r2
 8009a66:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	01db      	lsls	r3, r3, #7
 8009a72:	4413      	add	r3, r2
 8009a74:	3384      	adds	r3, #132	@ 0x84
 8009a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	6812      	ldr	r2, [r2, #0]
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	01d2      	lsls	r2, r2, #7
 8009a82:	440a      	add	r2, r1
 8009a84:	3284      	adds	r2, #132	@ 0x84
 8009a86:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009a8a:	f023 0307 	bic.w	r3, r3, #7
 8009a8e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	461a      	mov	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	01db      	lsls	r3, r3, #7
 8009a9a:	4413      	add	r3, r2
 8009a9c:	3384      	adds	r3, #132	@ 0x84
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	01db      	lsls	r3, r3, #7
 8009ab0:	4413      	add	r3, r2
 8009ab2:	3384      	adds	r3, #132	@ 0x84
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	6812      	ldr	r2, [r2, #0]
 8009aba:	4611      	mov	r1, r2
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	01d2      	lsls	r2, r2, #7
 8009ac0:	440a      	add	r2, r1
 8009ac2:	3284      	adds	r2, #132	@ 0x84
 8009ac4:	f043 0301 	orr.w	r3, r3, #1
 8009ac8:	6013      	str	r3, [r2, #0]
}
 8009aca:	bf00      	nop
 8009acc:	3724      	adds	r7, #36	@ 0x24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b086      	sub	sp, #24
 8009ada:	af02      	add	r7, sp, #8
 8009adc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e0fe      	b.n	8009ce6 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d106      	bne.n	8009b02 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7f8 fff9 	bl	8002af4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2203      	movs	r2, #3
 8009b06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f008 fb29 	bl	8012166 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	7c1a      	ldrb	r2, [r3, #16]
 8009b1c:	f88d 2000 	strb.w	r2, [sp]
 8009b20:	3304      	adds	r3, #4
 8009b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b24:	f008 faf0 	bl	8012108 <USB_CoreInit>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d005      	beq.n	8009b3a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2202      	movs	r2, #2
 8009b32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e0d5      	b.n	8009ce6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2100      	movs	r1, #0
 8009b40:	4618      	mov	r0, r3
 8009b42:	f008 fb21 	bl	8012188 <USB_SetCurrentMode>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2202      	movs	r2, #2
 8009b50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e0c6      	b.n	8009ce6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b58:	2300      	movs	r3, #0
 8009b5a:	73fb      	strb	r3, [r7, #15]
 8009b5c:	e04a      	b.n	8009bf4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009b5e:	7bfa      	ldrb	r2, [r7, #15]
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3315      	adds	r3, #21
 8009b6e:	2201      	movs	r2, #1
 8009b70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009b72:	7bfa      	ldrb	r2, [r7, #15]
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	4613      	mov	r3, r2
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	440b      	add	r3, r1
 8009b80:	3314      	adds	r3, #20
 8009b82:	7bfa      	ldrb	r2, [r7, #15]
 8009b84:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009b86:	7bfa      	ldrb	r2, [r7, #15]
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	b298      	uxth	r0, r3
 8009b8c:	6879      	ldr	r1, [r7, #4]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	440b      	add	r3, r1
 8009b98:	332e      	adds	r3, #46	@ 0x2e
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009b9e:	7bfa      	ldrb	r2, [r7, #15]
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	440b      	add	r3, r1
 8009bac:	3318      	adds	r3, #24
 8009bae:	2200      	movs	r2, #0
 8009bb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009bb2:	7bfa      	ldrb	r2, [r7, #15]
 8009bb4:	6879      	ldr	r1, [r7, #4]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	4413      	add	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	440b      	add	r3, r1
 8009bc0:	331c      	adds	r3, #28
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009bc6:	7bfa      	ldrb	r2, [r7, #15]
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	00db      	lsls	r3, r3, #3
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	3320      	adds	r3, #32
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009bda:	7bfa      	ldrb	r2, [r7, #15]
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4613      	mov	r3, r2
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	440b      	add	r3, r1
 8009be8:	3324      	adds	r3, #36	@ 0x24
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	73fb      	strb	r3, [r7, #15]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	791b      	ldrb	r3, [r3, #4]
 8009bf8:	7bfa      	ldrb	r2, [r7, #15]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d3af      	bcc.n	8009b5e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73fb      	strb	r3, [r7, #15]
 8009c02:	e044      	b.n	8009c8e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009c04:	7bfa      	ldrb	r2, [r7, #15]
 8009c06:	6879      	ldr	r1, [r7, #4]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	4413      	add	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	440b      	add	r3, r1
 8009c12:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009c16:	2200      	movs	r2, #0
 8009c18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009c1a:	7bfa      	ldrb	r2, [r7, #15]
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	00db      	lsls	r3, r3, #3
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	440b      	add	r3, r1
 8009c28:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009c2c:	7bfa      	ldrb	r2, [r7, #15]
 8009c2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009c30:	7bfa      	ldrb	r2, [r7, #15]
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	4613      	mov	r3, r2
 8009c36:	00db      	lsls	r3, r3, #3
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009c42:	2200      	movs	r2, #0
 8009c44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009c46:	7bfa      	ldrb	r2, [r7, #15]
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	00db      	lsls	r3, r3, #3
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	440b      	add	r3, r1
 8009c54:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009c58:	2200      	movs	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009c5c:	7bfa      	ldrb	r2, [r7, #15]
 8009c5e:	6879      	ldr	r1, [r7, #4]
 8009c60:	4613      	mov	r3, r2
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	440b      	add	r3, r1
 8009c6a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009c72:	7bfa      	ldrb	r2, [r7, #15]
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	00db      	lsls	r3, r3, #3
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009c84:	2200      	movs	r2, #0
 8009c86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	73fb      	strb	r3, [r7, #15]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	791b      	ldrb	r3, [r3, #4]
 8009c92:	7bfa      	ldrb	r2, [r7, #15]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d3b5      	bcc.n	8009c04 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	7c1a      	ldrb	r2, [r3, #16]
 8009ca0:	f88d 2000 	strb.w	r2, [sp]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ca8:	f008 faba 	bl	8012220 <USB_DevInit>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d005      	beq.n	8009cbe <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e013      	b.n	8009ce6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7b1b      	ldrb	r3, [r3, #12]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d102      	bne.n	8009cda <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f80a 	bl	8009cee <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f008 fc87 	bl	80125f2 <USB_DevDisconnect>

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d20:	f043 0303 	orr.w	r3, r3, #3
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
	...

08009d38 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009d3c:	4b05      	ldr	r3, [pc, #20]	@ (8009d54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d40:	4a04      	ldr	r2, [pc, #16]	@ (8009d54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d42:	f043 0301 	orr.w	r3, r3, #1
 8009d46:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8009d48:	bf00      	nop
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	46020800 	.word	0x46020800

08009d58 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009d60:	4b39      	ldr	r3, [pc, #228]	@ (8009e48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d68:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d10b      	bne.n	8009d8a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d78:	d905      	bls.n	8009d86 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009d7a:	4b33      	ldr	r3, [pc, #204]	@ (8009e48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	4a32      	ldr	r2, [pc, #200]	@ (8009e48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d84:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	e057      	b.n	8009e3a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d90:	d90a      	bls.n	8009da8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8009d92:	4b2d      	ldr	r3, [pc, #180]	@ (8009e48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8009e48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009da4:	60d3      	str	r3, [r2, #12]
 8009da6:	e007      	b.n	8009db8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009da8:	4b27      	ldr	r3, [pc, #156]	@ (8009e48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009db0:	4925      	ldr	r1, [pc, #148]	@ (8009e48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009db8:	4b24      	ldr	r3, [pc, #144]	@ (8009e4c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a24      	ldr	r2, [pc, #144]	@ (8009e50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc2:	099b      	lsrs	r3, r3, #6
 8009dc4:	2232      	movs	r2, #50	@ 0x32
 8009dc6:	fb02 f303 	mul.w	r3, r2, r3
 8009dca:	4a21      	ldr	r2, [pc, #132]	@ (8009e50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd0:	099b      	lsrs	r3, r3, #6
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009dd6:	e002      	b.n	8009dde <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009dde:	4b1a      	ldr	r3, [pc, #104]	@ (8009e48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1f3      	bne.n	8009dd8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d01b      	beq.n	8009e2e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009df6:	4b15      	ldr	r3, [pc, #84]	@ (8009e4c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a15      	ldr	r2, [pc, #84]	@ (8009e50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009e00:	099b      	lsrs	r3, r3, #6
 8009e02:	2232      	movs	r2, #50	@ 0x32
 8009e04:	fb02 f303 	mul.w	r3, r2, r3
 8009e08:	4a11      	ldr	r2, [pc, #68]	@ (8009e50 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0e:	099b      	lsrs	r3, r3, #6
 8009e10:	3301      	adds	r3, #1
 8009e12:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009e14:	e002      	b.n	8009e1c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e48 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1f3      	bne.n	8009e16 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e000      	b.n	8009e3a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	46020800 	.word	0x46020800
 8009e4c:	20000028 	.word	0x20000028
 8009e50:	10624dd3 	.word	0x10624dd3

08009e54 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009e54:	b480      	push	{r7}
 8009e56:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009e58:	4b04      	ldr	r3, [pc, #16]	@ (8009e6c <HAL_PWREx_GetVoltageRange+0x18>)
 8009e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	46020800 	.word	0x46020800

08009e70 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009e78:	4b22      	ldr	r3, [pc, #136]	@ (8009f04 <HAL_PWREx_ConfigSupply+0x94>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a22      	ldr	r2, [pc, #136]	@ (8009f08 <HAL_PWREx_ConfigSupply+0x98>)
 8009e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e82:	099b      	lsrs	r3, r3, #6
 8009e84:	2232      	movs	r2, #50	@ 0x32
 8009e86:	fb02 f303 	mul.w	r3, r2, r3
 8009e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8009f08 <HAL_PWREx_ConfigSupply+0x98>)
 8009e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e90:	099b      	lsrs	r3, r3, #6
 8009e92:	3301      	adds	r3, #1
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d113      	bne.n	8009ec4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8009f0c <HAL_PWREx_ConfigSupply+0x9c>)
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8009f0c <HAL_PWREx_ConfigSupply+0x9c>)
 8009ea2:	f023 0302 	bic.w	r3, r3, #2
 8009ea6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009ea8:	e002      	b.n	8009eb0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009eb0:	4b16      	ldr	r3, [pc, #88]	@ (8009f0c <HAL_PWREx_ConfigSupply+0x9c>)
 8009eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d116      	bne.n	8009eea <HAL_PWREx_ConfigSupply+0x7a>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1f3      	bne.n	8009eaa <HAL_PWREx_ConfigSupply+0x3a>
 8009ec2:	e012      	b.n	8009eea <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009ec4:	4b11      	ldr	r3, [pc, #68]	@ (8009f0c <HAL_PWREx_ConfigSupply+0x9c>)
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	4a10      	ldr	r2, [pc, #64]	@ (8009f0c <HAL_PWREx_ConfigSupply+0x9c>)
 8009eca:	f043 0302 	orr.w	r3, r3, #2
 8009ece:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009ed0:	e002      	b.n	8009ed8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8009f0c <HAL_PWREx_ConfigSupply+0x9c>)
 8009eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d102      	bne.n	8009eea <HAL_PWREx_ConfigSupply+0x7a>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1f3      	bne.n	8009ed2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e000      	b.n	8009ef6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	20000028 	.word	0x20000028
 8009f08:	10624dd3 	.word	0x10624dd3
 8009f0c:	46020800 	.word	0x46020800

08009f10 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009f14:	4b05      	ldr	r3, [pc, #20]	@ (8009f2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	4a04      	ldr	r2, [pc, #16]	@ (8009f2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8009f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f1e:	6113      	str	r3, [r2, #16]
}
 8009f20:	bf00      	nop
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	46020800 	.word	0x46020800

08009f30 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009f30:	b480      	push	{r7}
 8009f32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009f34:	4b05      	ldr	r3, [pc, #20]	@ (8009f4c <HAL_PWREx_EnableVddIO2+0x1c>)
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	4a04      	ldr	r2, [pc, #16]	@ (8009f4c <HAL_PWREx_EnableVddIO2+0x1c>)
 8009f3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f3e:	6113      	str	r3, [r2, #16]
}
 8009f40:	bf00      	nop
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	46020800 	.word	0x46020800

08009f50 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009f50:	b480      	push	{r7}
 8009f52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009f54:	4b05      	ldr	r3, [pc, #20]	@ (8009f6c <HAL_PWREx_EnableVddA+0x1c>)
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	4a04      	ldr	r2, [pc, #16]	@ (8009f6c <HAL_PWREx_EnableVddA+0x1c>)
 8009f5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f5e:	6113      	str	r3, [r2, #16]
}
 8009f60:	bf00      	nop
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	46020800 	.word	0x46020800

08009f70 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8009f76:	f7ff ff6d 	bl	8009e54 <HAL_PWREx_GetVoltageRange>
 8009f7a:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009f82:	d003      	beq.n	8009f8c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f8a:	d107      	bne.n	8009f9c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8009f8c:	4b06      	ldr	r3, [pc, #24]	@ (8009fa8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	4a05      	ldr	r2, [pc, #20]	@ (8009fa8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009f92:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8009f96:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e000      	b.n	8009f9e <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	46020800 	.word	0x46020800

08009fac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08e      	sub	sp, #56	@ 0x38
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d102      	bne.n	8009fc6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f000 bec8 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fc6:	4b99      	ldr	r3, [pc, #612]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	f003 030c 	and.w	r3, r3, #12
 8009fce:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009fd0:	4b96      	ldr	r3, [pc, #600]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd4:	f003 0303 	and.w	r3, r3, #3
 8009fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0310 	and.w	r3, r3, #16
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 816c 	beq.w	800a2c0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d007      	beq.n	8009ffe <HAL_RCC_OscConfig+0x52>
 8009fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff0:	2b0c      	cmp	r3, #12
 8009ff2:	f040 80de 	bne.w	800a1b2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	f040 80da 	bne.w	800a1b2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	f000 bea5 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a010:	4b86      	ldr	r3, [pc, #536]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d004      	beq.n	800a026 <HAL_RCC_OscConfig+0x7a>
 800a01c:	4b83      	ldr	r3, [pc, #524]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a024:	e005      	b.n	800a032 <HAL_RCC_OscConfig+0x86>
 800a026:	4b81      	ldr	r3, [pc, #516]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a02c:	041b      	lsls	r3, r3, #16
 800a02e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a032:	4293      	cmp	r3, r2
 800a034:	d255      	bcs.n	800a0e2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10a      	bne.n	800a052 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a040:	4618      	mov	r0, r3
 800a042:	f001 fa11 	bl	800b468 <RCC_SetFlashLatencyFromMSIRange>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	f000 be82 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a052:	4b76      	ldr	r3, [pc, #472]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	4a75      	ldr	r2, [pc, #468]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a058:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a05c:	6093      	str	r3, [r2, #8]
 800a05e:	4b73      	ldr	r3, [pc, #460]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06a:	4970      	ldr	r1, [pc, #448]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a074:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a078:	d309      	bcc.n	800a08e <HAL_RCC_OscConfig+0xe2>
 800a07a:	4b6c      	ldr	r3, [pc, #432]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f023 021f 	bic.w	r2, r3, #31
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	4969      	ldr	r1, [pc, #420]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	60cb      	str	r3, [r1, #12]
 800a08c:	e07e      	b.n	800a18c <HAL_RCC_OscConfig+0x1e0>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a092:	2b00      	cmp	r3, #0
 800a094:	da0a      	bge.n	800a0ac <HAL_RCC_OscConfig+0x100>
 800a096:	4b65      	ldr	r3, [pc, #404]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	015b      	lsls	r3, r3, #5
 800a0a4:	4961      	ldr	r1, [pc, #388]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60cb      	str	r3, [r1, #12]
 800a0aa:	e06f      	b.n	800a18c <HAL_RCC_OscConfig+0x1e0>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b4:	d30a      	bcc.n	800a0cc <HAL_RCC_OscConfig+0x120>
 800a0b6:	4b5d      	ldr	r3, [pc, #372]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	029b      	lsls	r3, r3, #10
 800a0c4:	4959      	ldr	r1, [pc, #356]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60cb      	str	r3, [r1, #12]
 800a0ca:	e05f      	b.n	800a18c <HAL_RCC_OscConfig+0x1e0>
 800a0cc:	4b57      	ldr	r3, [pc, #348]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a1b      	ldr	r3, [r3, #32]
 800a0d8:	03db      	lsls	r3, r3, #15
 800a0da:	4954      	ldr	r1, [pc, #336]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	60cb      	str	r3, [r1, #12]
 800a0e0:	e054      	b.n	800a18c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a0e2:	4b52      	ldr	r3, [pc, #328]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	4a51      	ldr	r2, [pc, #324]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a0e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a0ec:	6093      	str	r3, [r2, #8]
 800a0ee:	4b4f      	ldr	r3, [pc, #316]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fa:	494c      	ldr	r1, [pc, #304]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a104:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a108:	d309      	bcc.n	800a11e <HAL_RCC_OscConfig+0x172>
 800a10a:	4b48      	ldr	r3, [pc, #288]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	f023 021f 	bic.w	r2, r3, #31
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	4945      	ldr	r1, [pc, #276]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	60cb      	str	r3, [r1, #12]
 800a11c:	e028      	b.n	800a170 <HAL_RCC_OscConfig+0x1c4>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a122:	2b00      	cmp	r3, #0
 800a124:	da0a      	bge.n	800a13c <HAL_RCC_OscConfig+0x190>
 800a126:	4b41      	ldr	r3, [pc, #260]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	015b      	lsls	r3, r3, #5
 800a134:	493d      	ldr	r1, [pc, #244]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a136:	4313      	orrs	r3, r2
 800a138:	60cb      	str	r3, [r1, #12]
 800a13a:	e019      	b.n	800a170 <HAL_RCC_OscConfig+0x1c4>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a144:	d30a      	bcc.n	800a15c <HAL_RCC_OscConfig+0x1b0>
 800a146:	4b39      	ldr	r3, [pc, #228]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	029b      	lsls	r3, r3, #10
 800a154:	4935      	ldr	r1, [pc, #212]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a156:	4313      	orrs	r3, r2
 800a158:	60cb      	str	r3, [r1, #12]
 800a15a:	e009      	b.n	800a170 <HAL_RCC_OscConfig+0x1c4>
 800a15c:	4b33      	ldr	r3, [pc, #204]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	03db      	lsls	r3, r3, #15
 800a16a:	4930      	ldr	r1, [pc, #192]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10a      	bne.n	800a18c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17a:	4618      	mov	r0, r3
 800a17c:	f001 f974 	bl	800b468 <RCC_SetFlashLatencyFromMSIRange>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	f000 bde5 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800a18c:	f001 f8de 	bl	800b34c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a190:	4b27      	ldr	r3, [pc, #156]	@ (800a230 <HAL_RCC_OscConfig+0x284>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4618      	mov	r0, r3
 800a196:	f7f8 ff01 	bl	8002f9c <HAL_InitTick>
 800a19a:	4603      	mov	r3, r0
 800a19c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800a1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 808a 	beq.w	800a2be <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800a1aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1ae:	f000 bdd2 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d066      	beq.n	800a288 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800a1ba:	4b1c      	ldr	r3, [pc, #112]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a1b      	ldr	r2, [pc, #108]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a1c0:	f043 0301 	orr.w	r3, r3, #1
 800a1c4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a1c6:	f7f9 f8a9 	bl	800331c <HAL_GetTick>
 800a1ca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a1cc:	e009      	b.n	800a1e2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a1ce:	f7f9 f8a5 	bl	800331c <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d902      	bls.n	800a1e2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	f000 bdba 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a1e2:	4b12      	ldr	r3, [pc, #72]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0304 	and.w	r3, r3, #4
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0ef      	beq.n	800a1ce <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a1ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	4a0e      	ldr	r2, [pc, #56]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a1f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a1f8:	6093      	str	r3, [r2, #8]
 800a1fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a206:	4909      	ldr	r1, [pc, #36]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a210:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a214:	d30e      	bcc.n	800a234 <HAL_RCC_OscConfig+0x288>
 800a216:	4b05      	ldr	r3, [pc, #20]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f023 021f 	bic.w	r2, r3, #31
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	4902      	ldr	r1, [pc, #8]	@ (800a22c <HAL_RCC_OscConfig+0x280>)
 800a224:	4313      	orrs	r3, r2
 800a226:	60cb      	str	r3, [r1, #12]
 800a228:	e04a      	b.n	800a2c0 <HAL_RCC_OscConfig+0x314>
 800a22a:	bf00      	nop
 800a22c:	46020c00 	.word	0x46020c00
 800a230:	2000002c 	.word	0x2000002c
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da0a      	bge.n	800a252 <HAL_RCC_OscConfig+0x2a6>
 800a23c:	4b98      	ldr	r3, [pc, #608]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a1b      	ldr	r3, [r3, #32]
 800a248:	015b      	lsls	r3, r3, #5
 800a24a:	4995      	ldr	r1, [pc, #596]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a24c:	4313      	orrs	r3, r2
 800a24e:	60cb      	str	r3, [r1, #12]
 800a250:	e036      	b.n	800a2c0 <HAL_RCC_OscConfig+0x314>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a25a:	d30a      	bcc.n	800a272 <HAL_RCC_OscConfig+0x2c6>
 800a25c:	4b90      	ldr	r3, [pc, #576]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	029b      	lsls	r3, r3, #10
 800a26a:	498d      	ldr	r1, [pc, #564]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a26c:	4313      	orrs	r3, r2
 800a26e:	60cb      	str	r3, [r1, #12]
 800a270:	e026      	b.n	800a2c0 <HAL_RCC_OscConfig+0x314>
 800a272:	4b8b      	ldr	r3, [pc, #556]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	03db      	lsls	r3, r3, #15
 800a280:	4987      	ldr	r1, [pc, #540]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a282:	4313      	orrs	r3, r2
 800a284:	60cb      	str	r3, [r1, #12]
 800a286:	e01b      	b.n	800a2c0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800a288:	4b85      	ldr	r3, [pc, #532]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a84      	ldr	r2, [pc, #528]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a28e:	f023 0301 	bic.w	r3, r3, #1
 800a292:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a294:	f7f9 f842 	bl	800331c <HAL_GetTick>
 800a298:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a29a:	e009      	b.n	800a2b0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a29c:	f7f9 f83e 	bl	800331c <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d902      	bls.n	800a2b0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	f000 bd53 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a2b0:	4b7b      	ldr	r3, [pc, #492]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0304 	and.w	r3, r3, #4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1ef      	bne.n	800a29c <HAL_RCC_OscConfig+0x2f0>
 800a2bc:	e000      	b.n	800a2c0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a2be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 808b 	beq.w	800a3e4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	2b08      	cmp	r3, #8
 800a2d2:	d005      	beq.n	800a2e0 <HAL_RCC_OscConfig+0x334>
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d6:	2b0c      	cmp	r3, #12
 800a2d8:	d109      	bne.n	800a2ee <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	d106      	bne.n	800a2ee <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d17d      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	f000 bd34 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2f6:	d106      	bne.n	800a306 <HAL_RCC_OscConfig+0x35a>
 800a2f8:	4b69      	ldr	r3, [pc, #420]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a68      	ldr	r2, [pc, #416]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a2fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a302:	6013      	str	r3, [r2, #0]
 800a304:	e041      	b.n	800a38a <HAL_RCC_OscConfig+0x3de>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a30e:	d112      	bne.n	800a336 <HAL_RCC_OscConfig+0x38a>
 800a310:	4b63      	ldr	r3, [pc, #396]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a62      	ldr	r2, [pc, #392]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a316:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	4b60      	ldr	r3, [pc, #384]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a5f      	ldr	r2, [pc, #380]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a322:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	4b5d      	ldr	r3, [pc, #372]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a5c      	ldr	r2, [pc, #368]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a32e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a332:	6013      	str	r3, [r2, #0]
 800a334:	e029      	b.n	800a38a <HAL_RCC_OscConfig+0x3de>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a33e:	d112      	bne.n	800a366 <HAL_RCC_OscConfig+0x3ba>
 800a340:	4b57      	ldr	r3, [pc, #348]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a56      	ldr	r2, [pc, #344]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a346:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	4b54      	ldr	r3, [pc, #336]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a53      	ldr	r2, [pc, #332]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	4b51      	ldr	r3, [pc, #324]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a50      	ldr	r2, [pc, #320]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a35e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	e011      	b.n	800a38a <HAL_RCC_OscConfig+0x3de>
 800a366:	4b4e      	ldr	r3, [pc, #312]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a4d      	ldr	r2, [pc, #308]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a36c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a370:	6013      	str	r3, [r2, #0]
 800a372:	4b4b      	ldr	r3, [pc, #300]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a4a      	ldr	r2, [pc, #296]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a378:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	4b48      	ldr	r3, [pc, #288]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a47      	ldr	r2, [pc, #284]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a384:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a388:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d014      	beq.n	800a3bc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800a392:	f7f8 ffc3 	bl	800331c <HAL_GetTick>
 800a396:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a398:	e009      	b.n	800a3ae <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a39a:	f7f8 ffbf 	bl	800331c <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	2b64      	cmp	r3, #100	@ 0x64
 800a3a6:	d902      	bls.n	800a3ae <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	f000 bcd4 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3ae:	4b3c      	ldr	r3, [pc, #240]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0ef      	beq.n	800a39a <HAL_RCC_OscConfig+0x3ee>
 800a3ba:	e013      	b.n	800a3e4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800a3bc:	f7f8 ffae 	bl	800331c <HAL_GetTick>
 800a3c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a3c2:	e009      	b.n	800a3d8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3c4:	f7f8 ffaa 	bl	800331c <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	2b64      	cmp	r3, #100	@ 0x64
 800a3d0:	d902      	bls.n	800a3d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	f000 bcbf 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a3d8:	4b31      	ldr	r3, [pc, #196]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1ef      	bne.n	800a3c4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d05f      	beq.n	800a4b0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f2:	2b04      	cmp	r3, #4
 800a3f4:	d005      	beq.n	800a402 <HAL_RCC_OscConfig+0x456>
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f8:	2b0c      	cmp	r3, #12
 800a3fa:	d114      	bne.n	800a426 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d111      	bne.n	800a426 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d102      	bne.n	800a410 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800a40a:	2301      	movs	r3, #1
 800a40c:	f000 bca3 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a410:	4b23      	ldr	r3, [pc, #140]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	041b      	lsls	r3, r3, #16
 800a41e:	4920      	ldr	r1, [pc, #128]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a420:	4313      	orrs	r3, r2
 800a422:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a424:	e044      	b.n	800a4b0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d024      	beq.n	800a478 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800a42e:	4b1c      	ldr	r3, [pc, #112]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a1b      	ldr	r2, [pc, #108]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a438:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a43a:	f7f8 ff6f 	bl	800331c <HAL_GetTick>
 800a43e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a440:	e009      	b.n	800a456 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a442:	f7f8 ff6b 	bl	800331c <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d902      	bls.n	800a456 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	f000 bc80 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a456:	4b12      	ldr	r3, [pc, #72]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0ef      	beq.n	800a442 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a462:	4b0f      	ldr	r3, [pc, #60]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	041b      	lsls	r3, r3, #16
 800a470:	490b      	ldr	r1, [pc, #44]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a472:	4313      	orrs	r3, r2
 800a474:	610b      	str	r3, [r1, #16]
 800a476:	e01b      	b.n	800a4b0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800a478:	4b09      	ldr	r3, [pc, #36]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a08      	ldr	r2, [pc, #32]	@ (800a4a0 <HAL_RCC_OscConfig+0x4f4>)
 800a47e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a482:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a484:	f7f8 ff4a 	bl	800331c <HAL_GetTick>
 800a488:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a48a:	e00b      	b.n	800a4a4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a48c:	f7f8 ff46 	bl	800331c <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	2b02      	cmp	r3, #2
 800a498:	d904      	bls.n	800a4a4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	f000 bc5b 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
 800a4a0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a4a4:	4baf      	ldr	r3, [pc, #700]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1ed      	bne.n	800a48c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 0308 	and.w	r3, r3, #8
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 80c8 	beq.w	800a64e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4c4:	4ba7      	ldr	r3, [pc, #668]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a4c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4ca:	f003 0304 	and.w	r3, r3, #4
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d111      	bne.n	800a4f6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4d2:	4ba4      	ldr	r3, [pc, #656]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a4d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4d8:	4aa2      	ldr	r2, [pc, #648]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a4da:	f043 0304 	orr.w	r3, r3, #4
 800a4de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a4e2:	4ba0      	ldr	r3, [pc, #640]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a4e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4e8:	f003 0304 	and.w	r3, r3, #4
 800a4ec:	617b      	str	r3, [r7, #20]
 800a4ee:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a4f6:	4b9c      	ldr	r3, [pc, #624]	@ (800a768 <HAL_RCC_OscConfig+0x7bc>)
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d119      	bne.n	800a536 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a502:	4b99      	ldr	r3, [pc, #612]	@ (800a768 <HAL_RCC_OscConfig+0x7bc>)
 800a504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a506:	4a98      	ldr	r2, [pc, #608]	@ (800a768 <HAL_RCC_OscConfig+0x7bc>)
 800a508:	f043 0301 	orr.w	r3, r3, #1
 800a50c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a50e:	f7f8 ff05 	bl	800331c <HAL_GetTick>
 800a512:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a514:	e009      	b.n	800a52a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a516:	f7f8 ff01 	bl	800331c <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	2b02      	cmp	r3, #2
 800a522:	d902      	bls.n	800a52a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	f000 bc16 	b.w	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a52a:	4b8f      	ldr	r3, [pc, #572]	@ (800a768 <HAL_RCC_OscConfig+0x7bc>)
 800a52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0ef      	beq.n	800a516 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d05f      	beq.n	800a5fe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a53e:	4b89      	ldr	r3, [pc, #548]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a544:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	6a3b      	ldr	r3, [r7, #32]
 800a54c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a550:	429a      	cmp	r2, r3
 800a552:	d037      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d006      	beq.n	800a56c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e3f4      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a56c:	6a3b      	ldr	r3, [r7, #32]
 800a56e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d01b      	beq.n	800a5ae <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800a576:	4b7b      	ldr	r3, [pc, #492]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a57c:	4a79      	ldr	r2, [pc, #484]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a57e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a582:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800a586:	f7f8 fec9 	bl	800331c <HAL_GetTick>
 800a58a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a58c:	e008      	b.n	800a5a0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a58e:	f7f8 fec5 	bl	800331c <HAL_GetTick>
 800a592:	4602      	mov	r2, r0
 800a594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	2b05      	cmp	r3, #5
 800a59a:	d901      	bls.n	800a5a0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e3da      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a5a0:	4b70      	ldr	r3, [pc, #448]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a5a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1ef      	bne.n	800a58e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a5ae:	4b6d      	ldr	r3, [pc, #436]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a5b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	4969      	ldr	r1, [pc, #420]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a5c4:	4b67      	ldr	r3, [pc, #412]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a5c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5ca:	4a66      	ldr	r2, [pc, #408]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a5cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a5d4:	f7f8 fea2 	bl	800331c <HAL_GetTick>
 800a5d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a5da:	e008      	b.n	800a5ee <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5dc:	f7f8 fe9e 	bl	800331c <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	2b05      	cmp	r3, #5
 800a5e8:	d901      	bls.n	800a5ee <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e3b3      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a5ee:	4b5d      	ldr	r3, [pc, #372]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a5f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0ef      	beq.n	800a5dc <HAL_RCC_OscConfig+0x630>
 800a5fc:	e01b      	b.n	800a636 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a5fe:	4b59      	ldr	r3, [pc, #356]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a604:	4a57      	ldr	r2, [pc, #348]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a606:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a60a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a60e:	f7f8 fe85 	bl	800331c <HAL_GetTick>
 800a612:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a614:	e008      	b.n	800a628 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a616:	f7f8 fe81 	bl	800331c <HAL_GetTick>
 800a61a:	4602      	mov	r2, r0
 800a61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	2b05      	cmp	r3, #5
 800a622:	d901      	bls.n	800a628 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800a624:	2303      	movs	r3, #3
 800a626:	e396      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a628:	4b4e      	ldr	r3, [pc, #312]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a62a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a62e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1ef      	bne.n	800a616 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a636:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d107      	bne.n	800a64e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a63e:	4b49      	ldr	r3, [pc, #292]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a644:	4a47      	ldr	r2, [pc, #284]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a646:	f023 0304 	bic.w	r3, r3, #4
 800a64a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	f000 8111 	beq.w	800a87e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a65c:	2300      	movs	r3, #0
 800a65e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a662:	4b40      	ldr	r3, [pc, #256]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a668:	f003 0304 	and.w	r3, r3, #4
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d111      	bne.n	800a694 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a670:	4b3c      	ldr	r3, [pc, #240]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a676:	4a3b      	ldr	r2, [pc, #236]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a678:	f043 0304 	orr.w	r3, r3, #4
 800a67c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a680:	4b38      	ldr	r3, [pc, #224]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a686:	f003 0304 	and.w	r3, r3, #4
 800a68a:	613b      	str	r3, [r7, #16]
 800a68c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a68e:	2301      	movs	r3, #1
 800a690:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a694:	4b34      	ldr	r3, [pc, #208]	@ (800a768 <HAL_RCC_OscConfig+0x7bc>)
 800a696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a698:	f003 0301 	and.w	r3, r3, #1
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d118      	bne.n	800a6d2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a6a0:	4b31      	ldr	r3, [pc, #196]	@ (800a768 <HAL_RCC_OscConfig+0x7bc>)
 800a6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a4:	4a30      	ldr	r2, [pc, #192]	@ (800a768 <HAL_RCC_OscConfig+0x7bc>)
 800a6a6:	f043 0301 	orr.w	r3, r3, #1
 800a6aa:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6ac:	f7f8 fe36 	bl	800331c <HAL_GetTick>
 800a6b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a6b2:	e008      	b.n	800a6c6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6b4:	f7f8 fe32 	bl	800331c <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d901      	bls.n	800a6c6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	e347      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a6c6:	4b28      	ldr	r3, [pc, #160]	@ (800a768 <HAL_RCC_OscConfig+0x7bc>)
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0f0      	beq.n	800a6b4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01f      	beq.n	800a71e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f003 0304 	and.w	r3, r3, #4
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d010      	beq.n	800a70c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a6ea:	4b1e      	ldr	r3, [pc, #120]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a6ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6f0:	4a1c      	ldr	r2, [pc, #112]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a6f2:	f043 0304 	orr.w	r3, r3, #4
 800a6f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a6fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a6fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a700:	4a18      	ldr	r2, [pc, #96]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a702:	f043 0301 	orr.w	r3, r3, #1
 800a706:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a70a:	e018      	b.n	800a73e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a70c:	4b15      	ldr	r3, [pc, #84]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a70e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a712:	4a14      	ldr	r2, [pc, #80]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a714:	f043 0301 	orr.w	r3, r3, #1
 800a718:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a71c:	e00f      	b.n	800a73e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a71e:	4b11      	ldr	r3, [pc, #68]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a724:	4a0f      	ldr	r2, [pc, #60]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a726:	f023 0301 	bic.w	r3, r3, #1
 800a72a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a72e:	4b0d      	ldr	r3, [pc, #52]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a734:	4a0b      	ldr	r2, [pc, #44]	@ (800a764 <HAL_RCC_OscConfig+0x7b8>)
 800a736:	f023 0304 	bic.w	r3, r3, #4
 800a73a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d057      	beq.n	800a7f6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a746:	f7f8 fde9 	bl	800331c <HAL_GetTick>
 800a74a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a74c:	e00e      	b.n	800a76c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a74e:	f7f8 fde5 	bl	800331c <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d905      	bls.n	800a76c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e2f8      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
 800a764:	46020c00 	.word	0x46020c00
 800a768:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a76c:	4b9c      	ldr	r3, [pc, #624]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a76e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a772:	f003 0302 	and.w	r3, r3, #2
 800a776:	2b00      	cmp	r3, #0
 800a778:	d0e9      	beq.n	800a74e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a782:	2b00      	cmp	r3, #0
 800a784:	d01b      	beq.n	800a7be <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a786:	4b96      	ldr	r3, [pc, #600]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a78c:	4a94      	ldr	r2, [pc, #592]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a78e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a792:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a796:	e00a      	b.n	800a7ae <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a798:	f7f8 fdc0 	bl	800331c <HAL_GetTick>
 800a79c:	4602      	mov	r2, r0
 800a79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d901      	bls.n	800a7ae <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e2d3      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a7ae:	4b8c      	ldr	r3, [pc, #560]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a7b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d0ed      	beq.n	800a798 <HAL_RCC_OscConfig+0x7ec>
 800a7bc:	e053      	b.n	800a866 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a7be:	4b88      	ldr	r3, [pc, #544]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a7c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7c4:	4a86      	ldr	r2, [pc, #536]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a7c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a7ce:	e00a      	b.n	800a7e6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7d0:	f7f8 fda4 	bl	800331c <HAL_GetTick>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d901      	bls.n	800a7e6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e2b7      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a7e6:	4b7e      	ldr	r3, [pc, #504]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a7e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1ed      	bne.n	800a7d0 <HAL_RCC_OscConfig+0x824>
 800a7f4:	e037      	b.n	800a866 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a7f6:	f7f8 fd91 	bl	800331c <HAL_GetTick>
 800a7fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a7fc:	e00a      	b.n	800a814 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7fe:	f7f8 fd8d 	bl	800331c <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d901      	bls.n	800a814 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a810:	2303      	movs	r3, #3
 800a812:	e2a0      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a814:	4b72      	ldr	r3, [pc, #456]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1ed      	bne.n	800a7fe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a822:	4b6f      	ldr	r3, [pc, #444]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d01a      	beq.n	800a866 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a830:	4b6b      	ldr	r3, [pc, #428]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a836:	4a6a      	ldr	r2, [pc, #424]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a838:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a83c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a840:	e00a      	b.n	800a858 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a842:	f7f8 fd6b 	bl	800331c <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a850:	4293      	cmp	r3, r2
 800a852:	d901      	bls.n	800a858 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e27e      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a858:	4b61      	ldr	r3, [pc, #388]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a85a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a85e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1ed      	bne.n	800a842 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a866:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d107      	bne.n	800a87e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a86e:	4b5c      	ldr	r3, [pc, #368]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a874:	4a5a      	ldr	r2, [pc, #360]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a876:	f023 0304 	bic.w	r3, r3, #4
 800a87a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0320 	and.w	r3, r3, #32
 800a886:	2b00      	cmp	r3, #0
 800a888:	d036      	beq.n	800a8f8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d019      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a892:	4b53      	ldr	r3, [pc, #332]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a52      	ldr	r2, [pc, #328]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a898:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a89c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a89e:	f7f8 fd3d 	bl	800331c <HAL_GetTick>
 800a8a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a8a4:	e008      	b.n	800a8b8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8a6:	f7f8 fd39 	bl	800331c <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d901      	bls.n	800a8b8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e24e      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a8b8:	4b49      	ldr	r3, [pc, #292]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0f0      	beq.n	800a8a6 <HAL_RCC_OscConfig+0x8fa>
 800a8c4:	e018      	b.n	800a8f8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a8c6:	4b46      	ldr	r3, [pc, #280]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a45      	ldr	r2, [pc, #276]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a8cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8d0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a8d2:	f7f8 fd23 	bl	800331c <HAL_GetTick>
 800a8d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a8d8:	e008      	b.n	800a8ec <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8da:	f7f8 fd1f 	bl	800331c <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d901      	bls.n	800a8ec <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e234      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a8ec:	4b3c      	ldr	r3, [pc, #240]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1f0      	bne.n	800a8da <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a900:	2b00      	cmp	r3, #0
 800a902:	d036      	beq.n	800a972 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d019      	beq.n	800a940 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a90c:	4b34      	ldr	r3, [pc, #208]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a33      	ldr	r2, [pc, #204]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a916:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a918:	f7f8 fd00 	bl	800331c <HAL_GetTick>
 800a91c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a91e:	e008      	b.n	800a932 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a920:	f7f8 fcfc 	bl	800331c <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d901      	bls.n	800a932 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e211      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a932:	4b2b      	ldr	r3, [pc, #172]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0f0      	beq.n	800a920 <HAL_RCC_OscConfig+0x974>
 800a93e:	e018      	b.n	800a972 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a940:	4b27      	ldr	r3, [pc, #156]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a26      	ldr	r2, [pc, #152]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a946:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a94a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a94c:	f7f8 fce6 	bl	800331c <HAL_GetTick>
 800a950:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a952:	e008      	b.n	800a966 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a954:	f7f8 fce2 	bl	800331c <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d901      	bls.n	800a966 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e1f7      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a966:	4b1e      	ldr	r3, [pc, #120]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1f0      	bne.n	800a954 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d07f      	beq.n	800aa7e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a982:	2b00      	cmp	r3, #0
 800a984:	d062      	beq.n	800aa4c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a986:	4b16      	ldr	r3, [pc, #88]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	4a15      	ldr	r2, [pc, #84]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a98c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a990:	6093      	str	r3, [r2, #8]
 800a992:	4b13      	ldr	r3, [pc, #76]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a99e:	4910      	ldr	r1, [pc, #64]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a9ac:	d309      	bcc.n	800a9c2 <HAL_RCC_OscConfig+0xa16>
 800a9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	f023 021f 	bic.w	r2, r3, #31
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	4909      	ldr	r1, [pc, #36]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	60cb      	str	r3, [r1, #12]
 800a9c0:	e02a      	b.n	800aa18 <HAL_RCC_OscConfig+0xa6c>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	da0c      	bge.n	800a9e4 <HAL_RCC_OscConfig+0xa38>
 800a9ca:	4b05      	ldr	r3, [pc, #20]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	015b      	lsls	r3, r3, #5
 800a9d8:	4901      	ldr	r1, [pc, #4]	@ (800a9e0 <HAL_RCC_OscConfig+0xa34>)
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	60cb      	str	r3, [r1, #12]
 800a9de:	e01b      	b.n	800aa18 <HAL_RCC_OscConfig+0xa6c>
 800a9e0:	46020c00 	.word	0x46020c00
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ec:	d30a      	bcc.n	800aa04 <HAL_RCC_OscConfig+0xa58>
 800a9ee:	4ba1      	ldr	r3, [pc, #644]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	029b      	lsls	r3, r3, #10
 800a9fc:	499d      	ldr	r1, [pc, #628]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	60cb      	str	r3, [r1, #12]
 800aa02:	e009      	b.n	800aa18 <HAL_RCC_OscConfig+0xa6c>
 800aa04:	4b9b      	ldr	r3, [pc, #620]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	03db      	lsls	r3, r3, #15
 800aa12:	4998      	ldr	r1, [pc, #608]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aa14:	4313      	orrs	r3, r2
 800aa16:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800aa18:	4b96      	ldr	r3, [pc, #600]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a95      	ldr	r2, [pc, #596]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aa1e:	f043 0310 	orr.w	r3, r3, #16
 800aa22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800aa24:	f7f8 fc7a 	bl	800331c <HAL_GetTick>
 800aa28:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800aa2a:	e008      	b.n	800aa3e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800aa2c:	f7f8 fc76 	bl	800331c <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e18b      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800aa3e:	4b8d      	ldr	r3, [pc, #564]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 0320 	and.w	r3, r3, #32
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d0f0      	beq.n	800aa2c <HAL_RCC_OscConfig+0xa80>
 800aa4a:	e018      	b.n	800aa7e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800aa4c:	4b89      	ldr	r3, [pc, #548]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a88      	ldr	r2, [pc, #544]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aa52:	f023 0310 	bic.w	r3, r3, #16
 800aa56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800aa58:	f7f8 fc60 	bl	800331c <HAL_GetTick>
 800aa5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800aa5e:	e008      	b.n	800aa72 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800aa60:	f7f8 fc5c 	bl	800331c <HAL_GetTick>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d901      	bls.n	800aa72 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e171      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800aa72:	4b80      	ldr	r3, [pc, #512]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0320 	and.w	r3, r3, #32
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1f0      	bne.n	800aa60 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f000 8166 	beq.w	800ad54 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa8e:	4b79      	ldr	r3, [pc, #484]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	f003 030c 	and.w	r3, r3, #12
 800aa96:	2b0c      	cmp	r3, #12
 800aa98:	f000 80f2 	beq.w	800ac80 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	f040 80c5 	bne.w	800ac30 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800aaa6:	4b73      	ldr	r3, [pc, #460]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a72      	ldr	r2, [pc, #456]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aaac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aab0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aab2:	f7f8 fc33 	bl	800331c <HAL_GetTick>
 800aab6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800aab8:	e008      	b.n	800aacc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aaba:	f7f8 fc2f 	bl	800331c <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d901      	bls.n	800aacc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e144      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800aacc:	4b69      	ldr	r3, [pc, #420]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1f0      	bne.n	800aaba <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aad8:	4b66      	ldr	r3, [pc, #408]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aade:	f003 0304 	and.w	r3, r3, #4
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d111      	bne.n	800ab0a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800aae6:	4b63      	ldr	r3, [pc, #396]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaec:	4a61      	ldr	r2, [pc, #388]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aaee:	f043 0304 	orr.w	r3, r3, #4
 800aaf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800aaf6:	4b5f      	ldr	r3, [pc, #380]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aaf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	60fb      	str	r3, [r7, #12]
 800ab02:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800ab04:	2301      	movs	r3, #1
 800ab06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800ab0a:	4b5b      	ldr	r3, [pc, #364]	@ (800ac78 <HAL_RCC_OscConfig+0xccc>)
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab16:	d102      	bne.n	800ab1e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800ab1e:	4b56      	ldr	r3, [pc, #344]	@ (800ac78 <HAL_RCC_OscConfig+0xccc>)
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	4a55      	ldr	r2, [pc, #340]	@ (800ac78 <HAL_RCC_OscConfig+0xccc>)
 800ab24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab28:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800ab2a:	4b52      	ldr	r3, [pc, #328]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab32:	f023 0303 	bic.w	r3, r3, #3
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ab3e:	3a01      	subs	r2, #1
 800ab40:	0212      	lsls	r2, r2, #8
 800ab42:	4311      	orrs	r1, r2
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ab48:	430a      	orrs	r2, r1
 800ab4a:	494a      	ldr	r1, [pc, #296]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	628b      	str	r3, [r1, #40]	@ 0x28
 800ab50:	4b48      	ldr	r3, [pc, #288]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ab52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab54:	4b49      	ldr	r3, [pc, #292]	@ (800ac7c <HAL_RCC_OscConfig+0xcd0>)
 800ab56:	4013      	ands	r3, r2
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ab5c:	3a01      	subs	r2, #1
 800ab5e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ab66:	3a01      	subs	r2, #1
 800ab68:	0252      	lsls	r2, r2, #9
 800ab6a:	b292      	uxth	r2, r2
 800ab6c:	4311      	orrs	r1, r2
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ab72:	3a01      	subs	r2, #1
 800ab74:	0412      	lsls	r2, r2, #16
 800ab76:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ab7a:	4311      	orrs	r1, r2
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ab80:	3a01      	subs	r2, #1
 800ab82:	0612      	lsls	r2, r2, #24
 800ab84:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	493a      	ldr	r1, [pc, #232]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800ab90:	4b38      	ldr	r3, [pc, #224]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ab92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab94:	4a37      	ldr	r2, [pc, #220]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ab96:	f023 0310 	bic.w	r3, r3, #16
 800ab9a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aba0:	4a34      	ldr	r2, [pc, #208]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aba2:	00db      	lsls	r3, r3, #3
 800aba4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800aba6:	4b33      	ldr	r3, [pc, #204]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800aba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abaa:	4a32      	ldr	r2, [pc, #200]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800abac:	f043 0310 	orr.w	r3, r3, #16
 800abb0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800abb2:	4b30      	ldr	r3, [pc, #192]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800abb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb6:	f023 020c 	bic.w	r2, r3, #12
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abbe:	492d      	ldr	r1, [pc, #180]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800abc0:	4313      	orrs	r3, r2
 800abc2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800abc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d105      	bne.n	800abd8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800abcc:	4b2a      	ldr	r3, [pc, #168]	@ (800ac78 <HAL_RCC_OscConfig+0xccc>)
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	4a29      	ldr	r2, [pc, #164]	@ (800ac78 <HAL_RCC_OscConfig+0xccc>)
 800abd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800abd6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800abd8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d107      	bne.n	800abf0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800abe0:	4b24      	ldr	r3, [pc, #144]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800abe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abe6:	4a23      	ldr	r2, [pc, #140]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800abe8:	f023 0304 	bic.w	r3, r3, #4
 800abec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800abf0:	4b20      	ldr	r3, [pc, #128]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a1f      	ldr	r2, [pc, #124]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800abf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800abfa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800abfc:	f7f8 fb8e 	bl	800331c <HAL_GetTick>
 800ac00:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ac02:	e008      	b.n	800ac16 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac04:	f7f8 fb8a 	bl	800331c <HAL_GetTick>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d901      	bls.n	800ac16 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e09f      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ac16:	4b17      	ldr	r3, [pc, #92]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0f0      	beq.n	800ac04 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ac22:	4b14      	ldr	r3, [pc, #80]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ac24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac26:	4a13      	ldr	r2, [pc, #76]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ac28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ac2c:	6293      	str	r3, [r2, #40]	@ 0x28
 800ac2e:	e091      	b.n	800ad54 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800ac30:	4b10      	ldr	r3, [pc, #64]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a0f      	ldr	r2, [pc, #60]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ac36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ac3c:	f7f8 fb6e 	bl	800331c <HAL_GetTick>
 800ac40:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ac42:	e008      	b.n	800ac56 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac44:	f7f8 fb6a 	bl	800331c <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d901      	bls.n	800ac56 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e07f      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ac56:	4b07      	ldr	r3, [pc, #28]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1f0      	bne.n	800ac44 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800ac62:	4b04      	ldr	r3, [pc, #16]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ac64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac66:	4a03      	ldr	r2, [pc, #12]	@ (800ac74 <HAL_RCC_OscConfig+0xcc8>)
 800ac68:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800ac6c:	f023 0303 	bic.w	r3, r3, #3
 800ac70:	6293      	str	r3, [r2, #40]	@ 0x28
 800ac72:	e06f      	b.n	800ad54 <HAL_RCC_OscConfig+0xda8>
 800ac74:	46020c00 	.word	0x46020c00
 800ac78:	46020800 	.word	0x46020800
 800ac7c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800ac80:	4b37      	ldr	r3, [pc, #220]	@ (800ad60 <HAL_RCC_OscConfig+0xdb4>)
 800ac82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac84:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ac86:	4b36      	ldr	r3, [pc, #216]	@ (800ad60 <HAL_RCC_OscConfig+0xdb4>)
 800ac88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d039      	beq.n	800ad08 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	f003 0203 	and.w	r2, r3, #3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d132      	bne.n	800ad08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	0a1b      	lsrs	r3, r3, #8
 800aca6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acae:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d129      	bne.n	800ad08 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d122      	bne.n	800ad08 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800accc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800acce:	429a      	cmp	r2, r3
 800acd0:	d11a      	bne.n	800ad08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	0a5b      	lsrs	r3, r3, #9
 800acd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acde:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d111      	bne.n	800ad08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	0c1b      	lsrs	r3, r3, #16
 800ace8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acf0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d108      	bne.n	800ad08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	0e1b      	lsrs	r3, r3, #24
 800acfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad02:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d001      	beq.n	800ad0c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e024      	b.n	800ad56 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800ad0c:	4b14      	ldr	r3, [pc, #80]	@ (800ad60 <HAL_RCC_OscConfig+0xdb4>)
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad10:	08db      	lsrs	r3, r3, #3
 800ad12:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d01a      	beq.n	800ad54 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800ad1e:	4b10      	ldr	r3, [pc, #64]	@ (800ad60 <HAL_RCC_OscConfig+0xdb4>)
 800ad20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad22:	4a0f      	ldr	r2, [pc, #60]	@ (800ad60 <HAL_RCC_OscConfig+0xdb4>)
 800ad24:	f023 0310 	bic.w	r3, r3, #16
 800ad28:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad2a:	f7f8 faf7 	bl	800331c <HAL_GetTick>
 800ad2e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800ad30:	bf00      	nop
 800ad32:	f7f8 faf3 	bl	800331c <HAL_GetTick>
 800ad36:	4602      	mov	r2, r0
 800ad38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d0f9      	beq.n	800ad32 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad42:	4a07      	ldr	r2, [pc, #28]	@ (800ad60 <HAL_RCC_OscConfig+0xdb4>)
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800ad48:	4b05      	ldr	r3, [pc, #20]	@ (800ad60 <HAL_RCC_OscConfig+0xdb4>)
 800ad4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4c:	4a04      	ldr	r2, [pc, #16]	@ (800ad60 <HAL_RCC_OscConfig+0xdb4>)
 800ad4e:	f043 0310 	orr.w	r3, r3, #16
 800ad52:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3738      	adds	r7, #56	@ 0x38
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	46020c00 	.word	0x46020c00

0800ad64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e1d9      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad78:	4b9b      	ldr	r3, [pc, #620]	@ (800afe8 <HAL_RCC_ClockConfig+0x284>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d910      	bls.n	800ada8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad86:	4b98      	ldr	r3, [pc, #608]	@ (800afe8 <HAL_RCC_ClockConfig+0x284>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f023 020f 	bic.w	r2, r3, #15
 800ad8e:	4996      	ldr	r1, [pc, #600]	@ (800afe8 <HAL_RCC_ClockConfig+0x284>)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad96:	4b94      	ldr	r3, [pc, #592]	@ (800afe8 <HAL_RCC_ClockConfig+0x284>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 030f 	and.w	r3, r3, #15
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d001      	beq.n	800ada8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e1c1      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0310 	and.w	r3, r3, #16
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d010      	beq.n	800add6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	695a      	ldr	r2, [r3, #20]
 800adb8:	4b8c      	ldr	r3, [pc, #560]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800adba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d908      	bls.n	800add6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800adc4:	4b89      	ldr	r3, [pc, #548]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800adc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	4986      	ldr	r1, [pc, #536]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800add2:	4313      	orrs	r3, r2
 800add4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 0308 	and.w	r3, r3, #8
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d012      	beq.n	800ae08 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	691a      	ldr	r2, [r3, #16]
 800ade6:	4b81      	ldr	r3, [pc, #516]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	091b      	lsrs	r3, r3, #4
 800adec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d909      	bls.n	800ae08 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800adf4:	4b7d      	ldr	r3, [pc, #500]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	011b      	lsls	r3, r3, #4
 800ae02:	497a      	ldr	r1, [pc, #488]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae04:	4313      	orrs	r3, r2
 800ae06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d010      	beq.n	800ae36 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68da      	ldr	r2, [r3, #12]
 800ae18:	4b74      	ldr	r3, [pc, #464]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d908      	bls.n	800ae36 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800ae24:	4b71      	ldr	r3, [pc, #452]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	496e      	ldr	r1, [pc, #440]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae32:	4313      	orrs	r3, r2
 800ae34:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 0302 	and.w	r3, r3, #2
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d010      	beq.n	800ae64 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689a      	ldr	r2, [r3, #8]
 800ae46:	4b69      	ldr	r3, [pc, #420]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	f003 030f 	and.w	r3, r3, #15
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d908      	bls.n	800ae64 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800ae52:	4b66      	ldr	r3, [pc, #408]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	f023 020f 	bic.w	r2, r3, #15
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	4963      	ldr	r1, [pc, #396]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 80d2 	beq.w	800b016 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d143      	bne.n	800af06 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae7e:	4b5b      	ldr	r3, [pc, #364]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae84:	f003 0304 	and.w	r3, r3, #4
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d110      	bne.n	800aeae <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800ae8c:	4b57      	ldr	r3, [pc, #348]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae92:	4a56      	ldr	r2, [pc, #344]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae94:	f043 0304 	orr.w	r3, r3, #4
 800ae98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ae9c:	4b53      	ldr	r3, [pc, #332]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800ae9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aea2:	f003 0304 	and.w	r3, r3, #4
 800aea6:	60bb      	str	r3, [r7, #8]
 800aea8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800aeae:	f7f8 fa35 	bl	800331c <HAL_GetTick>
 800aeb2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800aeb4:	4b4e      	ldr	r3, [pc, #312]	@ (800aff0 <HAL_RCC_ClockConfig+0x28c>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00f      	beq.n	800aee0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800aec0:	e008      	b.n	800aed4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800aec2:	f7f8 fa2b 	bl	800331c <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d901      	bls.n	800aed4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e12b      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800aed4:	4b46      	ldr	r3, [pc, #280]	@ (800aff0 <HAL_RCC_ClockConfig+0x28c>)
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d0f0      	beq.n	800aec2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800aee0:	7dfb      	ldrb	r3, [r7, #23]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d107      	bne.n	800aef6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800aee6:	4b41      	ldr	r3, [pc, #260]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800aee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aeec:	4a3f      	ldr	r2, [pc, #252]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800aeee:	f023 0304 	bic.w	r3, r3, #4
 800aef2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800aef6:	4b3d      	ldr	r3, [pc, #244]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d121      	bne.n	800af46 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e112      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d107      	bne.n	800af1e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af0e:	4b37      	ldr	r3, [pc, #220]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af16:	2b00      	cmp	r3, #0
 800af18:	d115      	bne.n	800af46 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	e106      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d107      	bne.n	800af36 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800af26:	4b31      	ldr	r3, [pc, #196]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 0304 	and.w	r3, r3, #4
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d109      	bne.n	800af46 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e0fa      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800af36:	4b2d      	ldr	r3, [pc, #180]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d101      	bne.n	800af46 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e0f2      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800af46:	4b29      	ldr	r3, [pc, #164]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800af48:	69db      	ldr	r3, [r3, #28]
 800af4a:	f023 0203 	bic.w	r2, r3, #3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	4926      	ldr	r1, [pc, #152]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800af54:	4313      	orrs	r3, r2
 800af56:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800af58:	f7f8 f9e0 	bl	800331c <HAL_GetTick>
 800af5c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	2b03      	cmp	r3, #3
 800af64:	d112      	bne.n	800af8c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800af66:	e00a      	b.n	800af7e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af68:	f7f8 f9d8 	bl	800331c <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af76:	4293      	cmp	r3, r2
 800af78:	d901      	bls.n	800af7e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e0d6      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800af7e:	4b1b      	ldr	r3, [pc, #108]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	f003 030c 	and.w	r3, r3, #12
 800af86:	2b0c      	cmp	r3, #12
 800af88:	d1ee      	bne.n	800af68 <HAL_RCC_ClockConfig+0x204>
 800af8a:	e044      	b.n	800b016 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	2b02      	cmp	r3, #2
 800af92:	d112      	bne.n	800afba <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800af94:	e00a      	b.n	800afac <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af96:	f7f8 f9c1 	bl	800331c <HAL_GetTick>
 800af9a:	4602      	mov	r2, r0
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d901      	bls.n	800afac <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e0bf      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800afac:	4b0f      	ldr	r3, [pc, #60]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	f003 030c 	and.w	r3, r3, #12
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	d1ee      	bne.n	800af96 <HAL_RCC_ClockConfig+0x232>
 800afb8:	e02d      	b.n	800b016 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d123      	bne.n	800b00a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800afc2:	e00a      	b.n	800afda <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afc4:	f7f8 f9aa 	bl	800331c <HAL_GetTick>
 800afc8:	4602      	mov	r2, r0
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d901      	bls.n	800afda <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800afd6:	2303      	movs	r3, #3
 800afd8:	e0a8      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800afda:	4b04      	ldr	r3, [pc, #16]	@ (800afec <HAL_RCC_ClockConfig+0x288>)
 800afdc:	69db      	ldr	r3, [r3, #28]
 800afde:	f003 030c 	and.w	r3, r3, #12
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1ee      	bne.n	800afc4 <HAL_RCC_ClockConfig+0x260>
 800afe6:	e016      	b.n	800b016 <HAL_RCC_ClockConfig+0x2b2>
 800afe8:	40022000 	.word	0x40022000
 800afec:	46020c00 	.word	0x46020c00
 800aff0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aff4:	f7f8 f992 	bl	800331c <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b002:	4293      	cmp	r3, r2
 800b004:	d901      	bls.n	800b00a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	e090      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b00a:	4b4a      	ldr	r3, [pc, #296]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	f003 030c 	and.w	r3, r3, #12
 800b012:	2b04      	cmp	r3, #4
 800b014:	d1ee      	bne.n	800aff4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 0302 	and.w	r3, r3, #2
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d010      	beq.n	800b044 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	689a      	ldr	r2, [r3, #8]
 800b026:	4b43      	ldr	r3, [pc, #268]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b028:	6a1b      	ldr	r3, [r3, #32]
 800b02a:	f003 030f 	and.w	r3, r3, #15
 800b02e:	429a      	cmp	r2, r3
 800b030:	d208      	bcs.n	800b044 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b032:	4b40      	ldr	r3, [pc, #256]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	f023 020f 	bic.w	r2, r3, #15
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	493d      	ldr	r1, [pc, #244]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b040:	4313      	orrs	r3, r2
 800b042:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b044:	4b3c      	ldr	r3, [pc, #240]	@ (800b138 <HAL_RCC_ClockConfig+0x3d4>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 030f 	and.w	r3, r3, #15
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d210      	bcs.n	800b074 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b052:	4b39      	ldr	r3, [pc, #228]	@ (800b138 <HAL_RCC_ClockConfig+0x3d4>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f023 020f 	bic.w	r2, r3, #15
 800b05a:	4937      	ldr	r1, [pc, #220]	@ (800b138 <HAL_RCC_ClockConfig+0x3d4>)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	4313      	orrs	r3, r2
 800b060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b062:	4b35      	ldr	r3, [pc, #212]	@ (800b138 <HAL_RCC_ClockConfig+0x3d4>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 030f 	and.w	r3, r3, #15
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d001      	beq.n	800b074 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e05b      	b.n	800b12c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0304 	and.w	r3, r3, #4
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d010      	beq.n	800b0a2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	4b2b      	ldr	r3, [pc, #172]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d208      	bcs.n	800b0a2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b090:	4b28      	ldr	r3, [pc, #160]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b092:	6a1b      	ldr	r3, [r3, #32]
 800b094:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	4925      	ldr	r1, [pc, #148]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0308 	and.w	r3, r3, #8
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d012      	beq.n	800b0d4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	691a      	ldr	r2, [r3, #16]
 800b0b2:	4b20      	ldr	r3, [pc, #128]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	091b      	lsrs	r3, r3, #4
 800b0b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d209      	bcs.n	800b0d4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b0c0:	4b1c      	ldr	r3, [pc, #112]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b0c2:	6a1b      	ldr	r3, [r3, #32]
 800b0c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	011b      	lsls	r3, r3, #4
 800b0ce:	4919      	ldr	r1, [pc, #100]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 0310 	and.w	r3, r3, #16
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d010      	beq.n	800b102 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	695a      	ldr	r2, [r3, #20]
 800b0e4:	4b13      	ldr	r3, [pc, #76]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d208      	bcs.n	800b102 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800b0f0:	4b10      	ldr	r3, [pc, #64]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	490d      	ldr	r1, [pc, #52]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b102:	f000 f821 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800b106:	4602      	mov	r2, r0
 800b108:	4b0a      	ldr	r3, [pc, #40]	@ (800b134 <HAL_RCC_ClockConfig+0x3d0>)
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	f003 030f 	and.w	r3, r3, #15
 800b110:	490a      	ldr	r1, [pc, #40]	@ (800b13c <HAL_RCC_ClockConfig+0x3d8>)
 800b112:	5ccb      	ldrb	r3, [r1, r3]
 800b114:	fa22 f303 	lsr.w	r3, r2, r3
 800b118:	4a09      	ldr	r2, [pc, #36]	@ (800b140 <HAL_RCC_ClockConfig+0x3dc>)
 800b11a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b11c:	4b09      	ldr	r3, [pc, #36]	@ (800b144 <HAL_RCC_ClockConfig+0x3e0>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4618      	mov	r0, r3
 800b122:	f7f7 ff3b 	bl	8002f9c <HAL_InitTick>
 800b126:	4603      	mov	r3, r0
 800b128:	73fb      	strb	r3, [r7, #15]

  return status;
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	46020c00 	.word	0x46020c00
 800b138:	40022000 	.word	0x40022000
 800b13c:	08012724 	.word	0x08012724
 800b140:	20000028 	.word	0x20000028
 800b144:	2000002c 	.word	0x2000002c

0800b148 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b148:	b480      	push	{r7}
 800b14a:	b08b      	sub	sp, #44	@ 0x2c
 800b14c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b14e:	2300      	movs	r3, #0
 800b150:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800b152:	2300      	movs	r3, #0
 800b154:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b156:	4b78      	ldr	r3, [pc, #480]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b158:	69db      	ldr	r3, [r3, #28]
 800b15a:	f003 030c 	and.w	r3, r3, #12
 800b15e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b160:	4b75      	ldr	r3, [pc, #468]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b164:	f003 0303 	and.w	r3, r3, #3
 800b168:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d005      	beq.n	800b17c <HAL_RCC_GetSysClockFreq+0x34>
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	2b0c      	cmp	r3, #12
 800b174:	d121      	bne.n	800b1ba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d11e      	bne.n	800b1ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800b17c:	4b6e      	ldr	r3, [pc, #440]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d107      	bne.n	800b198 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800b188:	4b6b      	ldr	r3, [pc, #428]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b18a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b18e:	0b1b      	lsrs	r3, r3, #12
 800b190:	f003 030f 	and.w	r3, r3, #15
 800b194:	627b      	str	r3, [r7, #36]	@ 0x24
 800b196:	e005      	b.n	800b1a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800b198:	4b67      	ldr	r3, [pc, #412]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	0f1b      	lsrs	r3, r3, #28
 800b19e:	f003 030f 	and.w	r3, r3, #15
 800b1a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b1a4:	4a65      	ldr	r2, [pc, #404]	@ (800b33c <HAL_RCC_GetSysClockFreq+0x1f4>)
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1ac:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d110      	bne.n	800b1d6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b1b8:	e00d      	b.n	800b1d6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b1ba:	4b5f      	ldr	r3, [pc, #380]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b1bc:	69db      	ldr	r3, [r3, #28]
 800b1be:	f003 030c 	and.w	r3, r3, #12
 800b1c2:	2b04      	cmp	r3, #4
 800b1c4:	d102      	bne.n	800b1cc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b1c6:	4b5e      	ldr	r3, [pc, #376]	@ (800b340 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b1c8:	623b      	str	r3, [r7, #32]
 800b1ca:	e004      	b.n	800b1d6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	2b08      	cmp	r3, #8
 800b1d0:	d101      	bne.n	800b1d6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b1d2:	4b5b      	ldr	r3, [pc, #364]	@ (800b340 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b1d4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	2b0c      	cmp	r3, #12
 800b1da:	f040 80a5 	bne.w	800b328 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b1de:	4b56      	ldr	r3, [pc, #344]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e2:	f003 0303 	and.w	r3, r3, #3
 800b1e6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b1e8:	4b53      	ldr	r3, [pc, #332]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ec:	0a1b      	lsrs	r3, r3, #8
 800b1ee:	f003 030f 	and.w	r3, r3, #15
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b1f6:	4b50      	ldr	r3, [pc, #320]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fa:	091b      	lsrs	r3, r3, #4
 800b1fc:	f003 0301 	and.w	r3, r3, #1
 800b200:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b202:	4b4d      	ldr	r3, [pc, #308]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b206:	08db      	lsrs	r3, r3, #3
 800b208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	fb02 f303 	mul.w	r3, r2, r3
 800b212:	ee07 3a90 	vmov	s15, r3
 800b216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	2b02      	cmp	r3, #2
 800b222:	d003      	beq.n	800b22c <HAL_RCC_GetSysClockFreq+0xe4>
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	2b03      	cmp	r3, #3
 800b228:	d022      	beq.n	800b270 <HAL_RCC_GetSysClockFreq+0x128>
 800b22a:	e043      	b.n	800b2b4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	ee07 3a90 	vmov	s15, r3
 800b232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b236:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800b344 <HAL_RCC_GetSysClockFreq+0x1fc>
 800b23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23e:	4b3e      	ldr	r3, [pc, #248]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b246:	ee07 3a90 	vmov	s15, r3
 800b24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b24e:	ed97 6a01 	vldr	s12, [r7, #4]
 800b252:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800b348 <HAL_RCC_GetSysClockFreq+0x200>
 800b256:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b25e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b262:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b26a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b26e:	e046      	b.n	800b2fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	ee07 3a90 	vmov	s15, r3
 800b276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b27a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800b344 <HAL_RCC_GetSysClockFreq+0x1fc>
 800b27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b282:	4b2d      	ldr	r3, [pc, #180]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b28a:	ee07 3a90 	vmov	s15, r3
 800b28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b292:	ed97 6a01 	vldr	s12, [r7, #4]
 800b296:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800b348 <HAL_RCC_GetSysClockFreq+0x200>
 800b29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b2a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2b2:	e024      	b.n	800b2fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b6:	ee07 3a90 	vmov	s15, r3
 800b2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	ee07 3a90 	vmov	s15, r3
 800b2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2d4:	ee07 3a90 	vmov	s15, r3
 800b2d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b2dc:	ed97 6a01 	vldr	s12, [r7, #4]
 800b2e0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800b348 <HAL_RCC_GetSysClockFreq+0x200>
 800b2e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b2e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b2ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2fc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800b2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b338 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b302:	0e1b      	lsrs	r3, r3, #24
 800b304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b308:	3301      	adds	r3, #1
 800b30a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b316:	edd7 6a07 	vldr	s13, [r7, #28]
 800b31a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b31e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b322:	ee17 3a90 	vmov	r3, s15
 800b326:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800b328:	6a3b      	ldr	r3, [r7, #32]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	372c      	adds	r7, #44	@ 0x2c
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	46020c00 	.word	0x46020c00
 800b33c:	0801273c 	.word	0x0801273c
 800b340:	00f42400 	.word	0x00f42400
 800b344:	4b742400 	.word	0x4b742400
 800b348:	46000000 	.word	0x46000000

0800b34c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b350:	f7ff fefa 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800b354:	4602      	mov	r2, r0
 800b356:	4b07      	ldr	r3, [pc, #28]	@ (800b374 <HAL_RCC_GetHCLKFreq+0x28>)
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	f003 030f 	and.w	r3, r3, #15
 800b35e:	4906      	ldr	r1, [pc, #24]	@ (800b378 <HAL_RCC_GetHCLKFreq+0x2c>)
 800b360:	5ccb      	ldrb	r3, [r1, r3]
 800b362:	fa22 f303 	lsr.w	r3, r2, r3
 800b366:	4a05      	ldr	r2, [pc, #20]	@ (800b37c <HAL_RCC_GetHCLKFreq+0x30>)
 800b368:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b36a:	4b04      	ldr	r3, [pc, #16]	@ (800b37c <HAL_RCC_GetHCLKFreq+0x30>)
 800b36c:	681b      	ldr	r3, [r3, #0]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	46020c00 	.word	0x46020c00
 800b378:	08012724 	.word	0x08012724
 800b37c:	20000028 	.word	0x20000028

0800b380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b384:	f7ff ffe2 	bl	800b34c <HAL_RCC_GetHCLKFreq>
 800b388:	4602      	mov	r2, r0
 800b38a:	4b05      	ldr	r3, [pc, #20]	@ (800b3a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	091b      	lsrs	r3, r3, #4
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	4903      	ldr	r1, [pc, #12]	@ (800b3a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b396:	5ccb      	ldrb	r3, [r1, r3]
 800b398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	46020c00 	.word	0x46020c00
 800b3a4:	08012734 	.word	0x08012734

0800b3a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800b3ac:	f7ff ffce 	bl	800b34c <HAL_RCC_GetHCLKFreq>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	4b05      	ldr	r3, [pc, #20]	@ (800b3c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	0a1b      	lsrs	r3, r3, #8
 800b3b8:	f003 0307 	and.w	r3, r3, #7
 800b3bc:	4903      	ldr	r1, [pc, #12]	@ (800b3cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b3be:	5ccb      	ldrb	r3, [r1, r3]
 800b3c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	46020c00 	.word	0x46020c00
 800b3cc:	08012734 	.word	0x08012734

0800b3d0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800b3d4:	f7ff ffba 	bl	800b34c <HAL_RCC_GetHCLKFreq>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	4b05      	ldr	r3, [pc, #20]	@ (800b3f0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3de:	091b      	lsrs	r3, r3, #4
 800b3e0:	f003 0307 	and.w	r3, r3, #7
 800b3e4:	4903      	ldr	r1, [pc, #12]	@ (800b3f4 <HAL_RCC_GetPCLK3Freq+0x24>)
 800b3e6:	5ccb      	ldrb	r3, [r1, r3]
 800b3e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	46020c00 	.word	0x46020c00
 800b3f4:	08012734 	.word	0x08012734

0800b3f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	221f      	movs	r2, #31
 800b406:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800b408:	4b15      	ldr	r3, [pc, #84]	@ (800b460 <HAL_RCC_GetClockConfig+0x68>)
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	f003 0203 	and.w	r2, r3, #3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800b414:	4b12      	ldr	r3, [pc, #72]	@ (800b460 <HAL_RCC_GetClockConfig+0x68>)
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	f003 020f 	and.w	r2, r3, #15
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800b420:	4b0f      	ldr	r3, [pc, #60]	@ (800b460 <HAL_RCC_GetClockConfig+0x68>)
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800b42c:	4b0c      	ldr	r3, [pc, #48]	@ (800b460 <HAL_RCC_GetClockConfig+0x68>)
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	091b      	lsrs	r3, r3, #4
 800b432:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800b43a:	4b09      	ldr	r3, [pc, #36]	@ (800b460 <HAL_RCC_GetClockConfig+0x68>)
 800b43c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b43e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b446:	4b07      	ldr	r3, [pc, #28]	@ (800b464 <HAL_RCC_GetClockConfig+0x6c>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 020f 	and.w	r2, r3, #15
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	601a      	str	r2, [r3, #0]
}
 800b452:	bf00      	nop
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	46020c00 	.word	0x46020c00
 800b464:	40022000 	.word	0x40022000

0800b468 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b470:	4b3e      	ldr	r3, [pc, #248]	@ (800b56c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b476:	f003 0304 	and.w	r3, r3, #4
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d003      	beq.n	800b486 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b47e:	f7fe fce9 	bl	8009e54 <HAL_PWREx_GetVoltageRange>
 800b482:	6178      	str	r0, [r7, #20]
 800b484:	e019      	b.n	800b4ba <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b486:	4b39      	ldr	r3, [pc, #228]	@ (800b56c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b48c:	4a37      	ldr	r2, [pc, #220]	@ (800b56c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b48e:	f043 0304 	orr.w	r3, r3, #4
 800b492:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b496:	4b35      	ldr	r3, [pc, #212]	@ (800b56c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b49c:	f003 0304 	and.w	r3, r3, #4
 800b4a0:	60fb      	str	r3, [r7, #12]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b4a4:	f7fe fcd6 	bl	8009e54 <HAL_PWREx_GetVoltageRange>
 800b4a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b4aa:	4b30      	ldr	r3, [pc, #192]	@ (800b56c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b4ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4b0:	4a2e      	ldr	r2, [pc, #184]	@ (800b56c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b4b2:	f023 0304 	bic.w	r3, r3, #4
 800b4b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b4c0:	d003      	beq.n	800b4ca <RCC_SetFlashLatencyFromMSIRange+0x62>
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4c8:	d109      	bne.n	800b4de <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4d0:	d202      	bcs.n	800b4d8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b4d6:	e033      	b.n	800b540 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800b4d8:	2300      	movs	r3, #0
 800b4da:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b4dc:	e030      	b.n	800b540 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4e4:	d208      	bcs.n	800b4f8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4ec:	d102      	bne.n	800b4f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	613b      	str	r3, [r7, #16]
 800b4f2:	e025      	b.n	800b540 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e035      	b.n	800b564 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4fe:	d90f      	bls.n	800b520 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d109      	bne.n	800b51a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b50c:	d902      	bls.n	800b514 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800b50e:	2300      	movs	r3, #0
 800b510:	613b      	str	r3, [r7, #16]
 800b512:	e015      	b.n	800b540 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800b514:	2301      	movs	r3, #1
 800b516:	613b      	str	r3, [r7, #16]
 800b518:	e012      	b.n	800b540 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b51a:	2300      	movs	r3, #0
 800b51c:	613b      	str	r3, [r7, #16]
 800b51e:	e00f      	b.n	800b540 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b526:	d109      	bne.n	800b53c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b52e:	d102      	bne.n	800b536 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b530:	2301      	movs	r3, #1
 800b532:	613b      	str	r3, [r7, #16]
 800b534:	e004      	b.n	800b540 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b536:	2302      	movs	r3, #2
 800b538:	613b      	str	r3, [r7, #16]
 800b53a:	e001      	b.n	800b540 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b53c:	2301      	movs	r3, #1
 800b53e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b540:	4b0b      	ldr	r3, [pc, #44]	@ (800b570 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f023 020f 	bic.w	r2, r3, #15
 800b548:	4909      	ldr	r1, [pc, #36]	@ (800b570 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b550:	4b07      	ldr	r3, [pc, #28]	@ (800b570 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 030f 	and.w	r3, r3, #15
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d001      	beq.n	800b562 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e000      	b.n	800b564 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	46020c00 	.word	0x46020c00
 800b570:	40022000 	.word	0x40022000

0800b574 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800b574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b578:	b0c8      	sub	sp, #288	@ 0x120
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b580:	2300      	movs	r3, #0
 800b582:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b586:	2300      	movs	r3, #0
 800b588:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b58c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	f002 0401 	and.w	r4, r2, #1
 800b598:	2500      	movs	r5, #0
 800b59a:	ea54 0305 	orrs.w	r3, r4, r5
 800b59e:	d00b      	beq.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b5a0:	4bd5      	ldr	r3, [pc, #852]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b5a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b5a6:	f023 0103 	bic.w	r1, r3, #3
 800b5aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5b0:	4ad1      	ldr	r2, [pc, #836]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b5b2:	430b      	orrs	r3, r1
 800b5b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b5b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f002 0802 	and.w	r8, r2, #2
 800b5c4:	f04f 0900 	mov.w	r9, #0
 800b5c8:	ea58 0309 	orrs.w	r3, r8, r9
 800b5cc:	d00b      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b5ce:	4bca      	ldr	r3, [pc, #808]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b5d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b5d4:	f023 010c 	bic.w	r1, r3, #12
 800b5d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5de:	4ac6      	ldr	r2, [pc, #792]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b5e0:	430b      	orrs	r3, r1
 800b5e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b5e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f002 0a04 	and.w	sl, r2, #4
 800b5f2:	f04f 0b00 	mov.w	fp, #0
 800b5f6:	ea5a 030b 	orrs.w	r3, sl, fp
 800b5fa:	d00b      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b5fc:	4bbe      	ldr	r3, [pc, #760]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b5fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b602:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b60a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b60c:	4aba      	ldr	r2, [pc, #744]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b60e:	430b      	orrs	r3, r1
 800b610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f002 0308 	and.w	r3, r2, #8
 800b620:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b624:	2300      	movs	r3, #0
 800b626:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b62a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b62e:	460b      	mov	r3, r1
 800b630:	4313      	orrs	r3, r2
 800b632:	d00b      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800b634:	4bb0      	ldr	r3, [pc, #704]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b63a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b63e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b644:	4aac      	ldr	r2, [pc, #688]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b646:	430b      	orrs	r3, r1
 800b648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b64c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b654:	f002 0310 	and.w	r3, r2, #16
 800b658:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b65c:	2300      	movs	r3, #0
 800b65e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b662:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b666:	460b      	mov	r3, r1
 800b668:	4313      	orrs	r3, r2
 800b66a:	d00b      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800b66c:	4ba2      	ldr	r3, [pc, #648]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b66e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b672:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b67a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b67c:	4a9e      	ldr	r2, [pc, #632]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b67e:	430b      	orrs	r3, r1
 800b680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b690:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b694:	2300      	movs	r3, #0
 800b696:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b69a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b69e:	460b      	mov	r3, r1
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	d00b      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800b6a4:	4b94      	ldr	r3, [pc, #592]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b6a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b6aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b6ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6b4:	4a90      	ldr	r2, [pc, #576]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b6b6:	430b      	orrs	r3, r1
 800b6b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f002 0320 	and.w	r3, r2, #32
 800b6c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b6d2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	d00b      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b6dc:	4b86      	ldr	r3, [pc, #536]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b6de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b6e2:	f023 0107 	bic.w	r1, r3, #7
 800b6e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b6ec:	4a82      	ldr	r2, [pc, #520]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b6ee:	430b      	orrs	r3, r1
 800b6f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b704:	2300      	movs	r3, #0
 800b706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b70a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b70e:	460b      	mov	r3, r1
 800b710:	4313      	orrs	r3, r2
 800b712:	d00b      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b714:	4b78      	ldr	r3, [pc, #480]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b71a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b71e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b724:	4a74      	ldr	r2, [pc, #464]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b726:	430b      	orrs	r3, r1
 800b728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b72c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b73c:	2300      	movs	r3, #0
 800b73e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b746:	460b      	mov	r3, r1
 800b748:	4313      	orrs	r3, r2
 800b74a:	d00b      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b74c:	4b6a      	ldr	r3, [pc, #424]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b74e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b752:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b75a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b75c:	4a66      	ldr	r2, [pc, #408]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b75e:	430b      	orrs	r3, r1
 800b760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b774:	2300      	movs	r3, #0
 800b776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b77a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b77e:	460b      	mov	r3, r1
 800b780:	4313      	orrs	r3, r2
 800b782:	d00b      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b784:	4b5c      	ldr	r3, [pc, #368]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b78a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b78e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b794:	4a58      	ldr	r2, [pc, #352]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b796:	430b      	orrs	r3, r1
 800b798:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b7a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b7b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	d00b      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b7bc:	4b4e      	ldr	r3, [pc, #312]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b7be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7c2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b7c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7cc:	4a4a      	ldr	r2, [pc, #296]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b7ce:	430b      	orrs	r3, r1
 800b7d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b7d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b7e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b7ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	d00b      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b7f4:	4b40      	ldr	r3, [pc, #256]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b7f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7fa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b7fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b802:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b804:	4a3c      	ldr	r2, [pc, #240]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b806:	430b      	orrs	r3, r1
 800b808:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b80c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b81c:	2300      	movs	r3, #0
 800b81e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b822:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b826:	460b      	mov	r3, r1
 800b828:	4313      	orrs	r3, r2
 800b82a:	d00c      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b82c:	4b32      	ldr	r3, [pc, #200]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b82e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b832:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b83e:	4a2e      	ldr	r2, [pc, #184]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b840:	430b      	orrs	r3, r1
 800b842:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b852:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b856:	2300      	movs	r3, #0
 800b858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b85c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b860:	460b      	mov	r3, r1
 800b862:	4313      	orrs	r3, r2
 800b864:	d00c      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b866:	4b24      	ldr	r3, [pc, #144]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b86c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b878:	4a1f      	ldr	r2, [pc, #124]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b87a:	430b      	orrs	r3, r1
 800b87c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b88c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b890:	2300      	movs	r3, #0
 800b892:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b896:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b89a:	460b      	mov	r3, r1
 800b89c:	4313      	orrs	r3, r2
 800b89e:	d00c      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b8a0:	4b15      	ldr	r3, [pc, #84]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b8a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8a6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b8aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8b2:	4a11      	ldr	r2, [pc, #68]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b8b4:	430b      	orrs	r3, r1
 800b8b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b8ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b8c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b8d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	d010      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b8da:	4b07      	ldr	r3, [pc, #28]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b8dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b8e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b8e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8ec:	4a02      	ldr	r2, [pc, #8]	@ (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b8f4:	e002      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b8f6:	bf00      	nop
 800b8f8:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b8fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b90c:	2300      	movs	r3, #0
 800b90e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b912:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b916:	460b      	mov	r3, r1
 800b918:	4313      	orrs	r3, r2
 800b91a:	d04c      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b920:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b924:	2b80      	cmp	r3, #128	@ 0x80
 800b926:	d02d      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b928:	2b80      	cmp	r3, #128	@ 0x80
 800b92a:	d827      	bhi.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b92c:	2b60      	cmp	r3, #96	@ 0x60
 800b92e:	d02b      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b930:	2b60      	cmp	r3, #96	@ 0x60
 800b932:	d823      	bhi.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b934:	2b40      	cmp	r3, #64	@ 0x40
 800b936:	d006      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b938:	2b40      	cmp	r3, #64	@ 0x40
 800b93a:	d81f      	bhi.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d009      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b940:	2b20      	cmp	r3, #32
 800b942:	d011      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b944:	e01a      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b946:	4bc0      	ldr	r3, [pc, #768]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94a:	4abf      	ldr	r2, [pc, #764]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b94c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b950:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b952:	e01a      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b958:	3308      	adds	r3, #8
 800b95a:	4618      	mov	r0, r3
 800b95c:	f002 fcd6 	bl	800e30c <RCCEx_PLL2_Config>
 800b960:	4603      	mov	r3, r0
 800b962:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b966:	e010      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b96c:	332c      	adds	r3, #44	@ 0x2c
 800b96e:	4618      	mov	r0, r3
 800b970:	f002 fd64 	bl	800e43c <RCCEx_PLL3_Config>
 800b974:	4603      	mov	r3, r0
 800b976:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b97a:	e006      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b982:	e002      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b984:	bf00      	nop
 800b986:	e000      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b98a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10d      	bne.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b992:	4bad      	ldr	r3, [pc, #692]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b994:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b998:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b99c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b9a4:	4aa8      	ldr	r2, [pc, #672]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b9a6:	430b      	orrs	r3, r1
 800b9a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b9ac:	e003      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9b2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b9b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b9c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b9cc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	d053      	beq.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b9d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b9de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9e2:	d033      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b9e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9e8:	d82c      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b9ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9ee:	d02f      	beq.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b9f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9f4:	d826      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b9f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9fa:	d008      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b9fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba00:	d820      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00a      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ba06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba0a:	d011      	beq.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ba0c:	e01a      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ba0e:	4b8e      	ldr	r3, [pc, #568]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ba10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba12:	4a8d      	ldr	r2, [pc, #564]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ba14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba18:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ba1a:	e01a      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba20:	3308      	adds	r3, #8
 800ba22:	4618      	mov	r0, r3
 800ba24:	f002 fc72 	bl	800e30c <RCCEx_PLL2_Config>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ba2e:	e010      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba34:	332c      	adds	r3, #44	@ 0x2c
 800ba36:	4618      	mov	r0, r3
 800ba38:	f002 fd00 	bl	800e43c <RCCEx_PLL3_Config>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ba42:	e006      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ba4a:	e002      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800ba4c:	bf00      	nop
 800ba4e:	e000      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800ba50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba52:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10d      	bne.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800ba5a:	4b7b      	ldr	r3, [pc, #492]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ba5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba60:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800ba64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ba6c:	4a76      	ldr	r2, [pc, #472]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ba6e:	430b      	orrs	r3, r1
 800ba70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ba74:	e003      	b.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba76:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba7a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800ba7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ba8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ba94:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	d046      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800ba9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800baa6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800baaa:	d028      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800baac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bab0:	d821      	bhi.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bab2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bab6:	d022      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bab8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800babc:	d81b      	bhi.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800babe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bac2:	d01c      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bac4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bac8:	d815      	bhi.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800baca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bace:	d008      	beq.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800bad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bad4:	d80f      	bhi.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d011      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bade:	d00e      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bae0:	e009      	b.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bae6:	3308      	adds	r3, #8
 800bae8:	4618      	mov	r0, r3
 800baea:	f002 fc0f 	bl	800e30c <RCCEx_PLL2_Config>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800baf4:	e004      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bafc:	e000      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800bafe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb00:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10d      	bne.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800bb08:	4b4f      	ldr	r3, [pc, #316]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bb0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb0e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bb12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bb1a:	4a4b      	ldr	r2, [pc, #300]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bb1c:	430b      	orrs	r3, r1
 800bb1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bb22:	e003      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb24:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb28:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800bb2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bb38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bb42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800bb46:	460b      	mov	r3, r1
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	d03f      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800bb4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb54:	2b04      	cmp	r3, #4
 800bb56:	d81e      	bhi.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800bb58:	a201      	add	r2, pc, #4	@ (adr r2, 800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800bb5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5e:	bf00      	nop
 800bb60:	0800bb9f 	.word	0x0800bb9f
 800bb64:	0800bb75 	.word	0x0800bb75
 800bb68:	0800bb83 	.word	0x0800bb83
 800bb6c:	0800bb9f 	.word	0x0800bb9f
 800bb70:	0800bb9f 	.word	0x0800bb9f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bb74:	4b34      	ldr	r3, [pc, #208]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bb76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb78:	4a33      	ldr	r2, [pc, #204]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bb7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb7e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800bb80:	e00e      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bb82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb86:	332c      	adds	r3, #44	@ 0x2c
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f002 fc57 	bl	800e43c <RCCEx_PLL3_Config>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb94:	e004      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb9c:	e000      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800bb9e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bba0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10d      	bne.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800bba8:	4b27      	ldr	r3, [pc, #156]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bbaa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbae:	f023 0107 	bic.w	r1, r3, #7
 800bbb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbba:	4a23      	ldr	r2, [pc, #140]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bbbc:	430b      	orrs	r3, r1
 800bbbe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bbc2:	e003      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbc8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800bbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800bbd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bbda:	2300      	movs	r3, #0
 800bbdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bbde:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	d04c      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800bbe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bbf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bbf4:	d02a      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800bbf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bbfa:	d821      	bhi.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800bbfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc00:	d026      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800bc02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc06:	d81b      	bhi.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800bc08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc0c:	d00e      	beq.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800bc0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc12:	d815      	bhi.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d01d      	beq.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800bc18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc1c:	d110      	bne.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc1e:	4b0a      	ldr	r3, [pc, #40]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bc20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc22:	4a09      	ldr	r2, [pc, #36]	@ (800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bc24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc28:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800bc2a:	e014      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc30:	332c      	adds	r3, #44	@ 0x2c
 800bc32:	4618      	mov	r0, r3
 800bc34:	f002 fc02 	bl	800e43c <RCCEx_PLL3_Config>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bc3e:	e00a      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bc46:	e006      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800bc48:	46020c00 	.word	0x46020c00
        break;
 800bc4c:	bf00      	nop
 800bc4e:	e002      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800bc50:	bf00      	nop
 800bc52:	e000      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800bc54:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bc56:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10d      	bne.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800bc5e:	4baf      	ldr	r3, [pc, #700]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bc60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc64:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bc68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bc70:	4aaa      	ldr	r2, [pc, #680]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bc72:	430b      	orrs	r3, r1
 800bc74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bc78:	e003      	b.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc7a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc7e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800bc8e:	673b      	str	r3, [r7, #112]	@ 0x70
 800bc90:	2300      	movs	r3, #0
 800bc92:	677b      	str	r3, [r7, #116]	@ 0x74
 800bc94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	f000 80b5 	beq.w	800be0a <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bca0:	2300      	movs	r3, #0
 800bca2:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bca6:	4b9d      	ldr	r3, [pc, #628]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d113      	bne.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bcb4:	4b99      	ldr	r3, [pc, #612]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bcb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bcba:	4a98      	ldr	r2, [pc, #608]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bcbc:	f043 0304 	orr.w	r3, r3, #4
 800bcc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800bcc4:	4b95      	ldr	r3, [pc, #596]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bcc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bcca:	f003 0304 	and.w	r3, r3, #4
 800bcce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800bcd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bcdc:	4b90      	ldr	r3, [pc, #576]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800bcde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce0:	4a8f      	ldr	r2, [pc, #572]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800bce2:	f043 0301 	orr.w	r3, r3, #1
 800bce6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bce8:	f7f7 fb18 	bl	800331c <HAL_GetTick>
 800bcec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bcf0:	e00b      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcf2:	f7f7 fb13 	bl	800331c <HAL_GetTick>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d903      	bls.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bd08:	e005      	b.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bd0a:	4b85      	ldr	r3, [pc, #532]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800bd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd0e:	f003 0301 	and.w	r3, r3, #1
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d0ed      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800bd16:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d165      	bne.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bd1e:	4b7f      	ldr	r3, [pc, #508]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bd20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bd24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800bd2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d023      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x808>
 800bd34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd38:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800bd3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d01b      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bd44:	4b75      	ldr	r3, [pc, #468]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bd46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bd4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd52:	4b72      	ldr	r3, [pc, #456]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bd54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bd58:	4a70      	ldr	r2, [pc, #448]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bd5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd62:	4b6e      	ldr	r3, [pc, #440]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bd64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bd68:	4a6c      	ldr	r2, [pc, #432]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bd6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bd72:	4a6a      	ldr	r2, [pc, #424]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bd74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bd78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bd7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bd80:	f003 0301 	and.w	r3, r3, #1
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d019      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd88:	f7f7 fac8 	bl	800331c <HAL_GetTick>
 800bd8c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd90:	e00d      	b.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd92:	f7f7 fac3 	bl	800331c <HAL_GetTick>
 800bd96:	4602      	mov	r2, r0
 800bd98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd9c:	1ad2      	subs	r2, r2, r3
 800bd9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d903      	bls.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800bda6:	2303      	movs	r3, #3
 800bda8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800bdac:	e006      	b.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bdae:	4b5b      	ldr	r3, [pc, #364]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bdb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bdb4:	f003 0302 	and.w	r3, r3, #2
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d0ea      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800bdbc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10d      	bne.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800bdc4:	4b55      	ldr	r3, [pc, #340]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bdc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bdca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bdce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdd2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800bdd6:	4a51      	ldr	r2, [pc, #324]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bdd8:	430b      	orrs	r3, r1
 800bdda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bdde:	e008      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bde0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bde4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800bde8:	e003      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bdee:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bdf2:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d107      	bne.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bdfa:	4b48      	ldr	r3, [pc, #288]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bdfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be00:	4a46      	ldr	r2, [pc, #280]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800be02:	f023 0304 	bic.w	r3, r3, #4
 800be06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800be0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800be16:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be18:	2300      	movs	r3, #0
 800be1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800be1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800be20:	460b      	mov	r3, r1
 800be22:	4313      	orrs	r3, r2
 800be24:	d042      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800be26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800be2e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800be32:	d022      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x906>
 800be34:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800be38:	d81b      	bhi.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800be3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be3e:	d011      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800be40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be44:	d815      	bhi.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800be46:	2b00      	cmp	r3, #0
 800be48:	d019      	beq.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800be4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be4e:	d110      	bne.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800be50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be54:	3308      	adds	r3, #8
 800be56:	4618      	mov	r0, r3
 800be58:	f002 fa58 	bl	800e30c <RCCEx_PLL2_Config>
 800be5c:	4603      	mov	r3, r0
 800be5e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800be62:	e00d      	b.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be64:	4b2d      	ldr	r3, [pc, #180]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800be66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be68:	4a2c      	ldr	r2, [pc, #176]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800be6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be6e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800be70:	e006      	b.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800be72:	2301      	movs	r3, #1
 800be74:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800be78:	e002      	b.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800be7a:	bf00      	nop
 800be7c:	e000      	b.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800be7e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800be80:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10d      	bne.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800be88:	4b24      	ldr	r3, [pc, #144]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800be8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800be8e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800be92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800be9a:	4a20      	ldr	r2, [pc, #128]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800be9c:	430b      	orrs	r3, r1
 800be9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bea2:	e003      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bea8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800beac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800beb8:	663b      	str	r3, [r7, #96]	@ 0x60
 800beba:	2300      	movs	r3, #0
 800bebc:	667b      	str	r3, [r7, #100]	@ 0x64
 800bebe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800bec2:	460b      	mov	r3, r1
 800bec4:	4313      	orrs	r3, r2
 800bec6:	d031      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800bec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800becc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bed4:	d00b      	beq.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800bed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beda:	d804      	bhi.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d008      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800bee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bee4:	d007      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800beec:	e004      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800beee:	bf00      	nop
 800bef0:	e002      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800bef2:	bf00      	nop
 800bef4:	e000      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800bef6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bef8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800befc:	2b00      	cmp	r3, #0
 800befe:	d111      	bne.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800bf00:	4b06      	ldr	r3, [pc, #24]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bf0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bf12:	4a02      	ldr	r2, [pc, #8]	@ (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf14:	430b      	orrs	r3, r1
 800bf16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bf1a:	e007      	b.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800bf1c:	46020c00 	.word	0x46020c00
 800bf20:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf24:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf28:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800bf2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf34:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bf38:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bf42:	460b      	mov	r3, r1
 800bf44:	4313      	orrs	r3, r2
 800bf46:	d00c      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800bf48:	4bb2      	ldr	r3, [pc, #712]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf4e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800bf52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bf5a:	4aae      	ldr	r2, [pc, #696]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf5c:	430b      	orrs	r3, r1
 800bf5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800bf62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800bf6e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf70:	2300      	movs	r3, #0
 800bf72:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf74:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800bf78:	460b      	mov	r3, r1
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	d019      	beq.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800bf7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bf86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf8a:	d105      	bne.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bf8c:	4ba1      	ldr	r3, [pc, #644]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf90:	4aa0      	ldr	r2, [pc, #640]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf96:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800bf98:	4b9e      	ldr	r3, [pc, #632]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf9e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800bfa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bfaa:	4a9a      	ldr	r2, [pc, #616]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfac:	430b      	orrs	r3, r1
 800bfae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800bfb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800bfbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800bfc8:	460b      	mov	r3, r1
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	d00c      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800bfce:	4b91      	ldr	r3, [pc, #580]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bfd4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bfd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfdc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bfe0:	4a8c      	ldr	r2, [pc, #560]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfe2:	430b      	orrs	r3, r1
 800bfe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800bfe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bff4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bff6:	2300      	movs	r3, #0
 800bff8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bffa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bffe:	460b      	mov	r3, r1
 800c000:	4313      	orrs	r3, r2
 800c002:	d00c      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800c004:	4b83      	ldr	r3, [pc, #524]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c00a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c00e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c012:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c016:	4a7f      	ldr	r2, [pc, #508]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c018:	430b      	orrs	r3, r1
 800c01a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800c01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c026:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c02a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c02c:	2300      	movs	r3, #0
 800c02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c030:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c034:	460b      	mov	r3, r1
 800c036:	4313      	orrs	r3, r2
 800c038:	d00c      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800c03a:	4b76      	ldr	r3, [pc, #472]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c03c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c040:	f023 0118 	bic.w	r1, r3, #24
 800c044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c048:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c04c:	4a71      	ldr	r2, [pc, #452]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c04e:	430b      	orrs	r3, r1
 800c050:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800c060:	633b      	str	r3, [r7, #48]	@ 0x30
 800c062:	2300      	movs	r3, #0
 800c064:	637b      	str	r3, [r7, #52]	@ 0x34
 800c066:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c06a:	460b      	mov	r3, r1
 800c06c:	4313      	orrs	r3, r2
 800c06e:	d032      	beq.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800c070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c074:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c078:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c07c:	d105      	bne.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c07e:	4b65      	ldr	r3, [pc, #404]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c082:	4a64      	ldr	r2, [pc, #400]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c088:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800c08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c08e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c092:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c096:	d108      	bne.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c09c:	3308      	adds	r3, #8
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f002 f934 	bl	800e30c <RCCEx_PLL2_Config>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800c0aa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d10d      	bne.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800c0b2:	4b58      	ldr	r3, [pc, #352]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c0b8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c0bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c0c4:	4a53      	ldr	r2, [pc, #332]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0c6:	430b      	orrs	r3, r1
 800c0c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c0cc:	e003      	b.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ce:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c0d2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800c0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0de:	2100      	movs	r1, #0
 800c0e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	d04a      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800c0f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c0fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c0fe:	d01e      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800c100:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c104:	d825      	bhi.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c106:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c10a:	d00e      	beq.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800c10c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c110:	d81f      	bhi.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c112:	2b00      	cmp	r3, #0
 800c114:	d021      	beq.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800c116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c11a:	d11a      	bne.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c11c:	4b3d      	ldr	r3, [pc, #244]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c11e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c120:	4a3c      	ldr	r2, [pc, #240]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c126:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c128:	e018      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c12a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c12e:	3308      	adds	r3, #8
 800c130:	4618      	mov	r0, r3
 800c132:	f002 f8eb 	bl	800e30c <RCCEx_PLL2_Config>
 800c136:	4603      	mov	r3, r0
 800c138:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c13c:	e00e      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c13e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c142:	332c      	adds	r3, #44	@ 0x2c
 800c144:	4618      	mov	r0, r3
 800c146:	f002 f979 	bl	800e43c <RCCEx_PLL3_Config>
 800c14a:	4603      	mov	r3, r0
 800c14c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c150:	e004      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c158:	e000      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800c15a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c15c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10d      	bne.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800c164:	4b2b      	ldr	r3, [pc, #172]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c166:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c16a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c16e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c172:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c176:	4927      	ldr	r1, [pc, #156]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c178:	4313      	orrs	r3, r2
 800c17a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c17e:	e003      	b.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c180:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c184:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800c188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c190:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800c194:	623b      	str	r3, [r7, #32]
 800c196:	2300      	movs	r3, #0
 800c198:	627b      	str	r3, [r7, #36]	@ 0x24
 800c19a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	d03d      	beq.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800c1a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c1b0:	d00e      	beq.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800c1b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c1b6:	d815      	bhi.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d017      	beq.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c1bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1c0:	d110      	bne.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1c2:	4b14      	ldr	r3, [pc, #80]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c6:	4a13      	ldr	r2, [pc, #76]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1cc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c1ce:	e00e      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c1d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1d4:	3308      	adds	r3, #8
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f002 f898 	bl	800e30c <RCCEx_PLL2_Config>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c1e2:	e004      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c1ea:	e000      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c1ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c1ee:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d110      	bne.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800c1f6:	4b07      	ldr	r3, [pc, #28]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1fc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c208:	4902      	ldr	r1, [pc, #8]	@ (800c214 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800c210:	e006      	b.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c212:	bf00      	nop
 800c214:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c218:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c21c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800c220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800c22c:	61bb      	str	r3, [r7, #24]
 800c22e:	2300      	movs	r3, #0
 800c230:	61fb      	str	r3, [r7, #28]
 800c232:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c236:	460b      	mov	r3, r1
 800c238:	4313      	orrs	r3, r2
 800c23a:	d00c      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800c23c:	4b68      	ldr	r3, [pc, #416]	@ (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c23e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c242:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c24a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c24e:	4964      	ldr	r1, [pc, #400]	@ (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c250:	4313      	orrs	r3, r2
 800c252:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	2100      	movs	r1, #0
 800c260:	6139      	str	r1, [r7, #16]
 800c262:	f003 0302 	and.w	r3, r3, #2
 800c266:	617b      	str	r3, [r7, #20]
 800c268:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c26c:	460b      	mov	r3, r1
 800c26e:	4313      	orrs	r3, r2
 800c270:	d036      	beq.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800c272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c276:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00c      	beq.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c27e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c282:	d113      	bne.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c288:	3308      	adds	r3, #8
 800c28a:	4618      	mov	r0, r3
 800c28c:	f002 f83e 	bl	800e30c <RCCEx_PLL2_Config>
 800c290:	4603      	mov	r3, r0
 800c292:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c296:	e00d      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c29c:	332c      	adds	r3, #44	@ 0x2c
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f002 f8cc 	bl	800e43c <RCCEx_PLL3_Config>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c2aa:	e003      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c2b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d10d      	bne.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800c2bc:	4b48      	ldr	r3, [pc, #288]	@ (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c2be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c2c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c2c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c2ce:	4944      	ldr	r1, [pc, #272]	@ (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c2d6:	e003      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c2dc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800c2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	f003 0304 	and.w	r3, r3, #4
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	d024      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800c2fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c304:	2b00      	cmp	r3, #0
 800c306:	d108      	bne.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c30c:	332c      	adds	r3, #44	@ 0x2c
 800c30e:	4618      	mov	r0, r3
 800c310:	f002 f894 	bl	800e43c <RCCEx_PLL3_Config>
 800c314:	4603      	mov	r3, r0
 800c316:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800c31a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10d      	bne.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800c322:	4b2f      	ldr	r3, [pc, #188]	@ (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c324:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c328:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c330:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c334:	492a      	ldr	r1, [pc, #168]	@ (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c336:	4313      	orrs	r3, r2
 800c338:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c33c:	e003      	b.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c33e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c342:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800c346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	2100      	movs	r1, #0
 800c350:	6039      	str	r1, [r7, #0]
 800c352:	f003 0308 	and.w	r3, r3, #8
 800c356:	607b      	str	r3, [r7, #4]
 800c358:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c35c:	460b      	mov	r3, r1
 800c35e:	4313      	orrs	r3, r2
 800c360:	d036      	beq.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800c362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c366:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c36a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c36e:	d00d      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800c370:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c374:	d811      	bhi.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c376:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c37a:	d012      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c37c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c380:	d80b      	bhi.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00d      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c38a:	d106      	bne.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c38c:	4b14      	ldr	r3, [pc, #80]	@ (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c390:	4a13      	ldr	r2, [pc, #76]	@ (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c396:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800c398:	e004      	b.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c3a0:	e000      	b.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800c3a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3a4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10d      	bne.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800c3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c3ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c3b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c3b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c3be:	4908      	ldr	r1, [pc, #32]	@ (800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c3c6:	e003      	b.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c3cc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800c3d0:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3e0:	46020c00 	.word	0x46020c00

0800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b089      	sub	sp, #36	@ 0x24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800c3ec:	4ba6      	ldr	r3, [pc, #664]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c3ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c3f6:	4ba4      	ldr	r3, [pc, #656]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3fa:	f003 0303 	and.w	r3, r3, #3
 800c3fe:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800c400:	4ba1      	ldr	r3, [pc, #644]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c404:	0a1b      	lsrs	r3, r3, #8
 800c406:	f003 030f 	and.w	r3, r3, #15
 800c40a:	3301      	adds	r3, #1
 800c40c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c40e:	4b9e      	ldr	r3, [pc, #632]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c412:	091b      	lsrs	r3, r3, #4
 800c414:	f003 0301 	and.w	r3, r3, #1
 800c418:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800c41a:	4b9b      	ldr	r3, [pc, #620]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c41c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c41e:	08db      	lsrs	r3, r3, #3
 800c420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	fb02 f303 	mul.w	r3, r2, r3
 800c42a:	ee07 3a90 	vmov	s15, r3
 800c42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c432:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	2b03      	cmp	r3, #3
 800c43a:	d062      	beq.n	800c502 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2b03      	cmp	r3, #3
 800c440:	f200 8081 	bhi.w	800c546 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2b01      	cmp	r3, #1
 800c448:	d024      	beq.n	800c494 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d17a      	bne.n	800c546 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	ee07 3a90 	vmov	s15, r3
 800c456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c45a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c68c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c462:	4b89      	ldr	r3, [pc, #548]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c46a:	ee07 3a90 	vmov	s15, r3
 800c46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c472:	ed97 6a02 	vldr	s12, [r7, #8]
 800c476:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c690 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c486:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c48e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c492:	e08f      	b.n	800c5b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c494:	4b7c      	ldr	r3, [pc, #496]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d005      	beq.n	800c4ac <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800c4a0:	4b79      	ldr	r3, [pc, #484]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	0f1b      	lsrs	r3, r3, #28
 800c4a6:	f003 030f 	and.w	r3, r3, #15
 800c4aa:	e006      	b.n	800c4ba <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800c4ac:	4b76      	ldr	r3, [pc, #472]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c4ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c4b2:	041b      	lsls	r3, r3, #16
 800c4b4:	0f1b      	lsrs	r3, r3, #28
 800c4b6:	f003 030f 	and.w	r3, r3, #15
 800c4ba:	4a76      	ldr	r2, [pc, #472]	@ (800c694 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4c0:	ee07 3a90 	vmov	s15, r3
 800c4c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	ee07 3a90 	vmov	s15, r3
 800c4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	ee07 3a90 	vmov	s15, r3
 800c4dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4e0:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4e4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c690 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c4e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c4f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c500:	e058      	b.n	800c5b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	ee07 3a90 	vmov	s15, r3
 800c508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c50c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c68c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c514:	4b5c      	ldr	r3, [pc, #368]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c51c:	ee07 3a90 	vmov	s15, r3
 800c520:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c524:	ed97 6a02 	vldr	s12, [r7, #8]
 800c528:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c690 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c52c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c530:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c534:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c538:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c53c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c540:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c544:	e036      	b.n	800c5b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c546:	4b50      	ldr	r3, [pc, #320]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d005      	beq.n	800c55e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800c552:	4b4d      	ldr	r3, [pc, #308]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	0f1b      	lsrs	r3, r3, #28
 800c558:	f003 030f 	and.w	r3, r3, #15
 800c55c:	e006      	b.n	800c56c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800c55e:	4b4a      	ldr	r3, [pc, #296]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c564:	041b      	lsls	r3, r3, #16
 800c566:	0f1b      	lsrs	r3, r3, #28
 800c568:	f003 030f 	and.w	r3, r3, #15
 800c56c:	4a49      	ldr	r2, [pc, #292]	@ (800c694 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c572:	ee07 3a90 	vmov	s15, r3
 800c576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	ee07 3a90 	vmov	s15, r3
 800c580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	ee07 3a90 	vmov	s15, r3
 800c58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c592:	ed97 6a02 	vldr	s12, [r7, #8]
 800c596:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c690 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5b2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800c5b4:	4b34      	ldr	r3, [pc, #208]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d017      	beq.n	800c5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c5c0:	4b31      	ldr	r3, [pc, #196]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c5c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5c4:	0a5b      	lsrs	r3, r3, #9
 800c5c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5ca:	ee07 3a90 	vmov	s15, r3
 800c5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800c5d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c5da:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5e6:	ee17 2a90 	vmov	r2, s15
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	e002      	b.n	800c5f6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800c5f6:	4b24      	ldr	r3, [pc, #144]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d017      	beq.n	800c632 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c602:	4b21      	ldr	r3, [pc, #132]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c606:	0c1b      	lsrs	r3, r3, #16
 800c608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c60c:	ee07 3a90 	vmov	s15, r3
 800c610:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800c614:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c618:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c61c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c628:	ee17 2a90 	vmov	r2, s15
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	605a      	str	r2, [r3, #4]
 800c630:	e002      	b.n	800c638 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800c638:	4b13      	ldr	r3, [pc, #76]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c63c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c640:	2b00      	cmp	r3, #0
 800c642:	d017      	beq.n	800c674 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c644:	4b10      	ldr	r3, [pc, #64]	@ (800c688 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c648:	0e1b      	lsrs	r3, r3, #24
 800c64a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c64e:	ee07 3a90 	vmov	s15, r3
 800c652:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800c656:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c65a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c65e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c66a:	ee17 2a90 	vmov	r2, s15
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c672:	e002      	b.n	800c67a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	609a      	str	r2, [r3, #8]
}
 800c67a:	bf00      	nop
 800c67c:	3724      	adds	r7, #36	@ 0x24
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	46020c00 	.word	0x46020c00
 800c68c:	4b742400 	.word	0x4b742400
 800c690:	46000000 	.word	0x46000000
 800c694:	0801273c 	.word	0x0801273c

0800c698 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c698:	b480      	push	{r7}
 800c69a:	b089      	sub	sp, #36	@ 0x24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800c6a0:	4ba6      	ldr	r3, [pc, #664]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c6a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800c6aa:	4ba4      	ldr	r3, [pc, #656]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ae:	f003 0303 	and.w	r3, r3, #3
 800c6b2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800c6b4:	4ba1      	ldr	r3, [pc, #644]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b8:	0a1b      	lsrs	r3, r3, #8
 800c6ba:	f003 030f 	and.w	r3, r3, #15
 800c6be:	3301      	adds	r3, #1
 800c6c0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800c6c2:	4b9e      	ldr	r3, [pc, #632]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c6c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c6:	091b      	lsrs	r3, r3, #4
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c6ce:	4b9b      	ldr	r3, [pc, #620]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6d2:	08db      	lsrs	r3, r3, #3
 800c6d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	fb02 f303 	mul.w	r3, r2, r3
 800c6de:	ee07 3a90 	vmov	s15, r3
 800c6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6e6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	2b03      	cmp	r3, #3
 800c6ee:	d062      	beq.n	800c7b6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	2b03      	cmp	r3, #3
 800c6f4:	f200 8081 	bhi.w	800c7fa <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d024      	beq.n	800c748 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	2b02      	cmp	r3, #2
 800c702:	d17a      	bne.n	800c7fa <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	ee07 3a90 	vmov	s15, r3
 800c70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c716:	4b89      	ldr	r3, [pc, #548]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71e:	ee07 3a90 	vmov	s15, r3
 800c722:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c726:	ed97 6a02 	vldr	s12, [r7, #8]
 800c72a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c944 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c732:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c742:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c746:	e08f      	b.n	800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c748:	4b7c      	ldr	r3, [pc, #496]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d005      	beq.n	800c760 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c754:	4b79      	ldr	r3, [pc, #484]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	0f1b      	lsrs	r3, r3, #28
 800c75a:	f003 030f 	and.w	r3, r3, #15
 800c75e:	e006      	b.n	800c76e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c760:	4b76      	ldr	r3, [pc, #472]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c766:	041b      	lsls	r3, r3, #16
 800c768:	0f1b      	lsrs	r3, r3, #28
 800c76a:	f003 030f 	and.w	r3, r3, #15
 800c76e:	4a76      	ldr	r2, [pc, #472]	@ (800c948 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c774:	ee07 3a90 	vmov	s15, r3
 800c778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	ee07 3a90 	vmov	s15, r3
 800c782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	ee07 3a90 	vmov	s15, r3
 800c790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c794:	ed97 6a02 	vldr	s12, [r7, #8]
 800c798:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c944 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c79c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c7ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7b4:	e058      	b.n	800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	ee07 3a90 	vmov	s15, r3
 800c7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7c0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c7c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7c8:	4b5c      	ldr	r3, [pc, #368]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c7ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7d0:	ee07 3a90 	vmov	s15, r3
 800c7d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7d8:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7dc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c944 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c7e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c7e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c7f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7f8:	e036      	b.n	800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c7fa:	4b50      	ldr	r3, [pc, #320]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d005      	beq.n	800c812 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c806:	4b4d      	ldr	r3, [pc, #308]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	0f1b      	lsrs	r3, r3, #28
 800c80c:	f003 030f 	and.w	r3, r3, #15
 800c810:	e006      	b.n	800c820 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c812:	4b4a      	ldr	r3, [pc, #296]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c818:	041b      	lsls	r3, r3, #16
 800c81a:	0f1b      	lsrs	r3, r3, #28
 800c81c:	f003 030f 	and.w	r3, r3, #15
 800c820:	4a49      	ldr	r2, [pc, #292]	@ (800c948 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c826:	ee07 3a90 	vmov	s15, r3
 800c82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	ee07 3a90 	vmov	s15, r3
 800c834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	ee07 3a90 	vmov	s15, r3
 800c842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c846:	ed97 6a02 	vldr	s12, [r7, #8]
 800c84a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c944 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c84e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c85a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c85e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c862:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c866:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c868:	4b34      	ldr	r3, [pc, #208]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c870:	2b00      	cmp	r3, #0
 800c872:	d017      	beq.n	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c874:	4b31      	ldr	r3, [pc, #196]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c878:	0a5b      	lsrs	r3, r3, #9
 800c87a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c87e:	ee07 3a90 	vmov	s15, r3
 800c882:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c886:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c88a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c88e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c89a:	ee17 2a90 	vmov	r2, s15
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	e002      	b.n	800c8aa <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c8aa:	4b24      	ldr	r3, [pc, #144]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d017      	beq.n	800c8e6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c8b6:	4b21      	ldr	r3, [pc, #132]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c8b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8ba:	0c1b      	lsrs	r3, r3, #16
 800c8bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8c0:	ee07 3a90 	vmov	s15, r3
 800c8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c8c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8cc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c8d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8dc:	ee17 2a90 	vmov	r2, s15
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	605a      	str	r2, [r3, #4]
 800c8e4:	e002      	b.n	800c8ec <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c8ec:	4b13      	ldr	r3, [pc, #76]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c8ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d017      	beq.n	800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c8f8:	4b10      	ldr	r3, [pc, #64]	@ (800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c8fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8fc:	0e1b      	lsrs	r3, r3, #24
 800c8fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c902:	ee07 3a90 	vmov	s15, r3
 800c906:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c90a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c90e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c912:	edd7 6a07 	vldr	s13, [r7, #28]
 800c916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c91a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c91e:	ee17 2a90 	vmov	r2, s15
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c926:	e002      	b.n	800c92e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	609a      	str	r2, [r3, #8]
}
 800c92e:	bf00      	nop
 800c930:	3724      	adds	r7, #36	@ 0x24
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	46020c00 	.word	0x46020c00
 800c940:	4b742400 	.word	0x4b742400
 800c944:	46000000 	.word	0x46000000
 800c948:	0801273c 	.word	0x0801273c

0800c94c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b089      	sub	sp, #36	@ 0x24
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c954:	4ba6      	ldr	r3, [pc, #664]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c95c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c95e:	4ba4      	ldr	r3, [pc, #656]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c962:	f003 0303 	and.w	r3, r3, #3
 800c966:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c968:	4ba1      	ldr	r3, [pc, #644]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c96c:	0a1b      	lsrs	r3, r3, #8
 800c96e:	f003 030f 	and.w	r3, r3, #15
 800c972:	3301      	adds	r3, #1
 800c974:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c976:	4b9e      	ldr	r3, [pc, #632]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c97a:	091b      	lsrs	r3, r3, #4
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c982:	4b9b      	ldr	r3, [pc, #620]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c986:	08db      	lsrs	r3, r3, #3
 800c988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	fb02 f303 	mul.w	r3, r2, r3
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c99a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	2b03      	cmp	r3, #3
 800c9a2:	d062      	beq.n	800ca6a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2b03      	cmp	r3, #3
 800c9a8:	f200 8081 	bhi.w	800caae <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d024      	beq.n	800c9fc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	d17a      	bne.n	800caae <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	ee07 3a90 	vmov	s15, r3
 800c9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ca:	4b89      	ldr	r3, [pc, #548]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c9cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d2:	ee07 3a90 	vmov	s15, r3
 800c9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9da:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9de:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800cbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9f6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c9fa:	e08f      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c9fc:	4b7c      	ldr	r3, [pc, #496]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d005      	beq.n	800ca14 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800ca08:	4b79      	ldr	r3, [pc, #484]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	0f1b      	lsrs	r3, r3, #28
 800ca0e:	f003 030f 	and.w	r3, r3, #15
 800ca12:	e006      	b.n	800ca22 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800ca14:	4b76      	ldr	r3, [pc, #472]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ca16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca1a:	041b      	lsls	r3, r3, #16
 800ca1c:	0f1b      	lsrs	r3, r3, #28
 800ca1e:	f003 030f 	and.w	r3, r3, #15
 800ca22:	4a76      	ldr	r2, [pc, #472]	@ (800cbfc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ca24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca28:	ee07 3a90 	vmov	s15, r3
 800ca2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	ee07 3a90 	vmov	s15, r3
 800ca44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca48:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca4c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800cbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ca50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ca60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca68:	e058      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	ee07 3a90 	vmov	s15, r3
 800ca70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca74:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ca78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca7c:	4b5c      	ldr	r3, [pc, #368]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ca7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca84:	ee07 3a90 	vmov	s15, r3
 800ca88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca8c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca90:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ca94:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ca98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800caa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800caa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800caac:	e036      	b.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800caae:	4b50      	ldr	r3, [pc, #320]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d005      	beq.n	800cac6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800caba:	4b4d      	ldr	r3, [pc, #308]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	0f1b      	lsrs	r3, r3, #28
 800cac0:	f003 030f 	and.w	r3, r3, #15
 800cac4:	e006      	b.n	800cad4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800cac6:	4b4a      	ldr	r3, [pc, #296]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cacc:	041b      	lsls	r3, r3, #16
 800cace:	0f1b      	lsrs	r3, r3, #28
 800cad0:	f003 030f 	and.w	r3, r3, #15
 800cad4:	4a49      	ldr	r2, [pc, #292]	@ (800cbfc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800cad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cada:	ee07 3a90 	vmov	s15, r3
 800cade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	ee07 3a90 	vmov	s15, r3
 800cae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	ee07 3a90 	vmov	s15, r3
 800caf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafa:	ed97 6a02 	vldr	s12, [r7, #8]
 800cafe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800cbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cb02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cb12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb1a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800cb1c:	4b34      	ldr	r3, [pc, #208]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cb1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d017      	beq.n	800cb58 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cb28:	4b31      	ldr	r3, [pc, #196]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cb2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb2c:	0a5b      	lsrs	r3, r3, #9
 800cb2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb32:	ee07 3a90 	vmov	s15, r3
 800cb36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800cb3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb3e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cb42:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb4e:	ee17 2a90 	vmov	r2, s15
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	e002      	b.n	800cb5e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800cb5e:	4b24      	ldr	r3, [pc, #144]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cb60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d017      	beq.n	800cb9a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cb6a:	4b21      	ldr	r3, [pc, #132]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cb6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb6e:	0c1b      	lsrs	r3, r3, #16
 800cb70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb74:	ee07 3a90 	vmov	s15, r3
 800cb78:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800cb7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb80:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cb84:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb90:	ee17 2a90 	vmov	r2, s15
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	605a      	str	r2, [r3, #4]
 800cb98:	e002      	b.n	800cba0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800cba0:	4b13      	ldr	r3, [pc, #76]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d017      	beq.n	800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cbac:	4b10      	ldr	r3, [pc, #64]	@ (800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cbae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbb0:	0e1b      	lsrs	r3, r3, #24
 800cbb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbb6:	ee07 3a90 	vmov	s15, r3
 800cbba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800cbbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbc2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cbc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbd2:	ee17 2a90 	vmov	r2, s15
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cbda:	e002      	b.n	800cbe2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	609a      	str	r2, [r3, #8]
}
 800cbe2:	bf00      	nop
 800cbe4:	3724      	adds	r7, #36	@ 0x24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	46020c00 	.word	0x46020c00
 800cbf4:	4b742400 	.word	0x4b742400
 800cbf8:	46000000 	.word	0x46000000
 800cbfc:	0801273c 	.word	0x0801273c

0800cc00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08e      	sub	sp, #56	@ 0x38
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800cc0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc0e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800cc12:	430b      	orrs	r3, r1
 800cc14:	d145      	bne.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800cc16:	4ba7      	ldr	r3, [pc, #668]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cc18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc20:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800cc22:	4ba4      	ldr	r3, [pc, #656]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cc24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc28:	f003 0302 	and.w	r3, r3, #2
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d108      	bne.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800cc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc36:	d104      	bne.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800cc38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc3e:	f001 bb5a 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800cc42:	4b9c      	ldr	r3, [pc, #624]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cc44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc50:	d114      	bne.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800cc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc58:	d110      	bne.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cc5a:	4b96      	ldr	r3, [pc, #600]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cc5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cc64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc68:	d103      	bne.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800cc6a:	23fa      	movs	r3, #250	@ 0xfa
 800cc6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cc6e:	f001 bb42 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800cc72:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cc76:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cc78:	f001 bb3d 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800cc7c:	4b8d      	ldr	r3, [pc, #564]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc88:	d107      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc90:	d103      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800cc92:	4b89      	ldr	r3, [pc, #548]	@ (800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800cc94:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc96:	f001 bb2e 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc9e:	f001 bb2a 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cca6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ccaa:	430b      	orrs	r3, r1
 800ccac:	d151      	bne.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ccae:	4b81      	ldr	r3, [pc, #516]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ccb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ccb4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800ccb8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ccba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccbc:	2b80      	cmp	r3, #128	@ 0x80
 800ccbe:	d035      	beq.n	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc2:	2b80      	cmp	r3, #128	@ 0x80
 800ccc4:	d841      	bhi.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc8:	2b60      	cmp	r3, #96	@ 0x60
 800ccca:	d02a      	beq.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800cccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccce:	2b60      	cmp	r3, #96	@ 0x60
 800ccd0:	d83b      	bhi.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd4:	2b40      	cmp	r3, #64	@ 0x40
 800ccd6:	d009      	beq.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ccd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccda:	2b40      	cmp	r3, #64	@ 0x40
 800ccdc:	d835      	bhi.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ccde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00c      	beq.n	800ccfe <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800cce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce6:	2b20      	cmp	r3, #32
 800cce8:	d012      	beq.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ccea:	e02e      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7ff fb77 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ccfa:	f001 bafc 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccfe:	f107 0318 	add.w	r3, r7, #24
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7ff fcc8 	bl	800c698 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd0c:	f001 baf3 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd10:	f107 030c 	add.w	r3, r7, #12
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff fe19 	bl	800c94c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd1e:	f001 baea 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cd22:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cd26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd28:	f001 bae5 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd2c:	4b61      	ldr	r3, [pc, #388]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd38:	d103      	bne.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800cd3a:	4b60      	ldr	r3, [pc, #384]	@ (800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cd3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cd3e:	f001 bada 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cd42:	2300      	movs	r3, #0
 800cd44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd46:	f001 bad6 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd4e:	f001 bad2 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800cd52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd56:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800cd5a:	430b      	orrs	r3, r1
 800cd5c:	d158      	bne.n	800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800cd5e:	4b55      	ldr	r3, [pc, #340]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cd60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cd64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cd68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd70:	d03b      	beq.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800cd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd78:	d846      	bhi.n	800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cd80:	d02e      	beq.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800cd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cd88:	d83e      	bhi.n	800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd90:	d00b      	beq.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800cd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd98:	d836      	bhi.n	800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00d      	beq.n	800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800cda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cda6:	d012      	beq.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800cda8:	e02e      	b.n	800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff fb18 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cdb8:	f001 ba9d 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdbc:	f107 0318 	add.w	r3, r7, #24
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff fc69 	bl	800c698 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cdca:	f001 ba94 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdce:	f107 030c 	add.w	r3, r7, #12
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7ff fdba 	bl	800c94c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cddc:	f001 ba8b 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cde0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cde4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cde6:	f001 ba86 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cdea:	4b32      	ldr	r3, [pc, #200]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdf6:	d103      	bne.n	800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800cdf8:	4b30      	ldr	r3, [pc, #192]	@ (800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cdfa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cdfc:	f001 ba7b 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ce00:	2300      	movs	r3, #0
 800ce02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce04:	f001 ba77 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce0c:	f001 ba73 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800ce10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce14:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ce18:	430b      	orrs	r3, r1
 800ce1a:	d126      	bne.n	800ce6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800ce1c:	4b25      	ldr	r3, [pc, #148]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ce1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ce22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce26:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800ce28:	4b22      	ldr	r3, [pc, #136]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce34:	d106      	bne.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800ce36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d103      	bne.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800ce3c:	4b1f      	ldr	r3, [pc, #124]	@ (800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ce3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce40:	f001 ba59 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800ce44:	4b1b      	ldr	r3, [pc, #108]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce50:	d107      	bne.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800ce52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce58:	d103      	bne.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800ce5a:	4b19      	ldr	r3, [pc, #100]	@ (800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ce5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce5e:	f001 ba4a 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800ce62:	2300      	movs	r3, #0
 800ce64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce66:	f001 ba46 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800ce6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce6e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800ce72:	430b      	orrs	r3, r1
 800ce74:	d16e      	bne.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ce76:	4b0f      	ldr	r3, [pc, #60]	@ (800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ce78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce7c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ce80:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ce88:	d03d      	beq.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ce8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ce90:	d85c      	bhi.n	800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ce92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce98:	d014      	beq.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cea0:	d854      	bhi.n	800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800cea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d01f      	beq.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800cea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ceae:	d012      	beq.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ceb0:	e04c      	b.n	800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ceb2:	bf00      	nop
 800ceb4:	46020c00 	.word	0x46020c00
 800ceb8:	0007a120 	.word	0x0007a120
 800cebc:	00f42400 	.word	0x00f42400
 800cec0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7ff fa8b 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800cece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ced2:	f001 ba10 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ced6:	f107 0318 	add.w	r3, r7, #24
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7ff fbdc 	bl	800c698 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cee4:	f001 ba07 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800cee8:	4ba7      	ldr	r3, [pc, #668]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cef4:	d103      	bne.n	800cefe <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800cef6:	4ba5      	ldr	r3, [pc, #660]	@ (800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cef8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cefa:	f001 b9fc 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cefe:	2300      	movs	r3, #0
 800cf00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf02:	f001 b9f8 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cf06:	4ba0      	ldr	r3, [pc, #640]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f003 0320 	and.w	r3, r3, #32
 800cf0e:	2b20      	cmp	r3, #32
 800cf10:	d118      	bne.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf12:	4b9d      	ldr	r3, [pc, #628]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d005      	beq.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800cf1e:	4b9a      	ldr	r3, [pc, #616]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	0e1b      	lsrs	r3, r3, #24
 800cf24:	f003 030f 	and.w	r3, r3, #15
 800cf28:	e006      	b.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800cf2a:	4b97      	ldr	r3, [pc, #604]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cf2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cf30:	041b      	lsls	r3, r3, #16
 800cf32:	0e1b      	lsrs	r3, r3, #24
 800cf34:	f003 030f 	and.w	r3, r3, #15
 800cf38:	4a95      	ldr	r2, [pc, #596]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800cf3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cf40:	f001 b9d9 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cf44:	2300      	movs	r3, #0
 800cf46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf48:	f001 b9d5 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf50:	f001 b9d1 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cf54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf58:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800cf5c:	430b      	orrs	r3, r1
 800cf5e:	d17f      	bne.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cf60:	4b89      	ldr	r3, [pc, #548]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cf62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cf66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf6a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800cf6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d165      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800cf72:	4b85      	ldr	r3, [pc, #532]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cf74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf78:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800cf7c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf80:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cf84:	d034      	beq.n	800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800cf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf88:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cf8c:	d853      	bhi.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf94:	d00b      	beq.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800cf96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf9c:	d84b      	bhi.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d016      	beq.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cfaa:	d009      	beq.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800cfac:	e043      	b.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7ff fa16 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cfbc:	f001 b99b 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfc0:	f107 0318 	add.w	r3, r7, #24
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7ff fb67 	bl	800c698 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cfce:	f001 b992 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800cfd2:	4b6d      	ldr	r3, [pc, #436]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cfda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cfde:	d103      	bne.n	800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800cfe0:	4b6a      	ldr	r3, [pc, #424]	@ (800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cfe2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800cfe4:	f001 b987 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cfec:	f001 b983 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cff0:	4b65      	ldr	r3, [pc, #404]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f003 0320 	and.w	r3, r3, #32
 800cff8:	2b20      	cmp	r3, #32
 800cffa:	d118      	bne.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cffc:	4b62      	ldr	r3, [pc, #392]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d004:	2b00      	cmp	r3, #0
 800d006:	d005      	beq.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800d008:	4b5f      	ldr	r3, [pc, #380]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	0e1b      	lsrs	r3, r3, #24
 800d00e:	f003 030f 	and.w	r3, r3, #15
 800d012:	e006      	b.n	800d022 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800d014:	4b5c      	ldr	r3, [pc, #368]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d01a:	041b      	lsls	r3, r3, #16
 800d01c:	0e1b      	lsrs	r3, r3, #24
 800d01e:	f003 030f 	and.w	r3, r3, #15
 800d022:	4a5b      	ldr	r2, [pc, #364]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d028:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d02a:	f001 b964 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d02e:	2300      	movs	r3, #0
 800d030:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d032:	f001 b960 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800d036:	2300      	movs	r3, #0
 800d038:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d03a:	f001 b95c 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800d03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d044:	d108      	bne.n	800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7ff f9ca 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d052:	637b      	str	r3, [r7, #52]	@ 0x34
 800d054:	f001 b94f 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800d058:	2300      	movs	r3, #0
 800d05a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d05c:	f001 b94b 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800d060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d064:	1e51      	subs	r1, r2, #1
 800d066:	430b      	orrs	r3, r1
 800d068:	d136      	bne.n	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800d06a:	4b47      	ldr	r3, [pc, #284]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d06c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d070:	f003 0303 	and.w	r3, r3, #3
 800d074:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800d076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d104      	bne.n	800d086 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800d07c:	f7fe f994 	bl	800b3a8 <HAL_RCC_GetPCLK2Freq>
 800d080:	6378      	str	r0, [r7, #52]	@ 0x34
 800d082:	f001 b938 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800d086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d104      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d08c:	f7fe f85c 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d090:	6378      	str	r0, [r7, #52]	@ 0x34
 800d092:	f001 b930 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800d096:	4b3c      	ldr	r3, [pc, #240]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d09e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0a2:	d106      	bne.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d103      	bne.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800d0aa:	4b3a      	ldr	r3, [pc, #232]	@ (800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d0ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0ae:	f001 b922 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800d0b2:	4b35      	ldr	r3, [pc, #212]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d0b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0b8:	f003 0302 	and.w	r3, r3, #2
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d107      	bne.n	800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c2:	2b03      	cmp	r3, #3
 800d0c4:	d104      	bne.n	800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800d0c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0cc:	f001 b913 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0d4:	f001 b90f 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800d0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0dc:	1e91      	subs	r1, r2, #2
 800d0de:	430b      	orrs	r3, r1
 800d0e0:	d136      	bne.n	800d150 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800d0e2:	4b29      	ldr	r3, [pc, #164]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d0e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d0e8:	f003 030c 	and.w	r3, r3, #12
 800d0ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d104      	bne.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d0f4:	f7fe f944 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800d0f8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0fa:	f001 b8fc 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d100:	2b04      	cmp	r3, #4
 800d102:	d104      	bne.n	800d10e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d104:	f7fe f820 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d108:	6378      	str	r0, [r7, #52]	@ 0x34
 800d10a:	f001 b8f4 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800d10e:	4b1e      	ldr	r3, [pc, #120]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d11a:	d106      	bne.n	800d12a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800d11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11e:	2b08      	cmp	r3, #8
 800d120:	d103      	bne.n	800d12a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800d122:	4b1c      	ldr	r3, [pc, #112]	@ (800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d124:	637b      	str	r3, [r7, #52]	@ 0x34
 800d126:	f001 b8e6 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800d12a:	4b17      	ldr	r3, [pc, #92]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d12c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d130:	f003 0302 	and.w	r3, r3, #2
 800d134:	2b02      	cmp	r3, #2
 800d136:	d107      	bne.n	800d148 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800d138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d13a:	2b0c      	cmp	r3, #12
 800d13c:	d104      	bne.n	800d148 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800d13e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d142:	637b      	str	r3, [r7, #52]	@ 0x34
 800d144:	f001 b8d7 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800d148:	2300      	movs	r3, #0
 800d14a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d14c:	f001 b8d3 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800d150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d154:	1f11      	subs	r1, r2, #4
 800d156:	430b      	orrs	r3, r1
 800d158:	d13f      	bne.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800d15a:	4b0b      	ldr	r3, [pc, #44]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d15c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d160:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d164:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800d166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d104      	bne.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d16c:	f7fe f908 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800d170:	6378      	str	r0, [r7, #52]	@ 0x34
 800d172:	f001 b8c0 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800d176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d178:	2b10      	cmp	r3, #16
 800d17a:	d10d      	bne.n	800d198 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d17c:	f7fd ffe4 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d180:	6378      	str	r0, [r7, #52]	@ 0x34
 800d182:	f001 b8b8 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d186:	bf00      	nop
 800d188:	46020c00 	.word	0x46020c00
 800d18c:	02dc6c00 	.word	0x02dc6c00
 800d190:	0801273c 	.word	0x0801273c
 800d194:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800d198:	4ba8      	ldr	r3, [pc, #672]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1a4:	d106      	bne.n	800d1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a8:	2b20      	cmp	r3, #32
 800d1aa:	d103      	bne.n	800d1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800d1ac:	4ba4      	ldr	r3, [pc, #656]	@ (800d440 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d1ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1b0:	f001 b8a1 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800d1b4:	4ba1      	ldr	r3, [pc, #644]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d1b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1ba:	f003 0302 	and.w	r3, r3, #2
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d107      	bne.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c4:	2b30      	cmp	r3, #48	@ 0x30
 800d1c6:	d104      	bne.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800d1c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1ce:	f001 b892 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1d6:	f001 b88e 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800d1da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1de:	f1a2 0108 	sub.w	r1, r2, #8
 800d1e2:	430b      	orrs	r3, r1
 800d1e4:	d136      	bne.n	800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800d1e6:	4b95      	ldr	r3, [pc, #596]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d1e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d1ec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d1f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d104      	bne.n	800d202 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d1f8:	f7fe f8c2 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800d1fc:	6378      	str	r0, [r7, #52]	@ 0x34
 800d1fe:	f001 b87a 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800d202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d204:	2b40      	cmp	r3, #64	@ 0x40
 800d206:	d104      	bne.n	800d212 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d208:	f7fd ff9e 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d20c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d20e:	f001 b872 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800d212:	4b8a      	ldr	r3, [pc, #552]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d21a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d21e:	d106      	bne.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800d220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d222:	2b80      	cmp	r3, #128	@ 0x80
 800d224:	d103      	bne.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800d226:	4b86      	ldr	r3, [pc, #536]	@ (800d440 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d228:	637b      	str	r3, [r7, #52]	@ 0x34
 800d22a:	f001 b864 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800d22e:	4b83      	ldr	r3, [pc, #524]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d234:	f003 0302 	and.w	r3, r3, #2
 800d238:	2b02      	cmp	r3, #2
 800d23a:	d107      	bne.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800d23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d240:	d104      	bne.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800d242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d246:	637b      	str	r3, [r7, #52]	@ 0x34
 800d248:	f001 b855 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800d24c:	2300      	movs	r3, #0
 800d24e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d250:	f001 b851 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800d254:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d258:	f1a2 0110 	sub.w	r1, r2, #16
 800d25c:	430b      	orrs	r3, r1
 800d25e:	d139      	bne.n	800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800d260:	4b76      	ldr	r3, [pc, #472]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d26a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800d26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d104      	bne.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d272:	f7fe f885 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800d276:	6378      	str	r0, [r7, #52]	@ 0x34
 800d278:	f001 b83d 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800d27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d282:	d104      	bne.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d284:	f7fd ff60 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d288:	6378      	str	r0, [r7, #52]	@ 0x34
 800d28a:	f001 b834 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800d28e:	4b6b      	ldr	r3, [pc, #428]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d29a:	d107      	bne.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2a2:	d103      	bne.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800d2a4:	4b66      	ldr	r3, [pc, #408]	@ (800d440 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d2a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2a8:	f001 b825 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800d2ac:	4b63      	ldr	r3, [pc, #396]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d2ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d2b2:	f003 0302 	and.w	r3, r3, #2
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d108      	bne.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d2c0:	d104      	bne.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800d2c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2c8:	f001 b815 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2d0:	f001 b811 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800d2d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2d8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800d2dc:	430b      	orrs	r3, r1
 800d2de:	d139      	bne.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800d2e0:	4b56      	ldr	r3, [pc, #344]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d2e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d2ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800d2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d104      	bne.n	800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d2f2:	f7fe f845 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800d2f6:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2f8:	f000 bffd 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d302:	d104      	bne.n	800d30e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d304:	f7fd ff20 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d308:	6378      	str	r0, [r7, #52]	@ 0x34
 800d30a:	f000 bff4 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800d30e:	4b4b      	ldr	r3, [pc, #300]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d31a:	d107      	bne.n	800d32c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d31e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d322:	d103      	bne.n	800d32c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800d324:	4b46      	ldr	r3, [pc, #280]	@ (800d440 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d326:	637b      	str	r3, [r7, #52]	@ 0x34
 800d328:	f000 bfe5 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800d32c:	4b43      	ldr	r3, [pc, #268]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d32e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d332:	f003 0302 	and.w	r3, r3, #2
 800d336:	2b02      	cmp	r3, #2
 800d338:	d108      	bne.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800d33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d340:	d104      	bne.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800d342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d346:	637b      	str	r3, [r7, #52]	@ 0x34
 800d348:	f000 bfd5 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d34c:	2300      	movs	r3, #0
 800d34e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d350:	f000 bfd1 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800d354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d358:	f1a2 0120 	sub.w	r1, r2, #32
 800d35c:	430b      	orrs	r3, r1
 800d35e:	d158      	bne.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800d360:	4b36      	ldr	r3, [pc, #216]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d366:	f003 0307 	and.w	r3, r3, #7
 800d36a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800d36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d104      	bne.n	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800d372:	f7fe f82d 	bl	800b3d0 <HAL_RCC_GetPCLK3Freq>
 800d376:	6378      	str	r0, [r7, #52]	@ 0x34
 800d378:	f000 bfbd 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800d37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d104      	bne.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d382:	f7fd fee1 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d386:	6378      	str	r0, [r7, #52]	@ 0x34
 800d388:	f000 bfb5 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800d38c:	4b2b      	ldr	r3, [pc, #172]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d398:	d106      	bne.n	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800d39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d103      	bne.n	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800d3a0:	4b27      	ldr	r3, [pc, #156]	@ (800d440 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d3a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3a4:	f000 bfa7 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800d3a8:	4b24      	ldr	r3, [pc, #144]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d3aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d3ae:	f003 0302 	and.w	r3, r3, #2
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	d107      	bne.n	800d3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800d3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b8:	2b03      	cmp	r3, #3
 800d3ba:	d104      	bne.n	800d3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800d3bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3c2:	f000 bf98 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800d3c6:	4b1d      	ldr	r3, [pc, #116]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f003 0320 	and.w	r3, r3, #32
 800d3ce:	2b20      	cmp	r3, #32
 800d3d0:	d11b      	bne.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d4:	2b04      	cmp	r3, #4
 800d3d6:	d118      	bne.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3d8:	4b18      	ldr	r3, [pc, #96]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d005      	beq.n	800d3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800d3e4:	4b15      	ldr	r3, [pc, #84]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	0e1b      	lsrs	r3, r3, #24
 800d3ea:	f003 030f 	and.w	r3, r3, #15
 800d3ee:	e006      	b.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800d3f0:	4b12      	ldr	r3, [pc, #72]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d3f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3f6:	041b      	lsls	r3, r3, #16
 800d3f8:	0e1b      	lsrs	r3, r3, #24
 800d3fa:	f003 030f 	and.w	r3, r3, #15
 800d3fe:	4a11      	ldr	r2, [pc, #68]	@ (800d444 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d404:	637b      	str	r3, [r7, #52]	@ 0x34
 800d406:	f000 bf76 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800d40a:	2300      	movs	r3, #0
 800d40c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d40e:	f000 bf72 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800d412:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d416:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d41a:	430b      	orrs	r3, r1
 800d41c:	d172      	bne.n	800d504 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800d41e:	4b07      	ldr	r3, [pc, #28]	@ (800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d424:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d428:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800d42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d42c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d430:	d10a      	bne.n	800d448 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d432:	f7fd fe89 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d436:	6378      	str	r0, [r7, #52]	@ 0x34
 800d438:	f000 bf5d 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d43c:	46020c00 	.word	0x46020c00
 800d440:	00f42400 	.word	0x00f42400
 800d444:	0801273c 	.word	0x0801273c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800d448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d44a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d44e:	d108      	bne.n	800d462 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d450:	f107 0318 	add.w	r3, r7, #24
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff f91f 	bl	800c698 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800d45a:	6a3b      	ldr	r3, [r7, #32]
 800d45c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d45e:	f000 bf4a 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800d462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d464:	2b00      	cmp	r3, #0
 800d466:	d104      	bne.n	800d472 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800d468:	f7fd ff70 	bl	800b34c <HAL_RCC_GetHCLKFreq>
 800d46c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d46e:	f000 bf42 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800d472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d474:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d478:	d122      	bne.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d47a:	4bb0      	ldr	r3, [pc, #704]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f003 0320 	and.w	r3, r3, #32
 800d482:	2b20      	cmp	r3, #32
 800d484:	d118      	bne.n	800d4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d486:	4bad      	ldr	r3, [pc, #692]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d005      	beq.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800d492:	4baa      	ldr	r3, [pc, #680]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	0e1b      	lsrs	r3, r3, #24
 800d498:	f003 030f 	and.w	r3, r3, #15
 800d49c:	e006      	b.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800d49e:	4ba7      	ldr	r3, [pc, #668]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d4a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d4a4:	041b      	lsls	r3, r3, #16
 800d4a6:	0e1b      	lsrs	r3, r3, #24
 800d4a8:	f003 030f 	and.w	r3, r3, #15
 800d4ac:	4aa4      	ldr	r2, [pc, #656]	@ (800d740 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4b4:	f000 bf1f 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4bc:	f000 bf1b 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800d4c0:	4b9e      	ldr	r3, [pc, #632]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4cc:	d107      	bne.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d4d4:	d103      	bne.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800d4d6:	4b9b      	ldr	r3, [pc, #620]	@ (800d744 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d4d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4da:	f000 bf0c 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800d4de:	4b97      	ldr	r3, [pc, #604]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4ea:	d107      	bne.n	800d4fc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d4f2:	d103      	bne.n	800d4fc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800d4f4:	4b93      	ldr	r3, [pc, #588]	@ (800d744 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d4f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4f8:	f000 befd 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800d500:	f000 bef9 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800d504:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d508:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d50c:	430b      	orrs	r3, r1
 800d50e:	d158      	bne.n	800d5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800d510:	4b8a      	ldr	r3, [pc, #552]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d512:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d516:	f003 0307 	and.w	r3, r3, #7
 800d51a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51e:	2b04      	cmp	r3, #4
 800d520:	d84b      	bhi.n	800d5ba <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800d522:	a201      	add	r2, pc, #4	@ (adr r2, 800d528 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800d524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d528:	0800d561 	.word	0x0800d561
 800d52c:	0800d53d 	.word	0x0800d53d
 800d530:	0800d54f 	.word	0x0800d54f
 800d534:	0800d56b 	.word	0x0800d56b
 800d538:	0800d575 	.word	0x0800d575
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d53c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d540:	4618      	mov	r0, r3
 800d542:	f7fe ff4f 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d548:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d54a:	f000 bed4 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d54e:	f107 030c 	add.w	r3, r7, #12
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff f9fa 	bl	800c94c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d55c:	f000 becb 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d560:	f7fd fef4 	bl	800b34c <HAL_RCC_GetHCLKFreq>
 800d564:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d566:	f000 bec6 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d56a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d56e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d570:	f000 bec1 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d574:	4b71      	ldr	r3, [pc, #452]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f003 0320 	and.w	r3, r3, #32
 800d57c:	2b20      	cmp	r3, #32
 800d57e:	d118      	bne.n	800d5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d580:	4b6e      	ldr	r3, [pc, #440]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d005      	beq.n	800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800d58c:	4b6b      	ldr	r3, [pc, #428]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	0e1b      	lsrs	r3, r3, #24
 800d592:	f003 030f 	and.w	r3, r3, #15
 800d596:	e006      	b.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800d598:	4b68      	ldr	r3, [pc, #416]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d59a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d59e:	041b      	lsls	r3, r3, #16
 800d5a0:	0e1b      	lsrs	r3, r3, #24
 800d5a2:	f003 030f 	and.w	r3, r3, #15
 800d5a6:	4a66      	ldr	r2, [pc, #408]	@ (800d740 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d5ae:	f000 bea2 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5b6:	f000 be9e 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5be:	f000 be9a 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800d5c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5c6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800d5ca:	430b      	orrs	r3, r1
 800d5cc:	d167      	bne.n	800d69e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800d5ce:	4b5b      	ldr	r3, [pc, #364]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d5d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d5d4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d5d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d5e0:	d036      	beq.n	800d650 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d5e8:	d855      	bhi.n	800d696 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d5f0:	d029      	beq.n	800d646 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d5f8:	d84d      	bhi.n	800d696 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d600:	d013      	beq.n	800d62a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800d602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d608:	d845      	bhi.n	800d696 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d015      	beq.n	800d63c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800d610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d616:	d13e      	bne.n	800d696 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe fee1 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d624:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d626:	f000 be66 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d62a:	f107 030c 	add.w	r3, r7, #12
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff f98c 	bl	800c94c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d638:	f000 be5d 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d63c:	f7fd fe86 	bl	800b34c <HAL_RCC_GetHCLKFreq>
 800d640:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d642:	f000 be58 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d646:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d64a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d64c:	f000 be53 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d650:	4b3a      	ldr	r3, [pc, #232]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f003 0320 	and.w	r3, r3, #32
 800d658:	2b20      	cmp	r3, #32
 800d65a:	d118      	bne.n	800d68e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d65c:	4b37      	ldr	r3, [pc, #220]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d664:	2b00      	cmp	r3, #0
 800d666:	d005      	beq.n	800d674 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800d668:	4b34      	ldr	r3, [pc, #208]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	0e1b      	lsrs	r3, r3, #24
 800d66e:	f003 030f 	and.w	r3, r3, #15
 800d672:	e006      	b.n	800d682 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d674:	4b31      	ldr	r3, [pc, #196]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d67a:	041b      	lsls	r3, r3, #16
 800d67c:	0e1b      	lsrs	r3, r3, #24
 800d67e:	f003 030f 	and.w	r3, r3, #15
 800d682:	4a2f      	ldr	r2, [pc, #188]	@ (800d740 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d688:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d68a:	f000 be34 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d68e:	2300      	movs	r3, #0
 800d690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d692:	f000 be30 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d696:	2300      	movs	r3, #0
 800d698:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d69a:	f000 be2c 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800d69e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6a2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800d6a6:	430b      	orrs	r3, r1
 800d6a8:	d152      	bne.n	800d750 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800d6aa:	4b24      	ldr	r3, [pc, #144]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d6ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d6b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d104      	bne.n	800d6c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d6bc:	f7fd fe60 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800d6c0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6c2:	f000 be18 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800d6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6cc:	d104      	bne.n	800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d6ce:	f7fd fd3b 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d6d2:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6d4:	f000 be0f 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d6d8:	4b18      	ldr	r3, [pc, #96]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6e4:	d107      	bne.n	800d6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6ec:	d103      	bne.n	800d6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800d6ee:	4b15      	ldr	r3, [pc, #84]	@ (800d744 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d6f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6f2:	f000 be00 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d6f6:	4b11      	ldr	r3, [pc, #68]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f003 0320 	and.w	r3, r3, #32
 800d6fe:	2b20      	cmp	r3, #32
 800d700:	d122      	bne.n	800d748 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800d702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d704:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d708:	d11e      	bne.n	800d748 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d70a:	4b0c      	ldr	r3, [pc, #48]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d712:	2b00      	cmp	r3, #0
 800d714:	d005      	beq.n	800d722 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800d716:	4b09      	ldr	r3, [pc, #36]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d718:	689b      	ldr	r3, [r3, #8]
 800d71a:	0e1b      	lsrs	r3, r3, #24
 800d71c:	f003 030f 	and.w	r3, r3, #15
 800d720:	e006      	b.n	800d730 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800d722:	4b06      	ldr	r3, [pc, #24]	@ (800d73c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d728:	041b      	lsls	r3, r3, #16
 800d72a:	0e1b      	lsrs	r3, r3, #24
 800d72c:	f003 030f 	and.w	r3, r3, #15
 800d730:	4a03      	ldr	r2, [pc, #12]	@ (800d740 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d736:	637b      	str	r3, [r7, #52]	@ 0x34
 800d738:	f000 bddd 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d73c:	46020c00 	.word	0x46020c00
 800d740:	0801273c 	.word	0x0801273c
 800d744:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d748:	2300      	movs	r3, #0
 800d74a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d74c:	f000 bdd3 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d750:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d754:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d758:	430b      	orrs	r3, r1
 800d75a:	d14c      	bne.n	800d7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d75c:	4ba8      	ldr	r3, [pc, #672]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d75e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d762:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d766:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d104      	bne.n	800d778 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d76e:	f7fd fe07 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800d772:	6378      	str	r0, [r7, #52]	@ 0x34
 800d774:	f000 bdbf 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d77e:	d104      	bne.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d780:	f7fd fce2 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d784:	6378      	str	r0, [r7, #52]	@ 0x34
 800d786:	f000 bdb6 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d78a:	4b9d      	ldr	r3, [pc, #628]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d796:	d107      	bne.n	800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d79e:	d103      	bne.n	800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d7a0:	4b98      	ldr	r3, [pc, #608]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d7a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7a4:	f000 bda7 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d7a8:	4b95      	ldr	r3, [pc, #596]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f003 0320 	and.w	r3, r3, #32
 800d7b0:	2b20      	cmp	r3, #32
 800d7b2:	d11c      	bne.n	800d7ee <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d7ba:	d118      	bne.n	800d7ee <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d7bc:	4b90      	ldr	r3, [pc, #576]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d7c8:	4b8d      	ldr	r3, [pc, #564]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	0e1b      	lsrs	r3, r3, #24
 800d7ce:	f003 030f 	and.w	r3, r3, #15
 800d7d2:	e006      	b.n	800d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d7d4:	4b8a      	ldr	r3, [pc, #552]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d7d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d7da:	041b      	lsls	r3, r3, #16
 800d7dc:	0e1b      	lsrs	r3, r3, #24
 800d7de:	f003 030f 	and.w	r3, r3, #15
 800d7e2:	4a89      	ldr	r2, [pc, #548]	@ (800da08 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7ea:	f000 bd84 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7f2:	f000 bd80 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d7f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7fa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d7fe:	430b      	orrs	r3, r1
 800d800:	d158      	bne.n	800d8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d802:	4b7f      	ldr	r3, [pc, #508]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d808:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d80c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d810:	2bc0      	cmp	r3, #192	@ 0xc0
 800d812:	d028      	beq.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d816:	2bc0      	cmp	r3, #192	@ 0xc0
 800d818:	d848      	bhi.n	800d8ac <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81c:	2b80      	cmp	r3, #128	@ 0x80
 800d81e:	d00e      	beq.n	800d83e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d822:	2b80      	cmp	r3, #128	@ 0x80
 800d824:	d842      	bhi.n	800d8ac <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d003      	beq.n	800d834 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82e:	2b40      	cmp	r3, #64	@ 0x40
 800d830:	d014      	beq.n	800d85c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d832:	e03b      	b.n	800d8ac <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d834:	f7fd fdcc 	bl	800b3d0 <HAL_RCC_GetPCLK3Freq>
 800d838:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d83a:	f000 bd5c 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d83e:	4b70      	ldr	r3, [pc, #448]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d84a:	d103      	bne.n	800d854 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d84c:	4b6d      	ldr	r3, [pc, #436]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d84e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d850:	f000 bd51 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d854:	2300      	movs	r3, #0
 800d856:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d858:	f000 bd4d 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d85c:	f7fd fc74 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d860:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d862:	f000 bd48 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d866:	4b66      	ldr	r3, [pc, #408]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f003 0320 	and.w	r3, r3, #32
 800d86e:	2b20      	cmp	r3, #32
 800d870:	d118      	bne.n	800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d872:	4b63      	ldr	r3, [pc, #396]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d005      	beq.n	800d88a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d87e:	4b60      	ldr	r3, [pc, #384]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	0e1b      	lsrs	r3, r3, #24
 800d884:	f003 030f 	and.w	r3, r3, #15
 800d888:	e006      	b.n	800d898 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d88a:	4b5d      	ldr	r3, [pc, #372]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d88c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d890:	041b      	lsls	r3, r3, #16
 800d892:	0e1b      	lsrs	r3, r3, #24
 800d894:	f003 030f 	and.w	r3, r3, #15
 800d898:	4a5b      	ldr	r2, [pc, #364]	@ (800da08 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d89a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d89e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8a0:	f000 bd29 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8a8:	f000 bd25 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8b0:	f000 bd21 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d8b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8b8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d8bc:	430b      	orrs	r3, r1
 800d8be:	d14c      	bne.n	800d95a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d8c0:	4b4f      	ldr	r3, [pc, #316]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d8c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d8c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d8ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d104      	bne.n	800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d8d2:	f7fd fd55 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800d8d6:	6378      	str	r0, [r7, #52]	@ 0x34
 800d8d8:	f000 bd0d 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d8e2:	d104      	bne.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d8e4:	f7fd fc30 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d8e8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d8ea:	f000 bd04 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d8ee:	4b44      	ldr	r3, [pc, #272]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8fa:	d107      	bne.n	800d90c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d902:	d103      	bne.n	800d90c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d904:	4b3f      	ldr	r3, [pc, #252]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d906:	637b      	str	r3, [r7, #52]	@ 0x34
 800d908:	f000 bcf5 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d90c:	4b3c      	ldr	r3, [pc, #240]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f003 0320 	and.w	r3, r3, #32
 800d914:	2b20      	cmp	r3, #32
 800d916:	d11c      	bne.n	800d952 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d91e:	d118      	bne.n	800d952 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d920:	4b37      	ldr	r3, [pc, #220]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d005      	beq.n	800d938 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d92c:	4b34      	ldr	r3, [pc, #208]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	0e1b      	lsrs	r3, r3, #24
 800d932:	f003 030f 	and.w	r3, r3, #15
 800d936:	e006      	b.n	800d946 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d938:	4b31      	ldr	r3, [pc, #196]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d93a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d93e:	041b      	lsls	r3, r3, #16
 800d940:	0e1b      	lsrs	r3, r3, #24
 800d942:	f003 030f 	and.w	r3, r3, #15
 800d946:	4a30      	ldr	r2, [pc, #192]	@ (800da08 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d94c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d94e:	f000 bcd2 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d952:	2300      	movs	r3, #0
 800d954:	637b      	str	r3, [r7, #52]	@ 0x34
 800d956:	f000 bcce 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d95a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d95e:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d962:	430b      	orrs	r3, r1
 800d964:	d152      	bne.n	800da0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d966:	4b26      	ldr	r3, [pc, #152]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d968:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d96c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d970:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d974:	2b00      	cmp	r3, #0
 800d976:	d104      	bne.n	800d982 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d978:	f7fd fd02 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800d97c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d97e:	f000 bcba 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d988:	d104      	bne.n	800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d98a:	f7fd fbdd 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800d98e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d990:	f000 bcb1 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d994:	4b1a      	ldr	r3, [pc, #104]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d99c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9a0:	d107      	bne.n	800d9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d9a8:	d103      	bne.n	800d9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d9aa:	4b16      	ldr	r3, [pc, #88]	@ (800da04 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d9ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9ae:	f000 bca2 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d9b2:	4b13      	ldr	r3, [pc, #76]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f003 0320 	and.w	r3, r3, #32
 800d9ba:	2b20      	cmp	r3, #32
 800d9bc:	d11c      	bne.n	800d9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d9c4:	d118      	bne.n	800d9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d9c6:	4b0e      	ldr	r3, [pc, #56]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d005      	beq.n	800d9de <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d9d2:	4b0b      	ldr	r3, [pc, #44]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	0e1b      	lsrs	r3, r3, #24
 800d9d8:	f003 030f 	and.w	r3, r3, #15
 800d9dc:	e006      	b.n	800d9ec <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d9de:	4b08      	ldr	r3, [pc, #32]	@ (800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d9e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9e4:	041b      	lsls	r3, r3, #16
 800d9e6:	0e1b      	lsrs	r3, r3, #24
 800d9e8:	f003 030f 	and.w	r3, r3, #15
 800d9ec:	4a06      	ldr	r2, [pc, #24]	@ (800da08 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f4:	f000 bc7f 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9fc:	f000 bc7b 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800da00:	46020c00 	.word	0x46020c00
 800da04:	00f42400 	.word	0x00f42400
 800da08:	0801273c 	.word	0x0801273c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800da0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da10:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800da14:	430b      	orrs	r3, r1
 800da16:	d14c      	bne.n	800dab2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800da18:	4ba6      	ldr	r3, [pc, #664]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800da1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800da1e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800da22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800da24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da26:	2b00      	cmp	r3, #0
 800da28:	d104      	bne.n	800da34 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800da2a:	f7fd fca9 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800da2e:	6378      	str	r0, [r7, #52]	@ 0x34
 800da30:	f000 bc61 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800da34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da3a:	d104      	bne.n	800da46 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800da3c:	f7fd fb84 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800da40:	6378      	str	r0, [r7, #52]	@ 0x34
 800da42:	f000 bc58 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800da46:	4b9b      	ldr	r3, [pc, #620]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da52:	d107      	bne.n	800da64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800da54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da5a:	d103      	bne.n	800da64 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800da5c:	4b96      	ldr	r3, [pc, #600]	@ (800dcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800da5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800da60:	f000 bc49 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800da64:	4b93      	ldr	r3, [pc, #588]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f003 0320 	and.w	r3, r3, #32
 800da6c:	2b20      	cmp	r3, #32
 800da6e:	d11c      	bne.n	800daaa <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800da70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da72:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800da76:	d118      	bne.n	800daaa <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800da78:	4b8e      	ldr	r3, [pc, #568]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da80:	2b00      	cmp	r3, #0
 800da82:	d005      	beq.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800da84:	4b8b      	ldr	r3, [pc, #556]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	0e1b      	lsrs	r3, r3, #24
 800da8a:	f003 030f 	and.w	r3, r3, #15
 800da8e:	e006      	b.n	800da9e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800da90:	4b88      	ldr	r3, [pc, #544]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800da92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da96:	041b      	lsls	r3, r3, #16
 800da98:	0e1b      	lsrs	r3, r3, #24
 800da9a:	f003 030f 	and.w	r3, r3, #15
 800da9e:	4a87      	ldr	r2, [pc, #540]	@ (800dcbc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800daa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800daa6:	f000 bc26 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800daaa:	2300      	movs	r3, #0
 800daac:	637b      	str	r3, [r7, #52]	@ 0x34
 800daae:	f000 bc22 	b.w	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800dab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dab6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800daba:	430b      	orrs	r3, r1
 800dabc:	d164      	bne.n	800db88 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800dabe:	4b7d      	ldr	r3, [pc, #500]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dac4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dac8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800daca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d120      	bne.n	800db12 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dad0:	4b78      	ldr	r3, [pc, #480]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f003 0320 	and.w	r3, r3, #32
 800dad8:	2b20      	cmp	r3, #32
 800dada:	d117      	bne.n	800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dadc:	4b75      	ldr	r3, [pc, #468]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d005      	beq.n	800daf4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800dae8:	4b72      	ldr	r3, [pc, #456]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	0e1b      	lsrs	r3, r3, #24
 800daee:	f003 030f 	and.w	r3, r3, #15
 800daf2:	e006      	b.n	800db02 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800daf4:	4b6f      	ldr	r3, [pc, #444]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800daf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dafa:	041b      	lsls	r3, r3, #16
 800dafc:	0e1b      	lsrs	r3, r3, #24
 800dafe:	f003 030f 	and.w	r3, r3, #15
 800db02:	4a6e      	ldr	r2, [pc, #440]	@ (800dcbc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800db04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db08:	637b      	str	r3, [r7, #52]	@ 0x34
 800db0a:	e3f4      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800db0c:	2300      	movs	r3, #0
 800db0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db10:	e3f1      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800db12:	4b68      	ldr	r3, [pc, #416]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800db14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800db20:	d112      	bne.n	800db48 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800db22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db28:	d10e      	bne.n	800db48 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800db2a:	4b62      	ldr	r3, [pc, #392]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800db2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db38:	d102      	bne.n	800db40 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800db3a:	23fa      	movs	r3, #250	@ 0xfa
 800db3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800db3e:	e3da      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800db40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800db44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800db46:	e3d6      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800db48:	4b5a      	ldr	r3, [pc, #360]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db54:	d106      	bne.n	800db64 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800db56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db5c:	d102      	bne.n	800db64 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800db5e:	4b56      	ldr	r3, [pc, #344]	@ (800dcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800db60:	637b      	str	r3, [r7, #52]	@ 0x34
 800db62:	e3c8      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800db64:	4b53      	ldr	r3, [pc, #332]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800db66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db6a:	f003 0302 	and.w	r3, r3, #2
 800db6e:	2b02      	cmp	r3, #2
 800db70:	d107      	bne.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800db72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db78:	d103      	bne.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800db7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db80:	e3b9      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800db82:	2300      	movs	r3, #0
 800db84:	637b      	str	r3, [r7, #52]	@ 0x34
 800db86:	e3b6      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800db88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db8c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800db90:	430b      	orrs	r3, r1
 800db92:	d164      	bne.n	800dc5e <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800db94:	4b47      	ldr	r3, [pc, #284]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800db96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800db9a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800db9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800dba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d120      	bne.n	800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dba6:	4b43      	ldr	r3, [pc, #268]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f003 0320 	and.w	r3, r3, #32
 800dbae:	2b20      	cmp	r3, #32
 800dbb0:	d117      	bne.n	800dbe2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dbb2:	4b40      	ldr	r3, [pc, #256]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d005      	beq.n	800dbca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800dbbe:	4b3d      	ldr	r3, [pc, #244]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	0e1b      	lsrs	r3, r3, #24
 800dbc4:	f003 030f 	and.w	r3, r3, #15
 800dbc8:	e006      	b.n	800dbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800dbca:	4b3a      	ldr	r3, [pc, #232]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dbcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dbd0:	041b      	lsls	r3, r3, #16
 800dbd2:	0e1b      	lsrs	r3, r3, #24
 800dbd4:	f003 030f 	and.w	r3, r3, #15
 800dbd8:	4a38      	ldr	r2, [pc, #224]	@ (800dcbc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800dbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbde:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbe0:	e389      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbe6:	e386      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800dbe8:	4b32      	ldr	r3, [pc, #200]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dbea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dbee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dbf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dbf6:	d112      	bne.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dbfe:	d10e      	bne.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dc00:	4b2c      	ldr	r3, [pc, #176]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dc02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dc06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dc0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc0e:	d102      	bne.n	800dc16 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800dc10:	23fa      	movs	r3, #250	@ 0xfa
 800dc12:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dc14:	e36f      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800dc16:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dc1a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dc1c:	e36b      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800dc1e:	4b25      	ldr	r3, [pc, #148]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc2a:	d106      	bne.n	800dc3a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dc32:	d102      	bne.n	800dc3a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800dc34:	4b20      	ldr	r3, [pc, #128]	@ (800dcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800dc36:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc38:	e35d      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800dc3a:	4b1e      	ldr	r3, [pc, #120]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dc3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dc40:	f003 0302 	and.w	r3, r3, #2
 800dc44:	2b02      	cmp	r3, #2
 800dc46:	d107      	bne.n	800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800dc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dc4e:	d103      	bne.n	800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800dc50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc54:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc56:	e34e      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc5c:	e34b      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800dc5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc62:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800dc66:	430b      	orrs	r3, r1
 800dc68:	d14e      	bne.n	800dd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800dc6a:	4b12      	ldr	r3, [pc, #72]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dc6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dc70:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800dc74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800dc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d103      	bne.n	800dc84 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dc7c:	f7fd fb80 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800dc80:	6378      	str	r0, [r7, #52]	@ 0x34
 800dc82:	e338      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800dc84:	4b0b      	ldr	r3, [pc, #44]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dc86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dc8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc92:	d119      	bne.n	800dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800dc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc9a:	d115      	bne.n	800dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dc9c:	4b05      	ldr	r3, [pc, #20]	@ (800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dc9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dca6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dcaa:	d109      	bne.n	800dcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800dcac:	23fa      	movs	r3, #250	@ 0xfa
 800dcae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dcb0:	e321      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800dcb2:	bf00      	nop
 800dcb4:	46020c00 	.word	0x46020c00
 800dcb8:	00f42400 	.word	0x00f42400
 800dcbc:	0801273c 	.word	0x0801273c
      }
      else
      {
        frequency = LSI_VALUE;
 800dcc0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dcc4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dcc6:	e316      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800dcc8:	4ba8      	ldr	r3, [pc, #672]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dcd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcd4:	d106      	bne.n	800dce4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800dcdc:	d102      	bne.n	800dce4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800dcde:	4ba4      	ldr	r3, [pc, #656]	@ (800df70 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800dce0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dce2:	e308      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800dce4:	4ba1      	ldr	r3, [pc, #644]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800dce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dcea:	f003 0302 	and.w	r3, r3, #2
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	d107      	bne.n	800dd02 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800dcf8:	d103      	bne.n	800dd02 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800dcfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd00:	e2f9      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800dd02:	2300      	movs	r3, #0
 800dd04:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd06:	e2f6      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800dd08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd0c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800dd10:	430b      	orrs	r3, r1
 800dd12:	d12d      	bne.n	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800dd14:	4b95      	ldr	r3, [pc, #596]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800dd16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dd1a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800dd1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800dd20:	4b92      	ldr	r3, [pc, #584]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dd2c:	d105      	bne.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d102      	bne.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800dd34:	4b8e      	ldr	r3, [pc, #568]	@ (800df70 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800dd36:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd38:	e2dd      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800dd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd40:	d107      	bne.n	800dd52 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dd42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fe fb4c 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800dd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd50:	e2d1      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800dd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd58:	d107      	bne.n	800dd6a <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd5a:	f107 0318 	add.w	r3, r7, #24
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fe fc9a 	bl	800c698 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd68:	e2c5      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd6e:	e2c2      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800dd70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd74:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800dd78:	430b      	orrs	r3, r1
 800dd7a:	d156      	bne.n	800de2a <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800dd7c:	4b7b      	ldr	r3, [pc, #492]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800dd7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dd82:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800dd86:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800dd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dd8e:	d028      	beq.n	800dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800dd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dd96:	d845      	bhi.n	800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800dd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd9e:	d013      	beq.n	800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800dda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dda6:	d83d      	bhi.n	800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800dda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d004      	beq.n	800ddb8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800ddae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddb4:	d004      	beq.n	800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800ddb6:	e035      	b.n	800de24 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800ddb8:	f7fd faf6 	bl	800b3a8 <HAL_RCC_GetPCLK2Freq>
 800ddbc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ddbe:	e29a      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ddc0:	f7fd f9c2 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800ddc4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ddc6:	e296      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ddc8:	4b68      	ldr	r3, [pc, #416]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ddd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddd4:	d102      	bne.n	800dddc <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800ddd6:	4b66      	ldr	r3, [pc, #408]	@ (800df70 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ddd8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ddda:	e28c      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dddc:	2300      	movs	r3, #0
 800ddde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dde0:	e289      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dde2:	4b62      	ldr	r3, [pc, #392]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f003 0320 	and.w	r3, r3, #32
 800ddea:	2b20      	cmp	r3, #32
 800ddec:	d117      	bne.n	800de1e <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ddee:	4b5f      	ldr	r3, [pc, #380]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d005      	beq.n	800de06 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800ddfa:	4b5c      	ldr	r3, [pc, #368]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	0e1b      	lsrs	r3, r3, #24
 800de00:	f003 030f 	and.w	r3, r3, #15
 800de04:	e006      	b.n	800de14 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800de06:	4b59      	ldr	r3, [pc, #356]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800de08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800de0c:	041b      	lsls	r3, r3, #16
 800de0e:	0e1b      	lsrs	r3, r3, #24
 800de10:	f003 030f 	and.w	r3, r3, #15
 800de14:	4a57      	ldr	r2, [pc, #348]	@ (800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800de16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800de1c:	e26b      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800de1e:	2300      	movs	r3, #0
 800de20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de22:	e268      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800de24:	2300      	movs	r3, #0
 800de26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de28:	e265      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800de2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de2e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800de32:	430b      	orrs	r3, r1
 800de34:	d156      	bne.n	800dee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800de36:	4b4d      	ldr	r3, [pc, #308]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800de38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800de3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800de40:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800de42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de48:	d028      	beq.n	800de9c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800de4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de50:	d845      	bhi.n	800dede <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800de52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de58:	d013      	beq.n	800de82 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800de5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de60:	d83d      	bhi.n	800dede <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800de62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de64:	2b00      	cmp	r3, #0
 800de66:	d004      	beq.n	800de72 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800de68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de6e:	d004      	beq.n	800de7a <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800de70:	e035      	b.n	800dede <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800de72:	f7fd fa85 	bl	800b380 <HAL_RCC_GetPCLK1Freq>
 800de76:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800de78:	e23d      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800de7a:	f7fd f965 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800de7e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800de80:	e239      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800de82:	4b3a      	ldr	r3, [pc, #232]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de8e:	d102      	bne.n	800de96 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800de90:	4b37      	ldr	r3, [pc, #220]	@ (800df70 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800de92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800de94:	e22f      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800de96:	2300      	movs	r3, #0
 800de98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de9a:	e22c      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800de9c:	4b33      	ldr	r3, [pc, #204]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f003 0320 	and.w	r3, r3, #32
 800dea4:	2b20      	cmp	r3, #32
 800dea6:	d117      	bne.n	800ded8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dea8:	4b30      	ldr	r3, [pc, #192]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d005      	beq.n	800dec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800deb4:	4b2d      	ldr	r3, [pc, #180]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	0e1b      	lsrs	r3, r3, #24
 800deba:	f003 030f 	and.w	r3, r3, #15
 800debe:	e006      	b.n	800dece <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800dec0:	4b2a      	ldr	r3, [pc, #168]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800dec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dec6:	041b      	lsls	r3, r3, #16
 800dec8:	0e1b      	lsrs	r3, r3, #24
 800deca:	f003 030f 	and.w	r3, r3, #15
 800dece:	4a29      	ldr	r2, [pc, #164]	@ (800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800ded0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ded4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ded6:	e20e      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ded8:	2300      	movs	r3, #0
 800deda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dedc:	e20b      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dede:	2300      	movs	r3, #0
 800dee0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dee2:	e208      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800dee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dee8:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800deec:	430b      	orrs	r3, r1
 800deee:	d17c      	bne.n	800dfea <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800def0:	4b1e      	ldr	r3, [pc, #120]	@ (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800def2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800def6:	f003 0318 	and.w	r3, r3, #24
 800defa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800defc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defe:	2b18      	cmp	r3, #24
 800df00:	d870      	bhi.n	800dfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800df02:	a201      	add	r2, pc, #4	@ (adr r2, 800df08 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800df04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df08:	0800df79 	.word	0x0800df79
 800df0c:	0800dfe5 	.word	0x0800dfe5
 800df10:	0800dfe5 	.word	0x0800dfe5
 800df14:	0800dfe5 	.word	0x0800dfe5
 800df18:	0800dfe5 	.word	0x0800dfe5
 800df1c:	0800dfe5 	.word	0x0800dfe5
 800df20:	0800dfe5 	.word	0x0800dfe5
 800df24:	0800dfe5 	.word	0x0800dfe5
 800df28:	0800df81 	.word	0x0800df81
 800df2c:	0800dfe5 	.word	0x0800dfe5
 800df30:	0800dfe5 	.word	0x0800dfe5
 800df34:	0800dfe5 	.word	0x0800dfe5
 800df38:	0800dfe5 	.word	0x0800dfe5
 800df3c:	0800dfe5 	.word	0x0800dfe5
 800df40:	0800dfe5 	.word	0x0800dfe5
 800df44:	0800dfe5 	.word	0x0800dfe5
 800df48:	0800df89 	.word	0x0800df89
 800df4c:	0800dfe5 	.word	0x0800dfe5
 800df50:	0800dfe5 	.word	0x0800dfe5
 800df54:	0800dfe5 	.word	0x0800dfe5
 800df58:	0800dfe5 	.word	0x0800dfe5
 800df5c:	0800dfe5 	.word	0x0800dfe5
 800df60:	0800dfe5 	.word	0x0800dfe5
 800df64:	0800dfe5 	.word	0x0800dfe5
 800df68:	0800dfa3 	.word	0x0800dfa3
 800df6c:	46020c00 	.word	0x46020c00
 800df70:	00f42400 	.word	0x00f42400
 800df74:	0801273c 	.word	0x0801273c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800df78:	f7fd fa2a 	bl	800b3d0 <HAL_RCC_GetPCLK3Freq>
 800df7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800df7e:	e1ba      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800df80:	f7fd f8e2 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800df84:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800df86:	e1b6      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800df88:	4b9f      	ldr	r3, [pc, #636]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800df90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df94:	d102      	bne.n	800df9c <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800df96:	4b9d      	ldr	r3, [pc, #628]	@ (800e20c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800df98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800df9a:	e1ac      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800df9c:	2300      	movs	r3, #0
 800df9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dfa0:	e1a9      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dfa2:	4b99      	ldr	r3, [pc, #612]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f003 0320 	and.w	r3, r3, #32
 800dfaa:	2b20      	cmp	r3, #32
 800dfac:	d117      	bne.n	800dfde <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dfae:	4b96      	ldr	r3, [pc, #600]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dfb0:	689b      	ldr	r3, [r3, #8]
 800dfb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d005      	beq.n	800dfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800dfba:	4b93      	ldr	r3, [pc, #588]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	0e1b      	lsrs	r3, r3, #24
 800dfc0:	f003 030f 	and.w	r3, r3, #15
 800dfc4:	e006      	b.n	800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800dfc6:	4b90      	ldr	r3, [pc, #576]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dfc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dfcc:	041b      	lsls	r3, r3, #16
 800dfce:	0e1b      	lsrs	r3, r3, #24
 800dfd0:	f003 030f 	and.w	r3, r3, #15
 800dfd4:	4a8e      	ldr	r2, [pc, #568]	@ (800e210 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800dfd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dfdc:	e18b      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dfe2:	e188      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dfe8:	e185      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800dfea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfee:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800dff2:	430b      	orrs	r3, r1
 800dff4:	d155      	bne.n	800e0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800dff6:	4b84      	ldr	r3, [pc, #528]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dff8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dffc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e000:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e004:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e008:	d013      	beq.n	800e032 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800e00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e010:	d844      	bhi.n	800e09c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e014:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e018:	d013      	beq.n	800e042 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800e01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e020:	d83c      	bhi.n	800e09c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e024:	2b00      	cmp	r3, #0
 800e026:	d014      	beq.n	800e052 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800e028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e02a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e02e:	d014      	beq.n	800e05a <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800e030:	e034      	b.n	800e09c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e032:	f107 0318 	add.w	r3, r7, #24
 800e036:	4618      	mov	r0, r3
 800e038:	f7fe fb2e 	bl	800c698 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e040:	e159      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e046:	4618      	mov	r0, r3
 800e048:	f7fe f9cc 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e04e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e050:	e151      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e052:	f7fd f879 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800e056:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e058:	e14d      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e05a:	4b6b      	ldr	r3, [pc, #428]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f003 0320 	and.w	r3, r3, #32
 800e062:	2b20      	cmp	r3, #32
 800e064:	d117      	bne.n	800e096 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e066:	4b68      	ldr	r3, [pc, #416]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d005      	beq.n	800e07e <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800e072:	4b65      	ldr	r3, [pc, #404]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	0e1b      	lsrs	r3, r3, #24
 800e078:	f003 030f 	and.w	r3, r3, #15
 800e07c:	e006      	b.n	800e08c <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800e07e:	4b62      	ldr	r3, [pc, #392]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e080:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e084:	041b      	lsls	r3, r3, #16
 800e086:	0e1b      	lsrs	r3, r3, #24
 800e088:	f003 030f 	and.w	r3, r3, #15
 800e08c:	4a60      	ldr	r2, [pc, #384]	@ (800e210 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e092:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e094:	e12f      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e096:	2300      	movs	r3, #0
 800e098:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e09a:	e12c      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e09c:	2300      	movs	r3, #0
 800e09e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e0a0:	e129      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800e0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0a6:	1e59      	subs	r1, r3, #1
 800e0a8:	ea52 0301 	orrs.w	r3, r2, r1
 800e0ac:	d13c      	bne.n	800e128 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800e0ae:	4b56      	ldr	r3, [pc, #344]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e0b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e0b4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800e0b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e0c0:	d027      	beq.n	800e112 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800e0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e0c8:	d82b      	bhi.n	800e122 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e0d0:	d017      	beq.n	800e102 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800e0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e0d8:	d823      	bhi.n	800e122 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d004      	beq.n	800e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800e0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e0e6:	d004      	beq.n	800e0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800e0e8:	e01b      	b.n	800e122 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e0ea:	f7fd f82d 	bl	800b148 <HAL_RCC_GetSysClockFreq>
 800e0ee:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e0f0:	e101      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e0f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fe f974 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e100:	e0f9      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e102:	f107 0318 	add.w	r3, r7, #24
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe fac6 	bl	800c698 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e110:	e0f1      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e112:	f107 030c 	add.w	r3, r7, #12
 800e116:	4618      	mov	r0, r3
 800e118:	f7fe fc18 	bl	800c94c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e120:	e0e9      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e122:	2300      	movs	r3, #0
 800e124:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e126:	e0e6      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800e128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e12c:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800e130:	430b      	orrs	r3, r1
 800e132:	d131      	bne.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800e134:	4b34      	ldr	r3, [pc, #208]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e13a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e13e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800e140:	4b31      	ldr	r3, [pc, #196]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e146:	f003 0302 	and.w	r3, r3, #2
 800e14a:	2b02      	cmp	r3, #2
 800e14c:	d106      	bne.n	800e15c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800e14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e150:	2b00      	cmp	r3, #0
 800e152:	d103      	bne.n	800e15c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800e154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e158:	637b      	str	r3, [r7, #52]	@ 0x34
 800e15a:	e0cc      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800e15c:	4b2a      	ldr	r3, [pc, #168]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e15e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e162:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e16a:	d112      	bne.n	800e192 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800e16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e16e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e172:	d10e      	bne.n	800e192 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e174:	4b24      	ldr	r3, [pc, #144]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e17a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e17e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e182:	d102      	bne.n	800e18a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800e184:	23fa      	movs	r3, #250	@ 0xfa
 800e186:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e188:	e0b5      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e18a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e18e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e190:	e0b1      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800e192:	2300      	movs	r3, #0
 800e194:	637b      	str	r3, [r7, #52]	@ 0x34
 800e196:	e0ae      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800e198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e19c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e1a0:	430b      	orrs	r3, r1
 800e1a2:	d13b      	bne.n	800e21c <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800e1a4:	4b18      	ldr	r3, [pc, #96]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e1a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e1aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e1ae:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800e1b0:	4b15      	ldr	r3, [pc, #84]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e1b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1bc:	d105      	bne.n	800e1ca <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800e1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d102      	bne.n	800e1ca <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800e1c4:	4b13      	ldr	r3, [pc, #76]	@ (800e214 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800e1c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1c8:	e095      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800e1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e1d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1d6:	d106      	bne.n	800e1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1de:	d102      	bne.n	800e1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800e1e0:	4b0d      	ldr	r3, [pc, #52]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800e1e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1e4:	e087      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800e1e6:	4b08      	ldr	r3, [pc, #32]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e1ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1f2:	d106      	bne.n	800e202 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800e1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1fa:	d102      	bne.n	800e202 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800e1fc:	4b03      	ldr	r3, [pc, #12]	@ (800e20c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e1fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800e200:	e079      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800e202:	2300      	movs	r3, #0
 800e204:	637b      	str	r3, [r7, #52]	@ 0x34
 800e206:	e076      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800e208:	46020c00 	.word	0x46020c00
 800e20c:	00f42400 	.word	0x00f42400
 800e210:	0801273c 	.word	0x0801273c
 800e214:	02dc6c00 	.word	0x02dc6c00
 800e218:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800e21c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e220:	1e99      	subs	r1, r3, #2
 800e222:	ea52 0301 	orrs.w	r3, r2, r1
 800e226:	d120      	bne.n	800e26a <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800e228:	4b35      	ldr	r3, [pc, #212]	@ (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e22a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e22e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e232:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e236:	2b00      	cmp	r3, #0
 800e238:	d004      	beq.n	800e244 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800e23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e23c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e240:	d008      	beq.n	800e254 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800e242:	e00f      	b.n	800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e244:	f107 030c 	add.w	r3, r7, #12
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fe fb7f 	bl	800c94c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e252:	e050      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e254:	f107 0318 	add.w	r3, r7, #24
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fe fa1d 	bl	800c698 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e262:	e048      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e264:	2300      	movs	r3, #0
 800e266:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e268:	e045      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800e26a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e26e:	f1a3 0108 	sub.w	r1, r3, #8
 800e272:	ea52 0301 	orrs.w	r3, r2, r1
 800e276:	d13c      	bne.n	800e2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800e278:	4b21      	ldr	r3, [pc, #132]	@ (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e27a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e27e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e282:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800e284:	4b1e      	ldr	r3, [pc, #120]	@ (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e28c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e290:	d105      	bne.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800e292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e294:	2b00      	cmp	r3, #0
 800e296:	d102      	bne.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800e298:	4b1a      	ldr	r3, [pc, #104]	@ (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800e29a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e29c:	e02b      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800e29e:	4b18      	ldr	r3, [pc, #96]	@ (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e2aa:	d106      	bne.n	800e2ba <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2b2:	d102      	bne.n	800e2ba <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800e2b4:	4b14      	ldr	r3, [pc, #80]	@ (800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800e2b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2b8:	e01d      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2c0:	d107      	bne.n	800e2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e2c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fe f88c 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2d0:	e011      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800e2d8:	d108      	bne.n	800e2ec <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e2da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7fe f880 	bl	800c3e4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e6:	085b      	lsrs	r3, r3, #1
 800e2e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2ea:	e004      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2f0:	e001      	b.n	800e2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800e2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3738      	adds	r7, #56	@ 0x38
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	46020c00 	.word	0x46020c00
 800e304:	00f42400 	.word	0x00f42400
 800e308:	007a1200 	.word	0x007a1200

0800e30c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800e314:	4b47      	ldr	r3, [pc, #284]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a46      	ldr	r2, [pc, #280]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e31a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e31e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e320:	f7f4 fffc 	bl	800331c <HAL_GetTick>
 800e324:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e326:	e008      	b.n	800e33a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e328:	f7f4 fff8 	bl	800331c <HAL_GetTick>
 800e32c:	4602      	mov	r2, r0
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	2b02      	cmp	r3, #2
 800e334:	d901      	bls.n	800e33a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e336:	2303      	movs	r3, #3
 800e338:	e077      	b.n	800e42a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e33a:	4b3e      	ldr	r3, [pc, #248]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1f0      	bne.n	800e328 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800e346:	4b3b      	ldr	r3, [pc, #236]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e34a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e34e:	f023 0303 	bic.w	r3, r3, #3
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	6811      	ldr	r1, [r2, #0]
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	6852      	ldr	r2, [r2, #4]
 800e35a:	3a01      	subs	r2, #1
 800e35c:	0212      	lsls	r2, r2, #8
 800e35e:	430a      	orrs	r2, r1
 800e360:	4934      	ldr	r1, [pc, #208]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e362:	4313      	orrs	r3, r2
 800e364:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800e366:	4b33      	ldr	r3, [pc, #204]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e36a:	4b33      	ldr	r3, [pc, #204]	@ (800e438 <RCCEx_PLL2_Config+0x12c>)
 800e36c:	4013      	ands	r3, r2
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	6892      	ldr	r2, [r2, #8]
 800e372:	3a01      	subs	r2, #1
 800e374:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	68d2      	ldr	r2, [r2, #12]
 800e37c:	3a01      	subs	r2, #1
 800e37e:	0252      	lsls	r2, r2, #9
 800e380:	b292      	uxth	r2, r2
 800e382:	4311      	orrs	r1, r2
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	6912      	ldr	r2, [r2, #16]
 800e388:	3a01      	subs	r2, #1
 800e38a:	0412      	lsls	r2, r2, #16
 800e38c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e390:	4311      	orrs	r1, r2
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	6952      	ldr	r2, [r2, #20]
 800e396:	3a01      	subs	r2, #1
 800e398:	0612      	lsls	r2, r2, #24
 800e39a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e39e:	430a      	orrs	r2, r1
 800e3a0:	4924      	ldr	r1, [pc, #144]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3a2:	4313      	orrs	r3, r2
 800e3a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800e3a6:	4b23      	ldr	r3, [pc, #140]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3aa:	f023 020c 	bic.w	r2, r3, #12
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	699b      	ldr	r3, [r3, #24]
 800e3b2:	4920      	ldr	r1, [pc, #128]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800e3b8:	4b1e      	ldr	r3, [pc, #120]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6a1b      	ldr	r3, [r3, #32]
 800e3c0:	491c      	ldr	r1, [pc, #112]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800e3c6:	4b1b      	ldr	r3, [pc, #108]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ca:	4a1a      	ldr	r2, [pc, #104]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3cc:	f023 0310 	bic.w	r3, r3, #16
 800e3d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e3d2:	4b18      	ldr	r3, [pc, #96]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e3da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	69d2      	ldr	r2, [r2, #28]
 800e3e2:	00d2      	lsls	r2, r2, #3
 800e3e4:	4913      	ldr	r1, [pc, #76]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800e3ea:	4b12      	ldr	r3, [pc, #72]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ee:	4a11      	ldr	r2, [pc, #68]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3f0:	f043 0310 	orr.w	r3, r3, #16
 800e3f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800e3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a0e      	ldr	r2, [pc, #56]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e3fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e400:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e402:	f7f4 ff8b 	bl	800331c <HAL_GetTick>
 800e406:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e408:	e008      	b.n	800e41c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e40a:	f7f4 ff87 	bl	800331c <HAL_GetTick>
 800e40e:	4602      	mov	r2, r0
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	2b02      	cmp	r3, #2
 800e416:	d901      	bls.n	800e41c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e418:	2303      	movs	r3, #3
 800e41a:	e006      	b.n	800e42a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e41c:	4b05      	ldr	r3, [pc, #20]	@ (800e434 <RCCEx_PLL2_Config+0x128>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e424:	2b00      	cmp	r3, #0
 800e426:	d0f0      	beq.n	800e40a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800e428:	2300      	movs	r3, #0

}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	46020c00 	.word	0x46020c00
 800e438:	80800000 	.word	0x80800000

0800e43c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800e444:	4b47      	ldr	r3, [pc, #284]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4a46      	ldr	r2, [pc, #280]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e44a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e44e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e450:	f7f4 ff64 	bl	800331c <HAL_GetTick>
 800e454:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e456:	e008      	b.n	800e46a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e458:	f7f4 ff60 	bl	800331c <HAL_GetTick>
 800e45c:	4602      	mov	r2, r0
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	2b02      	cmp	r3, #2
 800e464:	d901      	bls.n	800e46a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e466:	2303      	movs	r3, #3
 800e468:	e077      	b.n	800e55a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e46a:	4b3e      	ldr	r3, [pc, #248]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e472:	2b00      	cmp	r3, #0
 800e474:	d1f0      	bne.n	800e458 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800e476:	4b3b      	ldr	r3, [pc, #236]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e47a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e47e:	f023 0303 	bic.w	r3, r3, #3
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	6811      	ldr	r1, [r2, #0]
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	6852      	ldr	r2, [r2, #4]
 800e48a:	3a01      	subs	r2, #1
 800e48c:	0212      	lsls	r2, r2, #8
 800e48e:	430a      	orrs	r2, r1
 800e490:	4934      	ldr	r1, [pc, #208]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e492:	4313      	orrs	r3, r2
 800e494:	630b      	str	r3, [r1, #48]	@ 0x30
 800e496:	4b33      	ldr	r3, [pc, #204]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e49a:	4b33      	ldr	r3, [pc, #204]	@ (800e568 <RCCEx_PLL3_Config+0x12c>)
 800e49c:	4013      	ands	r3, r2
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	6892      	ldr	r2, [r2, #8]
 800e4a2:	3a01      	subs	r2, #1
 800e4a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	68d2      	ldr	r2, [r2, #12]
 800e4ac:	3a01      	subs	r2, #1
 800e4ae:	0252      	lsls	r2, r2, #9
 800e4b0:	b292      	uxth	r2, r2
 800e4b2:	4311      	orrs	r1, r2
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	6912      	ldr	r2, [r2, #16]
 800e4b8:	3a01      	subs	r2, #1
 800e4ba:	0412      	lsls	r2, r2, #16
 800e4bc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e4c0:	4311      	orrs	r1, r2
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	6952      	ldr	r2, [r2, #20]
 800e4c6:	3a01      	subs	r2, #1
 800e4c8:	0612      	lsls	r2, r2, #24
 800e4ca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e4ce:	430a      	orrs	r2, r1
 800e4d0:	4924      	ldr	r1, [pc, #144]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800e4d6:	4b23      	ldr	r3, [pc, #140]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4da:	f023 020c 	bic.w	r2, r3, #12
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	699b      	ldr	r3, [r3, #24]
 800e4e2:	4920      	ldr	r1, [pc, #128]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800e4e8:	4b1e      	ldr	r3, [pc, #120]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e4ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6a1b      	ldr	r3, [r3, #32]
 800e4f0:	491c      	ldr	r1, [pc, #112]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800e4f6:	4b1b      	ldr	r3, [pc, #108]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4fa:	4a1a      	ldr	r2, [pc, #104]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e4fc:	f023 0310 	bic.w	r3, r3, #16
 800e500:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e502:	4b18      	ldr	r3, [pc, #96]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e50a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	69d2      	ldr	r2, [r2, #28]
 800e512:	00d2      	lsls	r2, r2, #3
 800e514:	4913      	ldr	r1, [pc, #76]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e516:	4313      	orrs	r3, r2
 800e518:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800e51a:	4b12      	ldr	r3, [pc, #72]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e51c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e51e:	4a11      	ldr	r2, [pc, #68]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e520:	f043 0310 	orr.w	r3, r3, #16
 800e524:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800e526:	4b0f      	ldr	r3, [pc, #60]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a0e      	ldr	r2, [pc, #56]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e52c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e530:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e532:	f7f4 fef3 	bl	800331c <HAL_GetTick>
 800e536:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e538:	e008      	b.n	800e54c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e53a:	f7f4 feef 	bl	800331c <HAL_GetTick>
 800e53e:	4602      	mov	r2, r0
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	1ad3      	subs	r3, r2, r3
 800e544:	2b02      	cmp	r3, #2
 800e546:	d901      	bls.n	800e54c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e548:	2303      	movs	r3, #3
 800e54a:	e006      	b.n	800e55a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e54c:	4b05      	ldr	r3, [pc, #20]	@ (800e564 <RCCEx_PLL3_Config+0x128>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e554:	2b00      	cmp	r3, #0
 800e556:	d0f0      	beq.n	800e53a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	46020c00 	.word	0x46020c00
 800e568:	80800000 	.word	0x80800000

0800e56c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e574:	2301      	movs	r3, #1
 800e576:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d071      	beq.n	800e662 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d106      	bne.n	800e598 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f7f4 f962 	bl	800285c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2202      	movs	r2, #2
 800e59c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e5a0:	4b32      	ldr	r3, [pc, #200]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	f003 0310 	and.w	r3, r3, #16
 800e5a8:	2b10      	cmp	r3, #16
 800e5aa:	d051      	beq.n	800e650 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e5ac:	4b2f      	ldr	r3, [pc, #188]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e5ae:	22ca      	movs	r2, #202	@ 0xca
 800e5b0:	625a      	str	r2, [r3, #36]	@ 0x24
 800e5b2:	4b2e      	ldr	r3, [pc, #184]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e5b4:	2253      	movs	r2, #83	@ 0x53
 800e5b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 f88b 	bl	800e6d4 <RTC_EnterInitMode>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800e5c2:	7bfb      	ldrb	r3, [r7, #15]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d13f      	bne.n	800e648 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800e5c8:	4b28      	ldr	r3, [pc, #160]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e5ca:	699b      	ldr	r3, [r3, #24]
 800e5cc:	4a27      	ldr	r2, [pc, #156]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e5ce:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800e5d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5d6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800e5d8:	4b24      	ldr	r3, [pc, #144]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e5da:	699a      	ldr	r2, [r3, #24]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6859      	ldr	r1, [r3, #4]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	691b      	ldr	r3, [r3, #16]
 800e5e4:	4319      	orrs	r1, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	699b      	ldr	r3, [r3, #24]
 800e5ea:	430b      	orrs	r3, r1
 800e5ec:	491f      	ldr	r1, [pc, #124]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	68da      	ldr	r2, [r3, #12]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	041b      	lsls	r3, r3, #16
 800e5fc:	491b      	ldr	r1, [pc, #108]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e5fe:	4313      	orrs	r3, r2
 800e600:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800e602:	4b1a      	ldr	r3, [pc, #104]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e612:	430b      	orrs	r3, r1
 800e614:	4915      	ldr	r1, [pc, #84]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e616:	4313      	orrs	r3, r2
 800e618:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 f896 	bl	800e74c <RTC_ExitInitMode>
 800e620:	4603      	mov	r3, r0
 800e622:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800e624:	7bfb      	ldrb	r3, [r7, #15]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d10e      	bne.n	800e648 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800e62a:	4b10      	ldr	r3, [pc, #64]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e62c:	699b      	ldr	r3, [r3, #24]
 800e62e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6a19      	ldr	r1, [r3, #32]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	69db      	ldr	r3, [r3, #28]
 800e63a:	4319      	orrs	r1, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	695b      	ldr	r3, [r3, #20]
 800e640:	430b      	orrs	r3, r1
 800e642:	490a      	ldr	r1, [pc, #40]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e644:	4313      	orrs	r3, r2
 800e646:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e648:	4b08      	ldr	r3, [pc, #32]	@ (800e66c <HAL_RTC_Init+0x100>)
 800e64a:	22ff      	movs	r2, #255	@ 0xff
 800e64c:	625a      	str	r2, [r3, #36]	@ 0x24
 800e64e:	e001      	b.n	800e654 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800e650:	2300      	movs	r3, #0
 800e652:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e654:	7bfb      	ldrb	r3, [r7, #15]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d103      	bne.n	800e662 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2201      	movs	r2, #1
 800e65e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800e662:	7bfb      	ldrb	r3, [r7, #15]
}
 800e664:	4618      	mov	r0, r3
 800e666:	3710      	adds	r7, #16
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	46007800 	.word	0x46007800

0800e670 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800e678:	4b15      	ldr	r3, [pc, #84]	@ (800e6d0 <HAL_RTC_WaitForSynchro+0x60>)
 800e67a:	68db      	ldr	r3, [r3, #12]
 800e67c:	4a14      	ldr	r2, [pc, #80]	@ (800e6d0 <HAL_RTC_WaitForSynchro+0x60>)
 800e67e:	f023 0320 	bic.w	r3, r3, #32
 800e682:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800e684:	f7f4 fe4a 	bl	800331c <HAL_GetTick>
 800e688:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e68a:	e013      	b.n	800e6b4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e68c:	f7f4 fe46 	bl	800331c <HAL_GetTick>
 800e690:	4602      	mov	r2, r0
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e69a:	d90b      	bls.n	800e6b4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e69c:	4b0c      	ldr	r3, [pc, #48]	@ (800e6d0 <HAL_RTC_WaitForSynchro+0x60>)
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	f003 0320 	and.w	r3, r3, #32
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d10c      	bne.n	800e6c2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2203      	movs	r2, #3
 800e6ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800e6b0:	2303      	movs	r3, #3
 800e6b2:	e008      	b.n	800e6c6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e6b4:	4b06      	ldr	r3, [pc, #24]	@ (800e6d0 <HAL_RTC_WaitForSynchro+0x60>)
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	f003 0320 	and.w	r3, r3, #32
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d0e5      	beq.n	800e68c <HAL_RTC_WaitForSynchro+0x1c>
 800e6c0:	e000      	b.n	800e6c4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800e6c2:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	46007800 	.word	0x46007800

0800e6d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e6e0:	4b19      	ldr	r3, [pc, #100]	@ (800e748 <RTC_EnterInitMode+0x74>)
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d128      	bne.n	800e73e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e6ec:	4b16      	ldr	r3, [pc, #88]	@ (800e748 <RTC_EnterInitMode+0x74>)
 800e6ee:	68db      	ldr	r3, [r3, #12]
 800e6f0:	4a15      	ldr	r2, [pc, #84]	@ (800e748 <RTC_EnterInitMode+0x74>)
 800e6f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6f6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e6f8:	f7f4 fe10 	bl	800331c <HAL_GetTick>
 800e6fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e6fe:	e013      	b.n	800e728 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e700:	f7f4 fe0c 	bl	800331c <HAL_GetTick>
 800e704:	4602      	mov	r2, r0
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e70e:	d90b      	bls.n	800e728 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e710:	4b0d      	ldr	r3, [pc, #52]	@ (800e748 <RTC_EnterInitMode+0x74>)
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d10f      	bne.n	800e73c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e71c:	2303      	movs	r3, #3
 800e71e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2203      	movs	r2, #3
 800e724:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e728:	4b07      	ldr	r3, [pc, #28]	@ (800e748 <RTC_EnterInitMode+0x74>)
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e730:	2b00      	cmp	r3, #0
 800e732:	d104      	bne.n	800e73e <RTC_EnterInitMode+0x6a>
 800e734:	7bfb      	ldrb	r3, [r7, #15]
 800e736:	2b03      	cmp	r3, #3
 800e738:	d1e2      	bne.n	800e700 <RTC_EnterInitMode+0x2c>
 800e73a:	e000      	b.n	800e73e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e73c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	46007800 	.word	0x46007800

0800e74c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e758:	4b1a      	ldr	r3, [pc, #104]	@ (800e7c4 <RTC_ExitInitMode+0x78>)
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	4a19      	ldr	r2, [pc, #100]	@ (800e7c4 <RTC_ExitInitMode+0x78>)
 800e75e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e762:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e764:	4b17      	ldr	r3, [pc, #92]	@ (800e7c4 <RTC_ExitInitMode+0x78>)
 800e766:	699b      	ldr	r3, [r3, #24]
 800e768:	f003 0320 	and.w	r3, r3, #32
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d10c      	bne.n	800e78a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7ff ff7d 	bl	800e670 <HAL_RTC_WaitForSynchro>
 800e776:	4603      	mov	r3, r0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d01e      	beq.n	800e7ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2203      	movs	r2, #3
 800e780:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e784:	2303      	movs	r3, #3
 800e786:	73fb      	strb	r3, [r7, #15]
 800e788:	e017      	b.n	800e7ba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e78a:	4b0e      	ldr	r3, [pc, #56]	@ (800e7c4 <RTC_ExitInitMode+0x78>)
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	4a0d      	ldr	r2, [pc, #52]	@ (800e7c4 <RTC_ExitInitMode+0x78>)
 800e790:	f023 0320 	bic.w	r3, r3, #32
 800e794:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f7ff ff6a 	bl	800e670 <HAL_RTC_WaitForSynchro>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d005      	beq.n	800e7ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2203      	movs	r2, #3
 800e7a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e7aa:	2303      	movs	r3, #3
 800e7ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e7ae:	4b05      	ldr	r3, [pc, #20]	@ (800e7c4 <RTC_ExitInitMode+0x78>)
 800e7b0:	699b      	ldr	r3, [r3, #24]
 800e7b2:	4a04      	ldr	r2, [pc, #16]	@ (800e7c4 <RTC_ExitInitMode+0x78>)
 800e7b4:	f043 0320 	orr.w	r3, r3, #32
 800e7b8:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	46007800 	.word	0x46007800

0800e7c8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	4910      	ldr	r1, [pc, #64]	@ (800e81c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	689a      	ldr	r2, [r3, #8]
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	431a      	orrs	r2, r3
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	699b      	ldr	r3, [r3, #24]
 800e7ee:	490c      	ldr	r1, [pc, #48]	@ (800e820 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e7f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e820 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e7f6:	6a1b      	ldr	r3, [r3, #32]
 800e7f8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	6919      	ldr	r1, [r3, #16]
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	695b      	ldr	r3, [r3, #20]
 800e804:	041b      	lsls	r3, r3, #16
 800e806:	430b      	orrs	r3, r1
 800e808:	4905      	ldr	r1, [pc, #20]	@ (800e820 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e80a:	4313      	orrs	r3, r2
 800e80c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e80e:	2300      	movs	r3, #0
}
 800e810:	4618      	mov	r0, r3
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr
 800e81c:	46007800 	.word	0x46007800
 800e820:	46007c00 	.word	0x46007c00

0800e824 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b086      	sub	sp, #24
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	2b02      	cmp	r3, #2
 800e836:	d904      	bls.n	800e842 <HAL_SAI_InitProtocol+0x1e>
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	3b03      	subs	r3, #3
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d812      	bhi.n	800e866 <HAL_SAI_InitProtocol+0x42>
 800e840:	e008      	b.n	800e854 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	68b9      	ldr	r1, [r7, #8]
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f000 fbed 	bl	800f028 <SAI_InitI2S>
 800e84e:	4603      	mov	r3, r0
 800e850:	75fb      	strb	r3, [r7, #23]
      break;
 800e852:	e00b      	b.n	800e86c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	68b9      	ldr	r1, [r7, #8]
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f000 fc96 	bl	800f18c <SAI_InitPCM>
 800e860:	4603      	mov	r3, r0
 800e862:	75fb      	strb	r3, [r7, #23]
      break;
 800e864:	e002      	b.n	800e86c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e866:	2301      	movs	r3, #1
 800e868:	75fb      	strb	r3, [r7, #23]
      break;
 800e86a:	bf00      	nop
  }

  if (status == HAL_OK)
 800e86c:	7dfb      	ldrb	r3, [r7, #23]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d104      	bne.n	800e87c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f000 f808 	bl	800e888 <HAL_SAI_Init>
 800e878:	4603      	mov	r3, r0
 800e87a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3718      	adds	r7, #24
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
	...

0800e888 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b08a      	sub	sp, #40	@ 0x28
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d101      	bne.n	800e89a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	e1ce      	b.n	800ec38 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d10e      	bne.n	800e8c2 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a83      	ldr	r2, [pc, #524]	@ (800eab8 <HAL_SAI_Init+0x230>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d107      	bne.n	800e8be <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d103      	bne.n	800e8be <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d001      	beq.n	800e8c2 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e1ba      	b.n	800ec38 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d106      	bne.n	800e8dc <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f7f4 f992 	bl	8002c00 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 fd0f 	bl	800f300 <SAI_Disable>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	e1a5      	b.n	800ec38 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2202      	movs	r2, #2
 800e8f0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	2b02      	cmp	r3, #2
 800e8fa:	d00c      	beq.n	800e916 <HAL_SAI_Init+0x8e>
 800e8fc:	2b02      	cmp	r3, #2
 800e8fe:	d80d      	bhi.n	800e91c <HAL_SAI_Init+0x94>
 800e900:	2b00      	cmp	r3, #0
 800e902:	d002      	beq.n	800e90a <HAL_SAI_Init+0x82>
 800e904:	2b01      	cmp	r3, #1
 800e906:	d003      	beq.n	800e910 <HAL_SAI_Init+0x88>
 800e908:	e008      	b.n	800e91c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e90a:	2300      	movs	r3, #0
 800e90c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e90e:	e008      	b.n	800e922 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e910:	2310      	movs	r3, #16
 800e912:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e914:	e005      	b.n	800e922 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e916:	2320      	movs	r3, #32
 800e918:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e91a:	e002      	b.n	800e922 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e91c:	2300      	movs	r3, #0
 800e91e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e920:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	689b      	ldr	r3, [r3, #8]
 800e926:	2b03      	cmp	r3, #3
 800e928:	d81d      	bhi.n	800e966 <HAL_SAI_Init+0xde>
 800e92a:	a201      	add	r2, pc, #4	@ (adr r2, 800e930 <HAL_SAI_Init+0xa8>)
 800e92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e930:	0800e941 	.word	0x0800e941
 800e934:	0800e947 	.word	0x0800e947
 800e938:	0800e94f 	.word	0x0800e94f
 800e93c:	0800e957 	.word	0x0800e957
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e940:	2300      	movs	r3, #0
 800e942:	61fb      	str	r3, [r7, #28]
      break;
 800e944:	e012      	b.n	800e96c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e94a:	61fb      	str	r3, [r7, #28]
      break;
 800e94c:	e00e      	b.n	800e96c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e94e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e952:	61fb      	str	r3, [r7, #28]
      break;
 800e954:	e00a      	b.n	800e96c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e956:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e95a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95e:	f043 0301 	orr.w	r3, r3, #1
 800e962:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e964:	e002      	b.n	800e96c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e966:	2300      	movs	r3, #0
 800e968:	61fb      	str	r3, [r7, #28]
      break;
 800e96a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a51      	ldr	r2, [pc, #324]	@ (800eab8 <HAL_SAI_Init+0x230>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d004      	beq.n	800e980 <HAL_SAI_Init+0xf8>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4a50      	ldr	r2, [pc, #320]	@ (800eabc <HAL_SAI_Init+0x234>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d103      	bne.n	800e988 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e980:	4a4f      	ldr	r2, [pc, #316]	@ (800eac0 <HAL_SAI_Init+0x238>)
 800e982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	e002      	b.n	800e98e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e988:	4a4e      	ldr	r2, [pc, #312]	@ (800eac4 <HAL_SAI_Init+0x23c>)
 800e98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e98c:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d077      	beq.n	800ea86 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a47      	ldr	r2, [pc, #284]	@ (800eab8 <HAL_SAI_Init+0x230>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d004      	beq.n	800e9aa <HAL_SAI_Init+0x122>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a45      	ldr	r2, [pc, #276]	@ (800eabc <HAL_SAI_Init+0x234>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d107      	bne.n	800e9ba <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e9aa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e9ae:	f04f 0100 	mov.w	r1, #0
 800e9b2:	f7fe f925 	bl	800cc00 <HAL_RCCEx_GetPeriphCLKFreq>
 800e9b6:	61b8      	str	r0, [r7, #24]
 800e9b8:	e006      	b.n	800e9c8 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e9ba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e9be:	f04f 0100 	mov.w	r1, #0
 800e9c2:	f7fe f91d 	bl	800cc00 <HAL_RCCEx_GetPeriphCLKFreq>
 800e9c6:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e9d0:	d120      	bne.n	800ea14 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9d6:	2b04      	cmp	r3, #4
 800e9d8:	d102      	bne.n	800e9e0 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e9da:	2340      	movs	r3, #64	@ 0x40
 800e9dc:	613b      	str	r3, [r7, #16]
 800e9de:	e00a      	b.n	800e9f6 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9e4:	2b08      	cmp	r3, #8
 800e9e6:	d103      	bne.n	800e9f0 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e9e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9ec:	613b      	str	r3, [r7, #16]
 800e9ee:	e002      	b.n	800e9f6 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9f4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e9f6:	69ba      	ldr	r2, [r7, #24]
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	005b      	lsls	r3, r3, #1
 800ea00:	4619      	mov	r1, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a1b      	ldr	r3, [r3, #32]
 800ea06:	693a      	ldr	r2, [r7, #16]
 800ea08:	fb02 f303 	mul.w	r3, r2, r3
 800ea0c:	fbb1 f3f3 	udiv	r3, r1, r3
 800ea10:	617b      	str	r3, [r7, #20]
 800ea12:	e017      	b.n	800ea44 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea1c:	d101      	bne.n	800ea22 <HAL_SAI_Init+0x19a>
 800ea1e:	2302      	movs	r3, #2
 800ea20:	e000      	b.n	800ea24 <HAL_SAI_Init+0x19c>
 800ea22:	2301      	movs	r3, #1
 800ea24:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	4413      	add	r3, r2
 800ea2e:	005b      	lsls	r3, r3, #1
 800ea30:	4619      	mov	r1, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6a1b      	ldr	r3, [r3, #32]
 800ea36:	68fa      	ldr	r2, [r7, #12]
 800ea38:	fb02 f303 	mul.w	r3, r2, r3
 800ea3c:	021b      	lsls	r3, r3, #8
 800ea3e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ea42:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	4a20      	ldr	r2, [pc, #128]	@ (800eac8 <HAL_SAI_Init+0x240>)
 800ea48:	fba2 2303 	umull	r2, r3, r2, r3
 800ea4c:	08da      	lsrs	r2, r3, #3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ea52:	6979      	ldr	r1, [r7, #20]
 800ea54:	4b1c      	ldr	r3, [pc, #112]	@ (800eac8 <HAL_SAI_Init+0x240>)
 800ea56:	fba3 2301 	umull	r2, r3, r3, r1
 800ea5a:	08da      	lsrs	r2, r3, #3
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4413      	add	r3, r2
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	1aca      	subs	r2, r1, r3
 800ea66:	2a08      	cmp	r2, #8
 800ea68:	d904      	bls.n	800ea74 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea6e:	1c5a      	adds	r2, r3, #1
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea78:	2b04      	cmp	r3, #4
 800ea7a:	d104      	bne.n	800ea86 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea80:	085a      	lsrs	r2, r3, #1
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d003      	beq.n	800ea96 <HAL_SAI_Init+0x20e>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d109      	bne.n	800eaaa <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d101      	bne.n	800eaa2 <HAL_SAI_Init+0x21a>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	e001      	b.n	800eaa6 <HAL_SAI_Init+0x21e>
 800eaa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eaa6:	623b      	str	r3, [r7, #32]
 800eaa8:	e012      	b.n	800ead0 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d10c      	bne.n	800eacc <HAL_SAI_Init+0x244>
 800eab2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eab6:	e00a      	b.n	800eace <HAL_SAI_Init+0x246>
 800eab8:	40015404 	.word	0x40015404
 800eabc:	40015424 	.word	0x40015424
 800eac0:	40015400 	.word	0x40015400
 800eac4:	40015800 	.word	0x40015800
 800eac8:	cccccccd 	.word	0xcccccccd
 800eacc:	2300      	movs	r3, #0
 800eace:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	6819      	ldr	r1, [r3, #0]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	4b59      	ldr	r3, [pc, #356]	@ (800ec40 <HAL_SAI_Init+0x3b8>)
 800eadc:	400b      	ands	r3, r1
 800eade:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	6819      	ldr	r1, [r3, #0]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	685a      	ldr	r2, [r3, #4]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eaee:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eaf4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eafa:	431a      	orrs	r2, r3
 800eafc:	6a3b      	ldr	r3, [r7, #32]
 800eafe:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800eb08:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	695b      	ldr	r3, [r3, #20]
 800eb0e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eb14:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb1a:	051b      	lsls	r3, r3, #20
 800eb1c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800eb22:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	691b      	ldr	r3, [r3, #16]
 800eb28:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	430a      	orrs	r2, r1
 800eb30:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	6812      	ldr	r2, [r2, #0]
 800eb3c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800eb40:	f023 030f 	bic.w	r3, r3, #15
 800eb44:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	6859      	ldr	r1, [r3, #4]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	69da      	ldr	r2, [r3, #28]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb54:	431a      	orrs	r2, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb5a:	431a      	orrs	r2, r3
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	430a      	orrs	r2, r1
 800eb62:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6899      	ldr	r1, [r3, #8]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	4b35      	ldr	r3, [pc, #212]	@ (800ec44 <HAL_SAI_Init+0x3bc>)
 800eb70:	400b      	ands	r3, r1
 800eb72:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	6899      	ldr	r1, [r3, #8]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb7e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800eb84:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800eb8a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800eb90:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb96:	3b01      	subs	r3, #1
 800eb98:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800eb9a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	430a      	orrs	r2, r1
 800eba2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68d9      	ldr	r1, [r3, #12]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800ebb2:	400b      	ands	r3, r1
 800ebb4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	68d9      	ldr	r1, [r3, #12]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebc4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebca:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ebcc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebd2:	3b01      	subs	r3, #1
 800ebd4:	021b      	lsls	r3, r3, #8
 800ebd6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	430a      	orrs	r2, r1
 800ebde:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a18      	ldr	r2, [pc, #96]	@ (800ec48 <HAL_SAI_Init+0x3c0>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d119      	bne.n	800ec1e <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ebea:	4b18      	ldr	r3, [pc, #96]	@ (800ec4c <HAL_SAI_Init+0x3c4>)
 800ebec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebee:	4a17      	ldr	r2, [pc, #92]	@ (800ec4c <HAL_SAI_Init+0x3c4>)
 800ebf0:	f023 0301 	bic.w	r3, r3, #1
 800ebf4:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d10e      	bne.n	800ec1e <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ec0c:	490f      	ldr	r1, [pc, #60]	@ (800ec4c <HAL_SAI_Init+0x3c4>)
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800ec12:	4b0e      	ldr	r3, [pc, #56]	@ (800ec4c <HAL_SAI_Init+0x3c4>)
 800ec14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec16:	4a0d      	ldr	r2, [pc, #52]	@ (800ec4c <HAL_SAI_Init+0x3c4>)
 800ec18:	f043 0301 	orr.w	r3, r3, #1
 800ec1c:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2200      	movs	r2, #0
 800ec22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2201      	movs	r2, #1
 800ec2a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3728      	adds	r7, #40	@ 0x28
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	f005c010 	.word	0xf005c010
 800ec44:	fff88000 	.word	0xfff88000
 800ec48:	40015404 	.word	0x40015404
 800ec4c:	40015400 	.word	0x40015400

0800ec50 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b088      	sub	sp, #32
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ec5e:	f7f4 fb5d 	bl	800331c <HAL_GetTick>
 800ec62:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d002      	beq.n	800ec70 <HAL_SAI_Transmit_DMA+0x20>
 800ec6a:	88fb      	ldrh	r3, [r7, #6]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d101      	bne.n	800ec74 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800ec70:	2301      	movs	r3, #1
 800ec72:	e0e4      	b.n	800ee3e <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	f040 80dd 	bne.w	800ee3c <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d101      	bne.n	800ec90 <HAL_SAI_Transmit_DMA+0x40>
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	e0d6      	b.n	800ee3e <HAL_SAI_Transmit_DMA+0x1ee>
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2201      	movs	r2, #1
 800ec94:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	88fa      	ldrh	r2, [r7, #6]
 800eca2:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	88fa      	ldrh	r2, [r7, #6]
 800ecaa:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2212      	movs	r2, #18
 800ecba:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ecc4:	4a60      	ldr	r2, [pc, #384]	@ (800ee48 <HAL_SAI_Transmit_DMA+0x1f8>)
 800ecc6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ecce:	4a5f      	ldr	r2, [pc, #380]	@ (800ee4c <HAL_SAI_Transmit_DMA+0x1fc>)
 800ecd0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ecd8:	4a5d      	ldr	r2, [pc, #372]	@ (800ee50 <HAL_SAI_Transmit_DMA+0x200>)
 800ecda:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ece2:	2200      	movs	r2, #0
 800ece4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ecea:	2b40      	cmp	r3, #64	@ 0x40
 800ecec:	d106      	bne.n	800ecfc <HAL_SAI_Transmit_DMA+0xac>
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d102      	bne.n	800ecfc <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800ecf6:	88fb      	ldrh	r3, [r7, #6]
 800ecf8:	61bb      	str	r3, [r7, #24]
 800ecfa:	e00a      	b.n	800ed12 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed00:	2b80      	cmp	r3, #128	@ 0x80
 800ed02:	d803      	bhi.n	800ed0c <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800ed04:	88fb      	ldrh	r3, [r7, #6]
 800ed06:	005b      	lsls	r3, r3, #1
 800ed08:	61bb      	str	r3, [r7, #24]
 800ed0a:	e002      	b.n	800ed12 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800ed0c:	88fb      	ldrh	r3, [r7, #6]
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d02d      	beq.n	800ed7e <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d021      	beq.n	800ed72 <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	69ba      	ldr	r2, [r7, #24]
 800ed3a:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f103 021c 	add.w	r2, r3, #28
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7f7 ff1a 	bl	8006ba0 <HAL_DMAEx_List_Start_IT>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	77fb      	strb	r3, [r7, #31]
 800ed70:	e014      	b.n	800ed9c <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e05f      	b.n	800ee3e <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ed88:	4619      	mov	r1, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	331c      	adds	r3, #28
 800ed90:	461a      	mov	r2, r3
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	f7f6 ff72 	bl	8005c7c <HAL_DMA_Start_IT>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800ed9c:	7ffb      	ldrb	r3, [r7, #31]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d005      	beq.n	800edae <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2200      	movs	r2, #0
 800eda6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800edaa:	2301      	movs	r3, #1
 800edac:	e047      	b.n	800ee3e <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800edae:	2100      	movs	r1, #0
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f000 fa6d 	bl	800f290 <SAI_InterruptFlag>
 800edb6:	4601      	mov	r1, r0
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	691a      	ldr	r2, [r3, #16]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	430a      	orrs	r2, r1
 800edc4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800edd4:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800edd6:	e015      	b.n	800ee04 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800edd8:	f7f4 faa0 	bl	800331c <HAL_GetTick>
 800eddc:	4602      	mov	r2, r0
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	1ad3      	subs	r3, r2, r3
 800ede2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ede6:	d90d      	bls.n	800ee04 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800edee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800ee00:	2303      	movs	r3, #3
 800ee02:	e01c      	b.n	800ee3e <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	695b      	ldr	r3, [r3, #20]
 800ee0a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d0e2      	beq.n	800edd8 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d107      	bne.n	800ee30 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ee2e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	e000      	b.n	800ee3e <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800ee3c:	2302      	movs	r3, #2
  }
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3720      	adds	r7, #32
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	0800f3d3 	.word	0x0800f3d3
 800ee4c:	0800f375 	.word	0x0800f375
 800ee50:	0800f469 	.word	0x0800f469

0800ee54 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	4613      	mov	r3, r2
 800ee60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d002      	beq.n	800ee6e <HAL_SAI_Receive_DMA+0x1a>
 800ee68:	88fb      	ldrh	r3, [r7, #6]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d101      	bne.n	800ee72 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e0c6      	b.n	800f000 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ee78:	b2db      	uxtb	r3, r3
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	f040 80bf 	bne.w	800effe <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d101      	bne.n	800ee8e <HAL_SAI_Receive_DMA+0x3a>
 800ee8a:	2302      	movs	r3, #2
 800ee8c:	e0b8      	b.n	800f000 <HAL_SAI_Receive_DMA+0x1ac>
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2201      	movs	r2, #1
 800ee92:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	68ba      	ldr	r2, [r7, #8]
 800ee9a:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	88fa      	ldrh	r2, [r7, #6]
 800eea0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	88fa      	ldrh	r2, [r7, #6]
 800eea8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2222      	movs	r2, #34	@ 0x22
 800eeb8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eec2:	4a51      	ldr	r2, [pc, #324]	@ (800f008 <HAL_SAI_Receive_DMA+0x1b4>)
 800eec4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eecc:	4a4f      	ldr	r2, [pc, #316]	@ (800f00c <HAL_SAI_Receive_DMA+0x1b8>)
 800eece:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eed6:	4a4e      	ldr	r2, [pc, #312]	@ (800f010 <HAL_SAI_Receive_DMA+0x1bc>)
 800eed8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eee0:	2200      	movs	r2, #0
 800eee2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eee8:	2b40      	cmp	r3, #64	@ 0x40
 800eeea:	d106      	bne.n	800eefa <HAL_SAI_Receive_DMA+0xa6>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d102      	bne.n	800eefa <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800eef4:	88fb      	ldrh	r3, [r7, #6]
 800eef6:	613b      	str	r3, [r7, #16]
 800eef8:	e00a      	b.n	800ef10 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eefe:	2b80      	cmp	r3, #128	@ 0x80
 800ef00:	d803      	bhi.n	800ef0a <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800ef02:	88fb      	ldrh	r3, [r7, #6]
 800ef04:	005b      	lsls	r3, r3, #1
 800ef06:	613b      	str	r3, [r7, #16]
 800ef08:	e002      	b.n	800ef10 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800ef0a:	88fb      	ldrh	r3, [r7, #6]
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d02d      	beq.n	800ef7c <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d021      	beq.n	800ef70 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f103 021c 	add.w	r2, r3, #28
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7f7 fe1b 	bl	8006ba0 <HAL_DMAEx_List_Start_IT>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	75fb      	strb	r3, [r7, #23]
 800ef6e:	e014      	b.n	800ef9a <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2200      	movs	r2, #0
 800ef74:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	e041      	b.n	800f000 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	331c      	adds	r3, #28
 800ef88:	4619      	mov	r1, r3
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef8e:	461a      	mov	r2, r3
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	f7f6 fe73 	bl	8005c7c <HAL_DMA_Start_IT>
 800ef96:	4603      	mov	r3, r0
 800ef98:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800ef9a:	7dfb      	ldrb	r3, [r7, #23]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d005      	beq.n	800efac <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2200      	movs	r2, #0
 800efa4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800efa8:	2301      	movs	r3, #1
 800efaa:	e029      	b.n	800f000 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800efac:	2100      	movs	r1, #0
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f000 f96e 	bl	800f290 <SAI_InterruptFlag>
 800efb4:	4601      	mov	r1, r0
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	691a      	ldr	r2, [r3, #16]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	430a      	orrs	r2, r1
 800efc2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800efd2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d107      	bne.n	800eff2 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800eff0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800effa:	2300      	movs	r3, #0
 800effc:	e000      	b.n	800f000 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800effe:	2302      	movs	r3, #2
  }
}
 800f000:	4618      	mov	r0, r3
 800f002:	3718      	adds	r7, #24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	0800f44d 	.word	0x0800f44d
 800f00c:	0800f3ef 	.word	0x0800f3ef
 800f010:	0800f469 	.word	0x0800f469

0800f014 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800f01c:	bf00      	nop
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f028:	b480      	push	{r7}
 800f02a:	b087      	sub	sp, #28
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
 800f034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f036:	2300      	movs	r3, #0
 800f038:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2200      	movs	r2, #0
 800f03e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2200      	movs	r2, #0
 800f044:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d003      	beq.n	800f056 <SAI_InitI2S+0x2e>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	2b02      	cmp	r3, #2
 800f054:	d103      	bne.n	800f05e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2200      	movs	r2, #0
 800f05a:	651a      	str	r2, [r3, #80]	@ 0x50
 800f05c:	e002      	b.n	800f064 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2201      	movs	r2, #1
 800f062:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f06a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f072:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2200      	movs	r2, #0
 800f078:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	683a      	ldr	r2, [r7, #0]
 800f07e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	f003 0301 	and.w	r3, r3, #1
 800f086:	2b00      	cmp	r3, #0
 800f088:	d001      	beq.n	800f08e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800f08a:	2301      	movs	r3, #1
 800f08c:	e077      	b.n	800f17e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d107      	bne.n	800f0a4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f0a0:	665a      	str	r2, [r3, #100]	@ 0x64
 800f0a2:	e006      	b.n	800f0b2 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f0aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2b03      	cmp	r3, #3
 800f0b6:	d84f      	bhi.n	800f158 <SAI_InitI2S+0x130>
 800f0b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f0c0 <SAI_InitI2S+0x98>)
 800f0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0be:	bf00      	nop
 800f0c0:	0800f0d1 	.word	0x0800f0d1
 800f0c4:	0800f0f3 	.word	0x0800f0f3
 800f0c8:	0800f115 	.word	0x0800f115
 800f0cc:	0800f137 	.word	0x0800f137
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2280      	movs	r2, #128	@ 0x80
 800f0d4:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	085b      	lsrs	r3, r3, #1
 800f0da:	015a      	lsls	r2, r3, #5
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	085b      	lsrs	r3, r3, #1
 800f0e4:	011a      	lsls	r2, r3, #4
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2240      	movs	r2, #64	@ 0x40
 800f0ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f0f0:	e035      	b.n	800f15e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2280      	movs	r2, #128	@ 0x80
 800f0f6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	085b      	lsrs	r3, r3, #1
 800f0fc:	019a      	lsls	r2, r3, #6
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	085b      	lsrs	r3, r3, #1
 800f106:	015a      	lsls	r2, r3, #5
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2280      	movs	r2, #128	@ 0x80
 800f110:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f112:	e024      	b.n	800f15e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	22c0      	movs	r2, #192	@ 0xc0
 800f118:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	085b      	lsrs	r3, r3, #1
 800f11e:	019a      	lsls	r2, r3, #6
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	085b      	lsrs	r3, r3, #1
 800f128:	015a      	lsls	r2, r3, #5
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2280      	movs	r2, #128	@ 0x80
 800f132:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f134:	e013      	b.n	800f15e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	22e0      	movs	r2, #224	@ 0xe0
 800f13a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	085b      	lsrs	r3, r3, #1
 800f140:	019a      	lsls	r2, r3, #6
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	085b      	lsrs	r3, r3, #1
 800f14a:	015a      	lsls	r2, r3, #5
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2280      	movs	r2, #128	@ 0x80
 800f154:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f156:	e002      	b.n	800f15e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800f158:	2301      	movs	r3, #1
 800f15a:	75fb      	strb	r3, [r7, #23]
      break;
 800f15c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2b02      	cmp	r3, #2
 800f162:	d10b      	bne.n	800f17c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2b01      	cmp	r3, #1
 800f168:	d102      	bne.n	800f170 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2210      	movs	r2, #16
 800f16e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b02      	cmp	r3, #2
 800f174:	d102      	bne.n	800f17c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2208      	movs	r2, #8
 800f17a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800f17c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	371c      	adds	r7, #28
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop

0800f18c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b087      	sub	sp, #28
 800f190:	af00      	add	r7, sp, #0
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	607a      	str	r2, [r7, #4]
 800f198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f19a:	2300      	movs	r3, #0
 800f19c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d003      	beq.n	800f1ba <SAI_InitPCM+0x2e>
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d103      	bne.n	800f1c2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	651a      	str	r2, [r3, #80]	@ 0x50
 800f1c0:	e002      	b.n	800f1c8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f1d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f1dc:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	683a      	ldr	r2, [r7, #0]
 800f1e8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f1f0:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2b04      	cmp	r3, #4
 800f1f6:	d103      	bne.n	800f200 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	659a      	str	r2, [r3, #88]	@ 0x58
 800f1fe:	e002      	b.n	800f206 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	220d      	movs	r2, #13
 800f204:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2b03      	cmp	r3, #3
 800f20a:	d837      	bhi.n	800f27c <SAI_InitPCM+0xf0>
 800f20c:	a201      	add	r2, pc, #4	@ (adr r2, 800f214 <SAI_InitPCM+0x88>)
 800f20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f212:	bf00      	nop
 800f214:	0800f225 	.word	0x0800f225
 800f218:	0800f23b 	.word	0x0800f23b
 800f21c:	0800f251 	.word	0x0800f251
 800f220:	0800f267 	.word	0x0800f267
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2280      	movs	r2, #128	@ 0x80
 800f228:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	011a      	lsls	r2, r3, #4
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2240      	movs	r2, #64	@ 0x40
 800f236:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f238:	e023      	b.n	800f282 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2280      	movs	r2, #128	@ 0x80
 800f23e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	015a      	lsls	r2, r3, #5
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2280      	movs	r2, #128	@ 0x80
 800f24c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f24e:	e018      	b.n	800f282 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	22c0      	movs	r2, #192	@ 0xc0
 800f254:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	015a      	lsls	r2, r3, #5
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2280      	movs	r2, #128	@ 0x80
 800f262:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f264:	e00d      	b.n	800f282 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	22e0      	movs	r2, #224	@ 0xe0
 800f26a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	015a      	lsls	r2, r3, #5
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2280      	movs	r2, #128	@ 0x80
 800f278:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f27a:	e002      	b.n	800f282 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800f27c:	2301      	movs	r3, #1
 800f27e:	75fb      	strb	r3, [r7, #23]
      break;
 800f280:	bf00      	nop
  }

  return status;
 800f282:	7dfb      	ldrb	r3, [r7, #23]
}
 800f284:	4618      	mov	r0, r3
 800f286:	371c      	adds	r7, #28
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800f290:	b480      	push	{r7}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f2a0:	78fb      	ldrb	r3, [r7, #3]
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d103      	bne.n	800f2ae <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f043 0308 	orr.w	r3, r3, #8
 800f2ac:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2b2:	2b08      	cmp	r3, #8
 800f2b4:	d10b      	bne.n	800f2ce <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f2ba:	2b03      	cmp	r3, #3
 800f2bc:	d003      	beq.n	800f2c6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d103      	bne.n	800f2ce <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f043 0310 	orr.w	r3, r3, #16
 800f2cc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	2b03      	cmp	r3, #3
 800f2d4:	d003      	beq.n	800f2de <SAI_InterruptFlag+0x4e>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d104      	bne.n	800f2e8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f2e4:	60fb      	str	r3, [r7, #12]
 800f2e6:	e003      	b.n	800f2f0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f043 0304 	orr.w	r3, r3, #4
 800f2ee:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3714      	adds	r7, #20
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr
	...

0800f300 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f300:	b480      	push	{r7}
 800f302:	b085      	sub	sp, #20
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f308:	4b18      	ldr	r3, [pc, #96]	@ (800f36c <SAI_Disable+0x6c>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a18      	ldr	r2, [pc, #96]	@ (800f370 <SAI_Disable+0x70>)
 800f30e:	fba2 2303 	umull	r2, r3, r2, r3
 800f312:	0b1b      	lsrs	r3, r3, #12
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f318:	2300      	movs	r3, #0
 800f31a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f32a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d10a      	bne.n	800f348 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f338:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800f342:	2303      	movs	r3, #3
 800f344:	72fb      	strb	r3, [r7, #11]
      break;
 800f346:	e009      	b.n	800f35c <SAI_Disable+0x5c>
    }
    count--;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	3b01      	subs	r3, #1
 800f34c:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d1e7      	bne.n	800f32c <SAI_Disable+0x2c>

  return status;
 800f35c:	7afb      	ldrb	r3, [r7, #11]
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3714      	adds	r7, #20
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	20000028 	.word	0x20000028
 800f370:	95cbec1b 	.word	0x95cbec1b

0800f374 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f380:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f386:	2b81      	cmp	r3, #129	@ 0x81
 800f388:	d01c      	beq.n	800f3c4 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2200      	movs	r2, #0
 800f38e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f3a0:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f7ff ff73 	bl	800f290 <SAI_InterruptFlag>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	43d9      	mvns	r1, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	691a      	ldr	r2, [r3, #16]
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	400a      	ands	r2, r1
 800f3ba:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f3c4:	68f8      	ldr	r0, [r7, #12]
 800f3c6:	f7f2 fcef 	bl	8001da8 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f3ca:	bf00      	nop
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b084      	sub	sp, #16
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f3de:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	f7f2 fccb 	bl	8001d7c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f3e6:	bf00      	nop
 800f3e8:	3710      	adds	r7, #16
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}

0800f3ee <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f3ee:	b580      	push	{r7, lr}
 800f3f0:	b084      	sub	sp, #16
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f3fa:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f400:	2b81      	cmp	r3, #129	@ 0x81
 800f402:	d01c      	beq.n	800f43e <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f412:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f41c:	2100      	movs	r1, #0
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f7ff ff36 	bl	800f290 <SAI_InterruptFlag>
 800f424:	4603      	mov	r3, r0
 800f426:	43d9      	mvns	r1, r3
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	691a      	ldr	r2, [r3, #16]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	400a      	ands	r2, r1
 800f434:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2201      	movs	r2, #1
 800f43a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	f7f2 fc86 	bl	8001d50 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f444:	bf00      	nop
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f458:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f7f2 fc62 	bl	8001d24 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f460:	bf00      	nop
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f474:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f47c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f494:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800f496:	68f8      	ldr	r0, [r7, #12]
 800f498:	f7ff ff32 	bl	800f300 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f7ff fdb1 	bl	800f014 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f4b2:	bf00      	nop
 800f4b4:	3710      	adds	r7, #16
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b082      	sub	sp, #8
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d101      	bne.n	800f4cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	e049      	b.n	800f560 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d106      	bne.n	800f4e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7f3 fa29 	bl	8002938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2202      	movs	r2, #2
 800f4ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681a      	ldr	r2, [r3, #0]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	3304      	adds	r3, #4
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	4610      	mov	r0, r2
 800f4fa:	f000 fd51 	bl	800ffa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2201      	movs	r2, #1
 800f502:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2201      	movs	r2, #1
 800f50a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2201      	movs	r2, #1
 800f512:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2201      	movs	r2, #1
 800f51a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2201      	movs	r2, #1
 800f522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2201      	movs	r2, #1
 800f52a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2201      	movs	r2, #1
 800f532:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2201      	movs	r2, #1
 800f53a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2201      	movs	r2, #1
 800f542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2201      	movs	r2, #1
 800f54a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2201      	movs	r2, #1
 800f552:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2201      	movs	r2, #1
 800f55a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f55e:	2300      	movs	r3, #0
}
 800f560:	4618      	mov	r0, r3
 800f562:	3708      	adds	r7, #8
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f576:	b2db      	uxtb	r3, r3
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d001      	beq.n	800f580 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f57c:	2301      	movs	r3, #1
 800f57e:	e06a      	b.n	800f656 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2202      	movs	r2, #2
 800f584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a35      	ldr	r2, [pc, #212]	@ (800f664 <HAL_TIM_Base_Start+0xfc>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d040      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4a34      	ldr	r2, [pc, #208]	@ (800f668 <HAL_TIM_Base_Start+0x100>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d03b      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5a4:	d036      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f5ae:	d031      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4a2d      	ldr	r2, [pc, #180]	@ (800f66c <HAL_TIM_Base_Start+0x104>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d02c      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4a2c      	ldr	r2, [pc, #176]	@ (800f670 <HAL_TIM_Base_Start+0x108>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d027      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	4a2a      	ldr	r2, [pc, #168]	@ (800f674 <HAL_TIM_Base_Start+0x10c>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d022      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4a29      	ldr	r2, [pc, #164]	@ (800f678 <HAL_TIM_Base_Start+0x110>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d01d      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	4a27      	ldr	r2, [pc, #156]	@ (800f67c <HAL_TIM_Base_Start+0x114>)
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d018      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	4a26      	ldr	r2, [pc, #152]	@ (800f680 <HAL_TIM_Base_Start+0x118>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d013      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4a24      	ldr	r2, [pc, #144]	@ (800f684 <HAL_TIM_Base_Start+0x11c>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d00e      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4a23      	ldr	r2, [pc, #140]	@ (800f688 <HAL_TIM_Base_Start+0x120>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d009      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4a21      	ldr	r2, [pc, #132]	@ (800f68c <HAL_TIM_Base_Start+0x124>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d004      	beq.n	800f614 <HAL_TIM_Base_Start+0xac>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	4a20      	ldr	r2, [pc, #128]	@ (800f690 <HAL_TIM_Base_Start+0x128>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d115      	bne.n	800f640 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	689a      	ldr	r2, [r3, #8]
 800f61a:	4b1e      	ldr	r3, [pc, #120]	@ (800f694 <HAL_TIM_Base_Start+0x12c>)
 800f61c:	4013      	ands	r3, r2
 800f61e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2b06      	cmp	r3, #6
 800f624:	d015      	beq.n	800f652 <HAL_TIM_Base_Start+0xea>
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f62c:	d011      	beq.n	800f652 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f042 0201 	orr.w	r2, r2, #1
 800f63c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f63e:	e008      	b.n	800f652 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f042 0201 	orr.w	r2, r2, #1
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	e000      	b.n	800f654 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f652:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f654:	2300      	movs	r3, #0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	40012c00 	.word	0x40012c00
 800f668:	50012c00 	.word	0x50012c00
 800f66c:	40000400 	.word	0x40000400
 800f670:	50000400 	.word	0x50000400
 800f674:	40000800 	.word	0x40000800
 800f678:	50000800 	.word	0x50000800
 800f67c:	40000c00 	.word	0x40000c00
 800f680:	50000c00 	.word	0x50000c00
 800f684:	40013400 	.word	0x40013400
 800f688:	50013400 	.word	0x50013400
 800f68c:	40014000 	.word	0x40014000
 800f690:	50014000 	.word	0x50014000
 800f694:	00010007 	.word	0x00010007

0800f698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d001      	beq.n	800f6b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	e072      	b.n	800f796 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2202      	movs	r2, #2
 800f6b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	68da      	ldr	r2, [r3, #12]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f042 0201 	orr.w	r2, r2, #1
 800f6c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a35      	ldr	r2, [pc, #212]	@ (800f7a4 <HAL_TIM_Base_Start_IT+0x10c>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d040      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4a34      	ldr	r2, [pc, #208]	@ (800f7a8 <HAL_TIM_Base_Start_IT+0x110>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d03b      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f6e4:	d036      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f6ee:	d031      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a2d      	ldr	r2, [pc, #180]	@ (800f7ac <HAL_TIM_Base_Start_IT+0x114>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d02c      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	4a2c      	ldr	r2, [pc, #176]	@ (800f7b0 <HAL_TIM_Base_Start_IT+0x118>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d027      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a2a      	ldr	r2, [pc, #168]	@ (800f7b4 <HAL_TIM_Base_Start_IT+0x11c>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d022      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4a29      	ldr	r2, [pc, #164]	@ (800f7b8 <HAL_TIM_Base_Start_IT+0x120>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d01d      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4a27      	ldr	r2, [pc, #156]	@ (800f7bc <HAL_TIM_Base_Start_IT+0x124>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d018      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4a26      	ldr	r2, [pc, #152]	@ (800f7c0 <HAL_TIM_Base_Start_IT+0x128>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d013      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4a24      	ldr	r2, [pc, #144]	@ (800f7c4 <HAL_TIM_Base_Start_IT+0x12c>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d00e      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4a23      	ldr	r2, [pc, #140]	@ (800f7c8 <HAL_TIM_Base_Start_IT+0x130>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d009      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4a21      	ldr	r2, [pc, #132]	@ (800f7cc <HAL_TIM_Base_Start_IT+0x134>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d004      	beq.n	800f754 <HAL_TIM_Base_Start_IT+0xbc>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	4a20      	ldr	r2, [pc, #128]	@ (800f7d0 <HAL_TIM_Base_Start_IT+0x138>)
 800f750:	4293      	cmp	r3, r2
 800f752:	d115      	bne.n	800f780 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	689a      	ldr	r2, [r3, #8]
 800f75a:	4b1e      	ldr	r3, [pc, #120]	@ (800f7d4 <HAL_TIM_Base_Start_IT+0x13c>)
 800f75c:	4013      	ands	r3, r2
 800f75e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2b06      	cmp	r3, #6
 800f764:	d015      	beq.n	800f792 <HAL_TIM_Base_Start_IT+0xfa>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f76c:	d011      	beq.n	800f792 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f042 0201 	orr.w	r2, r2, #1
 800f77c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f77e:	e008      	b.n	800f792 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f042 0201 	orr.w	r2, r2, #1
 800f78e:	601a      	str	r2, [r3, #0]
 800f790:	e000      	b.n	800f794 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f792:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f794:	2300      	movs	r3, #0
}
 800f796:	4618      	mov	r0, r3
 800f798:	3714      	adds	r7, #20
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	40012c00 	.word	0x40012c00
 800f7a8:	50012c00 	.word	0x50012c00
 800f7ac:	40000400 	.word	0x40000400
 800f7b0:	50000400 	.word	0x50000400
 800f7b4:	40000800 	.word	0x40000800
 800f7b8:	50000800 	.word	0x50000800
 800f7bc:	40000c00 	.word	0x40000c00
 800f7c0:	50000c00 	.word	0x50000c00
 800f7c4:	40013400 	.word	0x40013400
 800f7c8:	50013400 	.word	0x50013400
 800f7cc:	40014000 	.word	0x40014000
 800f7d0:	50014000 	.word	0x50014000
 800f7d4:	00010007 	.word	0x00010007

0800f7d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d101      	bne.n	800f7ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e049      	b.n	800f87e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d106      	bne.n	800f804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f7f3 f878 	bl	80028f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2202      	movs	r2, #2
 800f808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	3304      	adds	r3, #4
 800f814:	4619      	mov	r1, r3
 800f816:	4610      	mov	r0, r2
 800f818:	f000 fbc2 	bl	800ffa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2201      	movs	r2, #1
 800f820:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2201      	movs	r2, #1
 800f828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2201      	movs	r2, #1
 800f830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2201      	movs	r2, #1
 800f838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2201      	movs	r2, #1
 800f840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2201      	movs	r2, #1
 800f848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2201      	movs	r2, #1
 800f850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2201      	movs	r2, #1
 800f858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2201      	movs	r2, #1
 800f878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b084      	sub	sp, #16
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	691b      	ldr	r3, [r3, #16]
 800f89c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	f003 0302 	and.w	r3, r3, #2
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d020      	beq.n	800f8ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f003 0302 	and.w	r3, r3, #2
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d01b      	beq.n	800f8ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f06f 0202 	mvn.w	r2, #2
 800f8ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2201      	movs	r2, #1
 800f8c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	699b      	ldr	r3, [r3, #24]
 800f8c8:	f003 0303 	and.w	r3, r3, #3
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d003      	beq.n	800f8d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 fb47 	bl	800ff64 <HAL_TIM_IC_CaptureCallback>
 800f8d6:	e005      	b.n	800f8e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 fb39 	bl	800ff50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f000 fb4a 	bl	800ff78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	f003 0304 	and.w	r3, r3, #4
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d020      	beq.n	800f936 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f003 0304 	and.w	r3, r3, #4
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d01b      	beq.n	800f936 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f06f 0204 	mvn.w	r2, #4
 800f906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2202      	movs	r2, #2
 800f90c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	699b      	ldr	r3, [r3, #24]
 800f914:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d003      	beq.n	800f924 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 fb21 	bl	800ff64 <HAL_TIM_IC_CaptureCallback>
 800f922:	e005      	b.n	800f930 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fb13 	bl	800ff50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 fb24 	bl	800ff78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2200      	movs	r2, #0
 800f934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	f003 0308 	and.w	r3, r3, #8
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d020      	beq.n	800f982 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f003 0308 	and.w	r3, r3, #8
 800f946:	2b00      	cmp	r3, #0
 800f948:	d01b      	beq.n	800f982 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f06f 0208 	mvn.w	r2, #8
 800f952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2204      	movs	r2, #4
 800f958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	69db      	ldr	r3, [r3, #28]
 800f960:	f003 0303 	and.w	r3, r3, #3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d003      	beq.n	800f970 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f000 fafb 	bl	800ff64 <HAL_TIM_IC_CaptureCallback>
 800f96e:	e005      	b.n	800f97c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 faed 	bl	800ff50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 fafe 	bl	800ff78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	f003 0310 	and.w	r3, r3, #16
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d020      	beq.n	800f9ce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f003 0310 	and.w	r3, r3, #16
 800f992:	2b00      	cmp	r3, #0
 800f994:	d01b      	beq.n	800f9ce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f06f 0210 	mvn.w	r2, #16
 800f99e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2208      	movs	r2, #8
 800f9a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	69db      	ldr	r3, [r3, #28]
 800f9ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d003      	beq.n	800f9bc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 fad5 	bl	800ff64 <HAL_TIM_IC_CaptureCallback>
 800f9ba:	e005      	b.n	800f9c8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f000 fac7 	bl	800ff50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 fad8 	bl	800ff78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	f003 0301 	and.w	r3, r3, #1
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00c      	beq.n	800f9f2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f003 0301 	and.w	r3, r3, #1
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d007      	beq.n	800f9f2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f06f 0201 	mvn.w	r2, #1
 800f9ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7f2 f9f1 	bl	8001dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d104      	bne.n	800fa06 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d00c      	beq.n	800fa20 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d007      	beq.n	800fa20 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800fa18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f001 f904 	bl	8010c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00c      	beq.n	800fa44 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d007      	beq.n	800fa44 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800fa3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f001 f8fc 	bl	8010c3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00c      	beq.n	800fa68 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d007      	beq.n	800fa68 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fa60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 fa92 	bl	800ff8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	f003 0320 	and.w	r3, r3, #32
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d00c      	beq.n	800fa8c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	f003 0320 	and.w	r3, r3, #32
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d007      	beq.n	800fa8c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f06f 0220 	mvn.w	r2, #32
 800fa84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f001 f8c4 	bl	8010c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00c      	beq.n	800fab0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d007      	beq.n	800fab0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800faa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f001 f8d0 	bl	8010c50 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00c      	beq.n	800fad4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d007      	beq.n	800fad4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800facc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f001 f8c8 	bl	8010c64 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00c      	beq.n	800faf8 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d007      	beq.n	800faf8 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800faf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f001 f8c0 	bl	8010c78 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d00c      	beq.n	800fb1c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d007      	beq.n	800fb1c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800fb14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f001 f8b8 	bl	8010c8c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fb1c:	bf00      	nop
 800fb1e:	3710      	adds	r7, #16
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b086      	sub	sp, #24
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fb30:	2300      	movs	r3, #0
 800fb32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d101      	bne.n	800fb42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fb3e:	2302      	movs	r3, #2
 800fb40:	e0ff      	b.n	800fd42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2201      	movs	r2, #1
 800fb46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2b14      	cmp	r3, #20
 800fb4e:	f200 80f0 	bhi.w	800fd32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fb52:	a201      	add	r2, pc, #4	@ (adr r2, 800fb58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb58:	0800fbad 	.word	0x0800fbad
 800fb5c:	0800fd33 	.word	0x0800fd33
 800fb60:	0800fd33 	.word	0x0800fd33
 800fb64:	0800fd33 	.word	0x0800fd33
 800fb68:	0800fbed 	.word	0x0800fbed
 800fb6c:	0800fd33 	.word	0x0800fd33
 800fb70:	0800fd33 	.word	0x0800fd33
 800fb74:	0800fd33 	.word	0x0800fd33
 800fb78:	0800fc2f 	.word	0x0800fc2f
 800fb7c:	0800fd33 	.word	0x0800fd33
 800fb80:	0800fd33 	.word	0x0800fd33
 800fb84:	0800fd33 	.word	0x0800fd33
 800fb88:	0800fc6f 	.word	0x0800fc6f
 800fb8c:	0800fd33 	.word	0x0800fd33
 800fb90:	0800fd33 	.word	0x0800fd33
 800fb94:	0800fd33 	.word	0x0800fd33
 800fb98:	0800fcb1 	.word	0x0800fcb1
 800fb9c:	0800fd33 	.word	0x0800fd33
 800fba0:	0800fd33 	.word	0x0800fd33
 800fba4:	0800fd33 	.word	0x0800fd33
 800fba8:	0800fcf1 	.word	0x0800fcf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	68b9      	ldr	r1, [r7, #8]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f000 fafa 	bl	80101ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	699a      	ldr	r2, [r3, #24]
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f042 0208 	orr.w	r2, r2, #8
 800fbc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	699a      	ldr	r2, [r3, #24]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f022 0204 	bic.w	r2, r2, #4
 800fbd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	6999      	ldr	r1, [r3, #24]
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	691a      	ldr	r2, [r3, #16]
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	430a      	orrs	r2, r1
 800fbe8:	619a      	str	r2, [r3, #24]
      break;
 800fbea:	e0a5      	b.n	800fd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	68b9      	ldr	r1, [r7, #8]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f000 fb9c 	bl	8010330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	699a      	ldr	r2, [r3, #24]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fc06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	699a      	ldr	r2, [r3, #24]
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fc16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	6999      	ldr	r1, [r3, #24]
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	691b      	ldr	r3, [r3, #16]
 800fc22:	021a      	lsls	r2, r3, #8
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	430a      	orrs	r2, r1
 800fc2a:	619a      	str	r2, [r3, #24]
      break;
 800fc2c:	e084      	b.n	800fd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	68b9      	ldr	r1, [r7, #8]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f000 fc2b 	bl	8010490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	69da      	ldr	r2, [r3, #28]
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f042 0208 	orr.w	r2, r2, #8
 800fc48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	69da      	ldr	r2, [r3, #28]
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f022 0204 	bic.w	r2, r2, #4
 800fc58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	69d9      	ldr	r1, [r3, #28]
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	691a      	ldr	r2, [r3, #16]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	430a      	orrs	r2, r1
 800fc6a:	61da      	str	r2, [r3, #28]
      break;
 800fc6c:	e064      	b.n	800fd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	68b9      	ldr	r1, [r7, #8]
 800fc74:	4618      	mov	r0, r3
 800fc76:	f000 fcb9 	bl	80105ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	69da      	ldr	r2, [r3, #28]
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fc88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	69da      	ldr	r2, [r3, #28]
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fc98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	69d9      	ldr	r1, [r3, #28]
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	021a      	lsls	r2, r3, #8
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	430a      	orrs	r2, r1
 800fcac:	61da      	str	r2, [r3, #28]
      break;
 800fcae:	e043      	b.n	800fd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	68b9      	ldr	r1, [r7, #8]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f000 fd48 	bl	801074c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f042 0208 	orr.w	r2, r2, #8
 800fcca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f022 0204 	bic.w	r2, r2, #4
 800fcda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	691a      	ldr	r2, [r3, #16]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	430a      	orrs	r2, r1
 800fcec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800fcee:	e023      	b.n	800fd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	68b9      	ldr	r1, [r7, #8]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f000 fdaa 	bl	8010850 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fd0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fd1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	691b      	ldr	r3, [r3, #16]
 800fd26:	021a      	lsls	r2, r3, #8
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	430a      	orrs	r2, r1
 800fd2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800fd30:	e002      	b.n	800fd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fd32:	2301      	movs	r3, #1
 800fd34:	75fb      	strb	r3, [r7, #23]
      break;
 800fd36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fd40:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3718      	adds	r7, #24
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop

0800fd4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fd56:	2300      	movs	r3, #0
 800fd58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d101      	bne.n	800fd68 <HAL_TIM_ConfigClockSource+0x1c>
 800fd64:	2302      	movs	r3, #2
 800fd66:	e0e6      	b.n	800ff36 <HAL_TIM_ConfigClockSource+0x1ea>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2202      	movs	r2, #2
 800fd74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800fd86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fd8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fd92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	68ba      	ldr	r2, [r7, #8]
 800fd9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4a67      	ldr	r2, [pc, #412]	@ (800ff40 <HAL_TIM_ConfigClockSource+0x1f4>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	f000 80b1 	beq.w	800ff0a <HAL_TIM_ConfigClockSource+0x1be>
 800fda8:	4a65      	ldr	r2, [pc, #404]	@ (800ff40 <HAL_TIM_ConfigClockSource+0x1f4>)
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	f200 80b6 	bhi.w	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fdb0:	4a64      	ldr	r2, [pc, #400]	@ (800ff44 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	f000 80a9 	beq.w	800ff0a <HAL_TIM_ConfigClockSource+0x1be>
 800fdb8:	4a62      	ldr	r2, [pc, #392]	@ (800ff44 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	f200 80ae 	bhi.w	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fdc0:	4a61      	ldr	r2, [pc, #388]	@ (800ff48 <HAL_TIM_ConfigClockSource+0x1fc>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	f000 80a1 	beq.w	800ff0a <HAL_TIM_ConfigClockSource+0x1be>
 800fdc8:	4a5f      	ldr	r2, [pc, #380]	@ (800ff48 <HAL_TIM_ConfigClockSource+0x1fc>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	f200 80a6 	bhi.w	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fdd0:	4a5e      	ldr	r2, [pc, #376]	@ (800ff4c <HAL_TIM_ConfigClockSource+0x200>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	f000 8099 	beq.w	800ff0a <HAL_TIM_ConfigClockSource+0x1be>
 800fdd8:	4a5c      	ldr	r2, [pc, #368]	@ (800ff4c <HAL_TIM_ConfigClockSource+0x200>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	f200 809e 	bhi.w	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fde0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fde4:	f000 8091 	beq.w	800ff0a <HAL_TIM_ConfigClockSource+0x1be>
 800fde8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fdec:	f200 8096 	bhi.w	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fdf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fdf4:	f000 8089 	beq.w	800ff0a <HAL_TIM_ConfigClockSource+0x1be>
 800fdf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fdfc:	f200 808e 	bhi.w	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe04:	d03e      	beq.n	800fe84 <HAL_TIM_ConfigClockSource+0x138>
 800fe06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe0a:	f200 8087 	bhi.w	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe12:	f000 8086 	beq.w	800ff22 <HAL_TIM_ConfigClockSource+0x1d6>
 800fe16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe1a:	d87f      	bhi.n	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe1c:	2b70      	cmp	r3, #112	@ 0x70
 800fe1e:	d01a      	beq.n	800fe56 <HAL_TIM_ConfigClockSource+0x10a>
 800fe20:	2b70      	cmp	r3, #112	@ 0x70
 800fe22:	d87b      	bhi.n	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe24:	2b60      	cmp	r3, #96	@ 0x60
 800fe26:	d050      	beq.n	800feca <HAL_TIM_ConfigClockSource+0x17e>
 800fe28:	2b60      	cmp	r3, #96	@ 0x60
 800fe2a:	d877      	bhi.n	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe2c:	2b50      	cmp	r3, #80	@ 0x50
 800fe2e:	d03c      	beq.n	800feaa <HAL_TIM_ConfigClockSource+0x15e>
 800fe30:	2b50      	cmp	r3, #80	@ 0x50
 800fe32:	d873      	bhi.n	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe34:	2b40      	cmp	r3, #64	@ 0x40
 800fe36:	d058      	beq.n	800feea <HAL_TIM_ConfigClockSource+0x19e>
 800fe38:	2b40      	cmp	r3, #64	@ 0x40
 800fe3a:	d86f      	bhi.n	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe3c:	2b30      	cmp	r3, #48	@ 0x30
 800fe3e:	d064      	beq.n	800ff0a <HAL_TIM_ConfigClockSource+0x1be>
 800fe40:	2b30      	cmp	r3, #48	@ 0x30
 800fe42:	d86b      	bhi.n	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe44:	2b20      	cmp	r3, #32
 800fe46:	d060      	beq.n	800ff0a <HAL_TIM_ConfigClockSource+0x1be>
 800fe48:	2b20      	cmp	r3, #32
 800fe4a:	d867      	bhi.n	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d05c      	beq.n	800ff0a <HAL_TIM_ConfigClockSource+0x1be>
 800fe50:	2b10      	cmp	r3, #16
 800fe52:	d05a      	beq.n	800ff0a <HAL_TIM_ConfigClockSource+0x1be>
 800fe54:	e062      	b.n	800ff1c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fe66:	f000 fdf3 	bl	8010a50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fe78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	609a      	str	r2, [r3, #8]
      break;
 800fe82:	e04f      	b.n	800ff24 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fe94:	f000 fddc 	bl	8010a50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	689a      	ldr	r2, [r3, #8]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fea6:	609a      	str	r2, [r3, #8]
      break;
 800fea8:	e03c      	b.n	800ff24 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800feb6:	461a      	mov	r2, r3
 800feb8:	f000 fd4e 	bl	8010958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2150      	movs	r1, #80	@ 0x50
 800fec2:	4618      	mov	r0, r3
 800fec4:	f000 fda7 	bl	8010a16 <TIM_ITRx_SetConfig>
      break;
 800fec8:	e02c      	b.n	800ff24 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fed6:	461a      	mov	r2, r3
 800fed8:	f000 fd6d 	bl	80109b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2160      	movs	r1, #96	@ 0x60
 800fee2:	4618      	mov	r0, r3
 800fee4:	f000 fd97 	bl	8010a16 <TIM_ITRx_SetConfig>
      break;
 800fee8:	e01c      	b.n	800ff24 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fef6:	461a      	mov	r2, r3
 800fef8:	f000 fd2e 	bl	8010958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2140      	movs	r1, #64	@ 0x40
 800ff02:	4618      	mov	r0, r3
 800ff04:	f000 fd87 	bl	8010a16 <TIM_ITRx_SetConfig>
      break;
 800ff08:	e00c      	b.n	800ff24 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	4619      	mov	r1, r3
 800ff14:	4610      	mov	r0, r2
 800ff16:	f000 fd7e 	bl	8010a16 <TIM_ITRx_SetConfig>
      break;
 800ff1a:	e003      	b.n	800ff24 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ff20:	e000      	b.n	800ff24 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800ff22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2201      	movs	r2, #1
 800ff28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ff34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	00100070 	.word	0x00100070
 800ff44:	00100040 	.word	0x00100040
 800ff48:	00100030 	.word	0x00100030
 800ff4c:	00100020 	.word	0x00100020

0800ff50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ff58:	bf00      	nop
 800ff5a:	370c      	adds	r7, #12
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ff6c:	bf00      	nop
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ff80:	bf00      	nop
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ff94:	bf00      	nop
 800ff96:	370c      	adds	r7, #12
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr

0800ffa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b085      	sub	sp, #20
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4a6e      	ldr	r2, [pc, #440]	@ (801016c <TIM_Base_SetConfig+0x1cc>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d02b      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	4a6d      	ldr	r2, [pc, #436]	@ (8010170 <TIM_Base_SetConfig+0x1d0>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d027      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffc6:	d023      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ffce:	d01f      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	4a68      	ldr	r2, [pc, #416]	@ (8010174 <TIM_Base_SetConfig+0x1d4>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d01b      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	4a67      	ldr	r2, [pc, #412]	@ (8010178 <TIM_Base_SetConfig+0x1d8>)
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	d017      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4a66      	ldr	r2, [pc, #408]	@ (801017c <TIM_Base_SetConfig+0x1dc>)
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	d013      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4a65      	ldr	r2, [pc, #404]	@ (8010180 <TIM_Base_SetConfig+0x1e0>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d00f      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4a64      	ldr	r2, [pc, #400]	@ (8010184 <TIM_Base_SetConfig+0x1e4>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d00b      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4a63      	ldr	r2, [pc, #396]	@ (8010188 <TIM_Base_SetConfig+0x1e8>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d007      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	4a62      	ldr	r2, [pc, #392]	@ (801018c <TIM_Base_SetConfig+0x1ec>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d003      	beq.n	8010010 <TIM_Base_SetConfig+0x70>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	4a61      	ldr	r2, [pc, #388]	@ (8010190 <TIM_Base_SetConfig+0x1f0>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d108      	bne.n	8010022 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	68fa      	ldr	r2, [r7, #12]
 801001e:	4313      	orrs	r3, r2
 8010020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4a51      	ldr	r2, [pc, #324]	@ (801016c <TIM_Base_SetConfig+0x1cc>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d043      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4a50      	ldr	r2, [pc, #320]	@ (8010170 <TIM_Base_SetConfig+0x1d0>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d03f      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010038:	d03b      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010040:	d037      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	4a4b      	ldr	r2, [pc, #300]	@ (8010174 <TIM_Base_SetConfig+0x1d4>)
 8010046:	4293      	cmp	r3, r2
 8010048:	d033      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4a4a      	ldr	r2, [pc, #296]	@ (8010178 <TIM_Base_SetConfig+0x1d8>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d02f      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4a49      	ldr	r2, [pc, #292]	@ (801017c <TIM_Base_SetConfig+0x1dc>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d02b      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4a48      	ldr	r2, [pc, #288]	@ (8010180 <TIM_Base_SetConfig+0x1e0>)
 801005e:	4293      	cmp	r3, r2
 8010060:	d027      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4a47      	ldr	r2, [pc, #284]	@ (8010184 <TIM_Base_SetConfig+0x1e4>)
 8010066:	4293      	cmp	r3, r2
 8010068:	d023      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4a46      	ldr	r2, [pc, #280]	@ (8010188 <TIM_Base_SetConfig+0x1e8>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d01f      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4a45      	ldr	r2, [pc, #276]	@ (801018c <TIM_Base_SetConfig+0x1ec>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d01b      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4a44      	ldr	r2, [pc, #272]	@ (8010190 <TIM_Base_SetConfig+0x1f0>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d017      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4a43      	ldr	r2, [pc, #268]	@ (8010194 <TIM_Base_SetConfig+0x1f4>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d013      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4a42      	ldr	r2, [pc, #264]	@ (8010198 <TIM_Base_SetConfig+0x1f8>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d00f      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4a41      	ldr	r2, [pc, #260]	@ (801019c <TIM_Base_SetConfig+0x1fc>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d00b      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4a40      	ldr	r2, [pc, #256]	@ (80101a0 <TIM_Base_SetConfig+0x200>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d007      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4a3f      	ldr	r2, [pc, #252]	@ (80101a4 <TIM_Base_SetConfig+0x204>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d003      	beq.n	80100b2 <TIM_Base_SetConfig+0x112>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4a3e      	ldr	r2, [pc, #248]	@ (80101a8 <TIM_Base_SetConfig+0x208>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d108      	bne.n	80100c4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80100b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	4313      	orrs	r3, r2
 80100c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	695b      	ldr	r3, [r3, #20]
 80100ce:	4313      	orrs	r3, r2
 80100d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	689a      	ldr	r2, [r3, #8]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	4a20      	ldr	r2, [pc, #128]	@ (801016c <TIM_Base_SetConfig+0x1cc>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d023      	beq.n	8010138 <TIM_Base_SetConfig+0x198>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4a1f      	ldr	r2, [pc, #124]	@ (8010170 <TIM_Base_SetConfig+0x1d0>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d01f      	beq.n	8010138 <TIM_Base_SetConfig+0x198>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4a24      	ldr	r2, [pc, #144]	@ (801018c <TIM_Base_SetConfig+0x1ec>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d01b      	beq.n	8010138 <TIM_Base_SetConfig+0x198>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4a23      	ldr	r2, [pc, #140]	@ (8010190 <TIM_Base_SetConfig+0x1f0>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d017      	beq.n	8010138 <TIM_Base_SetConfig+0x198>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	4a22      	ldr	r2, [pc, #136]	@ (8010194 <TIM_Base_SetConfig+0x1f4>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d013      	beq.n	8010138 <TIM_Base_SetConfig+0x198>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4a21      	ldr	r2, [pc, #132]	@ (8010198 <TIM_Base_SetConfig+0x1f8>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d00f      	beq.n	8010138 <TIM_Base_SetConfig+0x198>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	4a20      	ldr	r2, [pc, #128]	@ (801019c <TIM_Base_SetConfig+0x1fc>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d00b      	beq.n	8010138 <TIM_Base_SetConfig+0x198>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	4a1f      	ldr	r2, [pc, #124]	@ (80101a0 <TIM_Base_SetConfig+0x200>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d007      	beq.n	8010138 <TIM_Base_SetConfig+0x198>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4a1e      	ldr	r2, [pc, #120]	@ (80101a4 <TIM_Base_SetConfig+0x204>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d003      	beq.n	8010138 <TIM_Base_SetConfig+0x198>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4a1d      	ldr	r2, [pc, #116]	@ (80101a8 <TIM_Base_SetConfig+0x208>)
 8010134:	4293      	cmp	r3, r2
 8010136:	d103      	bne.n	8010140 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	691a      	ldr	r2, [r3, #16]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2201      	movs	r2, #1
 8010144:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	f003 0301 	and.w	r3, r3, #1
 801014e:	2b01      	cmp	r3, #1
 8010150:	d105      	bne.n	801015e <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	691b      	ldr	r3, [r3, #16]
 8010156:	f023 0201 	bic.w	r2, r3, #1
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	611a      	str	r2, [r3, #16]
  }
}
 801015e:	bf00      	nop
 8010160:	3714      	adds	r7, #20
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop
 801016c:	40012c00 	.word	0x40012c00
 8010170:	50012c00 	.word	0x50012c00
 8010174:	40000400 	.word	0x40000400
 8010178:	50000400 	.word	0x50000400
 801017c:	40000800 	.word	0x40000800
 8010180:	50000800 	.word	0x50000800
 8010184:	40000c00 	.word	0x40000c00
 8010188:	50000c00 	.word	0x50000c00
 801018c:	40013400 	.word	0x40013400
 8010190:	50013400 	.word	0x50013400
 8010194:	40014000 	.word	0x40014000
 8010198:	50014000 	.word	0x50014000
 801019c:	40014400 	.word	0x40014400
 80101a0:	50014400 	.word	0x50014400
 80101a4:	40014800 	.word	0x40014800
 80101a8:	50014800 	.word	0x50014800

080101ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b087      	sub	sp, #28
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a1b      	ldr	r3, [r3, #32]
 80101ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6a1b      	ldr	r3, [r3, #32]
 80101c0:	f023 0201 	bic.w	r2, r3, #1
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	699b      	ldr	r3, [r3, #24]
 80101d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80101da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f023 0303 	bic.w	r3, r3, #3
 80101e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	4313      	orrs	r3, r2
 80101f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	f023 0302 	bic.w	r3, r3, #2
 80101f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	689b      	ldr	r3, [r3, #8]
 80101fe:	697a      	ldr	r2, [r7, #20]
 8010200:	4313      	orrs	r3, r2
 8010202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	4a40      	ldr	r2, [pc, #256]	@ (8010308 <TIM_OC1_SetConfig+0x15c>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d023      	beq.n	8010254 <TIM_OC1_SetConfig+0xa8>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4a3f      	ldr	r2, [pc, #252]	@ (801030c <TIM_OC1_SetConfig+0x160>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d01f      	beq.n	8010254 <TIM_OC1_SetConfig+0xa8>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4a3e      	ldr	r2, [pc, #248]	@ (8010310 <TIM_OC1_SetConfig+0x164>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d01b      	beq.n	8010254 <TIM_OC1_SetConfig+0xa8>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	4a3d      	ldr	r2, [pc, #244]	@ (8010314 <TIM_OC1_SetConfig+0x168>)
 8010220:	4293      	cmp	r3, r2
 8010222:	d017      	beq.n	8010254 <TIM_OC1_SetConfig+0xa8>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4a3c      	ldr	r2, [pc, #240]	@ (8010318 <TIM_OC1_SetConfig+0x16c>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d013      	beq.n	8010254 <TIM_OC1_SetConfig+0xa8>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4a3b      	ldr	r2, [pc, #236]	@ (801031c <TIM_OC1_SetConfig+0x170>)
 8010230:	4293      	cmp	r3, r2
 8010232:	d00f      	beq.n	8010254 <TIM_OC1_SetConfig+0xa8>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4a3a      	ldr	r2, [pc, #232]	@ (8010320 <TIM_OC1_SetConfig+0x174>)
 8010238:	4293      	cmp	r3, r2
 801023a:	d00b      	beq.n	8010254 <TIM_OC1_SetConfig+0xa8>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	4a39      	ldr	r2, [pc, #228]	@ (8010324 <TIM_OC1_SetConfig+0x178>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d007      	beq.n	8010254 <TIM_OC1_SetConfig+0xa8>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	4a38      	ldr	r2, [pc, #224]	@ (8010328 <TIM_OC1_SetConfig+0x17c>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d003      	beq.n	8010254 <TIM_OC1_SetConfig+0xa8>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	4a37      	ldr	r2, [pc, #220]	@ (801032c <TIM_OC1_SetConfig+0x180>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d10c      	bne.n	801026e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	f023 0308 	bic.w	r3, r3, #8
 801025a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	697a      	ldr	r2, [r7, #20]
 8010262:	4313      	orrs	r3, r2
 8010264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	f023 0304 	bic.w	r3, r3, #4
 801026c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4a25      	ldr	r2, [pc, #148]	@ (8010308 <TIM_OC1_SetConfig+0x15c>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d023      	beq.n	80102be <TIM_OC1_SetConfig+0x112>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a24      	ldr	r2, [pc, #144]	@ (801030c <TIM_OC1_SetConfig+0x160>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d01f      	beq.n	80102be <TIM_OC1_SetConfig+0x112>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4a23      	ldr	r2, [pc, #140]	@ (8010310 <TIM_OC1_SetConfig+0x164>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d01b      	beq.n	80102be <TIM_OC1_SetConfig+0x112>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4a22      	ldr	r2, [pc, #136]	@ (8010314 <TIM_OC1_SetConfig+0x168>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d017      	beq.n	80102be <TIM_OC1_SetConfig+0x112>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4a21      	ldr	r2, [pc, #132]	@ (8010318 <TIM_OC1_SetConfig+0x16c>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d013      	beq.n	80102be <TIM_OC1_SetConfig+0x112>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	4a20      	ldr	r2, [pc, #128]	@ (801031c <TIM_OC1_SetConfig+0x170>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d00f      	beq.n	80102be <TIM_OC1_SetConfig+0x112>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4a1f      	ldr	r2, [pc, #124]	@ (8010320 <TIM_OC1_SetConfig+0x174>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d00b      	beq.n	80102be <TIM_OC1_SetConfig+0x112>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4a1e      	ldr	r2, [pc, #120]	@ (8010324 <TIM_OC1_SetConfig+0x178>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d007      	beq.n	80102be <TIM_OC1_SetConfig+0x112>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4a1d      	ldr	r2, [pc, #116]	@ (8010328 <TIM_OC1_SetConfig+0x17c>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d003      	beq.n	80102be <TIM_OC1_SetConfig+0x112>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4a1c      	ldr	r2, [pc, #112]	@ (801032c <TIM_OC1_SetConfig+0x180>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d111      	bne.n	80102e2 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80102c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80102cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	695b      	ldr	r3, [r3, #20]
 80102d2:	693a      	ldr	r2, [r7, #16]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	699b      	ldr	r3, [r3, #24]
 80102dc:	693a      	ldr	r2, [r7, #16]
 80102de:	4313      	orrs	r3, r2
 80102e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	693a      	ldr	r2, [r7, #16]
 80102e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	68fa      	ldr	r2, [r7, #12]
 80102ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	685a      	ldr	r2, [r3, #4]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	697a      	ldr	r2, [r7, #20]
 80102fa:	621a      	str	r2, [r3, #32]
}
 80102fc:	bf00      	nop
 80102fe:	371c      	adds	r7, #28
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr
 8010308:	40012c00 	.word	0x40012c00
 801030c:	50012c00 	.word	0x50012c00
 8010310:	40013400 	.word	0x40013400
 8010314:	50013400 	.word	0x50013400
 8010318:	40014000 	.word	0x40014000
 801031c:	50014000 	.word	0x50014000
 8010320:	40014400 	.word	0x40014400
 8010324:	50014400 	.word	0x50014400
 8010328:	40014800 	.word	0x40014800
 801032c:	50014800 	.word	0x50014800

08010330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010330:	b480      	push	{r7}
 8010332:	b087      	sub	sp, #28
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6a1b      	ldr	r3, [r3, #32]
 801033e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6a1b      	ldr	r3, [r3, #32]
 8010344:	f023 0210 	bic.w	r2, r3, #16
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	699b      	ldr	r3, [r3, #24]
 8010356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801035e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801036a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	021b      	lsls	r3, r3, #8
 8010372:	68fa      	ldr	r2, [r7, #12]
 8010374:	4313      	orrs	r3, r2
 8010376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	f023 0320 	bic.w	r3, r3, #32
 801037e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	011b      	lsls	r3, r3, #4
 8010386:	697a      	ldr	r2, [r7, #20]
 8010388:	4313      	orrs	r3, r2
 801038a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4a36      	ldr	r2, [pc, #216]	@ (8010468 <TIM_OC2_SetConfig+0x138>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d00b      	beq.n	80103ac <TIM_OC2_SetConfig+0x7c>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4a35      	ldr	r2, [pc, #212]	@ (801046c <TIM_OC2_SetConfig+0x13c>)
 8010398:	4293      	cmp	r3, r2
 801039a:	d007      	beq.n	80103ac <TIM_OC2_SetConfig+0x7c>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4a34      	ldr	r2, [pc, #208]	@ (8010470 <TIM_OC2_SetConfig+0x140>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d003      	beq.n	80103ac <TIM_OC2_SetConfig+0x7c>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4a33      	ldr	r2, [pc, #204]	@ (8010474 <TIM_OC2_SetConfig+0x144>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d10d      	bne.n	80103c8 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80103b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	011b      	lsls	r3, r3, #4
 80103ba:	697a      	ldr	r2, [r7, #20]
 80103bc:	4313      	orrs	r3, r2
 80103be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4a27      	ldr	r2, [pc, #156]	@ (8010468 <TIM_OC2_SetConfig+0x138>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d023      	beq.n	8010418 <TIM_OC2_SetConfig+0xe8>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	4a26      	ldr	r2, [pc, #152]	@ (801046c <TIM_OC2_SetConfig+0x13c>)
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d01f      	beq.n	8010418 <TIM_OC2_SetConfig+0xe8>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	4a25      	ldr	r2, [pc, #148]	@ (8010470 <TIM_OC2_SetConfig+0x140>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d01b      	beq.n	8010418 <TIM_OC2_SetConfig+0xe8>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	4a24      	ldr	r2, [pc, #144]	@ (8010474 <TIM_OC2_SetConfig+0x144>)
 80103e4:	4293      	cmp	r3, r2
 80103e6:	d017      	beq.n	8010418 <TIM_OC2_SetConfig+0xe8>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	4a23      	ldr	r2, [pc, #140]	@ (8010478 <TIM_OC2_SetConfig+0x148>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d013      	beq.n	8010418 <TIM_OC2_SetConfig+0xe8>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	4a22      	ldr	r2, [pc, #136]	@ (801047c <TIM_OC2_SetConfig+0x14c>)
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d00f      	beq.n	8010418 <TIM_OC2_SetConfig+0xe8>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	4a21      	ldr	r2, [pc, #132]	@ (8010480 <TIM_OC2_SetConfig+0x150>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d00b      	beq.n	8010418 <TIM_OC2_SetConfig+0xe8>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4a20      	ldr	r2, [pc, #128]	@ (8010484 <TIM_OC2_SetConfig+0x154>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d007      	beq.n	8010418 <TIM_OC2_SetConfig+0xe8>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	4a1f      	ldr	r2, [pc, #124]	@ (8010488 <TIM_OC2_SetConfig+0x158>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d003      	beq.n	8010418 <TIM_OC2_SetConfig+0xe8>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	4a1e      	ldr	r2, [pc, #120]	@ (801048c <TIM_OC2_SetConfig+0x15c>)
 8010414:	4293      	cmp	r3, r2
 8010416:	d113      	bne.n	8010440 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801041e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	695b      	ldr	r3, [r3, #20]
 801042c:	009b      	lsls	r3, r3, #2
 801042e:	693a      	ldr	r2, [r7, #16]
 8010430:	4313      	orrs	r3, r2
 8010432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	699b      	ldr	r3, [r3, #24]
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	693a      	ldr	r2, [r7, #16]
 801043c:	4313      	orrs	r3, r2
 801043e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	693a      	ldr	r2, [r7, #16]
 8010444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	68fa      	ldr	r2, [r7, #12]
 801044a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	685a      	ldr	r2, [r3, #4]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	697a      	ldr	r2, [r7, #20]
 8010458:	621a      	str	r2, [r3, #32]
}
 801045a:	bf00      	nop
 801045c:	371c      	adds	r7, #28
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop
 8010468:	40012c00 	.word	0x40012c00
 801046c:	50012c00 	.word	0x50012c00
 8010470:	40013400 	.word	0x40013400
 8010474:	50013400 	.word	0x50013400
 8010478:	40014000 	.word	0x40014000
 801047c:	50014000 	.word	0x50014000
 8010480:	40014400 	.word	0x40014400
 8010484:	50014400 	.word	0x50014400
 8010488:	40014800 	.word	0x40014800
 801048c:	50014800 	.word	0x50014800

08010490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010490:	b480      	push	{r7}
 8010492:	b087      	sub	sp, #28
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6a1b      	ldr	r3, [r3, #32]
 801049e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6a1b      	ldr	r3, [r3, #32]
 80104a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	69db      	ldr	r3, [r3, #28]
 80104b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80104be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f023 0303 	bic.w	r3, r3, #3
 80104ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	68fa      	ldr	r2, [r7, #12]
 80104d2:	4313      	orrs	r3, r2
 80104d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80104dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	689b      	ldr	r3, [r3, #8]
 80104e2:	021b      	lsls	r3, r3, #8
 80104e4:	697a      	ldr	r2, [r7, #20]
 80104e6:	4313      	orrs	r3, r2
 80104e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4a35      	ldr	r2, [pc, #212]	@ (80105c4 <TIM_OC3_SetConfig+0x134>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d00b      	beq.n	801050a <TIM_OC3_SetConfig+0x7a>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4a34      	ldr	r2, [pc, #208]	@ (80105c8 <TIM_OC3_SetConfig+0x138>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d007      	beq.n	801050a <TIM_OC3_SetConfig+0x7a>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4a33      	ldr	r2, [pc, #204]	@ (80105cc <TIM_OC3_SetConfig+0x13c>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d003      	beq.n	801050a <TIM_OC3_SetConfig+0x7a>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	4a32      	ldr	r2, [pc, #200]	@ (80105d0 <TIM_OC3_SetConfig+0x140>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d10d      	bne.n	8010526 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	68db      	ldr	r3, [r3, #12]
 8010516:	021b      	lsls	r3, r3, #8
 8010518:	697a      	ldr	r2, [r7, #20]
 801051a:	4313      	orrs	r3, r2
 801051c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4a26      	ldr	r2, [pc, #152]	@ (80105c4 <TIM_OC3_SetConfig+0x134>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d023      	beq.n	8010576 <TIM_OC3_SetConfig+0xe6>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4a25      	ldr	r2, [pc, #148]	@ (80105c8 <TIM_OC3_SetConfig+0x138>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d01f      	beq.n	8010576 <TIM_OC3_SetConfig+0xe6>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	4a24      	ldr	r2, [pc, #144]	@ (80105cc <TIM_OC3_SetConfig+0x13c>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d01b      	beq.n	8010576 <TIM_OC3_SetConfig+0xe6>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	4a23      	ldr	r2, [pc, #140]	@ (80105d0 <TIM_OC3_SetConfig+0x140>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d017      	beq.n	8010576 <TIM_OC3_SetConfig+0xe6>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4a22      	ldr	r2, [pc, #136]	@ (80105d4 <TIM_OC3_SetConfig+0x144>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d013      	beq.n	8010576 <TIM_OC3_SetConfig+0xe6>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	4a21      	ldr	r2, [pc, #132]	@ (80105d8 <TIM_OC3_SetConfig+0x148>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d00f      	beq.n	8010576 <TIM_OC3_SetConfig+0xe6>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	4a20      	ldr	r2, [pc, #128]	@ (80105dc <TIM_OC3_SetConfig+0x14c>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d00b      	beq.n	8010576 <TIM_OC3_SetConfig+0xe6>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4a1f      	ldr	r2, [pc, #124]	@ (80105e0 <TIM_OC3_SetConfig+0x150>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d007      	beq.n	8010576 <TIM_OC3_SetConfig+0xe6>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4a1e      	ldr	r2, [pc, #120]	@ (80105e4 <TIM_OC3_SetConfig+0x154>)
 801056a:	4293      	cmp	r3, r2
 801056c:	d003      	beq.n	8010576 <TIM_OC3_SetConfig+0xe6>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4a1d      	ldr	r2, [pc, #116]	@ (80105e8 <TIM_OC3_SetConfig+0x158>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d113      	bne.n	801059e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801057c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	695b      	ldr	r3, [r3, #20]
 801058a:	011b      	lsls	r3, r3, #4
 801058c:	693a      	ldr	r2, [r7, #16]
 801058e:	4313      	orrs	r3, r2
 8010590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	699b      	ldr	r3, [r3, #24]
 8010596:	011b      	lsls	r3, r3, #4
 8010598:	693a      	ldr	r2, [r7, #16]
 801059a:	4313      	orrs	r3, r2
 801059c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	693a      	ldr	r2, [r7, #16]
 80105a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	68fa      	ldr	r2, [r7, #12]
 80105a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	685a      	ldr	r2, [r3, #4]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	697a      	ldr	r2, [r7, #20]
 80105b6:	621a      	str	r2, [r3, #32]
}
 80105b8:	bf00      	nop
 80105ba:	371c      	adds	r7, #28
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr
 80105c4:	40012c00 	.word	0x40012c00
 80105c8:	50012c00 	.word	0x50012c00
 80105cc:	40013400 	.word	0x40013400
 80105d0:	50013400 	.word	0x50013400
 80105d4:	40014000 	.word	0x40014000
 80105d8:	50014000 	.word	0x50014000
 80105dc:	40014400 	.word	0x40014400
 80105e0:	50014400 	.word	0x50014400
 80105e4:	40014800 	.word	0x40014800
 80105e8:	50014800 	.word	0x50014800

080105ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b087      	sub	sp, #28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a1b      	ldr	r3, [r3, #32]
 80105fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6a1b      	ldr	r3, [r3, #32]
 8010600:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	69db      	ldr	r3, [r3, #28]
 8010612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801061a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801061e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	021b      	lsls	r3, r3, #8
 801062e:	68fa      	ldr	r2, [r7, #12]
 8010630:	4313      	orrs	r3, r2
 8010632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801063a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	689b      	ldr	r3, [r3, #8]
 8010640:	031b      	lsls	r3, r3, #12
 8010642:	697a      	ldr	r2, [r7, #20]
 8010644:	4313      	orrs	r3, r2
 8010646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4a36      	ldr	r2, [pc, #216]	@ (8010724 <TIM_OC4_SetConfig+0x138>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d00b      	beq.n	8010668 <TIM_OC4_SetConfig+0x7c>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	4a35      	ldr	r2, [pc, #212]	@ (8010728 <TIM_OC4_SetConfig+0x13c>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d007      	beq.n	8010668 <TIM_OC4_SetConfig+0x7c>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4a34      	ldr	r2, [pc, #208]	@ (801072c <TIM_OC4_SetConfig+0x140>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d003      	beq.n	8010668 <TIM_OC4_SetConfig+0x7c>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	4a33      	ldr	r2, [pc, #204]	@ (8010730 <TIM_OC4_SetConfig+0x144>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d10d      	bne.n	8010684 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801066e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	031b      	lsls	r3, r3, #12
 8010676:	697a      	ldr	r2, [r7, #20]
 8010678:	4313      	orrs	r3, r2
 801067a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010682:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	4a27      	ldr	r2, [pc, #156]	@ (8010724 <TIM_OC4_SetConfig+0x138>)
 8010688:	4293      	cmp	r3, r2
 801068a:	d023      	beq.n	80106d4 <TIM_OC4_SetConfig+0xe8>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	4a26      	ldr	r2, [pc, #152]	@ (8010728 <TIM_OC4_SetConfig+0x13c>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d01f      	beq.n	80106d4 <TIM_OC4_SetConfig+0xe8>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	4a25      	ldr	r2, [pc, #148]	@ (801072c <TIM_OC4_SetConfig+0x140>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d01b      	beq.n	80106d4 <TIM_OC4_SetConfig+0xe8>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	4a24      	ldr	r2, [pc, #144]	@ (8010730 <TIM_OC4_SetConfig+0x144>)
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d017      	beq.n	80106d4 <TIM_OC4_SetConfig+0xe8>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	4a23      	ldr	r2, [pc, #140]	@ (8010734 <TIM_OC4_SetConfig+0x148>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d013      	beq.n	80106d4 <TIM_OC4_SetConfig+0xe8>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	4a22      	ldr	r2, [pc, #136]	@ (8010738 <TIM_OC4_SetConfig+0x14c>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d00f      	beq.n	80106d4 <TIM_OC4_SetConfig+0xe8>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4a21      	ldr	r2, [pc, #132]	@ (801073c <TIM_OC4_SetConfig+0x150>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d00b      	beq.n	80106d4 <TIM_OC4_SetConfig+0xe8>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	4a20      	ldr	r2, [pc, #128]	@ (8010740 <TIM_OC4_SetConfig+0x154>)
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d007      	beq.n	80106d4 <TIM_OC4_SetConfig+0xe8>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	4a1f      	ldr	r2, [pc, #124]	@ (8010744 <TIM_OC4_SetConfig+0x158>)
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d003      	beq.n	80106d4 <TIM_OC4_SetConfig+0xe8>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4a1e      	ldr	r2, [pc, #120]	@ (8010748 <TIM_OC4_SetConfig+0x15c>)
 80106d0:	4293      	cmp	r3, r2
 80106d2:	d113      	bne.n	80106fc <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80106da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80106e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	695b      	ldr	r3, [r3, #20]
 80106e8:	019b      	lsls	r3, r3, #6
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	4313      	orrs	r3, r2
 80106ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	699b      	ldr	r3, [r3, #24]
 80106f4:	019b      	lsls	r3, r3, #6
 80106f6:	693a      	ldr	r2, [r7, #16]
 80106f8:	4313      	orrs	r3, r2
 80106fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	693a      	ldr	r2, [r7, #16]
 8010700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	68fa      	ldr	r2, [r7, #12]
 8010706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	685a      	ldr	r2, [r3, #4]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	697a      	ldr	r2, [r7, #20]
 8010714:	621a      	str	r2, [r3, #32]
}
 8010716:	bf00      	nop
 8010718:	371c      	adds	r7, #28
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop
 8010724:	40012c00 	.word	0x40012c00
 8010728:	50012c00 	.word	0x50012c00
 801072c:	40013400 	.word	0x40013400
 8010730:	50013400 	.word	0x50013400
 8010734:	40014000 	.word	0x40014000
 8010738:	50014000 	.word	0x50014000
 801073c:	40014400 	.word	0x40014400
 8010740:	50014400 	.word	0x50014400
 8010744:	40014800 	.word	0x40014800
 8010748:	50014800 	.word	0x50014800

0801074c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801074c:	b480      	push	{r7}
 801074e:	b087      	sub	sp, #28
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6a1b      	ldr	r3, [r3, #32]
 801075a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6a1b      	ldr	r3, [r3, #32]
 8010760:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801077a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801077e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	68fa      	ldr	r2, [r7, #12]
 8010786:	4313      	orrs	r3, r2
 8010788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010790:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	689b      	ldr	r3, [r3, #8]
 8010796:	041b      	lsls	r3, r3, #16
 8010798:	693a      	ldr	r2, [r7, #16]
 801079a:	4313      	orrs	r3, r2
 801079c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4a21      	ldr	r2, [pc, #132]	@ (8010828 <TIM_OC5_SetConfig+0xdc>)
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d023      	beq.n	80107ee <TIM_OC5_SetConfig+0xa2>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4a20      	ldr	r2, [pc, #128]	@ (801082c <TIM_OC5_SetConfig+0xe0>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d01f      	beq.n	80107ee <TIM_OC5_SetConfig+0xa2>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4a1f      	ldr	r2, [pc, #124]	@ (8010830 <TIM_OC5_SetConfig+0xe4>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d01b      	beq.n	80107ee <TIM_OC5_SetConfig+0xa2>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4a1e      	ldr	r2, [pc, #120]	@ (8010834 <TIM_OC5_SetConfig+0xe8>)
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d017      	beq.n	80107ee <TIM_OC5_SetConfig+0xa2>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4a1d      	ldr	r2, [pc, #116]	@ (8010838 <TIM_OC5_SetConfig+0xec>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d013      	beq.n	80107ee <TIM_OC5_SetConfig+0xa2>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4a1c      	ldr	r2, [pc, #112]	@ (801083c <TIM_OC5_SetConfig+0xf0>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d00f      	beq.n	80107ee <TIM_OC5_SetConfig+0xa2>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	4a1b      	ldr	r2, [pc, #108]	@ (8010840 <TIM_OC5_SetConfig+0xf4>)
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d00b      	beq.n	80107ee <TIM_OC5_SetConfig+0xa2>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	4a1a      	ldr	r2, [pc, #104]	@ (8010844 <TIM_OC5_SetConfig+0xf8>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d007      	beq.n	80107ee <TIM_OC5_SetConfig+0xa2>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4a19      	ldr	r2, [pc, #100]	@ (8010848 <TIM_OC5_SetConfig+0xfc>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d003      	beq.n	80107ee <TIM_OC5_SetConfig+0xa2>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4a18      	ldr	r2, [pc, #96]	@ (801084c <TIM_OC5_SetConfig+0x100>)
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d109      	bne.n	8010802 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80107f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	695b      	ldr	r3, [r3, #20]
 80107fa:	021b      	lsls	r3, r3, #8
 80107fc:	697a      	ldr	r2, [r7, #20]
 80107fe:	4313      	orrs	r3, r2
 8010800:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	697a      	ldr	r2, [r7, #20]
 8010806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	68fa      	ldr	r2, [r7, #12]
 801080c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	685a      	ldr	r2, [r3, #4]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	693a      	ldr	r2, [r7, #16]
 801081a:	621a      	str	r2, [r3, #32]
}
 801081c:	bf00      	nop
 801081e:	371c      	adds	r7, #28
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr
 8010828:	40012c00 	.word	0x40012c00
 801082c:	50012c00 	.word	0x50012c00
 8010830:	40013400 	.word	0x40013400
 8010834:	50013400 	.word	0x50013400
 8010838:	40014000 	.word	0x40014000
 801083c:	50014000 	.word	0x50014000
 8010840:	40014400 	.word	0x40014400
 8010844:	50014400 	.word	0x50014400
 8010848:	40014800 	.word	0x40014800
 801084c:	50014800 	.word	0x50014800

08010850 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010850:	b480      	push	{r7}
 8010852:	b087      	sub	sp, #28
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6a1b      	ldr	r3, [r3, #32]
 801085e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6a1b      	ldr	r3, [r3, #32]
 8010864:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801087e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	021b      	lsls	r3, r3, #8
 801088a:	68fa      	ldr	r2, [r7, #12]
 801088c:	4313      	orrs	r3, r2
 801088e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	051b      	lsls	r3, r3, #20
 801089e:	693a      	ldr	r2, [r7, #16]
 80108a0:	4313      	orrs	r3, r2
 80108a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	4a22      	ldr	r2, [pc, #136]	@ (8010930 <TIM_OC6_SetConfig+0xe0>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d023      	beq.n	80108f4 <TIM_OC6_SetConfig+0xa4>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	4a21      	ldr	r2, [pc, #132]	@ (8010934 <TIM_OC6_SetConfig+0xe4>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d01f      	beq.n	80108f4 <TIM_OC6_SetConfig+0xa4>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	4a20      	ldr	r2, [pc, #128]	@ (8010938 <TIM_OC6_SetConfig+0xe8>)
 80108b8:	4293      	cmp	r3, r2
 80108ba:	d01b      	beq.n	80108f4 <TIM_OC6_SetConfig+0xa4>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	4a1f      	ldr	r2, [pc, #124]	@ (801093c <TIM_OC6_SetConfig+0xec>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d017      	beq.n	80108f4 <TIM_OC6_SetConfig+0xa4>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	4a1e      	ldr	r2, [pc, #120]	@ (8010940 <TIM_OC6_SetConfig+0xf0>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d013      	beq.n	80108f4 <TIM_OC6_SetConfig+0xa4>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	4a1d      	ldr	r2, [pc, #116]	@ (8010944 <TIM_OC6_SetConfig+0xf4>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d00f      	beq.n	80108f4 <TIM_OC6_SetConfig+0xa4>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4a1c      	ldr	r2, [pc, #112]	@ (8010948 <TIM_OC6_SetConfig+0xf8>)
 80108d8:	4293      	cmp	r3, r2
 80108da:	d00b      	beq.n	80108f4 <TIM_OC6_SetConfig+0xa4>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	4a1b      	ldr	r2, [pc, #108]	@ (801094c <TIM_OC6_SetConfig+0xfc>)
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d007      	beq.n	80108f4 <TIM_OC6_SetConfig+0xa4>
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	4a1a      	ldr	r2, [pc, #104]	@ (8010950 <TIM_OC6_SetConfig+0x100>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d003      	beq.n	80108f4 <TIM_OC6_SetConfig+0xa4>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	4a19      	ldr	r2, [pc, #100]	@ (8010954 <TIM_OC6_SetConfig+0x104>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d109      	bne.n	8010908 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80108fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	695b      	ldr	r3, [r3, #20]
 8010900:	029b      	lsls	r3, r3, #10
 8010902:	697a      	ldr	r2, [r7, #20]
 8010904:	4313      	orrs	r3, r2
 8010906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	697a      	ldr	r2, [r7, #20]
 801090c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	68fa      	ldr	r2, [r7, #12]
 8010912:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	685a      	ldr	r2, [r3, #4]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	693a      	ldr	r2, [r7, #16]
 8010920:	621a      	str	r2, [r3, #32]
}
 8010922:	bf00      	nop
 8010924:	371c      	adds	r7, #28
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop
 8010930:	40012c00 	.word	0x40012c00
 8010934:	50012c00 	.word	0x50012c00
 8010938:	40013400 	.word	0x40013400
 801093c:	50013400 	.word	0x50013400
 8010940:	40014000 	.word	0x40014000
 8010944:	50014000 	.word	0x50014000
 8010948:	40014400 	.word	0x40014400
 801094c:	50014400 	.word	0x50014400
 8010950:	40014800 	.word	0x40014800
 8010954:	50014800 	.word	0x50014800

08010958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010958:	b480      	push	{r7}
 801095a:	b087      	sub	sp, #28
 801095c:	af00      	add	r7, sp, #0
 801095e:	60f8      	str	r0, [r7, #12]
 8010960:	60b9      	str	r1, [r7, #8]
 8010962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	6a1b      	ldr	r3, [r3, #32]
 8010968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	6a1b      	ldr	r3, [r3, #32]
 801096e:	f023 0201 	bic.w	r2, r3, #1
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	699b      	ldr	r3, [r3, #24]
 801097a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	011b      	lsls	r3, r3, #4
 8010988:	693a      	ldr	r2, [r7, #16]
 801098a:	4313      	orrs	r3, r2
 801098c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	f023 030a 	bic.w	r3, r3, #10
 8010994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010996:	697a      	ldr	r2, [r7, #20]
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	4313      	orrs	r3, r2
 801099c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	693a      	ldr	r2, [r7, #16]
 80109a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	697a      	ldr	r2, [r7, #20]
 80109a8:	621a      	str	r2, [r3, #32]
}
 80109aa:	bf00      	nop
 80109ac:	371c      	adds	r7, #28
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr

080109b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80109b6:	b480      	push	{r7}
 80109b8:	b087      	sub	sp, #28
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	60f8      	str	r0, [r7, #12]
 80109be:	60b9      	str	r1, [r7, #8]
 80109c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6a1b      	ldr	r3, [r3, #32]
 80109c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	6a1b      	ldr	r3, [r3, #32]
 80109cc:	f023 0210 	bic.w	r2, r3, #16
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	699b      	ldr	r3, [r3, #24]
 80109d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80109e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	031b      	lsls	r3, r3, #12
 80109e6:	693a      	ldr	r2, [r7, #16]
 80109e8:	4313      	orrs	r3, r2
 80109ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80109f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	011b      	lsls	r3, r3, #4
 80109f8:	697a      	ldr	r2, [r7, #20]
 80109fa:	4313      	orrs	r3, r2
 80109fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	693a      	ldr	r2, [r7, #16]
 8010a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	697a      	ldr	r2, [r7, #20]
 8010a08:	621a      	str	r2, [r3, #32]
}
 8010a0a:	bf00      	nop
 8010a0c:	371c      	adds	r7, #28
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a14:	4770      	bx	lr

08010a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010a16:	b480      	push	{r7}
 8010a18:	b085      	sub	sp, #20
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	6078      	str	r0, [r7, #4]
 8010a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	689b      	ldr	r3, [r3, #8]
 8010a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010a32:	683a      	ldr	r2, [r7, #0]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	4313      	orrs	r3, r2
 8010a38:	f043 0307 	orr.w	r3, r3, #7
 8010a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	68fa      	ldr	r2, [r7, #12]
 8010a42:	609a      	str	r2, [r3, #8]
}
 8010a44:	bf00      	nop
 8010a46:	3714      	adds	r7, #20
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b087      	sub	sp, #28
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	60f8      	str	r0, [r7, #12]
 8010a58:	60b9      	str	r1, [r7, #8]
 8010a5a:	607a      	str	r2, [r7, #4]
 8010a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	689b      	ldr	r3, [r3, #8]
 8010a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	021a      	lsls	r2, r3, #8
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	431a      	orrs	r2, r3
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	4313      	orrs	r3, r2
 8010a78:	697a      	ldr	r2, [r7, #20]
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	697a      	ldr	r2, [r7, #20]
 8010a82:	609a      	str	r2, [r3, #8]
}
 8010a84:	bf00      	nop
 8010a86:	371c      	adds	r7, #28
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8e:	4770      	bx	lr

08010a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b085      	sub	sp, #20
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	d101      	bne.n	8010aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010aa4:	2302      	movs	r3, #2
 8010aa6:	e097      	b.n	8010bd8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2201      	movs	r2, #1
 8010aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2202      	movs	r2, #2
 8010ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	689b      	ldr	r3, [r3, #8]
 8010ac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	4a45      	ldr	r2, [pc, #276]	@ (8010be4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	d00e      	beq.n	8010af0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4a44      	ldr	r2, [pc, #272]	@ (8010be8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d009      	beq.n	8010af0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a42      	ldr	r2, [pc, #264]	@ (8010bec <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d004      	beq.n	8010af0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a41      	ldr	r2, [pc, #260]	@ (8010bf0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d108      	bne.n	8010b02 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010af6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	4313      	orrs	r3, r2
 8010b00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	68fa      	ldr	r2, [r7, #12]
 8010b14:	4313      	orrs	r3, r2
 8010b16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	68fa      	ldr	r2, [r7, #12]
 8010b1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4a2f      	ldr	r2, [pc, #188]	@ (8010be4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d040      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8010be8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d03b      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b3c:	d036      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010b46:	d031      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4a29      	ldr	r2, [pc, #164]	@ (8010bf4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d02c      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	4a28      	ldr	r2, [pc, #160]	@ (8010bf8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d027      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a26      	ldr	r2, [pc, #152]	@ (8010bfc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d022      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	4a25      	ldr	r2, [pc, #148]	@ (8010c00 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	d01d      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a23      	ldr	r2, [pc, #140]	@ (8010c04 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d018      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4a22      	ldr	r2, [pc, #136]	@ (8010c08 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d013      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	4a18      	ldr	r2, [pc, #96]	@ (8010bec <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d00e      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	4a17      	ldr	r2, [pc, #92]	@ (8010bf0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d009      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8010c0c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8010b9e:	4293      	cmp	r3, r2
 8010ba0:	d004      	beq.n	8010bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8010c10 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	d10c      	bne.n	8010bc6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010bb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	68ba      	ldr	r2, [r7, #8]
 8010bba:	4313      	orrs	r3, r2
 8010bbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	68ba      	ldr	r2, [r7, #8]
 8010bc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2201      	movs	r2, #1
 8010bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3714      	adds	r7, #20
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr
 8010be4:	40012c00 	.word	0x40012c00
 8010be8:	50012c00 	.word	0x50012c00
 8010bec:	40013400 	.word	0x40013400
 8010bf0:	50013400 	.word	0x50013400
 8010bf4:	40000400 	.word	0x40000400
 8010bf8:	50000400 	.word	0x50000400
 8010bfc:	40000800 	.word	0x40000800
 8010c00:	50000800 	.word	0x50000800
 8010c04:	40000c00 	.word	0x40000c00
 8010c08:	50000c00 	.word	0x50000c00
 8010c0c:	40014000 	.word	0x40014000
 8010c10:	50014000 	.word	0x50014000

08010c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010c1c:	bf00      	nop
 8010c1e:	370c      	adds	r7, #12
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr

08010c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b083      	sub	sp, #12
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010c30:	bf00      	nop
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b083      	sub	sp, #12
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010c44:	bf00      	nop
 8010c46:	370c      	adds	r7, #12
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr

08010c50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8010c58:	bf00      	nop
 8010c5a:	370c      	adds	r7, #12
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c62:	4770      	bx	lr

08010c64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b083      	sub	sp, #12
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8010c6c:	bf00      	nop
 8010c6e:	370c      	adds	r7, #12
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8010c80:	bf00      	nop
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8010c94:	bf00      	nop
 8010c96:	370c      	adds	r7, #12
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d101      	bne.n	8010cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010cae:	2301      	movs	r3, #1
 8010cb0:	e042      	b.n	8010d38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d106      	bne.n	8010cca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f7f1 fe93 	bl	80029f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2224      	movs	r2, #36	@ 0x24
 8010cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f022 0201 	bic.w	r2, r2, #1
 8010ce0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d002      	beq.n	8010cf0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f000 fd02 	bl	80116f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 fb51 	bl	8011398 <UART_SetConfig>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	d101      	bne.n	8010d00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	e01b      	b.n	8010d38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	685a      	ldr	r2, [r3, #4]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	689a      	ldr	r2, [r3, #8]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010d1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f042 0201 	orr.w	r2, r2, #1
 8010d2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 fd81 	bl	8011838 <UART_CheckIdleState>
 8010d36:	4603      	mov	r3, r0
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3708      	adds	r7, #8
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b0ba      	sub	sp, #232	@ 0xe8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	69db      	ldr	r3, [r3, #28]
 8010d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010d66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010d6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010d6e:	4013      	ands	r3, r2
 8010d70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d11b      	bne.n	8010db4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d80:	f003 0320 	and.w	r3, r3, #32
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d015      	beq.n	8010db4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d8c:	f003 0320 	and.w	r3, r3, #32
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d105      	bne.n	8010da0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d009      	beq.n	8010db4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	f000 82cb 	beq.w	8011340 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	4798      	blx	r3
      }
      return;
 8010db2:	e2c5      	b.n	8011340 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f000 8123 	beq.w	8011004 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010dbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8010ff8 <HAL_UART_IRQHandler+0x2b8>)
 8010dc4:	4013      	ands	r3, r2
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d106      	bne.n	8010dd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010dca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010dce:	4b8b      	ldr	r3, [pc, #556]	@ (8010ffc <HAL_UART_IRQHandler+0x2bc>)
 8010dd0:	4013      	ands	r3, r2
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	f000 8116 	beq.w	8011004 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ddc:	f003 0301 	and.w	r3, r3, #1
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d011      	beq.n	8010e08 <HAL_UART_IRQHandler+0xc8>
 8010de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d00b      	beq.n	8010e08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2201      	movs	r2, #1
 8010df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010dfe:	f043 0201 	orr.w	r2, r3, #1
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e0c:	f003 0302 	and.w	r3, r3, #2
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d011      	beq.n	8010e38 <HAL_UART_IRQHandler+0xf8>
 8010e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010e18:	f003 0301 	and.w	r3, r3, #1
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d00b      	beq.n	8010e38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	2202      	movs	r2, #2
 8010e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e2e:	f043 0204 	orr.w	r2, r3, #4
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e3c:	f003 0304 	and.w	r3, r3, #4
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d011      	beq.n	8010e68 <HAL_UART_IRQHandler+0x128>
 8010e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010e48:	f003 0301 	and.w	r3, r3, #1
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d00b      	beq.n	8010e68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	2204      	movs	r2, #4
 8010e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e5e:	f043 0202 	orr.w	r2, r3, #2
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e6c:	f003 0308 	and.w	r3, r3, #8
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d017      	beq.n	8010ea4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e78:	f003 0320 	and.w	r3, r3, #32
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d105      	bne.n	8010e8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010e80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010e84:	4b5c      	ldr	r3, [pc, #368]	@ (8010ff8 <HAL_UART_IRQHandler+0x2b8>)
 8010e86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d00b      	beq.n	8010ea4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	2208      	movs	r2, #8
 8010e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e9a:	f043 0208 	orr.w	r2, r3, #8
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d012      	beq.n	8010ed6 <HAL_UART_IRQHandler+0x196>
 8010eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010eb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d00c      	beq.n	8010ed6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010ec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ecc:	f043 0220 	orr.w	r2, r3, #32
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	f000 8231 	beq.w	8011344 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ee6:	f003 0320 	and.w	r3, r3, #32
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d013      	beq.n	8010f16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010ef2:	f003 0320 	and.w	r3, r3, #32
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d105      	bne.n	8010f06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d007      	beq.n	8010f16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d003      	beq.n	8010f16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	689b      	ldr	r3, [r3, #8]
 8010f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f2a:	2b40      	cmp	r3, #64	@ 0x40
 8010f2c:	d005      	beq.n	8010f3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010f32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d054      	beq.n	8010fe4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 fd93 	bl	8011a66 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	689b      	ldr	r3, [r3, #8]
 8010f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f4a:	2b40      	cmp	r3, #64	@ 0x40
 8010f4c:	d146      	bne.n	8010fdc <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	3308      	adds	r3, #8
 8010f54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010f5c:	e853 3f00 	ldrex	r3, [r3]
 8010f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	3308      	adds	r3, #8
 8010f76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010f7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010f86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010f8a:	e841 2300 	strex	r3, r2, [r1]
 8010f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d1d9      	bne.n	8010f4e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d017      	beq.n	8010fd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010faa:	4a15      	ldr	r2, [pc, #84]	@ (8011000 <HAL_UART_IRQHandler+0x2c0>)
 8010fac:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7f4 ff3d 	bl	8005e34 <HAL_DMA_Abort_IT>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d019      	beq.n	8010ff4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010fce:	4610      	mov	r0, r2
 8010fd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fd2:	e00f      	b.n	8010ff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f000 f9c9 	bl	801136c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fda:	e00b      	b.n	8010ff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f000 f9c5 	bl	801136c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fe2:	e007      	b.n	8010ff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f000 f9c1 	bl	801136c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2200      	movs	r2, #0
 8010fee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010ff2:	e1a7      	b.n	8011344 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ff4:	bf00      	nop
    return;
 8010ff6:	e1a5      	b.n	8011344 <HAL_UART_IRQHandler+0x604>
 8010ff8:	10000001 	.word	0x10000001
 8010ffc:	04000120 	.word	0x04000120
 8011000:	08011b33 	.word	0x08011b33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011008:	2b01      	cmp	r3, #1
 801100a:	f040 8150 	bne.w	80112ae <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801100e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011012:	f003 0310 	and.w	r3, r3, #16
 8011016:	2b00      	cmp	r3, #0
 8011018:	f000 8149 	beq.w	80112ae <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801101c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011020:	f003 0310 	and.w	r3, r3, #16
 8011024:	2b00      	cmp	r3, #0
 8011026:	f000 8142 	beq.w	80112ae <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	2210      	movs	r2, #16
 8011030:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801103c:	2b40      	cmp	r3, #64	@ 0x40
 801103e:	f040 80b8 	bne.w	80111b2 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801104c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011054:	2b00      	cmp	r3, #0
 8011056:	f000 8177 	beq.w	8011348 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011060:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011064:	429a      	cmp	r2, r3
 8011066:	f080 816f 	bcs.w	8011348 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011070:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801107a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801107c:	2b81      	cmp	r3, #129	@ 0x81
 801107e:	f000 8087 	beq.w	8011190 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801108a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801108e:	e853 3f00 	ldrex	r3, [r3]
 8011092:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011096:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801109a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801109e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	461a      	mov	r2, r3
 80110a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80110ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80110b0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80110b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80110bc:	e841 2300 	strex	r3, r2, [r1]
 80110c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80110c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d1da      	bne.n	8011082 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	3308      	adds	r3, #8
 80110d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80110d6:	e853 3f00 	ldrex	r3, [r3]
 80110da:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80110dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80110de:	f023 0301 	bic.w	r3, r3, #1
 80110e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	3308      	adds	r3, #8
 80110ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80110f0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80110f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80110f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80110fc:	e841 2300 	strex	r3, r2, [r1]
 8011100:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011102:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011104:	2b00      	cmp	r3, #0
 8011106:	d1e1      	bne.n	80110cc <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	3308      	adds	r3, #8
 801110e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011110:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011112:	e853 3f00 	ldrex	r3, [r3]
 8011116:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801111a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801111e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	3308      	adds	r3, #8
 8011128:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801112c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801112e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011130:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011132:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011134:	e841 2300 	strex	r3, r2, [r1]
 8011138:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801113a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801113c:	2b00      	cmp	r3, #0
 801113e:	d1e3      	bne.n	8011108 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2220      	movs	r2, #32
 8011144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2200      	movs	r2, #0
 801114c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011156:	e853 3f00 	ldrex	r3, [r3]
 801115a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801115c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801115e:	f023 0310 	bic.w	r3, r3, #16
 8011162:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	461a      	mov	r2, r3
 801116c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011170:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011172:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011174:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011176:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011178:	e841 2300 	strex	r3, r2, [r1]
 801117c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801117e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011180:	2b00      	cmp	r3, #0
 8011182:	d1e4      	bne.n	801114e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801118a:	4618      	mov	r0, r3
 801118c:	f7f4 fdd6 	bl	8005d3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2202      	movs	r2, #2
 8011194:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	1ad3      	subs	r3, r2, r3
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	4619      	mov	r1, r3
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f000 f8e8 	bl	8011380 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80111b0:	e0ca      	b.n	8011348 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80111be:	b29b      	uxth	r3, r3
 80111c0:	1ad3      	subs	r3, r2, r3
 80111c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	f000 80bc 	beq.w	801134c <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80111d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80111d8:	2b00      	cmp	r3, #0
 80111da:	f000 80b7 	beq.w	801134c <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e6:	e853 3f00 	ldrex	r3, [r3]
 80111ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80111ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80111f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	461a      	mov	r2, r3
 80111fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011200:	647b      	str	r3, [r7, #68]	@ 0x44
 8011202:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011204:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011208:	e841 2300 	strex	r3, r2, [r1]
 801120c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801120e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011210:	2b00      	cmp	r3, #0
 8011212:	d1e4      	bne.n	80111de <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	3308      	adds	r3, #8
 801121a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801121e:	e853 3f00 	ldrex	r3, [r3]
 8011222:	623b      	str	r3, [r7, #32]
   return(result);
 8011224:	6a3b      	ldr	r3, [r7, #32]
 8011226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801122a:	f023 0301 	bic.w	r3, r3, #1
 801122e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	3308      	adds	r3, #8
 8011238:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801123c:	633a      	str	r2, [r7, #48]	@ 0x30
 801123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011240:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011244:	e841 2300 	strex	r3, r2, [r1]
 8011248:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801124a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801124c:	2b00      	cmp	r3, #0
 801124e:	d1e1      	bne.n	8011214 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2220      	movs	r2, #32
 8011254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2200      	movs	r2, #0
 801125c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2200      	movs	r2, #0
 8011262:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	e853 3f00 	ldrex	r3, [r3]
 8011270:	60fb      	str	r3, [r7, #12]
   return(result);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f023 0310 	bic.w	r3, r3, #16
 8011278:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	461a      	mov	r2, r3
 8011282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011286:	61fb      	str	r3, [r7, #28]
 8011288:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801128a:	69b9      	ldr	r1, [r7, #24]
 801128c:	69fa      	ldr	r2, [r7, #28]
 801128e:	e841 2300 	strex	r3, r2, [r1]
 8011292:	617b      	str	r3, [r7, #20]
   return(result);
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d1e4      	bne.n	8011264 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2202      	movs	r2, #2
 801129e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80112a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80112a4:	4619      	mov	r1, r3
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f000 f86a 	bl	8011380 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80112ac:	e04e      	b.n	801134c <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80112ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d014      	beq.n	80112e4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80112ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d105      	bne.n	80112d2 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80112c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80112ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d008      	beq.n	80112e4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d03a      	beq.n	8011350 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	4798      	blx	r3
    }
    return;
 80112e2:	e035      	b.n	8011350 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80112e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d009      	beq.n	8011304 <HAL_UART_IRQHandler+0x5c4>
 80112f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d003      	beq.n	8011304 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f000 fc2e 	bl	8011b5e <UART_EndTransmit_IT>
    return;
 8011302:	e026      	b.n	8011352 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801130c:	2b00      	cmp	r3, #0
 801130e:	d009      	beq.n	8011324 <HAL_UART_IRQHandler+0x5e4>
 8011310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011314:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011318:	2b00      	cmp	r3, #0
 801131a:	d003      	beq.n	8011324 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f000 fc53 	bl	8011bc8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011322:	e016      	b.n	8011352 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011328:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801132c:	2b00      	cmp	r3, #0
 801132e:	d010      	beq.n	8011352 <HAL_UART_IRQHandler+0x612>
 8011330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011334:	2b00      	cmp	r3, #0
 8011336:	da0c      	bge.n	8011352 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f000 fc3b 	bl	8011bb4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801133e:	e008      	b.n	8011352 <HAL_UART_IRQHandler+0x612>
      return;
 8011340:	bf00      	nop
 8011342:	e006      	b.n	8011352 <HAL_UART_IRQHandler+0x612>
    return;
 8011344:	bf00      	nop
 8011346:	e004      	b.n	8011352 <HAL_UART_IRQHandler+0x612>
      return;
 8011348:	bf00      	nop
 801134a:	e002      	b.n	8011352 <HAL_UART_IRQHandler+0x612>
      return;
 801134c:	bf00      	nop
 801134e:	e000      	b.n	8011352 <HAL_UART_IRQHandler+0x612>
    return;
 8011350:	bf00      	nop
  }
}
 8011352:	37e8      	adds	r7, #232	@ 0xe8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011360:	bf00      	nop
 8011362:	370c      	adds	r7, #12
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr

0801136c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801136c:	b480      	push	{r7}
 801136e:	b083      	sub	sp, #12
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011374:	bf00      	nop
 8011376:	370c      	adds	r7, #12
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr

08011380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011380:	b480      	push	{r7}
 8011382:	b083      	sub	sp, #12
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	460b      	mov	r3, r1
 801138a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801138c:	bf00      	nop
 801138e:	370c      	adds	r7, #12
 8011390:	46bd      	mov	sp, r7
 8011392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011396:	4770      	bx	lr

08011398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801139c:	b094      	sub	sp, #80	@ 0x50
 801139e:	af00      	add	r7, sp, #0
 80113a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80113a2:	2300      	movs	r3, #0
 80113a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80113a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	4b83      	ldr	r3, [pc, #524]	@ (80115bc <UART_SetConfig+0x224>)
 80113ae:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80113b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113b2:	689a      	ldr	r2, [r3, #8]
 80113b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113b6:	691b      	ldr	r3, [r3, #16]
 80113b8:	431a      	orrs	r2, r3
 80113ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113bc:	695b      	ldr	r3, [r3, #20]
 80113be:	431a      	orrs	r2, r3
 80113c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c2:	69db      	ldr	r3, [r3, #28]
 80113c4:	4313      	orrs	r3, r2
 80113c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80113c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	497c      	ldr	r1, [pc, #496]	@ (80115c0 <UART_SetConfig+0x228>)
 80113d0:	4019      	ands	r1, r3
 80113d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113d8:	430b      	orrs	r3, r1
 80113da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80113dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80113e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e8:	68d9      	ldr	r1, [r3, #12]
 80113ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	ea40 0301 	orr.w	r3, r0, r1
 80113f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80113f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f6:	699b      	ldr	r3, [r3, #24]
 80113f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80113fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	4b6f      	ldr	r3, [pc, #444]	@ (80115bc <UART_SetConfig+0x224>)
 8011400:	429a      	cmp	r2, r3
 8011402:	d009      	beq.n	8011418 <UART_SetConfig+0x80>
 8011404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	4b6e      	ldr	r3, [pc, #440]	@ (80115c4 <UART_SetConfig+0x22c>)
 801140a:	429a      	cmp	r2, r3
 801140c:	d004      	beq.n	8011418 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801140e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011410:	6a1a      	ldr	r2, [r3, #32]
 8011412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011414:	4313      	orrs	r3, r2
 8011416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	689b      	ldr	r3, [r3, #8]
 801141e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8011422:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8011426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011428:	681a      	ldr	r2, [r3, #0]
 801142a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801142c:	430b      	orrs	r3, r1
 801142e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011436:	f023 000f 	bic.w	r0, r3, #15
 801143a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801143c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801143e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	ea40 0301 	orr.w	r3, r0, r1
 8011446:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	4b5e      	ldr	r3, [pc, #376]	@ (80115c8 <UART_SetConfig+0x230>)
 801144e:	429a      	cmp	r2, r3
 8011450:	d102      	bne.n	8011458 <UART_SetConfig+0xc0>
 8011452:	2301      	movs	r3, #1
 8011454:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011456:	e032      	b.n	80114be <UART_SetConfig+0x126>
 8011458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801145a:	681a      	ldr	r2, [r3, #0]
 801145c:	4b5b      	ldr	r3, [pc, #364]	@ (80115cc <UART_SetConfig+0x234>)
 801145e:	429a      	cmp	r2, r3
 8011460:	d102      	bne.n	8011468 <UART_SetConfig+0xd0>
 8011462:	2302      	movs	r3, #2
 8011464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011466:	e02a      	b.n	80114be <UART_SetConfig+0x126>
 8011468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801146a:	681a      	ldr	r2, [r3, #0]
 801146c:	4b58      	ldr	r3, [pc, #352]	@ (80115d0 <UART_SetConfig+0x238>)
 801146e:	429a      	cmp	r2, r3
 8011470:	d102      	bne.n	8011478 <UART_SetConfig+0xe0>
 8011472:	2304      	movs	r3, #4
 8011474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011476:	e022      	b.n	80114be <UART_SetConfig+0x126>
 8011478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147a:	681a      	ldr	r2, [r3, #0]
 801147c:	4b55      	ldr	r3, [pc, #340]	@ (80115d4 <UART_SetConfig+0x23c>)
 801147e:	429a      	cmp	r2, r3
 8011480:	d102      	bne.n	8011488 <UART_SetConfig+0xf0>
 8011482:	2308      	movs	r3, #8
 8011484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011486:	e01a      	b.n	80114be <UART_SetConfig+0x126>
 8011488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	4b52      	ldr	r3, [pc, #328]	@ (80115d8 <UART_SetConfig+0x240>)
 801148e:	429a      	cmp	r2, r3
 8011490:	d102      	bne.n	8011498 <UART_SetConfig+0x100>
 8011492:	2310      	movs	r3, #16
 8011494:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011496:	e012      	b.n	80114be <UART_SetConfig+0x126>
 8011498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801149a:	681a      	ldr	r2, [r3, #0]
 801149c:	4b4f      	ldr	r3, [pc, #316]	@ (80115dc <UART_SetConfig+0x244>)
 801149e:	429a      	cmp	r2, r3
 80114a0:	d103      	bne.n	80114aa <UART_SetConfig+0x112>
 80114a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80114a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80114a8:	e009      	b.n	80114be <UART_SetConfig+0x126>
 80114aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ac:	681a      	ldr	r2, [r3, #0]
 80114ae:	4b43      	ldr	r3, [pc, #268]	@ (80115bc <UART_SetConfig+0x224>)
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d102      	bne.n	80114ba <UART_SetConfig+0x122>
 80114b4:	2320      	movs	r3, #32
 80114b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80114b8:	e001      	b.n	80114be <UART_SetConfig+0x126>
 80114ba:	2300      	movs	r3, #0
 80114bc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80114be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c0:	681a      	ldr	r2, [r3, #0]
 80114c2:	4b3e      	ldr	r3, [pc, #248]	@ (80115bc <UART_SetConfig+0x224>)
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d005      	beq.n	80114d4 <UART_SetConfig+0x13c>
 80114c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	4b3d      	ldr	r3, [pc, #244]	@ (80115c4 <UART_SetConfig+0x22c>)
 80114ce:	429a      	cmp	r2, r3
 80114d0:	f040 8088 	bne.w	80115e4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80114d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114d6:	2200      	movs	r2, #0
 80114d8:	623b      	str	r3, [r7, #32]
 80114da:	627a      	str	r2, [r7, #36]	@ 0x24
 80114dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80114e0:	f7fb fb8e 	bl	800cc00 <HAL_RCCEx_GetPeriphCLKFreq>
 80114e4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80114e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	f000 80eb 	beq.w	80116c4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80114ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114f2:	4a3b      	ldr	r2, [pc, #236]	@ (80115e0 <UART_SetConfig+0x248>)
 80114f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114f8:	461a      	mov	r2, r3
 80114fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011500:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011504:	685a      	ldr	r2, [r3, #4]
 8011506:	4613      	mov	r3, r2
 8011508:	005b      	lsls	r3, r3, #1
 801150a:	4413      	add	r3, r2
 801150c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801150e:	429a      	cmp	r2, r3
 8011510:	d305      	bcc.n	801151e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011518:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801151a:	429a      	cmp	r2, r3
 801151c:	d903      	bls.n	8011526 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 801151e:	2301      	movs	r3, #1
 8011520:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011524:	e048      	b.n	80115b8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011528:	2200      	movs	r2, #0
 801152a:	61bb      	str	r3, [r7, #24]
 801152c:	61fa      	str	r2, [r7, #28]
 801152e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011532:	4a2b      	ldr	r2, [pc, #172]	@ (80115e0 <UART_SetConfig+0x248>)
 8011534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011538:	b29b      	uxth	r3, r3
 801153a:	2200      	movs	r2, #0
 801153c:	613b      	str	r3, [r7, #16]
 801153e:	617a      	str	r2, [r7, #20]
 8011540:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011544:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011548:	f7ee feb4 	bl	80002b4 <__aeabi_uldivmod>
 801154c:	4602      	mov	r2, r0
 801154e:	460b      	mov	r3, r1
 8011550:	4610      	mov	r0, r2
 8011552:	4619      	mov	r1, r3
 8011554:	f04f 0200 	mov.w	r2, #0
 8011558:	f04f 0300 	mov.w	r3, #0
 801155c:	020b      	lsls	r3, r1, #8
 801155e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011562:	0202      	lsls	r2, r0, #8
 8011564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011566:	6849      	ldr	r1, [r1, #4]
 8011568:	0849      	lsrs	r1, r1, #1
 801156a:	2000      	movs	r0, #0
 801156c:	460c      	mov	r4, r1
 801156e:	4605      	mov	r5, r0
 8011570:	eb12 0804 	adds.w	r8, r2, r4
 8011574:	eb43 0905 	adc.w	r9, r3, r5
 8011578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	2200      	movs	r2, #0
 801157e:	60bb      	str	r3, [r7, #8]
 8011580:	60fa      	str	r2, [r7, #12]
 8011582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011586:	4640      	mov	r0, r8
 8011588:	4649      	mov	r1, r9
 801158a:	f7ee fe93 	bl	80002b4 <__aeabi_uldivmod>
 801158e:	4602      	mov	r2, r0
 8011590:	460b      	mov	r3, r1
 8011592:	4613      	mov	r3, r2
 8011594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011598:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801159c:	d308      	bcc.n	80115b0 <UART_SetConfig+0x218>
 801159e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115a4:	d204      	bcs.n	80115b0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80115a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80115ac:	60da      	str	r2, [r3, #12]
 80115ae:	e003      	b.n	80115b8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80115b0:	2301      	movs	r3, #1
 80115b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80115b6:	e085      	b.n	80116c4 <UART_SetConfig+0x32c>
 80115b8:	e084      	b.n	80116c4 <UART_SetConfig+0x32c>
 80115ba:	bf00      	nop
 80115bc:	46002400 	.word	0x46002400
 80115c0:	cfff69f3 	.word	0xcfff69f3
 80115c4:	56002400 	.word	0x56002400
 80115c8:	40013800 	.word	0x40013800
 80115cc:	40004400 	.word	0x40004400
 80115d0:	40004800 	.word	0x40004800
 80115d4:	40004c00 	.word	0x40004c00
 80115d8:	40005000 	.word	0x40005000
 80115dc:	40006400 	.word	0x40006400
 80115e0:	080127fc 	.word	0x080127fc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e6:	69db      	ldr	r3, [r3, #28]
 80115e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80115ec:	d13c      	bne.n	8011668 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80115ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115f0:	2200      	movs	r2, #0
 80115f2:	603b      	str	r3, [r7, #0]
 80115f4:	607a      	str	r2, [r7, #4]
 80115f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80115fa:	f7fb fb01 	bl	800cc00 <HAL_RCCEx_GetPeriphCLKFreq>
 80115fe:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011602:	2b00      	cmp	r3, #0
 8011604:	d05e      	beq.n	80116c4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801160a:	4a39      	ldr	r2, [pc, #228]	@ (80116f0 <UART_SetConfig+0x358>)
 801160c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011610:	461a      	mov	r2, r3
 8011612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011614:	fbb3 f3f2 	udiv	r3, r3, r2
 8011618:	005a      	lsls	r2, r3, #1
 801161a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	085b      	lsrs	r3, r3, #1
 8011620:	441a      	add	r2, r3
 8011622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	fbb2 f3f3 	udiv	r3, r2, r3
 801162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801162c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801162e:	2b0f      	cmp	r3, #15
 8011630:	d916      	bls.n	8011660 <UART_SetConfig+0x2c8>
 8011632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011638:	d212      	bcs.n	8011660 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801163a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801163c:	b29b      	uxth	r3, r3
 801163e:	f023 030f 	bic.w	r3, r3, #15
 8011642:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011646:	085b      	lsrs	r3, r3, #1
 8011648:	b29b      	uxth	r3, r3
 801164a:	f003 0307 	and.w	r3, r3, #7
 801164e:	b29a      	uxth	r2, r3
 8011650:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011652:	4313      	orrs	r3, r2
 8011654:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8011656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801165c:	60da      	str	r2, [r3, #12]
 801165e:	e031      	b.n	80116c4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8011660:	2301      	movs	r3, #1
 8011662:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011666:	e02d      	b.n	80116c4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801166a:	2200      	movs	r2, #0
 801166c:	469a      	mov	sl, r3
 801166e:	4693      	mov	fp, r2
 8011670:	4650      	mov	r0, sl
 8011672:	4659      	mov	r1, fp
 8011674:	f7fb fac4 	bl	800cc00 <HAL_RCCEx_GetPeriphCLKFreq>
 8011678:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801167a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801167c:	2b00      	cmp	r3, #0
 801167e:	d021      	beq.n	80116c4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011684:	4a1a      	ldr	r2, [pc, #104]	@ (80116f0 <UART_SetConfig+0x358>)
 8011686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801168a:	461a      	mov	r2, r3
 801168c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801168e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	085b      	lsrs	r3, r3, #1
 8011698:	441a      	add	r2, r3
 801169a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80116a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116a6:	2b0f      	cmp	r3, #15
 80116a8:	d909      	bls.n	80116be <UART_SetConfig+0x326>
 80116aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80116b0:	d205      	bcs.n	80116be <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80116b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116b4:	b29a      	uxth	r2, r3
 80116b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	60da      	str	r2, [r3, #12]
 80116bc:	e002      	b.n	80116c4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80116be:	2301      	movs	r3, #1
 80116c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80116c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116c6:	2201      	movs	r2, #1
 80116c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80116cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116ce:	2201      	movs	r2, #1
 80116d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80116d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116d6:	2200      	movs	r2, #0
 80116d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80116da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116dc:	2200      	movs	r2, #0
 80116de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80116e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3750      	adds	r7, #80	@ 0x50
 80116e8:	46bd      	mov	sp, r7
 80116ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80116ee:	bf00      	nop
 80116f0:	080127fc 	.word	0x080127fc

080116f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80116f4:	b480      	push	{r7}
 80116f6:	b083      	sub	sp, #12
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011700:	f003 0308 	and.w	r3, r3, #8
 8011704:	2b00      	cmp	r3, #0
 8011706:	d00a      	beq.n	801171e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	685b      	ldr	r3, [r3, #4]
 801170e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	430a      	orrs	r2, r1
 801171c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011722:	f003 0301 	and.w	r3, r3, #1
 8011726:	2b00      	cmp	r3, #0
 8011728:	d00a      	beq.n	8011740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	430a      	orrs	r2, r1
 801173e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011744:	f003 0302 	and.w	r3, r3, #2
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00a      	beq.n	8011762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	430a      	orrs	r2, r1
 8011760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011766:	f003 0304 	and.w	r3, r3, #4
 801176a:	2b00      	cmp	r3, #0
 801176c:	d00a      	beq.n	8011784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	430a      	orrs	r2, r1
 8011782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011788:	f003 0310 	and.w	r3, r3, #16
 801178c:	2b00      	cmp	r3, #0
 801178e:	d00a      	beq.n	80117a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	689b      	ldr	r3, [r3, #8]
 8011796:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	430a      	orrs	r2, r1
 80117a4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117aa:	f003 0320 	and.w	r3, r3, #32
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d00a      	beq.n	80117c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	689b      	ldr	r3, [r3, #8]
 80117b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	430a      	orrs	r2, r1
 80117c6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d01a      	beq.n	801180a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	430a      	orrs	r2, r1
 80117e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80117f2:	d10a      	bne.n	801180a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	430a      	orrs	r2, r1
 8011808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801180e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011812:	2b00      	cmp	r3, #0
 8011814:	d00a      	beq.n	801182c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	430a      	orrs	r2, r1
 801182a:	605a      	str	r2, [r3, #4]
  }
}
 801182c:	bf00      	nop
 801182e:	370c      	adds	r7, #12
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b098      	sub	sp, #96	@ 0x60
 801183c:	af02      	add	r7, sp, #8
 801183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011848:	f7f1 fd68 	bl	800331c <HAL_GetTick>
 801184c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	f003 0308 	and.w	r3, r3, #8
 8011858:	2b08      	cmp	r3, #8
 801185a:	d12f      	bne.n	80118bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801185c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011864:	2200      	movs	r2, #0
 8011866:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f000 f88e 	bl	801198c <UART_WaitOnFlagUntilTimeout>
 8011870:	4603      	mov	r3, r0
 8011872:	2b00      	cmp	r3, #0
 8011874:	d022      	beq.n	80118bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801187c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801187e:	e853 3f00 	ldrex	r3, [r3]
 8011882:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801188a:	653b      	str	r3, [r7, #80]	@ 0x50
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	461a      	mov	r2, r3
 8011892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011894:	647b      	str	r3, [r7, #68]	@ 0x44
 8011896:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801189a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801189c:	e841 2300 	strex	r3, r2, [r1]
 80118a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80118a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d1e6      	bne.n	8011876 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2220      	movs	r2, #32
 80118ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2200      	movs	r2, #0
 80118b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118b8:	2303      	movs	r3, #3
 80118ba:	e063      	b.n	8011984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f003 0304 	and.w	r3, r3, #4
 80118c6:	2b04      	cmp	r3, #4
 80118c8:	d149      	bne.n	801195e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80118ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118d2:	2200      	movs	r2, #0
 80118d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 f857 	bl	801198c <UART_WaitOnFlagUntilTimeout>
 80118de:	4603      	mov	r3, r0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d03c      	beq.n	801195e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ec:	e853 3f00 	ldrex	r3, [r3]
 80118f0:	623b      	str	r3, [r7, #32]
   return(result);
 80118f2:	6a3b      	ldr	r3, [r7, #32]
 80118f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80118f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	461a      	mov	r2, r3
 8011900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011902:	633b      	str	r3, [r7, #48]	@ 0x30
 8011904:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801190a:	e841 2300 	strex	r3, r2, [r1]
 801190e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1e6      	bne.n	80118e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	3308      	adds	r3, #8
 801191c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	e853 3f00 	ldrex	r3, [r3]
 8011924:	60fb      	str	r3, [r7, #12]
   return(result);
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	f023 0301 	bic.w	r3, r3, #1
 801192c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3308      	adds	r3, #8
 8011934:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011936:	61fa      	str	r2, [r7, #28]
 8011938:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801193a:	69b9      	ldr	r1, [r7, #24]
 801193c:	69fa      	ldr	r2, [r7, #28]
 801193e:	e841 2300 	strex	r3, r2, [r1]
 8011942:	617b      	str	r3, [r7, #20]
   return(result);
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d1e5      	bne.n	8011916 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2220      	movs	r2, #32
 801194e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2200      	movs	r2, #0
 8011956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801195a:	2303      	movs	r3, #3
 801195c:	e012      	b.n	8011984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2220      	movs	r2, #32
 8011962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2220      	movs	r2, #32
 801196a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2200      	movs	r2, #0
 8011972:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2200      	movs	r2, #0
 8011978:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2200      	movs	r2, #0
 801197e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011982:	2300      	movs	r3, #0
}
 8011984:	4618      	mov	r0, r3
 8011986:	3758      	adds	r7, #88	@ 0x58
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}

0801198c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b084      	sub	sp, #16
 8011990:	af00      	add	r7, sp, #0
 8011992:	60f8      	str	r0, [r7, #12]
 8011994:	60b9      	str	r1, [r7, #8]
 8011996:	603b      	str	r3, [r7, #0]
 8011998:	4613      	mov	r3, r2
 801199a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801199c:	e04f      	b.n	8011a3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801199e:	69bb      	ldr	r3, [r7, #24]
 80119a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119a4:	d04b      	beq.n	8011a3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119a6:	f7f1 fcb9 	bl	800331c <HAL_GetTick>
 80119aa:	4602      	mov	r2, r0
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	1ad3      	subs	r3, r2, r3
 80119b0:	69ba      	ldr	r2, [r7, #24]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d302      	bcc.n	80119bc <UART_WaitOnFlagUntilTimeout+0x30>
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d101      	bne.n	80119c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80119bc:	2303      	movs	r3, #3
 80119be:	e04e      	b.n	8011a5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f003 0304 	and.w	r3, r3, #4
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d037      	beq.n	8011a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	2b80      	cmp	r3, #128	@ 0x80
 80119d2:	d034      	beq.n	8011a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	2b40      	cmp	r3, #64	@ 0x40
 80119d8:	d031      	beq.n	8011a3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	69db      	ldr	r3, [r3, #28]
 80119e0:	f003 0308 	and.w	r3, r3, #8
 80119e4:	2b08      	cmp	r3, #8
 80119e6:	d110      	bne.n	8011a0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	2208      	movs	r2, #8
 80119ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80119f0:	68f8      	ldr	r0, [r7, #12]
 80119f2:	f000 f838 	bl	8011a66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	2208      	movs	r2, #8
 80119fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	2200      	movs	r2, #0
 8011a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011a06:	2301      	movs	r3, #1
 8011a08:	e029      	b.n	8011a5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	69db      	ldr	r3, [r3, #28]
 8011a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011a18:	d111      	bne.n	8011a3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a24:	68f8      	ldr	r0, [r7, #12]
 8011a26:	f000 f81e 	bl	8011a66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	2220      	movs	r2, #32
 8011a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2200      	movs	r2, #0
 8011a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011a3a:	2303      	movs	r3, #3
 8011a3c:	e00f      	b.n	8011a5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	69da      	ldr	r2, [r3, #28]
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	4013      	ands	r3, r2
 8011a48:	68ba      	ldr	r2, [r7, #8]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	bf0c      	ite	eq
 8011a4e:	2301      	moveq	r3, #1
 8011a50:	2300      	movne	r3, #0
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	461a      	mov	r2, r3
 8011a56:	79fb      	ldrb	r3, [r7, #7]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d0a0      	beq.n	801199e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011a66:	b480      	push	{r7}
 8011a68:	b095      	sub	sp, #84	@ 0x54
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a76:	e853 3f00 	ldrex	r3, [r3]
 8011a7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	461a      	mov	r2, r3
 8011a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011a94:	e841 2300 	strex	r3, r2, [r1]
 8011a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d1e6      	bne.n	8011a6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	3308      	adds	r3, #8
 8011aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa8:	6a3b      	ldr	r3, [r7, #32]
 8011aaa:	e853 3f00 	ldrex	r3, [r3]
 8011aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ab0:	69fb      	ldr	r3, [r7, #28]
 8011ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011ab6:	f023 0301 	bic.w	r3, r3, #1
 8011aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	3308      	adds	r3, #8
 8011ac2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ac4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011acc:	e841 2300 	strex	r3, r2, [r1]
 8011ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d1e3      	bne.n	8011aa0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d118      	bne.n	8011b12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	e853 3f00 	ldrex	r3, [r3]
 8011aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	f023 0310 	bic.w	r3, r3, #16
 8011af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	461a      	mov	r2, r3
 8011afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011afe:	61bb      	str	r3, [r7, #24]
 8011b00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b02:	6979      	ldr	r1, [r7, #20]
 8011b04:	69ba      	ldr	r2, [r7, #24]
 8011b06:	e841 2300 	strex	r3, r2, [r1]
 8011b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d1e6      	bne.n	8011ae0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2220      	movs	r2, #32
 8011b16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2200      	movs	r2, #0
 8011b24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011b26:	bf00      	nop
 8011b28:	3754      	adds	r7, #84	@ 0x54
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr

08011b32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b084      	sub	sp, #16
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011b3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2200      	movs	r2, #0
 8011b44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011b50:	68f8      	ldr	r0, [r7, #12]
 8011b52:	f7ff fc0b 	bl	801136c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b56:	bf00      	nop
 8011b58:	3710      	adds	r7, #16
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}

08011b5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011b5e:	b580      	push	{r7, lr}
 8011b60:	b088      	sub	sp, #32
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	e853 3f00 	ldrex	r3, [r3]
 8011b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b7a:	61fb      	str	r3, [r7, #28]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	461a      	mov	r2, r3
 8011b82:	69fb      	ldr	r3, [r7, #28]
 8011b84:	61bb      	str	r3, [r7, #24]
 8011b86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b88:	6979      	ldr	r1, [r7, #20]
 8011b8a:	69ba      	ldr	r2, [r7, #24]
 8011b8c:	e841 2300 	strex	r3, r2, [r1]
 8011b90:	613b      	str	r3, [r7, #16]
   return(result);
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d1e6      	bne.n	8011b66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2220      	movs	r2, #32
 8011b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f7ff fbd6 	bl	8011358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011bac:	bf00      	nop
 8011bae:	3720      	adds	r7, #32
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b083      	sub	sp, #12
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011bbc:	bf00      	nop
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr

08011bc8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011bd0:	bf00      	nop
 8011bd2:	370c      	adds	r7, #12
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr

08011bdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b085      	sub	sp, #20
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d101      	bne.n	8011bf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8011bee:	2302      	movs	r3, #2
 8011bf0:	e027      	b.n	8011c42 <HAL_UARTEx_DisableFifoMode+0x66>
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2224      	movs	r2, #36	@ 0x24
 8011bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	681a      	ldr	r2, [r3, #0]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f022 0201 	bic.w	r2, r2, #1
 8011c18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011c20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2200      	movs	r2, #0
 8011c26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	68fa      	ldr	r2, [r7, #12]
 8011c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2220      	movs	r2, #32
 8011c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011c40:	2300      	movs	r3, #0
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3714      	adds	r7, #20
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr

08011c4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011c4e:	b580      	push	{r7, lr}
 8011c50:	b084      	sub	sp, #16
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
 8011c56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d101      	bne.n	8011c66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011c62:	2302      	movs	r3, #2
 8011c64:	e02d      	b.n	8011cc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2224      	movs	r2, #36	@ 0x24
 8011c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f022 0201 	bic.w	r2, r2, #1
 8011c8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	689b      	ldr	r3, [r3, #8]
 8011c94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	683a      	ldr	r2, [r7, #0]
 8011c9e:	430a      	orrs	r2, r1
 8011ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 f850 	bl	8011d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	68fa      	ldr	r2, [r7, #12]
 8011cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2220      	movs	r2, #32
 8011cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011cc0:	2300      	movs	r3, #0
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}

08011cca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011cca:	b580      	push	{r7, lr}
 8011ccc:	b084      	sub	sp, #16
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	6078      	str	r0, [r7, #4]
 8011cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011cda:	2b01      	cmp	r3, #1
 8011cdc:	d101      	bne.n	8011ce2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011cde:	2302      	movs	r3, #2
 8011ce0:	e02d      	b.n	8011d3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2224      	movs	r2, #36	@ 0x24
 8011cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f022 0201 	bic.w	r2, r2, #1
 8011d08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	689b      	ldr	r3, [r3, #8]
 8011d10:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	683a      	ldr	r2, [r7, #0]
 8011d1a:	430a      	orrs	r2, r1
 8011d1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 f812 	bl	8011d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	68fa      	ldr	r2, [r7, #12]
 8011d2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2220      	movs	r2, #32
 8011d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2200      	movs	r2, #0
 8011d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011d3c:	2300      	movs	r3, #0
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3710      	adds	r7, #16
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
	...

08011d48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b085      	sub	sp, #20
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d108      	bne.n	8011d6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2201      	movs	r2, #1
 8011d64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011d68:	e031      	b.n	8011dce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011d6a:	2308      	movs	r3, #8
 8011d6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011d6e:	2308      	movs	r3, #8
 8011d70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	689b      	ldr	r3, [r3, #8]
 8011d78:	0e5b      	lsrs	r3, r3, #25
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	f003 0307 	and.w	r3, r3, #7
 8011d80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	0f5b      	lsrs	r3, r3, #29
 8011d8a:	b2db      	uxtb	r3, r3
 8011d8c:	f003 0307 	and.w	r3, r3, #7
 8011d90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d92:	7bbb      	ldrb	r3, [r7, #14]
 8011d94:	7b3a      	ldrb	r2, [r7, #12]
 8011d96:	4911      	ldr	r1, [pc, #68]	@ (8011ddc <UARTEx_SetNbDataToProcess+0x94>)
 8011d98:	5c8a      	ldrb	r2, [r1, r2]
 8011d9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011d9e:	7b3a      	ldrb	r2, [r7, #12]
 8011da0:	490f      	ldr	r1, [pc, #60]	@ (8011de0 <UARTEx_SetNbDataToProcess+0x98>)
 8011da2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8011da8:	b29a      	uxth	r2, r3
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011db0:	7bfb      	ldrb	r3, [r7, #15]
 8011db2:	7b7a      	ldrb	r2, [r7, #13]
 8011db4:	4909      	ldr	r1, [pc, #36]	@ (8011ddc <UARTEx_SetNbDataToProcess+0x94>)
 8011db6:	5c8a      	ldrb	r2, [r1, r2]
 8011db8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011dbc:	7b7a      	ldrb	r2, [r7, #13]
 8011dbe:	4908      	ldr	r1, [pc, #32]	@ (8011de0 <UARTEx_SetNbDataToProcess+0x98>)
 8011dc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011dc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8011dc6:	b29a      	uxth	r2, r3
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011dce:	bf00      	nop
 8011dd0:	3714      	adds	r7, #20
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop
 8011ddc:	08012814 	.word	0x08012814
 8011de0:	0801281c 	.word	0x0801281c

08011de4 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af02      	add	r7, sp, #8
 8011dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011dec:	2300      	movs	r3, #0
 8011dee:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011df0:	f7f1 fa94 	bl	800331c <HAL_GetTick>
 8011df4:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d102      	bne.n	8011e02 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	73fb      	strb	r3, [r7, #15]
 8011e00:	e137      	b.n	8012072 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	4a76      	ldr	r2, [pc, #472]	@ (8011fe0 <HAL_XSPI_Init+0x1fc>)
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d008      	beq.n	8011e1e <HAL_XSPI_Init+0x3a>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4a74      	ldr	r2, [pc, #464]	@ (8011fe4 <HAL_XSPI_Init+0x200>)
 8011e12:	4293      	cmp	r3, r2
 8011e14:	d003      	beq.n	8011e1e <HAL_XSPI_Init+0x3a>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4a73      	ldr	r2, [pc, #460]	@ (8011fe8 <HAL_XSPI_Init+0x204>)
 8011e1c:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	4a72      	ldr	r2, [pc, #456]	@ (8011fec <HAL_XSPI_Init+0x208>)
 8011e24:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	4a6d      	ldr	r2, [pc, #436]	@ (8011fe0 <HAL_XSPI_Init+0x1fc>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d008      	beq.n	8011e42 <HAL_XSPI_Init+0x5e>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a6b      	ldr	r2, [pc, #428]	@ (8011fe4 <HAL_XSPI_Init+0x200>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d003      	beq.n	8011e42 <HAL_XSPI_Init+0x5e>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4a6a      	ldr	r2, [pc, #424]	@ (8011fe8 <HAL_XSPI_Init+0x204>)
 8011e40:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	4a66      	ldr	r2, [pc, #408]	@ (8011fe0 <HAL_XSPI_Init+0x1fc>)
 8011e48:	4293      	cmp	r3, r2
 8011e4a:	d008      	beq.n	8011e5e <HAL_XSPI_Init+0x7a>
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	4a64      	ldr	r2, [pc, #400]	@ (8011fe4 <HAL_XSPI_Init+0x200>)
 8011e52:	4293      	cmp	r3, r2
 8011e54:	d003      	beq.n	8011e5e <HAL_XSPI_Init+0x7a>
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	4a63      	ldr	r2, [pc, #396]	@ (8011fe8 <HAL_XSPI_Init+0x204>)
 8011e5c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2200      	movs	r2, #0
 8011e62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	f040 8102 	bne.w	8012072 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7f0 fa4c 	bl	800230c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011e74:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f000 f8ff 	bl	801207c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	689a      	ldr	r2, [r3, #8]
 8011e84:	4b5a      	ldr	r3, [pc, #360]	@ (8011ff0 <HAL_XSPI_Init+0x20c>)
 8011e86:	4013      	ands	r3, r2
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	68d1      	ldr	r1, [r2, #12]
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	6912      	ldr	r2, [r2, #16]
 8011e90:	0412      	lsls	r2, r2, #16
 8011e92:	4311      	orrs	r1, r2
 8011e94:	687a      	ldr	r2, [r7, #4]
 8011e96:	6952      	ldr	r2, [r2, #20]
 8011e98:	3a01      	subs	r2, #1
 8011e9a:	0212      	lsls	r2, r2, #8
 8011e9c:	4311      	orrs	r1, r2
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	69d2      	ldr	r2, [r2, #28]
 8011ea2:	4311      	orrs	r1, r2
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	6812      	ldr	r2, [r2, #0]
 8011ea8:	430b      	orrs	r3, r1
 8011eaa:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8011fe0 <HAL_XSPI_Init+0x1fc>)
 8011eb2:	4293      	cmp	r3, r2
 8011eb4:	d00e      	beq.n	8011ed4 <HAL_XSPI_Init+0xf0>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	4a4a      	ldr	r2, [pc, #296]	@ (8011fe4 <HAL_XSPI_Init+0x200>)
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d009      	beq.n	8011ed4 <HAL_XSPI_Init+0xf0>
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	4a48      	ldr	r2, [pc, #288]	@ (8011fe8 <HAL_XSPI_Init+0x204>)
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	d004      	beq.n	8011ed4 <HAL_XSPI_Init+0xf0>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	4a49      	ldr	r2, [pc, #292]	@ (8011ff4 <HAL_XSPI_Init+0x210>)
 8011ed0:	4293      	cmp	r3, r2
 8011ed2:	d10a      	bne.n	8011eea <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	689b      	ldr	r3, [r3, #8]
 8011eda:	f023 0108 	bic.w	r1, r3, #8
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	430a      	orrs	r2, r1
 8011ee8:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	68db      	ldr	r3, [r3, #12]
 8011ef0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6a1a      	ldr	r2, [r3, #32]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	430a      	orrs	r2, r1
 8011efe:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	691b      	ldr	r3, [r3, #16]
 8011f06:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f0e:	041a      	lsls	r2, r3, #16
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	430a      	orrs	r2, r1
 8011f16:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	4a30      	ldr	r2, [pc, #192]	@ (8011fe0 <HAL_XSPI_Init+0x1fc>)
 8011f1e:	4293      	cmp	r3, r2
 8011f20:	d00e      	beq.n	8011f40 <HAL_XSPI_Init+0x15c>
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	4a2f      	ldr	r2, [pc, #188]	@ (8011fe4 <HAL_XSPI_Init+0x200>)
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	d009      	beq.n	8011f40 <HAL_XSPI_Init+0x15c>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4a2d      	ldr	r2, [pc, #180]	@ (8011fe8 <HAL_XSPI_Init+0x204>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d004      	beq.n	8011f40 <HAL_XSPI_Init+0x15c>
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8011ff4 <HAL_XSPI_Init+0x210>)
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	d10a      	bne.n	8011f56 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	691b      	ldr	r3, [r3, #16]
 8011f46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	430a      	orrs	r2, r1
 8011f54:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011f5e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	3b01      	subs	r3, #1
 8011f70:	021a      	lsls	r2, r3, #8
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	430a      	orrs	r2, r1
 8011f78:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011f7e:	9300      	str	r3, [sp, #0]
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	2200      	movs	r2, #0
 8011f84:	2120      	movs	r1, #32
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 f887 	bl	801209a <XSPI_WaitFlagStateUntilTimeout>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d16d      	bne.n	8012072 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	430a      	orrs	r2, r1
 8011faa:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8011fec <HAL_XSPI_Init+0x208>)
 8011fb2:	4293      	cmp	r3, r2
 8011fb4:	d004      	beq.n	8011fc0 <HAL_XSPI_Init+0x1dc>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	4a0f      	ldr	r2, [pc, #60]	@ (8011ff8 <HAL_XSPI_Init+0x214>)
 8011fbc:	4293      	cmp	r3, r2
 8011fbe:	d11d      	bne.n	8011ffc <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fc4:	9300      	str	r3, [sp, #0]
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	2120      	movs	r1, #32
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f000 f864 	bl	801209a <XSPI_WaitFlagStateUntilTimeout>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8011fd6:	7bfb      	ldrb	r3, [r7, #15]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00f      	beq.n	8011ffc <HAL_XSPI_Init+0x218>
          {
            return status;
 8011fdc:	7bfb      	ldrb	r3, [r7, #15]
 8011fde:	e049      	b.n	8012074 <HAL_XSPI_Init+0x290>
 8011fe0:	420d1400 	.word	0x420d1400
 8011fe4:	520d1400 	.word	0x520d1400
 8011fe8:	420d2400 	.word	0x420d2400
 8011fec:	420d3400 	.word	0x420d3400
 8011ff0:	f8e0c0fc 	.word	0xf8e0c0fc
 8011ff4:	520d2400 	.word	0x520d2400
 8011ff8:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	689a      	ldr	r2, [r3, #8]
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	430a      	orrs	r2, r1
 8012010:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801201a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012026:	431a      	orrs	r2, r3
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	430a      	orrs	r2, r1
 801202e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	681a      	ldr	r2, [r3, #0]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	f042 0201 	orr.w	r2, r2, #1
 8012040:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	699b      	ldr	r3, [r3, #24]
 8012046:	2b02      	cmp	r3, #2
 8012048:	d107      	bne.n	801205a <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	689a      	ldr	r2, [r3, #8]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	f042 0202 	orr.w	r2, r2, #2
 8012058:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012062:	d103      	bne.n	801206c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2201      	movs	r2, #1
 8012068:	655a      	str	r2, [r3, #84]	@ 0x54
 801206a:	e002      	b.n	8012072 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2202      	movs	r2, #2
 8012070:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8012072:	7bfb      	ldrb	r3, [r7, #15]
}
 8012074:	4618      	mov	r0, r3
 8012076:	3710      	adds	r7, #16
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	683a      	ldr	r2, [r7, #0]
 801208a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 801208c:	2300      	movs	r3, #0
}
 801208e:	4618      	mov	r0, r3
 8012090:	370c      	adds	r7, #12
 8012092:	46bd      	mov	sp, r7
 8012094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012098:	4770      	bx	lr

0801209a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801209a:	b580      	push	{r7, lr}
 801209c:	b084      	sub	sp, #16
 801209e:	af00      	add	r7, sp, #0
 80120a0:	60f8      	str	r0, [r7, #12]
 80120a2:	60b9      	str	r1, [r7, #8]
 80120a4:	603b      	str	r3, [r7, #0]
 80120a6:	4613      	mov	r3, r2
 80120a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80120aa:	e01a      	b.n	80120e2 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80120ac:	69bb      	ldr	r3, [r7, #24]
 80120ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b2:	d016      	beq.n	80120e2 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80120b4:	f7f1 f932 	bl	800331c <HAL_GetTick>
 80120b8:	4602      	mov	r2, r0
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	1ad3      	subs	r3, r2, r3
 80120be:	69ba      	ldr	r2, [r7, #24]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d302      	bcc.n	80120ca <XSPI_WaitFlagStateUntilTimeout+0x30>
 80120c4:	69bb      	ldr	r3, [r7, #24]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d10b      	bne.n	80120e2 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80120d0:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120d6:	f043 0201 	orr.w	r2, r3, #1
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80120de:	2303      	movs	r3, #3
 80120e0:	e00e      	b.n	8012100 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	6a1a      	ldr	r2, [r3, #32]
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	4013      	ands	r3, r2
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	bf14      	ite	ne
 80120f0:	2301      	movne	r3, #1
 80120f2:	2300      	moveq	r3, #0
 80120f4:	b2db      	uxtb	r3, r3
 80120f6:	461a      	mov	r2, r3
 80120f8:	79fb      	ldrb	r3, [r7, #7]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d1d6      	bne.n	80120ac <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80120fe:	2300      	movs	r3, #0
}
 8012100:	4618      	mov	r0, r3
 8012102:	3710      	adds	r7, #16
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012108:	b084      	sub	sp, #16
 801210a:	b580      	push	{r7, lr}
 801210c:	b084      	sub	sp, #16
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	f107 001c 	add.w	r0, r7, #28
 8012116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 801211a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801211e:	2b03      	cmp	r3, #3
 8012120:	d105      	bne.n	801212e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f000 fa8e 	bl	8012650 <USB_CoreReset>
 8012134:	4603      	mov	r3, r0
 8012136:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8012138:	7fbb      	ldrb	r3, [r7, #30]
 801213a:	2b01      	cmp	r3, #1
 801213c:	d10b      	bne.n	8012156 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	689b      	ldr	r3, [r3, #8]
 8012142:	f043 0208 	orr.w	r2, r3, #8
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	689b      	ldr	r3, [r3, #8]
 801214e:	f043 0220 	orr.w	r2, r3, #32
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8012156:	7bfb      	ldrb	r3, [r7, #15]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012162:	b004      	add	sp, #16
 8012164:	4770      	bx	lr

08012166 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012166:	b480      	push	{r7}
 8012168:	b083      	sub	sp, #12
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	689b      	ldr	r3, [r3, #8]
 8012172:	f023 0201 	bic.w	r2, r3, #1
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801217a:	2300      	movs	r3, #0
}
 801217c:	4618      	mov	r0, r3
 801217e:	370c      	adds	r7, #12
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr

08012188 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	460b      	mov	r3, r1
 8012192:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012194:	2300      	movs	r3, #0
 8012196:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	68db      	ldr	r3, [r3, #12]
 801219c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80121a4:	78fb      	ldrb	r3, [r7, #3]
 80121a6:	2b01      	cmp	r3, #1
 80121a8:	d115      	bne.n	80121d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80121b6:	200a      	movs	r0, #10
 80121b8:	f7f1 f8bc 	bl	8003334 <HAL_Delay>
      ms += 10U;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	330a      	adds	r3, #10
 80121c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f000 fa36 	bl	8012634 <USB_GetMode>
 80121c8:	4603      	mov	r3, r0
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d01e      	beq.n	801220c <USB_SetCurrentMode+0x84>
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80121d2:	d9f0      	bls.n	80121b6 <USB_SetCurrentMode+0x2e>
 80121d4:	e01a      	b.n	801220c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80121d6:	78fb      	ldrb	r3, [r7, #3]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d115      	bne.n	8012208 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80121e8:	200a      	movs	r0, #10
 80121ea:	f7f1 f8a3 	bl	8003334 <HAL_Delay>
      ms += 10U;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	330a      	adds	r3, #10
 80121f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 fa1d 	bl	8012634 <USB_GetMode>
 80121fa:	4603      	mov	r3, r0
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d005      	beq.n	801220c <USB_SetCurrentMode+0x84>
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2bc7      	cmp	r3, #199	@ 0xc7
 8012204:	d9f0      	bls.n	80121e8 <USB_SetCurrentMode+0x60>
 8012206:	e001      	b.n	801220c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012208:	2301      	movs	r3, #1
 801220a:	e005      	b.n	8012218 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2bc8      	cmp	r3, #200	@ 0xc8
 8012210:	d101      	bne.n	8012216 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012212:	2301      	movs	r3, #1
 8012214:	e000      	b.n	8012218 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012216:	2300      	movs	r3, #0
}
 8012218:	4618      	mov	r0, r3
 801221a:	3710      	adds	r7, #16
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012220:	b084      	sub	sp, #16
 8012222:	b580      	push	{r7, lr}
 8012224:	b086      	sub	sp, #24
 8012226:	af00      	add	r7, sp, #0
 8012228:	6078      	str	r0, [r7, #4]
 801222a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801222e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012232:	2300      	movs	r3, #0
 8012234:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801223a:	2300      	movs	r3, #0
 801223c:	613b      	str	r3, [r7, #16]
 801223e:	e009      	b.n	8012254 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012240:	687a      	ldr	r2, [r7, #4]
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	3340      	adds	r3, #64	@ 0x40
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	4413      	add	r3, r2
 801224a:	2200      	movs	r2, #0
 801224c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	3301      	adds	r3, #1
 8012252:	613b      	str	r3, [r7, #16]
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	2b0e      	cmp	r3, #14
 8012258:	d9f2      	bls.n	8012240 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801225e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012266:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801226a:	2b00      	cmp	r3, #0
 801226c:	d11c      	bne.n	80122a8 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	68fa      	ldr	r2, [r7, #12]
 8012278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801227c:	f043 0302 	orr.w	r3, r3, #2
 8012280:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012286:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012292:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801229e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80122a6:	e011      	b.n	80122cc <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80122d2:	461a      	mov	r2, r3
 80122d4:	2300      	movs	r3, #0
 80122d6:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80122d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80122dc:	2b03      	cmp	r3, #3
 80122de:	d10d      	bne.n	80122fc <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80122e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d104      	bne.n	80122f2 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80122e8:	2100      	movs	r1, #0
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f000 f968 	bl	80125c0 <USB_SetDevSpeed>
 80122f0:	e008      	b.n	8012304 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80122f2:	2101      	movs	r1, #1
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f000 f963 	bl	80125c0 <USB_SetDevSpeed>
 80122fa:	e003      	b.n	8012304 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80122fc:	2103      	movs	r1, #3
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 f95e 	bl	80125c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012304:	2110      	movs	r1, #16
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f000 f8fa 	bl	8012500 <USB_FlushTxFifo>
 801230c:	4603      	mov	r3, r0
 801230e:	2b00      	cmp	r3, #0
 8012310:	d001      	beq.n	8012316 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8012312:	2301      	movs	r3, #1
 8012314:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 f924 	bl	8012564 <USB_FlushRxFifo>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d001      	beq.n	8012326 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8012322:	2301      	movs	r3, #1
 8012324:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801232c:	461a      	mov	r2, r3
 801232e:	2300      	movs	r3, #0
 8012330:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012338:	461a      	mov	r2, r3
 801233a:	2300      	movs	r3, #0
 801233c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012344:	461a      	mov	r2, r3
 8012346:	2300      	movs	r3, #0
 8012348:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801234a:	2300      	movs	r3, #0
 801234c:	613b      	str	r3, [r7, #16]
 801234e:	e043      	b.n	80123d8 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	015a      	lsls	r2, r3, #5
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	4413      	add	r3, r2
 8012358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012366:	d118      	bne.n	801239a <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d10a      	bne.n	8012384 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	015a      	lsls	r2, r3, #5
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	4413      	add	r3, r2
 8012376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801237a:	461a      	mov	r2, r3
 801237c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012380:	6013      	str	r3, [r2, #0]
 8012382:	e013      	b.n	80123ac <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	015a      	lsls	r2, r3, #5
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	4413      	add	r3, r2
 801238c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012390:	461a      	mov	r2, r3
 8012392:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012396:	6013      	str	r3, [r2, #0]
 8012398:	e008      	b.n	80123ac <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	015a      	lsls	r2, r3, #5
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	4413      	add	r3, r2
 80123a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123a6:	461a      	mov	r2, r3
 80123a8:	2300      	movs	r3, #0
 80123aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	015a      	lsls	r2, r3, #5
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	4413      	add	r3, r2
 80123b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123b8:	461a      	mov	r2, r3
 80123ba:	2300      	movs	r3, #0
 80123bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	015a      	lsls	r2, r3, #5
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	4413      	add	r3, r2
 80123c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123ca:	461a      	mov	r2, r3
 80123cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80123d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	3301      	adds	r3, #1
 80123d6:	613b      	str	r3, [r7, #16]
 80123d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80123dc:	461a      	mov	r2, r3
 80123de:	693b      	ldr	r3, [r7, #16]
 80123e0:	4293      	cmp	r3, r2
 80123e2:	d3b5      	bcc.n	8012350 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80123e4:	2300      	movs	r3, #0
 80123e6:	613b      	str	r3, [r7, #16]
 80123e8:	e043      	b.n	8012472 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	015a      	lsls	r2, r3, #5
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	4413      	add	r3, r2
 80123f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80123fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012400:	d118      	bne.n	8012434 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d10a      	bne.n	801241e <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	015a      	lsls	r2, r3, #5
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	4413      	add	r3, r2
 8012410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012414:	461a      	mov	r2, r3
 8012416:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801241a:	6013      	str	r3, [r2, #0]
 801241c:	e013      	b.n	8012446 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	015a      	lsls	r2, r3, #5
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	4413      	add	r3, r2
 8012426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801242a:	461a      	mov	r2, r3
 801242c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012430:	6013      	str	r3, [r2, #0]
 8012432:	e008      	b.n	8012446 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	015a      	lsls	r2, r3, #5
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	4413      	add	r3, r2
 801243c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012440:	461a      	mov	r2, r3
 8012442:	2300      	movs	r3, #0
 8012444:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	015a      	lsls	r2, r3, #5
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	4413      	add	r3, r2
 801244e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012452:	461a      	mov	r2, r3
 8012454:	2300      	movs	r3, #0
 8012456:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	015a      	lsls	r2, r3, #5
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	4413      	add	r3, r2
 8012460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012464:	461a      	mov	r2, r3
 8012466:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801246a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	3301      	adds	r3, #1
 8012470:	613b      	str	r3, [r7, #16]
 8012472:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012476:	461a      	mov	r2, r3
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	4293      	cmp	r3, r2
 801247c:	d3b5      	bcc.n	80123ea <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012484:	691b      	ldr	r3, [r3, #16]
 8012486:	68fa      	ldr	r2, [r7, #12]
 8012488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801248c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012490:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2200      	movs	r2, #0
 8012496:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801249e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80124a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d105      	bne.n	80124b4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	699b      	ldr	r3, [r3, #24]
 80124ac:	f043 0210 	orr.w	r2, r3, #16
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	699a      	ldr	r2, [r3, #24]
 80124b8:	4b10      	ldr	r3, [pc, #64]	@ (80124fc <USB_DevInit+0x2dc>)
 80124ba:	4313      	orrs	r3, r2
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80124c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d005      	beq.n	80124d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	699b      	ldr	r3, [r3, #24]
 80124cc:	f043 0208 	orr.w	r2, r3, #8
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80124d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d107      	bne.n	80124ec <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	699b      	ldr	r3, [r3, #24]
 80124e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80124e4:	f043 0304 	orr.w	r3, r3, #4
 80124e8:	687a      	ldr	r2, [r7, #4]
 80124ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80124ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3718      	adds	r7, #24
 80124f2:	46bd      	mov	sp, r7
 80124f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80124f8:	b004      	add	sp, #16
 80124fa:	4770      	bx	lr
 80124fc:	803c3800 	.word	0x803c3800

08012500 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012500:	b480      	push	{r7}
 8012502:	b085      	sub	sp, #20
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801250a:	2300      	movs	r3, #0
 801250c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	3301      	adds	r3, #1
 8012512:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801251a:	d901      	bls.n	8012520 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801251c:	2303      	movs	r3, #3
 801251e:	e01b      	b.n	8012558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	691b      	ldr	r3, [r3, #16]
 8012524:	2b00      	cmp	r3, #0
 8012526:	daf2      	bge.n	801250e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012528:	2300      	movs	r3, #0
 801252a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	019b      	lsls	r3, r3, #6
 8012530:	f043 0220 	orr.w	r2, r3, #32
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	3301      	adds	r3, #1
 801253c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012544:	d901      	bls.n	801254a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012546:	2303      	movs	r3, #3
 8012548:	e006      	b.n	8012558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	691b      	ldr	r3, [r3, #16]
 801254e:	f003 0320 	and.w	r3, r3, #32
 8012552:	2b20      	cmp	r3, #32
 8012554:	d0f0      	beq.n	8012538 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012556:	2300      	movs	r3, #0
}
 8012558:	4618      	mov	r0, r3
 801255a:	3714      	adds	r7, #20
 801255c:	46bd      	mov	sp, r7
 801255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012562:	4770      	bx	lr

08012564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012564:	b480      	push	{r7}
 8012566:	b085      	sub	sp, #20
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801256c:	2300      	movs	r3, #0
 801256e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	3301      	adds	r3, #1
 8012574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801257c:	d901      	bls.n	8012582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801257e:	2303      	movs	r3, #3
 8012580:	e018      	b.n	80125b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	691b      	ldr	r3, [r3, #16]
 8012586:	2b00      	cmp	r3, #0
 8012588:	daf2      	bge.n	8012570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801258a:	2300      	movs	r3, #0
 801258c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2210      	movs	r2, #16
 8012592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	3301      	adds	r3, #1
 8012598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80125a0:	d901      	bls.n	80125a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80125a2:	2303      	movs	r3, #3
 80125a4:	e006      	b.n	80125b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	691b      	ldr	r3, [r3, #16]
 80125aa:	f003 0310 	and.w	r3, r3, #16
 80125ae:	2b10      	cmp	r3, #16
 80125b0:	d0f0      	beq.n	8012594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80125b2:	2300      	movs	r3, #0
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3714      	adds	r7, #20
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	4770      	bx	lr

080125c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	460b      	mov	r3, r1
 80125ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	78fb      	ldrb	r3, [r7, #3]
 80125da:	68f9      	ldr	r1, [r7, #12]
 80125dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80125e0:	4313      	orrs	r3, r2
 80125e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80125e4:	2300      	movs	r3, #0
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3714      	adds	r7, #20
 80125ea:	46bd      	mov	sp, r7
 80125ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f0:	4770      	bx	lr

080125f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80125f2:	b480      	push	{r7}
 80125f4:	b085      	sub	sp, #20
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	68fa      	ldr	r2, [r7, #12]
 8012608:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801260c:	f023 0303 	bic.w	r3, r3, #3
 8012610:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	68fa      	ldr	r2, [r7, #12]
 801261c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012620:	f043 0302 	orr.w	r3, r3, #2
 8012624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012626:	2300      	movs	r3, #0
}
 8012628:	4618      	mov	r0, r3
 801262a:	3714      	adds	r7, #20
 801262c:	46bd      	mov	sp, r7
 801262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012632:	4770      	bx	lr

08012634 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	695b      	ldr	r3, [r3, #20]
 8012640:	f003 0301 	and.w	r3, r3, #1
}
 8012644:	4618      	mov	r0, r3
 8012646:	370c      	adds	r7, #12
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr

08012650 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012650:	b480      	push	{r7}
 8012652:	b085      	sub	sp, #20
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012658:	2300      	movs	r3, #0
 801265a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	3301      	adds	r3, #1
 8012660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012668:	d901      	bls.n	801266e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801266a:	2303      	movs	r3, #3
 801266c:	e01b      	b.n	80126a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	691b      	ldr	r3, [r3, #16]
 8012672:	2b00      	cmp	r3, #0
 8012674:	daf2      	bge.n	801265c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012676:	2300      	movs	r3, #0
 8012678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	691b      	ldr	r3, [r3, #16]
 801267e:	f043 0201 	orr.w	r2, r3, #1
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	3301      	adds	r3, #1
 801268a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012692:	d901      	bls.n	8012698 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012694:	2303      	movs	r3, #3
 8012696:	e006      	b.n	80126a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	691b      	ldr	r3, [r3, #16]
 801269c:	f003 0301 	and.w	r3, r3, #1
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	d0f0      	beq.n	8012686 <USB_CoreReset+0x36>

  return HAL_OK;
 80126a4:	2300      	movs	r3, #0
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3714      	adds	r7, #20
 80126aa:	46bd      	mov	sp, r7
 80126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b0:	4770      	bx	lr

080126b2 <memset>:
 80126b2:	4402      	add	r2, r0
 80126b4:	4603      	mov	r3, r0
 80126b6:	4293      	cmp	r3, r2
 80126b8:	d100      	bne.n	80126bc <memset+0xa>
 80126ba:	4770      	bx	lr
 80126bc:	f803 1b01 	strb.w	r1, [r3], #1
 80126c0:	e7f9      	b.n	80126b6 <memset+0x4>
	...

080126c4 <__libc_init_array>:
 80126c4:	b570      	push	{r4, r5, r6, lr}
 80126c6:	4d0d      	ldr	r5, [pc, #52]	@ (80126fc <__libc_init_array+0x38>)
 80126c8:	2600      	movs	r6, #0
 80126ca:	4c0d      	ldr	r4, [pc, #52]	@ (8012700 <__libc_init_array+0x3c>)
 80126cc:	1b64      	subs	r4, r4, r5
 80126ce:	10a4      	asrs	r4, r4, #2
 80126d0:	42a6      	cmp	r6, r4
 80126d2:	d109      	bne.n	80126e8 <__libc_init_array+0x24>
 80126d4:	4d0b      	ldr	r5, [pc, #44]	@ (8012704 <__libc_init_array+0x40>)
 80126d6:	2600      	movs	r6, #0
 80126d8:	4c0b      	ldr	r4, [pc, #44]	@ (8012708 <__libc_init_array+0x44>)
 80126da:	f000 f817 	bl	801270c <_init>
 80126de:	1b64      	subs	r4, r4, r5
 80126e0:	10a4      	asrs	r4, r4, #2
 80126e2:	42a6      	cmp	r6, r4
 80126e4:	d105      	bne.n	80126f2 <__libc_init_array+0x2e>
 80126e6:	bd70      	pop	{r4, r5, r6, pc}
 80126e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80126ec:	3601      	adds	r6, #1
 80126ee:	4798      	blx	r3
 80126f0:	e7ee      	b.n	80126d0 <__libc_init_array+0xc>
 80126f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80126f6:	3601      	adds	r6, #1
 80126f8:	4798      	blx	r3
 80126fa:	e7f2      	b.n	80126e2 <__libc_init_array+0x1e>
 80126fc:	0801282c 	.word	0x0801282c
 8012700:	0801282c 	.word	0x0801282c
 8012704:	0801282c 	.word	0x0801282c
 8012708:	08012830 	.word	0x08012830

0801270c <_init>:
 801270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801270e:	bf00      	nop
 8012710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012712:	bc08      	pop	{r3}
 8012714:	469e      	mov	lr, r3
 8012716:	4770      	bx	lr

08012718 <_fini>:
 8012718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801271a:	bf00      	nop
 801271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801271e:	bc08      	pop	{r3}
 8012720:	469e      	mov	lr, r3
 8012722:	4770      	bx	lr
