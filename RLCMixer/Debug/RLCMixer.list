
RLCMixer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012250  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080124c4  080124c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125c4  080125c4  00014034  2**0
                  CONTENTS
  4 .ARM          00000008  080125c4  080125c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125cc  080125cc  00014034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125cc  080125cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080125d0  080125d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  080125d4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000378d0  20000034  08012608  00014034  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20037904  08012608  00014904  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031fa1  00000000  00000000  0001406a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004da1  00000000  00000000  0004600b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad0  00000000  00000000  0004adb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002196  00000000  00000000  0004d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047332  00000000  00000000  0004fa16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035e11  00000000  00000000  00096d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bcafd  00000000  00000000  000ccb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00289656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be5c  00000000  00000000  0028969c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  002954f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000034 	.word	0x20000034
 8000290:	00000000 	.word	0x00000000
 8000294:	080124ac 	.word	0x080124ac

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000038 	.word	0x20000038
 80002b0:	080124ac 	.word	0x080124ac

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Do_Comb0>:

struct delayInit delayChannel[6] = {0};


float Do_Comb0(float inSample, int channelNum)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005d6:	6038      	str	r0, [r7, #0]
	delayChannel[0].cf_g = 0.8;
 80005d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000694 <Do_Comb0+0xc8>)
 80005da:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80005de:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 80005e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000698 <Do_Comb0+0xcc>)
 80005e4:	601a      	str	r2, [r3, #0]
	delayChannel[0].cf_p = 0;
 80005e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000694 <Do_Comb0+0xc8>)
 80005e8:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80005ec:	461a      	mov	r2, r3
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c2 34a0 	str.w	r3, [r2, #1184]	@ 0x4a0

	switch(channelNum) {
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d144      	bne.n	8000684 <Do_Comb0+0xb8>
	case 1:
		float readback = delayChannel[0].cfbuf[delayChannel[0].cf_p];
 80005fa:	4b26      	ldr	r3, [pc, #152]	@ (8000694 <Do_Comb0+0xc8>)
 80005fc:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000600:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8000604:	4a23      	ldr	r2, [pc, #140]	@ (8000694 <Do_Comb0+0xc8>)
 8000606:	3302      	adds	r3, #2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	60fb      	str	r3, [r7, #12]
		float new = readback*(delayChannel[0].cf_g) + inSample;
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <Do_Comb0+0xc8>)
 8000612:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000616:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 800061a:	ed93 7a00 	vldr	s14, [r3]
 800061e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000626:	ed97 7a01 	vldr	s14, [r7, #4]
 800062a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800062e:	edc7 7a02 	vstr	s15, [r7, #8]
		cfbuf0[delayChannel[0].cf_p] = new;
 8000632:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <Do_Comb0+0xc8>)
 8000634:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000638:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800063c:	4a17      	ldr	r2, [pc, #92]	@ (800069c <Do_Comb0+0xd0>)
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	601a      	str	r2, [r3, #0]
		delayChannel[0].cf_p++;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <Do_Comb0+0xc8>)
 8000648:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800064c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8000650:	3301      	adds	r3, #1
 8000652:	4a10      	ldr	r2, [pc, #64]	@ (8000694 <Do_Comb0+0xc8>)
 8000654:	f502 42e0 	add.w	r2, r2, #28672	@ 0x7000
 8000658:	f8c2 34a0 	str.w	r3, [r2, #1184]	@ 0x4a0
		if (delayChannel[0].cf_p==cf0_lim)
 800065c:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <Do_Comb0+0xc8>)
 800065e:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000662:	f8d3 24a0 	ldr.w	r2, [r3, #1184]	@ 0x4a0
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <Do_Comb0+0xd4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d106      	bne.n	800067c <Do_Comb0+0xb0>
		{
			delayChannel[0].cf_p = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <Do_Comb0+0xc8>)
 8000670:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000674:	461a      	mov	r2, r3
 8000676:	2300      	movs	r3, #0
 8000678:	f8c2 34a0 	str.w	r3, [r2, #1184]	@ 0x4a0
		}
		return readback;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	ee07 3a90 	vmov	s15, r3
 8000682:	e7ff      	b.n	8000684 <Do_Comb0+0xb8>
	break;
	}
}
 8000684:	eeb0 0a67 	vmov.f32	s0, s15
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20008220 	.word	0x20008220
 8000698:	3f4ccccd 	.word	0x3f4ccccd
 800069c:	20000d8c 	.word	0x20000d8c
 80006a0:	20000d84 	.word	0x20000d84

080006a4 <Do_Allpass0>:
float Do_Allpass0(float inSample, int channelNum)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80006ae:	6038      	str	r0, [r7, #0]
	delayChannel[0].cf_g = 0.7;
 80006b0:	4b30      	ldr	r3, [pc, #192]	@ (8000774 <Do_Allpass0+0xd0>)
 80006b2:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80006b6:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 80006ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000778 <Do_Allpass0+0xd4>)
 80006bc:	601a      	str	r2, [r3, #0]
	delayChannel[0].cf_p = 0;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <Do_Allpass0+0xd0>)
 80006c0:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80006c4:	461a      	mov	r2, r3
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c2 34a0 	str.w	r3, [r2, #1184]	@ 0x4a0

	switch(channelNum) {
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d149      	bne.n	8000766 <Do_Allpass0+0xc2>
	case 1:
		float readback = delayChannel[0].apbuf[delayChannel[0].ap_p];
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <Do_Allpass0+0xd0>)
 80006d4:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80006d8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 80006dc:	4a25      	ldr	r2, [pc, #148]	@ (8000774 <Do_Allpass0+0xd0>)
 80006de:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 80006e2:	3306      	adds	r3, #6
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	60fb      	str	r3, [r7, #12]
		readback += (-delayChannel[0].cf_g) * inSample;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <Do_Allpass0+0xd0>)
 80006ee:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80006f2:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 80006f6:	edd3 7a00 	vldr	s15, [r3]
 80006fa:	eeb1 7a67 	vneg.f32	s14, s15
 80006fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000706:	ed97 7a03 	vldr	s14, [r7, #12]
 800070a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800070e:	edc7 7a03 	vstr	s15, [r7, #12]
		float new = readback*delayChannel[0].cf_g + inSample;
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <Do_Allpass0+0xd0>)
 8000714:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000718:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 800071c:	ed93 7a00 	vldr	s14, [r3]
 8000720:	edd7 7a03 	vldr	s15, [r7, #12]
 8000724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000728:	ed97 7a01 	vldr	s14, [r7, #4]
 800072c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000730:	edc7 7a02 	vstr	s15, [r7, #8]
		apbuf0[ap0_p] = new;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <Do_Allpass0+0xd8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a11      	ldr	r2, [pc, #68]	@ (8000780 <Do_Allpass0+0xdc>)
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	601a      	str	r2, [r3, #0]
		ap0_p++;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <Do_Allpass0+0xd8>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	4a0c      	ldr	r2, [pc, #48]	@ (800077c <Do_Allpass0+0xd8>)
 800074a:	6013      	str	r3, [r2, #0]
		if (ap0_p == ap0_lim)
 800074c:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <Do_Allpass0+0xd8>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <Do_Allpass0+0xe0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d102      	bne.n	800075e <Do_Allpass0+0xba>
		{
			ap0_p = 0;
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <Do_Allpass0+0xd8>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
		}
		return readback;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	ee07 3a90 	vmov	s15, r3
 8000764:	e7ff      	b.n	8000766 <Do_Allpass0+0xc2>
	break;
	}
}
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20008220 	.word	0x20008220
 8000778:	3f333333 	.word	0x3f333333
 800077c:	2000821c 	.word	0x2000821c
 8000780:	2000731c 	.word	0x2000731c
 8000784:	20000d88 	.word	0x20000d88

08000788 <Do_Delay>:
float Do_Delay(float inSample, int channelNum) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000792:	6038      	str	r0, [r7, #0]
	float newsample = (Do_Comb0(inSample, channelNum));
 8000794:	6838      	ldr	r0, [r7, #0]
 8000796:	ed97 0a01 	vldr	s0, [r7, #4]
 800079a:	f7ff ff17 	bl	80005cc <Do_Comb0>
 800079e:	ed87 0a03 	vstr	s0, [r7, #12]
	newsample = Do_Allpass0(newsample, channelNum);
 80007a2:	6838      	ldr	r0, [r7, #0]
 80007a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80007a8:	f7ff ff7c 	bl	80006a4 <Do_Allpass0>
 80007ac:	ed87 0a03 	vstr	s0, [r7, #12]
	return newsample;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	ee07 3a90 	vmov	s15, r3
}
 80007b6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	ed2d 8b02 	vpush	{d8}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

  //code credits start 'yetanotherelectronicschannel'
  delayChannel[0].cf_lim = (int)(time*CB);
 80007ca:	4ba8      	ldr	r3, [pc, #672]	@ (8000a6c <main+0x2ac>)
 80007cc:	edd3 7a00 	vldr	s15, [r3]
 80007d0:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8000a70 <main+0x2b0>
 80007d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007e0:	ee17 2a90 	vmov	r2, s15
 80007e4:	4ba3      	ldr	r3, [pc, #652]	@ (8000a74 <main+0x2b4>)
 80007e6:	601a      	str	r2, [r3, #0]
  delayChannel[0].ap_lim = (int)(time*AP);
 80007e8:	4ba0      	ldr	r3, [pc, #640]	@ (8000a6c <main+0x2ac>)
 80007ea:	edd3 7a00 	vldr	s15, [r3]
 80007ee:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8000a78 <main+0x2b8>
 80007f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007fe:	ee17 2a90 	vmov	r2, s15
 8000802:	4b9c      	ldr	r3, [pc, #624]	@ (8000a74 <main+0x2b4>)
 8000804:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000806:	f002 fdd7 	bl	80033b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080a:	f000 f95f 	bl	8000acc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800080e:	f000 f9c9 	bl	8000ba4 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000812:	f000 f9fe 	bl	8000c12 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f000 ff6f 	bl	80016f8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800081a:	f000 fbfd 	bl	8001018 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 800081e:	f000 fbbd 	bl	8000f9c <MX_DMA2D_Init>
  MX_HSPI1_Init();
 8000822:	f000 fc31 	bl	8001088 <MX_HSPI1_Init>
  MX_I2C2_Init();
 8000826:	f000 fcad 	bl	8001184 <MX_I2C2_Init>
  MX_ICACHE_Init();
 800082a:	f000 fceb 	bl	8001204 <MX_ICACHE_Init>
  MX_LTDC_Init();
 800082e:	f000 fcfd 	bl	800122c <MX_LTDC_Init>
  MX_RTC_Init();
 8000832:	f000 fd7b 	bl	800132c <MX_RTC_Init>
  MX_TIM3_Init();
 8000836:	f000 fe33 	bl	80014a0 <MX_TIM3_Init>
  MX_ADC1_Init();
 800083a:	f000 f9f9 	bl	8000c30 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800083e:	f000 fee1 	bl	8001604 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000842:	f000 fdc1 	bl	80013c8 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000846:	f000 fb2d 	bl	8000ea4 <MX_ADC4_Init>
  MX_I2C1_Init();
 800084a:	f000 fc5b 	bl	8001104 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800084e:	f000 ff25 	bl	800169c <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 8000852:	f000 fe87 	bl	8001564 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //Begins DMA transfer for first ADC
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1));
 8000856:	220d      	movs	r2, #13
 8000858:	4988      	ldr	r1, [pc, #544]	@ (8000a7c <main+0x2bc>)
 800085a:	4889      	ldr	r0, [pc, #548]	@ (8000a80 <main+0x2c0>)
 800085c:	f003 fcf8 	bl	8004250 <HAL_ADC_Start_DMA>
  //begins DMA transfer for fourth ADC
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4));
 8000860:	2202      	movs	r2, #2
 8000862:	4988      	ldr	r1, [pc, #544]	@ (8000a84 <main+0x2c4>)
 8000864:	4888      	ldr	r0, [pc, #544]	@ (8000a88 <main+0x2c8>)
 8000866:	f003 fcf3 	bl	8004250 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 800086a:	4888      	ldr	r0, [pc, #544]	@ (8000a8c <main+0x2cc>)
 800086c:	f00e ffa8 	bl	800f7c0 <HAL_TIM_Base_Start>
  //Config ADC/DAC

  HAL_Delay(2000);
 8000870:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000874:	f002 fe66 	bl	8003544 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000878:	2201      	movs	r2, #1
 800087a:	2104      	movs	r1, #4
 800087c:	4884      	ldr	r0, [pc, #528]	@ (8000a90 <main+0x2d0>)
 800087e:	f007 fc81 	bl	8008184 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000882:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000886:	f002 fe5d 	bl	8003544 <HAL_Delay>

  for(int i = 0; i < sizeof(pcm6260Config); i++)
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	e010      	b.n	80008b2 <main+0xf2>
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4a7f      	ldr	r2, [pc, #508]	@ (8000a94 <main+0x2d4>)
 8000896:	441a      	add	r2, r3
 8000898:	2364      	movs	r3, #100	@ 0x64
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2302      	movs	r3, #2
 800089e:	2190      	movs	r1, #144	@ 0x90
 80008a0:	487d      	ldr	r0, [pc, #500]	@ (8000a98 <main+0x2d8>)
 80008a2:	f007 fd79 	bl	8008398 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 80008a6:	2064      	movs	r0, #100	@ 0x64
 80008a8:	f002 fe4c 	bl	8003544 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	3301      	adds	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	2b1d      	cmp	r3, #29
 80008b6:	d9eb      	bls.n	8000890 <main+0xd0>
  }

  HAL_Delay(100);
 80008b8:	2064      	movs	r0, #100	@ 0x64
 80008ba:	f002 fe43 	bl	8003544 <HAL_Delay>
  //Begins DMA transfer for PCM6260
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData));
 80008be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008c2:	4976      	ldr	r1, [pc, #472]	@ (8000a9c <main+0x2dc>)
 80008c4:	4876      	ldr	r0, [pc, #472]	@ (8000aa0 <main+0x2e0>)
 80008c6:	f00e fbf1 	bl	800f0ac <HAL_SAI_Receive_DMA>
  //Begins DMA transfer for CS4334k-QZ
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacDataBuffer, DIM(dacDataBuffer));
 80008ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ce:	4975      	ldr	r1, [pc, #468]	@ (8000aa4 <main+0x2e4>)
 80008d0:	4875      	ldr	r0, [pc, #468]	@ (8000aa8 <main+0x2e8>)
 80008d2:	f00e fae9 	bl	800eea8 <HAL_SAI_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t heartBeatTick = HAL_GetTick() + 1000;
 80008d6:	f002 fe29 	bl	800352c <HAL_GetTick>
 80008da:	4603      	mov	r3, r0
 80008dc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80008e0:	61bb      	str	r3, [r7, #24]
  uint16_t index = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	82fb      	strh	r3, [r7, #22]
  int channelNumber = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(HAL_GetTick() >= heartBeatTick)
 80008ea:	f002 fe1f 	bl	800352c <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d809      	bhi.n	800090a <main+0x14a>
	  {
		 heartBeatTick = HAL_GetTick() + 1000;
 80008f6:	f002 fe19 	bl	800352c <HAL_GetTick>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000900:	61bb      	str	r3, [r7, #24]
		 HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000902:	2104      	movs	r1, #4
 8000904:	4869      	ldr	r0, [pc, #420]	@ (8000aac <main+0x2ec>)
 8000906:	f007 fc55 	bl	80081b4 <HAL_GPIO_TogglePin>
	  }

	  //Slider/Pot Processing
	  volumeLRPoll(index);
 800090a:	8afb      	ldrh	r3, [r7, #22]
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f83f 	bl	8001990 <volumeLRPoll>
	  index++;
 8000912:	8afb      	ldrh	r3, [r7, #22]
 8000914:	3301      	adds	r3, #1
 8000916:	82fb      	strh	r3, [r7, #22]


	  if(adcReady)
 8000918:	4b65      	ldr	r3, [pc, #404]	@ (8000ab0 <main+0x2f0>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d063      	beq.n	80009ea <main+0x22a>
	  {
		  //Loads sample data into Structs
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000922:	2300      	movs	r3, #0
 8000924:	82bb      	strh	r3, [r7, #20]
 8000926:	e05a      	b.n	80009de <main+0x21e>
		  {
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000928:	2300      	movs	r3, #0
 800092a:	827b      	strh	r3, [r7, #18]
 800092c:	e051      	b.n	80009d2 <main+0x212>
		        {
		        	//int32_t raw = adcData[channelCount*sample + channel] >> 1;
		        	//float convert = (float)raw / 16777216.0f;
		            channels[channel].channelData[sample] = signExtend24((uint32_t)(adcData[channelCount*sample + channel]));
 800092e:	4b61      	ldr	r3, [pc, #388]	@ (8000ab4 <main+0x2f4>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	8a7b      	ldrh	r3, [r7, #18]
 8000934:	00d9      	lsls	r1, r3, #3
 8000936:	8abb      	ldrh	r3, [r7, #20]
 8000938:	440b      	add	r3, r1
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	8abd      	ldrh	r5, [r7, #20]
 8000942:	8a7c      	ldrh	r4, [r7, #18]
 8000944:	4618      	mov	r0, r3
 8000946:	f001 f80d 	bl	8001964 <signExtend24>
 800094a:	4602      	mov	r2, r0
 800094c:	495a      	ldr	r1, [pc, #360]	@ (8000ab8 <main+0x2f8>)
 800094e:	2396      	movs	r3, #150	@ 0x96
 8000950:	fb05 f303 	mul.w	r3, r5, r3
 8000954:	4423      	add	r3, r4
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		            if(channel == 1){
 800095a:	8abb      	ldrh	r3, [r7, #20]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d135      	bne.n	80009cc <main+0x20c>
		            channels[channel].channelData[sample] = (int32_t)((1.0f-wet)*((float)channels[1].channelData[sample])
 8000960:	4b56      	ldr	r3, [pc, #344]	@ (8000abc <main+0x2fc>)
 8000962:	edd3 7a00 	vldr	s15, [r3]
 8000966:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800096a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800096e:	8a7b      	ldrh	r3, [r7, #18]
 8000970:	4a51      	ldr	r2, [pc, #324]	@ (8000ab8 <main+0x2f8>)
 8000972:	3396      	adds	r3, #150	@ 0x96
 8000974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000978:	ee07 3a90 	vmov	s15, r3
 800097c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000980:	ee27 8a27 	vmul.f32	s16, s14, s15
							    + wet*Do_Delay((float)channels[1].channelData[sample], 1));
 8000984:	8a7b      	ldrh	r3, [r7, #18]
 8000986:	4a4c      	ldr	r2, [pc, #304]	@ (8000ab8 <main+0x2f8>)
 8000988:	3396      	adds	r3, #150	@ 0x96
 800098a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000996:	2001      	movs	r0, #1
 8000998:	eeb0 0a67 	vmov.f32	s0, s15
 800099c:	f7ff fef4 	bl	8000788 <Do_Delay>
 80009a0:	eeb0 7a40 	vmov.f32	s14, s0
 80009a4:	4b45      	ldr	r3, [pc, #276]	@ (8000abc <main+0x2fc>)
 80009a6:	edd3 7a00 	vldr	s15, [r3]
 80009aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ae:	ee78 7a27 	vadd.f32	s15, s16, s15
		            channels[channel].channelData[sample] = (int32_t)((1.0f-wet)*((float)channels[1].channelData[sample])
 80009b2:	8aba      	ldrh	r2, [r7, #20]
 80009b4:	8a7b      	ldrh	r3, [r7, #18]
 80009b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ba:	ee17 4a90 	vmov	r4, s15
 80009be:	493e      	ldr	r1, [pc, #248]	@ (8000ab8 <main+0x2f8>)
 80009c0:	2096      	movs	r0, #150	@ 0x96
 80009c2:	fb00 f202 	mul.w	r2, r0, r2
 80009c6:	4413      	add	r3, r2
 80009c8:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 80009cc:	8a7b      	ldrh	r3, [r7, #18]
 80009ce:	3301      	adds	r3, #1
 80009d0:	827b      	strh	r3, [r7, #18]
 80009d2:	8a7b      	ldrh	r3, [r7, #18]
 80009d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80009d6:	d9aa      	bls.n	800092e <main+0x16e>
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 80009d8:	8abb      	ldrh	r3, [r7, #20]
 80009da:	3301      	adds	r3, #1
 80009dc:	82bb      	strh	r3, [r7, #20]
 80009de:	8abb      	ldrh	r3, [r7, #20]
 80009e0:	2b07      	cmp	r3, #7
 80009e2:	d9a1      	bls.n	8000928 <main+0x168>
		            }
		        }
		  }
		  //TODO: apply effects
		  //TODO: mix
		  adcReady = false;
 80009e4:	4b32      	ldr	r3, [pc, #200]	@ (8000ab0 <main+0x2f0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
	  }
	  if(dacReady)
 80009ea:	4b35      	ldr	r3, [pc, #212]	@ (8000ac0 <main+0x300>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	f43f af7a 	beq.w	80008ea <main+0x12a>
	  {
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	823b      	strh	r3, [r7, #16]
 80009fa:	e02f      	b.n	8000a5c <main+0x29c>
		  {
			  int32_t mixedSignal = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	817b      	strh	r3, [r7, #10]
 8000a04:	e00e      	b.n	8000a24 <main+0x264>
			  {
				  mixedSignal += channels[currChannel].channelData[sample];
 8000a06:	897a      	ldrh	r2, [r7, #10]
 8000a08:	8a3b      	ldrh	r3, [r7, #16]
 8000a0a:	492b      	ldr	r1, [pc, #172]	@ (8000ab8 <main+0x2f8>)
 8000a0c:	2096      	movs	r0, #150	@ 0x96
 8000a0e:	fb00 f202 	mul.w	r2, r0, r2
 8000a12:	4413      	add	r3, r2
 8000a14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000a1e:	897b      	ldrh	r3, [r7, #10]
 8000a20:	3301      	adds	r3, #1
 8000a22:	817b      	strh	r3, [r7, #10]
 8000a24:	897b      	ldrh	r3, [r7, #10]
 8000a26:	2b05      	cmp	r3, #5
 8000a28:	d9ed      	bls.n	8000a06 <main+0x246>
			  }
			  mixedSignal = mixedSignal / 6;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4a25      	ldr	r2, [pc, #148]	@ (8000ac4 <main+0x304>)
 8000a2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a32:	17db      	asrs	r3, r3, #31
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	60fb      	str	r3, [r7, #12]
			  dacData[(sample * 2)] =  mixedSignal;//channels[0].channelData[sample];
 8000a38:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <main+0x308>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	8a3b      	ldrh	r3, [r7, #16]
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	4413      	add	r3, r2
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	601a      	str	r2, [r3, #0]
			  dacData[(sample * 2) + 1] = mixedSignal;//channels[0].channelData[sample];
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <main+0x308>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	8a3b      	ldrh	r3, [r7, #16]
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	3304      	adds	r3, #4
 8000a50:	4413      	add	r3, r2
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	601a      	str	r2, [r3, #0]
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000a56:	8a3b      	ldrh	r3, [r7, #16]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	823b      	strh	r3, [r7, #16]
 8000a5c:	8a3b      	ldrh	r3, [r7, #16]
 8000a5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a60:	d9cc      	bls.n	80009fc <main+0x23c>
		  }
		  dacReady = false;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <main+0x300>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() >= heartBeatTick)
 8000a68:	e73f      	b.n	80008ea <main+0x12a>
 8000a6a:	bf00      	nop
 8000a6c:	20000004 	.word	0x20000004
 8000a70:	454b2000 	.word	0x454b2000
 8000a74:	20008220 	.word	0x20008220
 8000a78:	43f00000 	.word	0x43f00000
 8000a7c:	20033e10 	.word	0x20033e10
 8000a80:	20000050 	.word	0x20000050
 8000a84:	20033e2c 	.word	0x20033e2c
 8000a88:	200000dc 	.word	0x200000dc
 8000a8c:	200007c0 	.word	0x200007c0
 8000a90:	42021000 	.word	0x42021000
 8000a94:	20000008 	.word	0x20000008
 8000a98:	2000035c 	.word	0x2000035c
 8000a9c:	20033e30 	.word	0x20033e30
 8000aa0:	20000574 	.word	0x20000574
 8000aa4:	20035e30 	.word	0x20035e30
 8000aa8:	200004dc 	.word	0x200004dc
 8000aac:	42020c00 	.word	0x42020c00
 8000ab0:	200378f0 	.word	0x200378f0
 8000ab4:	200378f4 	.word	0x200378f4
 8000ab8:	20036630 	.word	0x20036630
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	200378f1 	.word	0x200378f1
 8000ac4:	2aaaaaab 	.word	0x2aaaaaab
 8000ac8:	200378f8 	.word	0x200378f8

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09e      	sub	sp, #120	@ 0x78
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	2260      	movs	r2, #96	@ 0x60
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f011 fcb9 	bl	8012452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000af0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000af4:	f009 fa94 	bl	800a020 <HAL_PWREx_ControlVoltageScaling>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000afe:	f001 fa89 	bl	8002014 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b02:	f009 fa7d 	bl	800a000 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b06:	4b26      	ldr	r3, [pc, #152]	@ (8000ba0 <SystemClock_Config+0xd4>)
 8000b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b0c:	4a24      	ldr	r2, [pc, #144]	@ (8000ba0 <SystemClock_Config+0xd4>)
 8000b0e:	f023 0318 	bic.w	r3, r3, #24
 8000b12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000b16:	2307      	movs	r3, #7
 8000b18:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b20:	2381      	movs	r3, #129	@ 0x81
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	2303      	movs	r3, #3
 8000b34:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000b42:	2308      	movs	r3, #8
 8000b44:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000b4e:	230c      	movs	r3, #12
 8000b50:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f009 fb8a 	bl	800a274 <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b66:	f001 fa55 	bl	8002014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	231f      	movs	r3, #31
 8000b6c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	2103      	movs	r1, #3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f00a fa50 	bl	800b02c <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b92:	f001 fa3f 	bl	8002014 <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3778      	adds	r7, #120	@ 0x78
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	46020c00 	.word	0x46020c00

08000ba4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0b8      	sub	sp, #224	@ 0xe0
 8000ba8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000baa:	463b      	mov	r3, r7
 8000bac:	22e0      	movs	r2, #224	@ 0xe0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f011 fc4e 	bl	8012452 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8000bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bba:	f04f 0301 	mov.w	r3, #1
 8000bbe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000bc8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8000be0:	2303      	movs	r3, #3
 8000be2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8000be4:	2304      	movs	r3, #4
 8000be6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000be8:	230c      	movs	r3, #12
 8000bea:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8000bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000bf2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f00a fde6 	bl	800b7cc <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000c06:	f001 fa05 	bl	8002014 <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	37e0      	adds	r7, #224	@ 0xe0
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000c16:	f009 faef 	bl	800a1f8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f009 fa8c 	bl	800a138 <HAL_PWREx_ConfigSupply>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000c26:	f001 f9f5 	bl	8002014 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2220      	movs	r2, #32
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f011 fc08 	bl	8012452 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c42:	4b89      	ldr	r3, [pc, #548]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c44:	4a89      	ldr	r2, [pc, #548]	@ (8000e6c <MX_ADC1_Init+0x23c>)
 8000c46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c48:	4b87      	ldr	r3, [pc, #540]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c4e:	4b86      	ldr	r3, [pc, #536]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c50:	2204      	movs	r2, #4
 8000c52:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000c54:	4b84      	ldr	r3, [pc, #528]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5a:	4b83      	ldr	r3, [pc, #524]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c60:	4b81      	ldr	r3, [pc, #516]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c66:	4b80      	ldr	r3, [pc, #512]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c68:	2204      	movs	r2, #4
 8000c6a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c72:	4b7d      	ldr	r3, [pc, #500]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000c7a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c7c:	220d      	movs	r2, #13
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c80:	4b79      	ldr	r3, [pc, #484]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000c88:	4b77      	ldr	r3, [pc, #476]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c8a:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c90:	4b75      	ldr	r3, [pc, #468]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c96:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c98:	4b73      	ldr	r3, [pc, #460]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ca0:	4b71      	ldr	r3, [pc, #452]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca6:	4b70      	ldr	r3, [pc, #448]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cac:	4b6e      	ldr	r3, [pc, #440]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc0:	4869      	ldr	r0, [pc, #420]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000cc2:	f002 ffdd 	bl	8003c80 <HAL_ADC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000ccc:	f001 f9a2 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd0:	4b67      	ldr	r3, [pc, #412]	@ (8000e70 <MX_ADC1_Init+0x240>)
 8000cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ce0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	485e      	ldr	r0, [pc, #376]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000cf0:	f003 fef4 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000cfa:	f001 f98b 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8000e74 <MX_ADC1_Init+0x244>)
 8000d00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d02:	230c      	movs	r3, #12
 8000d04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d06:	463b      	mov	r3, r7
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4857      	ldr	r0, [pc, #348]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000d0c:	f003 fee6 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000d16:	f001 f97d 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d1a:	4b57      	ldr	r3, [pc, #348]	@ (8000e78 <MX_ADC1_Init+0x248>)
 8000d1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d1e:	2312      	movs	r3, #18
 8000d20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	4619      	mov	r1, r3
 8000d26:	4850      	ldr	r0, [pc, #320]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000d28:	f003 fed8 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000d32:	f001 f96f 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d36:	4b51      	ldr	r3, [pc, #324]	@ (8000e7c <MX_ADC1_Init+0x24c>)
 8000d38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d3a:	2318      	movs	r3, #24
 8000d3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4849      	ldr	r0, [pc, #292]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000d44:	f003 feca 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000d4e:	f001 f961 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d52:	4b4b      	ldr	r3, [pc, #300]	@ (8000e80 <MX_ADC1_Init+0x250>)
 8000d54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4841      	ldr	r0, [pc, #260]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000d62:	f003 febb 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000d6c:	f001 f952 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d70:	4b44      	ldr	r3, [pc, #272]	@ (8000e84 <MX_ADC1_Init+0x254>)
 8000d72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d74:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000d78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	483a      	ldr	r0, [pc, #232]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000d80:	f003 feac 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000d8a:	f001 f943 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e88 <MX_ADC1_Init+0x258>)
 8000d90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d92:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000d96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4832      	ldr	r0, [pc, #200]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000d9e:	f003 fe9d 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000da8:	f001 f934 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dac:	4b37      	ldr	r3, [pc, #220]	@ (8000e8c <MX_ADC1_Init+0x25c>)
 8000dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000db0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000db4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	482b      	ldr	r0, [pc, #172]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000dbc:	f003 fe8e 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000dc6:	f001 f925 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000dca:	4b31      	ldr	r3, [pc, #196]	@ (8000e90 <MX_ADC1_Init+0x260>)
 8000dcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000dce:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000dd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4823      	ldr	r0, [pc, #140]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000dda:	f003 fe7f 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000de4:	f001 f916 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000de8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <MX_ADC1_Init+0x264>)
 8000dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000df0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	481c      	ldr	r0, [pc, #112]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000df8:	f003 fe70 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000e02:	f001 f907 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e06:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <MX_ADC1_Init+0x268>)
 8000e08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000e0a:	f240 2306 	movw	r3, #518	@ 0x206
 8000e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4814      	ldr	r0, [pc, #80]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000e16:	f003 fe61 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000e20:	f001 f8f8 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <MX_ADC1_Init+0x26c>)
 8000e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000e28:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000e2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000e34:	f003 fe52 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000e3e:	f001 f8e9 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <MX_ADC1_Init+0x270>)
 8000e44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000e46:	f240 2312 	movw	r3, #530	@ 0x212
 8000e4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_ADC1_Init+0x238>)
 8000e52:	f003 fe43 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000e5c:	f001 f8da 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000050 	.word	0x20000050
 8000e6c:	42028000 	.word	0x42028000
 8000e70:	04000002 	.word	0x04000002
 8000e74:	08000004 	.word	0x08000004
 8000e78:	0c000008 	.word	0x0c000008
 8000e7c:	10000010 	.word	0x10000010
 8000e80:	14000020 	.word	0x14000020
 8000e84:	1c000080 	.word	0x1c000080
 8000e88:	20000100 	.word	0x20000100
 8000e8c:	2a000400 	.word	0x2a000400
 8000e90:	2e000800 	.word	0x2e000800
 8000e94:	32001000 	.word	0x32001000
 8000e98:	3e008000 	.word	0x3e008000
 8000e9c:	42010000 	.word	0x42010000
 8000ea0:	ce080000 	.word	0xce080000

08000ea4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2220      	movs	r2, #32
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f011 face 	bl	8012452 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000eb6:	4b35      	ldr	r3, [pc, #212]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000eb8:	4a35      	ldr	r2, [pc, #212]	@ (8000f90 <MX_ADC4_Init+0xec>)
 8000eba:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ebc:	4b33      	ldr	r3, [pc, #204]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec2:	4b32      	ldr	r3, [pc, #200]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec8:	4b30      	ldr	r3, [pc, #192]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000ece:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000ed0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ed4:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000ed8:	2204      	movs	r2, #4
 8000eda:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000edc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000ef0:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC4_EXTERNALTRIG_T15_TRGO;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000ef8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8000efc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000efe:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000f00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f04:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000f06:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000f10:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f14:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000f30:	4816      	ldr	r0, [pc, #88]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000f32:	f002 fea5 	bl	8003c80 <HAL_ADC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC4_Init+0x9c>
  {
    Error_Handler();
 8000f3c:	f001 f86a 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_ADC4_Init+0xf0>)
 8000f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000f5a:	f003 fdbf 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC4_Init+0xc4>
  {
    Error_Handler();
 8000f64:	f001 f856 	bl	8002014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <MX_ADC4_Init+0xf4>)
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_ADC4_Init+0xe8>)
 8000f76:	f003 fdb1 	bl	8004adc <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC4_Init+0xe0>
  {
    Error_Handler();
 8000f80:	f001 f848 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000dc 	.word	0x200000dc
 8000f90:	46021000 	.word	0x46021000
 8000f94:	1c000080 	.word	0x1c000080
 8000f98:	20000100 	.word	0x20000100

08000f9c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <MX_DMA2D_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000fea:	f005 fd01 	bl	80069f0 <HAL_DMA2D_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f001 f80e 	bl	8002014 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_DMA2D_Init+0x74>)
 8000ffc:	f005 fd5a 	bl	8006ab4 <HAL_DMA2D_ConfigLayer>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8001006:	f001 f805 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000294 	.word	0x20000294
 8001014:	4002b000 	.word	0x4002b000

08001018 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800101e:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <MX_GPDMA1_Init+0x6c>)
 8001020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001024:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <MX_GPDMA1_Init+0x6c>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <MX_GPDMA1_Init+0x6c>)
 8001030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	201d      	movs	r0, #29
 8001042:	f004 fd77 	bl	8005b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001046:	201d      	movs	r0, #29
 8001048:	f004 fd8e 	bl	8005b68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	201e      	movs	r0, #30
 8001052:	f004 fd6f 	bl	8005b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001056:	201e      	movs	r0, #30
 8001058:	f004 fd86 	bl	8005b68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	201f      	movs	r0, #31
 8001062:	f004 fd67 	bl	8005b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001066:	201f      	movs	r0, #31
 8001068:	f004 fd7e 	bl	8005b68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	2020      	movs	r0, #32
 8001072:	f004 fd5f 	bl	8005b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001076:	2020      	movs	r0, #32
 8001078:	f004 fd76 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	46020c00 	.word	0x46020c00

08001088 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_HSPI1_Init+0x74>)
 800108e:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <MX_HSPI1_Init+0x78>)
 8001090:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_HSPI1_Init+0x74>)
 8001094:	2204      	movs	r2, #4
 8001096:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_HSPI1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80010a4:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010a8:	221a      	movs	r2, #26
 80010aa:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010ae:	2202      	movs	r2, #2
 80010b0:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80010b2:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 80010dc:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <MX_HSPI1_Init+0x74>)
 80010ea:	f010 fd4b 	bl	8011b84 <HAL_XSPI_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 80010f4:	f000 ff8e 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200002fc 	.word	0x200002fc
 8001100:	420d3400 	.word	0x420d3400

08001104 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <MX_I2C1_Init+0x74>)
 800110a:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <MX_I2C1_Init+0x78>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 800110e:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <MX_I2C1_Init+0x74>)
 8001110:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <MX_I2C1_Init+0x7c>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <MX_I2C1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_I2C1_Init+0x74>)
 800111c:	2201      	movs	r2, #1
 800111e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <MX_I2C1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_I2C1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_I2C1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_I2C1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800113e:	480e      	ldr	r0, [pc, #56]	@ (8001178 <MX_I2C1_Init+0x74>)
 8001140:	f007 f88e 	bl	8008260 <HAL_I2C_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800114a:	f000 ff63 	bl	8002014 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4809      	ldr	r0, [pc, #36]	@ (8001178 <MX_I2C1_Init+0x74>)
 8001152:	f008 fa19 	bl	8009588 <HAL_I2CEx_ConfigAnalogFilter>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800115c:	f000 ff5a 	bl	8002014 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_I2C1_Init+0x74>)
 8001164:	f008 fa5b 	bl	800961e <HAL_I2CEx_ConfigDigitalFilter>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 ff51 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000035c 	.word	0x2000035c
 800117c:	40005400 	.word	0x40005400
 8001180:	20a0c4df 	.word	0x20a0c4df

08001184 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001188:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <MX_I2C2_Init+0x74>)
 800118a:	4a1c      	ldr	r2, [pc, #112]	@ (80011fc <MX_I2C2_Init+0x78>)
 800118c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 800118e:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <MX_I2C2_Init+0x74>)
 8001190:	4a1b      	ldr	r2, [pc, #108]	@ (8001200 <MX_I2C2_Init+0x7c>)
 8001192:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <MX_I2C2_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119a:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <MX_I2C2_Init+0x74>)
 800119c:	2201      	movs	r2, #1
 800119e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <MX_I2C2_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_I2C2_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <MX_I2C2_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <MX_I2C2_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_I2C2_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011be:	480e      	ldr	r0, [pc, #56]	@ (80011f8 <MX_I2C2_Init+0x74>)
 80011c0:	f007 f84e 	bl	8008260 <HAL_I2C_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011ca:	f000 ff23 	bl	8002014 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4809      	ldr	r0, [pc, #36]	@ (80011f8 <MX_I2C2_Init+0x74>)
 80011d2:	f008 f9d9 	bl	8009588 <HAL_I2CEx_ConfigAnalogFilter>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011dc:	f000 ff1a 	bl	8002014 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011e0:	2100      	movs	r1, #0
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_I2C2_Init+0x74>)
 80011e4:	f008 fa1b 	bl	800961e <HAL_I2CEx_ConfigDigitalFilter>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011ee:	f000 ff11 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200003b0 	.word	0x200003b0
 80011fc:	40005800 	.word	0x40005800
 8001200:	20a0c4df 	.word	0x20a0c4df

08001204 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001208:	2000      	movs	r0, #0
 800120a:	f008 fa55 	bl	80096b8 <HAL_ICACHE_ConfigAssociativityMode>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001214:	f000 fefe 	bl	8002014 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001218:	f008 fa6e 	bl	80096f8 <HAL_ICACHE_Enable>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001222:	f000 fef7 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	@ 0x38
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2234      	movs	r2, #52	@ 0x34
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f011 f90a 	bl	8012452 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800123e:	4b39      	ldr	r3, [pc, #228]	@ (8001324 <MX_LTDC_Init+0xf8>)
 8001240:	4a39      	ldr	r2, [pc, #228]	@ (8001328 <MX_LTDC_Init+0xfc>)
 8001242:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001244:	4b37      	ldr	r3, [pc, #220]	@ (8001324 <MX_LTDC_Init+0xf8>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800124a:	4b36      	ldr	r3, [pc, #216]	@ (8001324 <MX_LTDC_Init+0xf8>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001250:	4b34      	ldr	r3, [pc, #208]	@ (8001324 <MX_LTDC_Init+0xf8>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001256:	4b33      	ldr	r3, [pc, #204]	@ (8001324 <MX_LTDC_Init+0xf8>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 800125c:	4b31      	ldr	r3, [pc, #196]	@ (8001324 <MX_LTDC_Init+0xf8>)
 800125e:	2203      	movs	r2, #3
 8001260:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001262:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <MX_LTDC_Init+0xf8>)
 8001264:	2203      	movs	r2, #3
 8001266:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001268:	4b2e      	ldr	r3, [pc, #184]	@ (8001324 <MX_LTDC_Init+0xf8>)
 800126a:	220b      	movs	r2, #11
 800126c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800126e:	4b2d      	ldr	r3, [pc, #180]	@ (8001324 <MX_LTDC_Init+0xf8>)
 8001270:	220b      	movs	r2, #11
 8001272:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8001274:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <MX_LTDC_Init+0xf8>)
 8001276:	f240 322b 	movw	r2, #811	@ 0x32b
 800127a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 800127c:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <MX_LTDC_Init+0xf8>)
 800127e:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8001284:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <MX_LTDC_Init+0xf8>)
 8001286:	f240 3233 	movw	r2, #819	@ 0x333
 800128a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <MX_LTDC_Init+0xf8>)
 800128e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001292:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <MX_LTDC_Init+0xf8>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800129c:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <MX_LTDC_Init+0xf8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <MX_LTDC_Init+0xf8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012ac:	481d      	ldr	r0, [pc, #116]	@ (8001324 <MX_LTDC_Init+0xf8>)
 80012ae:	f008 fa33 	bl	8009718 <HAL_LTDC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80012b8:	f000 feac 	bl	8002014 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80012c0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80012c4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80012ca:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80012ce:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80012d0:	2301      	movs	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80012d4:	23ff      	movs	r3, #255	@ 0xff
 80012d6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80012dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012e0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80012e2:	2307      	movs	r3, #7
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	@ (8001324 <MX_LTDC_Init+0xf8>)
 800130c:	f008 fb96 	bl	8009a3c <HAL_LTDC_ConfigLayer>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001316:	f000 fe7d 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	@ 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000404 	.word	0x20000404
 8001328:	40016800 	.word	0x40016800

0800132c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001344:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MX_RTC_Init+0x94>)
 8001346:	4a1f      	ldr	r2, [pc, #124]	@ (80013c4 <MX_RTC_Init+0x98>)
 8001348:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800134a:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <MX_RTC_Init+0x94>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MX_RTC_Init+0x94>)
 8001352:	227f      	movs	r2, #127	@ 0x7f
 8001354:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <MX_RTC_Init+0x94>)
 8001358:	22ff      	movs	r2, #255	@ 0xff
 800135a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800135c:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <MX_RTC_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001362:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <MX_RTC_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001368:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <MX_RTC_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_RTC_Init+0x94>)
 8001370:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001374:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <MX_RTC_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_RTC_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001382:	480f      	ldr	r0, [pc, #60]	@ (80013c0 <MX_RTC_Init+0x94>)
 8001384:	f00d fa1e 	bl	800e7c4 <HAL_RTC_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800138e:	f000 fe41 	bl	8002014 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <MX_RTC_Init+0x94>)
 80013a8:	f00d fb3a 	bl	800ea20 <HAL_RTCEx_PrivilegeModeSet>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80013b2:	f000 fe2f 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200004ac 	.word	0x200004ac
 80013c4:	46007800 	.word	0x46007800

080013c8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <MX_SAI2_Init+0xc8>)
 80013ce:	4a31      	ldr	r2, [pc, #196]	@ (8001494 <MX_SAI2_Init+0xcc>)
 80013d0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80013d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <MX_SAI2_Init+0xc8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <MX_SAI2_Init+0xc8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80013de:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <MX_SAI2_Init+0xc8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <MX_SAI2_Init+0xc8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80013ea:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <MX_SAI2_Init+0xc8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80013f0:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <MX_SAI2_Init+0xc8>)
 80013f2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80013f6:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013f8:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <MX_SAI2_Init+0xc8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80013fe:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <MX_SAI2_Init+0xc8>)
 8001400:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001404:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001406:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <MX_SAI2_Init+0xc8>)
 8001408:	2200      	movs	r2, #0
 800140a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <MX_SAI2_Init+0xc8>)
 800140e:	2200      	movs	r2, #0
 8001410:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <MX_SAI2_Init+0xc8>)
 8001414:	2210      	movs	r2, #16
 8001416:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001418:	2302      	movs	r3, #2
 800141a:	2202      	movs	r2, #2
 800141c:	2101      	movs	r1, #1
 800141e:	481c      	ldr	r0, [pc, #112]	@ (8001490 <MX_SAI2_Init+0xc8>)
 8001420:	f00d fb2c 	bl	800ea7c <HAL_SAI_InitProtocol>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_SAI2_Init+0x66>
  {
    Error_Handler();
 800142a:	f000 fdf3 	bl	8002014 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_SAI2_Init+0xd0>)
 8001430:	4a1a      	ldr	r2, [pc, #104]	@ (800149c <MX_SAI2_Init+0xd4>)
 8001432:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8001434:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <MX_SAI2_Init+0xd0>)
 8001436:	2201      	movs	r2, #1
 8001438:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <MX_SAI2_Init+0xd0>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001440:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <MX_SAI2_Init+0xd0>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001446:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_SAI2_Init+0xd0>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <MX_SAI2_Init+0xd0>)
 800144e:	2202      	movs	r2, #2
 8001450:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_SAI2_Init+0xd0>)
 8001454:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001458:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800145a:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_SAI2_Init+0xd0>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001460:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <MX_SAI2_Init+0xd0>)
 8001462:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001466:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <MX_SAI2_Init+0xd0>)
 800146a:	2200      	movs	r2, #0
 800146c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <MX_SAI2_Init+0xd0>)
 8001470:	2200      	movs	r2, #0
 8001472:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001474:	2308      	movs	r3, #8
 8001476:	2202      	movs	r2, #2
 8001478:	2100      	movs	r1, #0
 800147a:	4807      	ldr	r0, [pc, #28]	@ (8001498 <MX_SAI2_Init+0xd0>)
 800147c:	f00d fafe 	bl	800ea7c <HAL_SAI_InitProtocol>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_SAI2_Init+0xc2>
  {
    Error_Handler();
 8001486:	f000 fdc5 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200004dc 	.word	0x200004dc
 8001494:	40015804 	.word	0x40015804
 8001498:	20000574 	.word	0x20000574
 800149c:	40015824 	.word	0x40015824

080014a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c4:	4b25      	ldr	r3, [pc, #148]	@ (800155c <MX_TIM3_Init+0xbc>)
 80014c6:	4a26      	ldr	r2, [pc, #152]	@ (8001560 <MX_TIM3_Init+0xc0>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80014ca:	4b24      	ldr	r3, [pc, #144]	@ (800155c <MX_TIM3_Init+0xbc>)
 80014cc:	22a0      	movs	r2, #160	@ 0xa0
 80014ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <MX_TIM3_Init+0xbc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80014d6:	4b21      	ldr	r3, [pc, #132]	@ (800155c <MX_TIM3_Init+0xbc>)
 80014d8:	2264      	movs	r2, #100	@ 0x64
 80014da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <MX_TIM3_Init+0xbc>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <MX_TIM3_Init+0xbc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014e8:	481c      	ldr	r0, [pc, #112]	@ (800155c <MX_TIM3_Init+0xbc>)
 80014ea:	f00e fa01 	bl	800f8f0 <HAL_TIM_PWM_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80014f4:	f000 fd8e 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4815      	ldr	r0, [pc, #84]	@ (800155c <MX_TIM3_Init+0xbc>)
 8001508:	f00f f9d8 	bl	80108bc <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001512:	f000 fd7f 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001516:	2360      	movs	r3, #96	@ 0x60
 8001518:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 800151a:	234b      	movs	r3, #75	@ 0x4b
 800151c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001526:	463b      	mov	r3, r7
 8001528:	220c      	movs	r2, #12
 800152a:	4619      	mov	r1, r3
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <MX_TIM3_Init+0xbc>)
 800152e:	f00e fa37 	bl	800f9a0 <HAL_TIM_PWM_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001538:	f000 fd6c 	bl	8002014 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <MX_TIM3_Init+0xbc>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	69da      	ldr	r2, [r3, #28]
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_TIM3_Init+0xbc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800154a:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800154c:	4803      	ldr	r0, [pc, #12]	@ (800155c <MX_TIM3_Init+0xbc>)
 800154e:	f001 fb23 	bl	8002b98 <HAL_TIM_MspPostInit>

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	@ 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000774 	.word	0x20000774
 8001560:	40000400 	.word	0x40000400

08001564 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001582:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <MX_TIM15_Init+0x98>)
 8001584:	4a1e      	ldr	r2, [pc, #120]	@ (8001600 <MX_TIM15_Init+0x9c>)
 8001586:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001588:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <MX_TIM15_Init+0x98>)
 800158a:	221a      	movs	r2, #26
 800158c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_TIM15_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <MX_TIM15_Init+0x98>)
 8001596:	2231      	movs	r2, #49	@ 0x31
 8001598:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_TIM15_Init+0x98>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015a0:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <MX_TIM15_Init+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_TIM15_Init+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80015ac:	4813      	ldr	r0, [pc, #76]	@ (80015fc <MX_TIM15_Init+0x98>)
 80015ae:	f00e f8b0 	bl	800f712 <HAL_TIM_Base_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80015b8:	f000 fd2c 	bl	8002014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <MX_TIM15_Init+0x98>)
 80015ca:	f00e fafd 	bl	800fbc8 <HAL_TIM_ConfigClockSource>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80015d4:	f000 fd1e 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015d8:	2320      	movs	r3, #32
 80015da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_TIM15_Init+0x98>)
 80015e6:	f00f f969 	bl	80108bc <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80015f0:	f000 fd10 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200007c0 	.word	0x200007c0
 8001600:	40014000 	.word	0x40014000

08001604 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001608:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 800160a:	4a23      	ldr	r2, [pc, #140]	@ (8001698 <MX_USART1_UART_Init+0x94>)
 800160c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001622:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800164c:	4811      	ldr	r0, [pc, #68]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 800164e:	f00f f9f7 	bl	8010a40 <HAL_UART_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001658:	f000 fcdc 	bl	8002014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165c:	2100      	movs	r1, #0
 800165e:	480d      	ldr	r0, [pc, #52]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 8001660:	f010 f9c5 	bl	80119ee <HAL_UARTEx_SetTxFifoThreshold>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800166a:	f000 fcd3 	bl	8002014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166e:	2100      	movs	r1, #0
 8001670:	4808      	ldr	r0, [pc, #32]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 8001672:	f010 f9fa 	bl	8011a6a <HAL_UARTEx_SetRxFifoThreshold>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800167c:	f000 fcca 	bl	8002014 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	@ (8001694 <MX_USART1_UART_Init+0x90>)
 8001682:	f010 f97b 	bl	801197c <HAL_UARTEx_DisableFifoMode>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800168c:	f000 fcc2 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000080c 	.word	0x2000080c
 8001698:	40013800 	.word	0x40013800

0800169c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016a2:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80016a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80016a6:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016a8:	2209      	movs	r2, #9
 80016aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80016ac:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016b4:	2203      	movs	r2, #3
 80016b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80016d0:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016d8:	2200      	movs	r2, #0
 80016da:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016de:	f008 fb5e 	bl	8009d9e <HAL_PCD_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80016e8:	f000 fc94 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200008a0 	.word	0x200008a0
 80016f4:	42040000 	.word	0x42040000

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08e      	sub	sp, #56	@ 0x38
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	4b8c      	ldr	r3, [pc, #560]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001714:	4a8a      	ldr	r2, [pc, #552]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800171e:	4b88      	ldr	r3, [pc, #544]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	623b      	str	r3, [r7, #32]
 800172a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	4b84      	ldr	r3, [pc, #528]	@ (8001940 <MX_GPIO_Init+0x248>)
 800172e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001732:	4a83      	ldr	r2, [pc, #524]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800173c:	4b80      	ldr	r3, [pc, #512]	@ (8001940 <MX_GPIO_Init+0x248>)
 800173e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800174a:	4b7d      	ldr	r3, [pc, #500]	@ (8001940 <MX_GPIO_Init+0x248>)
 800174c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001750:	4a7b      	ldr	r2, [pc, #492]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800175a:	4b79      	ldr	r3, [pc, #484]	@ (8001940 <MX_GPIO_Init+0x248>)
 800175c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001768:	4b75      	ldr	r3, [pc, #468]	@ (8001940 <MX_GPIO_Init+0x248>)
 800176a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800176e:	4a74      	ldr	r2, [pc, #464]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001774:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001778:	4b71      	ldr	r3, [pc, #452]	@ (8001940 <MX_GPIO_Init+0x248>)
 800177a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800177e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b6e      	ldr	r3, [pc, #440]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178c:	4a6c      	ldr	r2, [pc, #432]	@ (8001940 <MX_GPIO_Init+0x248>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001796:	4b6a      	ldr	r3, [pc, #424]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	4b66      	ldr	r3, [pc, #408]	@ (8001940 <MX_GPIO_Init+0x248>)
 80017a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017aa:	4a65      	ldr	r2, [pc, #404]	@ (8001940 <MX_GPIO_Init+0x248>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b4:	4b62      	ldr	r3, [pc, #392]	@ (8001940 <MX_GPIO_Init+0x248>)
 80017b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001940 <MX_GPIO_Init+0x248>)
 80017c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001940 <MX_GPIO_Init+0x248>)
 80017ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001940 <MX_GPIO_Init+0x248>)
 80017d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e0:	4b57      	ldr	r3, [pc, #348]	@ (8001940 <MX_GPIO_Init+0x248>)
 80017e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e6:	4a56      	ldr	r2, [pc, #344]	@ (8001940 <MX_GPIO_Init+0x248>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017f0:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <MX_GPIO_Init+0x248>)
 80017f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017fe:	4b50      	ldr	r3, [pc, #320]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001804:	4a4e      	ldr	r2, [pc, #312]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800180e:	4b4c      	ldr	r3, [pc, #304]	@ (8001940 <MX_GPIO_Init+0x248>)
 8001810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2104      	movs	r1, #4
 8001820:	4848      	ldr	r0, [pc, #288]	@ (8001944 <MX_GPIO_Init+0x24c>)
 8001822:	f006 fcaf 	bl	8008184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001826:	2201      	movs	r2, #1
 8001828:	2110      	movs	r1, #16
 800182a:	4846      	ldr	r0, [pc, #280]	@ (8001944 <MX_GPIO_Init+0x24c>)
 800182c:	f006 fcaa 	bl	8008184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	2114      	movs	r1, #20
 8001834:	4844      	ldr	r0, [pc, #272]	@ (8001948 <MX_GPIO_Init+0x250>)
 8001836:	f006 fca5 	bl	8008184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 800183a:	2314      	movs	r3, #20
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184e:	4619      	mov	r1, r3
 8001850:	483c      	ldr	r0, [pc, #240]	@ (8001944 <MX_GPIO_Init+0x24c>)
 8001852:	f006 fabf 	bl	8007dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001856:	2320      	movs	r3, #32
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185a:	4b3c      	ldr	r3, [pc, #240]	@ (800194c <MX_GPIO_Init+0x254>)
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	4836      	ldr	r0, [pc, #216]	@ (8001944 <MX_GPIO_Init+0x24c>)
 800186a:	f006 fab3 	bl	8007dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800186e:	2302      	movs	r3, #2
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001872:	4b37      	ldr	r3, [pc, #220]	@ (8001950 <MX_GPIO_Init+0x258>)
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187e:	4619      	mov	r1, r3
 8001880:	4834      	ldr	r0, [pc, #208]	@ (8001954 <MX_GPIO_Init+0x25c>)
 8001882:	f006 faa7 	bl	8007dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001886:	2310      	movs	r3, #16
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188a:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <MX_GPIO_Init+0x260>)
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	2301      	movs	r3, #1
 8001890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	482e      	ldr	r0, [pc, #184]	@ (8001954 <MX_GPIO_Init+0x25c>)
 800189a:	f006 fa9b 	bl	8007dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 800189e:	2314      	movs	r3, #20
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4824      	ldr	r0, [pc, #144]	@ (8001948 <MX_GPIO_Init+0x250>)
 80018b6:	f006 fa8d 	bl	8007dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 80018ba:	2380      	movs	r3, #128	@ 0x80
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	481e      	ldr	r0, [pc, #120]	@ (8001948 <MX_GPIO_Init+0x250>)
 80018ce:	f006 fa81 	bl	8007dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80018d2:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	481d      	ldr	r0, [pc, #116]	@ (800195c <MX_GPIO_Init+0x264>)
 80018e8:	f006 fa74 	bl	8007dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80018ec:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018fe:	4619      	mov	r1, r3
 8001900:	4817      	ldr	r0, [pc, #92]	@ (8001960 <MX_GPIO_Init+0x268>)
 8001902:	f006 fa67 	bl	8007dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	200c      	movs	r0, #12
 800190c:	f004 f912 	bl	8005b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001910:	200c      	movs	r0, #12
 8001912:	f004 f929 	bl	8005b68 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	200f      	movs	r0, #15
 800191c:	f004 f90a 	bl	8005b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001920:	200f      	movs	r0, #15
 8001922:	f004 f921 	bl	8005b68 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2010      	movs	r0, #16
 800192c:	f004 f902 	bl	8005b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001930:	2010      	movs	r0, #16
 8001932:	f004 f919 	bl	8005b68 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001936:	bf00      	nop
 8001938:	3738      	adds	r7, #56	@ 0x38
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	46020c00 	.word	0x46020c00
 8001944:	42021000 	.word	0x42021000
 8001948:	42020c00 	.word	0x42020c00
 800194c:	10110000 	.word	0x10110000
 8001950:	10310000 	.word	0x10310000
 8001954:	42020000 	.word	0x42020000
 8001958:	10210000 	.word	0x10210000
 800195c:	42021800 	.word	0x42021800
 8001960:	42020400 	.word	0x42020400

08001964 <signExtend24>:

/* USER CODE BEGIN 4 */

static inline int32_t signExtend24(uint32_t value)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    return (int32_t)((value & (1 << 23)) ? value | 0xFF000000 : value & 0x007FFFFF);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <signExtend24+0x1a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800197c:	e002      	b.n	8001984 <signExtend24+0x20>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <volumeLRPoll>:

static void volumeLRPoll(uint16_t index)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	  //Channel 1 Volume
	  channels[0].volumeBuffer[index % (sizeof(channels[0].volumeBuffer) / 2)] = adcGroup1[c1Vol];
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4ac0      	ldr	r2, [pc, #768]	@ (8001ca4 <volumeLRPoll+0x314>)
 80019a2:	8811      	ldrh	r1, [r2, #0]
 80019a4:	4ac0      	ldr	r2, [pc, #768]	@ (8001ca8 <volumeLRPoll+0x318>)
 80019a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	460a      	mov	r2, r1
 80019b0:	805a      	strh	r2, [r3, #2]
	  channels[0].volumeRunner += channels[0].volumeBuffer[index % (sizeof(channels[0].volumeBuffer) / 2)];
 80019b2:	4bbd      	ldr	r3, [pc, #756]	@ (8001ca8 <volumeLRPoll+0x318>)
 80019b4:	f8b3 2212 	ldrh.w	r2, [r3, #530]	@ 0x212
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	49ba      	ldr	r1, [pc, #744]	@ (8001ca8 <volumeLRPoll+0x318>)
 80019c0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	440b      	add	r3, r1
 80019c8:	885b      	ldrh	r3, [r3, #2]
 80019ca:	4413      	add	r3, r2
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4bb6      	ldr	r3, [pc, #728]	@ (8001ca8 <volumeLRPoll+0x318>)
 80019d0:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
	  channels[0].volumeRunner -= channels[0].volumeBuffer[(index + 1) % (sizeof(channels[0].volumeBuffer) / 2)];
 80019d4:	4bb4      	ldr	r3, [pc, #720]	@ (8001ca8 <volumeLRPoll+0x318>)
 80019d6:	f8b3 2212 	ldrh.w	r2, [r3, #530]	@ 0x212
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	3301      	adds	r3, #1
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	49b1      	ldr	r1, [pc, #708]	@ (8001ca8 <volumeLRPoll+0x318>)
 80019e4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	440b      	add	r3, r1
 80019ec:	885b      	ldrh	r3, [r3, #2]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	4bad      	ldr	r3, [pc, #692]	@ (8001ca8 <volumeLRPoll+0x318>)
 80019f4:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212

	  //Channel 2 Volume
	  channels[1].volumeBuffer[index % (sizeof(channels[1].volumeBuffer) / 2)] = adcGroup1[c2Vol];
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	4aa9      	ldr	r2, [pc, #676]	@ (8001ca4 <volumeLRPoll+0x314>)
 8001a00:	8851      	ldrh	r1, [r2, #2]
 8001a02:	4aa9      	ldr	r2, [pc, #676]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a04:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	805a      	strh	r2, [r3, #2]
	  channels[1].volumeRunner += channels[1].volumeBuffer[index % (sizeof(channels[1].volumeBuffer) / 2)];
 8001a10:	4ba5      	ldr	r3, [pc, #660]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a12:	f8b3 246a 	ldrh.w	r2, [r3, #1130]	@ 0x46a
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	49a2      	ldr	r1, [pc, #648]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a1e:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	440b      	add	r3, r1
 8001a26:	885b      	ldrh	r3, [r3, #2]
 8001a28:	4413      	add	r3, r2
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b9e      	ldr	r3, [pc, #632]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a2e:	f8a3 246a 	strh.w	r2, [r3, #1130]	@ 0x46a
	  channels[1].volumeRunner -= channels[1].volumeBuffer[(index + 1) % (sizeof(channels[1].volumeBuffer) / 2)];
 8001a32:	4b9d      	ldr	r3, [pc, #628]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a34:	f8b3 246a 	ldrh.w	r2, [r3, #1130]	@ 0x46a
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4999      	ldr	r1, [pc, #612]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a42:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	440b      	add	r3, r1
 8001a4a:	885b      	ldrh	r3, [r3, #2]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	4b95      	ldr	r3, [pc, #596]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a52:	f8a3 246a 	strh.w	r2, [r3, #1130]	@ 0x46a

	  //Channel 3 Volume
	  channels[2].volumeBuffer[index % (sizeof(channels[2].volumeBuffer) / 2)] = adcGroup1[c3Vol];
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	4a91      	ldr	r2, [pc, #580]	@ (8001ca4 <volumeLRPoll+0x314>)
 8001a5e:	8891      	ldrh	r1, [r2, #4]
 8001a60:	4a91      	ldr	r2, [pc, #580]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a62:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	805a      	strh	r2, [r3, #2]
	  channels[2].volumeRunner += channels[2].volumeBuffer[index % (sizeof(channels[2].volumeBuffer) / 2)];
 8001a6e:	4b8e      	ldr	r3, [pc, #568]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a70:	f8b3 26c2 	ldrh.w	r2, [r3, #1730]	@ 0x6c2
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	498b      	ldr	r1, [pc, #556]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a7c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	440b      	add	r3, r1
 8001a84:	885b      	ldrh	r3, [r3, #2]
 8001a86:	4413      	add	r3, r2
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b87      	ldr	r3, [pc, #540]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a8c:	f8a3 26c2 	strh.w	r2, [r3, #1730]	@ 0x6c2
	  channels[2].volumeRunner -= channels[2].volumeBuffer[(index + 1) % (sizeof(channels[2].volumeBuffer) / 2)];
 8001a90:	4b85      	ldr	r3, [pc, #532]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001a92:	f8b3 26c2 	ldrh.w	r2, [r3, #1730]	@ 0x6c2
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	4982      	ldr	r1, [pc, #520]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001aa0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	440b      	add	r3, r1
 8001aa8:	885b      	ldrh	r3, [r3, #2]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b7e      	ldr	r3, [pc, #504]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001ab0:	f8a3 26c2 	strh.w	r2, [r3, #1730]	@ 0x6c2

	  //Channel 4 Volume
	  channels[3].volumeBuffer[index % (sizeof(channels[3].volumeBuffer) / 2)] = adcGroup1[c4Vol];
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	4a7a      	ldr	r2, [pc, #488]	@ (8001ca4 <volumeLRPoll+0x314>)
 8001abc:	88d1      	ldrh	r1, [r2, #6]
 8001abe:	4a7a      	ldr	r2, [pc, #488]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001ac0:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	460a      	mov	r2, r1
 8001aca:	805a      	strh	r2, [r3, #2]
	  channels[3].volumeRunner += channels[3].volumeBuffer[index % (sizeof(channels[3].volumeBuffer) / 2)];
 8001acc:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001ace:	f8b3 291a 	ldrh.w	r2, [r3, #2330]	@ 0x91a
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4973      	ldr	r1, [pc, #460]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001ada:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	440b      	add	r3, r1
 8001ae2:	885b      	ldrh	r3, [r3, #2]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001aea:	f8a3 291a 	strh.w	r2, [r3, #2330]	@ 0x91a
	  channels[3].volumeRunner -= channels[3].volumeBuffer[(index + 1) % (sizeof(channels[3].volumeBuffer) / 2)];
 8001aee:	4b6e      	ldr	r3, [pc, #440]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001af0:	f8b3 291a 	ldrh.w	r2, [r3, #2330]	@ 0x91a
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	3301      	adds	r3, #1
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	496a      	ldr	r1, [pc, #424]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001afe:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	885b      	ldrh	r3, [r3, #2]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b0e:	f8a3 291a 	strh.w	r2, [r3, #2330]	@ 0x91a

	  //Channel 5 Volume
	  channels[4].volumeBuffer[index % (sizeof(channels[4].volumeBuffer) / 2)] = adcGroup1[c5Vol];
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4a62      	ldr	r2, [pc, #392]	@ (8001ca4 <volumeLRPoll+0x314>)
 8001b1a:	8911      	ldrh	r1, [r2, #8]
 8001b1c:	4a62      	ldr	r2, [pc, #392]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b1e:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	460a      	mov	r2, r1
 8001b28:	805a      	strh	r2, [r3, #2]
	  channels[4].volumeRunner += channels[4].volumeBuffer[index % (sizeof(channels[4].volumeBuffer) / 2)];
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b2c:	f8b3 2b72 	ldrh.w	r2, [r3, #2930]	@ 0xb72
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	495c      	ldr	r1, [pc, #368]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b38:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	440b      	add	r3, r1
 8001b40:	885b      	ldrh	r3, [r3, #2]
 8001b42:	4413      	add	r3, r2
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	4b58      	ldr	r3, [pc, #352]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b48:	f8a3 2b72 	strh.w	r2, [r3, #2930]	@ 0xb72
	  channels[4].volumeRunner -= channels[4].volumeBuffer[(index + 1) % (sizeof(channels[4].volumeBuffer) / 2)];
 8001b4c:	4b56      	ldr	r3, [pc, #344]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b4e:	f8b3 2b72 	ldrh.w	r2, [r3, #2930]	@ 0xb72
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	3301      	adds	r3, #1
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	4953      	ldr	r1, [pc, #332]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b5c:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	440b      	add	r3, r1
 8001b64:	885b      	ldrh	r3, [r3, #2]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b6c:	f8a3 2b72 	strh.w	r2, [r3, #2930]	@ 0xb72

	  //Channel 6 Volume
	  channels[5].volumeBuffer[index % (sizeof(channels[5].volumeBuffer) / 2)] = adcGroup1[c6Vol];
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	4a4b      	ldr	r2, [pc, #300]	@ (8001ca4 <volumeLRPoll+0x314>)
 8001b78:	8951      	ldrh	r1, [r2, #10]
 8001b7a:	4a4b      	ldr	r2, [pc, #300]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b7c:	f203 63dc 	addw	r3, r3, #1756	@ 0x6dc
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	460a      	mov	r2, r1
 8001b86:	805a      	strh	r2, [r3, #2]
	  channels[5].volumeRunner += channels[5].volumeBuffer[index % (sizeof(channels[5].volumeBuffer) / 2)];
 8001b88:	4b47      	ldr	r3, [pc, #284]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b8a:	f8b3 2dca 	ldrh.w	r2, [r3, #3530]	@ 0xdca
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	4944      	ldr	r1, [pc, #272]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001b96:	f203 63dc 	addw	r3, r3, #1756	@ 0x6dc
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	440b      	add	r3, r1
 8001b9e:	885b      	ldrh	r3, [r3, #2]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b40      	ldr	r3, [pc, #256]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001ba6:	f8a3 2dca 	strh.w	r2, [r3, #3530]	@ 0xdca
	  channels[5].volumeRunner -= channels[5].volumeBuffer[(index + 1) % (sizeof(channels[5].volumeBuffer) / 2)];
 8001baa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001bac:	f8b3 2dca 	ldrh.w	r2, [r3, #3530]	@ 0xdca
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	493b      	ldr	r1, [pc, #236]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001bba:	f203 63dc 	addw	r3, r3, #1756	@ 0x6dc
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	440b      	add	r3, r1
 8001bc2:	885b      	ldrh	r3, [r3, #2]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b37      	ldr	r3, [pc, #220]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001bca:	f8a3 2dca 	strh.w	r2, [r3, #3530]	@ 0xdca

	  //Channel 1 LR
	  channels[0].lrBuffer[index % (sizeof(channels[0].lrBuffer) / 2)] = adcGroup1[c1LR];
 8001bce:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <volumeLRPoll+0x314>)
 8001bd0:	8a1a      	ldrh	r2, [r3, #16]
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	ee07 2a90 	vmov	s15, r2
 8001bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be0:	4a31      	ldr	r2, [pc, #196]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001be2:	3384      	adds	r3, #132	@ 0x84
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3304      	adds	r3, #4
 8001bea:	edc3 7a00 	vstr	s15, [r3]
	  channels[0].lrRunner += channels[0].lrBuffer[index % (sizeof(channels[0].lrBuffer) / 2)];
 8001bee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001bf0:	f8b3 3234 	ldrh.w	r3, [r3, #564]	@ 0x234
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	4a29      	ldr	r2, [pc, #164]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001c04:	3384      	adds	r3, #132	@ 0x84
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c18:	ee17 3a90 	vmov	r3, s15
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001c20:	f8a3 2234 	strh.w	r2, [r3, #564]	@ 0x234
	  channels[0].lrRunner -= channels[0].lrBuffer[(index + 1) % (sizeof(channels[0].lrBuffer) / 2)];
 8001c24:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001c26:	f8b3 3234 	ldrh.w	r3, [r3, #564]	@ 0x234
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	3301      	adds	r3, #1
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001c3c:	3384      	adds	r3, #132	@ 0x84
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	3304      	adds	r3, #4
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c50:	ee17 3a90 	vmov	r3, s15
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001c58:	f8a3 2234 	strh.w	r2, [r3, #564]	@ 0x234

	  //Channel 2 LR
	  channels[1].lrBuffer[index % (sizeof(channels[1].lrBuffer) / 2)] = adcGroup1[c2LR];
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <volumeLRPoll+0x314>)
 8001c5e:	8a5a      	ldrh	r2, [r3, #18]
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	ee07 2a90 	vmov	s15, r2
 8001c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001c70:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
	  channels[1].lrRunner += channels[1].lrBuffer[index % (sizeof(channels[1].lrBuffer) / 2)];
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001c80:	f8b3 348c 	ldrh.w	r3, [r3, #1164]	@ 0x48c
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	4a05      	ldr	r2, [pc, #20]	@ (8001ca8 <volumeLRPoll+0x318>)
 8001c94:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	e003      	b.n	8001cac <volumeLRPoll+0x31c>
 8001ca4:	20033e10 	.word	0x20033e10
 8001ca8:	20036630 	.word	0x20036630
 8001cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb4:	ee17 3a90 	vmov	r3, s15
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4ba7      	ldr	r3, [pc, #668]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001cbc:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
	  channels[1].lrRunner -= channels[1].lrBuffer[(index + 1) % (sizeof(channels[1].lrBuffer) / 2)];
 8001cc0:	4ba5      	ldr	r3, [pc, #660]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001cc2:	f8b3 348c 	ldrh.w	r3, [r3, #1164]	@ 0x48c
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	4aa0      	ldr	r2, [pc, #640]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001cd8:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cee:	ee17 3a90 	vmov	r3, s15
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b98      	ldr	r3, [pc, #608]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001cf6:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c

	  //Channel 3 LR
	  channels[2].lrBuffer[index % (sizeof(channels[2].lrBuffer) / 2)] = adcGroup1[c3LR];
 8001cfa:	4b98      	ldr	r3, [pc, #608]	@ (8001f5c <volumeLRPoll+0x5cc>)
 8001cfc:	8a9a      	ldrh	r2, [r3, #20]
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	ee07 2a90 	vmov	s15, r2
 8001d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d0c:	4a92      	ldr	r2, [pc, #584]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001d0e:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	3304      	adds	r3, #4
 8001d18:	edc3 7a00 	vstr	s15, [r3]
	  channels[2].lrRunner += channels[2].lrBuffer[index % (sizeof(channels[2].lrBuffer) / 2)];
 8001d1c:	4b8e      	ldr	r3, [pc, #568]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001d1e:	f8b3 36e4 	ldrh.w	r3, [r3, #1764]	@ 0x6e4
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	4a89      	ldr	r2, [pc, #548]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001d32:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d48:	ee17 3a90 	vmov	r3, s15
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b82      	ldr	r3, [pc, #520]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001d50:	f8a3 26e4 	strh.w	r2, [r3, #1764]	@ 0x6e4
	  channels[2].lrRunner -= channels[2].lrBuffer[(index + 1) % (sizeof(channels[2].lrBuffer) / 2)];
 8001d54:	4b80      	ldr	r3, [pc, #512]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001d56:	f8b3 36e4 	ldrh.w	r3, [r3, #1764]	@ 0x6e4
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	3301      	adds	r3, #1
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001d6c:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d82:	ee17 3a90 	vmov	r3, s15
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b73      	ldr	r3, [pc, #460]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001d8a:	f8a3 26e4 	strh.w	r2, [r3, #1764]	@ 0x6e4

	  //Channel 4 LR
	  channels[3].lrBuffer[index % (sizeof(channels[3].lrBuffer) / 2)] = adcGroup1[c4LR];
 8001d8e:	4b73      	ldr	r3, [pc, #460]	@ (8001f5c <volumeLRPoll+0x5cc>)
 8001d90:	8ada      	ldrh	r2, [r3, #22]
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	ee07 2a90 	vmov	s15, r2
 8001d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da0:	4a6d      	ldr	r2, [pc, #436]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001da2:	f203 2346 	addw	r3, r3, #582	@ 0x246
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3304      	adds	r3, #4
 8001dac:	edc3 7a00 	vstr	s15, [r3]
	  channels[3].lrRunner += channels[3].lrBuffer[index % (sizeof(channels[3].lrBuffer) / 2)];
 8001db0:	4b69      	ldr	r3, [pc, #420]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001db2:	f8b3 393c 	ldrh.w	r3, [r3, #2364]	@ 0x93c
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	4a64      	ldr	r2, [pc, #400]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001dc6:	f203 2346 	addw	r3, r3, #582	@ 0x246
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ddc:	ee17 3a90 	vmov	r3, s15
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001de4:	f8a3 293c 	strh.w	r2, [r3, #2364]	@ 0x93c
	  channels[3].lrRunner -= channels[3].lrBuffer[(index + 1) % (sizeof(channels[3].lrBuffer) / 2)];
 8001de8:	4b5b      	ldr	r3, [pc, #364]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001dea:	f8b3 393c 	ldrh.w	r3, [r3, #2364]	@ 0x93c
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	4a56      	ldr	r2, [pc, #344]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001e00:	f203 2346 	addw	r3, r3, #582	@ 0x246
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3304      	adds	r3, #4
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e16:	ee17 3a90 	vmov	r3, s15
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001e1e:	f8a3 293c 	strh.w	r2, [r3, #2364]	@ 0x93c

	  //Channel 5 LR
	  channels[4].lrBuffer[index % (sizeof(channels[4].lrBuffer) / 2)] = adcGroup4[c5LR];
 8001e22:	4b4f      	ldr	r3, [pc, #316]	@ (8001f60 <volumeLRPoll+0x5d0>)
 8001e24:	881a      	ldrh	r2, [r3, #0]
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	ee07 2a90 	vmov	s15, r2
 8001e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e34:	4a48      	ldr	r2, [pc, #288]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001e36:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	edc3 7a00 	vstr	s15, [r3]
	  channels[4].lrRunner += channels[4].lrBuffer[index % (sizeof(channels[4].lrBuffer) / 2)];
 8001e44:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001e46:	f8b3 3b94 	ldrh.w	r3, [r3, #2964]	@ 0xb94
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	4a3f      	ldr	r2, [pc, #252]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001e5a:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e70:	ee17 3a90 	vmov	r3, s15
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	4b38      	ldr	r3, [pc, #224]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001e78:	f8a3 2b94 	strh.w	r2, [r3, #2964]	@ 0xb94
	  channels[4].lrRunner -= channels[4].lrBuffer[(index + 1) % (sizeof(channels[4].lrBuffer) / 2)];
 8001e7c:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001e7e:	f8b3 3b94 	ldrh.w	r3, [r3, #2964]	@ 0xb94
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	4a31      	ldr	r2, [pc, #196]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001e94:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eaa:	ee17 3a90 	vmov	r3, s15
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b29      	ldr	r3, [pc, #164]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001eb2:	f8a3 2b94 	strh.w	r2, [r3, #2964]	@ 0xb94

	  //Channel 6 LR
	  channels[5].lrBuffer[index % (sizeof(channels[5].lrBuffer) / 2)] = adcGroup4[c6LR];
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <volumeLRPoll+0x5d0>)
 8001eb8:	885a      	ldrh	r2, [r3, #2]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	ee07 2a90 	vmov	s15, r2
 8001ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec8:	4a23      	ldr	r2, [pc, #140]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001eca:	f203 3372 	addw	r3, r3, #882	@ 0x372
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	edc3 7a00 	vstr	s15, [r3]
	  channels[5].lrRunner += channels[5].lrBuffer[index % (sizeof(channels[5].lrBuffer) / 2)];
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001eda:	f8b3 3dec 	ldrh.w	r3, [r3, #3564]	@ 0xdec
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	4a1a      	ldr	r2, [pc, #104]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001eee:	f203 3372 	addw	r3, r3, #882	@ 0x372
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f04:	ee17 3a90 	vmov	r3, s15
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001f0c:	f8a3 2dec 	strh.w	r2, [r3, #3564]	@ 0xdec
	  channels[5].lrRunner -= channels[5].lrBuffer[(index + 1) % (sizeof(channels[5].lrBuffer) / 2)];
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001f12:	f8b3 3dec 	ldrh.w	r3, [r3, #3564]	@ 0xdec
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	3301      	adds	r3, #1
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	4a0c      	ldr	r2, [pc, #48]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001f28:	f203 3372 	addw	r3, r3, #882	@ 0x372
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3e:	ee17 3a90 	vmov	r3, s15
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <volumeLRPoll+0x5c8>)
 8001f46:	f8a3 2dec 	strh.w	r2, [r3, #3564]	@ 0xdec
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20036630 	.word	0x20036630
 8001f5c:	20033e10 	.word	0x20033e10
 8001f60:	20033e2c 	.word	0x20033e2c

08001f64 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	adcReady = true;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_SAI_RxHalfCpltCallback+0x20>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[0];
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_SAI_RxHalfCpltCallback+0x24>)
 8001f74:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <HAL_SAI_RxHalfCpltCallback+0x28>)
 8001f76:	601a      	str	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	200378f0 	.word	0x200378f0
 8001f88:	200378f4 	.word	0x200378f4
 8001f8c:	20033e30 	.word	0x20033e30

08001f90 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	adcReady = true;
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_SAI_RxCpltCallback+0x20>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[sampleSize * (channelCount / 2)];
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_SAI_RxCpltCallback+0x24>)
 8001fa0:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <HAL_SAI_RxCpltCallback+0x28>)
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	200378f0 	.word	0x200378f0
 8001fb4:	200378f4 	.word	0x200378f4
 8001fb8:	20034e30 	.word	0x20034e30

08001fbc <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_SAI_TxHalfCpltCallback+0x20>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[0];
 8001fca:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_SAI_TxHalfCpltCallback+0x24>)
 8001fcc:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <HAL_SAI_TxHalfCpltCallback+0x28>)
 8001fce:	601a      	str	r2, [r3, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	200378f1 	.word	0x200378f1
 8001fe0:	200378f8 	.word	0x200378f8
 8001fe4:	20035e30 	.word	0x20035e30

08001fe8 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_SAI_TxCpltCallback+0x20>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[sampleSize];
 8001ff6:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_SAI_TxCpltCallback+0x24>)
 8001ff8:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <HAL_SAI_TxCpltCallback+0x28>)
 8001ffa:	601a      	str	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	200378f1 	.word	0x200378f1
 800200c:	200378f8 	.word	0x200378f8
 8002010:	20036230 	.word	0x20036230

08002014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <Error_Handler+0x8>

08002020 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_MspInit+0x30>)
 8002028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800202c:	4a08      	ldr	r2, [pc, #32]	@ (8002050 <HAL_MspInit+0x30>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002036:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_MspInit+0x30>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8002044:	f008 f8e8 	bl	800a218 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	46020c00 	.word	0x46020c00

08002054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0e4      	sub	sp, #400	@ 0x190
 8002058:	af00      	add	r7, sp, #0
 800205a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800205e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002062:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  DMA_TriggerConfTypeDef TriggerConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002074:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002078:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800207c:	4618      	mov	r0, r3
 800207e:	23e0      	movs	r3, #224	@ 0xe0
 8002080:	461a      	mov	r2, r3
 8002082:	2100      	movs	r1, #0
 8002084:	f010 f9e5 	bl	8012452 <memset>
  if(hadc->Instance==ADC1)
 8002088:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800208c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4aa1      	ldr	r2, [pc, #644]	@ (800231c <HAL_ADC_MspInit+0x2c8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	f040 8152 	bne.w	8002340 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800209c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80020a0:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 80020a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80020b0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80020b4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80020b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020bc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	f107 0320 	add.w	r3, r7, #32
 80020c4:	4618      	mov	r0, r3
 80020c6:	f009 fb81 	bl	800b7cc <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80020d0:	f7ff ffa0 	bl	8002014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80020d4:	4b92      	ldr	r3, [pc, #584]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 80020d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020da:	4a91      	ldr	r2, [pc, #580]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 80020dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 80020e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ea:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80020ee:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80020f2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80020fc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002100:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	4b87      	ldr	r3, [pc, #540]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 8002104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002108:	4a85      	ldr	r2, [pc, #532]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002112:	4b83      	ldr	r3, [pc, #524]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 8002114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002118:	f003 0204 	and.w	r2, r3, #4
 800211c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002120:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800212a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800212e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b7b      	ldr	r3, [pc, #492]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 8002132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002136:	4a7a      	ldr	r2, [pc, #488]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002140:	4b77      	ldr	r3, [pc, #476]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 8002142:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002146:	f003 0201 	and.w	r2, r3, #1
 800214a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800214e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002158:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800215c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b70      	ldr	r3, [pc, #448]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 8002160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002164:	4a6e      	ldr	r2, [pc, #440]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800216e:	4b6c      	ldr	r3, [pc, #432]	@ (8002320 <HAL_ADC_MspInit+0x2cc>)
 8002170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002174:	f003 0202 	and.w	r2, r3, #2
 8002178:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800217c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002186:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800218a:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 800218c:	230f      	movs	r3, #15
 800218e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002192:	2303      	movs	r3, #3
 8002194:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219e:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80021a2:	4619      	mov	r1, r3
 80021a4:	485f      	ldr	r0, [pc, #380]	@ (8002324 <HAL_ADC_MspInit+0x2d0>)
 80021a6:	f005 fe15 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 80021aa:	23ed      	movs	r3, #237	@ 0xed
 80021ac:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b0:	2303      	movs	r3, #3
 80021b2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80021c0:	4619      	mov	r1, r3
 80021c2:	4859      	ldr	r0, [pc, #356]	@ (8002328 <HAL_ADC_MspInit+0x2d4>)
 80021c4:	f005 fe06 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80021de:	4619      	mov	r1, r3
 80021e0:	4852      	ldr	r0, [pc, #328]	@ (800232c <HAL_ADC_MspInit+0x2d8>)
 80021e2:	f005 fdf7 	bl	8007dd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80021e6:	2321      	movs	r3, #33	@ 0x21
 80021e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002204:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002208:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800220c:	2301      	movs	r3, #1
 800220e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002212:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002216:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.SrcBurstLength = 1;
 800221a:	2301      	movs	r3, #1
 800221c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.DestBurstLength = 1;
 8002220:	2301      	movs	r3, #1
 8002222:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8002226:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800222a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8002240:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002244:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8002248:	232b      	movs	r3, #43	@ 0x2b
 800224a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 800225a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800225e:	4934      	ldr	r1, [pc, #208]	@ (8002330 <HAL_ADC_MspInit+0x2dc>)
 8002260:	4618      	mov	r0, r3
 8002262:	f004 fe95 	bl	8006f90 <HAL_DMAEx_List_BuildNode>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 800226c:	f7ff fed2 	bl	8002014 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8002270:	4a2f      	ldr	r2, [pc, #188]	@ (8002330 <HAL_ADC_MspInit+0x2dc>)
 8002272:	2100      	movs	r1, #0
 8002274:	482f      	ldr	r0, [pc, #188]	@ (8002334 <HAL_ADC_MspInit+0x2e0>)
 8002276:	f004 feb7 	bl	8006fe8 <HAL_DMAEx_List_InsertNode>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 8002280:	f7ff fec8 	bl	8002014 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8002284:	482b      	ldr	r0, [pc, #172]	@ (8002334 <HAL_ADC_MspInit+0x2e0>)
 8002286:	f004 ff78 	bl	800717a <HAL_DMAEx_List_SetCircularMode>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 8002290:	f7ff fec0 	bl	8002014 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8002294:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 8002296:	4a29      	ldr	r2, [pc, #164]	@ (800233c <HAL_ADC_MspInit+0x2e8>)
 8002298:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800229a:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 800229c:	2200      	movs	r2, #0
 800229e:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80022a0:	4b25      	ldr	r3, [pc, #148]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80022a6:	4b24      	ldr	r3, [pc, #144]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80022ac:	4b22      	ldr	r3, [pc, #136]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80022b2:	4b21      	ldr	r3, [pc, #132]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 80022b4:	2281      	movs	r2, #129	@ 0x81
 80022b6:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80022b8:	481f      	ldr	r0, [pc, #124]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 80022ba:	f004 fca9 	bl	8006c10 <HAL_DMAEx_List_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 80022c4:	f7ff fea6 	bl	8002014 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80022c8:	491a      	ldr	r1, [pc, #104]	@ (8002334 <HAL_ADC_MspInit+0x2e0>)
 80022ca:	481b      	ldr	r0, [pc, #108]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 80022cc:	f004 ffb6 	bl	800723c <HAL_DMAEx_List_LinkQ>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 80022d6:	f7ff fe9d 	bl	8002014 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 80022da:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80022de:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 80022e6:	671a      	str	r2, [r3, #112]	@ 0x70
 80022e8:	4a13      	ldr	r2, [pc, #76]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 80022ea:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80022ee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80022f6:	2110      	movs	r1, #16
 80022f8:	480f      	ldr	r0, [pc, #60]	@ (8002338 <HAL_ADC_MspInit+0x2e4>)
 80022fa:	f004 f897 	bl	800642c <HAL_DMA_ConfigChannelAttributes>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8002304:	f7ff fe86 	bl	8002014 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2025      	movs	r0, #37	@ 0x25
 800230e:	f003 fc11 	bl	8005b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002312:	2025      	movs	r0, #37	@ 0x25
 8002314:	f003 fc28 	bl	8005b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8002318:	e0d5      	b.n	80024c6 <HAL_ADC_MspInit+0x472>
 800231a:	bf00      	nop
 800231c:	42028000 	.word	0x42028000
 8002320:	46020c00 	.word	0x46020c00
 8002324:	42020800 	.word	0x42020800
 8002328:	42020000 	.word	0x42020000
 800232c:	42020400 	.word	0x42020400
 8002330:	20000168 	.word	0x20000168
 8002334:	2000018c 	.word	0x2000018c
 8002338:	200001a4 	.word	0x200001a4
 800233c:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8002340:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002344:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a60      	ldr	r2, [pc, #384]	@ (80024d0 <HAL_ADC_MspInit+0x47c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	f040 80b9 	bne.w	80024c6 <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002354:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002358:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 800235c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8002368:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800236c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002370:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002374:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002378:	f107 0320 	add.w	r3, r7, #32
 800237c:	4618      	mov	r0, r3
 800237e:	f009 fa25 	bl	800b7cc <HAL_RCCEx_PeriphCLKConfig>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8002388:	f7ff fe44 	bl	8002014 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 800238c:	4b51      	ldr	r3, [pc, #324]	@ (80024d4 <HAL_ADC_MspInit+0x480>)
 800238e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002392:	4a50      	ldr	r2, [pc, #320]	@ (80024d4 <HAL_ADC_MspInit+0x480>)
 8002394:	f043 0320 	orr.w	r3, r3, #32
 8002398:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800239c:	4b4d      	ldr	r3, [pc, #308]	@ (80024d4 <HAL_ADC_MspInit+0x480>)
 800239e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a2:	f003 0220 	and.w	r2, r3, #32
 80023a6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023b4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023b8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023ba:	4b46      	ldr	r3, [pc, #280]	@ (80024d4 <HAL_ADC_MspInit+0x480>)
 80023bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023c0:	4a44      	ldr	r2, [pc, #272]	@ (80024d4 <HAL_ADC_MspInit+0x480>)
 80023c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023ca:	4b42      	ldr	r3, [pc, #264]	@ (80024d4 <HAL_ADC_MspInit+0x480>)
 80023cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d0:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80023d4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023e2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023e6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 80023e8:	2303      	movs	r3, #3
 80023ea:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023fa:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80023fe:	4619      	mov	r1, r3
 8002400:	4835      	ldr	r0, [pc, #212]	@ (80024d8 <HAL_ADC_MspInit+0x484>)
 8002402:	f005 fce7 	bl	8007dd4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8002406:	4b35      	ldr	r3, [pc, #212]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 8002408:	4a35      	ldr	r2, [pc, #212]	@ (80024e0 <HAL_ADC_MspInit+0x48c>)
 800240a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 800240c:	4b33      	ldr	r3, [pc, #204]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 800240e:	2201      	movs	r2, #1
 8002410:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002412:	4b32      	ldr	r3, [pc, #200]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002418:	4b30      	ldr	r3, [pc, #192]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800241e:	4b2f      	ldr	r3, [pc, #188]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8002424:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 8002426:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800242a:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800242c:	4b2b      	ldr	r3, [pc, #172]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 800242e:	2201      	movs	r2, #1
 8002430:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002432:	4b2a      	ldr	r3, [pc, #168]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 8002434:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002438:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800243a:	4b28      	ldr	r3, [pc, #160]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8002440:	4b26      	ldr	r3, [pc, #152]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 8002442:	2201      	movs	r2, #1
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8002446:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 8002448:	2201      	movs	r2, #1
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800244c:	4b23      	ldr	r3, [pc, #140]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 800244e:	2200      	movs	r2, #0
 8002450:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002452:	4b22      	ldr	r3, [pc, #136]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8002458:	4b20      	ldr	r3, [pc, #128]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 800245a:	2200      	movs	r2, #0
 800245c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 800245e:	481f      	ldr	r0, [pc, #124]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 8002460:	f003 fc44 	bl	8005cec <HAL_DMA_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 800246a:	f7ff fdd3 	bl	8002014 <Error_Handler>
    TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8002474:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002478:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 800247c:	232b      	movs	r3, #43	@ 0x2b
 800247e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (HAL_DMAEx_ConfigTrigger(&handle_GPDMA1_Channel2, &TriggerConfig) != HAL_OK)
 8002482:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002486:	4619      	mov	r1, r3
 8002488:	4814      	ldr	r0, [pc, #80]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 800248a:	f004 ff6d 	bl	8007368 <HAL_DMAEx_ConfigTrigger>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_ADC_MspInit+0x444>
      Error_Handler();
 8002494:	f7ff fdbe 	bl	8002014 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8002498:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800249c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a0e      	ldr	r2, [pc, #56]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 80024a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80024a6:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 80024a8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80024ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80024b4:	2110      	movs	r1, #16
 80024b6:	4809      	ldr	r0, [pc, #36]	@ (80024dc <HAL_ADC_MspInit+0x488>)
 80024b8:	f003 ffb8 	bl	800642c <HAL_DMA_ConfigChannelAttributes>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_ADC_MspInit+0x472>
      Error_Handler();
 80024c2:	f7ff fda7 	bl	8002014 <Error_Handler>
}
 80024c6:	bf00      	nop
 80024c8:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	46021000 	.word	0x46021000
 80024d4:	46020c00 	.word	0x46020c00
 80024d8:	42021800 	.word	0x42021800
 80024dc:	2000021c 	.word	0x2000021c
 80024e0:	40020150 	.word	0x40020150

080024e4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002520 <HAL_DMA2D_MspInit+0x3c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10e      	bne.n	8002514 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_DMA2D_MspInit+0x40>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	4a09      	ldr	r2, [pc, #36]	@ (8002524 <HAL_DMA2D_MspInit+0x40>)
 80024fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002502:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002506:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <HAL_DMA2D_MspInit+0x40>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	4002b000 	.word	0x4002b000
 8002524:	46020c00 	.word	0x46020c00

08002528 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	@ 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a2a      	ldr	r2, [pc, #168]	@ (80025f0 <HAL_XSPI_MspInit+0xc8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d14d      	bne.n	80025e6 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 800254a:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <HAL_XSPI_MspInit+0xcc>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002550:	4a28      	ldr	r2, [pc, #160]	@ (80025f4 <HAL_XSPI_MspInit+0xcc>)
 8002552:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002556:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800255a:	4b26      	ldr	r3, [pc, #152]	@ (80025f4 <HAL_XSPI_MspInit+0xcc>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002560:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002568:	4b22      	ldr	r3, [pc, #136]	@ (80025f4 <HAL_XSPI_MspInit+0xcc>)
 800256a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800256e:	4a21      	ldr	r2, [pc, #132]	@ (80025f4 <HAL_XSPI_MspInit+0xcc>)
 8002570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002574:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002578:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <HAL_XSPI_MspInit+0xcc>)
 800257a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800257e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002586:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_XSPI_MspInit+0xcc>)
 8002588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800258c:	4a19      	ldr	r2, [pc, #100]	@ (80025f4 <HAL_XSPI_MspInit+0xcc>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002592:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002596:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <HAL_XSPI_MspInit+0xcc>)
 8002598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800259c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80025a4:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 80025a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80025b6:	2308      	movs	r3, #8
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	480d      	ldr	r0, [pc, #52]	@ (80025f8 <HAL_XSPI_MspInit+0xd0>)
 80025c2:	f005 fc07 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80025c6:	230f      	movs	r3, #15
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80025d6:	2308      	movs	r3, #8
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	4806      	ldr	r0, [pc, #24]	@ (80025fc <HAL_XSPI_MspInit+0xd4>)
 80025e2:	f005 fbf7 	bl	8007dd4 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 80025e6:	bf00      	nop
 80025e8:	3728      	adds	r7, #40	@ 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	420d3400 	.word	0x420d3400
 80025f4:	46020c00 	.word	0x46020c00
 80025f8:	42021c00 	.word	0x42021c00
 80025fc:	42022000 	.word	0x42022000

08002600 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b0c4      	sub	sp, #272	@ 0x110
 8002604:	af00      	add	r7, sp, #0
 8002606:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800260a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800260e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002620:	f107 0318 	add.w	r3, r7, #24
 8002624:	22e0      	movs	r2, #224	@ 0xe0
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f00f ff12 	bl	8012452 <memset>
  if(hi2c->Instance==I2C1)
 800262e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002632:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a63      	ldr	r2, [pc, #396]	@ (80027c8 <HAL_I2C_MspInit+0x1c8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d14f      	bne.n	80026e0 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002640:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002652:	f107 0318 	add.w	r3, r7, #24
 8002656:	4618      	mov	r0, r3
 8002658:	f009 f8b8 	bl	800b7cc <HAL_RCCEx_PeriphCLKConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002662:	f7ff fcd7 	bl	8002014 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002666:	4b59      	ldr	r3, [pc, #356]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 8002668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800266c:	4a57      	ldr	r2, [pc, #348]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 800266e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002672:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002676:	4b55      	ldr	r3, [pc, #340]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 8002678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800267c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002684:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002688:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268c:	2312      	movs	r3, #18
 800268e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800269e:	2304      	movs	r3, #4
 80026a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026a4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80026a8:	4619      	mov	r1, r3
 80026aa:	4849      	ldr	r0, [pc, #292]	@ (80027d0 <HAL_I2C_MspInit+0x1d0>)
 80026ac:	f005 fb92 	bl	8007dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026b0:	4b46      	ldr	r3, [pc, #280]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 80026b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026b6:	4a45      	ldr	r2, [pc, #276]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 80026b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026bc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80026c0:	4b42      	ldr	r3, [pc, #264]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 80026c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026c6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80026ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026ce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026dc:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026de:	e06e      	b.n	80027be <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 80026e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a39      	ldr	r2, [pc, #228]	@ (80027d4 <HAL_I2C_MspInit+0x1d4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d165      	bne.n	80027be <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80026f2:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002704:	f107 0318 	add.w	r3, r7, #24
 8002708:	4618      	mov	r0, r3
 800270a:	f009 f85f 	bl	800b7cc <HAL_RCCEx_PeriphCLKConfig>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002714:	f7ff fc7e 	bl	8002014 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002718:	4b2c      	ldr	r3, [pc, #176]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 800271a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800271e:	4a2b      	ldr	r2, [pc, #172]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 8002720:	f043 0320 	orr.w	r3, r3, #32
 8002724:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 800272a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800272e:	f003 0220 	and.w	r2, r3, #32
 8002732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002740:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002744:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002746:	2303      	movs	r3, #3
 8002748:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800274c:	2312      	movs	r3, #18
 800274e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800275e:	2304      	movs	r3, #4
 8002760:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002764:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002768:	4619      	mov	r1, r3
 800276a:	481b      	ldr	r0, [pc, #108]	@ (80027d8 <HAL_I2C_MspInit+0x1d8>)
 800276c:	f005 fb32 	bl	8007dd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002770:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 8002772:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002776:	4a15      	ldr	r2, [pc, #84]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 8002778:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800277c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <HAL_I2C_MspInit+0x1cc>)
 8002782:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002786:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800278a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800278e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800279c:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	2039      	movs	r0, #57	@ 0x39
 80027a4:	f003 f9c6 	bl	8005b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80027a8:	2039      	movs	r0, #57	@ 0x39
 80027aa:	f003 f9dd 	bl	8005b68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	203a      	movs	r0, #58	@ 0x3a
 80027b4:	f003 f9be 	bl	8005b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80027b8:	203a      	movs	r0, #58	@ 0x3a
 80027ba:	f003 f9d5 	bl	8005b68 <HAL_NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40005400 	.word	0x40005400
 80027cc:	46020c00 	.word	0x46020c00
 80027d0:	42021800 	.word	0x42021800
 80027d4:	40005800 	.word	0x40005800
 80027d8:	42021400 	.word	0x42021400

080027dc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b0c6      	sub	sp, #280	@ 0x118
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80027e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027ea:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027fc:	f107 0320 	add.w	r3, r7, #32
 8002800:	22e0      	movs	r2, #224	@ 0xe0
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f00f fe24 	bl	8012452 <memset>
  if(hltdc->Instance==LTDC)
 800280a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800280e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a92      	ldr	r2, [pc, #584]	@ (8002a60 <HAL_LTDC_MspInit+0x284>)
 8002818:	4293      	cmp	r3, r2
 800281a:	f040 811b 	bne.w	8002a54 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0302 	mov.w	r3, #2
 8002826:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8002830:	2303      	movs	r3, #3
 8002832:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8002834:	2304      	movs	r3, #4
 8002836:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8002838:	2332      	movs	r3, #50	@ 0x32
 800283a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 800283c:	2302      	movs	r3, #2
 800283e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8002840:	2302      	movs	r3, #2
 8002842:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8002844:	2308      	movs	r3, #8
 8002846:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8002848:	2300      	movs	r3, #0
 800284a:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8002850:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002854:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002856:	f107 0320 	add.w	r3, r7, #32
 800285a:	4618      	mov	r0, r3
 800285c:	f008 ffb6 	bl	800b7cc <HAL_RCCEx_PeriphCLKConfig>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8002866:	f7ff fbd5 	bl	8002014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800286a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 800286c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002870:	4a7c      	ldr	r2, [pc, #496]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 8002872:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002876:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800287a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 800287c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002880:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002888:	4b76      	ldr	r3, [pc, #472]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 800288a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800288e:	4a75      	ldr	r2, [pc, #468]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002898:	4b72      	ldr	r3, [pc, #456]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 800289a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800289e:	f003 0202 	and.w	r2, r3, #2
 80028a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028b4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028b6:	4b6b      	ldr	r3, [pc, #428]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 80028b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028bc:	4a69      	ldr	r2, [pc, #420]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 80028be:	f043 0310 	orr.w	r3, r3, #16
 80028c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028c6:	4b67      	ldr	r3, [pc, #412]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 80028c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028cc:	f003 0210 	and.w	r2, r3, #16
 80028d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028e2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 80028e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 80028ec:	f043 0308 	orr.w	r3, r3, #8
 80028f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 80028f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028fa:	f003 0208 	and.w	r2, r3, #8
 80028fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800290c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002910:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	4b54      	ldr	r3, [pc, #336]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 8002914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002918:	4a52      	ldr	r2, [pc, #328]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002922:	4b50      	ldr	r3, [pc, #320]	@ (8002a64 <HAL_LTDC_MspInit+0x288>)
 8002924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002928:	f003 0204 	and.w	r2, r3, #4
 800292c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002930:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800293a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800293e:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002940:	2304      	movs	r3, #4
 8002942:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002958:	2308      	movs	r3, #8
 800295a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002962:	4619      	mov	r1, r3
 8002964:	4840      	ldr	r0, [pc, #256]	@ (8002a68 <HAL_LTDC_MspInit+0x28c>)
 8002966:	f005 fa35 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800296a:	f64f 7381 	movw	r3, #65409	@ 0xff81
 800296e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2300      	movs	r3, #0
 8002980:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002984:	2308      	movs	r3, #8
 8002986:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800298a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800298e:	4619      	mov	r1, r3
 8002990:	4836      	ldr	r0, [pc, #216]	@ (8002a6c <HAL_LTDC_MspInit+0x290>)
 8002992:	f005 fa1f 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002996:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 800299a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80029b0:	2308      	movs	r3, #8
 80029b2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80029ba:	4619      	mov	r1, r3
 80029bc:	482c      	ldr	r0, [pc, #176]	@ (8002a70 <HAL_LTDC_MspInit+0x294>)
 80029be:	f005 fa09 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029c2:	23c0      	movs	r3, #192	@ 0xc0
 80029c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	2302      	movs	r3, #2
 80029ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80029da:	2307      	movs	r3, #7
 80029dc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80029e4:	4619      	mov	r1, r3
 80029e6:	4823      	ldr	r0, [pc, #140]	@ (8002a74 <HAL_LTDC_MspInit+0x298>)
 80029e8:	f005 f9f4 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002a06:	2308      	movs	r3, #8
 8002a08:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002a10:	4619      	mov	r1, r3
 8002a12:	4818      	ldr	r0, [pc, #96]	@ (8002a74 <HAL_LTDC_MspInit+0x298>)
 8002a14:	f005 f9de 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002a32:	2307      	movs	r3, #7
 8002a34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a38:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480a      	ldr	r0, [pc, #40]	@ (8002a68 <HAL_LTDC_MspInit+0x28c>)
 8002a40:	f005 f9c8 	bl	8007dd4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	2087      	movs	r0, #135	@ 0x87
 8002a4a:	f003 f873 	bl	8005b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002a4e:	2087      	movs	r0, #135	@ 0x87
 8002a50:	f003 f88a 	bl	8005b68 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002a54:	bf00      	nop
 8002a56:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40016800 	.word	0x40016800
 8002a64:	46020c00 	.word	0x46020c00
 8002a68:	42020400 	.word	0x42020400
 8002a6c:	42021000 	.word	0x42021000
 8002a70:	42020c00 	.word	0x42020c00
 8002a74:	42020800 	.word	0x42020800

08002a78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0bc      	sub	sp, #240	@ 0xf0
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	22e0      	movs	r2, #224	@ 0xe0
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f00f fce2 	bl	8012452 <memset>
  if(hrtc->Instance==RTC)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1d      	ldr	r2, [pc, #116]	@ (8002b08 <HAL_RTC_MspInit+0x90>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d132      	bne.n	8002afe <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aac:	f107 0310 	add.w	r3, r7, #16
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f008 fe8b 	bl	800b7cc <HAL_RCCEx_PeriphCLKConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002abc:	f7ff faaa 	bl	8002014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ac0:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <HAL_RTC_MspInit+0x94>)
 8002ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ac6:	4a11      	ldr	r2, [pc, #68]	@ (8002b0c <HAL_RTC_MspInit+0x94>)
 8002ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002acc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <HAL_RTC_MspInit+0x94>)
 8002ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <HAL_RTC_MspInit+0x94>)
 8002ad8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002adc:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <HAL_RTC_MspInit+0x94>)
 8002ae2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <HAL_RTC_MspInit+0x94>)
 8002af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002af4:	4a05      	ldr	r2, [pc, #20]	@ (8002b0c <HAL_RTC_MspInit+0x94>)
 8002af6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002afa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002afe:	bf00      	nop
 8002b00:	37f0      	adds	r7, #240	@ 0xf0
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	46007800 	.word	0x46007800
 8002b0c:	46020c00 	.word	0x46020c00

08002b10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b4c <HAL_TIM_PWM_MspInit+0x3c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10e      	bne.n	8002b40 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b22:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <HAL_TIM_PWM_MspInit+0x40>)
 8002b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b28:	4a09      	ldr	r2, [pc, #36]	@ (8002b50 <HAL_TIM_PWM_MspInit+0x40>)
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b32:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <HAL_TIM_PWM_MspInit+0x40>)
 8002b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	40000400 	.word	0x40000400
 8002b50:	46020c00 	.word	0x46020c00

08002b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0b      	ldr	r2, [pc, #44]	@ (8002b90 <HAL_TIM_Base_MspInit+0x3c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d10e      	bne.n	8002b84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <HAL_TIM_Base_MspInit+0x40>)
 8002b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b6c:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_TIM_Base_MspInit+0x40>)
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b72:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002b76:	4b07      	ldr	r3, [pc, #28]	@ (8002b94 <HAL_TIM_Base_MspInit+0x40>)
 8002b78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40014000 	.word	0x40014000
 8002b94:	46020c00 	.word	0x46020c00

08002b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <HAL_TIM_MspPostInit+0x68>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d11e      	bne.n	8002bf8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bba:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <HAL_TIM_MspPostInit+0x6c>)
 8002bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bc0:	4a10      	ldr	r2, [pc, #64]	@ (8002c04 <HAL_TIM_MspPostInit+0x6c>)
 8002bc2:	f043 0310 	orr.w	r3, r3, #16
 8002bc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bca:	4b0e      	ldr	r3, [pc, #56]	@ (8002c04 <HAL_TIM_MspPostInit+0x6c>)
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002bd8:	2340      	movs	r3, #64	@ 0x40
 8002bda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002be8:	2302      	movs	r3, #2
 8002bea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002bec:	f107 030c 	add.w	r3, r7, #12
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4805      	ldr	r0, [pc, #20]	@ (8002c08 <HAL_TIM_MspPostInit+0x70>)
 8002bf4:	f005 f8ee 	bl	8007dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bf8:	bf00      	nop
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40000400 	.word	0x40000400
 8002c04:	46020c00 	.word	0x46020c00
 8002c08:	42021000 	.word	0x42021000

08002c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b0c2      	sub	sp, #264	@ 0x108
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002c16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c1a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	22e0      	movs	r2, #224	@ 0xe0
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f00f fc0c 	bl	8012452 <memset>
  if(huart->Instance==USART1)
 8002c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a2f      	ldr	r2, [pc, #188]	@ (8002d04 <HAL_UART_MspInit+0xf8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d155      	bne.n	8002cf8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c4c:	f04f 0201 	mov.w	r2, #1
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4618      	mov	r0, r3
 8002c62:	f008 fdb3 	bl	800b7cc <HAL_RCCEx_PeriphCLKConfig>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002c6c:	f7ff f9d2 	bl	8002014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c70:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <HAL_UART_MspInit+0xfc>)
 8002c72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c76:	4a24      	ldr	r2, [pc, #144]	@ (8002d08 <HAL_UART_MspInit+0xfc>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c7c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002c80:	4b21      	ldr	r3, [pc, #132]	@ (8002d08 <HAL_UART_MspInit+0xfc>)
 8002c82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_UART_MspInit+0xfc>)
 8002c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c94:	4a1c      	ldr	r2, [pc, #112]	@ (8002d08 <HAL_UART_MspInit+0xfc>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <HAL_UART_MspInit+0xfc>)
 8002ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca4:	f003 0201 	and.w	r2, r3, #1
 8002ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002cac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002cb6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cba:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cbc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	480a      	ldr	r0, [pc, #40]	@ (8002d0c <HAL_UART_MspInit+0x100>)
 8002ce4:	f005 f876 	bl	8007dd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2100      	movs	r1, #0
 8002cec:	203d      	movs	r0, #61	@ 0x3d
 8002cee:	f002 ff21 	bl	8005b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cf2:	203d      	movs	r0, #61	@ 0x3d
 8002cf4:	f002 ff38 	bl	8005b68 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002cf8:	bf00      	nop
 8002cfa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40013800 	.word	0x40013800
 8002d08:	46020c00 	.word	0x46020c00
 8002d0c:	42020000 	.word	0x42020000

08002d10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b0be      	sub	sp, #248	@ 0xf8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d18:	f107 0318 	add.w	r3, r7, #24
 8002d1c:	22e0      	movs	r2, #224	@ 0xe0
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f00f fb96 	bl	8012452 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3a      	ldr	r2, [pc, #232]	@ (8002e14 <HAL_PCD_MspInit+0x104>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d16d      	bne.n	8002e0c <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d30:	4b39      	ldr	r3, [pc, #228]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002d32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d36:	4a38      	ldr	r2, [pc, #224]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002d40:	4b35      	ldr	r3, [pc, #212]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0308 	mov.w	r3, #8
 8002d56:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002d5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d62:	f107 0318 	add.w	r3, r7, #24
 8002d66:	4618      	mov	r0, r3
 8002d68:	f008 fd30 	bl	800b7cc <HAL_RCCEx_PeriphCLKConfig>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 8002d72:	f7ff f94f 	bl	8002014 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002d76:	200c      	movs	r0, #12
 8002d78:	f000 fc1c 	bl	80035b4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002d7c:	4b26      	ldr	r3, [pc, #152]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d82:	4a25      	ldr	r2, [pc, #148]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d8c:	4b22      	ldr	r3, [pc, #136]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002da6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002daa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db8:	4b17      	ldr	r3, [pc, #92]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d11b      	bne.n	8002dfe <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dcc:	4a12      	ldr	r2, [pc, #72]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002dd6:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002de4:	f007 f9f8 	bl	800a1d8 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002de8:	f007 fa26 	bl	800a238 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dec:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df2:	4a09      	ldr	r2, [pc, #36]	@ (8002e18 <HAL_PCD_MspInit+0x108>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002dfc:	e003      	b.n	8002e06 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002dfe:	f007 f9eb 	bl	800a1d8 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002e02:	f007 fa19 	bl	800a238 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f000 fbc0 	bl	800358c <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002e0c:	bf00      	nop
 8002e0e:	37f8      	adds	r7, #248	@ 0xf8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	42040000 	.word	0x42040000
 8002e18:	46020c00 	.word	0x46020c00

08002e1c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b0a4      	sub	sp, #144	@ 0x90
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4abb      	ldr	r2, [pc, #748]	@ (8003118 <HAL_SAI_MspInit+0x2fc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	f040 80ca 	bne.w	8002fc4 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002e30:	4bba      	ldr	r3, [pc, #744]	@ (800311c <HAL_SAI_MspInit+0x300>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10e      	bne.n	8002e56 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002e38:	4bb9      	ldr	r3, [pc, #740]	@ (8003120 <HAL_SAI_MspInit+0x304>)
 8002e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e3e:	4ab8      	ldr	r2, [pc, #736]	@ (8003120 <HAL_SAI_MspInit+0x304>)
 8002e40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e44:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002e48:	4bb5      	ldr	r3, [pc, #724]	@ (8003120 <HAL_SAI_MspInit+0x304>)
 8002e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002e56:	4bb1      	ldr	r3, [pc, #708]	@ (800311c <HAL_SAI_MspInit+0x300>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	4aaf      	ldr	r2, [pc, #700]	@ (800311c <HAL_SAI_MspInit+0x300>)
 8002e5e:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e60:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002e64:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002e78:	230d      	movs	r3, #13
 8002e7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002e82:	4619      	mov	r1, r3
 8002e84:	48a7      	ldr	r0, [pc, #668]	@ (8003124 <HAL_SAI_MspInit+0x308>)
 8002e86:	f004 ffa5 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e90:	2302      	movs	r3, #2
 8002e92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002ea2:	230d      	movs	r3, #13
 8002ea4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002eac:	4619      	mov	r1, r3
 8002eae:	489d      	ldr	r0, [pc, #628]	@ (8003124 <HAL_SAI_MspInit+0x308>)
 8002eb0:	f004 ff90 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002eb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002ecc:	230d      	movs	r3, #13
 8002ece:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ed2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4893      	ldr	r0, [pc, #588]	@ (8003128 <HAL_SAI_MspInit+0x30c>)
 8002eda:	f004 ff7b 	bl	8007dd4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002ede:	2321      	movs	r3, #33	@ 0x21
 8002ee0:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8002ee2:	2326      	movs	r3, #38	@ 0x26
 8002ee4:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eee:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002efc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002f16:	2300      	movs	r3, #0
 8002f18:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8002f22:	f107 0310 	add.w	r3, r7, #16
 8002f26:	4981      	ldr	r1, [pc, #516]	@ (800312c <HAL_SAI_MspInit+0x310>)
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f004 f831 	bl	8006f90 <HAL_DMAEx_List_BuildNode>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8002f34:	f7ff f86e 	bl	8002014 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8002f38:	4a7c      	ldr	r2, [pc, #496]	@ (800312c <HAL_SAI_MspInit+0x310>)
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	487c      	ldr	r0, [pc, #496]	@ (8003130 <HAL_SAI_MspInit+0x314>)
 8002f3e:	f004 f853 	bl	8006fe8 <HAL_DMAEx_List_InsertNode>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 8002f48:	f7ff f864 	bl	8002014 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 8002f4c:	4878      	ldr	r0, [pc, #480]	@ (8003130 <HAL_SAI_MspInit+0x314>)
 8002f4e:	f004 f914 	bl	800717a <HAL_DMAEx_List_SetCircularMode>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 8002f58:	f7ff f85c 	bl	8002014 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002f5c:	4b75      	ldr	r3, [pc, #468]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002f5e:	4a76      	ldr	r2, [pc, #472]	@ (8003138 <HAL_SAI_MspInit+0x31c>)
 8002f60:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8002f62:	4b74      	ldr	r3, [pc, #464]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002f64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f68:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002f6a:	4b72      	ldr	r3, [pc, #456]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002f70:	4b70      	ldr	r3, [pc, #448]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002f76:	4b6f      	ldr	r3, [pc, #444]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002f7e:	2281      	movs	r2, #129	@ 0x81
 8002f80:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002f82:	486c      	ldr	r0, [pc, #432]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002f84:	f003 fe44 	bl	8006c10 <HAL_DMAEx_List_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 8002f8e:	f7ff f841 	bl	8002014 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 8002f92:	4967      	ldr	r1, [pc, #412]	@ (8003130 <HAL_SAI_MspInit+0x314>)
 8002f94:	4867      	ldr	r0, [pc, #412]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002f96:	f004 f951 	bl	800723c <HAL_DMAEx_List_LinkQ>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 8002fa0:	f7ff f838 	bl	8002014 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a63      	ldr	r2, [pc, #396]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002fa8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002fac:	4a61      	ldr	r2, [pc, #388]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002fb2:	2110      	movs	r1, #16
 8002fb4:	485f      	ldr	r0, [pc, #380]	@ (8003134 <HAL_SAI_MspInit+0x318>)
 8002fb6:	f003 fa39 	bl	800642c <HAL_DMA_ConfigChannelAttributes>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8002fc0:	f7ff f828 	bl	8002014 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5c      	ldr	r2, [pc, #368]	@ (800313c <HAL_SAI_MspInit+0x320>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	f040 80eb 	bne.w	80031a6 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002fd0:	4b52      	ldr	r3, [pc, #328]	@ (800311c <HAL_SAI_MspInit+0x300>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002fd8:	4b51      	ldr	r3, [pc, #324]	@ (8003120 <HAL_SAI_MspInit+0x304>)
 8002fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fde:	4a50      	ldr	r2, [pc, #320]	@ (8003120 <HAL_SAI_MspInit+0x304>)
 8002fe0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fe4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8003120 <HAL_SAI_MspInit+0x304>)
 8002fea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002ff6:	4b49      	ldr	r3, [pc, #292]	@ (800311c <HAL_SAI_MspInit+0x300>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	4a47      	ldr	r2, [pc, #284]	@ (800311c <HAL_SAI_MspInit+0x300>)
 8002ffe:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003000:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003004:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	2300      	movs	r3, #0
 800300e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003012:	2303      	movs	r3, #3
 8003014:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003018:	230d      	movs	r3, #13
 800301a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003022:	4619      	mov	r1, r3
 8003024:	4846      	ldr	r0, [pc, #280]	@ (8003140 <HAL_SAI_MspInit+0x324>)
 8003026:	f004 fed5 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800302a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800302e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303c:	2303      	movs	r3, #3
 800303e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003042:	230d      	movs	r3, #13
 8003044:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003048:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800304c:	4619      	mov	r1, r3
 800304e:	483d      	ldr	r0, [pc, #244]	@ (8003144 <HAL_SAI_MspInit+0x328>)
 8003050:	f004 fec0 	bl	8007dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003054:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003058:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800306c:	230d      	movs	r3, #13
 800306e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003072:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003076:	4619      	mov	r1, r3
 8003078:	4832      	ldr	r0, [pc, #200]	@ (8003144 <HAL_SAI_MspInit+0x328>)
 800307a:	f004 feab 	bl	8007dd4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800307e:	2321      	movs	r3, #33	@ 0x21
 8003080:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8003082:	2327      	movs	r3, #39	@ 0x27
 8003084:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8003092:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8003098:	2302      	movs	r3, #2
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800309c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80030a6:	2301      	movs	r3, #1
 80030a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80030ae:	2300      	movs	r3, #0
 80030b0:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80030b6:	2300      	movs	r3, #0
 80030b8:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80030be:	2300      	movs	r3, #0
 80030c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	4920      	ldr	r1, [pc, #128]	@ (8003148 <HAL_SAI_MspInit+0x32c>)
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 ff61 	bl	8006f90 <HAL_DMAEx_List_BuildNode>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 80030d4:	f7fe ff9e 	bl	8002014 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80030d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003148 <HAL_SAI_MspInit+0x32c>)
 80030da:	2100      	movs	r1, #0
 80030dc:	481b      	ldr	r0, [pc, #108]	@ (800314c <HAL_SAI_MspInit+0x330>)
 80030de:	f003 ff83 	bl	8006fe8 <HAL_DMAEx_List_InsertNode>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 80030e8:	f7fe ff94 	bl	8002014 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80030ec:	4817      	ldr	r0, [pc, #92]	@ (800314c <HAL_SAI_MspInit+0x330>)
 80030ee:	f004 f844 	bl	800717a <HAL_DMAEx_List_SetCircularMode>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 80030f8:	f7fe ff8c 	bl	8002014 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80030fc:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <HAL_SAI_MspInit+0x334>)
 80030fe:	4a15      	ldr	r2, [pc, #84]	@ (8003154 <HAL_SAI_MspInit+0x338>)
 8003100:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8003102:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <HAL_SAI_MspInit+0x334>)
 8003104:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003108:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800310a:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <HAL_SAI_MspInit+0x334>)
 800310c:	2200      	movs	r2, #0
 800310e:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8003110:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <HAL_SAI_MspInit+0x334>)
 8003112:	2200      	movs	r2, #0
 8003114:	641a      	str	r2, [r3, #64]	@ 0x40
 8003116:	e01f      	b.n	8003158 <HAL_SAI_MspInit+0x33c>
 8003118:	40015804 	.word	0x40015804
 800311c:	200378fc 	.word	0x200378fc
 8003120:	46020c00 	.word	0x46020c00
 8003124:	42020400 	.word	0x42020400
 8003128:	42021800 	.word	0x42021800
 800312c:	2000060c 	.word	0x2000060c
 8003130:	20000630 	.word	0x20000630
 8003134:	20000648 	.word	0x20000648
 8003138:	400201d0 	.word	0x400201d0
 800313c:	40015824 	.word	0x40015824
 8003140:	42020000 	.word	0x42020000
 8003144:	42020800 	.word	0x42020800
 8003148:	200006c0 	.word	0x200006c0
 800314c:	200006e4 	.word	0x200006e4
 8003150:	200006fc 	.word	0x200006fc
 8003154:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003158:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <HAL_SAI_MspInit+0x394>)
 800315a:	2200      	movs	r2, #0
 800315c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800315e:	4b14      	ldr	r3, [pc, #80]	@ (80031b0 <HAL_SAI_MspInit+0x394>)
 8003160:	2281      	movs	r2, #129	@ 0x81
 8003162:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8003164:	4812      	ldr	r0, [pc, #72]	@ (80031b0 <HAL_SAI_MspInit+0x394>)
 8003166:	f003 fd53 	bl	8006c10 <HAL_DMAEx_List_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 8003170:	f7fe ff50 	bl	8002014 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8003174:	490f      	ldr	r1, [pc, #60]	@ (80031b4 <HAL_SAI_MspInit+0x398>)
 8003176:	480e      	ldr	r0, [pc, #56]	@ (80031b0 <HAL_SAI_MspInit+0x394>)
 8003178:	f004 f860 	bl	800723c <HAL_DMAEx_List_LinkQ>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 8003182:	f7fe ff47 	bl	8002014 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a09      	ldr	r2, [pc, #36]	@ (80031b0 <HAL_SAI_MspInit+0x394>)
 800318a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800318e:	4a08      	ldr	r2, [pc, #32]	@ (80031b0 <HAL_SAI_MspInit+0x394>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003194:	2110      	movs	r1, #16
 8003196:	4806      	ldr	r0, [pc, #24]	@ (80031b0 <HAL_SAI_MspInit+0x394>)
 8003198:	f003 f948 	bl	800642c <HAL_DMA_ConfigChannelAttributes>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 80031a2:	f7fe ff37 	bl	8002014 <Error_Handler>
    }

    }
}
 80031a6:	bf00      	nop
 80031a8:	3790      	adds	r7, #144	@ 0x90
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	200006fc 	.word	0x200006fc
 80031b4:	200006e4 	.word	0x200006e4

080031b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <NMI_Handler+0x4>

080031c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <HardFault_Handler+0x4>

080031c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <MemManage_Handler+0x4>

080031d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <BusFault_Handler+0x4>

080031d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <UsageFault_Handler+0x4>

080031e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800320e:	f000 f979 	bl	8003504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}

08003216 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 800321a:	2002      	movs	r0, #2
 800321c:	f004 ffe4 	bl	80081e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}

08003224 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8003228:	2010      	movs	r0, #16
 800322a:	f004 ffdd 	bl	80081e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}

08003232 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8003236:	2020      	movs	r0, #32
 8003238:	f004 ffd6 	bl	80081e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}

08003240 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003244:	4802      	ldr	r0, [pc, #8]	@ (8003250 <GPDMA1_Channel0_IRQHandler+0x10>)
 8003246:	f002 ff82 	bl	800614e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200001a4 	.word	0x200001a4

08003254 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8003258:	4802      	ldr	r0, [pc, #8]	@ (8003264 <GPDMA1_Channel1_IRQHandler+0x10>)
 800325a:	f002 ff78 	bl	800614e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200006fc 	.word	0x200006fc

08003268 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 800326c:	4802      	ldr	r0, [pc, #8]	@ (8003278 <GPDMA1_Channel2_IRQHandler+0x10>)
 800326e:	f002 ff6e 	bl	800614e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	2000021c 	.word	0x2000021c

0800327c <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8003280:	4802      	ldr	r0, [pc, #8]	@ (800328c <GPDMA1_Channel3_IRQHandler+0x10>)
 8003282:	f002 ff64 	bl	800614e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000648 	.word	0x20000648

08003290 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003294:	4802      	ldr	r0, [pc, #8]	@ (80032a0 <ADC1_2_IRQHandler+0x10>)
 8003296:	f001 f925 	bl	80044e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000050 	.word	0x20000050

080032a4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80032a8:	4802      	ldr	r0, [pc, #8]	@ (80032b4 <I2C2_EV_IRQHandler+0x10>)
 80032aa:	f005 f969 	bl	8008580 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200003b0 	.word	0x200003b0

080032b8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80032bc:	4802      	ldr	r0, [pc, #8]	@ (80032c8 <I2C2_ER_IRQHandler+0x10>)
 80032be:	f005 f979 	bl	80085b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200003b0 	.word	0x200003b0

080032cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032d0:	4802      	ldr	r0, [pc, #8]	@ (80032dc <USART1_IRQHandler+0x10>)
 80032d2:	f00d fc05 	bl	8010ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	2000080c 	.word	0x2000080c

080032e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80032e4:	4802      	ldr	r0, [pc, #8]	@ (80032f0 <LTDC_IRQHandler+0x10>)
 80032e6:	f006 fae7 	bl	80098b8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000404 	.word	0x20000404

080032f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032f8:	4b18      	ldr	r3, [pc, #96]	@ (800335c <SystemInit+0x68>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fe:	4a17      	ldr	r2, [pc, #92]	@ (800335c <SystemInit+0x68>)
 8003300:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003304:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003308:	4b15      	ldr	r3, [pc, #84]	@ (8003360 <SystemInit+0x6c>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800330e:	4b14      	ldr	r3, [pc, #80]	@ (8003360 <SystemInit+0x6c>)
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003314:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <SystemInit+0x6c>)
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800331a:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <SystemInit+0x6c>)
 800331c:	2200      	movs	r2, #0
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003320:	4b0f      	ldr	r3, [pc, #60]	@ (8003360 <SystemInit+0x6c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0e      	ldr	r2, [pc, #56]	@ (8003360 <SystemInit+0x6c>)
 8003326:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800332a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800332e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003330:	4b0b      	ldr	r3, [pc, #44]	@ (8003360 <SystemInit+0x6c>)
 8003332:	2200      	movs	r2, #0
 8003334:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <SystemInit+0x6c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a09      	ldr	r2, [pc, #36]	@ (8003360 <SystemInit+0x6c>)
 800333c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003340:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003342:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <SystemInit+0x6c>)
 8003344:	2200      	movs	r2, #0
 8003346:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003348:	4b04      	ldr	r3, [pc, #16]	@ (800335c <SystemInit+0x68>)
 800334a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800334e:	609a      	str	r2, [r3, #8]
  #endif
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000ed00 	.word	0xe000ed00
 8003360:	46020c00 	.word	0x46020c00

08003364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003364:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800339c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003368:	f7ff ffc4 	bl	80032f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800336c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800336e:	e003      	b.n	8003378 <LoopCopyDataInit>

08003370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003376:	3104      	adds	r1, #4

08003378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003378:	480a      	ldr	r0, [pc, #40]	@ (80033a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800337a:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800337c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800337e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003380:	d3f6      	bcc.n	8003370 <CopyDataInit>
	ldr	r2, =_sbss
 8003382:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8003384:	e002      	b.n	800338c <LoopFillZerobss>

08003386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003388:	f842 3b04 	str.w	r3, [r2], #4

0800338c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800338c:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <LoopForever+0x16>)
	cmp	r2, r3
 800338e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003390:	d3f9      	bcc.n	8003386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003392:	f00f f867 	bl	8012464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003396:	f7fd fa13 	bl	80007c0 <main>

0800339a <LoopForever>:

LoopForever:
    b LoopForever
 800339a:	e7fe      	b.n	800339a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800339c:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80033a0:	080125d4 	.word	0x080125d4
	ldr	r0, =_sdata
 80033a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80033a8:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 80033ac:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 80033b0:	20037904 	.word	0x20037904

080033b4 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033b4:	e7fe      	b.n	80033b4 <ADC4_IRQHandler>
	...

080033b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033bc:	4b12      	ldr	r3, [pc, #72]	@ (8003408 <HAL_Init+0x50>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a11      	ldr	r2, [pc, #68]	@ (8003408 <HAL_Init+0x50>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c8:	2003      	movs	r0, #3
 80033ca:	f002 fba8 	bl	8005b1e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80033ce:	f008 f81f 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <HAL_Init+0x54>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	490c      	ldr	r1, [pc, #48]	@ (8003410 <HAL_Init+0x58>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003414 <HAL_Init+0x5c>)
 80033e6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80033e8:	2004      	movs	r0, #4
 80033ea:	f002 fbed 	bl	8005bc8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033ee:	200f      	movs	r0, #15
 80033f0:	f000 f812 	bl	8003418 <HAL_InitTick>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e002      	b.n	8003404 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80033fe:	f7fe fe0f 	bl	8002020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40022000 	.word	0x40022000
 800340c:	46020c00 	.word	0x46020c00
 8003410:	080124c4 	.word	0x080124c4
 8003414:	20000028 	.word	0x20000028

08003418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003424:	4b33      	ldr	r3, [pc, #204]	@ (80034f4 <HAL_InitTick+0xdc>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e05c      	b.n	80034ea <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003430:	4b31      	ldr	r3, [pc, #196]	@ (80034f8 <HAL_InitTick+0xe0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b04      	cmp	r3, #4
 800343a:	d10c      	bne.n	8003456 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800343c:	4b2f      	ldr	r3, [pc, #188]	@ (80034fc <HAL_InitTick+0xe4>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b2c      	ldr	r3, [pc, #176]	@ (80034f4 <HAL_InitTick+0xdc>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	4619      	mov	r1, r3
 8003446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800344a:	fbb3 f3f1 	udiv	r3, r3, r1
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e037      	b.n	80034c6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003456:	f002 fc0f 	bl	8005c78 <HAL_SYSTICK_GetCLKSourceConfig>
 800345a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d023      	beq.n	80034aa <HAL_InitTick+0x92>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d82d      	bhi.n	80034c4 <HAL_InitTick+0xac>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_InitTick+0x5e>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d00d      	beq.n	8003490 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003474:	e026      	b.n	80034c4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003476:	4b21      	ldr	r3, [pc, #132]	@ (80034fc <HAL_InitTick+0xe4>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b1e      	ldr	r3, [pc, #120]	@ (80034f4 <HAL_InitTick+0xdc>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	4619      	mov	r1, r3
 8003480:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003484:	fbb3 f3f1 	udiv	r3, r3, r1
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	60fb      	str	r3, [r7, #12]
        break;
 800348e:	e01a      	b.n	80034c6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003490:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <HAL_InitTick+0xdc>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800349a:	fbb3 f3f2 	udiv	r3, r3, r2
 800349e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	60fb      	str	r3, [r7, #12]
        break;
 80034a8:	e00d      	b.n	80034c6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80034aa:	4b12      	ldr	r3, [pc, #72]	@ (80034f4 <HAL_InitTick+0xdc>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80034b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	60fb      	str	r3, [r7, #12]
        break;
 80034c2:	e000      	b.n	80034c6 <HAL_InitTick+0xae>
        break;
 80034c4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f002 fb5c 	bl	8005b84 <HAL_SYSTICK_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e009      	b.n	80034ea <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034d6:	2200      	movs	r2, #0
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	f04f 30ff 	mov.w	r0, #4294967295
 80034de:	f002 fb29 	bl	8005b34 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80034e2:	4a07      	ldr	r2, [pc, #28]	@ (8003500 <HAL_InitTick+0xe8>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000030 	.word	0x20000030
 80034f8:	e000e010 	.word	0xe000e010
 80034fc:	20000028 	.word	0x20000028
 8003500:	2000002c 	.word	0x2000002c

08003504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003508:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_IncTick+0x20>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_IncTick+0x24>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4413      	add	r3, r2
 8003514:	4a04      	ldr	r2, [pc, #16]	@ (8003528 <HAL_IncTick+0x24>)
 8003516:	6013      	str	r3, [r2, #0]
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000030 	.word	0x20000030
 8003528:	20037900 	.word	0x20037900

0800352c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return uwTick;
 8003530:	4b03      	ldr	r3, [pc, #12]	@ (8003540 <HAL_GetTick+0x14>)
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20037900 	.word	0x20037900

08003544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800354c:	f7ff ffee 	bl	800352c <HAL_GetTick>
 8003550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d005      	beq.n	800356a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800355e:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <HAL_Delay+0x44>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800356a:	bf00      	nop
 800356c:	f7ff ffde 	bl	800352c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	429a      	cmp	r2, r3
 800357a:	d8f7      	bhi.n	800356c <HAL_Delay+0x28>
  {
  }
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000030 	.word	0x20000030

0800358c <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8003594:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8003596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003598:	f023 0201 	bic.w	r2, r3, #1
 800359c:	4904      	ldr	r1, [pc, #16]	@ (80035b0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	46000400 	.word	0x46000400

080035b4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80035be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c0:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80035c4:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	46000400 	.word	0x46000400

080035dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	609a      	str	r2, [r3, #8]
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <LL_ADC_SetResolution+0x3c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d104      	bne.n	8003664 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3b01      	subs	r3, #1
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f023 020c 	bic.w	r2, r3, #12
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	60da      	str	r2, [r3, #12]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	46021000 	.word	0x46021000

08003684 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3360      	adds	r3, #96	@ 0x60
 8003696:	461a      	mov	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	430b      	orrs	r3, r1
 80036b4:	431a      	orrs	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b085      	sub	sp, #20
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3360      	adds	r3, #96	@ 0x60
 80036d4:	461a      	mov	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b087      	sub	sp, #28
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3360      	adds	r3, #96	@ 0x60
 8003702:	461a      	mov	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	431a      	orrs	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3360      	adds	r3, #96	@ 0x60
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	431a      	orrs	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	601a      	str	r2, [r3, #0]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800375e:	b480      	push	{r7}
 8003760:	b087      	sub	sp, #28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3360      	adds	r3, #96	@ 0x60
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	431a      	orrs	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	601a      	str	r2, [r3, #0]
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80037a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	2a00      	cmp	r2, #0
 80037be:	d002      	beq.n	80037c6 <LL_ADC_SetGainCompensation+0x32>
 80037c0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80037c4:	e000      	b.n	80037c8 <LL_ADC_SetGainCompensation+0x34>
 80037c6:	2200      	movs	r2, #0
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2107      	movs	r1, #7
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	401a      	ands	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	fa01 f303 	lsl.w	r3, r1, r3
 8003806:	431a      	orrs	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	@ 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a2b      	ldr	r2, [pc, #172]	@ (80038fc <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d020      	beq.n	8003896 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3330      	adds	r3, #48	@ 0x30
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	4413      	add	r3, r2
 8003866:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	211f      	movs	r1, #31
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	401a      	ands	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	0e9b      	lsrs	r3, r3, #26
 8003880:	f003 011f 	and.w	r1, r3, #31
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	431a      	orrs	r2, r3
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003894:	e02b      	b.n	80038ee <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	210f      	movs	r1, #15
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	401a      	ands	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <LL_ADC_REG_SetSequencerRanks+0x7e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0e9b      	lsrs	r3, r3, #26
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	e010      	b.n	80038e0 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	613b      	str	r3, [r7, #16]
  return result;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80038d4:	2320      	movs	r3, #32
 80038d6:	e003      	b.n	80038e0 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	f001 011f 	and.w	r1, r1, #31
 80038e6:	408b      	lsls	r3, r1
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038ee:	bf00      	nop
 80038f0:	3724      	adds	r7, #36	@ 0x24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	46021000 	.word	0x46021000

08003900 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	0e9b      	lsrs	r3, r3, #26
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	2201      	movs	r2, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	e015      	b.n	8003950 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	60fb      	str	r3, [r7, #12]
  return result;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800393a:	2320      	movs	r3, #32
 800393c:	e003      	b.n	8003946 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	2201      	movs	r2, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	0e9b      	lsrs	r3, r3, #26
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	401a      	ands	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0303 	and.w	r3, r3, #3
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039d8:	b480      	push	{r7}
 80039da:	b08b      	sub	sp, #44	@ 0x2c
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a2d      	ldr	r2, [pc, #180]	@ (8003a9c <LL_ADC_SetChannelSamplingTime+0xc4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d042      	beq.n	8003a72 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <LL_ADC_SetChannelSamplingTime+0x28>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	0e9b      	lsrs	r3, r3, #26
 80039fa:	f003 021f 	and.w	r2, r3, #31
 80039fe:	e011      	b.n	8003a24 <LL_ADC_SetChannelSamplingTime+0x4c>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	617b      	str	r3, [r7, #20]
  return result;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003a16:	2320      	movs	r3, #32
 8003a18:	e003      	b.n	8003a22 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	0e5b      	lsrs	r3, r3, #25
 8003a28:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	1ad2      	subs	r2, r2, r3
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3314      	adds	r3, #20
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	0e5b      	lsrs	r3, r3, #25
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	4413      	add	r3, r2
 8003a50:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	2107      	movs	r1, #7
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	401a      	ands	r2, r3
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003a70:	e00e      	b.n	8003a90 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0219      	lsls	r1, r3, #8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	400b      	ands	r3, r1
 8003a86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	615a      	str	r2, [r3, #20]
}
 8003a90:	bf00      	nop
 8003a92:	372c      	adds	r7, #44	@ 0x2c
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	46021000 	.word	0x46021000

08003aa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	401a      	ands	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f003 0318 	and.w	r3, r3, #24
 8003ac2:	4908      	ldr	r1, [pc, #32]	@ (8003ae4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ac4:	40d9      	lsrs	r1, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	400b      	ands	r3, r1
 8003aca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	000fffff 	.word	0x000fffff

08003ae8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 031f 	and.w	r3, r3, #31
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6093      	str	r3, [r2, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b58:	d101      	bne.n	8003b5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ba8:	d101      	bne.n	8003bae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <LL_ADC_IsEnabled+0x18>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <LL_ADC_IsEnabled+0x1a>
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c1a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	609a      	str	r2, [r3, #8]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d101      	bne.n	8003c4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d101      	bne.n	8003c70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b08b      	sub	sp, #44	@ 0x2c
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e2ce      	b.n	800423e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a95      	ldr	r2, [pc, #596]	@ (8003f04 <HAL_ADC_Init+0x284>)
 8003cae:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fe f9cb 	bl	8002054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff37 	bl	8003b44 <LL_ADC_IsDeepPowerDownEnabled>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff1d 	bl	8003b20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ff52 	bl	8003b94 <LL_ADC_IsInternalRegulatorEnabled>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d115      	bne.n	8003d22 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ff36 	bl	8003b6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d00:	4b81      	ldr	r3, [pc, #516]	@ (8003f08 <HAL_ADC_Init+0x288>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	4a81      	ldr	r2, [pc, #516]	@ (8003f0c <HAL_ADC_Init+0x28c>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d14:	e002      	b.n	8003d1c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f9      	bne.n	8003d16 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ff34 	bl	8003b94 <LL_ADC_IsInternalRegulatorEnabled>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10e      	bne.n	8003d50 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d36:	f043 0210 	orr.w	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff6c 	bl	8003c32 <LL_ADC_REG_IsConversionOngoing>
 8003d5a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f040 825f 	bne.w	8004228 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f040 825b 	bne.w	8004228 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d76:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff ff2c 	bl	8003be4 <LL_ADC_IsEnabled>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d14f      	bne.n	8003e32 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5b      	ldr	r2, [pc, #364]	@ (8003f04 <HAL_ADC_Init+0x284>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d037      	beq.n	8003e0c <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a5b      	ldr	r2, [pc, #364]	@ (8003f10 <HAL_ADC_Init+0x290>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_ADC_Init+0x130>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a5a      	ldr	r2, [pc, #360]	@ (8003f14 <HAL_ADC_Init+0x294>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d10e      	bne.n	8003dce <HAL_ADC_Init+0x14e>
 8003db0:	4857      	ldr	r0, [pc, #348]	@ (8003f10 <HAL_ADC_Init+0x290>)
 8003db2:	f7ff ff17 	bl	8003be4 <LL_ADC_IsEnabled>
 8003db6:	4604      	mov	r4, r0
 8003db8:	4856      	ldr	r0, [pc, #344]	@ (8003f14 <HAL_ADC_Init+0x294>)
 8003dba:	f7ff ff13 	bl	8003be4 <LL_ADC_IsEnabled>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4323      	orrs	r3, r4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	e008      	b.n	8003de0 <HAL_ADC_Init+0x160>
 8003dce:	484d      	ldr	r0, [pc, #308]	@ (8003f04 <HAL_ADC_Init+0x284>)
 8003dd0:	f7ff ff08 	bl	8003be4 <LL_ADC_IsEnabled>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d026      	beq.n	8003e32 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a49      	ldr	r2, [pc, #292]	@ (8003f10 <HAL_ADC_Init+0x290>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_ADC_Init+0x178>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a48      	ldr	r2, [pc, #288]	@ (8003f14 <HAL_ADC_Init+0x294>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_Init+0x17c>
 8003df8:	4a47      	ldr	r2, [pc, #284]	@ (8003f18 <HAL_ADC_Init+0x298>)
 8003dfa:	e000      	b.n	8003dfe <HAL_ADC_Init+0x17e>
 8003dfc:	4a47      	ldr	r2, [pc, #284]	@ (8003f1c <HAL_ADC_Init+0x29c>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f7ff fbe9 	bl	80035dc <LL_ADC_SetCommonClock>
 8003e0a:	e012      	b.n	8003e32 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f7ff fc14 	bl	8003644 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f1c <HAL_ADC_Init+0x29c>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003e2c:	493b      	ldr	r1, [pc, #236]	@ (8003f1c <HAL_ADC_Init+0x29c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a33      	ldr	r2, [pc, #204]	@ (8003f04 <HAL_ADC_Init+0x284>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d010      	beq.n	8003e5e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e42:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e48:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003e4e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003e56:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	e035      	b.n	8003eca <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7f1b      	ldrb	r3, [r3, #28]
 8003e62:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e6a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e6c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003e72:	2a00      	cmp	r2, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_ADC_Init+0x1fc>
 8003e76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e7a:	e000      	b.n	8003e7e <HAL_ADC_Init+0x1fe>
 8003e7c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e7e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003e84:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	da04      	bge.n	8003e98 <HAL_ADC_Init+0x218>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e96:	e001      	b.n	8003e9c <HAL_ADC_Init+0x21c>
 8003e98:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003e9c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	491b      	ldr	r1, [pc, #108]	@ (8003f10 <HAL_ADC_Init+0x290>)
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	d004      	beq.n	8003eb2 <HAL_ADC_Init+0x232>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4919      	ldr	r1, [pc, #100]	@ (8003f14 <HAL_ADC_Init+0x294>)
 8003eae:	428b      	cmp	r3, r1
 8003eb0:	d103      	bne.n	8003eba <HAL_ADC_Init+0x23a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb8:	e003      	b.n	8003ec2 <HAL_ADC_Init+0x242>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003ec2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d131      	bne.n	8003f38 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8003f04 <HAL_ADC_Init+0x284>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	045b      	lsls	r3, r3, #17
 8003ee6:	6a3a      	ldr	r2, [r7, #32]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	623b      	str	r3, [r7, #32]
 8003eec:	e024      	b.n	8003f38 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d113      	bne.n	8003f20 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	e01a      	b.n	8003f38 <HAL_ADC_Init+0x2b8>
 8003f02:	bf00      	nop
 8003f04:	46021000 	.word	0x46021000
 8003f08:	20000028 	.word	0x20000028
 8003f0c:	053e2d63 	.word	0x053e2d63
 8003f10:	42028000 	.word	0x42028000
 8003f14:	42028100 	.word	0x42028100
 8003f18:	42028300 	.word	0x42028300
 8003f1c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f24:	f043 0220 	orr.w	r2, r3, #32
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f30:	f043 0201 	orr.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a75      	ldr	r2, [pc, #468]	@ (8004114 <HAL_ADC_Init+0x494>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f56:	4313      	orrs	r3, r2
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	4b6c      	ldr	r3, [pc, #432]	@ (8004118 <HAL_ADC_Init+0x498>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	6a39      	ldr	r1, [r7, #32]
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	60d3      	str	r3, [r2, #12]
 8003f72:	e031      	b.n	8003fd8 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f80:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	4b61      	ldr	r3, [pc, #388]	@ (800411c <HAL_ADC_Init+0x49c>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	6a39      	ldr	r1, [r7, #32]
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1a      	ldr	r2, [r3, #32]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a4d      	ldr	r2, [pc, #308]	@ (8004114 <HAL_ADC_Init+0x494>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	f000 80a4 	beq.w	800412c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fe22 	bl	8003c32 <LL_ADC_REG_IsConversionOngoing>
 8003fee:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fe2f 	bl	8003c58 <LL_ADC_INJ_IsConversionOngoing>
 8003ffa:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d166      	bne.n	80040d0 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d163      	bne.n	80040d0 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	7f1b      	ldrb	r3, [r3, #28]
 800400c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4943      	ldr	r1, [pc, #268]	@ (8004120 <HAL_ADC_Init+0x4a0>)
 8004014:	428b      	cmp	r3, r1
 8004016:	d004      	beq.n	8004022 <HAL_ADC_Init+0x3a2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4941      	ldr	r1, [pc, #260]	@ (8004124 <HAL_ADC_Init+0x4a4>)
 800401e:	428b      	cmp	r3, r1
 8004020:	d102      	bne.n	8004028 <HAL_ADC_Init+0x3a8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004026:	e002      	b.n	800402e <HAL_ADC_Init+0x3ae>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800402e:	4313      	orrs	r3, r2
 8004030:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800403c:	f023 0303 	bic.w	r3, r3, #3
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	6a39      	ldr	r1, [r7, #32]
 8004046:	430b      	orrs	r3, r1
 8004048:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7ff fb99 	bl	8003794 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004068:	2b01      	cmp	r3, #1
 800406a:	d11e      	bne.n	80040aa <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004070:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	4b2b      	ldr	r3, [pc, #172]	@ (8004128 <HAL_ADC_Init+0x4a8>)
 800407a:	4013      	ands	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004080:	0411      	lsls	r1, r2, #16
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004086:	4311      	orrs	r1, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800408c:	4311      	orrs	r1, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8004092:	4311      	orrs	r1, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004098:	0892      	lsrs	r2, r2, #2
 800409a:	430a      	orrs	r2, r1
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	611a      	str	r2, [r3, #16]
 80040a8:	e007      	b.n	80040ba <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d10c      	bne.n	80040f2 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	f023 010f 	bic.w	r1, r3, #15
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	1e5a      	subs	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80040f0:	e007      	b.n	8004102 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 020f 	bic.w	r2, r2, #15
 8004100:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	f043 0201 	orr.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004112:	e092      	b.n	800423a <HAL_ADC_Init+0x5ba>
 8004114:	46021000 	.word	0x46021000
 8004118:	fff0c013 	.word	0xfff0c013
 800411c:	ffde800d 	.word	0xffde800d
 8004120:	42028000 	.word	0x42028000
 8004124:	42028100 	.word	0x42028100
 8004128:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004132:	2b01      	cmp	r3, #1
 8004134:	d111      	bne.n	800415a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800413e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8004144:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800414a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	4313      	orrs	r3, r2
 8004150:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	4b39      	ldr	r3, [pc, #228]	@ (8004248 <HAL_ADC_Init+0x5c8>)
 8004162:	4013      	ands	r3, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	69f9      	ldr	r1, [r7, #28]
 800416a:	430b      	orrs	r3, r1
 800416c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004176:	461a      	mov	r2, r3
 8004178:	2100      	movs	r1, #0
 800417a:	f7ff fb2e 	bl	80037da <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004186:	461a      	mov	r2, r3
 8004188:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800418c:	f7ff fb25 	bl	80037da <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f062 020f 	orn	r2, r2, #15
 80041a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80041a8:	e018      	b.n	80041dc <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041b2:	d113      	bne.n	80041dc <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041be:	3b01      	subs	r3, #1
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	f003 031c 	and.w	r3, r3, #28
 80041c6:	f06f 020f 	mvn.w	r2, #15
 80041ca:	fa02 f103 	lsl.w	r1, r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	4b1a      	ldr	r3, [pc, #104]	@ (800424c <HAL_ADC_Init+0x5cc>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	6a3a      	ldr	r2, [r7, #32]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d10b      	bne.n	8004204 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	f043 0201 	orr.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004202:	e01a      	b.n	800423a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004208:	f023 0312 	bic.w	r3, r3, #18
 800420c:	f043 0210 	orr.w	r2, r3, #16
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004218:	f043 0201 	orr.w	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004226:	e008      	b.n	800423a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800422c:	f043 0210 	orr.w	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800423a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800423e:	4618      	mov	r0, r3
 8004240:	372c      	adds	r7, #44	@ 0x2c
 8004242:	46bd      	mov	sp, r7
 8004244:	bd90      	pop	{r4, r7, pc}
 8004246:	bf00      	nop
 8004248:	f7fffc02 	.word	0xf7fffc02
 800424c:	833ffff3 	.word	0x833ffff3

08004250 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b0a2      	sub	sp, #136	@ 0x88
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a98      	ldr	r2, [pc, #608]	@ (80044c4 <HAL_ADC_Start_DMA+0x274>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_ADC_Start_DMA+0x20>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a97      	ldr	r2, [pc, #604]	@ (80044c8 <HAL_ADC_Start_DMA+0x278>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <HAL_ADC_Start_DMA+0x24>
 8004270:	4b96      	ldr	r3, [pc, #600]	@ (80044cc <HAL_ADC_Start_DMA+0x27c>)
 8004272:	e000      	b.n	8004276 <HAL_ADC_Start_DMA+0x26>
 8004274:	4b96      	ldr	r3, [pc, #600]	@ (80044d0 <HAL_ADC_Start_DMA+0x280>)
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fc36 	bl	8003ae8 <LL_ADC_GetMultimode>
 800427c:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fcd5 	bl	8003c32 <LL_ADC_REG_IsConversionOngoing>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 8111 	bne.w	80044b2 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_ADC_Start_DMA+0x4e>
 800429a:	2302      	movs	r3, #2
 800429c:	e10e      	b.n	80044bc <HAL_ADC_Start_DMA+0x26c>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d003      	beq.n	80042ba <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042b4:	2b09      	cmp	r3, #9
 80042b6:	f040 80f4 	bne.w	80044a2 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f001 fa2c 	bl	8005718 <ADC_Enable>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042c6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 80e4 	bne.w	8004498 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a7a      	ldr	r2, [pc, #488]	@ (80044d4 <HAL_ADC_Start_DMA+0x284>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d026      	beq.n	800433c <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a75      	ldr	r2, [pc, #468]	@ (80044c8 <HAL_ADC_Start_DMA+0x278>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d002      	beq.n	80042fe <HAL_ADC_Start_DMA+0xae>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	e000      	b.n	8004300 <HAL_ADC_Start_DMA+0xb0>
 80042fe:	4b71      	ldr	r3, [pc, #452]	@ (80044c4 <HAL_ADC_Start_DMA+0x274>)
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	4293      	cmp	r3, r2
 8004306:	d002      	beq.n	800430e <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004308:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004312:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800431e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800432a:	f023 0206 	bic.w	r2, r3, #6
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004332:	e006      	b.n	8004342 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	67da      	str	r2, [r3, #124]	@ 0x7c
 800433a:	e002      	b.n	8004342 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	4a64      	ldr	r2, [pc, #400]	@ (80044d8 <HAL_ADC_Start_DMA+0x288>)
 8004348:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	4a63      	ldr	r2, [pc, #396]	@ (80044dc <HAL_ADC_Start_DMA+0x28c>)
 8004350:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004356:	4a62      	ldr	r2, [pc, #392]	@ (80044e0 <HAL_ADC_Start_DMA+0x290>)
 8004358:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	221c      	movs	r2, #28
 8004360:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0210 	orr.w	r2, r2, #16
 8004378:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a55      	ldr	r2, [pc, #340]	@ (80044d4 <HAL_ADC_Start_DMA+0x284>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d107      	bne.n	8004394 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04f      	beq.n	8004442 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d046      	beq.n	800443a <HAL_ADC_Start_DMA+0x1ea>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d040      	beq.n	800443a <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	f107 0310 	add.w	r3, r7, #16
 80043c4:	4611      	mov	r1, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f002 fdf8 	bl	8006fbc <HAL_DMAEx_List_GetNodeConfig>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e072      	b.n	80044bc <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80043d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d104      	bne.n	80043e6 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043e4:	e00a      	b.n	80043fc <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d104      	bne.n	80043f6 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043f4:	e002      	b.n	80043fc <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004408:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442c:	4618      	mov	r0, r3
 800442e:	f002 fd1b 	bl	8006e68 <HAL_DMAEx_List_Start_IT>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004438:	e028      	b.n	800448c <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004440:	e024      	b.n	800448c <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d104      	bne.n	8004456 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004454:	e00c      	b.n	8004470 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d104      	bne.n	800446a <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004468:	e002      	b.n	8004470 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3340      	adds	r3, #64	@ 0x40
 800447a:	4619      	mov	r1, r3
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004482:	f001 fd5f 	bl	8005f44 <HAL_DMA_Start_IT>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fbba 	bl	8003c0a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004496:	e00f      	b.n	80044b8 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 80044a0:	e00a      	b.n	80044b8 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80044b0:	e002      	b.n	80044b8 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044b2:	2302      	movs	r3, #2
 80044b4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80044b8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3788      	adds	r7, #136	@ 0x88
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	42028000 	.word	0x42028000
 80044c8:	42028100 	.word	0x42028100
 80044cc:	42028300 	.word	0x42028300
 80044d0:	46021300 	.word	0x46021300
 80044d4:	46021000 	.word	0x46021000
 80044d8:	0800584d 	.word	0x0800584d
 80044dc:	08005925 	.word	0x08005925
 80044e0:	08005941 	.word	0x08005941

080044e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	@ 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80044ec:	2300      	movs	r3, #0
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a77      	ldr	r2, [pc, #476]	@ (80046e4 <HAL_ADC_IRQHandler+0x200>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_ADC_IRQHandler+0x30>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a76      	ldr	r2, [pc, #472]	@ (80046e8 <HAL_ADC_IRQHandler+0x204>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d101      	bne.n	8004518 <HAL_ADC_IRQHandler+0x34>
 8004514:	4b75      	ldr	r3, [pc, #468]	@ (80046ec <HAL_ADC_IRQHandler+0x208>)
 8004516:	e000      	b.n	800451a <HAL_ADC_IRQHandler+0x36>
 8004518:	4b75      	ldr	r3, [pc, #468]	@ (80046f0 <HAL_ADC_IRQHandler+0x20c>)
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fae4 	bl	8003ae8 <LL_ADC_GetMultimode>
 8004520:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d017      	beq.n	800455c <HAL_ADC_IRQHandler+0x78>
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d012      	beq.n	800455c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d105      	bne.n	800454e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004546:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 fa2e 	bl	80059b0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2202      	movs	r2, #2
 800455a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <HAL_ADC_IRQHandler+0x8c>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80d1 	beq.w	800471e <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80cb 	beq.w	800471e <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004598:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a53      	ldr	r2, [pc, #332]	@ (80046f4 <HAL_ADC_IRQHandler+0x210>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d06c      	beq.n	8004684 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff f932 	bl	8003818 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80aa 	beq.w	8004710 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a49      	ldr	r2, [pc, #292]	@ (80046e8 <HAL_ADC_IRQHandler+0x204>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d002      	beq.n	80045cc <HAL_ADC_IRQHandler+0xe8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	e000      	b.n	80045ce <HAL_ADC_IRQHandler+0xea>
 80045cc:	4b45      	ldr	r3, [pc, #276]	@ (80046e4 <HAL_ADC_IRQHandler+0x200>)
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d008      	beq.n	80045e8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d002      	beq.n	80045e8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b09      	cmp	r3, #9
 80045e6:	d104      	bne.n	80045f2 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	e00c      	b.n	800460c <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a3c      	ldr	r2, [pc, #240]	@ (80046e8 <HAL_ADC_IRQHandler+0x204>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d002      	beq.n	8004602 <HAL_ADC_IRQHandler+0x11e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	e000      	b.n	8004604 <HAL_ADC_IRQHandler+0x120>
 8004602:	4b38      	ldr	r3, [pc, #224]	@ (80046e4 <HAL_ADC_IRQHandler+0x200>)
 8004604:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d17c      	bne.n	8004710 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b08      	cmp	r3, #8
 8004622:	d175      	bne.n	8004710 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fb02 	bl	8003c32 <LL_ADC_REG_IsConversionOngoing>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d11a      	bne.n	800466a <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 020c 	bic.w	r2, r2, #12
 8004642:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d159      	bne.n	8004710 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004660:	f043 0201 	orr.w	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	679a      	str	r2, [r3, #120]	@ 0x78
 8004668:	e052      	b.n	8004710 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800466e:	f043 0210 	orr.w	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800467a:	f043 0201 	orr.w	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004682:	e045      	b.n	8004710 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff f8c5 	bl	8003818 <LL_ADC_REG_IsTriggerSourceSWStart>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d03d      	beq.n	8004710 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800469a:	2b00      	cmp	r3, #0
 800469c:	d138      	bne.n	8004710 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d131      	bne.n	8004710 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff fabe 	bl	8003c32 <LL_ADC_REG_IsConversionOngoing>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d11d      	bne.n	80046f8 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 020c 	bic.w	r2, r2, #12
 80046ca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	f043 0201 	orr.w	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	679a      	str	r2, [r3, #120]	@ 0x78
 80046e0:	e016      	b.n	8004710 <HAL_ADC_IRQHandler+0x22c>
 80046e2:	bf00      	nop
 80046e4:	42028000 	.word	0x42028000
 80046e8:	42028100 	.word	0x42028100
 80046ec:	42028300 	.word	0x42028300
 80046f0:	46021300 	.word	0x46021300
 80046f4:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f99d 	bl	8004a50 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	220c      	movs	r2, #12
 800471c:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a8c      	ldr	r2, [pc, #560]	@ (8004954 <HAL_ADC_IRQHandler+0x470>)
 8004724:	4293      	cmp	r3, r2
 8004726:	f000 8095 	beq.w	8004854 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <HAL_ADC_IRQHandler+0x25a>
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8085 	beq.w	8004854 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d07f      	beq.n	8004854 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004764:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff f91e 	bl	80039b2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004776:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff f84b 	bl	8003818 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004782:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a73      	ldr	r2, [pc, #460]	@ (8004958 <HAL_ADC_IRQHandler+0x474>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d002      	beq.n	8004794 <HAL_ADC_IRQHandler+0x2b0>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	e000      	b.n	8004796 <HAL_ADC_IRQHandler+0x2b2>
 8004794:	4b71      	ldr	r3, [pc, #452]	@ (800495c <HAL_ADC_IRQHandler+0x478>)
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	4293      	cmp	r3, r2
 800479c:	d008      	beq.n	80047b0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b06      	cmp	r3, #6
 80047a8:	d002      	beq.n	80047b0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b07      	cmp	r3, #7
 80047ae:	d104      	bne.n	80047ba <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	623b      	str	r3, [r7, #32]
 80047b8:	e00c      	b.n	80047d4 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a66      	ldr	r2, [pc, #408]	@ (8004958 <HAL_ADC_IRQHandler+0x474>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d002      	beq.n	80047ca <HAL_ADC_IRQHandler+0x2e6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	e000      	b.n	80047cc <HAL_ADC_IRQHandler+0x2e8>
 80047ca:	4b64      	ldr	r3, [pc, #400]	@ (800495c <HAL_ADC_IRQHandler+0x478>)
 80047cc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d035      	beq.n	8004846 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_ADC_IRQHandler+0x310>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d02d      	beq.n	8004846 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d128      	bne.n	8004846 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fe:	2b40      	cmp	r3, #64	@ 0x40
 8004800:	d121      	bne.n	8004846 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fa26 	bl	8003c58 <LL_ADC_INJ_IsConversionOngoing>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d119      	bne.n	8004846 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004820:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004826:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d105      	bne.n	8004846 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f001 f894 	bl	8005974 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2260      	movs	r2, #96	@ 0x60
 8004852:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d011      	beq.n	8004882 <HAL_ADC_IRQHandler+0x39e>
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00c      	beq.n	8004882 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800486c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f8ff 	bl	8004a78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2280      	movs	r2, #128	@ 0x80
 8004880:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d012      	beq.n	80048b2 <HAL_ADC_IRQHandler+0x3ce>
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800489a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f001 f870 	bl	8005988 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d012      	beq.n	80048e2 <HAL_ADC_IRQHandler+0x3fe>
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00d      	beq.n	80048e2 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f001 f862 	bl	800599c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05d      	beq.n	80049a8 <HAL_ADC_IRQHandler+0x4c4>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d058      	beq.n	80049a8 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d102      	bne.n	8004904 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 80048fe:	2301      	movs	r3, #1
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
 8004902:	e03b      	b.n	800497c <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a12      	ldr	r2, [pc, #72]	@ (8004954 <HAL_ADC_IRQHandler+0x470>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d02c      	beq.n	8004968 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d015      	beq.n	8004940 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a10      	ldr	r2, [pc, #64]	@ (800495c <HAL_ADC_IRQHandler+0x478>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_ADC_IRQHandler+0x444>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a0d      	ldr	r2, [pc, #52]	@ (8004958 <HAL_ADC_IRQHandler+0x474>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d101      	bne.n	800492c <HAL_ADC_IRQHandler+0x448>
 8004928:	4b0d      	ldr	r3, [pc, #52]	@ (8004960 <HAL_ADC_IRQHandler+0x47c>)
 800492a:	e000      	b.n	800492e <HAL_ADC_IRQHandler+0x44a>
 800492c:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <HAL_ADC_IRQHandler+0x480>)
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff f8e8 	bl	8003b04 <LL_ADC_GetMultiDMATransfer>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d020      	beq.n	800497c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800493a:	2301      	movs	r3, #1
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
 800493e:	e01d      	b.n	800497c <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800494e:	2301      	movs	r3, #1
 8004950:	627b      	str	r3, [r7, #36]	@ 0x24
 8004952:	e013      	b.n	800497c <HAL_ADC_IRQHandler+0x498>
 8004954:	46021000 	.word	0x46021000
 8004958:	42028100 	.word	0x42028100
 800495c:	42028000 	.word	0x42028000
 8004960:	42028300 	.word	0x42028300
 8004964:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff f812 	bl	8003996 <LL_ADC_REG_GetDMATransfer>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004978:	2301      	movs	r3, #1
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	2b01      	cmp	r3, #1
 8004980:	d10e      	bne.n	80049a0 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004986:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f876 	bl	8004a8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2210      	movs	r2, #16
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01b      	beq.n	80049ea <HAL_ADC_IRQHandler+0x506>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d016      	beq.n	80049ea <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049cc:	f043 0201 	orr.w	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f877 	bl	8004ac8 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a17      	ldr	r2, [pc, #92]	@ (8004a4c <HAL_ADC_IRQHandler+0x568>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d126      	bne.n	8004a42 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <HAL_ADC_IRQHandler+0x534>
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f849 	bl	8004aa0 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a16:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00f      	beq.n	8004a42 <HAL_ADC_IRQHandler+0x55e>
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f841 	bl	8004ab4 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a40:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004a42:	bf00      	nop
 8004a44:	3728      	adds	r7, #40	@ 0x28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	46021000 	.word	0x46021000

08004a50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b0b7      	sub	sp, #220	@ 0xdc
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4aa8      	ldr	r2, [pc, #672]	@ (8004d98 <HAL_ADC_ConfigChannel+0x2bc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d103      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d102      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x36>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	f000 bdfe 	b.w	800570e <HAL_ADC_ConfigChannel+0xc32>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff f887 	bl	8003c32 <LL_ADC_REG_IsConversionOngoing>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f040 85c1 	bne.w	80056ae <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a99      	ldr	r2, [pc, #612]	@ (8004d98 <HAL_ADC_ConfigChannel+0x2bc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	f000 8409 	beq.w	800534a <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d108      	bne.n	8004b56 <HAL_ADC_ConfigChannel+0x7a>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0e9b      	lsrs	r3, r3, #26
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2201      	movs	r2, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	e01d      	b.n	8004b92 <HAL_ADC_ConfigChannel+0xb6>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b62:	fa93 f3a3 	rbit	r3, r3
 8004b66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004b6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004b72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	e004      	b.n	8004b88 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8004b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b82:	fab3 f383 	clz	r3, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	69d1      	ldr	r1, [r2, #28]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	f7fe fe47 	bl	8003840 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff f83b 	bl	8003c32 <LL_ADC_REG_IsConversionOngoing>
 8004bbc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff f847 	bl	8003c58 <LL_ADC_INJ_IsConversionOngoing>
 8004bca:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f040 81df 	bne.w	8004f96 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 81da 	bne.w	8004f96 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6819      	ldr	r1, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f7fe fef2 	bl	80039d8 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695a      	ldr	r2, [r3, #20]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	089b      	lsrs	r3, r3, #2
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d046      	beq.n	8004ca4 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6919      	ldr	r1, [r3, #16]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c26:	f7fe fd2d 	bl	8003684 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6919      	ldr	r1, [r3, #16]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f7fe fd5b 	bl	80036f2 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	7e9b      	ldrb	r3, [r3, #26]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d11e      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <HAL_ADC_ConfigChannel+0x17e>
 8004c54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c58:	e000      	b.n	8004c5c <HAL_ADC_ConfigChannel+0x180>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f7fe fd7e 	bl	800375e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d102      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x19c>
 8004c72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004c76:	e000      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x19e>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f7fe fd54 	bl	8003728 <LL_ADC_SetOffsetSignedSaturation>
 8004c80:	e189      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f7fe fd66 	bl	800375e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f7fe fd43 	bl	8003728 <LL_ADC_SetOffsetSignedSaturation>
 8004ca2:	e178      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe fd0b 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x1f4>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe fd00 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	0e9b      	lsrs	r3, r3, #26
 8004cca:	f003 021f 	and.w	r2, r3, #31
 8004cce:	e01e      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x232>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fcf5 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004cf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004cfe:	2320      	movs	r3, #32
 8004d00:	e004      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004d02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d06:	fab3 f383 	clz	r3, r3
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d105      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x24a>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	0e9b      	lsrs	r3, r3, #26
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	e018      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x27c>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004d3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004d42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	e004      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d52:	fab3 f383 	clz	r3, r3
 8004d56:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d107      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	2100      	movs	r1, #0
 8004d68:	f7fe fc8c 	bl	8003684 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2101      	movs	r1, #1
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe fca7 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10c      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x2c0>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2101      	movs	r1, #1
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe fc9c 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	0e9b      	lsrs	r3, r3, #26
 8004d92:	f003 021f 	and.w	r2, r3, #31
 8004d96:	e020      	b.n	8004dda <HAL_ADC_ConfigChannel+0x2fe>
 8004d98:	46021000 	.word	0x46021000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2101      	movs	r1, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe fc8f 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004dbe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004dc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8004dca:	2320      	movs	r3, #32
 8004dcc:	e004      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004dce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d105      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x316>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	0e9b      	lsrs	r3, r3, #26
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	e018      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x348>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004e16:	2320      	movs	r3, #32
 8004e18:	e004      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e1e:	fab3 f383 	clz	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d107      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2300      	movs	r3, #0
 8004e32:	2101      	movs	r1, #1
 8004e34:	f7fe fc26 	bl	8003684 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fc41 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x388>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2102      	movs	r1, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe fc36 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	0e9b      	lsrs	r3, r3, #26
 8004e5e:	f003 021f 	and.w	r2, r3, #31
 8004e62:	e01a      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x3be>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2102      	movs	r1, #2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fc2b 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004e70:	4603      	mov	r3, r0
 8004e72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e76:	fa93 f3a3 	rbit	r3, r3
 8004e7a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004e82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004e8a:	2320      	movs	r3, #32
 8004e8c:	e004      	b.n	8004e98 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d105      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x3d6>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	0e9b      	lsrs	r3, r3, #26
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	e011      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x3fa>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eba:	fa93 f3a3 	rbit	r3, r3
 8004ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ec2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004ec4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004eca:	2320      	movs	r3, #32
 8004ecc:	e003      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004ece:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed0:	fab3 f383 	clz	r3, r3
 8004ed4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d107      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	f7fe fbcd 	bl	8003684 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2103      	movs	r1, #3
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe fbe8 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x43a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2103      	movs	r1, #3
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe fbdd 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	0e9b      	lsrs	r3, r3, #26
 8004f10:	f003 021f 	and.w	r2, r3, #31
 8004f14:	e017      	b.n	8004f46 <HAL_ADC_ConfigChannel+0x46a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2103      	movs	r1, #3
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fe fbd2 	bl	80036c6 <LL_ADC_GetOffsetChannel>
 8004f22:	4603      	mov	r3, r0
 8004f24:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f28:	fa93 f3a3 	rbit	r3, r3
 8004f2c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f30:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004f32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004f38:	2320      	movs	r3, #32
 8004f3a:	e003      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004f3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f3e:	fab3 f383 	clz	r3, r3
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x482>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	0e9b      	lsrs	r3, r3, #26
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	e011      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x4a6>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004f70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8004f76:	2320      	movs	r3, #32
 8004f78:	e003      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8004f7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f7c:	fab3 f383 	clz	r3, r3
 8004f80:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d107      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2103      	movs	r1, #3
 8004f92:	f7fe fb77 	bl	8003684 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe fe22 	bl	8003be4 <LL_ADC_IsEnabled>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f040 83ad 	bne.w	8005702 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f7fe fd73 	bl	8003aa0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fc2:	f040 80d6 	bne.w	8005172 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10b      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x50e>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	0e9b      	lsrs	r3, r3, #26
 8004fd8:	3301      	adds	r3, #1
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2b09      	cmp	r3, #9
 8004fe0:	bf94      	ite	ls
 8004fe2:	2301      	movls	r3, #1
 8004fe4:	2300      	movhi	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	e019      	b.n	800501e <HAL_ADC_ConfigChannel+0x542>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ff2:	fa93 f3a3 	rbit	r3, r3
 8004ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ffa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004ffc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005002:	2320      	movs	r3, #32
 8005004:	e003      	b.n	800500e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005008:	fab3 f383 	clz	r3, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	3301      	adds	r3, #1
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2b09      	cmp	r3, #9
 8005016:	bf94      	ite	ls
 8005018:	2301      	movls	r3, #1
 800501a:	2300      	movhi	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d04d      	beq.n	80050be <HAL_ADC_ConfigChannel+0x5e2>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d107      	bne.n	800503e <HAL_ADC_ConfigChannel+0x562>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	0e9b      	lsrs	r3, r3, #26
 8005034:	3301      	adds	r3, #1
 8005036:	069b      	lsls	r3, r3, #26
 8005038:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800503c:	e015      	b.n	800506a <HAL_ADC_ConfigChannel+0x58e>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005046:	fa93 f3a3 	rbit	r3, r3
 800504a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800504c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800504e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005056:	2320      	movs	r3, #32
 8005058:	e003      	b.n	8005062 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800505a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505c:	fab3 f383 	clz	r3, r3
 8005060:	b2db      	uxtb	r3, r3
 8005062:	3301      	adds	r3, #1
 8005064:	069b      	lsls	r3, r3, #26
 8005066:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_ADC_ConfigChannel+0x5ae>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	0e9b      	lsrs	r3, r3, #26
 800507c:	3301      	adds	r3, #1
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	2101      	movs	r1, #1
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	e017      	b.n	80050ba <HAL_ADC_ConfigChannel+0x5de>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800509c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80050a2:	2320      	movs	r3, #32
 80050a4:	e003      	b.n	80050ae <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	fab3 f383 	clz	r3, r3
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	3301      	adds	r3, #1
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	4313      	orrs	r3, r2
 80050bc:	e04e      	b.n	800515c <HAL_ADC_ConfigChannel+0x680>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d107      	bne.n	80050da <HAL_ADC_ConfigChannel+0x5fe>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	0e9b      	lsrs	r3, r3, #26
 80050d0:	3301      	adds	r3, #1
 80050d2:	069b      	lsls	r3, r3, #26
 80050d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050d8:	e015      	b.n	8005106 <HAL_ADC_ConfigChannel+0x62a>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	fa93 f3a3 	rbit	r3, r3
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80050ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80050f2:	2320      	movs	r3, #32
 80050f4:	e003      	b.n	80050fe <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80050f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f8:	fab3 f383 	clz	r3, r3
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	3301      	adds	r3, #1
 8005100:	069b      	lsls	r3, r3, #26
 8005102:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_ADC_ConfigChannel+0x64a>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	0e9b      	lsrs	r3, r3, #26
 8005118:	3301      	adds	r3, #1
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2101      	movs	r1, #1
 8005120:	fa01 f303 	lsl.w	r3, r1, r3
 8005124:	e017      	b.n	8005156 <HAL_ADC_ConfigChannel+0x67a>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	fa93 f3a3 	rbit	r3, r3
 8005132:	61bb      	str	r3, [r7, #24]
  return result;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 800513e:	2320      	movs	r3, #32
 8005140:	e003      	b.n	800514a <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	fab3 f383 	clz	r3, r3
 8005148:	b2db      	uxtb	r3, r3
 800514a:	3301      	adds	r3, #1
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	2101      	movs	r1, #1
 8005152:	fa01 f303 	lsl.w	r3, r1, r3
 8005156:	4313      	orrs	r3, r2
 8005158:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800515c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	461a      	mov	r2, r3
 800516a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800516e:	f7fe fc33 	bl	80039d8 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f280 82c3 	bge.w	8005702 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a92      	ldr	r2, [pc, #584]	@ (80053cc <HAL_ADC_ConfigChannel+0x8f0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d004      	beq.n	8005190 <HAL_ADC_ConfigChannel+0x6b4>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a91      	ldr	r2, [pc, #580]	@ (80053d0 <HAL_ADC_ConfigChannel+0x8f4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d101      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x6b8>
 8005190:	4b90      	ldr	r3, [pc, #576]	@ (80053d4 <HAL_ADC_ConfigChannel+0x8f8>)
 8005192:	e000      	b.n	8005196 <HAL_ADC_ConfigChannel+0x6ba>
 8005194:	4b90      	ldr	r3, [pc, #576]	@ (80053d8 <HAL_ADC_ConfigChannel+0x8fc>)
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe fa46 	bl	8003628 <LL_ADC_GetCommonPathInternalCh>
 800519c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a89      	ldr	r2, [pc, #548]	@ (80053cc <HAL_ADC_ConfigChannel+0x8f0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_ADC_ConfigChannel+0x6d8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a88      	ldr	r2, [pc, #544]	@ (80053d0 <HAL_ADC_ConfigChannel+0x8f4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10e      	bne.n	80051d2 <HAL_ADC_ConfigChannel+0x6f6>
 80051b4:	4885      	ldr	r0, [pc, #532]	@ (80053cc <HAL_ADC_ConfigChannel+0x8f0>)
 80051b6:	f7fe fd15 	bl	8003be4 <LL_ADC_IsEnabled>
 80051ba:	4604      	mov	r4, r0
 80051bc:	4884      	ldr	r0, [pc, #528]	@ (80053d0 <HAL_ADC_ConfigChannel+0x8f4>)
 80051be:	f7fe fd11 	bl	8003be4 <LL_ADC_IsEnabled>
 80051c2:	4603      	mov	r3, r0
 80051c4:	4323      	orrs	r3, r4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bf0c      	ite	eq
 80051ca:	2301      	moveq	r3, #1
 80051cc:	2300      	movne	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	e008      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x708>
 80051d2:	4882      	ldr	r0, [pc, #520]	@ (80053dc <HAL_ADC_ConfigChannel+0x900>)
 80051d4:	f7fe fd06 	bl	8003be4 <LL_ADC_IsEnabled>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80a6 	beq.w	8005336 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a7c      	ldr	r2, [pc, #496]	@ (80053e0 <HAL_ADC_ConfigChannel+0x904>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d13c      	bne.n	800526e <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d136      	bne.n	800526e <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a71      	ldr	r2, [pc, #452]	@ (80053cc <HAL_ADC_ConfigChannel+0x8f0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00a      	beq.n	8005220 <HAL_ADC_ConfigChannel+0x744>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a70      	ldr	r2, [pc, #448]	@ (80053d0 <HAL_ADC_ConfigChannel+0x8f4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d005      	beq.n	8005220 <HAL_ADC_ConfigChannel+0x744>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a70      	ldr	r2, [pc, #448]	@ (80053dc <HAL_ADC_ConfigChannel+0x900>)
 800521a:	4293      	cmp	r3, r2
 800521c:	f040 826e 	bne.w	80056fc <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a69      	ldr	r2, [pc, #420]	@ (80053cc <HAL_ADC_ConfigChannel+0x8f0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_ADC_ConfigChannel+0x758>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a68      	ldr	r2, [pc, #416]	@ (80053d0 <HAL_ADC_ConfigChannel+0x8f4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_ADC_ConfigChannel+0x75c>
 8005234:	4a67      	ldr	r2, [pc, #412]	@ (80053d4 <HAL_ADC_ConfigChannel+0x8f8>)
 8005236:	e000      	b.n	800523a <HAL_ADC_ConfigChannel+0x75e>
 8005238:	4a67      	ldr	r2, [pc, #412]	@ (80053d8 <HAL_ADC_ConfigChannel+0x8fc>)
 800523a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800523e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f7fe f9dc 	bl	8003602 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800524a:	4b66      	ldr	r3, [pc, #408]	@ (80053e4 <HAL_ADC_ConfigChannel+0x908>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	099b      	lsrs	r3, r3, #6
 8005250:	4a65      	ldr	r2, [pc, #404]	@ (80053e8 <HAL_ADC_ConfigChannel+0x90c>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	3301      	adds	r3, #1
 800525a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800525c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800525e:	e002      	b.n	8005266 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	3b01      	subs	r3, #1
 8005264:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f9      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800526c:	e246      	b.n	80056fc <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a5e      	ldr	r2, [pc, #376]	@ (80053ec <HAL_ADC_ConfigChannel+0x910>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d12b      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800527c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8005280:	2b00      	cmp	r3, #0
 8005282:	d125      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a50      	ldr	r2, [pc, #320]	@ (80053cc <HAL_ADC_ConfigChannel+0x8f0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00a      	beq.n	80052a4 <HAL_ADC_ConfigChannel+0x7c8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a4f      	ldr	r2, [pc, #316]	@ (80053d0 <HAL_ADC_ConfigChannel+0x8f4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d005      	beq.n	80052a4 <HAL_ADC_ConfigChannel+0x7c8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a4f      	ldr	r2, [pc, #316]	@ (80053dc <HAL_ADC_ConfigChannel+0x900>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	f040 822e 	bne.w	8005700 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a48      	ldr	r2, [pc, #288]	@ (80053cc <HAL_ADC_ConfigChannel+0x8f0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d004      	beq.n	80052b8 <HAL_ADC_ConfigChannel+0x7dc>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a47      	ldr	r2, [pc, #284]	@ (80053d0 <HAL_ADC_ConfigChannel+0x8f4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d101      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x7e0>
 80052b8:	4a46      	ldr	r2, [pc, #280]	@ (80053d4 <HAL_ADC_ConfigChannel+0x8f8>)
 80052ba:	e000      	b.n	80052be <HAL_ADC_ConfigChannel+0x7e2>
 80052bc:	4a46      	ldr	r2, [pc, #280]	@ (80053d8 <HAL_ADC_ConfigChannel+0x8fc>)
 80052be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f7fe f99a 	bl	8003602 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052ce:	e217      	b.n	8005700 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a46      	ldr	r2, [pc, #280]	@ (80053f0 <HAL_ADC_ConfigChannel+0x914>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	f040 8213 	bne.w	8005702 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f040 820c 	bne.w	8005702 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a37      	ldr	r2, [pc, #220]	@ (80053cc <HAL_ADC_ConfigChannel+0x8f0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00a      	beq.n	800530a <HAL_ADC_ConfigChannel+0x82e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a35      	ldr	r2, [pc, #212]	@ (80053d0 <HAL_ADC_ConfigChannel+0x8f4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d005      	beq.n	800530a <HAL_ADC_ConfigChannel+0x82e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a36      	ldr	r2, [pc, #216]	@ (80053dc <HAL_ADC_ConfigChannel+0x900>)
 8005304:	4293      	cmp	r3, r2
 8005306:	f040 81fc 	bne.w	8005702 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2f      	ldr	r2, [pc, #188]	@ (80053cc <HAL_ADC_ConfigChannel+0x8f0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d004      	beq.n	800531e <HAL_ADC_ConfigChannel+0x842>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2d      	ldr	r2, [pc, #180]	@ (80053d0 <HAL_ADC_ConfigChannel+0x8f4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x846>
 800531e:	4a2d      	ldr	r2, [pc, #180]	@ (80053d4 <HAL_ADC_ConfigChannel+0x8f8>)
 8005320:	e000      	b.n	8005324 <HAL_ADC_ConfigChannel+0x848>
 8005322:	4a2d      	ldr	r2, [pc, #180]	@ (80053d8 <HAL_ADC_ConfigChannel+0x8fc>)
 8005324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005328:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f7fe f967 	bl	8003602 <LL_ADC_SetCommonPathInternalCh>
 8005334:	e1e5      	b.n	8005702 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800533a:	f043 0220 	orr.w	r2, r3, #32
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005348:	e1db      	b.n	8005702 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	f000 811b 	beq.w	8005592 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005364:	d004      	beq.n	8005370 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800536a:	4a22      	ldr	r2, [pc, #136]	@ (80053f4 <HAL_ADC_ConfigChannel+0x918>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d107      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe fac1 	bl	8003900 <LL_ADC_REG_SetSequencerChAdd>
 800537e:	e059      	b.n	8005434 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	210f      	movs	r1, #15
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	43db      	mvns	r3, r3
 8005396:	401a      	ands	r2, r3
 8005398:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800539c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d105      	bne.n	80053b0 <HAL_ADC_ConfigChannel+0x8d4>
 80053a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80053a8:	0e9b      	lsrs	r3, r3, #26
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	e027      	b.n	8005400 <HAL_ADC_ConfigChannel+0x924>
 80053b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80053b4:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	fa93 f3a3 	rbit	r3, r3
 80053bc:	60fb      	str	r3, [r7, #12]
  return result;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d117      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80053c8:	2320      	movs	r3, #32
 80053ca:	e019      	b.n	8005400 <HAL_ADC_ConfigChannel+0x924>
 80053cc:	42028000 	.word	0x42028000
 80053d0:	42028100 	.word	0x42028100
 80053d4:	42028300 	.word	0x42028300
 80053d8:	46021300 	.word	0x46021300
 80053dc:	46021000 	.word	0x46021000
 80053e0:	ce080000 	.word	0xce080000
 80053e4:	20000028 	.word	0x20000028
 80053e8:	053e2d63 	.word	0x053e2d63
 80053ec:	ca040000 	.word	0xca040000
 80053f0:	80000001 	.word	0x80000001
 80053f4:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	fab3 f383 	clz	r3, r3
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	6849      	ldr	r1, [r1, #4]
 8005404:	f001 011f 	and.w	r1, r1, #31
 8005408:	408b      	lsls	r3, r1
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	429a      	cmp	r2, r3
 8005420:	d808      	bhi.n	8005434 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800542e:	4619      	mov	r1, r3
 8005430:	f7fe fa06 	bl	8003840 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	461a      	mov	r2, r3
 800543e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005442:	f7fe fac9 	bl	80039d8 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f280 8159 	bge.w	8005702 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a9b      	ldr	r2, [pc, #620]	@ (80056c4 <HAL_ADC_ConfigChannel+0xbe8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d004      	beq.n	8005464 <HAL_ADC_ConfigChannel+0x988>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a9a      	ldr	r2, [pc, #616]	@ (80056c8 <HAL_ADC_ConfigChannel+0xbec>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d101      	bne.n	8005468 <HAL_ADC_ConfigChannel+0x98c>
 8005464:	4b99      	ldr	r3, [pc, #612]	@ (80056cc <HAL_ADC_ConfigChannel+0xbf0>)
 8005466:	e000      	b.n	800546a <HAL_ADC_ConfigChannel+0x98e>
 8005468:	4b99      	ldr	r3, [pc, #612]	@ (80056d0 <HAL_ADC_ConfigChannel+0xbf4>)
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe f8dc 	bl	8003628 <LL_ADC_GetCommonPathInternalCh>
 8005470:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a96      	ldr	r2, [pc, #600]	@ (80056d4 <HAL_ADC_ConfigChannel+0xbf8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d12b      	bne.n	80054d6 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800547e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005482:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d125      	bne.n	80054d6 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a8d      	ldr	r2, [pc, #564]	@ (80056c4 <HAL_ADC_ConfigChannel+0xbe8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d004      	beq.n	800549e <HAL_ADC_ConfigChannel+0x9c2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a8b      	ldr	r2, [pc, #556]	@ (80056c8 <HAL_ADC_ConfigChannel+0xbec>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d101      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x9c6>
 800549e:	4a8b      	ldr	r2, [pc, #556]	@ (80056cc <HAL_ADC_ConfigChannel+0xbf0>)
 80054a0:	e000      	b.n	80054a4 <HAL_ADC_ConfigChannel+0x9c8>
 80054a2:	4a8b      	ldr	r2, [pc, #556]	@ (80056d0 <HAL_ADC_ConfigChannel+0xbf4>)
 80054a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f7fe f8a7 	bl	8003602 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80054b4:	4b88      	ldr	r3, [pc, #544]	@ (80056d8 <HAL_ADC_ConfigChannel+0xbfc>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	099b      	lsrs	r3, r3, #6
 80054ba:	4a88      	ldr	r2, [pc, #544]	@ (80056dc <HAL_ADC_ConfigChannel+0xc00>)
 80054bc:	fba2 2303 	umull	r2, r3, r2, r3
 80054c0:	099b      	lsrs	r3, r3, #6
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80054c6:	e002      	b.n	80054ce <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1f9      	bne.n	80054c8 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80054d4:	e045      	b.n	8005562 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a81      	ldr	r2, [pc, #516]	@ (80056e0 <HAL_ADC_ConfigChannel+0xc04>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d11b      	bne.n	8005518 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80054e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d115      	bne.n	8005518 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a74      	ldr	r2, [pc, #464]	@ (80056c4 <HAL_ADC_ConfigChannel+0xbe8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_ADC_ConfigChannel+0xa24>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a73      	ldr	r2, [pc, #460]	@ (80056c8 <HAL_ADC_ConfigChannel+0xbec>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_ADC_ConfigChannel+0xa28>
 8005500:	4a72      	ldr	r2, [pc, #456]	@ (80056cc <HAL_ADC_ConfigChannel+0xbf0>)
 8005502:	e000      	b.n	8005506 <HAL_ADC_ConfigChannel+0xa2a>
 8005504:	4a72      	ldr	r2, [pc, #456]	@ (80056d0 <HAL_ADC_ConfigChannel+0xbf4>)
 8005506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800550a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f7fe f876 	bl	8003602 <LL_ADC_SetCommonPathInternalCh>
 8005516:	e024      	b.n	8005562 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a71      	ldr	r2, [pc, #452]	@ (80056e4 <HAL_ADC_ConfigChannel+0xc08>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d11f      	bne.n	8005562 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005522:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d115      	bne.n	800555a <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a64      	ldr	r2, [pc, #400]	@ (80056c4 <HAL_ADC_ConfigChannel+0xbe8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_ADC_ConfigChannel+0xa66>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a62      	ldr	r2, [pc, #392]	@ (80056c8 <HAL_ADC_ConfigChannel+0xbec>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d101      	bne.n	8005546 <HAL_ADC_ConfigChannel+0xa6a>
 8005542:	4a62      	ldr	r2, [pc, #392]	@ (80056cc <HAL_ADC_ConfigChannel+0xbf0>)
 8005544:	e000      	b.n	8005548 <HAL_ADC_ConfigChannel+0xa6c>
 8005546:	4a62      	ldr	r2, [pc, #392]	@ (80056d0 <HAL_ADC_ConfigChannel+0xbf4>)
 8005548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800554c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f7fe f855 	bl	8003602 <LL_ADC_SetCommonPathInternalCh>
 8005558:	e003      	b.n	8005562 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a62      	ldr	r2, [pc, #392]	@ (80056e8 <HAL_ADC_ConfigChannel+0xc0c>)
 8005560:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a61      	ldr	r2, [pc, #388]	@ (80056ec <HAL_ADC_ConfigChannel+0xc10>)
 8005568:	4293      	cmp	r3, r2
 800556a:	f040 80ca 	bne.w	8005702 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800556e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 80c3 	bne.w	8005702 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005590:	e0b7      	b.n	8005702 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800559a:	d004      	beq.n	80055a6 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80055a0:	4a53      	ldr	r2, [pc, #332]	@ (80056f0 <HAL_ADC_ConfigChannel+0xc14>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d106      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe f9d9 	bl	8003966 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f280 80a2 	bge.w	8005702 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a40      	ldr	r2, [pc, #256]	@ (80056c4 <HAL_ADC_ConfigChannel+0xbe8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_ADC_ConfigChannel+0xaf6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a3e      	ldr	r2, [pc, #248]	@ (80056c8 <HAL_ADC_ConfigChannel+0xbec>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d101      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0xafa>
 80055d2:	4b3e      	ldr	r3, [pc, #248]	@ (80056cc <HAL_ADC_ConfigChannel+0xbf0>)
 80055d4:	e000      	b.n	80055d8 <HAL_ADC_ConfigChannel+0xafc>
 80055d6:	4b3e      	ldr	r3, [pc, #248]	@ (80056d0 <HAL_ADC_ConfigChannel+0xbf4>)
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe f825 	bl	8003628 <LL_ADC_GetCommonPathInternalCh>
 80055de:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a43      	ldr	r2, [pc, #268]	@ (80056f4 <HAL_ADC_ConfigChannel+0xc18>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d115      	bne.n	8005618 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a34      	ldr	r2, [pc, #208]	@ (80056c4 <HAL_ADC_ConfigChannel+0xbe8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <HAL_ADC_ConfigChannel+0xb24>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a33      	ldr	r2, [pc, #204]	@ (80056c8 <HAL_ADC_ConfigChannel+0xbec>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d101      	bne.n	8005604 <HAL_ADC_ConfigChannel+0xb28>
 8005600:	4a32      	ldr	r2, [pc, #200]	@ (80056cc <HAL_ADC_ConfigChannel+0xbf0>)
 8005602:	e000      	b.n	8005606 <HAL_ADC_ConfigChannel+0xb2a>
 8005604:	4a32      	ldr	r2, [pc, #200]	@ (80056d0 <HAL_ADC_ConfigChannel+0xbf4>)
 8005606:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800560a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f7fd fff6 	bl	8003602 <LL_ADC_SetCommonPathInternalCh>
 8005616:	e034      	b.n	8005682 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a36      	ldr	r2, [pc, #216]	@ (80056f8 <HAL_ADC_ConfigChannel+0xc1c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d115      	bne.n	800564e <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a27      	ldr	r2, [pc, #156]	@ (80056c4 <HAL_ADC_ConfigChannel+0xbe8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_ADC_ConfigChannel+0xb5a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a25      	ldr	r2, [pc, #148]	@ (80056c8 <HAL_ADC_ConfigChannel+0xbec>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d101      	bne.n	800563a <HAL_ADC_ConfigChannel+0xb5e>
 8005636:	4a25      	ldr	r2, [pc, #148]	@ (80056cc <HAL_ADC_ConfigChannel+0xbf0>)
 8005638:	e000      	b.n	800563c <HAL_ADC_ConfigChannel+0xb60>
 800563a:	4a25      	ldr	r2, [pc, #148]	@ (80056d0 <HAL_ADC_ConfigChannel+0xbf4>)
 800563c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005640:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f7fd ffdb 	bl	8003602 <LL_ADC_SetCommonPathInternalCh>
 800564c:	e019      	b.n	8005682 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a24      	ldr	r2, [pc, #144]	@ (80056e4 <HAL_ADC_ConfigChannel+0xc08>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d114      	bne.n	8005682 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a19      	ldr	r2, [pc, #100]	@ (80056c4 <HAL_ADC_ConfigChannel+0xbe8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d004      	beq.n	800566c <HAL_ADC_ConfigChannel+0xb90>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a18      	ldr	r2, [pc, #96]	@ (80056c8 <HAL_ADC_ConfigChannel+0xbec>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d101      	bne.n	8005670 <HAL_ADC_ConfigChannel+0xb94>
 800566c:	4a17      	ldr	r2, [pc, #92]	@ (80056cc <HAL_ADC_ConfigChannel+0xbf0>)
 800566e:	e000      	b.n	8005672 <HAL_ADC_ConfigChannel+0xb96>
 8005670:	4a17      	ldr	r2, [pc, #92]	@ (80056d0 <HAL_ADC_ConfigChannel+0xbf4>)
 8005672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005676:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7fd ffc0 	bl	8003602 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a19      	ldr	r2, [pc, #100]	@ (80056ec <HAL_ADC_ConfigChannel+0xc10>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d13a      	bne.n	8005702 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800568c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005690:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d134      	bne.n	8005702 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0201 	orr.w	r2, r2, #1
 80056a8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80056ac:	e029      	b.n	8005702 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056b2:	f043 0220 	orr.w	r2, r3, #32
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80056c0:	e01f      	b.n	8005702 <HAL_ADC_ConfigChannel+0xc26>
 80056c2:	bf00      	nop
 80056c4:	42028000 	.word	0x42028000
 80056c8:	42028100 	.word	0x42028100
 80056cc:	42028300 	.word	0x42028300
 80056d0:	46021300 	.word	0x46021300
 80056d4:	b6002000 	.word	0xb6002000
 80056d8:	20000028 	.word	0x20000028
 80056dc:	053e2d63 	.word	0x053e2d63
 80056e0:	ba004000 	.word	0xba004000
 80056e4:	80000001 	.word	0x80000001
 80056e8:	b2001000 	.word	0xb2001000
 80056ec:	d7200000 	.word	0xd7200000
 80056f0:	80000010 	.word	0x80000010
 80056f4:	ce080000 	.word	0xce080000
 80056f8:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056fc:	bf00      	nop
 80056fe:	e000      	b.n	8005702 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005700:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 800570a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800570e:	4618      	mov	r0, r3
 8005710:	37dc      	adds	r7, #220	@ 0xdc
 8005712:	46bd      	mov	sp, r7
 8005714:	bd90      	pop	{r4, r7, pc}
 8005716:	bf00      	nop

08005718 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f7fe fa5d 	bl	8003be4 <LL_ADC_IsEnabled>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d17b      	bne.n	8005828 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	4b3f      	ldr	r3, [pc, #252]	@ (8005834 <ADC_Enable+0x11c>)
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00d      	beq.n	800575a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005742:	f043 0210 	orr.w	r2, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800574e:	f043 0201 	orr.w	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e067      	b.n	800582a <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fa28 	bl	8003bbc <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <ADC_Enable+0x66>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2f      	ldr	r2, [pc, #188]	@ (8005838 <ADC_Enable+0x120>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d054      	beq.n	8005828 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800577e:	f7fd fed5 	bl	800352c <HAL_GetTick>
 8005782:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a2c      	ldr	r2, [pc, #176]	@ (800583c <ADC_Enable+0x124>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <ADC_Enable+0x80>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2b      	ldr	r2, [pc, #172]	@ (8005840 <ADC_Enable+0x128>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d101      	bne.n	800579c <ADC_Enable+0x84>
 8005798:	4b2a      	ldr	r3, [pc, #168]	@ (8005844 <ADC_Enable+0x12c>)
 800579a:	e000      	b.n	800579e <ADC_Enable+0x86>
 800579c:	4b2a      	ldr	r3, [pc, #168]	@ (8005848 <ADC_Enable+0x130>)
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe f9a2 	bl	8003ae8 <LL_ADC_GetMultimode>
 80057a4:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a25      	ldr	r2, [pc, #148]	@ (8005840 <ADC_Enable+0x128>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d002      	beq.n	80057b6 <ADC_Enable+0x9e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	e000      	b.n	80057b8 <ADC_Enable+0xa0>
 80057b6:	4b21      	ldr	r3, [pc, #132]	@ (800583c <ADC_Enable+0x124>)
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	4293      	cmp	r3, r2
 80057be:	d02c      	beq.n	800581a <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d130      	bne.n	8005828 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057c6:	e028      	b.n	800581a <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fe fa09 	bl	8003be4 <LL_ADC_IsEnabled>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe f9ed 	bl	8003bbc <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80057e2:	f7fd fea3 	bl	800352c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d914      	bls.n	800581a <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d00d      	beq.n	800581a <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005802:	f043 0210 	orr.w	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e007      	b.n	800582a <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d1cf      	bne.n	80057c8 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	8000003f 	.word	0x8000003f
 8005838:	46021000 	.word	0x46021000
 800583c:	42028000 	.word	0x42028000
 8005840:	42028100 	.word	0x42028100
 8005844:	42028300 	.word	0x42028300
 8005848:	46021300 	.word	0x46021300

0800584c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005858:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800585e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005862:	2b00      	cmp	r3, #0
 8005864:	d14b      	bne.n	80058fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800586a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d021      	beq.n	80058c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4618      	mov	r0, r3
 8005886:	f7fd ffc7 	bl	8003818 <LL_ADC_REG_IsTriggerSourceSWStart>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d032      	beq.n	80058f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d12b      	bne.n	80058f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11f      	bne.n	80058f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ba:	f043 0201 	orr.w	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	679a      	str	r2, [r3, #120]	@ 0x78
 80058c2:	e018      	b.n	80058f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d111      	bne.n	80058f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d105      	bne.n	80058f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff f8aa 	bl	8004a50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058fc:	e00e      	b.n	800591c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff f8be 	bl	8004a8c <HAL_ADC_ErrorCallback>
}
 8005910:	e004      	b.n	800591c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005930:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff f896 	bl	8004a64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005952:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800595e:	f043 0204 	orr.w	r2, r3, #4
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7ff f890 	bl	8004a8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a08 <__NVIC_SetPriorityGrouping+0x44>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059e0:	4013      	ands	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80059f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059f6:	4a04      	ldr	r2, [pc, #16]	@ (8005a08 <__NVIC_SetPriorityGrouping+0x44>)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	60d3      	str	r3, [r2, #12]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	e000ed00 	.word	0xe000ed00

08005a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a10:	4b04      	ldr	r3, [pc, #16]	@ (8005a24 <__NVIC_GetPriorityGrouping+0x18>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	f003 0307 	and.w	r3, r3, #7
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	e000ed00 	.word	0xe000ed00

08005a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	db0b      	blt.n	8005a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	f003 021f 	and.w	r2, r3, #31
 8005a40:	4907      	ldr	r1, [pc, #28]	@ (8005a60 <__NVIC_EnableIRQ+0x38>)
 8005a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	2001      	movs	r0, #1
 8005a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	e000e100 	.word	0xe000e100

08005a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	6039      	str	r1, [r7, #0]
 8005a6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	db0a      	blt.n	8005a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	490c      	ldr	r1, [pc, #48]	@ (8005ab0 <__NVIC_SetPriority+0x4c>)
 8005a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a82:	0112      	lsls	r2, r2, #4
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	440b      	add	r3, r1
 8005a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a8c:	e00a      	b.n	8005aa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	4908      	ldr	r1, [pc, #32]	@ (8005ab4 <__NVIC_SetPriority+0x50>)
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	3b04      	subs	r3, #4
 8005a9c:	0112      	lsls	r2, r2, #4
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	761a      	strb	r2, [r3, #24]
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	e000e100 	.word	0xe000e100
 8005ab4:	e000ed00 	.word	0xe000ed00

08005ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b089      	sub	sp, #36	@ 0x24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f1c3 0307 	rsb	r3, r3, #7
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	bf28      	it	cs
 8005ad6:	2304      	movcs	r3, #4
 8005ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3304      	adds	r3, #4
 8005ade:	2b06      	cmp	r3, #6
 8005ae0:	d902      	bls.n	8005ae8 <NVIC_EncodePriority+0x30>
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	3b03      	subs	r3, #3
 8005ae6:	e000      	b.n	8005aea <NVIC_EncodePriority+0x32>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	43da      	mvns	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	401a      	ands	r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b00:	f04f 31ff 	mov.w	r1, #4294967295
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0a:	43d9      	mvns	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b10:	4313      	orrs	r3, r2
         );
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3724      	adds	r7, #36	@ 0x24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff ff4c 	bl	80059c4 <__NVIC_SetPriorityGrouping>
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b42:	f7ff ff63 	bl	8005a0c <__NVIC_GetPriorityGrouping>
 8005b46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	6978      	ldr	r0, [r7, #20]
 8005b4e:	f7ff ffb3 	bl	8005ab8 <NVIC_EncodePriority>
 8005b52:	4602      	mov	r2, r0
 8005b54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff ff82 	bl	8005a64 <__NVIC_SetPriority>
}
 8005b60:	bf00      	nop
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff ff56 	bl	8005a28 <__NVIC_EnableIRQ>
}
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b94:	d301      	bcc.n	8005b9a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005b96:	2301      	movs	r3, #1
 8005b98:	e00d      	b.n	8005bb6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc4 <HAL_SYSTICK_Config+0x40>)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005ba2:	4b08      	ldr	r3, [pc, #32]	@ (8005bc4 <HAL_SYSTICK_Config+0x40>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005ba8:	4b06      	ldr	r3, [pc, #24]	@ (8005bc4 <HAL_SYSTICK_Config+0x40>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a05      	ldr	r2, [pc, #20]	@ (8005bc4 <HAL_SYSTICK_Config+0x40>)
 8005bae:	f043 0303 	orr.w	r3, r3, #3
 8005bb2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	e000e010 	.word	0xe000e010

08005bc8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d844      	bhi.n	8005c60 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005bff 	.word	0x08005bff
 8005be0:	08005c1d 	.word	0x08005c1d
 8005be4:	08005c3f 	.word	0x08005c3f
 8005be8:	08005c61 	.word	0x08005c61
 8005bec:	08005bf1 	.word	0x08005bf1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005bf6:	f043 0304 	orr.w	r3, r3, #4
 8005bfa:	6013      	str	r3, [r2, #0]
      break;
 8005bfc:	e031      	b.n	8005c62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8005c70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1b      	ldr	r2, [pc, #108]	@ (8005c70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005c04:	f023 0304 	bic.w	r3, r3, #4
 8005c08:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005c74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c10:	4a18      	ldr	r2, [pc, #96]	@ (8005c74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005c12:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005c1a:	e022      	b.n	8005c62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005c1c:	4b14      	ldr	r3, [pc, #80]	@ (8005c70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a13      	ldr	r2, [pc, #76]	@ (8005c70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005c22:	f023 0304 	bic.w	r3, r3, #4
 8005c26:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005c28:	4b12      	ldr	r3, [pc, #72]	@ (8005c74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c2e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005c32:	4a10      	ldr	r2, [pc, #64]	@ (8005c74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005c34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005c3c:	e011      	b.n	8005c62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a0b      	ldr	r2, [pc, #44]	@ (8005c70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005c44:	f023 0304 	bic.w	r3, r3, #4
 8005c48:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c50:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005c54:	4a07      	ldr	r2, [pc, #28]	@ (8005c74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005c56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005c5e:	e000      	b.n	8005c62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005c60:	bf00      	nop
  }
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	e000e010 	.word	0xe000e010
 8005c74:	46020c00 	.word	0x46020c00

08005c78 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005c7e:	4b19      	ldr	r3, [pc, #100]	@ (8005ce4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005c8a:	2304      	movs	r3, #4
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	e021      	b.n	8005cd4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005c90:	4b15      	ldr	r3, [pc, #84]	@ (8005ce8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8005c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c96:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005c9a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ca2:	d011      	beq.n	8005cc8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005caa:	d810      	bhi.n	8005cce <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d004      	beq.n	8005cbc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cb8:	d003      	beq.n	8005cc2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005cba:	e008      	b.n	8005cce <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	607b      	str	r3, [r7, #4]
        break;
 8005cc0:	e008      	b.n	8005cd4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	607b      	str	r3, [r7, #4]
        break;
 8005cc6:	e005      	b.n	8005cd4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	607b      	str	r3, [r7, #4]
        break;
 8005ccc:	e002      	b.n	8005cd4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	607b      	str	r3, [r7, #4]
        break;
 8005cd2:	bf00      	nop
    }
  }
  return systick_source;
 8005cd4:	687b      	ldr	r3, [r7, #4]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	e000e010 	.word	0xe000e010
 8005ce8:	46020c00 	.word	0x46020c00

08005cec <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005cf4:	f7fd fc1a 	bl	800352c <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0db      	b.n	8005ebc <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a6e      	ldr	r2, [pc, #440]	@ (8005ec4 <HAL_DMA_Init+0x1d8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	f000 809f 	beq.w	8005e4e <HAL_DMA_Init+0x162>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6c      	ldr	r2, [pc, #432]	@ (8005ec8 <HAL_DMA_Init+0x1dc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	f000 8099 	beq.w	8005e4e <HAL_DMA_Init+0x162>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a6a      	ldr	r2, [pc, #424]	@ (8005ecc <HAL_DMA_Init+0x1e0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	f000 8093 	beq.w	8005e4e <HAL_DMA_Init+0x162>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a68      	ldr	r2, [pc, #416]	@ (8005ed0 <HAL_DMA_Init+0x1e4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	f000 808d 	beq.w	8005e4e <HAL_DMA_Init+0x162>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a66      	ldr	r2, [pc, #408]	@ (8005ed4 <HAL_DMA_Init+0x1e8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	f000 8087 	beq.w	8005e4e <HAL_DMA_Init+0x162>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a64      	ldr	r2, [pc, #400]	@ (8005ed8 <HAL_DMA_Init+0x1ec>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	f000 8081 	beq.w	8005e4e <HAL_DMA_Init+0x162>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a62      	ldr	r2, [pc, #392]	@ (8005edc <HAL_DMA_Init+0x1f0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d07b      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a61      	ldr	r2, [pc, #388]	@ (8005ee0 <HAL_DMA_Init+0x1f4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d076      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a5f      	ldr	r2, [pc, #380]	@ (8005ee4 <HAL_DMA_Init+0x1f8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d071      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a5e      	ldr	r2, [pc, #376]	@ (8005ee8 <HAL_DMA_Init+0x1fc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d06c      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a5c      	ldr	r2, [pc, #368]	@ (8005eec <HAL_DMA_Init+0x200>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d067      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a5b      	ldr	r2, [pc, #364]	@ (8005ef0 <HAL_DMA_Init+0x204>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d062      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a59      	ldr	r2, [pc, #356]	@ (8005ef4 <HAL_DMA_Init+0x208>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d05d      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a58      	ldr	r2, [pc, #352]	@ (8005ef8 <HAL_DMA_Init+0x20c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d058      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a56      	ldr	r2, [pc, #344]	@ (8005efc <HAL_DMA_Init+0x210>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d053      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a55      	ldr	r2, [pc, #340]	@ (8005f00 <HAL_DMA_Init+0x214>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d04e      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a53      	ldr	r2, [pc, #332]	@ (8005f04 <HAL_DMA_Init+0x218>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d049      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a52      	ldr	r2, [pc, #328]	@ (8005f08 <HAL_DMA_Init+0x21c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d044      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a50      	ldr	r2, [pc, #320]	@ (8005f0c <HAL_DMA_Init+0x220>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d03f      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a4f      	ldr	r2, [pc, #316]	@ (8005f10 <HAL_DMA_Init+0x224>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d03a      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a4d      	ldr	r2, [pc, #308]	@ (8005f14 <HAL_DMA_Init+0x228>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d035      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a4c      	ldr	r2, [pc, #304]	@ (8005f18 <HAL_DMA_Init+0x22c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d030      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a4a      	ldr	r2, [pc, #296]	@ (8005f1c <HAL_DMA_Init+0x230>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d02b      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a49      	ldr	r2, [pc, #292]	@ (8005f20 <HAL_DMA_Init+0x234>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d026      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a47      	ldr	r2, [pc, #284]	@ (8005f24 <HAL_DMA_Init+0x238>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d021      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a46      	ldr	r2, [pc, #280]	@ (8005f28 <HAL_DMA_Init+0x23c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d01c      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a44      	ldr	r2, [pc, #272]	@ (8005f2c <HAL_DMA_Init+0x240>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d017      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a43      	ldr	r2, [pc, #268]	@ (8005f30 <HAL_DMA_Init+0x244>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d012      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a41      	ldr	r2, [pc, #260]	@ (8005f34 <HAL_DMA_Init+0x248>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00d      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a40      	ldr	r2, [pc, #256]	@ (8005f38 <HAL_DMA_Init+0x24c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d008      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a3e      	ldr	r2, [pc, #248]	@ (8005f3c <HAL_DMA_Init+0x250>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <HAL_DMA_Init+0x162>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8005f40 <HAL_DMA_Init+0x254>)
 8005e4c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	695a      	ldr	r2, [r3, #20]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0206 	orr.w	r2, r2, #6
 8005e6c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005e6e:	e00f      	b.n	8005e90 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005e70:	f7fd fb5c 	bl	800352c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d908      	bls.n	8005e90 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2210      	movs	r2, #16
 8005e82:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2203      	movs	r2, #3
 8005e88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e015      	b.n	8005ebc <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e8      	bne.n	8005e70 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fb26 	bl	80064f0 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40020050 	.word	0x40020050
 8005ec8:	50020050 	.word	0x50020050
 8005ecc:	400200d0 	.word	0x400200d0
 8005ed0:	500200d0 	.word	0x500200d0
 8005ed4:	40020150 	.word	0x40020150
 8005ed8:	50020150 	.word	0x50020150
 8005edc:	400201d0 	.word	0x400201d0
 8005ee0:	500201d0 	.word	0x500201d0
 8005ee4:	40020250 	.word	0x40020250
 8005ee8:	50020250 	.word	0x50020250
 8005eec:	400202d0 	.word	0x400202d0
 8005ef0:	500202d0 	.word	0x500202d0
 8005ef4:	40020350 	.word	0x40020350
 8005ef8:	50020350 	.word	0x50020350
 8005efc:	400203d0 	.word	0x400203d0
 8005f00:	500203d0 	.word	0x500203d0
 8005f04:	40020450 	.word	0x40020450
 8005f08:	50020450 	.word	0x50020450
 8005f0c:	400204d0 	.word	0x400204d0
 8005f10:	500204d0 	.word	0x500204d0
 8005f14:	40020550 	.word	0x40020550
 8005f18:	50020550 	.word	0x50020550
 8005f1c:	400205d0 	.word	0x400205d0
 8005f20:	500205d0 	.word	0x500205d0
 8005f24:	40020650 	.word	0x40020650
 8005f28:	50020650 	.word	0x50020650
 8005f2c:	400206d0 	.word	0x400206d0
 8005f30:	500206d0 	.word	0x500206d0
 8005f34:	40020750 	.word	0x40020750
 8005f38:	50020750 	.word	0x50020750
 8005f3c:	400207d0 	.word	0x400207d0
 8005f40:	500207d0 	.word	0x500207d0

08005f44 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e04f      	b.n	8005ffc <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_DMA_Start_IT+0x26>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e048      	b.n	8005ffc <HAL_DMA_Start_IT+0xb8>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d136      	bne.n	8005fec <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fa86 	bl	80064a4 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005fa6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fbe:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fd6:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e007      	b.n	8005ffc <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2240      	movs	r2, #64	@ 0x40
 8005ff0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800600c:	f7fd fa8e 	bl	800352c <HAL_GetTick>
 8006010:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e06b      	b.n	80060f4 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d008      	beq.n	800603a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e05c      	b.n	80060f4 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0204 	orr.w	r2, r2, #4
 8006048:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2205      	movs	r2, #5
 800604e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8006052:	e020      	b.n	8006096 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006054:	f7fd fa6a 	bl	800352c <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b05      	cmp	r3, #5
 8006060:	d919      	bls.n	8006096 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006066:	f043 0210 	orr.w	r2, r3, #16
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2203      	movs	r2, #3
 8006072:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800607a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006086:	2201      	movs	r2, #1
 8006088:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e02e      	b.n	80060f4 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0d7      	beq.n	8006054 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695a      	ldr	r2, [r3, #20]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0202 	orr.w	r2, r2, #2
 80060b2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2204      	movs	r2, #4
 80060b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80060c4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060de:	2201      	movs	r2, #1
 80060e0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2200      	movs	r2, #0
 80060e8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e019      	b.n	8006142 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d004      	beq.n	8006124 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e00e      	b.n	8006142 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2204      	movs	r2, #4
 8006128:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6812      	ldr	r2, [r2, #0]
 8006136:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800613a:	f043 0304 	orr.w	r3, r3, #4
 800613e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b086      	sub	sp, #24
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800615e:	f023 030f 	bic.w	r3, r3, #15
 8006162:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616c:	3b50      	subs	r3, #80	@ 0x50
 800616e:	09db      	lsrs	r3, r3, #7
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	2201      	movs	r2, #1
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4013      	ands	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 813b 	beq.w	8006404 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006198:	2b00      	cmp	r3, #0
 800619a:	d011      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061b2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b8:	f043 0201 	orr.w	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d011      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061e4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ea:	f043 0202 	orr.w	r2, r3, #2
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d011      	beq.n	8006224 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006216:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621c:	f043 0204 	orr.w	r2, r3, #4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d011      	beq.n	8006256 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006248:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624e:	f043 0208 	orr.w	r2, r3, #8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006260:	2b00      	cmp	r3, #0
 8006262:	d013      	beq.n	800628c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00c      	beq.n	800628c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800627a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d04c      	beq.n	8006334 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d045      	beq.n	8006334 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80062b0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d12e      	bne.n	800631c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062cc:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0202 	orr.w	r2, r2, #2
 80062dc:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f6:	2201      	movs	r2, #1
 80062f8:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2200      	movs	r2, #0
 8006300:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d07a      	beq.n	8006408 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
        }

        return;
 800631a:	e075      	b.n	8006408 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2205      	movs	r2, #5
 8006320:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800633e:	2b00      	cmp	r3, #0
 8006340:	d039      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d032      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006358:	2b00      	cmp	r3, #0
 800635a:	d012      	beq.n	8006382 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d116      	bne.n	8006394 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800636c:	2b00      	cmp	r3, #0
 800636e:	d111      	bne.n	8006394 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637c:	2201      	movs	r2, #1
 800637e:	731a      	strb	r2, [r3, #12]
 8006380:	e008      	b.n	8006394 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006388:	2b00      	cmp	r3, #0
 800638a:	d103      	bne.n	8006394 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800639c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d025      	beq.n	800640a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695a      	ldr	r2, [r3, #20]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 0202 	orr.w	r2, r2, #2
 80063cc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e6:	2201      	movs	r2, #1
 80063e8:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
 8006402:	e002      	b.n	800640a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8006404:	bf00      	nop
 8006406:	e000      	b.n	800640a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8006408:	bf00      	nop
    }
  }
}
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800641e:	b2db      	uxtb	r3, r3
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e02b      	b.n	8006498 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006448:	f023 030f 	bic.w	r3, r3, #15
 800644c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006456:	3b50      	subs	r3, #80	@ 0x50
 8006458:	09db      	lsrs	r3, r3, #7
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	2201      	movs	r2, #1
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b00      	cmp	r3, #0
 800646e:	d012      	beq.n	8006496 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	f003 0311 	and.w	r3, r3, #17
 8006476:	2b11      	cmp	r3, #17
 8006478:	d106      	bne.n	8006488 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	431a      	orrs	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	e006      	b.n	8006496 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	43db      	mvns	r3, r3
 8006490:	401a      	ands	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064b8:	0c1b      	lsrs	r3, r3, #16
 80064ba:	041b      	lsls	r3, r3, #16
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	b291      	uxth	r1, r2
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	430b      	orrs	r3, r1
 80064c6:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80064d0:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
	...

080064f0 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	430a      	orrs	r2, r1
 8006510:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695a      	ldr	r2, [r3, #20]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a53      	ldr	r2, [pc, #332]	@ (800667c <DMA_Init+0x18c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	f000 80a0 	beq.w	8006676 <DMA_Init+0x186>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a51      	ldr	r2, [pc, #324]	@ (8006680 <DMA_Init+0x190>)
 800653c:	4293      	cmp	r3, r2
 800653e:	f000 809a 	beq.w	8006676 <DMA_Init+0x186>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a4f      	ldr	r2, [pc, #316]	@ (8006684 <DMA_Init+0x194>)
 8006548:	4293      	cmp	r3, r2
 800654a:	f000 8094 	beq.w	8006676 <DMA_Init+0x186>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a4d      	ldr	r2, [pc, #308]	@ (8006688 <DMA_Init+0x198>)
 8006554:	4293      	cmp	r3, r2
 8006556:	f000 808e 	beq.w	8006676 <DMA_Init+0x186>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a4b      	ldr	r2, [pc, #300]	@ (800668c <DMA_Init+0x19c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	f000 8088 	beq.w	8006676 <DMA_Init+0x186>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a49      	ldr	r2, [pc, #292]	@ (8006690 <DMA_Init+0x1a0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	f000 8082 	beq.w	8006676 <DMA_Init+0x186>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a47      	ldr	r2, [pc, #284]	@ (8006694 <DMA_Init+0x1a4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d07c      	beq.n	8006676 <DMA_Init+0x186>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a45      	ldr	r2, [pc, #276]	@ (8006698 <DMA_Init+0x1a8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d077      	beq.n	8006676 <DMA_Init+0x186>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a44      	ldr	r2, [pc, #272]	@ (800669c <DMA_Init+0x1ac>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d072      	beq.n	8006676 <DMA_Init+0x186>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a42      	ldr	r2, [pc, #264]	@ (80066a0 <DMA_Init+0x1b0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d06d      	beq.n	8006676 <DMA_Init+0x186>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a41      	ldr	r2, [pc, #260]	@ (80066a4 <DMA_Init+0x1b4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d068      	beq.n	8006676 <DMA_Init+0x186>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a3f      	ldr	r2, [pc, #252]	@ (80066a8 <DMA_Init+0x1b8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d063      	beq.n	8006676 <DMA_Init+0x186>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a3e      	ldr	r2, [pc, #248]	@ (80066ac <DMA_Init+0x1bc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d05e      	beq.n	8006676 <DMA_Init+0x186>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a3c      	ldr	r2, [pc, #240]	@ (80066b0 <DMA_Init+0x1c0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d059      	beq.n	8006676 <DMA_Init+0x186>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a3b      	ldr	r2, [pc, #236]	@ (80066b4 <DMA_Init+0x1c4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d054      	beq.n	8006676 <DMA_Init+0x186>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a39      	ldr	r2, [pc, #228]	@ (80066b8 <DMA_Init+0x1c8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d04f      	beq.n	8006676 <DMA_Init+0x186>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a38      	ldr	r2, [pc, #224]	@ (80066bc <DMA_Init+0x1cc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d04a      	beq.n	8006676 <DMA_Init+0x186>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a36      	ldr	r2, [pc, #216]	@ (80066c0 <DMA_Init+0x1d0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d045      	beq.n	8006676 <DMA_Init+0x186>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a35      	ldr	r2, [pc, #212]	@ (80066c4 <DMA_Init+0x1d4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d040      	beq.n	8006676 <DMA_Init+0x186>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a33      	ldr	r2, [pc, #204]	@ (80066c8 <DMA_Init+0x1d8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d03b      	beq.n	8006676 <DMA_Init+0x186>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a32      	ldr	r2, [pc, #200]	@ (80066cc <DMA_Init+0x1dc>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d036      	beq.n	8006676 <DMA_Init+0x186>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a30      	ldr	r2, [pc, #192]	@ (80066d0 <DMA_Init+0x1e0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d031      	beq.n	8006676 <DMA_Init+0x186>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a2f      	ldr	r2, [pc, #188]	@ (80066d4 <DMA_Init+0x1e4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d02c      	beq.n	8006676 <DMA_Init+0x186>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a2d      	ldr	r2, [pc, #180]	@ (80066d8 <DMA_Init+0x1e8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d027      	beq.n	8006676 <DMA_Init+0x186>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a2c      	ldr	r2, [pc, #176]	@ (80066dc <DMA_Init+0x1ec>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d022      	beq.n	8006676 <DMA_Init+0x186>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a2a      	ldr	r2, [pc, #168]	@ (80066e0 <DMA_Init+0x1f0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01d      	beq.n	8006676 <DMA_Init+0x186>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a29      	ldr	r2, [pc, #164]	@ (80066e4 <DMA_Init+0x1f4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d018      	beq.n	8006676 <DMA_Init+0x186>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a27      	ldr	r2, [pc, #156]	@ (80066e8 <DMA_Init+0x1f8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <DMA_Init+0x186>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a26      	ldr	r2, [pc, #152]	@ (80066ec <DMA_Init+0x1fc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00e      	beq.n	8006676 <DMA_Init+0x186>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a24      	ldr	r2, [pc, #144]	@ (80066f0 <DMA_Init+0x200>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d009      	beq.n	8006676 <DMA_Init+0x186>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a23      	ldr	r2, [pc, #140]	@ (80066f4 <DMA_Init+0x204>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d004      	beq.n	8006676 <DMA_Init+0x186>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a21      	ldr	r2, [pc, #132]	@ (80066f8 <DMA_Init+0x208>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d142      	bne.n	80066fc <DMA_Init+0x20c>
 8006676:	2301      	movs	r3, #1
 8006678:	e041      	b.n	80066fe <DMA_Init+0x20e>
 800667a:	bf00      	nop
 800667c:	40020050 	.word	0x40020050
 8006680:	50020050 	.word	0x50020050
 8006684:	400200d0 	.word	0x400200d0
 8006688:	500200d0 	.word	0x500200d0
 800668c:	40020150 	.word	0x40020150
 8006690:	50020150 	.word	0x50020150
 8006694:	400201d0 	.word	0x400201d0
 8006698:	500201d0 	.word	0x500201d0
 800669c:	40020250 	.word	0x40020250
 80066a0:	50020250 	.word	0x50020250
 80066a4:	400202d0 	.word	0x400202d0
 80066a8:	500202d0 	.word	0x500202d0
 80066ac:	40020350 	.word	0x40020350
 80066b0:	50020350 	.word	0x50020350
 80066b4:	400203d0 	.word	0x400203d0
 80066b8:	500203d0 	.word	0x500203d0
 80066bc:	40020450 	.word	0x40020450
 80066c0:	50020450 	.word	0x50020450
 80066c4:	400204d0 	.word	0x400204d0
 80066c8:	500204d0 	.word	0x500204d0
 80066cc:	40020550 	.word	0x40020550
 80066d0:	50020550 	.word	0x50020550
 80066d4:	400205d0 	.word	0x400205d0
 80066d8:	500205d0 	.word	0x500205d0
 80066dc:	40020650 	.word	0x40020650
 80066e0:	50020650 	.word	0x50020650
 80066e4:	400206d0 	.word	0x400206d0
 80066e8:	500206d0 	.word	0x500206d0
 80066ec:	40020750 	.word	0x40020750
 80066f0:	50020750 	.word	0x50020750
 80066f4:	400207d0 	.word	0x400207d0
 80066f8:	500207d0 	.word	0x500207d0
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d012      	beq.n	8006728 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	3b01      	subs	r3, #1
 800670c:	051b      	lsls	r3, r3, #20
 800670e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006712:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	3b01      	subs	r3, #1
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006720:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	430a      	orrs	r2, r1
 800673a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800675a:	f040 80b0 	bne.w	80068be <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a82      	ldr	r2, [pc, #520]	@ (800696c <DMA_Init+0x47c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	f000 80a0 	beq.w	80068aa <DMA_Init+0x3ba>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a80      	ldr	r2, [pc, #512]	@ (8006970 <DMA_Init+0x480>)
 8006770:	4293      	cmp	r3, r2
 8006772:	f000 809a 	beq.w	80068aa <DMA_Init+0x3ba>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a7e      	ldr	r2, [pc, #504]	@ (8006974 <DMA_Init+0x484>)
 800677c:	4293      	cmp	r3, r2
 800677e:	f000 8094 	beq.w	80068aa <DMA_Init+0x3ba>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a7c      	ldr	r2, [pc, #496]	@ (8006978 <DMA_Init+0x488>)
 8006788:	4293      	cmp	r3, r2
 800678a:	f000 808e 	beq.w	80068aa <DMA_Init+0x3ba>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a7a      	ldr	r2, [pc, #488]	@ (800697c <DMA_Init+0x48c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	f000 8088 	beq.w	80068aa <DMA_Init+0x3ba>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a78      	ldr	r2, [pc, #480]	@ (8006980 <DMA_Init+0x490>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	f000 8082 	beq.w	80068aa <DMA_Init+0x3ba>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a76      	ldr	r2, [pc, #472]	@ (8006984 <DMA_Init+0x494>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d07c      	beq.n	80068aa <DMA_Init+0x3ba>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a74      	ldr	r2, [pc, #464]	@ (8006988 <DMA_Init+0x498>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d077      	beq.n	80068aa <DMA_Init+0x3ba>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a73      	ldr	r2, [pc, #460]	@ (800698c <DMA_Init+0x49c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d072      	beq.n	80068aa <DMA_Init+0x3ba>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a71      	ldr	r2, [pc, #452]	@ (8006990 <DMA_Init+0x4a0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d06d      	beq.n	80068aa <DMA_Init+0x3ba>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a70      	ldr	r2, [pc, #448]	@ (8006994 <DMA_Init+0x4a4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d068      	beq.n	80068aa <DMA_Init+0x3ba>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a6e      	ldr	r2, [pc, #440]	@ (8006998 <DMA_Init+0x4a8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d063      	beq.n	80068aa <DMA_Init+0x3ba>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a6d      	ldr	r2, [pc, #436]	@ (800699c <DMA_Init+0x4ac>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d05e      	beq.n	80068aa <DMA_Init+0x3ba>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a6b      	ldr	r2, [pc, #428]	@ (80069a0 <DMA_Init+0x4b0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d059      	beq.n	80068aa <DMA_Init+0x3ba>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a6a      	ldr	r2, [pc, #424]	@ (80069a4 <DMA_Init+0x4b4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d054      	beq.n	80068aa <DMA_Init+0x3ba>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a68      	ldr	r2, [pc, #416]	@ (80069a8 <DMA_Init+0x4b8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d04f      	beq.n	80068aa <DMA_Init+0x3ba>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a67      	ldr	r2, [pc, #412]	@ (80069ac <DMA_Init+0x4bc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d04a      	beq.n	80068aa <DMA_Init+0x3ba>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a65      	ldr	r2, [pc, #404]	@ (80069b0 <DMA_Init+0x4c0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d045      	beq.n	80068aa <DMA_Init+0x3ba>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a64      	ldr	r2, [pc, #400]	@ (80069b4 <DMA_Init+0x4c4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d040      	beq.n	80068aa <DMA_Init+0x3ba>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a62      	ldr	r2, [pc, #392]	@ (80069b8 <DMA_Init+0x4c8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d03b      	beq.n	80068aa <DMA_Init+0x3ba>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a61      	ldr	r2, [pc, #388]	@ (80069bc <DMA_Init+0x4cc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d036      	beq.n	80068aa <DMA_Init+0x3ba>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a5f      	ldr	r2, [pc, #380]	@ (80069c0 <DMA_Init+0x4d0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d031      	beq.n	80068aa <DMA_Init+0x3ba>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a5e      	ldr	r2, [pc, #376]	@ (80069c4 <DMA_Init+0x4d4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d02c      	beq.n	80068aa <DMA_Init+0x3ba>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a5c      	ldr	r2, [pc, #368]	@ (80069c8 <DMA_Init+0x4d8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d027      	beq.n	80068aa <DMA_Init+0x3ba>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a5b      	ldr	r2, [pc, #364]	@ (80069cc <DMA_Init+0x4dc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d022      	beq.n	80068aa <DMA_Init+0x3ba>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a59      	ldr	r2, [pc, #356]	@ (80069d0 <DMA_Init+0x4e0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01d      	beq.n	80068aa <DMA_Init+0x3ba>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a58      	ldr	r2, [pc, #352]	@ (80069d4 <DMA_Init+0x4e4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d018      	beq.n	80068aa <DMA_Init+0x3ba>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a56      	ldr	r2, [pc, #344]	@ (80069d8 <DMA_Init+0x4e8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d013      	beq.n	80068aa <DMA_Init+0x3ba>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a55      	ldr	r2, [pc, #340]	@ (80069dc <DMA_Init+0x4ec>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00e      	beq.n	80068aa <DMA_Init+0x3ba>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a53      	ldr	r2, [pc, #332]	@ (80069e0 <DMA_Init+0x4f0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d009      	beq.n	80068aa <DMA_Init+0x3ba>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a52      	ldr	r2, [pc, #328]	@ (80069e4 <DMA_Init+0x4f4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d004      	beq.n	80068aa <DMA_Init+0x3ba>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a50      	ldr	r2, [pc, #320]	@ (80069e8 <DMA_Init+0x4f8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d101      	bne.n	80068ae <DMA_Init+0x3be>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <DMA_Init+0x3c0>
 80068ae:	2300      	movs	r3, #0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00d      	beq.n	80068d0 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	e008      	b.n	80068d0 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068c6:	d103      	bne.n	80068d0 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068ce:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068d6:	4b45      	ldr	r3, [pc, #276]	@ (80069ec <DMA_Init+0x4fc>)
 80068d8:	4013      	ands	r3, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	68f9      	ldr	r1, [r7, #12]
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2200      	movs	r2, #0
 80068ea:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a36      	ldr	r2, [pc, #216]	@ (80069cc <DMA_Init+0x4dc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d022      	beq.n	800693c <DMA_Init+0x44c>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a35      	ldr	r2, [pc, #212]	@ (80069d0 <DMA_Init+0x4e0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d01d      	beq.n	800693c <DMA_Init+0x44c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a33      	ldr	r2, [pc, #204]	@ (80069d4 <DMA_Init+0x4e4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d018      	beq.n	800693c <DMA_Init+0x44c>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a32      	ldr	r2, [pc, #200]	@ (80069d8 <DMA_Init+0x4e8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <DMA_Init+0x44c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a30      	ldr	r2, [pc, #192]	@ (80069dc <DMA_Init+0x4ec>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00e      	beq.n	800693c <DMA_Init+0x44c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2f      	ldr	r2, [pc, #188]	@ (80069e0 <DMA_Init+0x4f0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d009      	beq.n	800693c <DMA_Init+0x44c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2d      	ldr	r2, [pc, #180]	@ (80069e4 <DMA_Init+0x4f4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <DMA_Init+0x44c>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2c      	ldr	r2, [pc, #176]	@ (80069e8 <DMA_Init+0x4f8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d101      	bne.n	8006940 <DMA_Init+0x450>
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <DMA_Init+0x452>
 8006940:	2300      	movs	r3, #0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2200      	movs	r2, #0
 800695c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40020050 	.word	0x40020050
 8006970:	50020050 	.word	0x50020050
 8006974:	400200d0 	.word	0x400200d0
 8006978:	500200d0 	.word	0x500200d0
 800697c:	40020150 	.word	0x40020150
 8006980:	50020150 	.word	0x50020150
 8006984:	400201d0 	.word	0x400201d0
 8006988:	500201d0 	.word	0x500201d0
 800698c:	40020250 	.word	0x40020250
 8006990:	50020250 	.word	0x50020250
 8006994:	400202d0 	.word	0x400202d0
 8006998:	500202d0 	.word	0x500202d0
 800699c:	40020350 	.word	0x40020350
 80069a0:	50020350 	.word	0x50020350
 80069a4:	400203d0 	.word	0x400203d0
 80069a8:	500203d0 	.word	0x500203d0
 80069ac:	40020450 	.word	0x40020450
 80069b0:	50020450 	.word	0x50020450
 80069b4:	400204d0 	.word	0x400204d0
 80069b8:	500204d0 	.word	0x500204d0
 80069bc:	40020550 	.word	0x40020550
 80069c0:	50020550 	.word	0x50020550
 80069c4:	400205d0 	.word	0x400205d0
 80069c8:	500205d0 	.word	0x500205d0
 80069cc:	40020650 	.word	0x40020650
 80069d0:	50020650 	.word	0x50020650
 80069d4:	400206d0 	.word	0x400206d0
 80069d8:	500206d0 	.word	0x500206d0
 80069dc:	40020750 	.word	0x40020750
 80069e0:	50020750 	.word	0x50020750
 80069e4:	400207d0 	.word	0x400207d0
 80069e8:	500207d0 	.word	0x500207d0
 80069ec:	3c803180 	.word	0x3c803180

080069f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e053      	b.n	8006aaa <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fb fd64 	bl	80024e4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006a2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6851      	ldr	r1, [r2, #4]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	69d2      	ldr	r2, [r2, #28]
 8006a3a:	4311      	orrs	r1, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	430b      	orrs	r3, r1
 8006a42:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4a:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8006a4e:	f023 0301 	bic.w	r3, r3, #1
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6891      	ldr	r1, [r2, #8]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6992      	ldr	r2, [r2, #24]
 8006a5a:	4311      	orrs	r1, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	0c1b      	lsrs	r3, r3, #16
 8006a6c:	041b      	lsls	r3, r3, #16
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68d1      	ldr	r1, [r2, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	430b      	orrs	r3, r1
 8006a78:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a80:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	051a      	lsls	r2, r3, #20
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	055b      	lsls	r3, r3, #21
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_DMA2D_ConfigLayer+0x24>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e092      	b.n	8006bfe <HAL_DMA2D_ConfigLayer+0x14a>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	4613      	mov	r3, r2
 8006aec:	00db      	lsls	r3, r3, #3
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	3328      	adds	r3, #40	@ 0x28
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	041b      	lsls	r3, r3, #16
 8006b04:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006b0c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006b18:	4b3c      	ldr	r3, [pc, #240]	@ (8006c0c <HAL_DMA2D_ConfigLayer+0x158>)
 8006b1a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b0a      	cmp	r3, #10
 8006b22:	d003      	beq.n	8006b2c <HAL_DMA2D_ConfigLayer+0x78>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b09      	cmp	r3, #9
 8006b2a:	d107      	bne.n	8006b3c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	e005      	b.n	8006b48 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d120      	bne.n	8006b90 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	43db      	mvns	r3, r3
 8006b58:	ea02 0103 	and.w	r1, r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	6812      	ldr	r2, [r2, #0]
 8006b6e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b0a      	cmp	r3, #10
 8006b76:	d003      	beq.n	8006b80 <HAL_DMA2D_ConfigLayer+0xcc>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b09      	cmp	r3, #9
 8006b7e:	d135      	bne.n	8006bec <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006b8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b8e:	e02d      	b.n	8006bec <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2b0b      	cmp	r3, #11
 8006b96:	d109      	bne.n	8006bac <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	049b      	lsls	r3, r3, #18
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006baa:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69da      	ldr	r2, [r3, #28]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	ea02 0103 	and.w	r1, r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2b0a      	cmp	r3, #10
 8006bd4:	d003      	beq.n	8006bde <HAL_DMA2D_ConfigLayer+0x12a>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b09      	cmp	r3, #9
 8006bdc:	d106      	bne.n	8006bec <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006bea:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	ff33000f 	.word	0xff33000f

08006c10 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006c18:	f7fc fc88 	bl	800352c <HAL_GetTick>
 8006c1c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e0db      	b.n	8006de0 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8006de8 <HAL_DMAEx_List_Init+0x1d8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	f000 809f 	beq.w	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a6c      	ldr	r2, [pc, #432]	@ (8006dec <HAL_DMAEx_List_Init+0x1dc>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	f000 8099 	beq.w	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a6a      	ldr	r2, [pc, #424]	@ (8006df0 <HAL_DMAEx_List_Init+0x1e0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	f000 8093 	beq.w	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a68      	ldr	r2, [pc, #416]	@ (8006df4 <HAL_DMAEx_List_Init+0x1e4>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	f000 808d 	beq.w	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a66      	ldr	r2, [pc, #408]	@ (8006df8 <HAL_DMAEx_List_Init+0x1e8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	f000 8087 	beq.w	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a64      	ldr	r2, [pc, #400]	@ (8006dfc <HAL_DMAEx_List_Init+0x1ec>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	f000 8081 	beq.w	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a62      	ldr	r2, [pc, #392]	@ (8006e00 <HAL_DMAEx_List_Init+0x1f0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d07b      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a61      	ldr	r2, [pc, #388]	@ (8006e04 <HAL_DMAEx_List_Init+0x1f4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d076      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a5f      	ldr	r2, [pc, #380]	@ (8006e08 <HAL_DMAEx_List_Init+0x1f8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d071      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a5e      	ldr	r2, [pc, #376]	@ (8006e0c <HAL_DMAEx_List_Init+0x1fc>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d06c      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a5c      	ldr	r2, [pc, #368]	@ (8006e10 <HAL_DMAEx_List_Init+0x200>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d067      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8006e14 <HAL_DMAEx_List_Init+0x204>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d062      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a59      	ldr	r2, [pc, #356]	@ (8006e18 <HAL_DMAEx_List_Init+0x208>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d05d      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a58      	ldr	r2, [pc, #352]	@ (8006e1c <HAL_DMAEx_List_Init+0x20c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d058      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a56      	ldr	r2, [pc, #344]	@ (8006e20 <HAL_DMAEx_List_Init+0x210>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d053      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a55      	ldr	r2, [pc, #340]	@ (8006e24 <HAL_DMAEx_List_Init+0x214>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d04e      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a53      	ldr	r2, [pc, #332]	@ (8006e28 <HAL_DMAEx_List_Init+0x218>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d049      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a52      	ldr	r2, [pc, #328]	@ (8006e2c <HAL_DMAEx_List_Init+0x21c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d044      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a50      	ldr	r2, [pc, #320]	@ (8006e30 <HAL_DMAEx_List_Init+0x220>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d03f      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a4f      	ldr	r2, [pc, #316]	@ (8006e34 <HAL_DMAEx_List_Init+0x224>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d03a      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a4d      	ldr	r2, [pc, #308]	@ (8006e38 <HAL_DMAEx_List_Init+0x228>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d035      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8006e3c <HAL_DMAEx_List_Init+0x22c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d030      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a4a      	ldr	r2, [pc, #296]	@ (8006e40 <HAL_DMAEx_List_Init+0x230>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d02b      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a49      	ldr	r2, [pc, #292]	@ (8006e44 <HAL_DMAEx_List_Init+0x234>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d026      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a47      	ldr	r2, [pc, #284]	@ (8006e48 <HAL_DMAEx_List_Init+0x238>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d021      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a46      	ldr	r2, [pc, #280]	@ (8006e4c <HAL_DMAEx_List_Init+0x23c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d01c      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a44      	ldr	r2, [pc, #272]	@ (8006e50 <HAL_DMAEx_List_Init+0x240>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d017      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a43      	ldr	r2, [pc, #268]	@ (8006e54 <HAL_DMAEx_List_Init+0x244>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d012      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a41      	ldr	r2, [pc, #260]	@ (8006e58 <HAL_DMAEx_List_Init+0x248>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00d      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a40      	ldr	r2, [pc, #256]	@ (8006e5c <HAL_DMAEx_List_Init+0x24c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d008      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a3e      	ldr	r2, [pc, #248]	@ (8006e60 <HAL_DMAEx_List_Init+0x250>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d003      	beq.n	8006d72 <HAL_DMAEx_List_Init+0x162>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8006e64 <HAL_DMAEx_List_Init+0x254>)
 8006d70:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0206 	orr.w	r2, r2, #6
 8006d90:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006d92:	e00f      	b.n	8006db4 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006d94:	f7fc fbca 	bl	800352c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b05      	cmp	r3, #5
 8006da0:	d908      	bls.n	8006db4 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2210      	movs	r2, #16
 8006da6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2203      	movs	r2, #3
 8006dac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e015      	b.n	8006de0 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e8      	bne.n	8006d94 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fb16 	bl	80073f4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40020050 	.word	0x40020050
 8006dec:	50020050 	.word	0x50020050
 8006df0:	400200d0 	.word	0x400200d0
 8006df4:	500200d0 	.word	0x500200d0
 8006df8:	40020150 	.word	0x40020150
 8006dfc:	50020150 	.word	0x50020150
 8006e00:	400201d0 	.word	0x400201d0
 8006e04:	500201d0 	.word	0x500201d0
 8006e08:	40020250 	.word	0x40020250
 8006e0c:	50020250 	.word	0x50020250
 8006e10:	400202d0 	.word	0x400202d0
 8006e14:	500202d0 	.word	0x500202d0
 8006e18:	40020350 	.word	0x40020350
 8006e1c:	50020350 	.word	0x50020350
 8006e20:	400203d0 	.word	0x400203d0
 8006e24:	500203d0 	.word	0x500203d0
 8006e28:	40020450 	.word	0x40020450
 8006e2c:	50020450 	.word	0x50020450
 8006e30:	400204d0 	.word	0x400204d0
 8006e34:	500204d0 	.word	0x500204d0
 8006e38:	40020550 	.word	0x40020550
 8006e3c:	50020550 	.word	0x50020550
 8006e40:	400205d0 	.word	0x400205d0
 8006e44:	500205d0 	.word	0x500205d0
 8006e48:	40020650 	.word	0x40020650
 8006e4c:	50020650 	.word	0x50020650
 8006e50:	400206d0 	.word	0x400206d0
 8006e54:	500206d0 	.word	0x500206d0
 8006e58:	40020750 	.word	0x40020750
 8006e5c:	50020750 	.word	0x50020750
 8006e60:	400207d0 	.word	0x400207d0
 8006e64:	500207d0 	.word	0x500207d0

08006e68 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_DMAEx_List_Start_IT+0x16>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e082      	b.n	8006f88 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006e88:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e94:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d005      	beq.n	8006ea8 <HAL_DMAEx_List_Start_IT+0x40>
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d16a      	bne.n	8006f78 <HAL_DMAEx_List_Start_IT+0x110>
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d067      	beq.n	8006f78 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d157      	bne.n	8006f64 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_DMAEx_List_Start_IT+0x5a>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	e062      	b.n	8006f88 <HAL_DMAEx_List_Start_IT+0x120>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695a      	ldr	r2, [r3, #20]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006ef6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695a      	ldr	r2, [r3, #20]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f0e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f26:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f107 010c 	add.w	r1, r7, #12
 8006f32:	2200      	movs	r2, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fe7d 	bl	8007c34 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4619      	mov	r1, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	0c0b      	lsrs	r3, r1, #16
 8006f48:	041b      	lsls	r3, r3, #16
 8006f4a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006f58:	4013      	ands	r3, r2
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	430b      	orrs	r3, r1
 8006f62:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	695a      	ldr	r2, [r3, #20]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e007      	b.n	8006f88 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2240      	movs	r2, #64	@ 0x40
 8006f7c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <HAL_DMAEx_List_BuildNode+0x16>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e004      	b.n	8006fb4 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fb79 	bl	80076a4 <DMA_List_BuildNode>

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e004      	b.n	8006fe0 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fcb5 	bl	8007948 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08c      	sub	sp, #48	@ 0x30
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <HAL_DMAEx_List_InsertNode+0x18>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e0b6      	b.n	8007172 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d104      	bne.n	8007016 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2204      	movs	r2, #4
 8007010:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e0ad      	b.n	8007172 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	68b9      	ldr	r1, [r7, #8]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fd9c 	bl	8007b5c <DMA_List_CheckNodesBaseAddresses>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2205      	movs	r2, #5
 800702e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e09e      	b.n	8007172 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fdbd 	bl	8007bbc <DMA_List_CheckNodesTypes>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2204      	movs	r2, #4
 800704c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e08f      	b.n	8007172 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2202      	movs	r2, #2
 8007056:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800705e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8007062:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fde3 	bl	8007c34 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d11a      	bne.n	80070ac <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d106      	bne.n	800708a <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	609a      	str	r2, [r3, #8]
 8007088:	e06c      	b.n	8007164 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007096:	4013      	ands	r3, r2
 8007098:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800709a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800709c:	4319      	orrs	r1, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2202      	movs	r2, #2
 80070a8:	609a      	str	r2, [r3, #8]
 80070aa:	e05b      	b.n	8007164 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10f      	bne.n	80070d2 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80070bc:	4013      	ands	r3, r2
 80070be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070c2:	4319      	orrs	r1, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	e043      	b.n	800715a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80070d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d4:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80070d6:	f107 0314 	add.w	r3, r7, #20
 80070da:	461a      	mov	r2, r3
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fdd8 	bl	8007c94 <DMA_List_FindNode>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d132      	bne.n	8007150 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d11a      	bne.n	800712a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	461a      	mov	r2, r3
 8007102:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007106:	4013      	ands	r3, r2
 8007108:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800710a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800710c:	4319      	orrs	r1, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800711a:	4013      	ands	r3, r2
 800711c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800711e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007120:	4319      	orrs	r1, r3
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007128:	e017      	b.n	800715a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800712a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800712c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007140:	4013      	ands	r3, r2
 8007142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007146:	4319      	orrs	r1, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800714e:	e004      	b.n	800715a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2206      	movs	r2, #6
 8007154:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e00b      	b.n	8007172 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3730      	adds	r7, #48	@ 0x30
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b08a      	sub	sp, #40	@ 0x28
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e052      	b.n	8007232 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d104      	bne.n	800719e <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e049      	b.n	8007232 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d101      	bne.n	80071b6 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	e03d      	b.n	8007232 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2204      	movs	r2, #4
 80071ba:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e038      	b.n	8007232 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d104      	bne.n	80071d2 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2204      	movs	r2, #4
 80071cc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e02f      	b.n	8007232 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f107 0220 	add.w	r2, r7, #32
 80071e6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fd22 	bl	8007c34 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80071f4:	f107 030c 	add.w	r3, r7, #12
 80071f8:	461a      	mov	r2, r3
 80071fa:	2100      	movs	r1, #0
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fd49 	bl	8007c94 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800720c:	4013      	ands	r3, r2
 800720e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	4610      	mov	r0, r2
 8007214:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8007216:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007218:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3728      	adds	r7, #40	@ 0x28
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <HAL_DMAEx_List_LinkQ+0x16>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e072      	b.n	800733c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800725c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d002      	beq.n	8007270 <HAL_DMAEx_List_LinkQ+0x34>
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	2b05      	cmp	r3, #5
 800726e:	d108      	bne.n	8007282 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2240      	movs	r2, #64	@ 0x40
 8007274:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e05c      	b.n	800733c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	7b1b      	ldrb	r3, [r3, #12]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d104      	bne.n	8007296 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2201      	movs	r2, #1
 8007290:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e052      	b.n	800733c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a2b      	ldr	r2, [pc, #172]	@ (8007348 <HAL_DMAEx_List_LinkQ+0x10c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d022      	beq.n	80072e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a29      	ldr	r2, [pc, #164]	@ (800734c <HAL_DMAEx_List_LinkQ+0x110>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01d      	beq.n	80072e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a28      	ldr	r2, [pc, #160]	@ (8007350 <HAL_DMAEx_List_LinkQ+0x114>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d018      	beq.n	80072e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a26      	ldr	r2, [pc, #152]	@ (8007354 <HAL_DMAEx_List_LinkQ+0x118>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a25      	ldr	r2, [pc, #148]	@ (8007358 <HAL_DMAEx_List_LinkQ+0x11c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00e      	beq.n	80072e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a23      	ldr	r2, [pc, #140]	@ (800735c <HAL_DMAEx_List_LinkQ+0x120>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d009      	beq.n	80072e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a22      	ldr	r2, [pc, #136]	@ (8007360 <HAL_DMAEx_List_LinkQ+0x124>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d004      	beq.n	80072e6 <HAL_DMAEx_List_LinkQ+0xaa>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a20      	ldr	r2, [pc, #128]	@ (8007364 <HAL_DMAEx_List_LinkQ+0x128>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d101      	bne.n	80072ea <HAL_DMAEx_List_LinkQ+0xae>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e000      	b.n	80072ec <HAL_DMAEx_List_LinkQ+0xb0>
 80072ea:	2300      	movs	r3, #0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10b      	bne.n	8007308 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d004      	beq.n	8007308 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2203      	movs	r2, #3
 8007302:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e019      	b.n	800733c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800730c:	2b81      	cmp	r3, #129	@ 0x81
 800730e:	d108      	bne.n	8007322 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10d      	bne.n	8007334 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2204      	movs	r2, #4
 800731c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e00c      	b.n	800733c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d004      	beq.n	8007334 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2204      	movs	r2, #4
 800732e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e003      	b.n	800733c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	40020650 	.word	0x40020650
 800734c:	50020650 	.word	0x50020650
 8007350:	400206d0 	.word	0x400206d0
 8007354:	500206d0 	.word	0x500206d0
 8007358:	40020750 	.word	0x40020750
 800735c:	50020750 	.word	0x50020750
 8007360:	400207d0 	.word	0x400207d0
 8007364:	500207d0 	.word	0x500207d0

08007368 <HAL_DMAEx_ConfigTrigger>:
  * @param  pConfigTrigger : Pointer to a DMA_TriggerConfTypeDef structure that contains the trigger configuration.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigTrigger(DMA_HandleTypeDef *const hdma,
                                          DMA_TriggerConfTypeDef const *const pConfigTrigger)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  /* Check the DMA peripheral handle and trigger parameters */
  if ((hdma == NULL) || (pConfigTrigger == NULL))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <HAL_DMAEx_ConfigTrigger+0x16>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_DMAEx_ConfigTrigger+0x1a>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e023      	b.n	80073ca <HAL_DMAEx_ConfigTrigger+0x62>
  assert_param(IS_DMA_TRIGGER_POLARITY(pConfigTrigger->TriggerPolarity));
  assert_param(IS_DMA_TRIGGER_MODE(pConfigTrigger->TriggerMode));
  assert_param(IS_DMA_TRIGGER_SELECTION(pConfigTrigger->TriggerSelection));

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	d115      	bne.n	80073ba <HAL_DMAEx_ConfigTrigger+0x52>
  {
    MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM),
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007394:	f023 735f 	bic.w	r3, r3, #58458112	@ 0x37c0000
 8007398:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	6851      	ldr	r1, [r2, #4]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	4311      	orrs	r1, r2
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	6892      	ldr	r2, [r2, #8]
 80073aa:	0412      	lsls	r2, r2, #16
 80073ac:	4311      	orrs	r1, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	430b      	orrs	r3, r1
 80073b4:	6453      	str	r3, [r2, #68]	@ 0x44
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	e007      	b.n	80073ca <HAL_DMAEx_ConfigTrigger+0x62>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2240      	movs	r2, #64	@ 0x40
 80073be:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	0c1b      	lsrs	r3, r3, #16
 80073e6:	b2db      	uxtb	r3, r3
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007404:	4313      	orrs	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a85      	ldr	r2, [pc, #532]	@ (8007624 <DMA_List_Init+0x230>)
 800740e:	4293      	cmp	r3, r2
 8007410:	f000 80a0 	beq.w	8007554 <DMA_List_Init+0x160>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a83      	ldr	r2, [pc, #524]	@ (8007628 <DMA_List_Init+0x234>)
 800741a:	4293      	cmp	r3, r2
 800741c:	f000 809a 	beq.w	8007554 <DMA_List_Init+0x160>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a81      	ldr	r2, [pc, #516]	@ (800762c <DMA_List_Init+0x238>)
 8007426:	4293      	cmp	r3, r2
 8007428:	f000 8094 	beq.w	8007554 <DMA_List_Init+0x160>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a7f      	ldr	r2, [pc, #508]	@ (8007630 <DMA_List_Init+0x23c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	f000 808e 	beq.w	8007554 <DMA_List_Init+0x160>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a7d      	ldr	r2, [pc, #500]	@ (8007634 <DMA_List_Init+0x240>)
 800743e:	4293      	cmp	r3, r2
 8007440:	f000 8088 	beq.w	8007554 <DMA_List_Init+0x160>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a7b      	ldr	r2, [pc, #492]	@ (8007638 <DMA_List_Init+0x244>)
 800744a:	4293      	cmp	r3, r2
 800744c:	f000 8082 	beq.w	8007554 <DMA_List_Init+0x160>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a79      	ldr	r2, [pc, #484]	@ (800763c <DMA_List_Init+0x248>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d07c      	beq.n	8007554 <DMA_List_Init+0x160>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a78      	ldr	r2, [pc, #480]	@ (8007640 <DMA_List_Init+0x24c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d077      	beq.n	8007554 <DMA_List_Init+0x160>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a76      	ldr	r2, [pc, #472]	@ (8007644 <DMA_List_Init+0x250>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d072      	beq.n	8007554 <DMA_List_Init+0x160>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a75      	ldr	r2, [pc, #468]	@ (8007648 <DMA_List_Init+0x254>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d06d      	beq.n	8007554 <DMA_List_Init+0x160>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a73      	ldr	r2, [pc, #460]	@ (800764c <DMA_List_Init+0x258>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d068      	beq.n	8007554 <DMA_List_Init+0x160>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a72      	ldr	r2, [pc, #456]	@ (8007650 <DMA_List_Init+0x25c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d063      	beq.n	8007554 <DMA_List_Init+0x160>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a70      	ldr	r2, [pc, #448]	@ (8007654 <DMA_List_Init+0x260>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d05e      	beq.n	8007554 <DMA_List_Init+0x160>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a6f      	ldr	r2, [pc, #444]	@ (8007658 <DMA_List_Init+0x264>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d059      	beq.n	8007554 <DMA_List_Init+0x160>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a6d      	ldr	r2, [pc, #436]	@ (800765c <DMA_List_Init+0x268>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d054      	beq.n	8007554 <DMA_List_Init+0x160>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a6c      	ldr	r2, [pc, #432]	@ (8007660 <DMA_List_Init+0x26c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d04f      	beq.n	8007554 <DMA_List_Init+0x160>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a6a      	ldr	r2, [pc, #424]	@ (8007664 <DMA_List_Init+0x270>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d04a      	beq.n	8007554 <DMA_List_Init+0x160>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a69      	ldr	r2, [pc, #420]	@ (8007668 <DMA_List_Init+0x274>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d045      	beq.n	8007554 <DMA_List_Init+0x160>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a67      	ldr	r2, [pc, #412]	@ (800766c <DMA_List_Init+0x278>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d040      	beq.n	8007554 <DMA_List_Init+0x160>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a66      	ldr	r2, [pc, #408]	@ (8007670 <DMA_List_Init+0x27c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d03b      	beq.n	8007554 <DMA_List_Init+0x160>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a64      	ldr	r2, [pc, #400]	@ (8007674 <DMA_List_Init+0x280>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d036      	beq.n	8007554 <DMA_List_Init+0x160>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a63      	ldr	r2, [pc, #396]	@ (8007678 <DMA_List_Init+0x284>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d031      	beq.n	8007554 <DMA_List_Init+0x160>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a61      	ldr	r2, [pc, #388]	@ (800767c <DMA_List_Init+0x288>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d02c      	beq.n	8007554 <DMA_List_Init+0x160>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a60      	ldr	r2, [pc, #384]	@ (8007680 <DMA_List_Init+0x28c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d027      	beq.n	8007554 <DMA_List_Init+0x160>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a5e      	ldr	r2, [pc, #376]	@ (8007684 <DMA_List_Init+0x290>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d022      	beq.n	8007554 <DMA_List_Init+0x160>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a5d      	ldr	r2, [pc, #372]	@ (8007688 <DMA_List_Init+0x294>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d01d      	beq.n	8007554 <DMA_List_Init+0x160>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a5b      	ldr	r2, [pc, #364]	@ (800768c <DMA_List_Init+0x298>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d018      	beq.n	8007554 <DMA_List_Init+0x160>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a5a      	ldr	r2, [pc, #360]	@ (8007690 <DMA_List_Init+0x29c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d013      	beq.n	8007554 <DMA_List_Init+0x160>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a58      	ldr	r2, [pc, #352]	@ (8007694 <DMA_List_Init+0x2a0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00e      	beq.n	8007554 <DMA_List_Init+0x160>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a57      	ldr	r2, [pc, #348]	@ (8007698 <DMA_List_Init+0x2a4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d009      	beq.n	8007554 <DMA_List_Init+0x160>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a55      	ldr	r2, [pc, #340]	@ (800769c <DMA_List_Init+0x2a8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <DMA_List_Init+0x160>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a54      	ldr	r2, [pc, #336]	@ (80076a0 <DMA_List_Init+0x2ac>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d101      	bne.n	8007558 <DMA_List_Init+0x164>
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <DMA_List_Init+0x166>
 8007558:	2300      	movs	r3, #0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4313      	orrs	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	430a      	orrs	r2, r1
 800757a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2200      	movs	r2, #0
 8007582:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800758c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a36      	ldr	r2, [pc, #216]	@ (8007684 <DMA_List_Init+0x290>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d022      	beq.n	80075f6 <DMA_List_Init+0x202>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a34      	ldr	r2, [pc, #208]	@ (8007688 <DMA_List_Init+0x294>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d01d      	beq.n	80075f6 <DMA_List_Init+0x202>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a33      	ldr	r2, [pc, #204]	@ (800768c <DMA_List_Init+0x298>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d018      	beq.n	80075f6 <DMA_List_Init+0x202>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a31      	ldr	r2, [pc, #196]	@ (8007690 <DMA_List_Init+0x29c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <DMA_List_Init+0x202>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a30      	ldr	r2, [pc, #192]	@ (8007694 <DMA_List_Init+0x2a0>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00e      	beq.n	80075f6 <DMA_List_Init+0x202>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a2e      	ldr	r2, [pc, #184]	@ (8007698 <DMA_List_Init+0x2a4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d009      	beq.n	80075f6 <DMA_List_Init+0x202>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a2d      	ldr	r2, [pc, #180]	@ (800769c <DMA_List_Init+0x2a8>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d004      	beq.n	80075f6 <DMA_List_Init+0x202>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a2b      	ldr	r2, [pc, #172]	@ (80076a0 <DMA_List_Init+0x2ac>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d101      	bne.n	80075fa <DMA_List_Init+0x206>
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <DMA_List_Init+0x208>
 80075fa:	2300      	movs	r3, #0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d007      	beq.n	8007610 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2200      	movs	r2, #0
 8007606:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2200      	movs	r2, #0
 800760e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2200      	movs	r2, #0
 8007616:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007618:	bf00      	nop
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	40020050 	.word	0x40020050
 8007628:	50020050 	.word	0x50020050
 800762c:	400200d0 	.word	0x400200d0
 8007630:	500200d0 	.word	0x500200d0
 8007634:	40020150 	.word	0x40020150
 8007638:	50020150 	.word	0x50020150
 800763c:	400201d0 	.word	0x400201d0
 8007640:	500201d0 	.word	0x500201d0
 8007644:	40020250 	.word	0x40020250
 8007648:	50020250 	.word	0x50020250
 800764c:	400202d0 	.word	0x400202d0
 8007650:	500202d0 	.word	0x500202d0
 8007654:	40020350 	.word	0x40020350
 8007658:	50020350 	.word	0x50020350
 800765c:	400203d0 	.word	0x400203d0
 8007660:	500203d0 	.word	0x500203d0
 8007664:	40020450 	.word	0x40020450
 8007668:	50020450 	.word	0x50020450
 800766c:	400204d0 	.word	0x400204d0
 8007670:	500204d0 	.word	0x500204d0
 8007674:	40020550 	.word	0x40020550
 8007678:	50020550 	.word	0x50020550
 800767c:	400205d0 	.word	0x400205d0
 8007680:	500205d0 	.word	0x500205d0
 8007684:	40020650 	.word	0x40020650
 8007688:	50020650 	.word	0x50020650
 800768c:	400206d0 	.word	0x400206d0
 8007690:	500206d0 	.word	0x500206d0
 8007694:	40020750 	.word	0x40020750
 8007698:	50020750 	.word	0x50020750
 800769c:	400207d0 	.word	0x400207d0
 80076a0:	500207d0 	.word	0x500207d0

080076a4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80076b6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80076bc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80076c2:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80076c8:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d017      	beq.n	800770a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ec:	3b01      	subs	r3, #1
 80076ee:	051b      	lsls	r3, r3, #20
 80076f0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80076f4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fa:	3b01      	subs	r3, #1
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007702:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007704:	431a      	orrs	r2, r3
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6859      	ldr	r1, [r3, #4]
 8007712:	f240 237f 	movw	r3, #639	@ 0x27f
 8007716:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007718:	431a      	orrs	r2, r3
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007726:	d10c      	bne.n	8007742 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	d011      	beq.n	8007758 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	605a      	str	r2, [r3, #4]
 8007740:	e00a      	b.n	8007758 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800774a:	d105      	bne.n	8007758 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00f      	beq.n	8007780 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800776c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007772:	041b      	lsls	r3, r3, #16
 8007774:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007778:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800777a:	431a      	orrs	r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007784:	b29a      	uxth	r2, r3
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d04e      	beq.n	8007834 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779e:	3b01      	subs	r3, #1
 80077a0:	0419      	lsls	r1, r3, #16
 80077a2:	4b67      	ldr	r3, [pc, #412]	@ (8007940 <DMA_List_BuildNode+0x29c>)
 80077a4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80077a6:	431a      	orrs	r2, r3
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	da06      	bge.n	80077c2 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	609a      	str	r2, [r3, #8]
 80077c0:	e005      	b.n	80077ce <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da06      	bge.n	80077e4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	609a      	str	r2, [r3, #8]
 80077e2:	e005      	b.n	80077f0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da06      	bge.n	8007806 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	609a      	str	r2, [r3, #8]
 8007804:	e005      	b.n	8007812 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007816:	2b00      	cmp	r3, #0
 8007818:	da06      	bge.n	8007828 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	609a      	str	r2, [r3, #8]
 8007826:	e005      	b.n	8007834 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d059      	beq.n	8007904 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007854:	2b00      	cmp	r3, #0
 8007856:	da09      	bge.n	800786c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800785c:	425b      	negs	r3, r3
 800785e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	615a      	str	r2, [r3, #20]
 800786a:	e005      	b.n	8007878 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007870:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787c:	2b00      	cmp	r3, #0
 800787e:	da0d      	bge.n	800789c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007884:	425b      	negs	r3, r3
 8007886:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	695a      	ldr	r2, [r3, #20]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	0419      	lsls	r1, r3, #16
 8007890:	4b2c      	ldr	r3, [pc, #176]	@ (8007944 <DMA_List_BuildNode+0x2a0>)
 8007892:	400b      	ands	r3, r1
 8007894:	431a      	orrs	r2, r3
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	615a      	str	r2, [r3, #20]
 800789a:	e009      	b.n	80078b0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a4:	0419      	lsls	r1, r3, #16
 80078a6:	4b27      	ldr	r3, [pc, #156]	@ (8007944 <DMA_List_BuildNode+0x2a0>)
 80078a8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80078aa:	431a      	orrs	r2, r3
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	da08      	bge.n	80078ca <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078bc:	425b      	negs	r3, r3
 80078be:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	619a      	str	r2, [r3, #24]
 80078c8:	e004      	b.n	80078d4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ce:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	da0b      	bge.n	80078f4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078e0:	425b      	negs	r3, r3
 80078e2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80078ec:	431a      	orrs	r2, r3
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	619a      	str	r2, [r3, #24]
 80078f2:	e007      	b.n	8007904 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078fc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80078fe:	431a      	orrs	r2, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d006      	beq.n	8007926 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007924:	e005      	b.n	8007932 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	621a      	str	r2, [r3, #32]
}
 8007932:	bf00      	nop
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	07ff0000 	.word	0x07ff0000
 8007944:	1fff0000 	.word	0x1fff0000

08007948 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0208 	and.w	r2, r3, #8
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0203 	and.w	r2, r3, #3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8007990:	091b      	lsrs	r3, r3, #4
 8007992:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007996:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80079a0:	0d1b      	lsrs	r3, r3, #20
 80079a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079a6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	4b66      	ldr	r3, [pc, #408]	@ (8007b58 <DMA_List_GetNodeConfig+0x210>)
 80079be:	4013      	ands	r3, r2
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d008      	beq.n	80079ee <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079e2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079ea:	60da      	str	r2, [r3, #12]
 80079ec:	e013      	b.n	8007a16 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d004      	beq.n	8007a10 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a0c:	60da      	str	r2, [r3, #12]
 8007a0e:	e002      	b.n	8007a16 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8007a3e:	0c1b      	lsrs	r3, r3, #16
 8007a40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	0c1b      	lsrs	r3, r3, #16
 8007a70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a74:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007a7a:	e002      	b.n	8007a82 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d04a      	beq.n	8007b34 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007aa8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8007aaa:	89fa      	ldrh	r2, [r7, #14]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	0c1b      	lsrs	r3, r3, #16
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007abc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8007abe:	89fa      	ldrh	r2, [r7, #14]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad4:	425a      	negs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aea:	425a      	negs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007af6:	89fa      	ldrh	r2, [r7, #14]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	0c1b      	lsrs	r3, r3, #16
 8007b02:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007b04:	89fa      	ldrh	r2, [r7, #14]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b1a:	425a      	negs	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	da11      	bge.n	8007b4c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b2c:	425a      	negs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8007b32:	e00b      	b.n	8007b4c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007b4c:	bf00      	nop
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	0c002000 	.word	0x0c002000

08007b5c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	0c1b      	lsrs	r3, r3, #16
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	e00a      	b.n	8007b9e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	e004      	b.n	8007b9e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	0c1b      	lsrs	r3, r3, #16
 8007ba2:	041b      	lsls	r3, r3, #16
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d001      	beq.n	8007bae <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	371c      	adds	r7, #28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d004      	beq.n	8007bdc <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	617b      	str	r3, [r7, #20]
 8007bda:	e00e      	b.n	8007bfa <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	e006      	b.n	8007bfa <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d007      	beq.n	8007c10 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d001      	beq.n	8007c10 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e00b      	b.n	8007c28 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d001      	beq.n	8007c26 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e000      	b.n	8007c28 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00c      	beq.n	8007c66 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4a0d      	ldr	r2, [pc, #52]	@ (8007c8c <DMA_List_GetCLLRNodeInfo+0x58>)
 8007c56:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00f      	beq.n	8007c7e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2207      	movs	r2, #7
 8007c62:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007c64:	e00b      	b.n	8007c7e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4a08      	ldr	r2, [pc, #32]	@ (8007c90 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007c70:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2205      	movs	r2, #5
 8007c7c:	601a      	str	r2, [r3, #0]
}
 8007c7e:	bf00      	nop
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	fe010000 	.word	0xfe010000
 8007c90:	f8010000 	.word	0xf8010000

08007c94 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b089      	sub	sp, #36	@ 0x24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d142      	bne.n	8007d3e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007cb8:	e01d      	b.n	8007cf6 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d107      	bne.n	8007cd0 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007cca:	4013      	ands	r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	e00f      	b.n	8007cf0 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	0c1b      	lsrs	r3, r3, #16
 8007cda:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	4413      	add	r3, r2
 8007ce0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007ce8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007cec:	4013      	ands	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d3dc      	bcc.n	8007cba <DMA_List_FindNode+0x26>
 8007d00:	e029      	b.n	8007d56 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d107      	bne.n	8007d18 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007d12:	4013      	ands	r3, r2
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	e00f      	b.n	8007d38 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	0c1b      	lsrs	r3, r3, #16
 8007d22:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	4413      	add	r3, r2
 8007d28:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007d30:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007d34:	4013      	ands	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	69fa      	ldr	r2, [r7, #28]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d206      	bcs.n	8007d56 <DMA_List_FindNode+0xc2>
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007d4e:	4013      	ands	r3, r2
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d1d5      	bne.n	8007d02 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007d62:	4013      	ands	r3, r2
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d001      	beq.n	8007d6e <DMA_List_FindNode+0xda>
    {
      return 1U;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e02b      	b.n	8007dc6 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	69fa      	ldr	r2, [r7, #28]
 8007d72:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	0c1b      	lsrs	r3, r3, #16
 8007d7a:	041b      	lsls	r3, r3, #16
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	0c1b      	lsrs	r3, r3, #16
 8007d8a:	041b      	lsls	r3, r3, #16
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00f      	beq.n	8007dc4 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	461a      	mov	r2, r3
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007db4:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	0c1b      	lsrs	r3, r3, #16
 8007dbc:	041b      	lsls	r3, r3, #16
 8007dbe:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3724      	adds	r7, #36	@ 0x24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
	...

08007dd4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b089      	sub	sp, #36	@ 0x24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007de6:	e1ba      	b.n	800815e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	2101      	movs	r1, #1
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	fa01 f303 	lsl.w	r3, r1, r3
 8007df4:	4013      	ands	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 81aa 	beq.w	8008158 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a55      	ldr	r2, [pc, #340]	@ (8007f5c <HAL_GPIO_Init+0x188>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d15d      	bne.n	8007ec8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007e12:	2201      	movs	r2, #1
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	69fa      	ldr	r2, [r7, #28]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f003 0201 	and.w	r2, r3, #1
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007e3c:	4a48      	ldr	r2, [pc, #288]	@ (8007f60 <HAL_GPIO_Init+0x18c>)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e44:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007e46:	4a46      	ldr	r2, [pc, #280]	@ (8007f60 <HAL_GPIO_Init+0x18c>)
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	4413      	add	r3, r2
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	08da      	lsrs	r2, r3, #3
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	3208      	adds	r2, #8
 8007e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	220f      	movs	r2, #15
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	4013      	ands	r3, r2
 8007e74:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	220b      	movs	r2, #11
 8007e80:	fa02 f303 	lsl.w	r3, r2, r3
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	08da      	lsrs	r2, r3, #3
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	3208      	adds	r2, #8
 8007e92:	69f9      	ldr	r1, [r7, #28]
 8007e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea8:	43db      	mvns	r3, r3
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	4013      	ands	r3, r2
 8007eae:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	69fa      	ldr	r2, [r7, #28]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	e067      	b.n	8007f98 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d003      	beq.n	8007ed8 <HAL_GPIO_Init+0x104>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2b12      	cmp	r3, #18
 8007ed6:	d145      	bne.n	8007f64 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	08da      	lsrs	r2, r3, #3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3208      	adds	r2, #8
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	220f      	movs	r2, #15
 8007ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef4:	43db      	mvns	r3, r3
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f003 020f 	and.w	r2, r3, #15
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	08da      	lsrs	r2, r3, #3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3208      	adds	r2, #8
 8007f1e:	69f9      	ldr	r1, [r7, #28]
 8007f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	2203      	movs	r2, #3
 8007f30:	fa02 f303 	lsl.w	r3, r2, r3
 8007f34:	43db      	mvns	r3, r3
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f003 0203 	and.w	r2, r3, #3
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4c:	69fa      	ldr	r2, [r7, #28]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	69fa      	ldr	r2, [r7, #28]
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	e01e      	b.n	8007f98 <HAL_GPIO_Init+0x1c4>
 8007f5a:	bf00      	nop
 8007f5c:	46020000 	.word	0x46020000
 8007f60:	0801251c 	.word	0x0801251c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	2203      	movs	r2, #3
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	43db      	mvns	r3, r3
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f003 0203 	and.w	r2, r3, #3
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d00b      	beq.n	8007fb8 <HAL_GPIO_Init+0x1e4>
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d007      	beq.n	8007fb8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007fac:	2b11      	cmp	r3, #17
 8007fae:	d003      	beq.n	8007fb8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	2b12      	cmp	r3, #18
 8007fb6:	d130      	bne.n	800801a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc8:	43db      	mvns	r3, r3
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007fee:	2201      	movs	r2, #1
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff6:	43db      	mvns	r3, r3
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	091b      	lsrs	r3, r3, #4
 8008004:	f003 0201 	and.w	r2, r3, #1
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	4313      	orrs	r3, r2
 8008012:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2b03      	cmp	r3, #3
 8008020:	d017      	beq.n	8008052 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	2203      	movs	r2, #3
 800802e:	fa02 f303 	lsl.w	r3, r2, r3
 8008032:	43db      	mvns	r3, r3
 8008034:	69fa      	ldr	r2, [r7, #28]
 8008036:	4013      	ands	r3, r2
 8008038:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	005b      	lsls	r3, r3, #1
 8008042:	fa02 f303 	lsl.w	r3, r2, r3
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	4313      	orrs	r3, r2
 800804a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d07c      	beq.n	8008158 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800805e:	4a47      	ldr	r2, [pc, #284]	@ (800817c <HAL_GPIO_Init+0x3a8>)
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	089b      	lsrs	r3, r3, #2
 8008064:	3318      	adds	r3, #24
 8008066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800806a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	220f      	movs	r2, #15
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	43db      	mvns	r3, r3
 800807c:	69fa      	ldr	r2, [r7, #28]
 800807e:	4013      	ands	r3, r2
 8008080:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	0a9a      	lsrs	r2, r3, #10
 8008086:	4b3e      	ldr	r3, [pc, #248]	@ (8008180 <HAL_GPIO_Init+0x3ac>)
 8008088:	4013      	ands	r3, r2
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	f002 0203 	and.w	r2, r2, #3
 8008090:	00d2      	lsls	r2, r2, #3
 8008092:	4093      	lsls	r3, r2
 8008094:	69fa      	ldr	r2, [r7, #28]
 8008096:	4313      	orrs	r3, r2
 8008098:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800809a:	4938      	ldr	r1, [pc, #224]	@ (800817c <HAL_GPIO_Init+0x3a8>)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	089b      	lsrs	r3, r3, #2
 80080a0:	3318      	adds	r3, #24
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80080a8:	4b34      	ldr	r3, [pc, #208]	@ (800817c <HAL_GPIO_Init+0x3a8>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	43db      	mvns	r3, r3
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	4013      	ands	r3, r2
 80080b6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80080c4:	69fa      	ldr	r2, [r7, #28]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80080cc:	4a2b      	ldr	r2, [pc, #172]	@ (800817c <HAL_GPIO_Init+0x3a8>)
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80080d2:	4b2a      	ldr	r3, [pc, #168]	@ (800817c <HAL_GPIO_Init+0x3a8>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	43db      	mvns	r3, r3
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	4013      	ands	r3, r2
 80080e0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80080ee:	69fa      	ldr	r2, [r7, #28]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80080f6:	4a21      	ldr	r2, [pc, #132]	@ (800817c <HAL_GPIO_Init+0x3a8>)
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80080fc:	4b1f      	ldr	r3, [pc, #124]	@ (800817c <HAL_GPIO_Init+0x3a8>)
 80080fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008102:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	43db      	mvns	r3, r3
 8008108:	69fa      	ldr	r2, [r7, #28]
 800810a:	4013      	ands	r3, r2
 800810c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8008122:	4a16      	ldr	r2, [pc, #88]	@ (800817c <HAL_GPIO_Init+0x3a8>)
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800812a:	4b14      	ldr	r3, [pc, #80]	@ (800817c <HAL_GPIO_Init+0x3a8>)
 800812c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008130:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	43db      	mvns	r3, r3
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	4013      	ands	r3, r2
 800813a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8008148:	69fa      	ldr	r2, [r7, #28]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4313      	orrs	r3, r2
 800814e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8008150:	4a0a      	ldr	r2, [pc, #40]	@ (800817c <HAL_GPIO_Init+0x3a8>)
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	3301      	adds	r3, #1
 800815c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	fa22 f303 	lsr.w	r3, r2, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	f47f ae3d 	bne.w	8007de8 <HAL_GPIO_Init+0x14>
  }
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	3724      	adds	r7, #36	@ 0x24
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	46022000 	.word	0x46022000
 8008180:	002f7f7f 	.word	0x002f7f7f

08008184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	807b      	strh	r3, [r7, #2]
 8008190:	4613      	mov	r3, r2
 8008192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008194:	787b      	ldrb	r3, [r7, #1]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800819a:	887a      	ldrh	r2, [r7, #2]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80081a0:	e002      	b.n	80081a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80081a2:	887a      	ldrh	r2, [r7, #2]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80081c6:	887a      	ldrh	r2, [r7, #2]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4013      	ands	r3, r2
 80081cc:	041a      	lsls	r2, r3, #16
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	43d9      	mvns	r1, r3
 80081d2:	887b      	ldrh	r3, [r7, #2]
 80081d4:	400b      	ands	r3, r1
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	619a      	str	r2, [r3, #24]
}
 80081dc:	bf00      	nop
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80081f2:	4b0f      	ldr	r3, [pc, #60]	@ (8008230 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	88fb      	ldrh	r3, [r7, #6]
 80081f8:	4013      	ands	r3, r2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d006      	beq.n	800820c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80081fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008230 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008200:	88fb      	ldrh	r3, [r7, #6]
 8008202:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008204:	88fb      	ldrh	r3, [r7, #6]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f814 	bl	8008234 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800820c:	4b08      	ldr	r3, [pc, #32]	@ (8008230 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	88fb      	ldrh	r3, [r7, #6]
 8008212:	4013      	ands	r3, r2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d006      	beq.n	8008226 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008218:	4a05      	ldr	r2, [pc, #20]	@ (8008230 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800821a:	88fb      	ldrh	r3, [r7, #6]
 800821c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800821e:	88fb      	ldrh	r3, [r7, #6]
 8008220:	4618      	mov	r0, r3
 8008222:	f000 f812 	bl	800824a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	46022000 	.word	0x46022000

08008234 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	4603      	mov	r3, r0
 8008252:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e08d      	b.n	800838e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7fa f9ba 	bl	8002600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2224      	movs	r2, #36	@ 0x24
 8008290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0201 	bic.w	r2, r2, #1
 80082a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80082b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d107      	bne.n	80082da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082d6:	609a      	str	r2, [r3, #8]
 80082d8:	e006      	b.n	80082e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80082e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d108      	bne.n	8008302 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082fe:	605a      	str	r2, [r3, #4]
 8008300:	e007      	b.n	8008312 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008310:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008324:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008334:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691a      	ldr	r2, [r3, #16]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	69d9      	ldr	r1, [r3, #28]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a1a      	ldr	r2, [r3, #32]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0201 	orr.w	r2, r2, #1
 800836e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af02      	add	r7, sp, #8
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	607a      	str	r2, [r7, #4]
 80083a2:	461a      	mov	r2, r3
 80083a4:	460b      	mov	r3, r1
 80083a6:	817b      	strh	r3, [r7, #10]
 80083a8:	4613      	mov	r3, r2
 80083aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	f040 80da 	bne.w	800856e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_I2C_Master_Transmit+0x30>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e0d3      	b.n	8008570 <HAL_I2C_Master_Transmit+0x1d8>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80083d0:	f7fb f8ac 	bl	800352c <HAL_GetTick>
 80083d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	2319      	movs	r3, #25
 80083dc:	2201      	movs	r2, #1
 80083de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 fe7d 	bl	80090e2 <I2C_WaitOnFlagUntilTimeout>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e0be      	b.n	8008570 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2221      	movs	r2, #33	@ 0x21
 80083f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2210      	movs	r2, #16
 80083fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	893a      	ldrh	r2, [r7, #8]
 8008412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800841e:	b29b      	uxth	r3, r3
 8008420:	2bff      	cmp	r3, #255	@ 0xff
 8008422:	d90e      	bls.n	8008442 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	22ff      	movs	r2, #255	@ 0xff
 8008428:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800842e:	b2da      	uxtb	r2, r3
 8008430:	8979      	ldrh	r1, [r7, #10]
 8008432:	4b51      	ldr	r3, [pc, #324]	@ (8008578 <HAL_I2C_Master_Transmit+0x1e0>)
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f001 f814 	bl	8009468 <I2C_TransferConfig>
 8008440:	e06c      	b.n	800851c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008446:	b29a      	uxth	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008450:	b2da      	uxtb	r2, r3
 8008452:	8979      	ldrh	r1, [r7, #10]
 8008454:	4b48      	ldr	r3, [pc, #288]	@ (8008578 <HAL_I2C_Master_Transmit+0x1e0>)
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f001 f803 	bl	8009468 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008462:	e05b      	b.n	800851c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	6a39      	ldr	r1, [r7, #32]
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 fe93 	bl	8009194 <I2C_WaitOnTXISFlagUntilTimeout>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e07b      	b.n	8008570 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084a0:	3b01      	subs	r3, #1
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d034      	beq.n	800851c <HAL_I2C_Master_Transmit+0x184>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d130      	bne.n	800851c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	2200      	movs	r2, #0
 80084c2:	2180      	movs	r1, #128	@ 0x80
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 fe0c 	bl	80090e2 <I2C_WaitOnFlagUntilTimeout>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e04d      	b.n	8008570 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2bff      	cmp	r3, #255	@ 0xff
 80084dc:	d90e      	bls.n	80084fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	22ff      	movs	r2, #255	@ 0xff
 80084e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	8979      	ldrh	r1, [r7, #10]
 80084ec:	2300      	movs	r3, #0
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 ffb7 	bl	8009468 <I2C_TransferConfig>
 80084fa:	e00f      	b.n	800851c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800850a:	b2da      	uxtb	r2, r3
 800850c:	8979      	ldrh	r1, [r7, #10]
 800850e:	2300      	movs	r3, #0
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 ffa6 	bl	8009468 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d19e      	bne.n	8008464 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	6a39      	ldr	r1, [r7, #32]
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fe79 	bl	8009222 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e01a      	b.n	8008570 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2220      	movs	r2, #32
 8008540:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6859      	ldr	r1, [r3, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	4b0b      	ldr	r3, [pc, #44]	@ (800857c <HAL_I2C_Master_Transmit+0x1e4>)
 800854e:	400b      	ands	r3, r1
 8008550:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2220      	movs	r2, #32
 8008556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	e000      	b.n	8008570 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800856e:	2302      	movs	r3, #2
  }
}
 8008570:	4618      	mov	r0, r3
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	80002000 	.word	0x80002000
 800857c:	fe00e800 	.word	0xfe00e800

08008580 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	68f9      	ldr	r1, [r7, #12]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
  }
}
 80085ac:	bf00      	nop
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00f      	beq.n	80085f6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e4:	f043 0201 	orr.w	r2, r3, #1
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085f4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00f      	beq.n	8008620 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860e:	f043 0208 	orr.w	r2, r3, #8
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800861e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00f      	beq.n	800864a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008638:	f043 0202 	orr.w	r2, r3, #2
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008648:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800864e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f003 030b 	and.w	r3, r3, #11
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fbe7 	bl	8008e30 <I2C_ITError>
  }
}
 8008662:	bf00      	nop
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008672:	bf00      	nop
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800867e:	b480      	push	{r7}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008686:	bf00      	nop
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	70fb      	strb	r3, [r7, #3]
 800869e:	4613      	mov	r3, r2
 80086a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b086      	sub	sp, #24
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008706:	2b01      	cmp	r3, #1
 8008708:	d101      	bne.n	800870e <I2C_Slave_ISR_IT+0x24>
 800870a:	2302      	movs	r3, #2
 800870c:	e0e2      	b.n	80088d4 <I2C_Slave_ISR_IT+0x1ea>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b00      	cmp	r3, #0
 800871e:	d009      	beq.n	8008734 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008726:	2b00      	cmp	r3, #0
 8008728:	d004      	beq.n	8008734 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800872a:	6939      	ldr	r1, [r7, #16]
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 f9b5 	bl	8008a9c <I2C_ITSlaveCplt>
 8008732:	e0ca      	b.n	80088ca <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	f003 0310 	and.w	r3, r3, #16
 800873a:	2b00      	cmp	r3, #0
 800873c:	d04b      	beq.n	80087d6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008744:	2b00      	cmp	r3, #0
 8008746:	d046      	beq.n	80087d6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800874c:	b29b      	uxth	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d128      	bne.n	80087a4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b28      	cmp	r3, #40	@ 0x28
 800875c:	d108      	bne.n	8008770 <I2C_Slave_ISR_IT+0x86>
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008764:	d104      	bne.n	8008770 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008766:	6939      	ldr	r1, [r7, #16]
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 fb0d 	bl	8008d88 <I2C_ITListenCplt>
 800876e:	e031      	b.n	80087d4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b29      	cmp	r3, #41	@ 0x29
 800877a:	d10e      	bne.n	800879a <I2C_Slave_ISR_IT+0xb0>
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008782:	d00a      	beq.n	800879a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2210      	movs	r2, #16
 800878a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 fc66 	bl	800905e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 f926 	bl	80089e4 <I2C_ITSlaveSeqCplt>
 8008798:	e01c      	b.n	80087d4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2210      	movs	r2, #16
 80087a0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80087a2:	e08f      	b.n	80088c4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2210      	movs	r2, #16
 80087aa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b0:	f043 0204 	orr.w	r2, r3, #4
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <I2C_Slave_ISR_IT+0xdc>
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087c4:	d17e      	bne.n	80088c4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ca:	4619      	mov	r1, r3
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 fb2f 	bl	8008e30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80087d2:	e077      	b.n	80088c4 <I2C_Slave_ISR_IT+0x1da>
 80087d4:	e076      	b.n	80088c4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d02f      	beq.n	8008840 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d02a      	beq.n	8008840 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d018      	beq.n	8008826 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800881c:	b29b      	uxth	r3, r3
 800881e:	3b01      	subs	r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800882a:	b29b      	uxth	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d14b      	bne.n	80088c8 <I2C_Slave_ISR_IT+0x1de>
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008836:	d047      	beq.n	80088c8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 f8d3 	bl	80089e4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800883e:	e043      	b.n	80088c8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f003 0308 	and.w	r3, r3, #8
 8008846:	2b00      	cmp	r3, #0
 8008848:	d009      	beq.n	800885e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008854:	6939      	ldr	r1, [r7, #16]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 f840 	bl	80088dc <I2C_ITAddrCplt>
 800885c:	e035      	b.n	80088ca <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d030      	beq.n	80088ca <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800886e:	2b00      	cmp	r3, #0
 8008870:	d02b      	beq.n	80088ca <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008876:	b29b      	uxth	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	d018      	beq.n	80088ae <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008880:	781a      	ldrb	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888c:	1c5a      	adds	r2, r3, #1
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008896:	b29b      	uxth	r3, r3
 8008898:	3b01      	subs	r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088a4:	3b01      	subs	r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80088ac:	e00d      	b.n	80088ca <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088b4:	d002      	beq.n	80088bc <I2C_Slave_ISR_IT+0x1d2>
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d106      	bne.n	80088ca <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 f891 	bl	80089e4 <I2C_ITSlaveSeqCplt>
 80088c2:	e002      	b.n	80088ca <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80088c4:	bf00      	nop
 80088c6:	e000      	b.n	80088ca <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80088c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80088f2:	2b28      	cmp	r3, #40	@ 0x28
 80088f4:	d16a      	bne.n	80089cc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	0c1b      	lsrs	r3, r3, #16
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	0c1b      	lsrs	r3, r3, #16
 800890e:	b29b      	uxth	r3, r3
 8008910:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008914:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	b29b      	uxth	r3, r3
 800891e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008922:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	b29b      	uxth	r3, r3
 800892c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008930:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	2b02      	cmp	r3, #2
 8008938:	d138      	bne.n	80089ac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800893a:	897b      	ldrh	r3, [r7, #10]
 800893c:	09db      	lsrs	r3, r3, #7
 800893e:	b29a      	uxth	r2, r3
 8008940:	89bb      	ldrh	r3, [r7, #12]
 8008942:	4053      	eors	r3, r2
 8008944:	b29b      	uxth	r3, r3
 8008946:	f003 0306 	and.w	r3, r3, #6
 800894a:	2b00      	cmp	r3, #0
 800894c:	d11c      	bne.n	8008988 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800894e:	897b      	ldrh	r3, [r7, #10]
 8008950:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008960:	2b02      	cmp	r3, #2
 8008962:	d13b      	bne.n	80089dc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2208      	movs	r2, #8
 8008970:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800897a:	89ba      	ldrh	r2, [r7, #12]
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7ff fe86 	bl	8008692 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008986:	e029      	b.n	80089dc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008988:	893b      	ldrh	r3, [r7, #8]
 800898a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800898c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fd9b 	bl	80094cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800899e:	89ba      	ldrh	r2, [r7, #12]
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fe74 	bl	8008692 <HAL_I2C_AddrCallback>
}
 80089aa:	e017      	b.n	80089dc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80089ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fd8b 	bl	80094cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80089be:	89ba      	ldrh	r2, [r7, #12]
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff fe64 	bl	8008692 <HAL_I2C_AddrCallback>
}
 80089ca:	e007      	b.n	80089dc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2208      	movs	r2, #8
 80089d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80089dc:	bf00      	nop
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d008      	beq.n	8008a18 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	e00c      	b.n	8008a32 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d007      	beq.n	8008a32 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a30:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b29      	cmp	r3, #41	@ 0x29
 8008a3c:	d112      	bne.n	8008a64 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2228      	movs	r2, #40	@ 0x28
 8008a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2221      	movs	r2, #33	@ 0x21
 8008a4a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fd3c 	bl	80094cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff fe04 	bl	800866a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a62:	e017      	b.n	8008a94 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a6e:	d111      	bne.n	8008a94 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2228      	movs	r2, #40	@ 0x28
 8008a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2222      	movs	r2, #34	@ 0x22
 8008a7c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008a7e:	2102      	movs	r1, #2
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fd23 	bl	80094cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff fdf5 	bl	800867e <HAL_I2C_SlaveRxCpltCallback>
}
 8008a94:	bf00      	nop
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a9c:	b590      	push	{r4, r7, lr}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008abe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008ac8:	7afb      	ldrb	r3, [r7, #11]
 8008aca:	2b21      	cmp	r3, #33	@ 0x21
 8008acc:	d002      	beq.n	8008ad4 <I2C_ITSlaveCplt+0x38>
 8008ace:	7afb      	ldrb	r3, [r7, #11]
 8008ad0:	2b29      	cmp	r3, #41	@ 0x29
 8008ad2:	d108      	bne.n	8008ae6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008ad4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fcf7 	bl	80094cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2221      	movs	r2, #33	@ 0x21
 8008ae2:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ae4:	e019      	b.n	8008b1a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008ae6:	7afb      	ldrb	r3, [r7, #11]
 8008ae8:	2b22      	cmp	r3, #34	@ 0x22
 8008aea:	d002      	beq.n	8008af2 <I2C_ITSlaveCplt+0x56>
 8008aec:	7afb      	ldrb	r3, [r7, #11]
 8008aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af0:	d108      	bne.n	8008b04 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008af2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fce8 	bl	80094cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2222      	movs	r2, #34	@ 0x22
 8008b00:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b02:	e00a      	b.n	8008b1a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	2b28      	cmp	r3, #40	@ 0x28
 8008b08:	d107      	bne.n	8008b1a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008b0a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fcdc 	bl	80094cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b28:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6859      	ldr	r1, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	4b92      	ldr	r3, [pc, #584]	@ (8008d80 <I2C_ITSlaveCplt+0x2e4>)
 8008b36:	400b      	ands	r3, r1
 8008b38:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fa8f 	bl	800905e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d01c      	beq.n	8008b84 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d031      	beq.n	8008bc6 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b6a:	b29c      	uxth	r4, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fe fc30 	bl	80073d6 <HAL_DMAEx_GetFifoLevel>
 8008b76:	4603      	mov	r3, r0
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	4423      	add	r3, r4
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008b82:	e020      	b.n	8008bc6 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d01b      	beq.n	8008bc6 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b9c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00f      	beq.n	8008bc6 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bae:	b29c      	uxth	r4, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fc0e 	bl	80073d6 <HAL_DMAEx_GetFifoLevel>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	4423      	add	r3, r4
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d020      	beq.n	8008c12 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f023 0304 	bic.w	r3, r3, #4
 8008bd6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00c      	beq.n	8008c12 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d005      	beq.n	8008c28 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c20:	f043 0204 	orr.w	r2, r3, #4
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f003 0310 	and.w	r3, r3, #16
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d049      	beq.n	8008cc6 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d044      	beq.n	8008cc6 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d128      	bne.n	8008c98 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b28      	cmp	r3, #40	@ 0x28
 8008c50:	d108      	bne.n	8008c64 <I2C_ITSlaveCplt+0x1c8>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c58:	d104      	bne.n	8008c64 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008c5a:	6979      	ldr	r1, [r7, #20]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f893 	bl	8008d88 <I2C_ITListenCplt>
 8008c62:	e030      	b.n	8008cc6 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b29      	cmp	r3, #41	@ 0x29
 8008c6e:	d10e      	bne.n	8008c8e <I2C_ITSlaveCplt+0x1f2>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008c76:	d00a      	beq.n	8008c8e <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2210      	movs	r2, #16
 8008c7e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f9ec 	bl	800905e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff feac 	bl	80089e4 <I2C_ITSlaveSeqCplt>
 8008c8c:	e01b      	b.n	8008cc6 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2210      	movs	r2, #16
 8008c94:	61da      	str	r2, [r3, #28]
 8008c96:	e016      	b.n	8008cc6 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2210      	movs	r2, #16
 8008c9e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ca4:	f043 0204 	orr.w	r2, r3, #4
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <I2C_ITSlaveCplt+0x21e>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cb8:	d105      	bne.n	8008cc6 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f8b5 	bl	8008e30 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d010      	beq.n	8008cfe <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f8a4 	bl	8008e30 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b28      	cmp	r3, #40	@ 0x28
 8008cf2:	d141      	bne.n	8008d78 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008cf4:	6979      	ldr	r1, [r7, #20]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f846 	bl	8008d88 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008cfc:	e03c      	b.n	8008d78 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008d06:	d014      	beq.n	8008d32 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff fe6b 	bl	80089e4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a1c      	ldr	r2, [pc, #112]	@ (8008d84 <I2C_ITSlaveCplt+0x2e8>)
 8008d12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff fcbf 	bl	80086ae <HAL_I2C_ListenCpltCallback>
}
 8008d30:	e022      	b.n	8008d78 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b22      	cmp	r3, #34	@ 0x22
 8008d3c:	d10e      	bne.n	8008d5c <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff fc92 	bl	800867e <HAL_I2C_SlaveRxCpltCallback>
}
 8008d5a:	e00d      	b.n	8008d78 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fc79 	bl	800866a <HAL_I2C_SlaveTxCpltCallback>
}
 8008d78:	bf00      	nop
 8008d7a:	371c      	adds	r7, #28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd90      	pop	{r4, r7, pc}
 8008d80:	fe00e800 	.word	0xfe00e800
 8008d84:	ffff0000 	.word	0xffff0000

08008d88 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a25      	ldr	r2, [pc, #148]	@ (8008e2c <I2C_ITListenCplt+0xa4>)
 8008d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d022      	beq.n	8008e04 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc8:	b2d2      	uxtb	r2, r2
 8008dca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d012      	beq.n	8008e04 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008de2:	3b01      	subs	r3, #1
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	3b01      	subs	r3, #1
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dfc:	f043 0204 	orr.w	r2, r3, #4
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008e04:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fb5f 	bl	80094cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2210      	movs	r2, #16
 8008e14:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff fc45 	bl	80086ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	ffff0000 	.word	0xffff0000

08008e30 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e40:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a6d      	ldr	r2, [pc, #436]	@ (8009004 <I2C_ITError+0x1d4>)
 8008e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	2b28      	cmp	r3, #40	@ 0x28
 8008e66:	d005      	beq.n	8008e74 <I2C_ITError+0x44>
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	2b29      	cmp	r3, #41	@ 0x29
 8008e6c:	d002      	beq.n	8008e74 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e72:	d10b      	bne.n	8008e8c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008e74:	2103      	movs	r1, #3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fb28 	bl	80094cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2228      	movs	r2, #40	@ 0x28
 8008e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a60      	ldr	r2, [pc, #384]	@ (8009008 <I2C_ITError+0x1d8>)
 8008e88:	635a      	str	r2, [r3, #52]	@ 0x34
 8008e8a:	e030      	b.n	8008eee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008e8c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fb1b 	bl	80094cc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f8e1 	bl	800905e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b60      	cmp	r3, #96	@ 0x60
 8008ea6:	d01f      	beq.n	8008ee8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d114      	bne.n	8008ee8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	f003 0310 	and.w	r3, r3, #16
 8008ec8:	2b10      	cmp	r3, #16
 8008eca:	d109      	bne.n	8008ee0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2210      	movs	r2, #16
 8008ed2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed8:	f043 0204 	orr.w	r2, r3, #4
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d039      	beq.n	8008f70 <I2C_ITError+0x140>
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b11      	cmp	r3, #17
 8008f00:	d002      	beq.n	8008f08 <I2C_ITError+0xd8>
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2b21      	cmp	r3, #33	@ 0x21
 8008f06:	d133      	bne.n	8008f70 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f16:	d107      	bne.n	8008f28 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008f26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fd fa6f 	bl	8006410 <HAL_DMA_GetState>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d017      	beq.n	8008f68 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f3c:	4a33      	ldr	r2, [pc, #204]	@ (800900c <I2C_ITError+0x1dc>)
 8008f3e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fd f8d5 	bl	80060fc <HAL_DMA_Abort_IT>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d04d      	beq.n	8008ff4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008f62:	4610      	mov	r0, r2
 8008f64:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f66:	e045      	b.n	8008ff4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f851 	bl	8009010 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f6e:	e041      	b.n	8008ff4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d039      	beq.n	8008fec <I2C_ITError+0x1bc>
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b12      	cmp	r3, #18
 8008f7c:	d002      	beq.n	8008f84 <I2C_ITError+0x154>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b22      	cmp	r3, #34	@ 0x22
 8008f82:	d133      	bne.n	8008fec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f92:	d107      	bne.n	8008fa4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fa2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fd fa31 	bl	8006410 <HAL_DMA_GetState>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d017      	beq.n	8008fe4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb8:	4a14      	ldr	r2, [pc, #80]	@ (800900c <I2C_ITError+0x1dc>)
 8008fba:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fd f897 	bl	80060fc <HAL_DMA_Abort_IT>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d011      	beq.n	8008ff8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008fde:	4610      	mov	r0, r2
 8008fe0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008fe2:	e009      	b.n	8008ff8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f813 	bl	8009010 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008fea:	e005      	b.n	8008ff8 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f80f 	bl	8009010 <I2C_TreatErrorCallback>
  }
}
 8008ff2:	e002      	b.n	8008ffa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ff4:	bf00      	nop
 8008ff6:	e000      	b.n	8008ffa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ff8:	bf00      	nop
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	ffff0000 	.word	0xffff0000
 8009008:	080086eb 	.word	0x080086eb
 800900c:	080090a7 	.word	0x080090a7

08009010 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b60      	cmp	r3, #96	@ 0x60
 8009022:	d10e      	bne.n	8009042 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2220      	movs	r2, #32
 8009028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff fb4b 	bl	80086d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009040:	e009      	b.n	8009056 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7ff fb36 	bl	80086c2 <HAL_I2C_ErrorCallback>
}
 8009056:	bf00      	nop
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b02      	cmp	r3, #2
 8009072:	d103      	bne.n	800907c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2200      	movs	r2, #0
 800907a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	2b01      	cmp	r3, #1
 8009088:	d007      	beq.n	800909a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	699a      	ldr	r2, [r3, #24]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f042 0201 	orr.w	r2, r2, #1
 8009098:	619a      	str	r2, [r3, #24]
  }
}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c0:	2200      	movs	r2, #0
 80090c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090d0:	2200      	movs	r2, #0
 80090d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f7ff ff9b 	bl	8009010 <I2C_TreatErrorCallback>
}
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	60f8      	str	r0, [r7, #12]
 80090ea:	60b9      	str	r1, [r7, #8]
 80090ec:	603b      	str	r3, [r7, #0]
 80090ee:	4613      	mov	r3, r2
 80090f0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090f2:	e03b      	b.n	800916c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f8d5 	bl	80092a8 <I2C_IsErrorOccurred>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e041      	b.n	800918c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d02d      	beq.n	800916c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009110:	f7fa fa0c 	bl	800352c <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	429a      	cmp	r2, r3
 800911e:	d302      	bcc.n	8009126 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d122      	bne.n	800916c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	699a      	ldr	r2, [r3, #24]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	4013      	ands	r3, r2
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	429a      	cmp	r2, r3
 8009134:	bf0c      	ite	eq
 8009136:	2301      	moveq	r3, #1
 8009138:	2300      	movne	r3, #0
 800913a:	b2db      	uxtb	r3, r3
 800913c:	461a      	mov	r2, r3
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	429a      	cmp	r2, r3
 8009142:	d113      	bne.n	800916c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009148:	f043 0220 	orr.w	r2, r3, #32
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e00f      	b.n	800918c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699a      	ldr	r2, [r3, #24]
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	4013      	ands	r3, r2
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	429a      	cmp	r2, r3
 800917a:	bf0c      	ite	eq
 800917c:	2301      	moveq	r3, #1
 800917e:	2300      	movne	r3, #0
 8009180:	b2db      	uxtb	r3, r3
 8009182:	461a      	mov	r2, r3
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	429a      	cmp	r2, r3
 8009188:	d0b4      	beq.n	80090f4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80091a0:	e033      	b.n	800920a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	68b9      	ldr	r1, [r7, #8]
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f87e 	bl	80092a8 <I2C_IsErrorOccurred>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e031      	b.n	800921a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091bc:	d025      	beq.n	800920a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091be:	f7fa f9b5 	bl	800352c <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d302      	bcc.n	80091d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d11a      	bne.n	800920a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d013      	beq.n	800920a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e6:	f043 0220 	orr.w	r2, r3, #32
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e007      	b.n	800921a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b02      	cmp	r3, #2
 8009216:	d1c4      	bne.n	80091a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800922e:	e02f      	b.n	8009290 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	68b9      	ldr	r1, [r7, #8]
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f837 	bl	80092a8 <I2C_IsErrorOccurred>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e02d      	b.n	80092a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009244:	f7fa f972 	bl	800352c <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	429a      	cmp	r2, r3
 8009252:	d302      	bcc.n	800925a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d11a      	bne.n	8009290 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	2b20      	cmp	r3, #32
 8009266:	d013      	beq.n	8009290 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800926c:	f043 0220 	orr.w	r2, r3, #32
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e007      	b.n	80092a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b20      	cmp	r3, #32
 800929c:	d1c8      	bne.n	8009230 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08a      	sub	sp, #40	@ 0x28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	f003 0310 	and.w	r3, r3, #16
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d068      	beq.n	80093a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2210      	movs	r2, #16
 80092da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092dc:	e049      	b.n	8009372 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e4:	d045      	beq.n	8009372 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80092e6:	f7fa f921 	bl	800352c <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d302      	bcc.n	80092fc <I2C_IsErrorOccurred+0x54>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d13a      	bne.n	8009372 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009306:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800930e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800931a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800931e:	d121      	bne.n	8009364 <I2C_IsErrorOccurred+0xbc>
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009326:	d01d      	beq.n	8009364 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009328:	7cfb      	ldrb	r3, [r7, #19]
 800932a:	2b20      	cmp	r3, #32
 800932c:	d01a      	beq.n	8009364 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800933c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800933e:	f7fa f8f5 	bl	800352c <HAL_GetTick>
 8009342:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009344:	e00e      	b.n	8009364 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009346:	f7fa f8f1 	bl	800352c <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b19      	cmp	r3, #25
 8009352:	d907      	bls.n	8009364 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	f043 0320 	orr.w	r3, r3, #32
 800935a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009362:	e006      	b.n	8009372 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b20      	cmp	r3, #32
 8009370:	d1e9      	bne.n	8009346 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	f003 0320 	and.w	r3, r3, #32
 800937c:	2b20      	cmp	r3, #32
 800937e:	d003      	beq.n	8009388 <I2C_IsErrorOccurred+0xe0>
 8009380:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009384:	2b00      	cmp	r3, #0
 8009386:	d0aa      	beq.n	80092de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800938c:	2b00      	cmp	r3, #0
 800938e:	d103      	bne.n	8009398 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2220      	movs	r2, #32
 8009396:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	f043 0304 	orr.w	r3, r3, #4
 800939e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00b      	beq.n	80093d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	f043 0301 	orr.w	r3, r3, #1
 80093be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00b      	beq.n	80093f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	f043 0308 	orr.w	r3, r3, #8
 80093e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80093ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00b      	beq.n	8009414 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	f043 0302 	orr.w	r3, r3, #2
 8009402:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800940c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009418:	2b00      	cmp	r3, #0
 800941a:	d01c      	beq.n	8009456 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7ff fe1e 	bl	800905e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6859      	ldr	r1, [r3, #4]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	4b0d      	ldr	r3, [pc, #52]	@ (8009464 <I2C_IsErrorOccurred+0x1bc>)
 800942e:	400b      	ands	r3, r1
 8009430:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	431a      	orrs	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2220      	movs	r2, #32
 8009442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009456:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800945a:	4618      	mov	r0, r3
 800945c:	3728      	adds	r7, #40	@ 0x28
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	fe00e800 	.word	0xfe00e800

08009468 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	607b      	str	r3, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	817b      	strh	r3, [r7, #10]
 8009476:	4613      	mov	r3, r2
 8009478:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800947a:	897b      	ldrh	r3, [r7, #10]
 800947c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009480:	7a7b      	ldrb	r3, [r7, #9]
 8009482:	041b      	lsls	r3, r3, #16
 8009484:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009488:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	4313      	orrs	r3, r2
 8009492:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009496:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	0d5b      	lsrs	r3, r3, #21
 80094a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80094a6:	4b08      	ldr	r3, [pc, #32]	@ (80094c8 <I2C_TransferConfig+0x60>)
 80094a8:	430b      	orrs	r3, r1
 80094aa:	43db      	mvns	r3, r3
 80094ac:	ea02 0103 	and.w	r1, r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80094ba:	bf00      	nop
 80094bc:	371c      	adds	r7, #28
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	03ff63ff 	.word	0x03ff63ff

080094cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80094dc:	887b      	ldrh	r3, [r7, #2]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00f      	beq.n	8009506 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80094ec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80094fa:	2b28      	cmp	r3, #40	@ 0x28
 80094fc:	d003      	beq.n	8009506 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009504:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009506:	887b      	ldrh	r3, [r7, #2]
 8009508:	f003 0302 	and.w	r3, r3, #2
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00f      	beq.n	8009530 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009516:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800951e:	b2db      	uxtb	r3, r3
 8009520:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009524:	2b28      	cmp	r3, #40	@ 0x28
 8009526:	d003      	beq.n	8009530 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800952e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009530:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009534:	2b00      	cmp	r3, #0
 8009536:	da03      	bge.n	8009540 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800953e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009540:	887b      	ldrh	r3, [r7, #2]
 8009542:	2b10      	cmp	r3, #16
 8009544:	d103      	bne.n	800954e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800954c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800954e:	887b      	ldrh	r3, [r7, #2]
 8009550:	2b20      	cmp	r3, #32
 8009552:	d103      	bne.n	800955c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f043 0320 	orr.w	r3, r3, #32
 800955a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800955c:	887b      	ldrh	r3, [r7, #2]
 800955e:	2b40      	cmp	r3, #64	@ 0x40
 8009560:	d103      	bne.n	800956a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009568:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6819      	ldr	r1, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	43da      	mvns	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	400a      	ands	r2, r1
 800957a:	601a      	str	r2, [r3, #0]
}
 800957c:	bf00      	nop
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b20      	cmp	r3, #32
 800959c:	d138      	bne.n	8009610 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80095a8:	2302      	movs	r3, #2
 80095aa:	e032      	b.n	8009612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2224      	movs	r2, #36	@ 0x24
 80095b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 0201 	bic.w	r2, r2, #1
 80095ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6819      	ldr	r1, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f042 0201 	orr.w	r2, r2, #1
 80095fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2220      	movs	r2, #32
 8009600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	e000      	b.n	8009612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009610:	2302      	movs	r3, #2
  }
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800961e:	b480      	push	{r7}
 8009620:	b085      	sub	sp, #20
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b20      	cmp	r3, #32
 8009632:	d139      	bne.n	80096a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800963a:	2b01      	cmp	r3, #1
 800963c:	d101      	bne.n	8009642 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800963e:	2302      	movs	r3, #2
 8009640:	e033      	b.n	80096aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2224      	movs	r2, #36	@ 0x24
 800964e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0201 	bic.w	r2, r2, #1
 8009660:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009670:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	021b      	lsls	r3, r3, #8
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	4313      	orrs	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f042 0201 	orr.w	r2, r2, #1
 8009692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2220      	movs	r2, #32
 8009698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	e000      	b.n	80096aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80096a8:	2302      	movs	r3, #2
  }
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
	...

080096b8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80096c4:	4b0b      	ldr	r3, [pc, #44]	@ (80096f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	73fb      	strb	r3, [r7, #15]
 80096d4:	e007      	b.n	80096e6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80096d6:	4b07      	ldr	r3, [pc, #28]	@ (80096f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f023 0204 	bic.w	r2, r3, #4
 80096de:	4905      	ldr	r1, [pc, #20]	@ (80096f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	40030400 	.word	0x40030400

080096f8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80096fc:	4b05      	ldr	r3, [pc, #20]	@ (8009714 <HAL_ICACHE_Enable+0x1c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a04      	ldr	r2, [pc, #16]	@ (8009714 <HAL_ICACHE_Enable+0x1c>)
 8009702:	f043 0301 	orr.w	r3, r3, #1
 8009706:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	40030400 	.word	0x40030400

08009718 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e0bf      	b.n	80098aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d106      	bne.n	8009744 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7f9 f84c 	bl	80027dc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	699a      	ldr	r2, [r3, #24]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800975a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6999      	ldr	r1, [r3, #24]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009770:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	430a      	orrs	r2, r1
 800977e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6899      	ldr	r1, [r3, #8]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	4b4a      	ldr	r3, [pc, #296]	@ (80098b4 <HAL_LTDC_Init+0x19c>)
 800978c:	400b      	ands	r3, r1
 800978e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	041b      	lsls	r3, r3, #16
 8009796:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6899      	ldr	r1, [r3, #8]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	699a      	ldr	r2, [r3, #24]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68d9      	ldr	r1, [r3, #12]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	4b3e      	ldr	r3, [pc, #248]	@ (80098b4 <HAL_LTDC_Init+0x19c>)
 80097ba:	400b      	ands	r3, r1
 80097bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	041b      	lsls	r3, r3, #16
 80097c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68d9      	ldr	r1, [r3, #12]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a1a      	ldr	r2, [r3, #32]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	431a      	orrs	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6919      	ldr	r1, [r3, #16]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	4b33      	ldr	r3, [pc, #204]	@ (80098b4 <HAL_LTDC_Init+0x19c>)
 80097e8:	400b      	ands	r3, r1
 80097ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f0:	041b      	lsls	r3, r3, #16
 80097f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6919      	ldr	r1, [r3, #16]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	431a      	orrs	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6959      	ldr	r1, [r3, #20]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	4b27      	ldr	r3, [pc, #156]	@ (80098b4 <HAL_LTDC_Init+0x19c>)
 8009816:	400b      	ands	r3, r1
 8009818:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981e:	041b      	lsls	r3, r3, #16
 8009820:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6959      	ldr	r1, [r3, #20]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009848:	041b      	lsls	r3, r3, #16
 800984a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800985a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4313      	orrs	r3, r2
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800986e:	431a      	orrs	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	430a      	orrs	r2, r1
 8009876:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0206 	orr.w	r2, r2, #6
 8009886:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f042 0201 	orr.w	r2, r2, #1
 8009896:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	f000f800 	.word	0xf000f800

080098b8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f003 0304 	and.w	r3, r3, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d023      	beq.n	8009922 <HAL_LTDC_IRQHandler+0x6a>
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01e      	beq.n	8009922 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0204 	bic.w	r2, r2, #4
 80098f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2204      	movs	r2, #4
 80098fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009902:	f043 0201 	orr.w	r2, r3, #1
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2204      	movs	r2, #4
 8009910:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f86f 	bl	8009a00 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d023      	beq.n	8009974 <HAL_LTDC_IRQHandler+0xbc>
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d01e      	beq.n	8009974 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f022 0202 	bic.w	r2, r2, #2
 8009944:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2202      	movs	r2, #2
 800994c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009954:	f043 0202 	orr.w	r2, r3, #2
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2204      	movs	r2, #4
 8009962:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f846 	bl	8009a00 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	d01b      	beq.n	80099b6 <HAL_LTDC_IRQHandler+0xfe>
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d016      	beq.n	80099b6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f022 0201 	bic.w	r2, r2, #1
 8009996:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2201      	movs	r2, #1
 800999e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f82f 	bl	8009a14 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f003 0308 	and.w	r3, r3, #8
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d01b      	beq.n	80099f8 <HAL_LTDC_IRQHandler+0x140>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f003 0308 	and.w	r3, r3, #8
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d016      	beq.n	80099f8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 0208 	bic.w	r2, r2, #8
 80099d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2208      	movs	r2, #8
 80099e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f818 	bl	8009a28 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80099f8:	bf00      	nop
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009a3c:	b5b0      	push	{r4, r5, r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d101      	bne.n	8009a56 <HAL_LTDC_ConfigLayer+0x1a>
 8009a52:	2302      	movs	r3, #2
 8009a54:	e02c      	b.n	8009ab0 <HAL_LTDC_ConfigLayer+0x74>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2202      	movs	r2, #2
 8009a62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2134      	movs	r1, #52	@ 0x34
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	4413      	add	r3, r2
 8009a72:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	4614      	mov	r4, r2
 8009a7a:	461d      	mov	r5, r3
 8009a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 f811 	bl	8009ab8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bdb0      	pop	{r4, r5, r7, pc}

08009ab8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b089      	sub	sp, #36	@ 0x24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	0c1b      	lsrs	r3, r3, #16
 8009ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ad4:	4413      	add	r3, r2
 8009ad6:	041b      	lsls	r3, r3, #16
 8009ad8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	01db      	lsls	r3, r3, #7
 8009ae4:	4413      	add	r3, r2
 8009ae6:	3384      	adds	r3, #132	@ 0x84
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	6812      	ldr	r2, [r2, #0]
 8009aee:	4611      	mov	r1, r2
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	01d2      	lsls	r2, r2, #7
 8009af4:	440a      	add	r2, r1
 8009af6:	3284      	adds	r2, #132	@ 0x84
 8009af8:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009afc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	0c1b      	lsrs	r3, r3, #16
 8009b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009b0e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009b10:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4619      	mov	r1, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	01db      	lsls	r3, r3, #7
 8009b1c:	440b      	add	r3, r1
 8009b1e:	3384      	adds	r3, #132	@ 0x84
 8009b20:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009b26:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b36:	4413      	add	r3, r2
 8009b38:	041b      	lsls	r3, r3, #16
 8009b3a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	461a      	mov	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	01db      	lsls	r3, r3, #7
 8009b46:	4413      	add	r3, r2
 8009b48:	3384      	adds	r3, #132	@ 0x84
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	6812      	ldr	r2, [r2, #0]
 8009b50:	4611      	mov	r1, r2
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	01d2      	lsls	r2, r2, #7
 8009b56:	440a      	add	r2, r1
 8009b58:	3284      	adds	r2, #132	@ 0x84
 8009b5a:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009b5e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	689a      	ldr	r2, [r3, #8]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b6e:	4413      	add	r3, r2
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4619      	mov	r1, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	01db      	lsls	r3, r3, #7
 8009b7c:	440b      	add	r3, r1
 8009b7e:	3384      	adds	r3, #132	@ 0x84
 8009b80:	4619      	mov	r1, r3
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	01db      	lsls	r3, r3, #7
 8009b92:	4413      	add	r3, r2
 8009b94:	3384      	adds	r3, #132	@ 0x84
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	6812      	ldr	r2, [r2, #0]
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	01d2      	lsls	r2, r2, #7
 8009ba2:	440a      	add	r2, r1
 8009ba4:	3284      	adds	r2, #132	@ 0x84
 8009ba6:	f023 0307 	bic.w	r3, r3, #7
 8009baa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	01db      	lsls	r3, r3, #7
 8009bb6:	4413      	add	r3, r2
 8009bb8:	3384      	adds	r3, #132	@ 0x84
 8009bba:	461a      	mov	r2, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009bc8:	021b      	lsls	r3, r3, #8
 8009bca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009bd2:	041b      	lsls	r3, r3, #16
 8009bd4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	061b      	lsls	r3, r3, #24
 8009bdc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009be4:	461a      	mov	r2, r3
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	431a      	orrs	r2, r3
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	431a      	orrs	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	01db      	lsls	r3, r3, #7
 8009bf8:	440b      	add	r3, r1
 8009bfa:	3384      	adds	r3, #132	@ 0x84
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	01db      	lsls	r3, r3, #7
 8009c0e:	4413      	add	r3, r2
 8009c10:	3384      	adds	r3, #132	@ 0x84
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	6812      	ldr	r2, [r2, #0]
 8009c18:	4611      	mov	r1, r2
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	01d2      	lsls	r2, r2, #7
 8009c1e:	440a      	add	r2, r1
 8009c20:	3284      	adds	r2, #132	@ 0x84
 8009c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009c26:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	01db      	lsls	r3, r3, #7
 8009c32:	4413      	add	r3, r2
 8009c34:	3384      	adds	r3, #132	@ 0x84
 8009c36:	461a      	mov	r2, r3
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	461a      	mov	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	01db      	lsls	r3, r3, #7
 8009c48:	4413      	add	r3, r2
 8009c4a:	3384      	adds	r3, #132	@ 0x84
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	6812      	ldr	r2, [r2, #0]
 8009c52:	4611      	mov	r1, r2
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	01d2      	lsls	r2, r2, #7
 8009c58:	440a      	add	r2, r1
 8009c5a:	3284      	adds	r2, #132	@ 0x84
 8009c5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009c60:	f023 0307 	bic.w	r3, r3, #7
 8009c64:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	69da      	ldr	r2, [r3, #28]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	68f9      	ldr	r1, [r7, #12]
 8009c70:	6809      	ldr	r1, [r1, #0]
 8009c72:	4608      	mov	r0, r1
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	01c9      	lsls	r1, r1, #7
 8009c78:	4401      	add	r1, r0
 8009c7a:	3184      	adds	r1, #132	@ 0x84
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	461a      	mov	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	01db      	lsls	r3, r3, #7
 8009c8a:	4413      	add	r3, r2
 8009c8c:	3384      	adds	r3, #132	@ 0x84
 8009c8e:	461a      	mov	r2, r3
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c94:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d102      	bne.n	8009ca4 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8009c9e:	2304      	movs	r3, #4
 8009ca0:	61fb      	str	r3, [r7, #28]
 8009ca2:	e01b      	b.n	8009cdc <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d102      	bne.n	8009cb2 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8009cac:	2303      	movs	r3, #3
 8009cae:	61fb      	str	r3, [r7, #28]
 8009cb0:	e014      	b.n	8009cdc <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d00b      	beq.n	8009cd2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d007      	beq.n	8009cd2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d003      	beq.n	8009cd2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009cce:	2b07      	cmp	r3, #7
 8009cd0:	d102      	bne.n	8009cd8 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	61fb      	str	r3, [r7, #28]
 8009cd6:	e001      	b.n	8009cdc <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	01db      	lsls	r3, r3, #7
 8009ce6:	4413      	add	r3, r2
 8009ce8:	3384      	adds	r3, #132	@ 0x84
 8009cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	6812      	ldr	r2, [r2, #0]
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	01d2      	lsls	r2, r2, #7
 8009cf6:	440a      	add	r2, r1
 8009cf8:	3284      	adds	r2, #132	@ 0x84
 8009cfa:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d04:	69fa      	ldr	r2, [r7, #28]
 8009d06:	fb02 f303 	mul.w	r3, r2, r3
 8009d0a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	6859      	ldr	r1, [r3, #4]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	1acb      	subs	r3, r1, r3
 8009d16:	69f9      	ldr	r1, [r7, #28]
 8009d18:	fb01 f303 	mul.w	r3, r1, r3
 8009d1c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009d1e:	68f9      	ldr	r1, [r7, #12]
 8009d20:	6809      	ldr	r1, [r1, #0]
 8009d22:	4608      	mov	r0, r1
 8009d24:	6879      	ldr	r1, [r7, #4]
 8009d26:	01c9      	lsls	r1, r1, #7
 8009d28:	4401      	add	r1, r0
 8009d2a:	3184      	adds	r1, #132	@ 0x84
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	461a      	mov	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	01db      	lsls	r3, r3, #7
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3384      	adds	r3, #132	@ 0x84
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	6812      	ldr	r2, [r2, #0]
 8009d44:	4611      	mov	r1, r2
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	01d2      	lsls	r2, r2, #7
 8009d4a:	440a      	add	r2, r1
 8009d4c:	3284      	adds	r2, #132	@ 0x84
 8009d4e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009d52:	f023 0307 	bic.w	r3, r3, #7
 8009d56:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	01db      	lsls	r3, r3, #7
 8009d62:	4413      	add	r3, r2
 8009d64:	3384      	adds	r3, #132	@ 0x84
 8009d66:	461a      	mov	r2, r3
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d6c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	01db      	lsls	r3, r3, #7
 8009d78:	4413      	add	r3, r2
 8009d7a:	3384      	adds	r3, #132	@ 0x84
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	4611      	mov	r1, r2
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	01d2      	lsls	r2, r2, #7
 8009d88:	440a      	add	r2, r1
 8009d8a:	3284      	adds	r2, #132	@ 0x84
 8009d8c:	f043 0301 	orr.w	r3, r3, #1
 8009d90:	6013      	str	r3, [r2, #0]
}
 8009d92:	bf00      	nop
 8009d94:	3724      	adds	r7, #36	@ 0x24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b086      	sub	sp, #24
 8009da2:	af02      	add	r7, sp, #8
 8009da4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0fe      	b.n	8009fae <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d106      	bne.n	8009dca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7f8 ffa3 	bl	8002d10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2203      	movs	r2, #3
 8009dce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f008 f895 	bl	8011f06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	7c1a      	ldrb	r2, [r3, #16]
 8009de4:	f88d 2000 	strb.w	r2, [sp]
 8009de8:	3304      	adds	r3, #4
 8009dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009dec:	f008 f85c 	bl	8011ea8 <USB_CoreInit>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d005      	beq.n	8009e02 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2202      	movs	r2, #2
 8009dfa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e0d5      	b.n	8009fae <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2100      	movs	r1, #0
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f008 f88d 	bl	8011f28 <USB_SetCurrentMode>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d005      	beq.n	8009e20 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e0c6      	b.n	8009fae <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e20:	2300      	movs	r3, #0
 8009e22:	73fb      	strb	r3, [r7, #15]
 8009e24:	e04a      	b.n	8009ebc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009e26:	7bfa      	ldrb	r2, [r7, #15]
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	00db      	lsls	r3, r3, #3
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	440b      	add	r3, r1
 8009e34:	3315      	adds	r3, #21
 8009e36:	2201      	movs	r2, #1
 8009e38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009e3a:	7bfa      	ldrb	r2, [r7, #15]
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	00db      	lsls	r3, r3, #3
 8009e42:	4413      	add	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	440b      	add	r3, r1
 8009e48:	3314      	adds	r3, #20
 8009e4a:	7bfa      	ldrb	r2, [r7, #15]
 8009e4c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009e4e:	7bfa      	ldrb	r2, [r7, #15]
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
 8009e52:	b298      	uxth	r0, r3
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	4613      	mov	r3, r2
 8009e58:	00db      	lsls	r3, r3, #3
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	332e      	adds	r3, #46	@ 0x2e
 8009e62:	4602      	mov	r2, r0
 8009e64:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009e66:	7bfa      	ldrb	r2, [r7, #15]
 8009e68:	6879      	ldr	r1, [r7, #4]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	00db      	lsls	r3, r3, #3
 8009e6e:	4413      	add	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	440b      	add	r3, r1
 8009e74:	3318      	adds	r3, #24
 8009e76:	2200      	movs	r2, #0
 8009e78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009e7a:	7bfa      	ldrb	r2, [r7, #15]
 8009e7c:	6879      	ldr	r1, [r7, #4]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	4413      	add	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	440b      	add	r3, r1
 8009e88:	331c      	adds	r3, #28
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009e8e:	7bfa      	ldrb	r2, [r7, #15]
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	4613      	mov	r3, r2
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	440b      	add	r3, r1
 8009e9c:	3320      	adds	r3, #32
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009ea2:	7bfa      	ldrb	r2, [r7, #15]
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	00db      	lsls	r3, r3, #3
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	3324      	adds	r3, #36	@ 0x24
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	73fb      	strb	r3, [r7, #15]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	791b      	ldrb	r3, [r3, #4]
 8009ec0:	7bfa      	ldrb	r2, [r7, #15]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d3af      	bcc.n	8009e26 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]
 8009eca:	e044      	b.n	8009f56 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009ecc:	7bfa      	ldrb	r2, [r7, #15]
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	440b      	add	r3, r1
 8009eda:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009ede:	2200      	movs	r2, #0
 8009ee0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009ee2:	7bfa      	ldrb	r2, [r7, #15]
 8009ee4:	6879      	ldr	r1, [r7, #4]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	00db      	lsls	r3, r3, #3
 8009eea:	4413      	add	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	440b      	add	r3, r1
 8009ef0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009ef4:	7bfa      	ldrb	r2, [r7, #15]
 8009ef6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009ef8:	7bfa      	ldrb	r2, [r7, #15]
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	4613      	mov	r3, r2
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	440b      	add	r3, r1
 8009f06:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f0e:	7bfa      	ldrb	r2, [r7, #15]
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	4613      	mov	r3, r2
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	4413      	add	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	440b      	add	r3, r1
 8009f1c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009f20:	2200      	movs	r2, #0
 8009f22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f24:	7bfa      	ldrb	r2, [r7, #15]
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	440b      	add	r3, r1
 8009f32:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009f3a:	7bfa      	ldrb	r2, [r7, #15]
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	440b      	add	r3, r1
 8009f48:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
 8009f52:	3301      	adds	r3, #1
 8009f54:	73fb      	strb	r3, [r7, #15]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	791b      	ldrb	r3, [r3, #4]
 8009f5a:	7bfa      	ldrb	r2, [r7, #15]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d3b5      	bcc.n	8009ecc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6818      	ldr	r0, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	7c1a      	ldrb	r2, [r3, #16]
 8009f68:	f88d 2000 	strb.w	r2, [sp]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f70:	f008 f826 	bl	8011fc0 <USB_DevInit>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d005      	beq.n	8009f86 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e013      	b.n	8009fae <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	7b1b      	ldrb	r3, [r3, #12]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d102      	bne.n	8009fa2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f80a 	bl	8009fb6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f008 f9f3 	bl	8012392 <USB_DevDisconnect>

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b085      	sub	sp, #20
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fe8:	f043 0303 	orr.w	r3, r3, #3
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
	...

0800a000 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a000:	b480      	push	{r7}
 800a002:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a004:	4b05      	ldr	r3, [pc, #20]	@ (800a01c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a008:	4a04      	ldr	r2, [pc, #16]	@ (800a01c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a00a:	f043 0301 	orr.w	r3, r3, #1
 800a00e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800a010:	bf00      	nop
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	46020800 	.word	0x46020800

0800a020 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800a028:	4b39      	ldr	r3, [pc, #228]	@ (800a110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a02a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a02c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a030:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	429a      	cmp	r2, r3
 800a038:	d10b      	bne.n	800a052 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a040:	d905      	bls.n	800a04e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a042:	4b33      	ldr	r3, [pc, #204]	@ (800a110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	4a32      	ldr	r2, [pc, #200]	@ (800a110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a04c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	e057      	b.n	800a102 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a058:	d90a      	bls.n	800a070 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800a05a:	4b2d      	ldr	r3, [pc, #180]	@ (800a110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4313      	orrs	r3, r2
 800a066:	4a2a      	ldr	r2, [pc, #168]	@ (800a110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a06c:	60d3      	str	r3, [r2, #12]
 800a06e:	e007      	b.n	800a080 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800a070:	4b27      	ldr	r3, [pc, #156]	@ (800a110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a078:	4925      	ldr	r1, [pc, #148]	@ (800a110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a080:	4b24      	ldr	r3, [pc, #144]	@ (800a114 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a24      	ldr	r2, [pc, #144]	@ (800a118 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a086:	fba2 2303 	umull	r2, r3, r2, r3
 800a08a:	099b      	lsrs	r3, r3, #6
 800a08c:	2232      	movs	r2, #50	@ 0x32
 800a08e:	fb02 f303 	mul.w	r3, r2, r3
 800a092:	4a21      	ldr	r2, [pc, #132]	@ (800a118 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a094:	fba2 2303 	umull	r2, r3, r2, r3
 800a098:	099b      	lsrs	r3, r3, #6
 800a09a:	3301      	adds	r3, #1
 800a09c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a09e:	e002      	b.n	800a0a6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a0a6:	4b1a      	ldr	r3, [pc, #104]	@ (800a110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d102      	bne.n	800a0b8 <HAL_PWREx_ControlVoltageScaling+0x98>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1f3      	bne.n	800a0a0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d01b      	beq.n	800a0f6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a0be:	4b15      	ldr	r3, [pc, #84]	@ (800a114 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a15      	ldr	r2, [pc, #84]	@ (800a118 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a0c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c8:	099b      	lsrs	r3, r3, #6
 800a0ca:	2232      	movs	r2, #50	@ 0x32
 800a0cc:	fb02 f303 	mul.w	r3, r2, r3
 800a0d0:	4a11      	ldr	r2, [pc, #68]	@ (800a118 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d6:	099b      	lsrs	r3, r3, #6
 800a0d8:	3301      	adds	r3, #1
 800a0da:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a0dc:	e002      	b.n	800a0e4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a110 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a0e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d102      	bne.n	800a0f6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f3      	bne.n	800a0de <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e000      	b.n	800a102 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	46020800 	.word	0x46020800
 800a114:	20000028 	.word	0x20000028
 800a118:	10624dd3 	.word	0x10624dd3

0800a11c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800a120:	4b04      	ldr	r3, [pc, #16]	@ (800a134 <HAL_PWREx_GetVoltageRange+0x18>)
 800a122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a124:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800a128:	4618      	mov	r0, r3
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	46020800 	.word	0x46020800

0800a138 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a140:	4b22      	ldr	r3, [pc, #136]	@ (800a1cc <HAL_PWREx_ConfigSupply+0x94>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a22      	ldr	r2, [pc, #136]	@ (800a1d0 <HAL_PWREx_ConfigSupply+0x98>)
 800a146:	fba2 2303 	umull	r2, r3, r2, r3
 800a14a:	099b      	lsrs	r3, r3, #6
 800a14c:	2232      	movs	r2, #50	@ 0x32
 800a14e:	fb02 f303 	mul.w	r3, r2, r3
 800a152:	4a1f      	ldr	r2, [pc, #124]	@ (800a1d0 <HAL_PWREx_ConfigSupply+0x98>)
 800a154:	fba2 2303 	umull	r2, r3, r2, r3
 800a158:	099b      	lsrs	r3, r3, #6
 800a15a:	3301      	adds	r3, #1
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d113      	bne.n	800a18c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a164:	4b1b      	ldr	r3, [pc, #108]	@ (800a1d4 <HAL_PWREx_ConfigSupply+0x9c>)
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	4a1a      	ldr	r2, [pc, #104]	@ (800a1d4 <HAL_PWREx_ConfigSupply+0x9c>)
 800a16a:	f023 0302 	bic.w	r3, r3, #2
 800a16e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a170:	e002      	b.n	800a178 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3b01      	subs	r3, #1
 800a176:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a178:	4b16      	ldr	r3, [pc, #88]	@ (800a1d4 <HAL_PWREx_ConfigSupply+0x9c>)
 800a17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	2b02      	cmp	r3, #2
 800a182:	d116      	bne.n	800a1b2 <HAL_PWREx_ConfigSupply+0x7a>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1f3      	bne.n	800a172 <HAL_PWREx_ConfigSupply+0x3a>
 800a18a:	e012      	b.n	800a1b2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a18c:	4b11      	ldr	r3, [pc, #68]	@ (800a1d4 <HAL_PWREx_ConfigSupply+0x9c>)
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	4a10      	ldr	r2, [pc, #64]	@ (800a1d4 <HAL_PWREx_ConfigSupply+0x9c>)
 800a192:	f043 0302 	orr.w	r3, r3, #2
 800a196:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a198:	e002      	b.n	800a1a0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a1a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d4 <HAL_PWREx_ConfigSupply+0x9c>)
 800a1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <HAL_PWREx_ConfigSupply+0x7a>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1f3      	bne.n	800a19a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e000      	b.n	800a1be <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	20000028 	.word	0x20000028
 800a1d0:	10624dd3 	.word	0x10624dd3
 800a1d4:	46020800 	.word	0x46020800

0800a1d8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800a1dc:	4b05      	ldr	r3, [pc, #20]	@ (800a1f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	4a04      	ldr	r2, [pc, #16]	@ (800a1f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a1e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1e6:	6113      	str	r3, [r2, #16]
}
 800a1e8:	bf00      	nop
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	46020800 	.word	0x46020800

0800a1f8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800a1fc:	4b05      	ldr	r3, [pc, #20]	@ (800a214 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	4a04      	ldr	r2, [pc, #16]	@ (800a214 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a202:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a206:	6113      	str	r3, [r2, #16]
}
 800a208:	bf00      	nop
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	46020800 	.word	0x46020800

0800a218 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800a21c:	4b05      	ldr	r3, [pc, #20]	@ (800a234 <HAL_PWREx_EnableVddA+0x1c>)
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	4a04      	ldr	r2, [pc, #16]	@ (800a234 <HAL_PWREx_EnableVddA+0x1c>)
 800a222:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a226:	6113      	str	r3, [r2, #16]
}
 800a228:	bf00      	nop
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	46020800 	.word	0x46020800

0800a238 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800a23e:	f7ff ff6d 	bl	800a11c <HAL_PWREx_GetVoltageRange>
 800a242:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a24a:	d003      	beq.n	800a254 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a252:	d107      	bne.n	800a264 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800a254:	4b06      	ldr	r3, [pc, #24]	@ (800a270 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	4a05      	ldr	r2, [pc, #20]	@ (800a270 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800a25a:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800a25e:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	e000      	b.n	800a266 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
}
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	46020800 	.word	0x46020800

0800a274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08e      	sub	sp, #56	@ 0x38
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800a27c:	2300      	movs	r3, #0
 800a27e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	f000 bec8 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a28e:	4b99      	ldr	r3, [pc, #612]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	f003 030c 	and.w	r3, r3, #12
 800a296:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a298:	4b96      	ldr	r3, [pc, #600]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a29c:	f003 0303 	and.w	r3, r3, #3
 800a2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0310 	and.w	r3, r3, #16
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 816c 	beq.w	800a588 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d007      	beq.n	800a2c6 <HAL_RCC_OscConfig+0x52>
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b8:	2b0c      	cmp	r3, #12
 800a2ba:	f040 80de 	bne.w	800a47a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	f040 80da 	bne.w	800a47a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	69db      	ldr	r3, [r3, #28]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d102      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	f000 bea5 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2d8:	4b86      	ldr	r3, [pc, #536]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d004      	beq.n	800a2ee <HAL_RCC_OscConfig+0x7a>
 800a2e4:	4b83      	ldr	r3, [pc, #524]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a2ec:	e005      	b.n	800a2fa <HAL_RCC_OscConfig+0x86>
 800a2ee:	4b81      	ldr	r3, [pc, #516]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a2f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a2f4:	041b      	lsls	r3, r3, #16
 800a2f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d255      	bcs.n	800a3aa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10a      	bne.n	800a31a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a308:	4618      	mov	r0, r3
 800a30a:	f001 f9d9 	bl	800b6c0 <RCC_SetFlashLatencyFromMSIRange>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	f000 be82 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a31a:	4b76      	ldr	r3, [pc, #472]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	4a75      	ldr	r2, [pc, #468]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a320:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a324:	6093      	str	r3, [r2, #8]
 800a326:	4b73      	ldr	r3, [pc, #460]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a332:	4970      	ldr	r1, [pc, #448]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a334:	4313      	orrs	r3, r2
 800a336:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a33c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a340:	d309      	bcc.n	800a356 <HAL_RCC_OscConfig+0xe2>
 800a342:	4b6c      	ldr	r3, [pc, #432]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	f023 021f 	bic.w	r2, r3, #31
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	4969      	ldr	r1, [pc, #420]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a350:	4313      	orrs	r3, r2
 800a352:	60cb      	str	r3, [r1, #12]
 800a354:	e07e      	b.n	800a454 <HAL_RCC_OscConfig+0x1e0>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	da0a      	bge.n	800a374 <HAL_RCC_OscConfig+0x100>
 800a35e:	4b65      	ldr	r3, [pc, #404]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	015b      	lsls	r3, r3, #5
 800a36c:	4961      	ldr	r1, [pc, #388]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	60cb      	str	r3, [r1, #12]
 800a372:	e06f      	b.n	800a454 <HAL_RCC_OscConfig+0x1e0>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a37c:	d30a      	bcc.n	800a394 <HAL_RCC_OscConfig+0x120>
 800a37e:	4b5d      	ldr	r3, [pc, #372]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	029b      	lsls	r3, r3, #10
 800a38c:	4959      	ldr	r1, [pc, #356]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a38e:	4313      	orrs	r3, r2
 800a390:	60cb      	str	r3, [r1, #12]
 800a392:	e05f      	b.n	800a454 <HAL_RCC_OscConfig+0x1e0>
 800a394:	4b57      	ldr	r3, [pc, #348]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	03db      	lsls	r3, r3, #15
 800a3a2:	4954      	ldr	r1, [pc, #336]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60cb      	str	r3, [r1, #12]
 800a3a8:	e054      	b.n	800a454 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a3aa:	4b52      	ldr	r3, [pc, #328]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	4a51      	ldr	r2, [pc, #324]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a3b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a3b4:	6093      	str	r3, [r2, #8]
 800a3b6:	4b4f      	ldr	r3, [pc, #316]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c2:	494c      	ldr	r1, [pc, #304]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a3d0:	d309      	bcc.n	800a3e6 <HAL_RCC_OscConfig+0x172>
 800a3d2:	4b48      	ldr	r3, [pc, #288]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f023 021f 	bic.w	r2, r3, #31
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	4945      	ldr	r1, [pc, #276]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	60cb      	str	r3, [r1, #12]
 800a3e4:	e028      	b.n	800a438 <HAL_RCC_OscConfig+0x1c4>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	da0a      	bge.n	800a404 <HAL_RCC_OscConfig+0x190>
 800a3ee:	4b41      	ldr	r3, [pc, #260]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	015b      	lsls	r3, r3, #5
 800a3fc:	493d      	ldr	r1, [pc, #244]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	60cb      	str	r3, [r1, #12]
 800a402:	e019      	b.n	800a438 <HAL_RCC_OscConfig+0x1c4>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a40c:	d30a      	bcc.n	800a424 <HAL_RCC_OscConfig+0x1b0>
 800a40e:	4b39      	ldr	r3, [pc, #228]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	029b      	lsls	r3, r3, #10
 800a41c:	4935      	ldr	r1, [pc, #212]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	60cb      	str	r3, [r1, #12]
 800a422:	e009      	b.n	800a438 <HAL_RCC_OscConfig+0x1c4>
 800a424:	4b33      	ldr	r3, [pc, #204]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a1b      	ldr	r3, [r3, #32]
 800a430:	03db      	lsls	r3, r3, #15
 800a432:	4930      	ldr	r1, [pc, #192]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a434:	4313      	orrs	r3, r2
 800a436:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10a      	bne.n	800a454 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a442:	4618      	mov	r0, r3
 800a444:	f001 f93c 	bl	800b6c0 <RCC_SetFlashLatencyFromMSIRange>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	f000 bde5 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800a454:	f001 f8de 	bl	800b614 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a458:	4b27      	ldr	r3, [pc, #156]	@ (800a4f8 <HAL_RCC_OscConfig+0x284>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7f8 ffdb 	bl	8003418 <HAL_InitTick>
 800a462:	4603      	mov	r3, r0
 800a464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800a468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 808a 	beq.w	800a586 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800a472:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a476:	f000 bdd2 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d066      	beq.n	800a550 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800a482:	4b1c      	ldr	r3, [pc, #112]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a1b      	ldr	r2, [pc, #108]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a488:	f043 0301 	orr.w	r3, r3, #1
 800a48c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a48e:	f7f9 f84d 	bl	800352c <HAL_GetTick>
 800a492:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a494:	e009      	b.n	800a4aa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a496:	f7f9 f849 	bl	800352c <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d902      	bls.n	800a4aa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	f000 bdba 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a4aa:	4b12      	ldr	r3, [pc, #72]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0304 	and.w	r3, r3, #4
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d0ef      	beq.n	800a496 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	4a0e      	ldr	r2, [pc, #56]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a4bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4c0:	6093      	str	r3, [r2, #8]
 800a4c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ce:	4909      	ldr	r1, [pc, #36]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a4dc:	d30e      	bcc.n	800a4fc <HAL_RCC_OscConfig+0x288>
 800a4de:	4b05      	ldr	r3, [pc, #20]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	f023 021f 	bic.w	r2, r3, #31
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	4902      	ldr	r1, [pc, #8]	@ (800a4f4 <HAL_RCC_OscConfig+0x280>)
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	60cb      	str	r3, [r1, #12]
 800a4f0:	e04a      	b.n	800a588 <HAL_RCC_OscConfig+0x314>
 800a4f2:	bf00      	nop
 800a4f4:	46020c00 	.word	0x46020c00
 800a4f8:	2000002c 	.word	0x2000002c
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a500:	2b00      	cmp	r3, #0
 800a502:	da0a      	bge.n	800a51a <HAL_RCC_OscConfig+0x2a6>
 800a504:	4b98      	ldr	r3, [pc, #608]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a1b      	ldr	r3, [r3, #32]
 800a510:	015b      	lsls	r3, r3, #5
 800a512:	4995      	ldr	r1, [pc, #596]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a514:	4313      	orrs	r3, r2
 800a516:	60cb      	str	r3, [r1, #12]
 800a518:	e036      	b.n	800a588 <HAL_RCC_OscConfig+0x314>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a522:	d30a      	bcc.n	800a53a <HAL_RCC_OscConfig+0x2c6>
 800a524:	4b90      	ldr	r3, [pc, #576]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a1b      	ldr	r3, [r3, #32]
 800a530:	029b      	lsls	r3, r3, #10
 800a532:	498d      	ldr	r1, [pc, #564]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a534:	4313      	orrs	r3, r2
 800a536:	60cb      	str	r3, [r1, #12]
 800a538:	e026      	b.n	800a588 <HAL_RCC_OscConfig+0x314>
 800a53a:	4b8b      	ldr	r3, [pc, #556]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	03db      	lsls	r3, r3, #15
 800a548:	4987      	ldr	r1, [pc, #540]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a54a:	4313      	orrs	r3, r2
 800a54c:	60cb      	str	r3, [r1, #12]
 800a54e:	e01b      	b.n	800a588 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800a550:	4b85      	ldr	r3, [pc, #532]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a84      	ldr	r2, [pc, #528]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a556:	f023 0301 	bic.w	r3, r3, #1
 800a55a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a55c:	f7f8 ffe6 	bl	800352c <HAL_GetTick>
 800a560:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a562:	e009      	b.n	800a578 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a564:	f7f8 ffe2 	bl	800352c <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d902      	bls.n	800a578 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	f000 bd53 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a578:	4b7b      	ldr	r3, [pc, #492]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1ef      	bne.n	800a564 <HAL_RCC_OscConfig+0x2f0>
 800a584:	e000      	b.n	800a588 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a586:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 808b 	beq.w	800a6ac <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a598:	2b08      	cmp	r3, #8
 800a59a:	d005      	beq.n	800a5a8 <HAL_RCC_OscConfig+0x334>
 800a59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59e:	2b0c      	cmp	r3, #12
 800a5a0:	d109      	bne.n	800a5b6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d106      	bne.n	800a5b6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d17d      	bne.n	800a6ac <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	f000 bd34 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5be:	d106      	bne.n	800a5ce <HAL_RCC_OscConfig+0x35a>
 800a5c0:	4b69      	ldr	r3, [pc, #420]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a68      	ldr	r2, [pc, #416]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a5c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5ca:	6013      	str	r3, [r2, #0]
 800a5cc:	e041      	b.n	800a652 <HAL_RCC_OscConfig+0x3de>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a5d6:	d112      	bne.n	800a5fe <HAL_RCC_OscConfig+0x38a>
 800a5d8:	4b63      	ldr	r3, [pc, #396]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a62      	ldr	r2, [pc, #392]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a5de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	4b60      	ldr	r3, [pc, #384]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a5f      	ldr	r2, [pc, #380]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a5ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	4b5d      	ldr	r3, [pc, #372]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a5c      	ldr	r2, [pc, #368]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a5f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5fa:	6013      	str	r3, [r2, #0]
 800a5fc:	e029      	b.n	800a652 <HAL_RCC_OscConfig+0x3de>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a606:	d112      	bne.n	800a62e <HAL_RCC_OscConfig+0x3ba>
 800a608:	4b57      	ldr	r3, [pc, #348]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a56      	ldr	r2, [pc, #344]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a60e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	4b54      	ldr	r3, [pc, #336]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a53      	ldr	r2, [pc, #332]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a61a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	4b51      	ldr	r3, [pc, #324]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a50      	ldr	r2, [pc, #320]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	e011      	b.n	800a652 <HAL_RCC_OscConfig+0x3de>
 800a62e:	4b4e      	ldr	r3, [pc, #312]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a4d      	ldr	r2, [pc, #308]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	4b4b      	ldr	r3, [pc, #300]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a4a      	ldr	r2, [pc, #296]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a640:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a644:	6013      	str	r3, [r2, #0]
 800a646:	4b48      	ldr	r3, [pc, #288]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a47      	ldr	r2, [pc, #284]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a64c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a650:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d014      	beq.n	800a684 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800a65a:	f7f8 ff67 	bl	800352c <HAL_GetTick>
 800a65e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a660:	e009      	b.n	800a676 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a662:	f7f8 ff63 	bl	800352c <HAL_GetTick>
 800a666:	4602      	mov	r2, r0
 800a668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	2b64      	cmp	r3, #100	@ 0x64
 800a66e:	d902      	bls.n	800a676 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	f000 bcd4 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a676:	4b3c      	ldr	r3, [pc, #240]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0ef      	beq.n	800a662 <HAL_RCC_OscConfig+0x3ee>
 800a682:	e013      	b.n	800a6ac <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800a684:	f7f8 ff52 	bl	800352c <HAL_GetTick>
 800a688:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a68a:	e009      	b.n	800a6a0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a68c:	f7f8 ff4e 	bl	800352c <HAL_GetTick>
 800a690:	4602      	mov	r2, r0
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	2b64      	cmp	r3, #100	@ 0x64
 800a698:	d902      	bls.n	800a6a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	f000 bcbf 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a6a0:	4b31      	ldr	r3, [pc, #196]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1ef      	bne.n	800a68c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d05f      	beq.n	800a778 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ba:	2b04      	cmp	r3, #4
 800a6bc:	d005      	beq.n	800a6ca <HAL_RCC_OscConfig+0x456>
 800a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c0:	2b0c      	cmp	r3, #12
 800a6c2:	d114      	bne.n	800a6ee <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d111      	bne.n	800a6ee <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d102      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	f000 bca3 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a6d8:	4b23      	ldr	r3, [pc, #140]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	041b      	lsls	r3, r3, #16
 800a6e6:	4920      	ldr	r1, [pc, #128]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a6ec:	e044      	b.n	800a778 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d024      	beq.n	800a740 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800a6f6:	4b1c      	ldr	r3, [pc, #112]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a6fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a700:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a702:	f7f8 ff13 	bl	800352c <HAL_GetTick>
 800a706:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a708:	e009      	b.n	800a71e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a70a:	f7f8 ff0f 	bl	800352c <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	2b02      	cmp	r3, #2
 800a716:	d902      	bls.n	800a71e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	f000 bc80 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a71e:	4b12      	ldr	r3, [pc, #72]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a726:	2b00      	cmp	r3, #0
 800a728:	d0ef      	beq.n	800a70a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a72a:	4b0f      	ldr	r3, [pc, #60]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	041b      	lsls	r3, r3, #16
 800a738:	490b      	ldr	r1, [pc, #44]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a73a:	4313      	orrs	r3, r2
 800a73c:	610b      	str	r3, [r1, #16]
 800a73e:	e01b      	b.n	800a778 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800a740:	4b09      	ldr	r3, [pc, #36]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a08      	ldr	r2, [pc, #32]	@ (800a768 <HAL_RCC_OscConfig+0x4f4>)
 800a746:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a74a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a74c:	f7f8 feee 	bl	800352c <HAL_GetTick>
 800a750:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a752:	e00b      	b.n	800a76c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a754:	f7f8 feea 	bl	800352c <HAL_GetTick>
 800a758:	4602      	mov	r2, r0
 800a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d904      	bls.n	800a76c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	f000 bc5b 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
 800a768:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a76c:	4baf      	ldr	r3, [pc, #700]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1ed      	bne.n	800a754 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0308 	and.w	r3, r3, #8
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 80c8 	beq.w	800a916 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a786:	2300      	movs	r3, #0
 800a788:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a78c:	4ba7      	ldr	r3, [pc, #668]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a78e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a792:	f003 0304 	and.w	r3, r3, #4
 800a796:	2b00      	cmp	r3, #0
 800a798:	d111      	bne.n	800a7be <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a79a:	4ba4      	ldr	r3, [pc, #656]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a79c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7a0:	4aa2      	ldr	r2, [pc, #648]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a7a2:	f043 0304 	orr.w	r3, r3, #4
 800a7a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a7aa:	4ba0      	ldr	r3, [pc, #640]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a7ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7b0:	f003 0304 	and.w	r3, r3, #4
 800a7b4:	617b      	str	r3, [r7, #20]
 800a7b6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a7be:	4b9c      	ldr	r3, [pc, #624]	@ (800aa30 <HAL_RCC_OscConfig+0x7bc>)
 800a7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d119      	bne.n	800a7fe <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a7ca:	4b99      	ldr	r3, [pc, #612]	@ (800aa30 <HAL_RCC_OscConfig+0x7bc>)
 800a7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ce:	4a98      	ldr	r2, [pc, #608]	@ (800aa30 <HAL_RCC_OscConfig+0x7bc>)
 800a7d0:	f043 0301 	orr.w	r3, r3, #1
 800a7d4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7d6:	f7f8 fea9 	bl	800352c <HAL_GetTick>
 800a7da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a7dc:	e009      	b.n	800a7f2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7de:	f7f8 fea5 	bl	800352c <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d902      	bls.n	800a7f2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	f000 bc16 	b.w	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a7f2:	4b8f      	ldr	r3, [pc, #572]	@ (800aa30 <HAL_RCC_OscConfig+0x7bc>)
 800a7f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0ef      	beq.n	800a7de <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d05f      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a806:	4b89      	ldr	r3, [pc, #548]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a80c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	699a      	ldr	r2, [r3, #24]
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a818:	429a      	cmp	r2, r3
 800a81a:	d037      	beq.n	800a88c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d006      	beq.n	800a834 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	e3f4      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d01b      	beq.n	800a876 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800a83e:	4b7b      	ldr	r3, [pc, #492]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a844:	4a79      	ldr	r2, [pc, #484]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a846:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a84a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800a84e:	f7f8 fe6d 	bl	800352c <HAL_GetTick>
 800a852:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a854:	e008      	b.n	800a868 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a856:	f7f8 fe69 	bl	800352c <HAL_GetTick>
 800a85a:	4602      	mov	r2, r0
 800a85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	2b05      	cmp	r3, #5
 800a862:	d901      	bls.n	800a868 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800a864:	2303      	movs	r3, #3
 800a866:	e3da      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a868:	4b70      	ldr	r3, [pc, #448]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a86a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a86e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1ef      	bne.n	800a856 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a876:	4b6d      	ldr	r3, [pc, #436]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a87c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	4969      	ldr	r1, [pc, #420]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a886:	4313      	orrs	r3, r2
 800a888:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a88c:	4b67      	ldr	r3, [pc, #412]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a88e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a892:	4a66      	ldr	r2, [pc, #408]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a894:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a898:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a89c:	f7f8 fe46 	bl	800352c <HAL_GetTick>
 800a8a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a8a2:	e008      	b.n	800a8b6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8a4:	f7f8 fe42 	bl	800352c <HAL_GetTick>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	d901      	bls.n	800a8b6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	e3b3      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a8b6:	4b5d      	ldr	r3, [pc, #372]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a8b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0ef      	beq.n	800a8a4 <HAL_RCC_OscConfig+0x630>
 800a8c4:	e01b      	b.n	800a8fe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a8c6:	4b59      	ldr	r3, [pc, #356]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a8c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8cc:	4a57      	ldr	r2, [pc, #348]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a8ce:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a8d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a8d6:	f7f8 fe29 	bl	800352c <HAL_GetTick>
 800a8da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a8dc:	e008      	b.n	800a8f0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8de:	f7f8 fe25 	bl	800352c <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	2b05      	cmp	r3, #5
 800a8ea:	d901      	bls.n	800a8f0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e396      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a8f0:	4b4e      	ldr	r3, [pc, #312]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a8f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1ef      	bne.n	800a8de <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a8fe:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a902:	2b01      	cmp	r3, #1
 800a904:	d107      	bne.n	800a916 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a906:	4b49      	ldr	r3, [pc, #292]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a90c:	4a47      	ldr	r2, [pc, #284]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a90e:	f023 0304 	bic.w	r3, r3, #4
 800a912:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0304 	and.w	r3, r3, #4
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 8111 	beq.w	800ab46 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a924:	2300      	movs	r3, #0
 800a926:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a92a:	4b40      	ldr	r3, [pc, #256]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a92c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b00      	cmp	r3, #0
 800a936:	d111      	bne.n	800a95c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a938:	4b3c      	ldr	r3, [pc, #240]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a93a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a93e:	4a3b      	ldr	r2, [pc, #236]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a940:	f043 0304 	orr.w	r3, r3, #4
 800a944:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a948:	4b38      	ldr	r3, [pc, #224]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a94a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a94e:	f003 0304 	and.w	r3, r3, #4
 800a952:	613b      	str	r3, [r7, #16]
 800a954:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a956:	2301      	movs	r3, #1
 800a958:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a95c:	4b34      	ldr	r3, [pc, #208]	@ (800aa30 <HAL_RCC_OscConfig+0x7bc>)
 800a95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	2b00      	cmp	r3, #0
 800a966:	d118      	bne.n	800a99a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a968:	4b31      	ldr	r3, [pc, #196]	@ (800aa30 <HAL_RCC_OscConfig+0x7bc>)
 800a96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a96c:	4a30      	ldr	r2, [pc, #192]	@ (800aa30 <HAL_RCC_OscConfig+0x7bc>)
 800a96e:	f043 0301 	orr.w	r3, r3, #1
 800a972:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a974:	f7f8 fdda 	bl	800352c <HAL_GetTick>
 800a978:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a97a:	e008      	b.n	800a98e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a97c:	f7f8 fdd6 	bl	800352c <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	2b02      	cmp	r3, #2
 800a988:	d901      	bls.n	800a98e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e347      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a98e:	4b28      	ldr	r3, [pc, #160]	@ (800aa30 <HAL_RCC_OscConfig+0x7bc>)
 800a990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d0f0      	beq.n	800a97c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d01f      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	f003 0304 	and.w	r3, r3, #4
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d010      	beq.n	800a9d4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a9b2:	4b1e      	ldr	r3, [pc, #120]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a9b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9b8:	4a1c      	ldr	r2, [pc, #112]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a9ba:	f043 0304 	orr.w	r3, r3, #4
 800a9be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a9c2:	4b1a      	ldr	r3, [pc, #104]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a9c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9c8:	4a18      	ldr	r2, [pc, #96]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a9ca:	f043 0301 	orr.w	r3, r3, #1
 800a9ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a9d2:	e018      	b.n	800aa06 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a9d4:	4b15      	ldr	r3, [pc, #84]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a9d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9da:	4a14      	ldr	r2, [pc, #80]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a9dc:	f043 0301 	orr.w	r3, r3, #1
 800a9e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a9e4:	e00f      	b.n	800aa06 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a9e6:	4b11      	ldr	r3, [pc, #68]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a9e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9ec:	4a0f      	ldr	r2, [pc, #60]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a9ee:	f023 0301 	bic.w	r3, r3, #1
 800a9f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a9f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9fc:	4a0b      	ldr	r2, [pc, #44]	@ (800aa2c <HAL_RCC_OscConfig+0x7b8>)
 800a9fe:	f023 0304 	bic.w	r3, r3, #4
 800aa02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d057      	beq.n	800aabe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800aa0e:	f7f8 fd8d 	bl	800352c <HAL_GetTick>
 800aa12:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa14:	e00e      	b.n	800aa34 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa16:	f7f8 fd89 	bl	800352c <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d905      	bls.n	800aa34 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e2f8      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
 800aa2c:	46020c00 	.word	0x46020c00
 800aa30:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa34:	4b9c      	ldr	r3, [pc, #624]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aa36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d0e9      	beq.n	800aa16 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d01b      	beq.n	800aa86 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800aa4e:	4b96      	ldr	r3, [pc, #600]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aa50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa54:	4a94      	ldr	r2, [pc, #592]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aa56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800aa5e:	e00a      	b.n	800aa76 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa60:	f7f8 fd64 	bl	800352c <HAL_GetTick>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d901      	bls.n	800aa76 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e2d3      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800aa76:	4b8c      	ldr	r3, [pc, #560]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aa78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d0ed      	beq.n	800aa60 <HAL_RCC_OscConfig+0x7ec>
 800aa84:	e053      	b.n	800ab2e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800aa86:	4b88      	ldr	r3, [pc, #544]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aa88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa8c:	4a86      	ldr	r2, [pc, #536]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aa8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800aa96:	e00a      	b.n	800aaae <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa98:	f7f8 fd48 	bl	800352c <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d901      	bls.n	800aaae <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e2b7      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800aaae:	4b7e      	ldr	r3, [pc, #504]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1ed      	bne.n	800aa98 <HAL_RCC_OscConfig+0x824>
 800aabc:	e037      	b.n	800ab2e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800aabe:	f7f8 fd35 	bl	800352c <HAL_GetTick>
 800aac2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aac4:	e00a      	b.n	800aadc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aac6:	f7f8 fd31 	bl	800352c <HAL_GetTick>
 800aaca:	4602      	mov	r2, r0
 800aacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d901      	bls.n	800aadc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	e2a0      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aadc:	4b72      	ldr	r3, [pc, #456]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1ed      	bne.n	800aac6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800aaea:	4b6f      	ldr	r3, [pc, #444]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aaec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aaf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d01a      	beq.n	800ab2e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800aaf8:	4b6b      	ldr	r3, [pc, #428]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aafa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aafe:	4a6a      	ldr	r2, [pc, #424]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ab00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ab08:	e00a      	b.n	800ab20 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab0a:	f7f8 fd0f 	bl	800352c <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d901      	bls.n	800ab20 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e27e      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ab20:	4b61      	ldr	r3, [pc, #388]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ab22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1ed      	bne.n	800ab0a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ab2e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d107      	bne.n	800ab46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab36:	4b5c      	ldr	r3, [pc, #368]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ab38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab3c:	4a5a      	ldr	r2, [pc, #360]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ab3e:	f023 0304 	bic.w	r3, r3, #4
 800ab42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 0320 	and.w	r3, r3, #32
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d036      	beq.n	800abc0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d019      	beq.n	800ab8e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800ab5a:	4b53      	ldr	r3, [pc, #332]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a52      	ldr	r2, [pc, #328]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ab60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ab64:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ab66:	f7f8 fce1 	bl	800352c <HAL_GetTick>
 800ab6a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ab6c:	e008      	b.n	800ab80 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab6e:	f7f8 fcdd 	bl	800352c <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d901      	bls.n	800ab80 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	e24e      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ab80:	4b49      	ldr	r3, [pc, #292]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d0f0      	beq.n	800ab6e <HAL_RCC_OscConfig+0x8fa>
 800ab8c:	e018      	b.n	800abc0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800ab8e:	4b46      	ldr	r3, [pc, #280]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a45      	ldr	r2, [pc, #276]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ab94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab98:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ab9a:	f7f8 fcc7 	bl	800352c <HAL_GetTick>
 800ab9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800aba0:	e008      	b.n	800abb4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aba2:	f7f8 fcc3 	bl	800352c <HAL_GetTick>
 800aba6:	4602      	mov	r2, r0
 800aba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	2b02      	cmp	r3, #2
 800abae:	d901      	bls.n	800abb4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e234      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800abb4:	4b3c      	ldr	r3, [pc, #240]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1f0      	bne.n	800aba2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d036      	beq.n	800ac3a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d019      	beq.n	800ac08 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800abd4:	4b34      	ldr	r3, [pc, #208]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a33      	ldr	r2, [pc, #204]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800abda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800abde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800abe0:	f7f8 fca4 	bl	800352c <HAL_GetTick>
 800abe4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800abe6:	e008      	b.n	800abfa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800abe8:	f7f8 fca0 	bl	800352c <HAL_GetTick>
 800abec:	4602      	mov	r2, r0
 800abee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d901      	bls.n	800abfa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e211      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800abfa:	4b2b      	ldr	r3, [pc, #172]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0f0      	beq.n	800abe8 <HAL_RCC_OscConfig+0x974>
 800ac06:	e018      	b.n	800ac3a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800ac08:	4b27      	ldr	r3, [pc, #156]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a26      	ldr	r2, [pc, #152]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ac0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ac14:	f7f8 fc8a 	bl	800352c <HAL_GetTick>
 800ac18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800ac1a:	e008      	b.n	800ac2e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800ac1c:	f7f8 fc86 	bl	800352c <HAL_GetTick>
 800ac20:	4602      	mov	r2, r0
 800ac22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d901      	bls.n	800ac2e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e1f7      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800ac2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1f0      	bne.n	800ac1c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d07f      	beq.n	800ad46 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d062      	beq.n	800ad14 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800ac4e:	4b16      	ldr	r3, [pc, #88]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	4a15      	ldr	r2, [pc, #84]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ac54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ac58:	6093      	str	r3, [r2, #8]
 800ac5a:	4b13      	ldr	r3, [pc, #76]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac66:	4910      	ldr	r1, [pc, #64]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800ac74:	d309      	bcc.n	800ac8a <HAL_RCC_OscConfig+0xa16>
 800ac76:	4b0c      	ldr	r3, [pc, #48]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	f023 021f 	bic.w	r2, r3, #31
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	4909      	ldr	r1, [pc, #36]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ac84:	4313      	orrs	r3, r2
 800ac86:	60cb      	str	r3, [r1, #12]
 800ac88:	e02a      	b.n	800ace0 <HAL_RCC_OscConfig+0xa6c>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	da0c      	bge.n	800acac <HAL_RCC_OscConfig+0xa38>
 800ac92:	4b05      	ldr	r3, [pc, #20]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	015b      	lsls	r3, r3, #5
 800aca0:	4901      	ldr	r1, [pc, #4]	@ (800aca8 <HAL_RCC_OscConfig+0xa34>)
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60cb      	str	r3, [r1, #12]
 800aca6:	e01b      	b.n	800ace0 <HAL_RCC_OscConfig+0xa6c>
 800aca8:	46020c00 	.word	0x46020c00
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acb4:	d30a      	bcc.n	800accc <HAL_RCC_OscConfig+0xa58>
 800acb6:	4ba1      	ldr	r3, [pc, #644]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	029b      	lsls	r3, r3, #10
 800acc4:	499d      	ldr	r1, [pc, #628]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800acc6:	4313      	orrs	r3, r2
 800acc8:	60cb      	str	r3, [r1, #12]
 800acca:	e009      	b.n	800ace0 <HAL_RCC_OscConfig+0xa6c>
 800accc:	4b9b      	ldr	r3, [pc, #620]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	03db      	lsls	r3, r3, #15
 800acda:	4998      	ldr	r1, [pc, #608]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800acdc:	4313      	orrs	r3, r2
 800acde:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800ace0:	4b96      	ldr	r3, [pc, #600]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a95      	ldr	r2, [pc, #596]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ace6:	f043 0310 	orr.w	r3, r3, #16
 800acea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800acec:	f7f8 fc1e 	bl	800352c <HAL_GetTick>
 800acf0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800acf2:	e008      	b.n	800ad06 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800acf4:	f7f8 fc1a 	bl	800352c <HAL_GetTick>
 800acf8:	4602      	mov	r2, r0
 800acfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d901      	bls.n	800ad06 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800ad02:	2303      	movs	r3, #3
 800ad04:	e18b      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800ad06:	4b8d      	ldr	r3, [pc, #564]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 0320 	and.w	r3, r3, #32
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0f0      	beq.n	800acf4 <HAL_RCC_OscConfig+0xa80>
 800ad12:	e018      	b.n	800ad46 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800ad14:	4b89      	ldr	r3, [pc, #548]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a88      	ldr	r2, [pc, #544]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ad1a:	f023 0310 	bic.w	r3, r3, #16
 800ad1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ad20:	f7f8 fc04 	bl	800352c <HAL_GetTick>
 800ad24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800ad26:	e008      	b.n	800ad3a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800ad28:	f7f8 fc00 	bl	800352c <HAL_GetTick>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d901      	bls.n	800ad3a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	e171      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800ad3a:	4b80      	ldr	r3, [pc, #512]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0320 	and.w	r3, r3, #32
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1f0      	bne.n	800ad28 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 8166 	beq.w	800b01c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800ad50:	2300      	movs	r3, #0
 800ad52:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad56:	4b79      	ldr	r3, [pc, #484]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	f003 030c 	and.w	r3, r3, #12
 800ad5e:	2b0c      	cmp	r3, #12
 800ad60:	f000 80f2 	beq.w	800af48 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	f040 80c5 	bne.w	800aef8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800ad6e:	4b73      	ldr	r3, [pc, #460]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a72      	ldr	r2, [pc, #456]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ad74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ad7a:	f7f8 fbd7 	bl	800352c <HAL_GetTick>
 800ad7e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ad80:	e008      	b.n	800ad94 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad82:	f7f8 fbd3 	bl	800352c <HAL_GetTick>
 800ad86:	4602      	mov	r2, r0
 800ad88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d901      	bls.n	800ad94 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e144      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ad94:	4b69      	ldr	r3, [pc, #420]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f0      	bne.n	800ad82 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ada0:	4b66      	ldr	r3, [pc, #408]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ada2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ada6:	f003 0304 	and.w	r3, r3, #4
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d111      	bne.n	800add2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800adae:	4b63      	ldr	r3, [pc, #396]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800adb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adb4:	4a61      	ldr	r2, [pc, #388]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800adb6:	f043 0304 	orr.w	r3, r3, #4
 800adba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800adbe:	4b5f      	ldr	r3, [pc, #380]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800adc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800adcc:	2301      	movs	r3, #1
 800adce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800add2:	4b5b      	ldr	r3, [pc, #364]	@ (800af40 <HAL_RCC_OscConfig+0xccc>)
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800adda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800adde:	d102      	bne.n	800ade6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800ade0:	2301      	movs	r3, #1
 800ade2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800ade6:	4b56      	ldr	r3, [pc, #344]	@ (800af40 <HAL_RCC_OscConfig+0xccc>)
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	4a55      	ldr	r2, [pc, #340]	@ (800af40 <HAL_RCC_OscConfig+0xccc>)
 800adec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800adf0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800adf2:	4b52      	ldr	r3, [pc, #328]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800adf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adfa:	f023 0303 	bic.w	r3, r3, #3
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ae06:	3a01      	subs	r2, #1
 800ae08:	0212      	lsls	r2, r2, #8
 800ae0a:	4311      	orrs	r1, r2
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ae10:	430a      	orrs	r2, r1
 800ae12:	494a      	ldr	r1, [pc, #296]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ae14:	4313      	orrs	r3, r2
 800ae16:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae18:	4b48      	ldr	r3, [pc, #288]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ae1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae1c:	4b49      	ldr	r3, [pc, #292]	@ (800af44 <HAL_RCC_OscConfig+0xcd0>)
 800ae1e:	4013      	ands	r3, r2
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ae24:	3a01      	subs	r2, #1
 800ae26:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ae2e:	3a01      	subs	r2, #1
 800ae30:	0252      	lsls	r2, r2, #9
 800ae32:	b292      	uxth	r2, r2
 800ae34:	4311      	orrs	r1, r2
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ae3a:	3a01      	subs	r2, #1
 800ae3c:	0412      	lsls	r2, r2, #16
 800ae3e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ae42:	4311      	orrs	r1, r2
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ae48:	3a01      	subs	r2, #1
 800ae4a:	0612      	lsls	r2, r2, #24
 800ae4c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ae50:	430a      	orrs	r2, r1
 800ae52:	493a      	ldr	r1, [pc, #232]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ae54:	4313      	orrs	r3, r2
 800ae56:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800ae58:	4b38      	ldr	r3, [pc, #224]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ae5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5c:	4a37      	ldr	r2, [pc, #220]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ae5e:	f023 0310 	bic.w	r3, r3, #16
 800ae62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae68:	4a34      	ldr	r2, [pc, #208]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800ae6e:	4b33      	ldr	r3, [pc, #204]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ae70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae72:	4a32      	ldr	r2, [pc, #200]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ae74:	f043 0310 	orr.w	r3, r3, #16
 800ae78:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800ae7a:	4b30      	ldr	r3, [pc, #192]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ae7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae7e:	f023 020c 	bic.w	r2, r3, #12
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae86:	492d      	ldr	r1, [pc, #180]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800ae8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d105      	bne.n	800aea0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800ae94:	4b2a      	ldr	r3, [pc, #168]	@ (800af40 <HAL_RCC_OscConfig+0xccc>)
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	4a29      	ldr	r2, [pc, #164]	@ (800af40 <HAL_RCC_OscConfig+0xccc>)
 800ae9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ae9e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800aea0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d107      	bne.n	800aeb8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800aea8:	4b24      	ldr	r3, [pc, #144]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800aeaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aeae:	4a23      	ldr	r2, [pc, #140]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800aeb0:	f023 0304 	bic.w	r3, r3, #4
 800aeb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800aeb8:	4b20      	ldr	r3, [pc, #128]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a1f      	ldr	r2, [pc, #124]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800aebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aec2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800aec4:	f7f8 fb32 	bl	800352c <HAL_GetTick>
 800aec8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800aeca:	e008      	b.n	800aede <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aecc:	f7f8 fb2e 	bl	800352c <HAL_GetTick>
 800aed0:	4602      	mov	r2, r0
 800aed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d901      	bls.n	800aede <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e09f      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800aede:	4b17      	ldr	r3, [pc, #92]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0f0      	beq.n	800aecc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aeea:	4b14      	ldr	r3, [pc, #80]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800aeec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeee:	4a13      	ldr	r2, [pc, #76]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800aef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aef4:	6293      	str	r3, [r2, #40]	@ 0x28
 800aef6:	e091      	b.n	800b01c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800aef8:	4b10      	ldr	r3, [pc, #64]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a0f      	ldr	r2, [pc, #60]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800aefe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800af04:	f7f8 fb12 	bl	800352c <HAL_GetTick>
 800af08:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800af0a:	e008      	b.n	800af1e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af0c:	f7f8 fb0e 	bl	800352c <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b02      	cmp	r3, #2
 800af18:	d901      	bls.n	800af1e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	e07f      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800af1e:	4b07      	ldr	r3, [pc, #28]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1f0      	bne.n	800af0c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800af2a:	4b04      	ldr	r3, [pc, #16]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800af2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af2e:	4a03      	ldr	r2, [pc, #12]	@ (800af3c <HAL_RCC_OscConfig+0xcc8>)
 800af30:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800af34:	f023 0303 	bic.w	r3, r3, #3
 800af38:	6293      	str	r3, [r2, #40]	@ 0x28
 800af3a:	e06f      	b.n	800b01c <HAL_RCC_OscConfig+0xda8>
 800af3c:	46020c00 	.word	0x46020c00
 800af40:	46020800 	.word	0x46020800
 800af44:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800af48:	4b37      	ldr	r3, [pc, #220]	@ (800b028 <HAL_RCC_OscConfig+0xdb4>)
 800af4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800af4e:	4b36      	ldr	r3, [pc, #216]	@ (800b028 <HAL_RCC_OscConfig+0xdb4>)
 800af50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af52:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d039      	beq.n	800afd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	f003 0203 	and.w	r2, r3, #3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af66:	429a      	cmp	r2, r3
 800af68:	d132      	bne.n	800afd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	0a1b      	lsrs	r3, r3, #8
 800af6e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af76:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800af78:	429a      	cmp	r2, r3
 800af7a:	d129      	bne.n	800afd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800af86:	429a      	cmp	r2, r3
 800af88:	d122      	bne.n	800afd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af94:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800af96:	429a      	cmp	r2, r3
 800af98:	d11a      	bne.n	800afd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	0a5b      	lsrs	r3, r3, #9
 800af9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afa6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d111      	bne.n	800afd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	0c1b      	lsrs	r3, r3, #16
 800afb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afb8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afba:	429a      	cmp	r2, r3
 800afbc:	d108      	bne.n	800afd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	0e1b      	lsrs	r3, r3, #24
 800afc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800afcc:	429a      	cmp	r2, r3
 800afce:	d001      	beq.n	800afd4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e024      	b.n	800b01e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800afd4:	4b14      	ldr	r3, [pc, #80]	@ (800b028 <HAL_RCC_OscConfig+0xdb4>)
 800afd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd8:	08db      	lsrs	r3, r3, #3
 800afda:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d01a      	beq.n	800b01c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800afe6:	4b10      	ldr	r3, [pc, #64]	@ (800b028 <HAL_RCC_OscConfig+0xdb4>)
 800afe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afea:	4a0f      	ldr	r2, [pc, #60]	@ (800b028 <HAL_RCC_OscConfig+0xdb4>)
 800afec:	f023 0310 	bic.w	r3, r3, #16
 800aff0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff2:	f7f8 fa9b 	bl	800352c <HAL_GetTick>
 800aff6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800aff8:	bf00      	nop
 800affa:	f7f8 fa97 	bl	800352c <HAL_GetTick>
 800affe:	4602      	mov	r2, r0
 800b000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b002:	4293      	cmp	r3, r2
 800b004:	d0f9      	beq.n	800affa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b00a:	4a07      	ldr	r2, [pc, #28]	@ (800b028 <HAL_RCC_OscConfig+0xdb4>)
 800b00c:	00db      	lsls	r3, r3, #3
 800b00e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800b010:	4b05      	ldr	r3, [pc, #20]	@ (800b028 <HAL_RCC_OscConfig+0xdb4>)
 800b012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b014:	4a04      	ldr	r2, [pc, #16]	@ (800b028 <HAL_RCC_OscConfig+0xdb4>)
 800b016:	f043 0310 	orr.w	r3, r3, #16
 800b01a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3738      	adds	r7, #56	@ 0x38
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	46020c00 	.word	0x46020c00

0800b02c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e1d9      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b040:	4b9b      	ldr	r3, [pc, #620]	@ (800b2b0 <HAL_RCC_ClockConfig+0x284>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 030f 	and.w	r3, r3, #15
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d910      	bls.n	800b070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b04e:	4b98      	ldr	r3, [pc, #608]	@ (800b2b0 <HAL_RCC_ClockConfig+0x284>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f023 020f 	bic.w	r2, r3, #15
 800b056:	4996      	ldr	r1, [pc, #600]	@ (800b2b0 <HAL_RCC_ClockConfig+0x284>)
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b05e:	4b94      	ldr	r3, [pc, #592]	@ (800b2b0 <HAL_RCC_ClockConfig+0x284>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 030f 	and.w	r3, r3, #15
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d001      	beq.n	800b070 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e1c1      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0310 	and.w	r3, r3, #16
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d010      	beq.n	800b09e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	695a      	ldr	r2, [r3, #20]
 800b080:	4b8c      	ldr	r3, [pc, #560]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b084:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b088:	429a      	cmp	r2, r3
 800b08a:	d908      	bls.n	800b09e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800b08c:	4b89      	ldr	r3, [pc, #548]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b090:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	4986      	ldr	r1, [pc, #536]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b09a:	4313      	orrs	r3, r2
 800b09c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0308 	and.w	r3, r3, #8
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d012      	beq.n	800b0d0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691a      	ldr	r2, [r3, #16]
 800b0ae:	4b81      	ldr	r3, [pc, #516]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	091b      	lsrs	r3, r3, #4
 800b0b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d909      	bls.n	800b0d0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b0bc:	4b7d      	ldr	r3, [pc, #500]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	011b      	lsls	r3, r3, #4
 800b0ca:	497a      	ldr	r1, [pc, #488]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0304 	and.w	r3, r3, #4
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d010      	beq.n	800b0fe <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	68da      	ldr	r2, [r3, #12]
 800b0e0:	4b74      	ldr	r3, [pc, #464]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b0e2:	6a1b      	ldr	r3, [r3, #32]
 800b0e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d908      	bls.n	800b0fe <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b0ec:	4b71      	ldr	r3, [pc, #452]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b0ee:	6a1b      	ldr	r3, [r3, #32]
 800b0f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	496e      	ldr	r1, [pc, #440]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0302 	and.w	r3, r3, #2
 800b106:	2b00      	cmp	r3, #0
 800b108:	d010      	beq.n	800b12c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689a      	ldr	r2, [r3, #8]
 800b10e:	4b69      	ldr	r3, [pc, #420]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	f003 030f 	and.w	r3, r3, #15
 800b116:	429a      	cmp	r2, r3
 800b118:	d908      	bls.n	800b12c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b11a:	4b66      	ldr	r3, [pc, #408]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	f023 020f 	bic.w	r2, r3, #15
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	4963      	ldr	r1, [pc, #396]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b128:	4313      	orrs	r3, r2
 800b12a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0301 	and.w	r3, r3, #1
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 80d2 	beq.w	800b2de <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800b13a:	2300      	movs	r3, #0
 800b13c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	2b03      	cmp	r3, #3
 800b144:	d143      	bne.n	800b1ce <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b146:	4b5b      	ldr	r3, [pc, #364]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b14c:	f003 0304 	and.w	r3, r3, #4
 800b150:	2b00      	cmp	r3, #0
 800b152:	d110      	bne.n	800b176 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b154:	4b57      	ldr	r3, [pc, #348]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b15a:	4a56      	ldr	r2, [pc, #344]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b15c:	f043 0304 	orr.w	r3, r3, #4
 800b160:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b164:	4b53      	ldr	r3, [pc, #332]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b16a:	f003 0304 	and.w	r3, r3, #4
 800b16e:	60bb      	str	r3, [r7, #8]
 800b170:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800b172:	2301      	movs	r3, #1
 800b174:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800b176:	f7f8 f9d9 	bl	800352c <HAL_GetTick>
 800b17a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800b17c:	4b4e      	ldr	r3, [pc, #312]	@ (800b2b8 <HAL_RCC_ClockConfig+0x28c>)
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00f      	beq.n	800b1a8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b188:	e008      	b.n	800b19c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800b18a:	f7f8 f9cf 	bl	800352c <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	2b02      	cmp	r3, #2
 800b196:	d901      	bls.n	800b19c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800b198:	2303      	movs	r3, #3
 800b19a:	e12b      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b19c:	4b46      	ldr	r3, [pc, #280]	@ (800b2b8 <HAL_RCC_ClockConfig+0x28c>)
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d0f0      	beq.n	800b18a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d107      	bne.n	800b1be <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b1ae:	4b41      	ldr	r3, [pc, #260]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b1b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1b4:	4a3f      	ldr	r2, [pc, #252]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b1b6:	f023 0304 	bic.w	r3, r3, #4
 800b1ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b1be:	4b3d      	ldr	r3, [pc, #244]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d121      	bne.n	800b20e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e112      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d107      	bne.n	800b1e6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b1d6:	4b37      	ldr	r3, [pc, #220]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d115      	bne.n	800b20e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e106      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d107      	bne.n	800b1fe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800b1ee:	4b31      	ldr	r3, [pc, #196]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0304 	and.w	r3, r3, #4
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d109      	bne.n	800b20e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e0fa      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b1fe:	4b2d      	ldr	r3, [pc, #180]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e0f2      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800b20e:	4b29      	ldr	r3, [pc, #164]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b210:	69db      	ldr	r3, [r3, #28]
 800b212:	f023 0203 	bic.w	r2, r3, #3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	4926      	ldr	r1, [pc, #152]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b21c:	4313      	orrs	r3, r2
 800b21e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800b220:	f7f8 f984 	bl	800352c <HAL_GetTick>
 800b224:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	2b03      	cmp	r3, #3
 800b22c:	d112      	bne.n	800b254 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b22e:	e00a      	b.n	800b246 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b230:	f7f8 f97c 	bl	800352c <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b23e:	4293      	cmp	r3, r2
 800b240:	d901      	bls.n	800b246 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	e0d6      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b246:	4b1b      	ldr	r3, [pc, #108]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	f003 030c 	and.w	r3, r3, #12
 800b24e:	2b0c      	cmp	r3, #12
 800b250:	d1ee      	bne.n	800b230 <HAL_RCC_ClockConfig+0x204>
 800b252:	e044      	b.n	800b2de <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d112      	bne.n	800b282 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b25c:	e00a      	b.n	800b274 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b25e:	f7f8 f965 	bl	800352c <HAL_GetTick>
 800b262:	4602      	mov	r2, r0
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d901      	bls.n	800b274 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b270:	2303      	movs	r3, #3
 800b272:	e0bf      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b274:	4b0f      	ldr	r3, [pc, #60]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b276:	69db      	ldr	r3, [r3, #28]
 800b278:	f003 030c 	and.w	r3, r3, #12
 800b27c:	2b08      	cmp	r3, #8
 800b27e:	d1ee      	bne.n	800b25e <HAL_RCC_ClockConfig+0x232>
 800b280:	e02d      	b.n	800b2de <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d123      	bne.n	800b2d2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b28a:	e00a      	b.n	800b2a2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b28c:	f7f8 f94e 	bl	800352c <HAL_GetTick>
 800b290:	4602      	mov	r2, r0
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d901      	bls.n	800b2a2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e0a8      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b2a2:	4b04      	ldr	r3, [pc, #16]	@ (800b2b4 <HAL_RCC_ClockConfig+0x288>)
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	f003 030c 	and.w	r3, r3, #12
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1ee      	bne.n	800b28c <HAL_RCC_ClockConfig+0x260>
 800b2ae:	e016      	b.n	800b2de <HAL_RCC_ClockConfig+0x2b2>
 800b2b0:	40022000 	.word	0x40022000
 800b2b4:	46020c00 	.word	0x46020c00
 800b2b8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2bc:	f7f8 f936 	bl	800352c <HAL_GetTick>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d901      	bls.n	800b2d2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	e090      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b2d2:	4b4a      	ldr	r3, [pc, #296]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b2d4:	69db      	ldr	r3, [r3, #28]
 800b2d6:	f003 030c 	and.w	r3, r3, #12
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	d1ee      	bne.n	800b2bc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0302 	and.w	r3, r3, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d010      	beq.n	800b30c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	689a      	ldr	r2, [r3, #8]
 800b2ee:	4b43      	ldr	r3, [pc, #268]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	f003 030f 	and.w	r3, r3, #15
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d208      	bcs.n	800b30c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b2fa:	4b40      	ldr	r3, [pc, #256]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	f023 020f 	bic.w	r2, r3, #15
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	493d      	ldr	r1, [pc, #244]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b308:	4313      	orrs	r3, r2
 800b30a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b30c:	4b3c      	ldr	r3, [pc, #240]	@ (800b400 <HAL_RCC_ClockConfig+0x3d4>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 030f 	and.w	r3, r3, #15
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	429a      	cmp	r2, r3
 800b318:	d210      	bcs.n	800b33c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b31a:	4b39      	ldr	r3, [pc, #228]	@ (800b400 <HAL_RCC_ClockConfig+0x3d4>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f023 020f 	bic.w	r2, r3, #15
 800b322:	4937      	ldr	r1, [pc, #220]	@ (800b400 <HAL_RCC_ClockConfig+0x3d4>)
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	4313      	orrs	r3, r2
 800b328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b32a:	4b35      	ldr	r3, [pc, #212]	@ (800b400 <HAL_RCC_ClockConfig+0x3d4>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 030f 	and.w	r3, r3, #15
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	429a      	cmp	r2, r3
 800b336:	d001      	beq.n	800b33c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	e05b      	b.n	800b3f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d010      	beq.n	800b36a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68da      	ldr	r2, [r3, #12]
 800b34c:	4b2b      	ldr	r3, [pc, #172]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b354:	429a      	cmp	r2, r3
 800b356:	d208      	bcs.n	800b36a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b358:	4b28      	ldr	r3, [pc, #160]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	4925      	ldr	r1, [pc, #148]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b366:	4313      	orrs	r3, r2
 800b368:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0308 	and.w	r3, r3, #8
 800b372:	2b00      	cmp	r3, #0
 800b374:	d012      	beq.n	800b39c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	691a      	ldr	r2, [r3, #16]
 800b37a:	4b20      	ldr	r3, [pc, #128]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	091b      	lsrs	r3, r3, #4
 800b380:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b384:	429a      	cmp	r2, r3
 800b386:	d209      	bcs.n	800b39c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b388:	4b1c      	ldr	r3, [pc, #112]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b38a:	6a1b      	ldr	r3, [r3, #32]
 800b38c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	011b      	lsls	r3, r3, #4
 800b396:	4919      	ldr	r1, [pc, #100]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b398:	4313      	orrs	r3, r2
 800b39a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 0310 	and.w	r3, r3, #16
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d010      	beq.n	800b3ca <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	695a      	ldr	r2, [r3, #20]
 800b3ac:	4b13      	ldr	r3, [pc, #76]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d208      	bcs.n	800b3ca <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800b3b8:	4b10      	ldr	r3, [pc, #64]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	695b      	ldr	r3, [r3, #20]
 800b3c4:	490d      	ldr	r1, [pc, #52]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b3ca:	f000 f821 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b3fc <HAL_RCC_ClockConfig+0x3d0>)
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	f003 030f 	and.w	r3, r3, #15
 800b3d8:	490a      	ldr	r1, [pc, #40]	@ (800b404 <HAL_RCC_ClockConfig+0x3d8>)
 800b3da:	5ccb      	ldrb	r3, [r1, r3]
 800b3dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e0:	4a09      	ldr	r2, [pc, #36]	@ (800b408 <HAL_RCC_ClockConfig+0x3dc>)
 800b3e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b3e4:	4b09      	ldr	r3, [pc, #36]	@ (800b40c <HAL_RCC_ClockConfig+0x3e0>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7f8 f815 	bl	8003418 <HAL_InitTick>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	73fb      	strb	r3, [r7, #15]

  return status;
 800b3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	46020c00 	.word	0x46020c00
 800b400:	40022000 	.word	0x40022000
 800b404:	080124c4 	.word	0x080124c4
 800b408:	20000028 	.word	0x20000028
 800b40c:	2000002c 	.word	0x2000002c

0800b410 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b410:	b480      	push	{r7}
 800b412:	b08b      	sub	sp, #44	@ 0x2c
 800b414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800b41a:	2300      	movs	r3, #0
 800b41c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b41e:	4b78      	ldr	r3, [pc, #480]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b420:	69db      	ldr	r3, [r3, #28]
 800b422:	f003 030c 	and.w	r3, r3, #12
 800b426:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b428:	4b75      	ldr	r3, [pc, #468]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42c:	f003 0303 	and.w	r3, r3, #3
 800b430:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d005      	beq.n	800b444 <HAL_RCC_GetSysClockFreq+0x34>
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	2b0c      	cmp	r3, #12
 800b43c:	d121      	bne.n	800b482 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d11e      	bne.n	800b482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800b444:	4b6e      	ldr	r3, [pc, #440]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d107      	bne.n	800b460 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800b450:	4b6b      	ldr	r3, [pc, #428]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b456:	0b1b      	lsrs	r3, r3, #12
 800b458:	f003 030f 	and.w	r3, r3, #15
 800b45c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b45e:	e005      	b.n	800b46c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800b460:	4b67      	ldr	r3, [pc, #412]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	0f1b      	lsrs	r3, r3, #28
 800b466:	f003 030f 	and.w	r3, r3, #15
 800b46a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b46c:	4a65      	ldr	r2, [pc, #404]	@ (800b604 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800b46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b474:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d110      	bne.n	800b49e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b480:	e00d      	b.n	800b49e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b482:	4b5f      	ldr	r3, [pc, #380]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	f003 030c 	and.w	r3, r3, #12
 800b48a:	2b04      	cmp	r3, #4
 800b48c:	d102      	bne.n	800b494 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b48e:	4b5e      	ldr	r3, [pc, #376]	@ (800b608 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b490:	623b      	str	r3, [r7, #32]
 800b492:	e004      	b.n	800b49e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	2b08      	cmp	r3, #8
 800b498:	d101      	bne.n	800b49e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b49a:	4b5b      	ldr	r3, [pc, #364]	@ (800b608 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b49c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	2b0c      	cmp	r3, #12
 800b4a2:	f040 80a5 	bne.w	800b5f0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b4a6:	4b56      	ldr	r3, [pc, #344]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4aa:	f003 0303 	and.w	r3, r3, #3
 800b4ae:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b4b0:	4b53      	ldr	r3, [pc, #332]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b4:	0a1b      	lsrs	r3, r3, #8
 800b4b6:	f003 030f 	and.w	r3, r3, #15
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b4be:	4b50      	ldr	r3, [pc, #320]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c2:	091b      	lsrs	r3, r3, #4
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b4ca:	4b4d      	ldr	r3, [pc, #308]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b4cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4ce:	08db      	lsrs	r3, r3, #3
 800b4d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	fb02 f303 	mul.w	r3, r2, r3
 800b4da:	ee07 3a90 	vmov	s15, r3
 800b4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d003      	beq.n	800b4f4 <HAL_RCC_GetSysClockFreq+0xe4>
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	d022      	beq.n	800b538 <HAL_RCC_GetSysClockFreq+0x128>
 800b4f2:	e043      	b.n	800b57c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	ee07 3a90 	vmov	s15, r3
 800b4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4fe:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800b60c <HAL_RCC_GetSysClockFreq+0x1fc>
 800b502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b506:	4b3e      	ldr	r3, [pc, #248]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b516:	ed97 6a01 	vldr	s12, [r7, #4]
 800b51a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800b610 <HAL_RCC_GetSysClockFreq+0x200>
 800b51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b522:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b536:	e046      	b.n	800b5c6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	ee07 3a90 	vmov	s15, r3
 800b53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b542:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800b60c <HAL_RCC_GetSysClockFreq+0x1fc>
 800b546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b54a:	4b2d      	ldr	r3, [pc, #180]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b54c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b552:	ee07 3a90 	vmov	s15, r3
 800b556:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b55a:	ed97 6a01 	vldr	s12, [r7, #4]
 800b55e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800b610 <HAL_RCC_GetSysClockFreq+0x200>
 800b562:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b566:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b56a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b572:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b57a:	e024      	b.n	800b5c6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57e:	ee07 3a90 	vmov	s15, r3
 800b582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	ee07 3a90 	vmov	s15, r3
 800b58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b594:	4b1a      	ldr	r3, [pc, #104]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59c:	ee07 3a90 	vmov	s15, r3
 800b5a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b5a4:	ed97 6a01 	vldr	s12, [r7, #4]
 800b5a8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800b610 <HAL_RCC_GetSysClockFreq+0x200>
 800b5ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b5b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b5b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5c4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800b5c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b600 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b5c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ca:	0e1b      	lsrs	r3, r3, #24
 800b5cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	ee07 3a90 	vmov	s15, r3
 800b5da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b5de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ea:	ee17 3a90 	vmov	r3, s15
 800b5ee:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	372c      	adds	r7, #44	@ 0x2c
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	46020c00 	.word	0x46020c00
 800b604:	080124dc 	.word	0x080124dc
 800b608:	00f42400 	.word	0x00f42400
 800b60c:	4b742400 	.word	0x4b742400
 800b610:	46000000 	.word	0x46000000

0800b614 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b618:	f7ff fefa 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800b61c:	4602      	mov	r2, r0
 800b61e:	4b07      	ldr	r3, [pc, #28]	@ (800b63c <HAL_RCC_GetHCLKFreq+0x28>)
 800b620:	6a1b      	ldr	r3, [r3, #32]
 800b622:	f003 030f 	and.w	r3, r3, #15
 800b626:	4906      	ldr	r1, [pc, #24]	@ (800b640 <HAL_RCC_GetHCLKFreq+0x2c>)
 800b628:	5ccb      	ldrb	r3, [r1, r3]
 800b62a:	fa22 f303 	lsr.w	r3, r2, r3
 800b62e:	4a05      	ldr	r2, [pc, #20]	@ (800b644 <HAL_RCC_GetHCLKFreq+0x30>)
 800b630:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b632:	4b04      	ldr	r3, [pc, #16]	@ (800b644 <HAL_RCC_GetHCLKFreq+0x30>)
 800b634:	681b      	ldr	r3, [r3, #0]
}
 800b636:	4618      	mov	r0, r3
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	46020c00 	.word	0x46020c00
 800b640:	080124c4 	.word	0x080124c4
 800b644:	20000028 	.word	0x20000028

0800b648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b64c:	f7ff ffe2 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b650:	4602      	mov	r2, r0
 800b652:	4b05      	ldr	r3, [pc, #20]	@ (800b668 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	091b      	lsrs	r3, r3, #4
 800b658:	f003 0307 	and.w	r3, r3, #7
 800b65c:	4903      	ldr	r1, [pc, #12]	@ (800b66c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b65e:	5ccb      	ldrb	r3, [r1, r3]
 800b660:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b664:	4618      	mov	r0, r3
 800b666:	bd80      	pop	{r7, pc}
 800b668:	46020c00 	.word	0x46020c00
 800b66c:	080124d4 	.word	0x080124d4

0800b670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800b674:	f7ff ffce 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b678:	4602      	mov	r2, r0
 800b67a:	4b05      	ldr	r3, [pc, #20]	@ (800b690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b67c:	6a1b      	ldr	r3, [r3, #32]
 800b67e:	0a1b      	lsrs	r3, r3, #8
 800b680:	f003 0307 	and.w	r3, r3, #7
 800b684:	4903      	ldr	r1, [pc, #12]	@ (800b694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b686:	5ccb      	ldrb	r3, [r1, r3]
 800b688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	46020c00 	.word	0x46020c00
 800b694:	080124d4 	.word	0x080124d4

0800b698 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800b69c:	f7ff ffba 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	4b05      	ldr	r3, [pc, #20]	@ (800b6b8 <HAL_RCC_GetPCLK3Freq+0x20>)
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a6:	091b      	lsrs	r3, r3, #4
 800b6a8:	f003 0307 	and.w	r3, r3, #7
 800b6ac:	4903      	ldr	r1, [pc, #12]	@ (800b6bc <HAL_RCC_GetPCLK3Freq+0x24>)
 800b6ae:	5ccb      	ldrb	r3, [r1, r3]
 800b6b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	46020c00 	.word	0x46020c00
 800b6bc:	080124d4 	.word	0x080124d4

0800b6c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b6c8:	4b3e      	ldr	r3, [pc, #248]	@ (800b7c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b6ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b6d6:	f7fe fd21 	bl	800a11c <HAL_PWREx_GetVoltageRange>
 800b6da:	6178      	str	r0, [r7, #20]
 800b6dc:	e019      	b.n	800b712 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b6de:	4b39      	ldr	r3, [pc, #228]	@ (800b7c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b6e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6e4:	4a37      	ldr	r2, [pc, #220]	@ (800b7c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b6e6:	f043 0304 	orr.w	r3, r3, #4
 800b6ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b6ee:	4b35      	ldr	r3, [pc, #212]	@ (800b7c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b6f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6f4:	f003 0304 	and.w	r3, r3, #4
 800b6f8:	60fb      	str	r3, [r7, #12]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b6fc:	f7fe fd0e 	bl	800a11c <HAL_PWREx_GetVoltageRange>
 800b700:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b702:	4b30      	ldr	r3, [pc, #192]	@ (800b7c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b708:	4a2e      	ldr	r2, [pc, #184]	@ (800b7c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b70a:	f023 0304 	bic.w	r3, r3, #4
 800b70e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b718:	d003      	beq.n	800b722 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b720:	d109      	bne.n	800b736 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b728:	d202      	bcs.n	800b730 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800b72a:	2301      	movs	r3, #1
 800b72c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b72e:	e033      	b.n	800b798 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800b730:	2300      	movs	r3, #0
 800b732:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b734:	e030      	b.n	800b798 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b73c:	d208      	bcs.n	800b750 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b744:	d102      	bne.n	800b74c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800b746:	2303      	movs	r3, #3
 800b748:	613b      	str	r3, [r7, #16]
 800b74a:	e025      	b.n	800b798 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e035      	b.n	800b7bc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b756:	d90f      	bls.n	800b778 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d109      	bne.n	800b772 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b764:	d902      	bls.n	800b76c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800b766:	2300      	movs	r3, #0
 800b768:	613b      	str	r3, [r7, #16]
 800b76a:	e015      	b.n	800b798 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800b76c:	2301      	movs	r3, #1
 800b76e:	613b      	str	r3, [r7, #16]
 800b770:	e012      	b.n	800b798 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b772:	2300      	movs	r3, #0
 800b774:	613b      	str	r3, [r7, #16]
 800b776:	e00f      	b.n	800b798 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b77e:	d109      	bne.n	800b794 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b786:	d102      	bne.n	800b78e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b788:	2301      	movs	r3, #1
 800b78a:	613b      	str	r3, [r7, #16]
 800b78c:	e004      	b.n	800b798 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b78e:	2302      	movs	r3, #2
 800b790:	613b      	str	r3, [r7, #16]
 800b792:	e001      	b.n	800b798 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b794:	2301      	movs	r3, #1
 800b796:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b798:	4b0b      	ldr	r3, [pc, #44]	@ (800b7c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f023 020f 	bic.w	r2, r3, #15
 800b7a0:	4909      	ldr	r1, [pc, #36]	@ (800b7c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b7a8:	4b07      	ldr	r3, [pc, #28]	@ (800b7c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 030f 	and.w	r3, r3, #15
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d001      	beq.n	800b7ba <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e000      	b.n	800b7bc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	46020c00 	.word	0x46020c00
 800b7c8:	40022000 	.word	0x40022000

0800b7cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800b7cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7d0:	b0c8      	sub	sp, #288	@ 0x120
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	f002 0401 	and.w	r4, r2, #1
 800b7f0:	2500      	movs	r5, #0
 800b7f2:	ea54 0305 	orrs.w	r3, r4, r5
 800b7f6:	d00b      	beq.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b7f8:	4bd5      	ldr	r3, [pc, #852]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b7fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7fe:	f023 0103 	bic.w	r1, r3, #3
 800b802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b808:	4ad1      	ldr	r2, [pc, #836]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b80a:	430b      	orrs	r3, r1
 800b80c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b818:	f002 0802 	and.w	r8, r2, #2
 800b81c:	f04f 0900 	mov.w	r9, #0
 800b820:	ea58 0309 	orrs.w	r3, r8, r9
 800b824:	d00b      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b826:	4bca      	ldr	r3, [pc, #808]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b82c:	f023 010c 	bic.w	r1, r3, #12
 800b830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b836:	4ac6      	ldr	r2, [pc, #792]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b838:	430b      	orrs	r3, r1
 800b83a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b83e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f002 0a04 	and.w	sl, r2, #4
 800b84a:	f04f 0b00 	mov.w	fp, #0
 800b84e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b852:	d00b      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b854:	4bbe      	ldr	r3, [pc, #760]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b85a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b85e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b864:	4aba      	ldr	r2, [pc, #744]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b866:	430b      	orrs	r3, r1
 800b868:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b86c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f002 0308 	and.w	r3, r2, #8
 800b878:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b87c:	2300      	movs	r3, #0
 800b87e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b882:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b886:	460b      	mov	r3, r1
 800b888:	4313      	orrs	r3, r2
 800b88a:	d00b      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800b88c:	4bb0      	ldr	r3, [pc, #704]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b88e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b892:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b89a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b89c:	4aac      	ldr	r2, [pc, #688]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b89e:	430b      	orrs	r3, r1
 800b8a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b8a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	f002 0310 	and.w	r3, r2, #16
 800b8b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b8ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b8be:	460b      	mov	r3, r1
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	d00b      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800b8c4:	4ba2      	ldr	r3, [pc, #648]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b8c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b8ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8d4:	4a9e      	ldr	r2, [pc, #632]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b8d6:	430b      	orrs	r3, r1
 800b8d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b8e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b8f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	d00b      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800b8fc:	4b94      	ldr	r3, [pc, #592]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b8fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b902:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b90a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b90c:	4a90      	ldr	r2, [pc, #576]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b90e:	430b      	orrs	r3, r1
 800b910:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91c:	f002 0320 	and.w	r3, r2, #32
 800b920:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b924:	2300      	movs	r3, #0
 800b926:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b92a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b92e:	460b      	mov	r3, r1
 800b930:	4313      	orrs	r3, r2
 800b932:	d00b      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b934:	4b86      	ldr	r3, [pc, #536]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b93a:	f023 0107 	bic.w	r1, r3, #7
 800b93e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b944:	4a82      	ldr	r2, [pc, #520]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b946:	430b      	orrs	r3, r1
 800b948:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b94c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b958:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b95c:	2300      	movs	r3, #0
 800b95e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b962:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b966:	460b      	mov	r3, r1
 800b968:	4313      	orrs	r3, r2
 800b96a:	d00b      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b96c:	4b78      	ldr	r3, [pc, #480]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b96e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b972:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b97a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b97c:	4a74      	ldr	r2, [pc, #464]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b97e:	430b      	orrs	r3, r1
 800b980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b990:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b994:	2300      	movs	r3, #0
 800b996:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b99a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	d00b      	beq.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b9a4:	4b6a      	ldr	r3, [pc, #424]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b9ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9b4:	4a66      	ldr	r2, [pc, #408]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b9bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b9c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b9d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	d00b      	beq.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b9dc:	4b5c      	ldr	r3, [pc, #368]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b9e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b9e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ec:	4a58      	ldr	r2, [pc, #352]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9ee:	430b      	orrs	r3, r1
 800b9f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b9f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ba00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba04:	2300      	movs	r3, #0
 800ba06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ba0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ba0e:	460b      	mov	r3, r1
 800ba10:	4313      	orrs	r3, r2
 800ba12:	d00b      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800ba14:	4b4e      	ldr	r3, [pc, #312]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba1a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800ba1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba24:	4a4a      	ldr	r2, [pc, #296]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba26:	430b      	orrs	r3, r1
 800ba28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800ba2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ba38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ba42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ba46:	460b      	mov	r3, r1
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	d00b      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800ba4c:	4b40      	ldr	r3, [pc, #256]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba52:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800ba56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba5c:	4a3c      	ldr	r2, [pc, #240]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba5e:	430b      	orrs	r3, r1
 800ba60:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800ba64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ba70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ba74:	2300      	movs	r3, #0
 800ba76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ba7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4313      	orrs	r3, r2
 800ba82:	d00c      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800ba84:	4b32      	ldr	r3, [pc, #200]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800ba8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba96:	4a2e      	ldr	r2, [pc, #184]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ba9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa6:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800baaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800baae:	2300      	movs	r3, #0
 800bab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bab4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bab8:	460b      	mov	r3, r1
 800baba:	4313      	orrs	r3, r2
 800babc:	d00c      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800babe:	4b24      	ldr	r3, [pc, #144]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bac4:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800bac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bacc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bad0:	4a1f      	ldr	r2, [pc, #124]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bad2:	430b      	orrs	r3, r1
 800bad4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800bae4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bae8:	2300      	movs	r3, #0
 800baea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800baee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800baf2:	460b      	mov	r3, r1
 800baf4:	4313      	orrs	r3, r2
 800baf6:	d00c      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800baf8:	4b15      	ldr	r3, [pc, #84]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bafa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bafe:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800bb02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb0a:	4a11      	ldr	r2, [pc, #68]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb0c:	430b      	orrs	r3, r1
 800bb0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800bb12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bb1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bb22:	2300      	movs	r3, #0
 800bb24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bb28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	d010      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800bb32:	4b07      	ldr	r3, [pc, #28]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb38:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bb3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb44:	4a02      	ldr	r2, [pc, #8]	@ (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb46:	430b      	orrs	r3, r1
 800bb48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bb4c:	e002      	b.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800bb4e:	bf00      	nop
 800bb50:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bb54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bb60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb64:	2300      	movs	r3, #0
 800bb66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bb6a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4313      	orrs	r3, r2
 800bb72:	d04c      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800bb74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bb7c:	2b80      	cmp	r3, #128	@ 0x80
 800bb7e:	d02d      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bb80:	2b80      	cmp	r3, #128	@ 0x80
 800bb82:	d827      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bb84:	2b60      	cmp	r3, #96	@ 0x60
 800bb86:	d02b      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800bb88:	2b60      	cmp	r3, #96	@ 0x60
 800bb8a:	d823      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bb8c:	2b40      	cmp	r3, #64	@ 0x40
 800bb8e:	d006      	beq.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800bb90:	2b40      	cmp	r3, #64	@ 0x40
 800bb92:	d81f      	bhi.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d009      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bb98:	2b20      	cmp	r3, #32
 800bb9a:	d011      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800bb9c:	e01a      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bb9e:	4bc0      	ldr	r3, [pc, #768]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bba2:	4abf      	ldr	r2, [pc, #764]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bba8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bbaa:	e01a      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bbac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb0:	3308      	adds	r3, #8
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f002 fcd6 	bl	800e564 <RCCEx_PLL2_Config>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bbbe:	e010      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bbc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbc4:	332c      	adds	r3, #44	@ 0x2c
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f002 fd64 	bl	800e694 <RCCEx_PLL3_Config>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bbd2:	e006      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bbda:	e002      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800bbdc:	bf00      	nop
 800bbde:	e000      	b.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800bbe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbe2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10d      	bne.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800bbea:	4bad      	ldr	r3, [pc, #692]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bbec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbf0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800bbf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bbfc:	4aa8      	ldr	r2, [pc, #672]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bbfe:	430b      	orrs	r3, r1
 800bc00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bc04:	e003      	b.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc06:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc0a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bc0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bc1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bc24:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	d053      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800bc2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bc36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc3a:	d033      	beq.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800bc3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc40:	d82c      	bhi.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bc42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc46:	d02f      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800bc48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc4c:	d826      	bhi.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bc4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc52:	d008      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800bc54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc58:	d820      	bhi.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00a      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800bc5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc62:	d011      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800bc64:	e01a      	b.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc66:	4b8e      	ldr	r3, [pc, #568]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bc68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc6a:	4a8d      	ldr	r2, [pc, #564]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bc6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc70:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800bc72:	e01a      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bc74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc78:	3308      	adds	r3, #8
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f002 fc72 	bl	800e564 <RCCEx_PLL2_Config>
 800bc80:	4603      	mov	r3, r0
 800bc82:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800bc86:	e010      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc8c:	332c      	adds	r3, #44	@ 0x2c
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f002 fd00 	bl	800e694 <RCCEx_PLL3_Config>
 800bc94:	4603      	mov	r3, r0
 800bc96:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800bc9a:	e006      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bca2:	e002      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800bca4:	bf00      	nop
 800bca6:	e000      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800bca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcaa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10d      	bne.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800bcb2:	4b7b      	ldr	r3, [pc, #492]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bcb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bcb8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800bcbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bcc4:	4a76      	ldr	r2, [pc, #472]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bcc6:	430b      	orrs	r3, r1
 800bcc8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bccc:	e003      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcce:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bcd2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800bcd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bce2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bce6:	2300      	movs	r3, #0
 800bce8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bcec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	d046      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800bcf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bcfe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bd02:	d028      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bd04:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bd08:	d821      	bhi.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bd0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd0e:	d022      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bd10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd14:	d81b      	bhi.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bd16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd1a:	d01c      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bd1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd20:	d815      	bhi.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bd22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd26:	d008      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800bd28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd2c:	d80f      	bhi.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d011      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bd32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd36:	d00e      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bd38:	e009      	b.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bd3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd3e:	3308      	adds	r3, #8
 800bd40:	4618      	mov	r0, r3
 800bd42:	f002 fc0f 	bl	800e564 <RCCEx_PLL2_Config>
 800bd46:	4603      	mov	r3, r0
 800bd48:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bd4c:	e004      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bd54:	e000      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800bd56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd58:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10d      	bne.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800bd60:	4b4f      	ldr	r3, [pc, #316]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bd62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd66:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bd6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bd72:	4a4b      	ldr	r2, [pc, #300]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bd74:	430b      	orrs	r3, r1
 800bd76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bd7a:	e003      	b.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd7c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd80:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800bd84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bd90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bd94:	2300      	movs	r3, #0
 800bd96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bd9a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4313      	orrs	r3, r2
 800bda2:	d03f      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800bda4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bda8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bdac:	2b04      	cmp	r3, #4
 800bdae:	d81e      	bhi.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x622>
 800bdb0:	a201      	add	r2, pc, #4	@ (adr r2, 800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800bdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb6:	bf00      	nop
 800bdb8:	0800bdf7 	.word	0x0800bdf7
 800bdbc:	0800bdcd 	.word	0x0800bdcd
 800bdc0:	0800bddb 	.word	0x0800bddb
 800bdc4:	0800bdf7 	.word	0x0800bdf7
 800bdc8:	0800bdf7 	.word	0x0800bdf7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bdcc:	4b34      	ldr	r3, [pc, #208]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bdce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd0:	4a33      	ldr	r2, [pc, #204]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bdd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bdd6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800bdd8:	e00e      	b.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bdda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdde:	332c      	adds	r3, #44	@ 0x2c
 800bde0:	4618      	mov	r0, r3
 800bde2:	f002 fc57 	bl	800e694 <RCCEx_PLL3_Config>
 800bde6:	4603      	mov	r3, r0
 800bde8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bdec:	e004      	b.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bdf4:	e000      	b.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800bdf6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bdf8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10d      	bne.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800be00:	4b27      	ldr	r3, [pc, #156]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800be02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be06:	f023 0107 	bic.w	r1, r3, #7
 800be0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be12:	4a23      	ldr	r2, [pc, #140]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800be14:	430b      	orrs	r3, r1
 800be16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800be1a:	e003      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be1c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be20:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800be24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800be30:	67bb      	str	r3, [r7, #120]	@ 0x78
 800be32:	2300      	movs	r3, #0
 800be34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800be36:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800be3a:	460b      	mov	r3, r1
 800be3c:	4313      	orrs	r3, r2
 800be3e:	d04c      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800be40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800be48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be4c:	d02a      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800be4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be52:	d821      	bhi.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800be54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800be58:	d026      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800be5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800be5e:	d81b      	bhi.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800be60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be64:	d00e      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800be66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be6a:	d815      	bhi.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d01d      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800be70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be74:	d110      	bne.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800be76:	4b0a      	ldr	r3, [pc, #40]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800be78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7a:	4a09      	ldr	r2, [pc, #36]	@ (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800be7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be80:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800be82:	e014      	b.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800be84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be88:	332c      	adds	r3, #44	@ 0x2c
 800be8a:	4618      	mov	r0, r3
 800be8c:	f002 fc02 	bl	800e694 <RCCEx_PLL3_Config>
 800be90:	4603      	mov	r3, r0
 800be92:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800be96:	e00a      	b.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800be9e:	e006      	b.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800bea0:	46020c00 	.word	0x46020c00
        break;
 800bea4:	bf00      	nop
 800bea6:	e002      	b.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800bea8:	bf00      	nop
 800beaa:	e000      	b.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800beac:	bf00      	nop
    }
    if (ret == HAL_OK)
 800beae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10d      	bne.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800beb6:	4baf      	ldr	r3, [pc, #700]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800beb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bebc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bec8:	4aaa      	ldr	r2, [pc, #680]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800beca:	430b      	orrs	r3, r1
 800becc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bed0:	e003      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bed2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bed6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800beda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800bee6:	673b      	str	r3, [r7, #112]	@ 0x70
 800bee8:	2300      	movs	r3, #0
 800beea:	677b      	str	r3, [r7, #116]	@ 0x74
 800beec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800bef0:	460b      	mov	r3, r1
 800bef2:	4313      	orrs	r3, r2
 800bef4:	f000 80b5 	beq.w	800c062 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bef8:	2300      	movs	r3, #0
 800befa:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800befe:	4b9d      	ldr	r3, [pc, #628]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf04:	f003 0304 	and.w	r3, r3, #4
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d113      	bne.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf0c:	4b99      	ldr	r3, [pc, #612]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf12:	4a98      	ldr	r2, [pc, #608]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf14:	f043 0304 	orr.w	r3, r3, #4
 800bf18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800bf1c:	4b95      	ldr	r3, [pc, #596]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf22:	f003 0304 	and.w	r3, r3, #4
 800bf26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800bf2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bf34:	4b90      	ldr	r3, [pc, #576]	@ (800c178 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800bf36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf38:	4a8f      	ldr	r2, [pc, #572]	@ (800c178 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800bf3a:	f043 0301 	orr.w	r3, r3, #1
 800bf3e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf40:	f7f7 faf4 	bl	800352c <HAL_GetTick>
 800bf44:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf48:	e00b      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf4a:	f7f7 faef 	bl	800352c <HAL_GetTick>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d903      	bls.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800bf5a:	2303      	movs	r3, #3
 800bf5c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bf60:	e005      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf62:	4b85      	ldr	r3, [pc, #532]	@ (800c178 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800bf64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d0ed      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800bf6e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d165      	bne.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bf76:	4b7f      	ldr	r3, [pc, #508]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800bf84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d023      	beq.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800bf8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf90:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800bf94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d01b      	beq.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bf9c:	4b75      	ldr	r3, [pc, #468]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bf9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfa6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bfaa:	4b72      	ldr	r3, [pc, #456]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bfac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfb0:	4a70      	ldr	r2, [pc, #448]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bfb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bfba:	4b6e      	ldr	r3, [pc, #440]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bfbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfc0:	4a6c      	ldr	r2, [pc, #432]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bfc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bfca:	4a6a      	ldr	r2, [pc, #424]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bfcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bfd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bfd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d019      	beq.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfe0:	f7f7 faa4 	bl	800352c <HAL_GetTick>
 800bfe4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bfe8:	e00d      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfea:	f7f7 fa9f 	bl	800352c <HAL_GetTick>
 800bfee:	4602      	mov	r2, r0
 800bff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bff4:	1ad2      	subs	r2, r2, r3
 800bff6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d903      	bls.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800bffe:	2303      	movs	r3, #3
 800c000:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800c004:	e006      	b.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c006:	4b5b      	ldr	r3, [pc, #364]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c00c:	f003 0302 	and.w	r3, r3, #2
 800c010:	2b00      	cmp	r3, #0
 800c012:	d0ea      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800c014:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10d      	bne.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800c01c:	4b55      	ldr	r3, [pc, #340]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c01e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c022:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c02a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800c02e:	4a51      	ldr	r2, [pc, #324]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c030:	430b      	orrs	r3, r1
 800c032:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c036:	e008      	b.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c038:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c03c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800c040:	e003      	b.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c042:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c046:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c04a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d107      	bne.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c052:	4b48      	ldr	r3, [pc, #288]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c058:	4a46      	ldr	r2, [pc, #280]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c05a:	f023 0304 	bic.w	r3, r3, #4
 800c05e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800c062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c06e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c070:	2300      	movs	r3, #0
 800c072:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c074:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c078:	460b      	mov	r3, r1
 800c07a:	4313      	orrs	r3, r2
 800c07c:	d042      	beq.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800c07e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c082:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c086:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c08a:	d022      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800c08c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c090:	d81b      	bhi.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c096:	d011      	beq.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800c098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c09c:	d815      	bhi.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d019      	beq.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800c0a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c0a6:	d110      	bne.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c0a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f002 fa58 	bl	800e564 <RCCEx_PLL2_Config>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c0ba:	e00d      	b.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0bc:	4b2d      	ldr	r3, [pc, #180]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0c0:	4a2c      	ldr	r2, [pc, #176]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c0c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c0c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c0c8:	e006      	b.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c0d0:	e002      	b.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800c0d2:	bf00      	nop
 800c0d4:	e000      	b.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800c0d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c0d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10d      	bne.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800c0e0:	4b24      	ldr	r3, [pc, #144]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c0e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c0e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800c0ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c0f2:	4a20      	ldr	r2, [pc, #128]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c0f4:	430b      	orrs	r3, r1
 800c0f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c0fa:	e003      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c100:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c110:	663b      	str	r3, [r7, #96]	@ 0x60
 800c112:	2300      	movs	r3, #0
 800c114:	667b      	str	r3, [r7, #100]	@ 0x64
 800c116:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c11a:	460b      	mov	r3, r1
 800c11c:	4313      	orrs	r3, r2
 800c11e:	d031      	beq.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800c120:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c12c:	d00b      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800c12e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c132:	d804      	bhi.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800c134:	2b00      	cmp	r3, #0
 800c136:	d008      	beq.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800c138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c13c:	d007      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c144:	e004      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c146:	bf00      	nop
 800c148:	e002      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c14a:	bf00      	nop
 800c14c:	e000      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c14e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c150:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c154:	2b00      	cmp	r3, #0
 800c156:	d111      	bne.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800c158:	4b06      	ldr	r3, [pc, #24]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c15a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c15e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c16a:	4a02      	ldr	r2, [pc, #8]	@ (800c174 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c16c:	430b      	orrs	r3, r1
 800c16e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c172:	e007      	b.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800c174:	46020c00 	.word	0x46020c00
 800c178:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c17c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c180:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800c184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c190:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c192:	2300      	movs	r3, #0
 800c194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c196:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c19a:	460b      	mov	r3, r1
 800c19c:	4313      	orrs	r3, r2
 800c19e:	d00c      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800c1a0:	4bb2      	ldr	r3, [pc, #712]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c1a6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800c1aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c1b2:	4aae      	ldr	r2, [pc, #696]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1b4:	430b      	orrs	r3, r1
 800c1b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800c1ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c1c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1cc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	d019      	beq.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800c1d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c1de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c1e2:	d105      	bne.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c1e4:	4ba1      	ldr	r3, [pc, #644]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1e8:	4aa0      	ldr	r2, [pc, #640]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1ee:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800c1f0:	4b9e      	ldr	r3, [pc, #632]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c1f6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800c1fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c202:	4a9a      	ldr	r2, [pc, #616]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c204:	430b      	orrs	r3, r1
 800c206:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800c20a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c212:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c216:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c218:	2300      	movs	r3, #0
 800c21a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c21c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c220:	460b      	mov	r3, r1
 800c222:	4313      	orrs	r3, r2
 800c224:	d00c      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800c226:	4b91      	ldr	r3, [pc, #580]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c22c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c234:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c238:	4a8c      	ldr	r2, [pc, #560]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c23a:	430b      	orrs	r3, r1
 800c23c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800c240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c24c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c24e:	2300      	movs	r3, #0
 800c250:	647b      	str	r3, [r7, #68]	@ 0x44
 800c252:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c256:	460b      	mov	r3, r1
 800c258:	4313      	orrs	r3, r2
 800c25a:	d00c      	beq.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800c25c:	4b83      	ldr	r3, [pc, #524]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c25e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c262:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c26a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c26e:	4a7f      	ldr	r2, [pc, #508]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c270:	430b      	orrs	r3, r1
 800c272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800c276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c282:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c284:	2300      	movs	r3, #0
 800c286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c288:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c28c:	460b      	mov	r3, r1
 800c28e:	4313      	orrs	r3, r2
 800c290:	d00c      	beq.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800c292:	4b76      	ldr	r3, [pc, #472]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c298:	f023 0118 	bic.w	r1, r3, #24
 800c29c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2a0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c2a4:	4a71      	ldr	r2, [pc, #452]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c2a6:	430b      	orrs	r3, r1
 800c2a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c2ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800c2b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	d032      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800c2c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c2d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2d4:	d105      	bne.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2d6:	4b65      	ldr	r3, [pc, #404]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2da:	4a64      	ldr	r2, [pc, #400]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c2dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c2e0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800c2e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c2ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c2ee:	d108      	bne.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c2f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2f4:	3308      	adds	r3, #8
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f002 f934 	bl	800e564 <RCCEx_PLL2_Config>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800c302:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10d      	bne.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800c30a:	4b58      	ldr	r3, [pc, #352]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c30c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c310:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c318:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c31c:	4a53      	ldr	r2, [pc, #332]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c31e:	430b      	orrs	r3, r1
 800c320:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c324:	e003      	b.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c326:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c32a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800c32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c336:	2100      	movs	r1, #0
 800c338:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c340:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c344:	460b      	mov	r3, r1
 800c346:	4313      	orrs	r3, r2
 800c348:	d04a      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800c34a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c34e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c352:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c356:	d01e      	beq.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800c358:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c35c:	d825      	bhi.n	800c3aa <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c35e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c362:	d00e      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800c364:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c368:	d81f      	bhi.n	800c3aa <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d021      	beq.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800c36e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c372:	d11a      	bne.n	800c3aa <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c374:	4b3d      	ldr	r3, [pc, #244]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c378:	4a3c      	ldr	r2, [pc, #240]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c37a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c37e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c380:	e018      	b.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c386:	3308      	adds	r3, #8
 800c388:	4618      	mov	r0, r3
 800c38a:	f002 f8eb 	bl	800e564 <RCCEx_PLL2_Config>
 800c38e:	4603      	mov	r3, r0
 800c390:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c394:	e00e      	b.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c39a:	332c      	adds	r3, #44	@ 0x2c
 800c39c:	4618      	mov	r0, r3
 800c39e:	f002 f979 	bl	800e694 <RCCEx_PLL3_Config>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c3a8:	e004      	b.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c3b0:	e000      	b.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800c3b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10d      	bne.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800c3bc:	4b2b      	ldr	r3, [pc, #172]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c3c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c3c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c3ce:	4927      	ldr	r1, [pc, #156]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c3d6:	e003      	b.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c3dc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800c3e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800c3ec:	623b      	str	r3, [r7, #32]
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	d03d      	beq.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800c3fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c408:	d00e      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800c40a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c40e:	d815      	bhi.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c410:	2b00      	cmp	r3, #0
 800c412:	d017      	beq.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c418:	d110      	bne.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c41a:	4b14      	ldr	r3, [pc, #80]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c41e:	4a13      	ldr	r2, [pc, #76]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c424:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c426:	e00e      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c42c:	3308      	adds	r3, #8
 800c42e:	4618      	mov	r0, r3
 800c430:	f002 f898 	bl	800e564 <RCCEx_PLL2_Config>
 800c434:	4603      	mov	r3, r0
 800c436:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c43a:	e004      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c442:	e000      	b.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c444:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c446:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d110      	bne.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800c44e:	4b07      	ldr	r3, [pc, #28]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c454:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c45c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c460:	4902      	ldr	r1, [pc, #8]	@ (800c46c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c462:	4313      	orrs	r3, r2
 800c464:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800c468:	e006      	b.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c46a:	bf00      	nop
 800c46c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c470:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c474:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800c478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800c484:	61bb      	str	r3, [r7, #24]
 800c486:	2300      	movs	r3, #0
 800c488:	61fb      	str	r3, [r7, #28]
 800c48a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c48e:	460b      	mov	r3, r1
 800c490:	4313      	orrs	r3, r2
 800c492:	d00c      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800c494:	4b68      	ldr	r3, [pc, #416]	@ (800c638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c49a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c4a6:	4964      	ldr	r1, [pc, #400]	@ (800c638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c4ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	6139      	str	r1, [r7, #16]
 800c4ba:	f003 0302 	and.w	r3, r3, #2
 800c4be:	617b      	str	r3, [r7, #20]
 800c4c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	d036      	beq.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800c4ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00c      	beq.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c4d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c4da:	d113      	bne.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c4dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f002 f83e 	bl	800e564 <RCCEx_PLL2_Config>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c4ee:	e00d      	b.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c4f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4f4:	332c      	adds	r3, #44	@ 0x2c
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f002 f8cc 	bl	800e694 <RCCEx_PLL3_Config>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c502:	e003      	b.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c50a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c50c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c510:	2b00      	cmp	r3, #0
 800c512:	d10d      	bne.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800c514:	4b48      	ldr	r3, [pc, #288]	@ (800c638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c516:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c51a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c51e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c522:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c526:	4944      	ldr	r1, [pc, #272]	@ (800c638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c528:	4313      	orrs	r3, r2
 800c52a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c52e:	e003      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c530:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c534:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800c538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	2100      	movs	r1, #0
 800c542:	60b9      	str	r1, [r7, #8]
 800c544:	f003 0304 	and.w	r3, r3, #4
 800c548:	60fb      	str	r3, [r7, #12]
 800c54a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c54e:	460b      	mov	r3, r1
 800c550:	4313      	orrs	r3, r2
 800c552:	d024      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800c554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d108      	bne.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c564:	332c      	adds	r3, #44	@ 0x2c
 800c566:	4618      	mov	r0, r3
 800c568:	f002 f894 	bl	800e694 <RCCEx_PLL3_Config>
 800c56c:	4603      	mov	r3, r0
 800c56e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800c572:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10d      	bne.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800c57a:	4b2f      	ldr	r3, [pc, #188]	@ (800c638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c57c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c580:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c58c:	492a      	ldr	r1, [pc, #168]	@ (800c638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c58e:	4313      	orrs	r3, r2
 800c590:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c594:	e003      	b.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c596:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c59a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800c59e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	6039      	str	r1, [r7, #0]
 800c5aa:	f003 0308 	and.w	r3, r3, #8
 800c5ae:	607b      	str	r3, [r7, #4]
 800c5b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	d036      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800c5ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c5c2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c5c6:	d00d      	beq.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800c5c8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c5cc:	d811      	bhi.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c5ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5d2:	d012      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c5d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5d8:	d80b      	bhi.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00d      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c5de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5e2:	d106      	bne.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c5e4:	4b14      	ldr	r3, [pc, #80]	@ (800c638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e8:	4a13      	ldr	r2, [pc, #76]	@ (800c638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c5ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5ee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800c5f0:	e004      	b.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c5f8:	e000      	b.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800c5fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10d      	bne.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800c604:	4b0c      	ldr	r3, [pc, #48]	@ (800c638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c606:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c60a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c60e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c612:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c616:	4908      	ldr	r1, [pc, #32]	@ (800c638 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c618:	4313      	orrs	r3, r2
 800c61a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c61e:	e003      	b.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c620:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c624:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800c628:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c632:	46bd      	mov	sp, r7
 800c634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c638:	46020c00 	.word	0x46020c00

0800c63c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b089      	sub	sp, #36	@ 0x24
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800c644:	4ba6      	ldr	r3, [pc, #664]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c64e:	4ba4      	ldr	r3, [pc, #656]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c652:	f003 0303 	and.w	r3, r3, #3
 800c656:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800c658:	4ba1      	ldr	r3, [pc, #644]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c65c:	0a1b      	lsrs	r3, r3, #8
 800c65e:	f003 030f 	and.w	r3, r3, #15
 800c662:	3301      	adds	r3, #1
 800c664:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c666:	4b9e      	ldr	r3, [pc, #632]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c66a:	091b      	lsrs	r3, r3, #4
 800c66c:	f003 0301 	and.w	r3, r3, #1
 800c670:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800c672:	4b9b      	ldr	r3, [pc, #620]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c676:	08db      	lsrs	r3, r3, #3
 800c678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	fb02 f303 	mul.w	r3, r2, r3
 800c682:	ee07 3a90 	vmov	s15, r3
 800c686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c68a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	2b03      	cmp	r3, #3
 800c692:	d062      	beq.n	800c75a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	2b03      	cmp	r3, #3
 800c698:	f200 8081 	bhi.w	800c79e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d024      	beq.n	800c6ec <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d17a      	bne.n	800c79e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	ee07 3a90 	vmov	s15, r3
 800c6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ba:	4b89      	ldr	r3, [pc, #548]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c6bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c2:	ee07 3a90 	vmov	s15, r3
 800c6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c6ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6ce:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c6da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6ea:	e08f      	b.n	800c80c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c6ec:	4b7c      	ldr	r3, [pc, #496]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d005      	beq.n	800c704 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800c6f8:	4b79      	ldr	r3, [pc, #484]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	0f1b      	lsrs	r3, r3, #28
 800c6fe:	f003 030f 	and.w	r3, r3, #15
 800c702:	e006      	b.n	800c712 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800c704:	4b76      	ldr	r3, [pc, #472]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c706:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c70a:	041b      	lsls	r3, r3, #16
 800c70c:	0f1b      	lsrs	r3, r3, #28
 800c70e:	f003 030f 	and.w	r3, r3, #15
 800c712:	4a76      	ldr	r2, [pc, #472]	@ (800c8ec <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c718:	ee07 3a90 	vmov	s15, r3
 800c71c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	ee07 3a90 	vmov	s15, r3
 800c726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	ee07 3a90 	vmov	s15, r3
 800c734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c738:	ed97 6a02 	vldr	s12, [r7, #8]
 800c73c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c748:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c74c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c750:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c754:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c758:	e058      	b.n	800c80c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	ee07 3a90 	vmov	s15, r3
 800c760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c764:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c8e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c76c:	4b5c      	ldr	r3, [pc, #368]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c774:	ee07 3a90 	vmov	s15, r3
 800c778:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c77c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c780:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c784:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c788:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c78c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c790:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c794:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c798:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c79c:	e036      	b.n	800c80c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c79e:	4b50      	ldr	r3, [pc, #320]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d005      	beq.n	800c7b6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800c7aa:	4b4d      	ldr	r3, [pc, #308]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	0f1b      	lsrs	r3, r3, #28
 800c7b0:	f003 030f 	and.w	r3, r3, #15
 800c7b4:	e006      	b.n	800c7c4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800c7b6:	4b4a      	ldr	r3, [pc, #296]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c7b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c7bc:	041b      	lsls	r3, r3, #16
 800c7be:	0f1b      	lsrs	r3, r3, #28
 800c7c0:	f003 030f 	and.w	r3, r3, #15
 800c7c4:	4a49      	ldr	r2, [pc, #292]	@ (800c8ec <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ca:	ee07 3a90 	vmov	s15, r3
 800c7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	ee07 3a90 	vmov	s15, r3
 800c7d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	ee07 3a90 	vmov	s15, r3
 800c7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7ee:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c806:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c80a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800c80c:	4b34      	ldr	r3, [pc, #208]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c814:	2b00      	cmp	r3, #0
 800c816:	d017      	beq.n	800c848 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c818:	4b31      	ldr	r3, [pc, #196]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c81a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c81c:	0a5b      	lsrs	r3, r3, #9
 800c81e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c822:	ee07 3a90 	vmov	s15, r3
 800c826:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800c82a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c82e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c832:	edd7 6a07 	vldr	s13, [r7, #28]
 800c836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c83a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c83e:	ee17 2a90 	vmov	r2, s15
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	601a      	str	r2, [r3, #0]
 800c846:	e002      	b.n	800c84e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800c84e:	4b24      	ldr	r3, [pc, #144]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d017      	beq.n	800c88a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c85a:	4b21      	ldr	r3, [pc, #132]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c85e:	0c1b      	lsrs	r3, r3, #16
 800c860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c864:	ee07 3a90 	vmov	s15, r3
 800c868:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800c86c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c870:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c874:	edd7 6a07 	vldr	s13, [r7, #28]
 800c878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c87c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c880:	ee17 2a90 	vmov	r2, s15
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	605a      	str	r2, [r3, #4]
 800c888:	e002      	b.n	800c890 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800c890:	4b13      	ldr	r3, [pc, #76]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d017      	beq.n	800c8cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c89c:	4b10      	ldr	r3, [pc, #64]	@ (800c8e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8a0:	0e1b      	lsrs	r3, r3, #24
 800c8a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8a6:	ee07 3a90 	vmov	s15, r3
 800c8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800c8ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c8b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8c2:	ee17 2a90 	vmov	r2, s15
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c8ca:	e002      	b.n	800c8d2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	609a      	str	r2, [r3, #8]
}
 800c8d2:	bf00      	nop
 800c8d4:	3724      	adds	r7, #36	@ 0x24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	46020c00 	.word	0x46020c00
 800c8e4:	4b742400 	.word	0x4b742400
 800c8e8:	46000000 	.word	0x46000000
 800c8ec:	080124dc 	.word	0x080124dc

0800c8f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b089      	sub	sp, #36	@ 0x24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800c8f8:	4ba6      	ldr	r3, [pc, #664]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c8fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c900:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800c902:	4ba4      	ldr	r3, [pc, #656]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c906:	f003 0303 	and.w	r3, r3, #3
 800c90a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800c90c:	4ba1      	ldr	r3, [pc, #644]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c910:	0a1b      	lsrs	r3, r3, #8
 800c912:	f003 030f 	and.w	r3, r3, #15
 800c916:	3301      	adds	r3, #1
 800c918:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800c91a:	4b9e      	ldr	r3, [pc, #632]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c91e:	091b      	lsrs	r3, r3, #4
 800c920:	f003 0301 	and.w	r3, r3, #1
 800c924:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c926:	4b9b      	ldr	r3, [pc, #620]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c92a:	08db      	lsrs	r3, r3, #3
 800c92c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	fb02 f303 	mul.w	r3, r2, r3
 800c936:	ee07 3a90 	vmov	s15, r3
 800c93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	2b03      	cmp	r3, #3
 800c946:	d062      	beq.n	800ca0e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	f200 8081 	bhi.w	800ca52 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d024      	beq.n	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d17a      	bne.n	800ca52 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	ee07 3a90 	vmov	s15, r3
 800c962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c966:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c96a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c96e:	4b89      	ldr	r3, [pc, #548]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c976:	ee07 3a90 	vmov	s15, r3
 800c97a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c97e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c982:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800cb9c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c986:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c98a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c98e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c992:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c99a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c99e:	e08f      	b.n	800cac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c9a0:	4b7c      	ldr	r3, [pc, #496]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d005      	beq.n	800c9b8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c9ac:	4b79      	ldr	r3, [pc, #484]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	0f1b      	lsrs	r3, r3, #28
 800c9b2:	f003 030f 	and.w	r3, r3, #15
 800c9b6:	e006      	b.n	800c9c6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c9b8:	4b76      	ldr	r3, [pc, #472]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c9ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c9be:	041b      	lsls	r3, r3, #16
 800c9c0:	0f1b      	lsrs	r3, r3, #28
 800c9c2:	f003 030f 	and.w	r3, r3, #15
 800c9c6:	4a76      	ldr	r2, [pc, #472]	@ (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9cc:	ee07 3a90 	vmov	s15, r3
 800c9d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	ee07 3a90 	vmov	s15, r3
 800c9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ec:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9f0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800cb9c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c9f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ca04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca0c:	e058      	b.n	800cac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	ee07 3a90 	vmov	s15, r3
 800ca14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca18:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800ca1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca20:	4b5c      	ldr	r3, [pc, #368]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ca22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca28:	ee07 3a90 	vmov	s15, r3
 800ca2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca30:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca34:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cb9c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ca38:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ca3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca44:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ca48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca50:	e036      	b.n	800cac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ca52:	4b50      	ldr	r3, [pc, #320]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d005      	beq.n	800ca6a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800ca5e:	4b4d      	ldr	r3, [pc, #308]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	0f1b      	lsrs	r3, r3, #28
 800ca64:	f003 030f 	and.w	r3, r3, #15
 800ca68:	e006      	b.n	800ca78 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800ca6a:	4b4a      	ldr	r3, [pc, #296]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ca6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca70:	041b      	lsls	r3, r3, #16
 800ca72:	0f1b      	lsrs	r3, r3, #28
 800ca74:	f003 030f 	and.w	r3, r3, #15
 800ca78:	4a49      	ldr	r2, [pc, #292]	@ (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ca7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca7e:	ee07 3a90 	vmov	s15, r3
 800ca82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	ee07 3a90 	vmov	s15, r3
 800ca8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800caa2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800cb9c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800caa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800cab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cabe:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800cac0:	4b34      	ldr	r3, [pc, #208]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d017      	beq.n	800cafc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cacc:	4b31      	ldr	r3, [pc, #196]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cad0:	0a5b      	lsrs	r3, r3, #9
 800cad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cad6:	ee07 3a90 	vmov	s15, r3
 800cada:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800cade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cae2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cae6:	edd7 6a07 	vldr	s13, [r7, #28]
 800caea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caf2:	ee17 2a90 	vmov	r2, s15
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	601a      	str	r2, [r3, #0]
 800cafa:	e002      	b.n	800cb02 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800cb02:	4b24      	ldr	r3, [pc, #144]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d017      	beq.n	800cb3e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cb0e:	4b21      	ldr	r3, [pc, #132]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb12:	0c1b      	lsrs	r3, r3, #16
 800cb14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb18:	ee07 3a90 	vmov	s15, r3
 800cb1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800cb20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb24:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cb28:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb34:	ee17 2a90 	vmov	r2, s15
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	605a      	str	r2, [r3, #4]
 800cb3c:	e002      	b.n	800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800cb44:	4b13      	ldr	r3, [pc, #76]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d017      	beq.n	800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cb50:	4b10      	ldr	r3, [pc, #64]	@ (800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb54:	0e1b      	lsrs	r3, r3, #24
 800cb56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb5a:	ee07 3a90 	vmov	s15, r3
 800cb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800cb62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb66:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cb6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb76:	ee17 2a90 	vmov	r2, s15
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cb7e:	e002      	b.n	800cb86 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	609a      	str	r2, [r3, #8]
}
 800cb86:	bf00      	nop
 800cb88:	3724      	adds	r7, #36	@ 0x24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	46020c00 	.word	0x46020c00
 800cb98:	4b742400 	.word	0x4b742400
 800cb9c:	46000000 	.word	0x46000000
 800cba0:	080124dc 	.word	0x080124dc

0800cba4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b089      	sub	sp, #36	@ 0x24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800cbac:	4ba6      	ldr	r3, [pc, #664]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cbae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbb4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800cbb6:	4ba4      	ldr	r3, [pc, #656]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbba:	f003 0303 	and.w	r3, r3, #3
 800cbbe:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800cbc0:	4ba1      	ldr	r3, [pc, #644]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cbc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbc4:	0a1b      	lsrs	r3, r3, #8
 800cbc6:	f003 030f 	and.w	r3, r3, #15
 800cbca:	3301      	adds	r3, #1
 800cbcc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800cbce:	4b9e      	ldr	r3, [pc, #632]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cbd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbd2:	091b      	lsrs	r3, r3, #4
 800cbd4:	f003 0301 	and.w	r3, r3, #1
 800cbd8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800cbda:	4b9b      	ldr	r3, [pc, #620]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cbdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbde:	08db      	lsrs	r3, r3, #3
 800cbe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	fb02 f303 	mul.w	r3, r2, r3
 800cbea:	ee07 3a90 	vmov	s15, r3
 800cbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbf2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d062      	beq.n	800ccc2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	f200 8081 	bhi.w	800cd06 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d024      	beq.n	800cc54 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d17a      	bne.n	800cd06 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	ee07 3a90 	vmov	s15, r3
 800cc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc1a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800ce4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800cc1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc22:	4b89      	ldr	r3, [pc, #548]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cc24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc2a:	ee07 3a90 	vmov	s15, r3
 800cc2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc32:	ed97 6a02 	vldr	s12, [r7, #8]
 800cc36:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cc3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cc3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc46:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cc4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc4e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800cc52:	e08f      	b.n	800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cc54:	4b7c      	ldr	r3, [pc, #496]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d005      	beq.n	800cc6c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800cc60:	4b79      	ldr	r3, [pc, #484]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	0f1b      	lsrs	r3, r3, #28
 800cc66:	f003 030f 	and.w	r3, r3, #15
 800cc6a:	e006      	b.n	800cc7a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800cc6c:	4b76      	ldr	r3, [pc, #472]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cc6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc72:	041b      	lsls	r3, r3, #16
 800cc74:	0f1b      	lsrs	r3, r3, #28
 800cc76:	f003 030f 	and.w	r3, r3, #15
 800cc7a:	4a76      	ldr	r2, [pc, #472]	@ (800ce54 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800cc7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc80:	ee07 3a90 	vmov	s15, r3
 800cc84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	ee07 3a90 	vmov	s15, r3
 800cc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	ee07 3a90 	vmov	s15, r3
 800cc9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cca0:	ed97 6a02 	vldr	s12, [r7, #8]
 800cca4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ccb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ccb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ccc0:	e058      	b.n	800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	ee07 3a90 	vmov	s15, r3
 800ccc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cccc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ce4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ccd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccd4:	4b5c      	ldr	r3, [pc, #368]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ccd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccdc:	ee07 3a90 	vmov	s15, r3
 800cce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cce4:	ed97 6a02 	vldr	s12, [r7, #8]
 800cce8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ccec:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ccf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ccf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ccfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd04:	e036      	b.n	800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cd06:	4b50      	ldr	r3, [pc, #320]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d005      	beq.n	800cd1e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800cd12:	4b4d      	ldr	r3, [pc, #308]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	0f1b      	lsrs	r3, r3, #28
 800cd18:	f003 030f 	and.w	r3, r3, #15
 800cd1c:	e006      	b.n	800cd2c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800cd1e:	4b4a      	ldr	r3, [pc, #296]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd24:	041b      	lsls	r3, r3, #16
 800cd26:	0f1b      	lsrs	r3, r3, #28
 800cd28:	f003 030f 	and.w	r3, r3, #15
 800cd2c:	4a49      	ldr	r2, [pc, #292]	@ (800ce54 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800cd2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd32:	ee07 3a90 	vmov	s15, r3
 800cd36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	ee07 3a90 	vmov	s15, r3
 800cd40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	ee07 3a90 	vmov	s15, r3
 800cd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd52:	ed97 6a02 	vldr	s12, [r7, #8]
 800cd56:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cd5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd66:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cd6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd72:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800cd74:	4b34      	ldr	r3, [pc, #208]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d017      	beq.n	800cdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cd80:	4b31      	ldr	r3, [pc, #196]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd84:	0a5b      	lsrs	r3, r3, #9
 800cd86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd8a:	ee07 3a90 	vmov	s15, r3
 800cd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800cd92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd96:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cd9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cda2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cda6:	ee17 2a90 	vmov	r2, s15
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	601a      	str	r2, [r3, #0]
 800cdae:	e002      	b.n	800cdb6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800cdb6:	4b24      	ldr	r3, [pc, #144]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cdb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d017      	beq.n	800cdf2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cdc2:	4b21      	ldr	r3, [pc, #132]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cdc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdc6:	0c1b      	lsrs	r3, r3, #16
 800cdc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdcc:	ee07 3a90 	vmov	s15, r3
 800cdd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800cdd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cdd8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cddc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cde0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cde4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cde8:	ee17 2a90 	vmov	r2, s15
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	605a      	str	r2, [r3, #4]
 800cdf0:	e002      	b.n	800cdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800cdf8:	4b13      	ldr	r3, [pc, #76]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cdfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d017      	beq.n	800ce34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ce04:	4b10      	ldr	r3, [pc, #64]	@ (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ce06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce08:	0e1b      	lsrs	r3, r3, #24
 800ce0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce0e:	ee07 3a90 	vmov	s15, r3
 800ce12:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800ce16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce1a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ce1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce2a:	ee17 2a90 	vmov	r2, s15
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce32:	e002      	b.n	800ce3a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	609a      	str	r2, [r3, #8]
}
 800ce3a:	bf00      	nop
 800ce3c:	3724      	adds	r7, #36	@ 0x24
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	46020c00 	.word	0x46020c00
 800ce4c:	4b742400 	.word	0x4b742400
 800ce50:	46000000 	.word	0x46000000
 800ce54:	080124dc 	.word	0x080124dc

0800ce58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b08e      	sub	sp, #56	@ 0x38
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ce62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce66:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800ce6a:	430b      	orrs	r3, r1
 800ce6c:	d145      	bne.n	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ce6e:	4ba7      	ldr	r3, [pc, #668]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ce70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce78:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ce7a:	4ba4      	ldr	r3, [pc, #656]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ce7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce80:	f003 0302 	and.w	r3, r3, #2
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d108      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ce88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce8e:	d104      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ce90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce96:	f001 bb5a 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ce9a:	4b9c      	ldr	r3, [pc, #624]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ce9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cea4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cea8:	d114      	bne.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800ceaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ceb0:	d110      	bne.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ceb2:	4b96      	ldr	r3, [pc, #600]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ceb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ceb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cec0:	d103      	bne.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800cec2:	23fa      	movs	r3, #250	@ 0xfa
 800cec4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cec6:	f001 bb42 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ceca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cece:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ced0:	f001 bb3d 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800ced4:	4b8d      	ldr	r3, [pc, #564]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cedc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cee0:	d107      	bne.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cee8:	d103      	bne.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800ceea:	4b89      	ldr	r3, [pc, #548]	@ (800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800ceec:	637b      	str	r3, [r7, #52]	@ 0x34
 800ceee:	f001 bb2e 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800cef2:	2300      	movs	r3, #0
 800cef4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef6:	f001 bb2a 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cefa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cefe:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800cf02:	430b      	orrs	r3, r1
 800cf04:	d151      	bne.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800cf06:	4b81      	ldr	r3, [pc, #516]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cf08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cf0c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800cf10:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf14:	2b80      	cmp	r3, #128	@ 0x80
 800cf16:	d035      	beq.n	800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800cf18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1a:	2b80      	cmp	r3, #128	@ 0x80
 800cf1c:	d841      	bhi.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf20:	2b60      	cmp	r3, #96	@ 0x60
 800cf22:	d02a      	beq.n	800cf7a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800cf24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf26:	2b60      	cmp	r3, #96	@ 0x60
 800cf28:	d83b      	bhi.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2c:	2b40      	cmp	r3, #64	@ 0x40
 800cf2e:	d009      	beq.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf32:	2b40      	cmp	r3, #64	@ 0x40
 800cf34:	d835      	bhi.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00c      	beq.n	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3e:	2b20      	cmp	r3, #32
 800cf40:	d012      	beq.n	800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cf42:	e02e      	b.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7ff fb77 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf52:	f001 bafc 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf56:	f107 0318 	add.w	r3, r7, #24
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff fcc8 	bl	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf64:	f001 baf3 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf68:	f107 030c 	add.w	r3, r7, #12
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7ff fe19 	bl	800cba4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf76:	f001 baea 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cf7a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cf7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf80:	f001 bae5 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf84:	4b61      	ldr	r3, [pc, #388]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf90:	d103      	bne.n	800cf9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800cf92:	4b60      	ldr	r3, [pc, #384]	@ (800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cf94:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cf96:	f001 bada 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf9e:	f001 bad6 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfa6:	f001 bad2 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800cfaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfae:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800cfb2:	430b      	orrs	r3, r1
 800cfb4:	d158      	bne.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800cfb6:	4b55      	ldr	r3, [pc, #340]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cfb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cfbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cfc0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfc8:	d03b      	beq.n	800d042 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800cfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfd0:	d846      	bhi.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cfd8:	d02e      	beq.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800cfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cfe0:	d83e      	bhi.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfe8:	d00b      	beq.n	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800cfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cff0:	d836      	bhi.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800cff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00d      	beq.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800cff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cffe:	d012      	beq.n	800d026 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800d000:	e02e      	b.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff fb18 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d010:	f001 ba9d 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d014:	f107 0318 	add.w	r3, r7, #24
 800d018:	4618      	mov	r0, r3
 800d01a:	f7ff fc69 	bl	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d022:	f001 ba94 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d026:	f107 030c 	add.w	r3, r7, #12
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff fdba 	bl	800cba4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d034:	f001 ba8b 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d038:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d03c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d03e:	f001 ba86 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d042:	4b32      	ldr	r3, [pc, #200]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d04a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d04e:	d103      	bne.n	800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800d050:	4b30      	ldr	r3, [pc, #192]	@ (800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d052:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d054:	f001 ba7b 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d058:	2300      	movs	r3, #0
 800d05a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d05c:	f001 ba77 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800d060:	2300      	movs	r3, #0
 800d062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d064:	f001 ba73 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800d068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d06c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d070:	430b      	orrs	r3, r1
 800d072:	d126      	bne.n	800d0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800d074:	4b25      	ldr	r3, [pc, #148]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d076:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d07a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d07e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800d080:	4b22      	ldr	r3, [pc, #136]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d08c:	d106      	bne.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800d08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d090:	2b00      	cmp	r3, #0
 800d092:	d103      	bne.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800d094:	4b1f      	ldr	r3, [pc, #124]	@ (800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d096:	637b      	str	r3, [r7, #52]	@ 0x34
 800d098:	f001 ba59 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800d09c:	4b1b      	ldr	r3, [pc, #108]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0a8:	d107      	bne.n	800d0ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d0b0:	d103      	bne.n	800d0ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800d0b2:	4b19      	ldr	r3, [pc, #100]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d0b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0b6:	f001 ba4a 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0be:	f001 ba46 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800d0c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0c6:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800d0ca:	430b      	orrs	r3, r1
 800d0cc:	d16e      	bne.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d0d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d0d4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d0d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0dc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d0e0:	d03d      	beq.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d0e8:	d85c      	bhi.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0f0:	d014      	beq.n	800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0f8:	d854      	bhi.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d01f      	beq.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800d100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d102:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d106:	d012      	beq.n	800d12e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800d108:	e04c      	b.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d10a:	bf00      	nop
 800d10c:	46020c00 	.word	0x46020c00
 800d110:	0007a120 	.word	0x0007a120
 800d114:	00f42400 	.word	0x00f42400
 800d118:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d11c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d120:	4618      	mov	r0, r3
 800d122:	f7ff fa8b 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d128:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d12a:	f001 ba10 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d12e:	f107 0318 	add.w	r3, r7, #24
 800d132:	4618      	mov	r0, r3
 800d134:	f7ff fbdc 	bl	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d13c:	f001 ba07 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d140:	4ba7      	ldr	r3, [pc, #668]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d14c:	d103      	bne.n	800d156 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800d14e:	4ba5      	ldr	r3, [pc, #660]	@ (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d150:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d152:	f001 b9fc 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d156:	2300      	movs	r3, #0
 800d158:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d15a:	f001 b9f8 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d15e:	4ba0      	ldr	r3, [pc, #640]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f003 0320 	and.w	r3, r3, #32
 800d166:	2b20      	cmp	r3, #32
 800d168:	d118      	bne.n	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d16a:	4b9d      	ldr	r3, [pc, #628]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d172:	2b00      	cmp	r3, #0
 800d174:	d005      	beq.n	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800d176:	4b9a      	ldr	r3, [pc, #616]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	0e1b      	lsrs	r3, r3, #24
 800d17c:	f003 030f 	and.w	r3, r3, #15
 800d180:	e006      	b.n	800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800d182:	4b97      	ldr	r3, [pc, #604]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d184:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d188:	041b      	lsls	r3, r3, #16
 800d18a:	0e1b      	lsrs	r3, r3, #24
 800d18c:	f003 030f 	and.w	r3, r3, #15
 800d190:	4a95      	ldr	r2, [pc, #596]	@ (800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d196:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d198:	f001 b9d9 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d19c:	2300      	movs	r3, #0
 800d19e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1a0:	f001 b9d5 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1a8:	f001 b9d1 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d1ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1b0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800d1b4:	430b      	orrs	r3, r1
 800d1b6:	d17f      	bne.n	800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d1b8:	4b89      	ldr	r3, [pc, #548]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d1ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d1be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1c2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800d1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d165      	bne.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d1ca:	4b85      	ldr	r3, [pc, #532]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d1cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d1d0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d1d4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d1dc:	d034      	beq.n	800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800d1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d1e4:	d853      	bhi.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800d1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d1ec:	d00b      	beq.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d1f4:	d84b      	bhi.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d016      	beq.n	800d22a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800d1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d202:	d009      	beq.n	800d218 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800d204:	e043      	b.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7ff fa16 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d212:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d214:	f001 b99b 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d218:	f107 0318 	add.w	r3, r7, #24
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7ff fb67 	bl	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d226:	f001 b992 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d22a:	4b6d      	ldr	r3, [pc, #436]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d236:	d103      	bne.n	800d240 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800d238:	4b6a      	ldr	r3, [pc, #424]	@ (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d23a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d23c:	f001 b987 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d240:	2300      	movs	r3, #0
 800d242:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d244:	f001 b983 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d248:	4b65      	ldr	r3, [pc, #404]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f003 0320 	and.w	r3, r3, #32
 800d250:	2b20      	cmp	r3, #32
 800d252:	d118      	bne.n	800d286 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d254:	4b62      	ldr	r3, [pc, #392]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d005      	beq.n	800d26c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800d260:	4b5f      	ldr	r3, [pc, #380]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	0e1b      	lsrs	r3, r3, #24
 800d266:	f003 030f 	and.w	r3, r3, #15
 800d26a:	e006      	b.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800d26c:	4b5c      	ldr	r3, [pc, #368]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d26e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d272:	041b      	lsls	r3, r3, #16
 800d274:	0e1b      	lsrs	r3, r3, #24
 800d276:	f003 030f 	and.w	r3, r3, #15
 800d27a:	4a5b      	ldr	r2, [pc, #364]	@ (800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d280:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d282:	f001 b964 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d286:	2300      	movs	r3, #0
 800d288:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d28a:	f001 b960 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800d28e:	2300      	movs	r3, #0
 800d290:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d292:	f001 b95c 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d29c:	d108      	bne.n	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d29e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7ff f9ca 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2ac:	f001 b94f 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2b4:	f001 b94b 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800d2b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2bc:	1e51      	subs	r1, r2, #1
 800d2be:	430b      	orrs	r3, r1
 800d2c0:	d136      	bne.n	800d330 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800d2c2:	4b47      	ldr	r3, [pc, #284]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d2c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2c8:	f003 0303 	and.w	r3, r3, #3
 800d2cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d104      	bne.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800d2d4:	f7fe f9cc 	bl	800b670 <HAL_RCC_GetPCLK2Freq>
 800d2d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2da:	f001 b938 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800d2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d104      	bne.n	800d2ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d2e4:	f7fe f894 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800d2e8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2ea:	f001 b930 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800d2ee:	4b3c      	ldr	r3, [pc, #240]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2fa:	d106      	bne.n	800d30a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	d103      	bne.n	800d30a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800d302:	4b3a      	ldr	r3, [pc, #232]	@ (800d3ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d304:	637b      	str	r3, [r7, #52]	@ 0x34
 800d306:	f001 b922 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800d30a:	4b35      	ldr	r3, [pc, #212]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d30c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d310:	f003 0302 	and.w	r3, r3, #2
 800d314:	2b02      	cmp	r3, #2
 800d316:	d107      	bne.n	800d328 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800d318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d104      	bne.n	800d328 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800d31e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d322:	637b      	str	r3, [r7, #52]	@ 0x34
 800d324:	f001 b913 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800d328:	2300      	movs	r3, #0
 800d32a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d32c:	f001 b90f 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800d330:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d334:	1e91      	subs	r1, r2, #2
 800d336:	430b      	orrs	r3, r1
 800d338:	d136      	bne.n	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800d33a:	4b29      	ldr	r3, [pc, #164]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d33c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d340:	f003 030c 	and.w	r3, r3, #12
 800d344:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800d346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d104      	bne.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d34c:	f7fe f97c 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800d350:	6378      	str	r0, [r7, #52]	@ 0x34
 800d352:	f001 b8fc 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800d356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d358:	2b04      	cmp	r3, #4
 800d35a:	d104      	bne.n	800d366 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d35c:	f7fe f858 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800d360:	6378      	str	r0, [r7, #52]	@ 0x34
 800d362:	f001 b8f4 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800d366:	4b1e      	ldr	r3, [pc, #120]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d36e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d372:	d106      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800d374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d376:	2b08      	cmp	r3, #8
 800d378:	d103      	bne.n	800d382 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800d37a:	4b1c      	ldr	r3, [pc, #112]	@ (800d3ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d37c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d37e:	f001 b8e6 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800d382:	4b17      	ldr	r3, [pc, #92]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d388:	f003 0302 	and.w	r3, r3, #2
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	d107      	bne.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800d390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d392:	2b0c      	cmp	r3, #12
 800d394:	d104      	bne.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800d396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d39a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d39c:	f001 b8d7 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3a4:	f001 b8d3 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800d3a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3ac:	1f11      	subs	r1, r2, #4
 800d3ae:	430b      	orrs	r3, r1
 800d3b0:	d13f      	bne.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800d3b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d3b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d3b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d3bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800d3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d104      	bne.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d3c4:	f7fe f940 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800d3c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d3ca:	f001 b8c0 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d0:	2b10      	cmp	r3, #16
 800d3d2:	d10d      	bne.n	800d3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d3d4:	f7fe f81c 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800d3d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d3da:	f001 b8b8 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d3de:	bf00      	nop
 800d3e0:	46020c00 	.word	0x46020c00
 800d3e4:	02dc6c00 	.word	0x02dc6c00
 800d3e8:	080124dc 	.word	0x080124dc
 800d3ec:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800d3f0:	4ba8      	ldr	r3, [pc, #672]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3fc:	d106      	bne.n	800d40c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d400:	2b20      	cmp	r3, #32
 800d402:	d103      	bne.n	800d40c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800d404:	4ba4      	ldr	r3, [pc, #656]	@ (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d406:	637b      	str	r3, [r7, #52]	@ 0x34
 800d408:	f001 b8a1 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800d40c:	4ba1      	ldr	r3, [pc, #644]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d40e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d412:	f003 0302 	and.w	r3, r3, #2
 800d416:	2b02      	cmp	r3, #2
 800d418:	d107      	bne.n	800d42a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41c:	2b30      	cmp	r3, #48	@ 0x30
 800d41e:	d104      	bne.n	800d42a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800d420:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d424:	637b      	str	r3, [r7, #52]	@ 0x34
 800d426:	f001 b892 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800d42a:	2300      	movs	r3, #0
 800d42c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d42e:	f001 b88e 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800d432:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d436:	f1a2 0108 	sub.w	r1, r2, #8
 800d43a:	430b      	orrs	r3, r1
 800d43c:	d136      	bne.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800d43e:	4b95      	ldr	r3, [pc, #596]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d444:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d448:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800d44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d104      	bne.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d450:	f7fe f8fa 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800d454:	6378      	str	r0, [r7, #52]	@ 0x34
 800d456:	f001 b87a 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800d45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45c:	2b40      	cmp	r3, #64	@ 0x40
 800d45e:	d104      	bne.n	800d46a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d460:	f7fd ffd6 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800d464:	6378      	str	r0, [r7, #52]	@ 0x34
 800d466:	f001 b872 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800d46a:	4b8a      	ldr	r3, [pc, #552]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d476:	d106      	bne.n	800d486 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800d478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47a:	2b80      	cmp	r3, #128	@ 0x80
 800d47c:	d103      	bne.n	800d486 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800d47e:	4b86      	ldr	r3, [pc, #536]	@ (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d480:	637b      	str	r3, [r7, #52]	@ 0x34
 800d482:	f001 b864 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800d486:	4b83      	ldr	r3, [pc, #524]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d48c:	f003 0302 	and.w	r3, r3, #2
 800d490:	2b02      	cmp	r3, #2
 800d492:	d107      	bne.n	800d4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800d494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d496:	2bc0      	cmp	r3, #192	@ 0xc0
 800d498:	d104      	bne.n	800d4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800d49a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d49e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4a0:	f001 b855 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4a8:	f001 b851 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800d4ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4b0:	f1a2 0110 	sub.w	r1, r2, #16
 800d4b4:	430b      	orrs	r3, r1
 800d4b6:	d139      	bne.n	800d52c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800d4b8:	4b76      	ldr	r3, [pc, #472]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d4ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d104      	bne.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d4ca:	f7fe f8bd 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800d4ce:	6378      	str	r0, [r7, #52]	@ 0x34
 800d4d0:	f001 b83d 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4da:	d104      	bne.n	800d4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d4dc:	f7fd ff98 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800d4e0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d4e2:	f001 b834 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800d4e6:	4b6b      	ldr	r3, [pc, #428]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4f2:	d107      	bne.n	800d504 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4fa:	d103      	bne.n	800d504 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800d4fc:	4b66      	ldr	r3, [pc, #408]	@ (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d4fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800d500:	f001 b825 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800d504:	4b63      	ldr	r3, [pc, #396]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d50a:	f003 0302 	and.w	r3, r3, #2
 800d50e:	2b02      	cmp	r3, #2
 800d510:	d108      	bne.n	800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800d512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d518:	d104      	bne.n	800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800d51a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d51e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d520:	f001 b815 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d524:	2300      	movs	r3, #0
 800d526:	637b      	str	r3, [r7, #52]	@ 0x34
 800d528:	f001 b811 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800d52c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d530:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800d534:	430b      	orrs	r3, r1
 800d536:	d139      	bne.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800d538:	4b56      	ldr	r3, [pc, #344]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d53a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d53e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d542:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800d544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d546:	2b00      	cmp	r3, #0
 800d548:	d104      	bne.n	800d554 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d54a:	f7fe f87d 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800d54e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d550:	f000 bffd 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800d554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d55a:	d104      	bne.n	800d566 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d55c:	f7fd ff58 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800d560:	6378      	str	r0, [r7, #52]	@ 0x34
 800d562:	f000 bff4 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800d566:	4b4b      	ldr	r3, [pc, #300]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d56e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d572:	d107      	bne.n	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d576:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d57a:	d103      	bne.n	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800d57c:	4b46      	ldr	r3, [pc, #280]	@ (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d57e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d580:	f000 bfe5 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800d584:	4b43      	ldr	r3, [pc, #268]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d58a:	f003 0302 	and.w	r3, r3, #2
 800d58e:	2b02      	cmp	r3, #2
 800d590:	d108      	bne.n	800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800d592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d594:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d598:	d104      	bne.n	800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800d59a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d59e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5a0:	f000 bfd5 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5a8:	f000 bfd1 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800d5ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5b0:	f1a2 0120 	sub.w	r1, r2, #32
 800d5b4:	430b      	orrs	r3, r1
 800d5b6:	d158      	bne.n	800d66a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800d5b8:	4b36      	ldr	r3, [pc, #216]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d5ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d5be:	f003 0307 	and.w	r3, r3, #7
 800d5c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800d5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d104      	bne.n	800d5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800d5ca:	f7fe f865 	bl	800b698 <HAL_RCC_GetPCLK3Freq>
 800d5ce:	6378      	str	r0, [r7, #52]	@ 0x34
 800d5d0:	f000 bfbd 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800d5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d104      	bne.n	800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d5da:	f7fd ff19 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800d5de:	6378      	str	r0, [r7, #52]	@ 0x34
 800d5e0:	f000 bfb5 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800d5e4:	4b2b      	ldr	r3, [pc, #172]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5f0:	d106      	bne.n	800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d103      	bne.n	800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800d5f8:	4b27      	ldr	r3, [pc, #156]	@ (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d5fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5fc:	f000 bfa7 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800d600:	4b24      	ldr	r3, [pc, #144]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d606:	f003 0302 	and.w	r3, r3, #2
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	d107      	bne.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800d60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d610:	2b03      	cmp	r3, #3
 800d612:	d104      	bne.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800d614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d618:	637b      	str	r3, [r7, #52]	@ 0x34
 800d61a:	f000 bf98 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800d61e:	4b1d      	ldr	r3, [pc, #116]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f003 0320 	and.w	r3, r3, #32
 800d626:	2b20      	cmp	r3, #32
 800d628:	d11b      	bne.n	800d662 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800d62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62c:	2b04      	cmp	r3, #4
 800d62e:	d118      	bne.n	800d662 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d630:	4b18      	ldr	r3, [pc, #96]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d005      	beq.n	800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800d63c:	4b15      	ldr	r3, [pc, #84]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d63e:	689b      	ldr	r3, [r3, #8]
 800d640:	0e1b      	lsrs	r3, r3, #24
 800d642:	f003 030f 	and.w	r3, r3, #15
 800d646:	e006      	b.n	800d656 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800d648:	4b12      	ldr	r3, [pc, #72]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d64a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d64e:	041b      	lsls	r3, r3, #16
 800d650:	0e1b      	lsrs	r3, r3, #24
 800d652:	f003 030f 	and.w	r3, r3, #15
 800d656:	4a11      	ldr	r2, [pc, #68]	@ (800d69c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d65c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d65e:	f000 bf76 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800d662:	2300      	movs	r3, #0
 800d664:	637b      	str	r3, [r7, #52]	@ 0x34
 800d666:	f000 bf72 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800d66a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d66e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d672:	430b      	orrs	r3, r1
 800d674:	d172      	bne.n	800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800d676:	4b07      	ldr	r3, [pc, #28]	@ (800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d67c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d680:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800d682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d688:	d10a      	bne.n	800d6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d68a:	f7fd fec1 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800d68e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d690:	f000 bf5d 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d694:	46020c00 	.word	0x46020c00
 800d698:	00f42400 	.word	0x00f42400
 800d69c:	080124dc 	.word	0x080124dc
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d6a6:	d108      	bne.n	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6a8:	f107 0318 	add.w	r3, r7, #24
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7ff f91f 	bl	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800d6b2:	6a3b      	ldr	r3, [r7, #32]
 800d6b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6b6:	f000 bf4a 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800d6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d104      	bne.n	800d6ca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800d6c0:	f7fd ffa8 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800d6c4:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6c6:	f000 bf42 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800d6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d6d0:	d122      	bne.n	800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d6d2:	4bb0      	ldr	r3, [pc, #704]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f003 0320 	and.w	r3, r3, #32
 800d6da:	2b20      	cmp	r3, #32
 800d6dc:	d118      	bne.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d6de:	4bad      	ldr	r3, [pc, #692]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d005      	beq.n	800d6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800d6ea:	4baa      	ldr	r3, [pc, #680]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d6ec:	689b      	ldr	r3, [r3, #8]
 800d6ee:	0e1b      	lsrs	r3, r3, #24
 800d6f0:	f003 030f 	and.w	r3, r3, #15
 800d6f4:	e006      	b.n	800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800d6f6:	4ba7      	ldr	r3, [pc, #668]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d6f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d6fc:	041b      	lsls	r3, r3, #16
 800d6fe:	0e1b      	lsrs	r3, r3, #24
 800d700:	f003 030f 	and.w	r3, r3, #15
 800d704:	4aa4      	ldr	r2, [pc, #656]	@ (800d998 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d70a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d70c:	f000 bf1f 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d710:	2300      	movs	r3, #0
 800d712:	637b      	str	r3, [r7, #52]	@ 0x34
 800d714:	f000 bf1b 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800d718:	4b9e      	ldr	r3, [pc, #632]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d724:	d107      	bne.n	800d736 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800d726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d728:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d72c:	d103      	bne.n	800d736 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800d72e:	4b9b      	ldr	r3, [pc, #620]	@ (800d99c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d730:	637b      	str	r3, [r7, #52]	@ 0x34
 800d732:	f000 bf0c 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800d736:	4b97      	ldr	r3, [pc, #604]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d73e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d742:	d107      	bne.n	800d754 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800d744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d746:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d74a:	d103      	bne.n	800d754 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800d74c:	4b93      	ldr	r3, [pc, #588]	@ (800d99c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d74e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d750:	f000 befd 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800d754:	2300      	movs	r3, #0
 800d756:	637b      	str	r3, [r7, #52]	@ 0x34
 800d758:	f000 bef9 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800d75c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d760:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d764:	430b      	orrs	r3, r1
 800d766:	d158      	bne.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800d768:	4b8a      	ldr	r3, [pc, #552]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d76a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d76e:	f003 0307 	and.w	r3, r3, #7
 800d772:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d776:	2b04      	cmp	r3, #4
 800d778:	d84b      	bhi.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800d77a:	a201      	add	r2, pc, #4	@ (adr r2, 800d780 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800d77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d780:	0800d7b9 	.word	0x0800d7b9
 800d784:	0800d795 	.word	0x0800d795
 800d788:	0800d7a7 	.word	0x0800d7a7
 800d78c:	0800d7c3 	.word	0x0800d7c3
 800d790:	0800d7cd 	.word	0x0800d7cd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d798:	4618      	mov	r0, r3
 800d79a:	f7fe ff4f 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7a2:	f000 bed4 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7a6:	f107 030c 	add.w	r3, r7, #12
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7ff f9fa 	bl	800cba4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7b4:	f000 becb 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d7b8:	f7fd ff2c 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800d7bc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7be:	f000 bec6 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d7c2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d7c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7c8:	f000 bec1 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d7cc:	4b71      	ldr	r3, [pc, #452]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f003 0320 	and.w	r3, r3, #32
 800d7d4:	2b20      	cmp	r3, #32
 800d7d6:	d118      	bne.n	800d80a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d7d8:	4b6e      	ldr	r3, [pc, #440]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d005      	beq.n	800d7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800d7e4:	4b6b      	ldr	r3, [pc, #428]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	0e1b      	lsrs	r3, r3, #24
 800d7ea:	f003 030f 	and.w	r3, r3, #15
 800d7ee:	e006      	b.n	800d7fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800d7f0:	4b68      	ldr	r3, [pc, #416]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d7f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d7f6:	041b      	lsls	r3, r3, #16
 800d7f8:	0e1b      	lsrs	r3, r3, #24
 800d7fa:	f003 030f 	and.w	r3, r3, #15
 800d7fe:	4a66      	ldr	r2, [pc, #408]	@ (800d998 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d804:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d806:	f000 bea2 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d80a:	2300      	movs	r3, #0
 800d80c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d80e:	f000 be9e 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d812:	2300      	movs	r3, #0
 800d814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d816:	f000 be9a 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800d81a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d81e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800d822:	430b      	orrs	r3, r1
 800d824:	d167      	bne.n	800d8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800d826:	4b5b      	ldr	r3, [pc, #364]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d82c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d830:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d838:	d036      	beq.n	800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800d83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d840:	d855      	bhi.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d844:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d848:	d029      	beq.n	800d89e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800d84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d850:	d84d      	bhi.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d858:	d013      	beq.n	800d882 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800d85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d860:	d845      	bhi.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d864:	2b00      	cmp	r3, #0
 800d866:	d015      	beq.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800d868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d86e:	d13e      	bne.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d874:	4618      	mov	r0, r3
 800d876:	f7fe fee1 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d87c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d87e:	f000 be66 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d882:	f107 030c 	add.w	r3, r7, #12
 800d886:	4618      	mov	r0, r3
 800d888:	f7ff f98c 	bl	800cba4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d890:	f000 be5d 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d894:	f7fd febe 	bl	800b614 <HAL_RCC_GetHCLKFreq>
 800d898:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d89a:	f000 be58 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d89e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d8a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8a4:	f000 be53 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d8a8:	4b3a      	ldr	r3, [pc, #232]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f003 0320 	and.w	r3, r3, #32
 800d8b0:	2b20      	cmp	r3, #32
 800d8b2:	d118      	bne.n	800d8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d8b4:	4b37      	ldr	r3, [pc, #220]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d005      	beq.n	800d8cc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800d8c0:	4b34      	ldr	r3, [pc, #208]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	0e1b      	lsrs	r3, r3, #24
 800d8c6:	f003 030f 	and.w	r3, r3, #15
 800d8ca:	e006      	b.n	800d8da <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d8cc:	4b31      	ldr	r3, [pc, #196]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d8ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d8d2:	041b      	lsls	r3, r3, #16
 800d8d4:	0e1b      	lsrs	r3, r3, #24
 800d8d6:	f003 030f 	and.w	r3, r3, #15
 800d8da:	4a2f      	ldr	r2, [pc, #188]	@ (800d998 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8e2:	f000 be34 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8ea:	f000 be30 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8f2:	f000 be2c 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800d8f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8fa:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800d8fe:	430b      	orrs	r3, r1
 800d900:	d152      	bne.n	800d9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800d902:	4b24      	ldr	r3, [pc, #144]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d908:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d90c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800d90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d910:	2b00      	cmp	r3, #0
 800d912:	d104      	bne.n	800d91e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d914:	f7fd fe98 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800d918:	6378      	str	r0, [r7, #52]	@ 0x34
 800d91a:	f000 be18 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800d91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d924:	d104      	bne.n	800d930 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d926:	f7fd fd73 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800d92a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d92c:	f000 be0f 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d930:	4b18      	ldr	r3, [pc, #96]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d93c:	d107      	bne.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800d93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d944:	d103      	bne.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800d946:	4b15      	ldr	r3, [pc, #84]	@ (800d99c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d948:	637b      	str	r3, [r7, #52]	@ 0x34
 800d94a:	f000 be00 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d94e:	4b11      	ldr	r3, [pc, #68]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 0320 	and.w	r3, r3, #32
 800d956:	2b20      	cmp	r3, #32
 800d958:	d122      	bne.n	800d9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800d95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d960:	d11e      	bne.n	800d9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d962:	4b0c      	ldr	r3, [pc, #48]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d005      	beq.n	800d97a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800d96e:	4b09      	ldr	r3, [pc, #36]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	0e1b      	lsrs	r3, r3, #24
 800d974:	f003 030f 	and.w	r3, r3, #15
 800d978:	e006      	b.n	800d988 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800d97a:	4b06      	ldr	r3, [pc, #24]	@ (800d994 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d97c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d980:	041b      	lsls	r3, r3, #16
 800d982:	0e1b      	lsrs	r3, r3, #24
 800d984:	f003 030f 	and.w	r3, r3, #15
 800d988:	4a03      	ldr	r2, [pc, #12]	@ (800d998 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d98a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d98e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d990:	f000 bddd 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d994:	46020c00 	.word	0x46020c00
 800d998:	080124dc 	.word	0x080124dc
 800d99c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9a4:	f000 bdd3 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9ac:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d9b0:	430b      	orrs	r3, r1
 800d9b2:	d14c      	bne.n	800da4e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d9b4:	4ba8      	ldr	r3, [pc, #672]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d9b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d9ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d9be:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d104      	bne.n	800d9d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d9c6:	f7fd fe3f 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800d9ca:	6378      	str	r0, [r7, #52]	@ 0x34
 800d9cc:	f000 bdbf 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9d6:	d104      	bne.n	800d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d9d8:	f7fd fd1a 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800d9dc:	6378      	str	r0, [r7, #52]	@ 0x34
 800d9de:	f000 bdb6 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d9e2:	4b9d      	ldr	r3, [pc, #628]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d9ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9ee:	d107      	bne.n	800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d9f6:	d103      	bne.n	800da00 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d9f8:	4b98      	ldr	r3, [pc, #608]	@ (800dc5c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d9fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9fc:	f000 bda7 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800da00:	4b95      	ldr	r3, [pc, #596]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f003 0320 	and.w	r3, r3, #32
 800da08:	2b20      	cmp	r3, #32
 800da0a:	d11c      	bne.n	800da46 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800da0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800da12:	d118      	bne.n	800da46 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800da14:	4b90      	ldr	r3, [pc, #576]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d005      	beq.n	800da2c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800da20:	4b8d      	ldr	r3, [pc, #564]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	0e1b      	lsrs	r3, r3, #24
 800da26:	f003 030f 	and.w	r3, r3, #15
 800da2a:	e006      	b.n	800da3a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800da2c:	4b8a      	ldr	r3, [pc, #552]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800da2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da32:	041b      	lsls	r3, r3, #16
 800da34:	0e1b      	lsrs	r3, r3, #24
 800da36:	f003 030f 	and.w	r3, r3, #15
 800da3a:	4a89      	ldr	r2, [pc, #548]	@ (800dc60 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800da3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da40:	637b      	str	r3, [r7, #52]	@ 0x34
 800da42:	f000 bd84 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800da46:	2300      	movs	r3, #0
 800da48:	637b      	str	r3, [r7, #52]	@ 0x34
 800da4a:	f000 bd80 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800da4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da52:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800da56:	430b      	orrs	r3, r1
 800da58:	d158      	bne.n	800db0c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800da5a:	4b7f      	ldr	r3, [pc, #508]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800da5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da60:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800da64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800da66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da68:	2bc0      	cmp	r3, #192	@ 0xc0
 800da6a:	d028      	beq.n	800dabe <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800da6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da6e:	2bc0      	cmp	r3, #192	@ 0xc0
 800da70:	d848      	bhi.n	800db04 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800da72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da74:	2b80      	cmp	r3, #128	@ 0x80
 800da76:	d00e      	beq.n	800da96 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800da78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da7a:	2b80      	cmp	r3, #128	@ 0x80
 800da7c:	d842      	bhi.n	800db04 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800da7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da80:	2b00      	cmp	r3, #0
 800da82:	d003      	beq.n	800da8c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800da84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da86:	2b40      	cmp	r3, #64	@ 0x40
 800da88:	d014      	beq.n	800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800da8a:	e03b      	b.n	800db04 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800da8c:	f7fd fe04 	bl	800b698 <HAL_RCC_GetPCLK3Freq>
 800da90:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da92:	f000 bd5c 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800da96:	4b70      	ldr	r3, [pc, #448]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800daa2:	d103      	bne.n	800daac <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800daa4:	4b6d      	ldr	r3, [pc, #436]	@ (800dc5c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800daa6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800daa8:	f000 bd51 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800daac:	2300      	movs	r3, #0
 800daae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dab0:	f000 bd4d 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800dab4:	f7fd fcac 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800dab8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800daba:	f000 bd48 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dabe:	4b66      	ldr	r3, [pc, #408]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f003 0320 	and.w	r3, r3, #32
 800dac6:	2b20      	cmp	r3, #32
 800dac8:	d118      	bne.n	800dafc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800daca:	4b63      	ldr	r3, [pc, #396]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d005      	beq.n	800dae2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800dad6:	4b60      	ldr	r3, [pc, #384]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	0e1b      	lsrs	r3, r3, #24
 800dadc:	f003 030f 	and.w	r3, r3, #15
 800dae0:	e006      	b.n	800daf0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800dae2:	4b5d      	ldr	r3, [pc, #372]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dae8:	041b      	lsls	r3, r3, #16
 800daea:	0e1b      	lsrs	r3, r3, #24
 800daec:	f003 030f 	and.w	r3, r3, #15
 800daf0:	4a5b      	ldr	r2, [pc, #364]	@ (800dc60 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800daf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daf6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800daf8:	f000 bd29 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dafc:	2300      	movs	r3, #0
 800dafe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db00:	f000 bd25 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800db04:	2300      	movs	r3, #0
 800db06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db08:	f000 bd21 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800db0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db10:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800db14:	430b      	orrs	r3, r1
 800db16:	d14c      	bne.n	800dbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800db18:	4b4f      	ldr	r3, [pc, #316]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800db1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800db22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800db24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db26:	2b00      	cmp	r3, #0
 800db28:	d104      	bne.n	800db34 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800db2a:	f7fd fd8d 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800db2e:	6378      	str	r0, [r7, #52]	@ 0x34
 800db30:	f000 bd0d 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800db34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800db3a:	d104      	bne.n	800db46 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800db3c:	f7fd fc68 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800db40:	6378      	str	r0, [r7, #52]	@ 0x34
 800db42:	f000 bd04 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800db46:	4b44      	ldr	r3, [pc, #272]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db52:	d107      	bne.n	800db64 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800db54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db5a:	d103      	bne.n	800db64 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800db5c:	4b3f      	ldr	r3, [pc, #252]	@ (800dc5c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800db5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db60:	f000 bcf5 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800db64:	4b3c      	ldr	r3, [pc, #240]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f003 0320 	and.w	r3, r3, #32
 800db6c:	2b20      	cmp	r3, #32
 800db6e:	d11c      	bne.n	800dbaa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800db70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db72:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800db76:	d118      	bne.n	800dbaa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800db78:	4b37      	ldr	r3, [pc, #220]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db80:	2b00      	cmp	r3, #0
 800db82:	d005      	beq.n	800db90 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800db84:	4b34      	ldr	r3, [pc, #208]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	0e1b      	lsrs	r3, r3, #24
 800db8a:	f003 030f 	and.w	r3, r3, #15
 800db8e:	e006      	b.n	800db9e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800db90:	4b31      	ldr	r3, [pc, #196]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800db96:	041b      	lsls	r3, r3, #16
 800db98:	0e1b      	lsrs	r3, r3, #24
 800db9a:	f003 030f 	and.w	r3, r3, #15
 800db9e:	4a30      	ldr	r2, [pc, #192]	@ (800dc60 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dba4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dba6:	f000 bcd2 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbae:	f000 bcce 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800dbb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbb6:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800dbba:	430b      	orrs	r3, r1
 800dbbc:	d152      	bne.n	800dc64 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800dbbe:	4b26      	ldr	r3, [pc, #152]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dbc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dbc4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800dbc8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800dbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d104      	bne.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dbd0:	f7fd fd3a 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800dbd4:	6378      	str	r0, [r7, #52]	@ 0x34
 800dbd6:	f000 bcba 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800dbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dbe0:	d104      	bne.n	800dbec <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dbe2:	f7fd fc15 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800dbe6:	6378      	str	r0, [r7, #52]	@ 0x34
 800dbe8:	f000 bcb1 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800dbec:	4b1a      	ldr	r3, [pc, #104]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dbf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dbf8:	d107      	bne.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc00:	d103      	bne.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800dc02:	4b16      	ldr	r3, [pc, #88]	@ (800dc5c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800dc04:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc06:	f000 bca2 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800dc0a:	4b13      	ldr	r3, [pc, #76]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0320 	and.w	r3, r3, #32
 800dc12:	2b20      	cmp	r3, #32
 800dc14:	d11c      	bne.n	800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800dc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dc1c:	d118      	bne.n	800dc50 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dc1e:	4b0e      	ldr	r3, [pc, #56]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d005      	beq.n	800dc36 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800dc2a:	4b0b      	ldr	r3, [pc, #44]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	0e1b      	lsrs	r3, r3, #24
 800dc30:	f003 030f 	and.w	r3, r3, #15
 800dc34:	e006      	b.n	800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800dc36:	4b08      	ldr	r3, [pc, #32]	@ (800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dc3c:	041b      	lsls	r3, r3, #16
 800dc3e:	0e1b      	lsrs	r3, r3, #24
 800dc40:	f003 030f 	and.w	r3, r3, #15
 800dc44:	4a06      	ldr	r2, [pc, #24]	@ (800dc60 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc4c:	f000 bc7f 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800dc50:	2300      	movs	r3, #0
 800dc52:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc54:	f000 bc7b 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800dc58:	46020c00 	.word	0x46020c00
 800dc5c:	00f42400 	.word	0x00f42400
 800dc60:	080124dc 	.word	0x080124dc
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800dc64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc68:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800dc6c:	430b      	orrs	r3, r1
 800dc6e:	d14c      	bne.n	800dd0a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800dc70:	4ba6      	ldr	r3, [pc, #664]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dc72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dc76:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800dc7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800dc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d104      	bne.n	800dc8c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dc82:	f7fd fce1 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800dc86:	6378      	str	r0, [r7, #52]	@ 0x34
 800dc88:	f000 bc61 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc92:	d104      	bne.n	800dc9e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dc94:	f7fd fbbc 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800dc98:	6378      	str	r0, [r7, #52]	@ 0x34
 800dc9a:	f000 bc58 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800dc9e:	4b9b      	ldr	r3, [pc, #620]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcaa:	d107      	bne.n	800dcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800dcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dcb2:	d103      	bne.n	800dcbc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800dcb4:	4b96      	ldr	r3, [pc, #600]	@ (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800dcb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcb8:	f000 bc49 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800dcbc:	4b93      	ldr	r3, [pc, #588]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f003 0320 	and.w	r3, r3, #32
 800dcc4:	2b20      	cmp	r3, #32
 800dcc6:	d11c      	bne.n	800dd02 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800dcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800dcce:	d118      	bne.n	800dd02 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dcd0:	4b8e      	ldr	r3, [pc, #568]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d005      	beq.n	800dce8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800dcdc:	4b8b      	ldr	r3, [pc, #556]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	0e1b      	lsrs	r3, r3, #24
 800dce2:	f003 030f 	and.w	r3, r3, #15
 800dce6:	e006      	b.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800dce8:	4b88      	ldr	r3, [pc, #544]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dcea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dcee:	041b      	lsls	r3, r3, #16
 800dcf0:	0e1b      	lsrs	r3, r3, #24
 800dcf2:	f003 030f 	and.w	r3, r3, #15
 800dcf6:	4a87      	ldr	r2, [pc, #540]	@ (800df14 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800dcf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcfe:	f000 bc26 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800dd02:	2300      	movs	r3, #0
 800dd04:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd06:	f000 bc22 	b.w	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800dd0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd0e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800dd12:	430b      	orrs	r3, r1
 800dd14:	d164      	bne.n	800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800dd16:	4b7d      	ldr	r3, [pc, #500]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dd18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dd1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd20:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800dd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d120      	bne.n	800dd6a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dd28:	4b78      	ldr	r3, [pc, #480]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f003 0320 	and.w	r3, r3, #32
 800dd30:	2b20      	cmp	r3, #32
 800dd32:	d117      	bne.n	800dd64 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dd34:	4b75      	ldr	r3, [pc, #468]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d005      	beq.n	800dd4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800dd40:	4b72      	ldr	r3, [pc, #456]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	0e1b      	lsrs	r3, r3, #24
 800dd46:	f003 030f 	and.w	r3, r3, #15
 800dd4a:	e006      	b.n	800dd5a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800dd4c:	4b6f      	ldr	r3, [pc, #444]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dd4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dd52:	041b      	lsls	r3, r3, #16
 800dd54:	0e1b      	lsrs	r3, r3, #24
 800dd56:	f003 030f 	and.w	r3, r3, #15
 800dd5a:	4a6e      	ldr	r2, [pc, #440]	@ (800df14 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800dd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd60:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd62:	e3f4      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800dd64:	2300      	movs	r3, #0
 800dd66:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd68:	e3f1      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800dd6a:	4b68      	ldr	r3, [pc, #416]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dd6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dd70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dd78:	d112      	bne.n	800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd80:	d10e      	bne.n	800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dd82:	4b62      	ldr	r3, [pc, #392]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dd84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dd88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dd8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd90:	d102      	bne.n	800dd98 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800dd92:	23fa      	movs	r3, #250	@ 0xfa
 800dd94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dd96:	e3da      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800dd98:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dd9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dd9e:	e3d6      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800dda0:	4b5a      	ldr	r3, [pc, #360]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dda8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddac:	d106      	bne.n	800ddbc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800ddae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ddb4:	d102      	bne.n	800ddbc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800ddb6:	4b56      	ldr	r3, [pc, #344]	@ (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ddb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddba:	e3c8      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800ddbc:	4b53      	ldr	r3, [pc, #332]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ddbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ddc2:	f003 0302 	and.w	r3, r3, #2
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d107      	bne.n	800ddda <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800ddca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ddd0:	d103      	bne.n	800ddda <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800ddd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddd8:	e3b9      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800ddda:	2300      	movs	r3, #0
 800dddc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddde:	e3b6      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800dde0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dde4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800dde8:	430b      	orrs	r3, r1
 800ddea:	d164      	bne.n	800deb6 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ddec:	4b47      	ldr	r3, [pc, #284]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ddee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ddf2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ddf6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d120      	bne.n	800de40 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ddfe:	4b43      	ldr	r3, [pc, #268]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f003 0320 	and.w	r3, r3, #32
 800de06:	2b20      	cmp	r3, #32
 800de08:	d117      	bne.n	800de3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800de0a:	4b40      	ldr	r3, [pc, #256]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de12:	2b00      	cmp	r3, #0
 800de14:	d005      	beq.n	800de22 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800de16:	4b3d      	ldr	r3, [pc, #244]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	0e1b      	lsrs	r3, r3, #24
 800de1c:	f003 030f 	and.w	r3, r3, #15
 800de20:	e006      	b.n	800de30 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800de22:	4b3a      	ldr	r3, [pc, #232]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800de28:	041b      	lsls	r3, r3, #16
 800de2a:	0e1b      	lsrs	r3, r3, #24
 800de2c:	f003 030f 	and.w	r3, r3, #15
 800de30:	4a38      	ldr	r2, [pc, #224]	@ (800df14 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800de32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de36:	637b      	str	r3, [r7, #52]	@ 0x34
 800de38:	e389      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800de3a:	2300      	movs	r3, #0
 800de3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800de3e:	e386      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800de40:	4b32      	ldr	r3, [pc, #200]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800de46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de4e:	d112      	bne.n	800de76 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800de50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de56:	d10e      	bne.n	800de76 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800de58:	4b2c      	ldr	r3, [pc, #176]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800de5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de66:	d102      	bne.n	800de6e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800de68:	23fa      	movs	r3, #250	@ 0xfa
 800de6a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800de6c:	e36f      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800de6e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800de72:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800de74:	e36b      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800de76:	4b25      	ldr	r3, [pc, #148]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de82:	d106      	bne.n	800de92 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800de84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de8a:	d102      	bne.n	800de92 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800de8c:	4b20      	ldr	r3, [pc, #128]	@ (800df10 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800de8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800de90:	e35d      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800de92:	4b1e      	ldr	r3, [pc, #120]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800de98:	f003 0302 	and.w	r3, r3, #2
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d107      	bne.n	800deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800dea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dea6:	d103      	bne.n	800deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800dea8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800deac:	637b      	str	r3, [r7, #52]	@ 0x34
 800deae:	e34e      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800deb0:	2300      	movs	r3, #0
 800deb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800deb4:	e34b      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800deb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800deba:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800debe:	430b      	orrs	r3, r1
 800dec0:	d14e      	bne.n	800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800dec2:	4b12      	ldr	r3, [pc, #72]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dec8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800decc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800dece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d103      	bne.n	800dedc <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ded4:	f7fd fbb8 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800ded8:	6378      	str	r0, [r7, #52]	@ 0x34
 800deda:	e338      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800dedc:	4b0b      	ldr	r3, [pc, #44]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800deea:	d119      	bne.n	800df20 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800deec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800def2:	d115      	bne.n	800df20 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800def4:	4b05      	ldr	r3, [pc, #20]	@ (800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800def6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800defa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800defe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df02:	d109      	bne.n	800df18 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800df04:	23fa      	movs	r3, #250	@ 0xfa
 800df06:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800df08:	e321      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800df0a:	bf00      	nop
 800df0c:	46020c00 	.word	0x46020c00
 800df10:	00f42400 	.word	0x00f42400
 800df14:	080124dc 	.word	0x080124dc
      }
      else
      {
        frequency = LSI_VALUE;
 800df18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800df1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800df1e:	e316      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800df20:	4ba8      	ldr	r3, [pc, #672]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800df28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df2c:	d106      	bne.n	800df3c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800df2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df30:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800df34:	d102      	bne.n	800df3c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800df36:	4ba4      	ldr	r3, [pc, #656]	@ (800e1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800df38:	637b      	str	r3, [r7, #52]	@ 0x34
 800df3a:	e308      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800df3c:	4ba1      	ldr	r3, [pc, #644]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800df3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df42:	f003 0302 	and.w	r3, r3, #2
 800df46:	2b02      	cmp	r3, #2
 800df48:	d107      	bne.n	800df5a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800df4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800df50:	d103      	bne.n	800df5a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800df52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df56:	637b      	str	r3, [r7, #52]	@ 0x34
 800df58:	e2f9      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800df5a:	2300      	movs	r3, #0
 800df5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800df5e:	e2f6      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800df60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df64:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800df68:	430b      	orrs	r3, r1
 800df6a:	d12d      	bne.n	800dfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800df6c:	4b95      	ldr	r3, [pc, #596]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800df6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800df72:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800df76:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800df78:	4b92      	ldr	r3, [pc, #584]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df84:	d105      	bne.n	800df92 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800df86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d102      	bne.n	800df92 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800df8c:	4b8e      	ldr	r3, [pc, #568]	@ (800e1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800df8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800df90:	e2dd      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800df92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df98:	d107      	bne.n	800dfaa <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe fb4c 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800dfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfa8:	e2d1      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800dfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dfb0:	d107      	bne.n	800dfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfb2:	f107 0318 	add.w	r3, r7, #24
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fe fc9a 	bl	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfc0:	e2c5      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfc6:	e2c2      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800dfc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfcc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800dfd0:	430b      	orrs	r3, r1
 800dfd2:	d156      	bne.n	800e082 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800dfd4:	4b7b      	ldr	r3, [pc, #492]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800dfd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dfda:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800dfde:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800dfe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dfe6:	d028      	beq.n	800e03a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dfee:	d845      	bhi.n	800e07c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800dff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dff6:	d013      	beq.n	800e020 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800dff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dffa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dffe:	d83d      	bhi.n	800e07c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800e000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e002:	2b00      	cmp	r3, #0
 800e004:	d004      	beq.n	800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800e006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e008:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e00c:	d004      	beq.n	800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800e00e:	e035      	b.n	800e07c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800e010:	f7fd fb2e 	bl	800b670 <HAL_RCC_GetPCLK2Freq>
 800e014:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e016:	e29a      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e018:	f7fd f9fa 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800e01c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e01e:	e296      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e020:	4b68      	ldr	r3, [pc, #416]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e02c:	d102      	bne.n	800e034 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800e02e:	4b66      	ldr	r3, [pc, #408]	@ (800e1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e030:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e032:	e28c      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e034:	2300      	movs	r3, #0
 800e036:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e038:	e289      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e03a:	4b62      	ldr	r3, [pc, #392]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f003 0320 	and.w	r3, r3, #32
 800e042:	2b20      	cmp	r3, #32
 800e044:	d117      	bne.n	800e076 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e046:	4b5f      	ldr	r3, [pc, #380]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d005      	beq.n	800e05e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800e052:	4b5c      	ldr	r3, [pc, #368]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	0e1b      	lsrs	r3, r3, #24
 800e058:	f003 030f 	and.w	r3, r3, #15
 800e05c:	e006      	b.n	800e06c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800e05e:	4b59      	ldr	r3, [pc, #356]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e064:	041b      	lsls	r3, r3, #16
 800e066:	0e1b      	lsrs	r3, r3, #24
 800e068:	f003 030f 	and.w	r3, r3, #15
 800e06c:	4a57      	ldr	r2, [pc, #348]	@ (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800e06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e072:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e074:	e26b      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e076:	2300      	movs	r3, #0
 800e078:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e07a:	e268      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e07c:	2300      	movs	r3, #0
 800e07e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e080:	e265      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800e082:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e086:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800e08a:	430b      	orrs	r3, r1
 800e08c:	d156      	bne.n	800e13c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800e08e:	4b4d      	ldr	r3, [pc, #308]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e098:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e09c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e0a0:	d028      	beq.n	800e0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e0a8:	d845      	bhi.n	800e136 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e0b0:	d013      	beq.n	800e0da <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e0b8:	d83d      	bhi.n	800e136 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800e0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d004      	beq.n	800e0ca <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0c6:	d004      	beq.n	800e0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800e0c8:	e035      	b.n	800e136 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800e0ca:	f7fd fabd 	bl	800b648 <HAL_RCC_GetPCLK1Freq>
 800e0ce:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e0d0:	e23d      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e0d2:	f7fd f99d 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800e0d6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e0d8:	e239      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e0da:	4b3a      	ldr	r3, [pc, #232]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e0e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0e6:	d102      	bne.n	800e0ee <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800e0e8:	4b37      	ldr	r3, [pc, #220]	@ (800e1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e0ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e0ec:	e22f      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e0f2:	e22c      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e0f4:	4b33      	ldr	r3, [pc, #204]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f003 0320 	and.w	r3, r3, #32
 800e0fc:	2b20      	cmp	r3, #32
 800e0fe:	d117      	bne.n	800e130 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e100:	4b30      	ldr	r3, [pc, #192]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d005      	beq.n	800e118 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800e10c:	4b2d      	ldr	r3, [pc, #180]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	0e1b      	lsrs	r3, r3, #24
 800e112:	f003 030f 	and.w	r3, r3, #15
 800e116:	e006      	b.n	800e126 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800e118:	4b2a      	ldr	r3, [pc, #168]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e11a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e11e:	041b      	lsls	r3, r3, #16
 800e120:	0e1b      	lsrs	r3, r3, #24
 800e122:	f003 030f 	and.w	r3, r3, #15
 800e126:	4a29      	ldr	r2, [pc, #164]	@ (800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800e128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e12c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e12e:	e20e      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e130:	2300      	movs	r3, #0
 800e132:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e134:	e20b      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e136:	2300      	movs	r3, #0
 800e138:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e13a:	e208      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800e13c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e140:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800e144:	430b      	orrs	r3, r1
 800e146:	d17c      	bne.n	800e242 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800e148:	4b1e      	ldr	r3, [pc, #120]	@ (800e1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e14a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e14e:	f003 0318 	and.w	r3, r3, #24
 800e152:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e156:	2b18      	cmp	r3, #24
 800e158:	d870      	bhi.n	800e23c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800e15a:	a201      	add	r2, pc, #4	@ (adr r2, 800e160 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800e15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e160:	0800e1d1 	.word	0x0800e1d1
 800e164:	0800e23d 	.word	0x0800e23d
 800e168:	0800e23d 	.word	0x0800e23d
 800e16c:	0800e23d 	.word	0x0800e23d
 800e170:	0800e23d 	.word	0x0800e23d
 800e174:	0800e23d 	.word	0x0800e23d
 800e178:	0800e23d 	.word	0x0800e23d
 800e17c:	0800e23d 	.word	0x0800e23d
 800e180:	0800e1d9 	.word	0x0800e1d9
 800e184:	0800e23d 	.word	0x0800e23d
 800e188:	0800e23d 	.word	0x0800e23d
 800e18c:	0800e23d 	.word	0x0800e23d
 800e190:	0800e23d 	.word	0x0800e23d
 800e194:	0800e23d 	.word	0x0800e23d
 800e198:	0800e23d 	.word	0x0800e23d
 800e19c:	0800e23d 	.word	0x0800e23d
 800e1a0:	0800e1e1 	.word	0x0800e1e1
 800e1a4:	0800e23d 	.word	0x0800e23d
 800e1a8:	0800e23d 	.word	0x0800e23d
 800e1ac:	0800e23d 	.word	0x0800e23d
 800e1b0:	0800e23d 	.word	0x0800e23d
 800e1b4:	0800e23d 	.word	0x0800e23d
 800e1b8:	0800e23d 	.word	0x0800e23d
 800e1bc:	0800e23d 	.word	0x0800e23d
 800e1c0:	0800e1fb 	.word	0x0800e1fb
 800e1c4:	46020c00 	.word	0x46020c00
 800e1c8:	00f42400 	.word	0x00f42400
 800e1cc:	080124dc 	.word	0x080124dc
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800e1d0:	f7fd fa62 	bl	800b698 <HAL_RCC_GetPCLK3Freq>
 800e1d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e1d6:	e1ba      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e1d8:	f7fd f91a 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800e1dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e1de:	e1b6      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e1e0:	4b9f      	ldr	r3, [pc, #636]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e1e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1ec:	d102      	bne.n	800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800e1ee:	4b9d      	ldr	r3, [pc, #628]	@ (800e464 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e1f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e1f2:	e1ac      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e1f8:	e1a9      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e1fa:	4b99      	ldr	r3, [pc, #612]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f003 0320 	and.w	r3, r3, #32
 800e202:	2b20      	cmp	r3, #32
 800e204:	d117      	bne.n	800e236 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e206:	4b96      	ldr	r3, [pc, #600]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d005      	beq.n	800e21e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800e212:	4b93      	ldr	r3, [pc, #588]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	0e1b      	lsrs	r3, r3, #24
 800e218:	f003 030f 	and.w	r3, r3, #15
 800e21c:	e006      	b.n	800e22c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800e21e:	4b90      	ldr	r3, [pc, #576]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e220:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e224:	041b      	lsls	r3, r3, #16
 800e226:	0e1b      	lsrs	r3, r3, #24
 800e228:	f003 030f 	and.w	r3, r3, #15
 800e22c:	4a8e      	ldr	r2, [pc, #568]	@ (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e232:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e234:	e18b      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e236:	2300      	movs	r3, #0
 800e238:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e23a:	e188      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e23c:	2300      	movs	r3, #0
 800e23e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e240:	e185      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800e242:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e246:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800e24a:	430b      	orrs	r3, r1
 800e24c:	d155      	bne.n	800e2fa <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800e24e:	4b84      	ldr	r3, [pc, #528]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e250:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e254:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e258:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e260:	d013      	beq.n	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800e262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e264:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e268:	d844      	bhi.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e270:	d013      	beq.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800e272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e274:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e278:	d83c      	bhi.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d014      	beq.n	800e2aa <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800e280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e286:	d014      	beq.n	800e2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800e288:	e034      	b.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e28a:	f107 0318 	add.w	r3, r7, #24
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fe fb2e 	bl	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e298:	e159      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e29a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fe f9cc 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e2a8:	e151      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e2aa:	f7fd f8b1 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800e2ae:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e2b0:	e14d      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e2b2:	4b6b      	ldr	r3, [pc, #428]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f003 0320 	and.w	r3, r3, #32
 800e2ba:	2b20      	cmp	r3, #32
 800e2bc:	d117      	bne.n	800e2ee <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e2be:	4b68      	ldr	r3, [pc, #416]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d005      	beq.n	800e2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800e2ca:	4b65      	ldr	r3, [pc, #404]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	0e1b      	lsrs	r3, r3, #24
 800e2d0:	f003 030f 	and.w	r3, r3, #15
 800e2d4:	e006      	b.n	800e2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800e2d6:	4b62      	ldr	r3, [pc, #392]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e2d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e2dc:	041b      	lsls	r3, r3, #16
 800e2de:	0e1b      	lsrs	r3, r3, #24
 800e2e0:	f003 030f 	and.w	r3, r3, #15
 800e2e4:	4a60      	ldr	r2, [pc, #384]	@ (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e2ec:	e12f      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e2f2:	e12c      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e2f8:	e129      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800e2fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2fe:	1e59      	subs	r1, r3, #1
 800e300:	ea52 0301 	orrs.w	r3, r2, r1
 800e304:	d13c      	bne.n	800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800e306:	4b56      	ldr	r3, [pc, #344]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e30c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800e310:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e314:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e318:	d027      	beq.n	800e36a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800e31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e320:	d82b      	bhi.n	800e37a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e324:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e328:	d017      	beq.n	800e35a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800e32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e32c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e330:	d823      	bhi.n	800e37a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e334:	2b00      	cmp	r3, #0
 800e336:	d004      	beq.n	800e342 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800e338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e33e:	d004      	beq.n	800e34a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800e340:	e01b      	b.n	800e37a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e342:	f7fd f865 	bl	800b410 <HAL_RCC_GetSysClockFreq>
 800e346:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e348:	e101      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e34a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fe f974 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e356:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e358:	e0f9      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e35a:	f107 0318 	add.w	r3, r7, #24
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fe fac6 	bl	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e368:	e0f1      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e36a:	f107 030c 	add.w	r3, r7, #12
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fe fc18 	bl	800cba4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e378:	e0e9      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e37a:	2300      	movs	r3, #0
 800e37c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e37e:	e0e6      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800e380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e384:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800e388:	430b      	orrs	r3, r1
 800e38a:	d131      	bne.n	800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800e38c:	4b34      	ldr	r3, [pc, #208]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e38e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e392:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e396:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800e398:	4b31      	ldr	r3, [pc, #196]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e39a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e39e:	f003 0302 	and.w	r3, r3, #2
 800e3a2:	2b02      	cmp	r3, #2
 800e3a4:	d106      	bne.n	800e3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800e3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d103      	bne.n	800e3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800e3ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e3b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3b2:	e0cc      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800e3b4:	4b2a      	ldr	r3, [pc, #168]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e3b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e3ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e3be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e3c2:	d112      	bne.n	800e3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800e3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e3ca:	d10e      	bne.n	800e3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e3cc:	4b24      	ldr	r3, [pc, #144]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e3ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e3d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e3d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3da:	d102      	bne.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800e3dc:	23fa      	movs	r3, #250	@ 0xfa
 800e3de:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e3e0:	e0b5      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e3e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e3e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e3e8:	e0b1      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3ee:	e0ae      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800e3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3f4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e3f8:	430b      	orrs	r3, r1
 800e3fa:	d13b      	bne.n	800e474 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800e3fc:	4b18      	ldr	r3, [pc, #96]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e3fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e402:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e406:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800e408:	4b15      	ldr	r3, [pc, #84]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e414:	d105      	bne.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800e416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d102      	bne.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800e41c:	4b13      	ldr	r3, [pc, #76]	@ (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800e41e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e420:	e095      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800e422:	4b0f      	ldr	r3, [pc, #60]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e42a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e42e:	d106      	bne.n	800e43e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800e430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e436:	d102      	bne.n	800e43e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800e438:	4b0d      	ldr	r3, [pc, #52]	@ (800e470 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800e43a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e43c:	e087      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800e43e:	4b08      	ldr	r3, [pc, #32]	@ (800e460 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e44a:	d106      	bne.n	800e45a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800e44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e452:	d102      	bne.n	800e45a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800e454:	4b03      	ldr	r3, [pc, #12]	@ (800e464 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e456:	637b      	str	r3, [r7, #52]	@ 0x34
 800e458:	e079      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800e45a:	2300      	movs	r3, #0
 800e45c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e45e:	e076      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800e460:	46020c00 	.word	0x46020c00
 800e464:	00f42400 	.word	0x00f42400
 800e468:	080124dc 	.word	0x080124dc
 800e46c:	02dc6c00 	.word	0x02dc6c00
 800e470:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800e474:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e478:	1e99      	subs	r1, r3, #2
 800e47a:	ea52 0301 	orrs.w	r3, r2, r1
 800e47e:	d120      	bne.n	800e4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800e480:	4b35      	ldr	r3, [pc, #212]	@ (800e558 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e482:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e48a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d004      	beq.n	800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800e492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e494:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e498:	d008      	beq.n	800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800e49a:	e00f      	b.n	800e4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e49c:	f107 030c 	add.w	r3, r7, #12
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7fe fb7f 	bl	800cba4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4aa:	e050      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4ac:	f107 0318 	add.w	r3, r7, #24
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fe fa1d 	bl	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4ba:	e048      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4c0:	e045      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800e4c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4c6:	f1a3 0108 	sub.w	r1, r3, #8
 800e4ca:	ea52 0301 	orrs.w	r3, r2, r1
 800e4ce:	d13c      	bne.n	800e54a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800e4d0:	4b21      	ldr	r3, [pc, #132]	@ (800e558 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e4d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e4d6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e4da:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800e4dc:	4b1e      	ldr	r3, [pc, #120]	@ (800e558 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e4e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e4e8:	d105      	bne.n	800e4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800e4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d102      	bne.n	800e4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800e4f0:	4b1a      	ldr	r3, [pc, #104]	@ (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800e4f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4f4:	e02b      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800e4f6:	4b18      	ldr	r3, [pc, #96]	@ (800e558 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e4fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e502:	d106      	bne.n	800e512 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800e504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e50a:	d102      	bne.n	800e512 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800e50c:	4b14      	ldr	r3, [pc, #80]	@ (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800e50e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e510:	e01d      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800e512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e518:	d107      	bne.n	800e52a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e51a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fe f88c 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800e524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e526:	637b      	str	r3, [r7, #52]	@ 0x34
 800e528:	e011      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800e52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800e530:	d108      	bne.n	800e544 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e536:	4618      	mov	r0, r3
 800e538:	f7fe f880 	bl	800c63c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800e53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e53e:	085b      	lsrs	r3, r3, #1
 800e540:	637b      	str	r3, [r7, #52]	@ 0x34
 800e542:	e004      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800e544:	2300      	movs	r3, #0
 800e546:	637b      	str	r3, [r7, #52]	@ 0x34
 800e548:	e001      	b.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800e54a:	2300      	movs	r3, #0
 800e54c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800e54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e550:	4618      	mov	r0, r3
 800e552:	3738      	adds	r7, #56	@ 0x38
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	46020c00 	.word	0x46020c00
 800e55c:	00f42400 	.word	0x00f42400
 800e560:	007a1200 	.word	0x007a1200

0800e564 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800e56c:	4b47      	ldr	r3, [pc, #284]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a46      	ldr	r2, [pc, #280]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e572:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e576:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e578:	f7f4 ffd8 	bl	800352c <HAL_GetTick>
 800e57c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e57e:	e008      	b.n	800e592 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e580:	f7f4 ffd4 	bl	800352c <HAL_GetTick>
 800e584:	4602      	mov	r2, r0
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	2b02      	cmp	r3, #2
 800e58c:	d901      	bls.n	800e592 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e58e:	2303      	movs	r3, #3
 800e590:	e077      	b.n	800e682 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e592:	4b3e      	ldr	r3, [pc, #248]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1f0      	bne.n	800e580 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800e59e:	4b3b      	ldr	r3, [pc, #236]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e5a6:	f023 0303 	bic.w	r3, r3, #3
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	6811      	ldr	r1, [r2, #0]
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	6852      	ldr	r2, [r2, #4]
 800e5b2:	3a01      	subs	r2, #1
 800e5b4:	0212      	lsls	r2, r2, #8
 800e5b6:	430a      	orrs	r2, r1
 800e5b8:	4934      	ldr	r1, [pc, #208]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800e5be:	4b33      	ldr	r3, [pc, #204]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e5c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5c2:	4b33      	ldr	r3, [pc, #204]	@ (800e690 <RCCEx_PLL2_Config+0x12c>)
 800e5c4:	4013      	ands	r3, r2
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	6892      	ldr	r2, [r2, #8]
 800e5ca:	3a01      	subs	r2, #1
 800e5cc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	68d2      	ldr	r2, [r2, #12]
 800e5d4:	3a01      	subs	r2, #1
 800e5d6:	0252      	lsls	r2, r2, #9
 800e5d8:	b292      	uxth	r2, r2
 800e5da:	4311      	orrs	r1, r2
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	6912      	ldr	r2, [r2, #16]
 800e5e0:	3a01      	subs	r2, #1
 800e5e2:	0412      	lsls	r2, r2, #16
 800e5e4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e5e8:	4311      	orrs	r1, r2
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	6952      	ldr	r2, [r2, #20]
 800e5ee:	3a01      	subs	r2, #1
 800e5f0:	0612      	lsls	r2, r2, #24
 800e5f2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e5f6:	430a      	orrs	r2, r1
 800e5f8:	4924      	ldr	r1, [pc, #144]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800e5fe:	4b23      	ldr	r3, [pc, #140]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e602:	f023 020c 	bic.w	r2, r3, #12
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	699b      	ldr	r3, [r3, #24]
 800e60a:	4920      	ldr	r1, [pc, #128]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e60c:	4313      	orrs	r3, r2
 800e60e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800e610:	4b1e      	ldr	r3, [pc, #120]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a1b      	ldr	r3, [r3, #32]
 800e618:	491c      	ldr	r1, [pc, #112]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e61a:	4313      	orrs	r3, r2
 800e61c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800e61e:	4b1b      	ldr	r3, [pc, #108]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e622:	4a1a      	ldr	r2, [pc, #104]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e624:	f023 0310 	bic.w	r3, r3, #16
 800e628:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e62a:	4b18      	ldr	r3, [pc, #96]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e62e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e632:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	69d2      	ldr	r2, [r2, #28]
 800e63a:	00d2      	lsls	r2, r2, #3
 800e63c:	4913      	ldr	r1, [pc, #76]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e63e:	4313      	orrs	r3, r2
 800e640:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800e642:	4b12      	ldr	r3, [pc, #72]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e646:	4a11      	ldr	r2, [pc, #68]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e648:	f043 0310 	orr.w	r3, r3, #16
 800e64c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800e64e:	4b0f      	ldr	r3, [pc, #60]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4a0e      	ldr	r2, [pc, #56]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e654:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e658:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e65a:	f7f4 ff67 	bl	800352c <HAL_GetTick>
 800e65e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e660:	e008      	b.n	800e674 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e662:	f7f4 ff63 	bl	800352c <HAL_GetTick>
 800e666:	4602      	mov	r2, r0
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	2b02      	cmp	r3, #2
 800e66e:	d901      	bls.n	800e674 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e670:	2303      	movs	r3, #3
 800e672:	e006      	b.n	800e682 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e674:	4b05      	ldr	r3, [pc, #20]	@ (800e68c <RCCEx_PLL2_Config+0x128>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d0f0      	beq.n	800e662 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800e680:	2300      	movs	r3, #0

}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	46020c00 	.word	0x46020c00
 800e690:	80800000 	.word	0x80800000

0800e694 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800e69c:	4b47      	ldr	r3, [pc, #284]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a46      	ldr	r2, [pc, #280]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e6a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e6a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e6a8:	f7f4 ff40 	bl	800352c <HAL_GetTick>
 800e6ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e6ae:	e008      	b.n	800e6c2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e6b0:	f7f4 ff3c 	bl	800352c <HAL_GetTick>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d901      	bls.n	800e6c2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e6be:	2303      	movs	r3, #3
 800e6c0:	e077      	b.n	800e7b2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e6c2:	4b3e      	ldr	r3, [pc, #248]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1f0      	bne.n	800e6b0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800e6ce:	4b3b      	ldr	r3, [pc, #236]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e6d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e6d6:	f023 0303 	bic.w	r3, r3, #3
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	6811      	ldr	r1, [r2, #0]
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	6852      	ldr	r2, [r2, #4]
 800e6e2:	3a01      	subs	r2, #1
 800e6e4:	0212      	lsls	r2, r2, #8
 800e6e6:	430a      	orrs	r2, r1
 800e6e8:	4934      	ldr	r1, [pc, #208]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	630b      	str	r3, [r1, #48]	@ 0x30
 800e6ee:	4b33      	ldr	r3, [pc, #204]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e6f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e6f2:	4b33      	ldr	r3, [pc, #204]	@ (800e7c0 <RCCEx_PLL3_Config+0x12c>)
 800e6f4:	4013      	ands	r3, r2
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	6892      	ldr	r2, [r2, #8]
 800e6fa:	3a01      	subs	r2, #1
 800e6fc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	68d2      	ldr	r2, [r2, #12]
 800e704:	3a01      	subs	r2, #1
 800e706:	0252      	lsls	r2, r2, #9
 800e708:	b292      	uxth	r2, r2
 800e70a:	4311      	orrs	r1, r2
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	6912      	ldr	r2, [r2, #16]
 800e710:	3a01      	subs	r2, #1
 800e712:	0412      	lsls	r2, r2, #16
 800e714:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e718:	4311      	orrs	r1, r2
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	6952      	ldr	r2, [r2, #20]
 800e71e:	3a01      	subs	r2, #1
 800e720:	0612      	lsls	r2, r2, #24
 800e722:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e726:	430a      	orrs	r2, r1
 800e728:	4924      	ldr	r1, [pc, #144]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e72a:	4313      	orrs	r3, r2
 800e72c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800e72e:	4b23      	ldr	r3, [pc, #140]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e732:	f023 020c 	bic.w	r2, r3, #12
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	699b      	ldr	r3, [r3, #24]
 800e73a:	4920      	ldr	r1, [pc, #128]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e73c:	4313      	orrs	r3, r2
 800e73e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800e740:	4b1e      	ldr	r3, [pc, #120]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6a1b      	ldr	r3, [r3, #32]
 800e748:	491c      	ldr	r1, [pc, #112]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e74a:	4313      	orrs	r3, r2
 800e74c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800e74e:	4b1b      	ldr	r3, [pc, #108]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e752:	4a1a      	ldr	r2, [pc, #104]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e754:	f023 0310 	bic.w	r3, r3, #16
 800e758:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e75a:	4b18      	ldr	r3, [pc, #96]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e75c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e75e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e762:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	69d2      	ldr	r2, [r2, #28]
 800e76a:	00d2      	lsls	r2, r2, #3
 800e76c:	4913      	ldr	r1, [pc, #76]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e76e:	4313      	orrs	r3, r2
 800e770:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800e772:	4b12      	ldr	r3, [pc, #72]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e776:	4a11      	ldr	r2, [pc, #68]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e778:	f043 0310 	orr.w	r3, r3, #16
 800e77c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800e77e:	4b0f      	ldr	r3, [pc, #60]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	4a0e      	ldr	r2, [pc, #56]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e788:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e78a:	f7f4 fecf 	bl	800352c <HAL_GetTick>
 800e78e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e790:	e008      	b.n	800e7a4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e792:	f7f4 fecb 	bl	800352c <HAL_GetTick>
 800e796:	4602      	mov	r2, r0
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	1ad3      	subs	r3, r2, r3
 800e79c:	2b02      	cmp	r3, #2
 800e79e:	d901      	bls.n	800e7a4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e7a0:	2303      	movs	r3, #3
 800e7a2:	e006      	b.n	800e7b2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e7a4:	4b05      	ldr	r3, [pc, #20]	@ (800e7bc <RCCEx_PLL3_Config+0x128>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d0f0      	beq.n	800e792 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3710      	adds	r7, #16
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	46020c00 	.word	0x46020c00
 800e7c0:	80800000 	.word	0x80800000

0800e7c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d071      	beq.n	800e8ba <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d106      	bne.n	800e7f0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7f4 f944 	bl	8002a78 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e7f8:	4b32      	ldr	r3, [pc, #200]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	f003 0310 	and.w	r3, r3, #16
 800e800:	2b10      	cmp	r3, #16
 800e802:	d051      	beq.n	800e8a8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e804:	4b2f      	ldr	r3, [pc, #188]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e806:	22ca      	movs	r2, #202	@ 0xca
 800e808:	625a      	str	r2, [r3, #36]	@ 0x24
 800e80a:	4b2e      	ldr	r3, [pc, #184]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e80c:	2253      	movs	r2, #83	@ 0x53
 800e80e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 f88b 	bl	800e92c <RTC_EnterInitMode>
 800e816:	4603      	mov	r3, r0
 800e818:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800e81a:	7bfb      	ldrb	r3, [r7, #15]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d13f      	bne.n	800e8a0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800e820:	4b28      	ldr	r3, [pc, #160]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e822:	699b      	ldr	r3, [r3, #24]
 800e824:	4a27      	ldr	r2, [pc, #156]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e826:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800e82a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e82e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800e830:	4b24      	ldr	r3, [pc, #144]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e832:	699a      	ldr	r2, [r3, #24]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6859      	ldr	r1, [r3, #4]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	691b      	ldr	r3, [r3, #16]
 800e83c:	4319      	orrs	r1, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	699b      	ldr	r3, [r3, #24]
 800e842:	430b      	orrs	r3, r1
 800e844:	491f      	ldr	r1, [pc, #124]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e846:	4313      	orrs	r3, r2
 800e848:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	68da      	ldr	r2, [r3, #12]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	689b      	ldr	r3, [r3, #8]
 800e852:	041b      	lsls	r3, r3, #16
 800e854:	491b      	ldr	r1, [pc, #108]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e856:	4313      	orrs	r3, r2
 800e858:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800e85a:	4b1a      	ldr	r3, [pc, #104]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e86a:	430b      	orrs	r3, r1
 800e86c:	4915      	ldr	r1, [pc, #84]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e86e:	4313      	orrs	r3, r2
 800e870:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f896 	bl	800e9a4 <RTC_ExitInitMode>
 800e878:	4603      	mov	r3, r0
 800e87a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10e      	bne.n	800e8a0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800e882:	4b10      	ldr	r3, [pc, #64]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e884:	699b      	ldr	r3, [r3, #24]
 800e886:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a19      	ldr	r1, [r3, #32]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	69db      	ldr	r3, [r3, #28]
 800e892:	4319      	orrs	r1, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	695b      	ldr	r3, [r3, #20]
 800e898:	430b      	orrs	r3, r1
 800e89a:	490a      	ldr	r1, [pc, #40]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e89c:	4313      	orrs	r3, r2
 800e89e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e8a0:	4b08      	ldr	r3, [pc, #32]	@ (800e8c4 <HAL_RTC_Init+0x100>)
 800e8a2:	22ff      	movs	r2, #255	@ 0xff
 800e8a4:	625a      	str	r2, [r3, #36]	@ 0x24
 800e8a6:	e001      	b.n	800e8ac <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d103      	bne.n	800e8ba <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800e8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3710      	adds	r7, #16
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	46007800 	.word	0x46007800

0800e8c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800e8d0:	4b15      	ldr	r3, [pc, #84]	@ (800e928 <HAL_RTC_WaitForSynchro+0x60>)
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	4a14      	ldr	r2, [pc, #80]	@ (800e928 <HAL_RTC_WaitForSynchro+0x60>)
 800e8d6:	f023 0320 	bic.w	r3, r3, #32
 800e8da:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800e8dc:	f7f4 fe26 	bl	800352c <HAL_GetTick>
 800e8e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e8e2:	e013      	b.n	800e90c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e8e4:	f7f4 fe22 	bl	800352c <HAL_GetTick>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	1ad3      	subs	r3, r2, r3
 800e8ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e8f2:	d90b      	bls.n	800e90c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e8f4:	4b0c      	ldr	r3, [pc, #48]	@ (800e928 <HAL_RTC_WaitForSynchro+0x60>)
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	f003 0320 	and.w	r3, r3, #32
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10c      	bne.n	800e91a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2203      	movs	r2, #3
 800e904:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800e908:	2303      	movs	r3, #3
 800e90a:	e008      	b.n	800e91e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e90c:	4b06      	ldr	r3, [pc, #24]	@ (800e928 <HAL_RTC_WaitForSynchro+0x60>)
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	f003 0320 	and.w	r3, r3, #32
 800e914:	2b00      	cmp	r3, #0
 800e916:	d0e5      	beq.n	800e8e4 <HAL_RTC_WaitForSynchro+0x1c>
 800e918:	e000      	b.n	800e91c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800e91a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	46007800 	.word	0x46007800

0800e92c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e934:	2300      	movs	r3, #0
 800e936:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e938:	4b19      	ldr	r3, [pc, #100]	@ (800e9a0 <RTC_EnterInitMode+0x74>)
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e940:	2b00      	cmp	r3, #0
 800e942:	d128      	bne.n	800e996 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e944:	4b16      	ldr	r3, [pc, #88]	@ (800e9a0 <RTC_EnterInitMode+0x74>)
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	4a15      	ldr	r2, [pc, #84]	@ (800e9a0 <RTC_EnterInitMode+0x74>)
 800e94a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e94e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e950:	f7f4 fdec 	bl	800352c <HAL_GetTick>
 800e954:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e956:	e013      	b.n	800e980 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e958:	f7f4 fde8 	bl	800352c <HAL_GetTick>
 800e95c:	4602      	mov	r2, r0
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e966:	d90b      	bls.n	800e980 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e968:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a0 <RTC_EnterInitMode+0x74>)
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10f      	bne.n	800e994 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e974:	2303      	movs	r3, #3
 800e976:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2203      	movs	r2, #3
 800e97c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e980:	4b07      	ldr	r3, [pc, #28]	@ (800e9a0 <RTC_EnterInitMode+0x74>)
 800e982:	68db      	ldr	r3, [r3, #12]
 800e984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d104      	bne.n	800e996 <RTC_EnterInitMode+0x6a>
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	2b03      	cmp	r3, #3
 800e990:	d1e2      	bne.n	800e958 <RTC_EnterInitMode+0x2c>
 800e992:	e000      	b.n	800e996 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e994:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e996:	7bfb      	ldrb	r3, [r7, #15]
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}
 800e9a0:	46007800 	.word	0x46007800

0800e9a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e9b0:	4b1a      	ldr	r3, [pc, #104]	@ (800ea1c <RTC_ExitInitMode+0x78>)
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	4a19      	ldr	r2, [pc, #100]	@ (800ea1c <RTC_ExitInitMode+0x78>)
 800e9b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9ba:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e9bc:	4b17      	ldr	r3, [pc, #92]	@ (800ea1c <RTC_ExitInitMode+0x78>)
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	f003 0320 	and.w	r3, r3, #32
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d10c      	bne.n	800e9e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f7ff ff7d 	bl	800e8c8 <HAL_RTC_WaitForSynchro>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d01e      	beq.n	800ea12 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2203      	movs	r2, #3
 800e9d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e9dc:	2303      	movs	r3, #3
 800e9de:	73fb      	strb	r3, [r7, #15]
 800e9e0:	e017      	b.n	800ea12 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e9e2:	4b0e      	ldr	r3, [pc, #56]	@ (800ea1c <RTC_ExitInitMode+0x78>)
 800e9e4:	699b      	ldr	r3, [r3, #24]
 800e9e6:	4a0d      	ldr	r2, [pc, #52]	@ (800ea1c <RTC_ExitInitMode+0x78>)
 800e9e8:	f023 0320 	bic.w	r3, r3, #32
 800e9ec:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7ff ff6a 	bl	800e8c8 <HAL_RTC_WaitForSynchro>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d005      	beq.n	800ea06 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2203      	movs	r2, #3
 800e9fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ea02:	2303      	movs	r3, #3
 800ea04:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ea06:	4b05      	ldr	r3, [pc, #20]	@ (800ea1c <RTC_ExitInitMode+0x78>)
 800ea08:	699b      	ldr	r3, [r3, #24]
 800ea0a:	4a04      	ldr	r2, [pc, #16]	@ (800ea1c <RTC_ExitInitMode+0x78>)
 800ea0c:	f043 0320 	orr.w	r3, r3, #32
 800ea10:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ea12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	46007800 	.word	0x46007800

0800ea20 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	4910      	ldr	r1, [pc, #64]	@ (800ea74 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ea34:	4313      	orrs	r3, r2
 800ea36:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	689a      	ldr	r2, [r3, #8]
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	431a      	orrs	r2, r3
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	699b      	ldr	r3, [r3, #24]
 800ea46:	490c      	ldr	r1, [pc, #48]	@ (800ea78 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800ea4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea78 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ea4e:	6a1b      	ldr	r3, [r3, #32]
 800ea50:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	6919      	ldr	r1, [r3, #16]
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	695b      	ldr	r3, [r3, #20]
 800ea5c:	041b      	lsls	r3, r3, #16
 800ea5e:	430b      	orrs	r3, r1
 800ea60:	4905      	ldr	r1, [pc, #20]	@ (800ea78 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ea62:	4313      	orrs	r3, r2
 800ea64:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800ea66:	2300      	movs	r3, #0
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	370c      	adds	r7, #12
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr
 800ea74:	46007800 	.word	0x46007800
 800ea78:	46007c00 	.word	0x46007c00

0800ea7c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b086      	sub	sp, #24
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
 800ea88:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	d904      	bls.n	800ea9a <HAL_SAI_InitProtocol+0x1e>
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	3b03      	subs	r3, #3
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d812      	bhi.n	800eabe <HAL_SAI_InitProtocol+0x42>
 800ea98:	e008      	b.n	800eaac <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	68b9      	ldr	r1, [r7, #8]
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f000 fbed 	bl	800f280 <SAI_InitI2S>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	75fb      	strb	r3, [r7, #23]
      break;
 800eaaa:	e00b      	b.n	800eac4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	687a      	ldr	r2, [r7, #4]
 800eab0:	68b9      	ldr	r1, [r7, #8]
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f000 fc96 	bl	800f3e4 <SAI_InitPCM>
 800eab8:	4603      	mov	r3, r0
 800eaba:	75fb      	strb	r3, [r7, #23]
      break;
 800eabc:	e002      	b.n	800eac4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800eabe:	2301      	movs	r3, #1
 800eac0:	75fb      	strb	r3, [r7, #23]
      break;
 800eac2:	bf00      	nop
  }

  if (status == HAL_OK)
 800eac4:	7dfb      	ldrb	r3, [r7, #23]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d104      	bne.n	800ead4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f000 f808 	bl	800eae0 <HAL_SAI_Init>
 800ead0:	4603      	mov	r3, r0
 800ead2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ead4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3718      	adds	r7, #24
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
	...

0800eae0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b08a      	sub	sp, #40	@ 0x28
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d101      	bne.n	800eaf2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	e1ce      	b.n	800ee90 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d10e      	bne.n	800eb1a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a83      	ldr	r2, [pc, #524]	@ (800ed10 <HAL_SAI_Init+0x230>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d107      	bne.n	800eb16 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d103      	bne.n	800eb16 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800eb16:	2301      	movs	r3, #1
 800eb18:	e1ba      	b.n	800ee90 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d106      	bne.n	800eb34 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f7f4 f974 	bl	8002e1c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 fd0f 	bl	800f558 <SAI_Disable>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d001      	beq.n	800eb44 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800eb40:	2301      	movs	r3, #1
 800eb42:	e1a5      	b.n	800ee90 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2202      	movs	r2, #2
 800eb48:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	2b02      	cmp	r3, #2
 800eb52:	d00c      	beq.n	800eb6e <HAL_SAI_Init+0x8e>
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d80d      	bhi.n	800eb74 <HAL_SAI_Init+0x94>
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d002      	beq.n	800eb62 <HAL_SAI_Init+0x82>
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d003      	beq.n	800eb68 <HAL_SAI_Init+0x88>
 800eb60:	e008      	b.n	800eb74 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eb66:	e008      	b.n	800eb7a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800eb68:	2310      	movs	r3, #16
 800eb6a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eb6c:	e005      	b.n	800eb7a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800eb6e:	2320      	movs	r3, #32
 800eb70:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eb72:	e002      	b.n	800eb7a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800eb74:	2300      	movs	r3, #0
 800eb76:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800eb78:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	2b03      	cmp	r3, #3
 800eb80:	d81d      	bhi.n	800ebbe <HAL_SAI_Init+0xde>
 800eb82:	a201      	add	r2, pc, #4	@ (adr r2, 800eb88 <HAL_SAI_Init+0xa8>)
 800eb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb88:	0800eb99 	.word	0x0800eb99
 800eb8c:	0800eb9f 	.word	0x0800eb9f
 800eb90:	0800eba7 	.word	0x0800eba7
 800eb94:	0800ebaf 	.word	0x0800ebaf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	61fb      	str	r3, [r7, #28]
      break;
 800eb9c:	e012      	b.n	800ebc4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800eb9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eba2:	61fb      	str	r3, [r7, #28]
      break;
 800eba4:	e00e      	b.n	800ebc4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800eba6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ebaa:	61fb      	str	r3, [r7, #28]
      break;
 800ebac:	e00a      	b.n	800ebc4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ebae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ebb2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb6:	f043 0301 	orr.w	r3, r3, #1
 800ebba:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ebbc:	e002      	b.n	800ebc4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	61fb      	str	r3, [r7, #28]
      break;
 800ebc2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a51      	ldr	r2, [pc, #324]	@ (800ed10 <HAL_SAI_Init+0x230>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d004      	beq.n	800ebd8 <HAL_SAI_Init+0xf8>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4a50      	ldr	r2, [pc, #320]	@ (800ed14 <HAL_SAI_Init+0x234>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d103      	bne.n	800ebe0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800ebd8:	4a4f      	ldr	r2, [pc, #316]	@ (800ed18 <HAL_SAI_Init+0x238>)
 800ebda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebdc:	6013      	str	r3, [r2, #0]
 800ebde:	e002      	b.n	800ebe6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ebe0:	4a4e      	ldr	r2, [pc, #312]	@ (800ed1c <HAL_SAI_Init+0x23c>)
 800ebe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebe4:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6a1b      	ldr	r3, [r3, #32]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d077      	beq.n	800ecde <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a47      	ldr	r2, [pc, #284]	@ (800ed10 <HAL_SAI_Init+0x230>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d004      	beq.n	800ec02 <HAL_SAI_Init+0x122>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a45      	ldr	r2, [pc, #276]	@ (800ed14 <HAL_SAI_Init+0x234>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d107      	bne.n	800ec12 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ec02:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ec06:	f04f 0100 	mov.w	r1, #0
 800ec0a:	f7fe f925 	bl	800ce58 <HAL_RCCEx_GetPeriphCLKFreq>
 800ec0e:	61b8      	str	r0, [r7, #24]
 800ec10:	e006      	b.n	800ec20 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ec12:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ec16:	f04f 0100 	mov.w	r1, #0
 800ec1a:	f7fe f91d 	bl	800ce58 <HAL_RCCEx_GetPeriphCLKFreq>
 800ec1e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	699b      	ldr	r3, [r3, #24]
 800ec24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ec28:	d120      	bne.n	800ec6c <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec2e:	2b04      	cmp	r3, #4
 800ec30:	d102      	bne.n	800ec38 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800ec32:	2340      	movs	r3, #64	@ 0x40
 800ec34:	613b      	str	r3, [r7, #16]
 800ec36:	e00a      	b.n	800ec4e <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec3c:	2b08      	cmp	r3, #8
 800ec3e:	d103      	bne.n	800ec48 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800ec40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ec44:	613b      	str	r3, [r7, #16]
 800ec46:	e002      	b.n	800ec4e <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec4c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800ec4e:	69ba      	ldr	r2, [r7, #24]
 800ec50:	4613      	mov	r3, r2
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	4413      	add	r3, r2
 800ec56:	005b      	lsls	r3, r3, #1
 800ec58:	4619      	mov	r1, r3
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6a1b      	ldr	r3, [r3, #32]
 800ec5e:	693a      	ldr	r2, [r7, #16]
 800ec60:	fb02 f303 	mul.w	r3, r2, r3
 800ec64:	fbb1 f3f3 	udiv	r3, r1, r3
 800ec68:	617b      	str	r3, [r7, #20]
 800ec6a:	e017      	b.n	800ec9c <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ec74:	d101      	bne.n	800ec7a <HAL_SAI_Init+0x19a>
 800ec76:	2302      	movs	r3, #2
 800ec78:	e000      	b.n	800ec7c <HAL_SAI_Init+0x19c>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ec7e:	69ba      	ldr	r2, [r7, #24]
 800ec80:	4613      	mov	r3, r2
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	4413      	add	r3, r2
 800ec86:	005b      	lsls	r3, r3, #1
 800ec88:	4619      	mov	r1, r3
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6a1b      	ldr	r3, [r3, #32]
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	fb02 f303 	mul.w	r3, r2, r3
 800ec94:	021b      	lsls	r3, r3, #8
 800ec96:	fbb1 f3f3 	udiv	r3, r1, r3
 800ec9a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	4a20      	ldr	r2, [pc, #128]	@ (800ed20 <HAL_SAI_Init+0x240>)
 800eca0:	fba2 2303 	umull	r2, r3, r2, r3
 800eca4:	08da      	lsrs	r2, r3, #3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ecaa:	6979      	ldr	r1, [r7, #20]
 800ecac:	4b1c      	ldr	r3, [pc, #112]	@ (800ed20 <HAL_SAI_Init+0x240>)
 800ecae:	fba3 2301 	umull	r2, r3, r3, r1
 800ecb2:	08da      	lsrs	r2, r3, #3
 800ecb4:	4613      	mov	r3, r2
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	4413      	add	r3, r2
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	1aca      	subs	r2, r1, r3
 800ecbe:	2a08      	cmp	r2, #8
 800ecc0:	d904      	bls.n	800eccc <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecd0:	2b04      	cmp	r3, #4
 800ecd2:	d104      	bne.n	800ecde <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecd8:	085a      	lsrs	r2, r3, #1
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d003      	beq.n	800ecee <HAL_SAI_Init+0x20e>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	d109      	bne.n	800ed02 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d101      	bne.n	800ecfa <HAL_SAI_Init+0x21a>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	e001      	b.n	800ecfe <HAL_SAI_Init+0x21e>
 800ecfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ecfe:	623b      	str	r3, [r7, #32]
 800ed00:	e012      	b.n	800ed28 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d10c      	bne.n	800ed24 <HAL_SAI_Init+0x244>
 800ed0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ed0e:	e00a      	b.n	800ed26 <HAL_SAI_Init+0x246>
 800ed10:	40015404 	.word	0x40015404
 800ed14:	40015424 	.word	0x40015424
 800ed18:	40015400 	.word	0x40015400
 800ed1c:	40015800 	.word	0x40015800
 800ed20:	cccccccd 	.word	0xcccccccd
 800ed24:	2300      	movs	r3, #0
 800ed26:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6819      	ldr	r1, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	4b59      	ldr	r3, [pc, #356]	@ (800ee98 <HAL_SAI_Init+0x3b8>)
 800ed34:	400b      	ands	r3, r1
 800ed36:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	6819      	ldr	r1, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	685a      	ldr	r2, [r3, #4]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed46:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ed4c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed52:	431a      	orrs	r2, r3
 800ed54:	6a3b      	ldr	r3, [r7, #32]
 800ed56:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800ed60:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	695b      	ldr	r3, [r3, #20]
 800ed66:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ed6c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed72:	051b      	lsls	r3, r3, #20
 800ed74:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ed7a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	691b      	ldr	r3, [r3, #16]
 800ed80:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	430a      	orrs	r2, r1
 800ed88:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	6812      	ldr	r2, [r2, #0]
 800ed94:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ed98:	f023 030f 	bic.w	r3, r3, #15
 800ed9c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	6859      	ldr	r1, [r3, #4]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	69da      	ldr	r2, [r3, #28]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edac:	431a      	orrs	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb2:	431a      	orrs	r2, r3
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	430a      	orrs	r2, r1
 800edba:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	6899      	ldr	r1, [r3, #8]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	4b35      	ldr	r3, [pc, #212]	@ (800ee9c <HAL_SAI_Init+0x3bc>)
 800edc8:	400b      	ands	r3, r1
 800edca:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	6899      	ldr	r1, [r3, #8]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edd6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800eddc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800ede2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800ede8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edee:	3b01      	subs	r3, #1
 800edf0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800edf2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	430a      	orrs	r2, r1
 800edfa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	68d9      	ldr	r1, [r3, #12]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800ee0a:	400b      	ands	r3, r1
 800ee0c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68d9      	ldr	r1, [r3, #12]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee1c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee22:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ee24:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	021b      	lsls	r3, r3, #8
 800ee2e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	430a      	orrs	r2, r1
 800ee36:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4a18      	ldr	r2, [pc, #96]	@ (800eea0 <HAL_SAI_Init+0x3c0>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d119      	bne.n	800ee76 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ee42:	4b18      	ldr	r3, [pc, #96]	@ (800eea4 <HAL_SAI_Init+0x3c4>)
 800ee44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee46:	4a17      	ldr	r2, [pc, #92]	@ (800eea4 <HAL_SAI_Init+0x3c4>)
 800ee48:	f023 0301 	bic.w	r3, r3, #1
 800ee4c:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d10e      	bne.n	800ee76 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee60:	3b01      	subs	r3, #1
 800ee62:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ee64:	490f      	ldr	r1, [pc, #60]	@ (800eea4 <HAL_SAI_Init+0x3c4>)
 800ee66:	4313      	orrs	r3, r2
 800ee68:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800ee6a:	4b0e      	ldr	r3, [pc, #56]	@ (800eea4 <HAL_SAI_Init+0x3c4>)
 800ee6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee6e:	4a0d      	ldr	r2, [pc, #52]	@ (800eea4 <HAL_SAI_Init+0x3c4>)
 800ee70:	f043 0301 	orr.w	r3, r3, #1
 800ee74:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800ee8e:	2300      	movs	r3, #0
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3728      	adds	r7, #40	@ 0x28
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	f005c010 	.word	0xf005c010
 800ee9c:	fff88000 	.word	0xfff88000
 800eea0:	40015404 	.word	0x40015404
 800eea4:	40015400 	.word	0x40015400

0800eea8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b088      	sub	sp, #32
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800eeb6:	f7f4 fb39 	bl	800352c <HAL_GetTick>
 800eeba:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d002      	beq.n	800eec8 <HAL_SAI_Transmit_DMA+0x20>
 800eec2:	88fb      	ldrh	r3, [r7, #6]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d101      	bne.n	800eecc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800eec8:	2301      	movs	r3, #1
 800eeca:	e0e4      	b.n	800f096 <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	f040 80dd 	bne.w	800f094 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d101      	bne.n	800eee8 <HAL_SAI_Transmit_DMA+0x40>
 800eee4:	2302      	movs	r3, #2
 800eee6:	e0d6      	b.n	800f096 <HAL_SAI_Transmit_DMA+0x1ee>
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	88fa      	ldrh	r2, [r7, #6]
 800eefa:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	88fa      	ldrh	r2, [r7, #6]
 800ef02:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2212      	movs	r2, #18
 800ef12:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef1c:	4a60      	ldr	r2, [pc, #384]	@ (800f0a0 <HAL_SAI_Transmit_DMA+0x1f8>)
 800ef1e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef26:	4a5f      	ldr	r2, [pc, #380]	@ (800f0a4 <HAL_SAI_Transmit_DMA+0x1fc>)
 800ef28:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef30:	4a5d      	ldr	r2, [pc, #372]	@ (800f0a8 <HAL_SAI_Transmit_DMA+0x200>)
 800ef32:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef42:	2b40      	cmp	r3, #64	@ 0x40
 800ef44:	d106      	bne.n	800ef54 <HAL_SAI_Transmit_DMA+0xac>
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d102      	bne.n	800ef54 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800ef4e:	88fb      	ldrh	r3, [r7, #6]
 800ef50:	61bb      	str	r3, [r7, #24]
 800ef52:	e00a      	b.n	800ef6a <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef58:	2b80      	cmp	r3, #128	@ 0x80
 800ef5a:	d803      	bhi.n	800ef64 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800ef5c:	88fb      	ldrh	r3, [r7, #6]
 800ef5e:	005b      	lsls	r3, r3, #1
 800ef60:	61bb      	str	r3, [r7, #24]
 800ef62:	e002      	b.n	800ef6a <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800ef64:	88fb      	ldrh	r3, [r7, #6]
 800ef66:	009b      	lsls	r3, r3, #2
 800ef68:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d02d      	beq.n	800efd6 <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d021      	beq.n	800efca <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	69ba      	ldr	r2, [r7, #24]
 800ef92:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f103 021c 	add.w	r2, r3, #28
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7f7 ff52 	bl	8006e68 <HAL_DMAEx_List_Start_IT>
 800efc4:	4603      	mov	r3, r0
 800efc6:	77fb      	strb	r3, [r7, #31]
 800efc8:	e014      	b.n	800eff4 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2200      	movs	r2, #0
 800efce:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800efd2:	2301      	movs	r3, #1
 800efd4:	e05f      	b.n	800f096 <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800efe0:	4619      	mov	r1, r3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	331c      	adds	r3, #28
 800efe8:	461a      	mov	r2, r3
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	f7f6 ffaa 	bl	8005f44 <HAL_DMA_Start_IT>
 800eff0:	4603      	mov	r3, r0
 800eff2:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800eff4:	7ffb      	ldrb	r3, [r7, #31]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d005      	beq.n	800f006 <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2200      	movs	r2, #0
 800effe:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800f002:	2301      	movs	r3, #1
 800f004:	e047      	b.n	800f096 <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f006:	2100      	movs	r1, #0
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f000 fa6d 	bl	800f4e8 <SAI_InterruptFlag>
 800f00e:	4601      	mov	r1, r0
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	691a      	ldr	r2, [r3, #16]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	430a      	orrs	r2, r1
 800f01c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f02c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f02e:	e015      	b.n	800f05c <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f030:	f7f4 fa7c 	bl	800352c <HAL_GetTick>
 800f034:	4602      	mov	r2, r0
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	1ad3      	subs	r3, r2, r3
 800f03a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f03e:	d90d      	bls.n	800f05c <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f046:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800f058:	2303      	movs	r3, #3
 800f05a:	e01c      	b.n	800f096 <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	695b      	ldr	r3, [r3, #20]
 800f062:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f066:	2b00      	cmp	r3, #0
 800f068:	d0e2      	beq.n	800f030 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f074:	2b00      	cmp	r3, #0
 800f076:	d107      	bne.n	800f088 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f086:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800f090:	2300      	movs	r3, #0
 800f092:	e000      	b.n	800f096 <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800f094:	2302      	movs	r3, #2
  }
}
 800f096:	4618      	mov	r0, r3
 800f098:	3720      	adds	r7, #32
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	0800f62b 	.word	0x0800f62b
 800f0a4:	0800f5cd 	.word	0x0800f5cd
 800f0a8:	0800f6c1 	.word	0x0800f6c1

0800f0ac <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d002      	beq.n	800f0c6 <HAL_SAI_Receive_DMA+0x1a>
 800f0c0:	88fb      	ldrh	r3, [r7, #6]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d101      	bne.n	800f0ca <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e0c6      	b.n	800f258 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	f040 80bf 	bne.w	800f256 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d101      	bne.n	800f0e6 <HAL_SAI_Receive_DMA+0x3a>
 800f0e2:	2302      	movs	r3, #2
 800f0e4:	e0b8      	b.n	800f258 <HAL_SAI_Receive_DMA+0x1ac>
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	68ba      	ldr	r2, [r7, #8]
 800f0f2:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	88fa      	ldrh	r2, [r7, #6]
 800f0f8:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	88fa      	ldrh	r2, [r7, #6]
 800f100:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2200      	movs	r2, #0
 800f108:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2222      	movs	r2, #34	@ 0x22
 800f110:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f11a:	4a51      	ldr	r2, [pc, #324]	@ (800f260 <HAL_SAI_Receive_DMA+0x1b4>)
 800f11c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f124:	4a4f      	ldr	r2, [pc, #316]	@ (800f264 <HAL_SAI_Receive_DMA+0x1b8>)
 800f126:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f12e:	4a4e      	ldr	r2, [pc, #312]	@ (800f268 <HAL_SAI_Receive_DMA+0x1bc>)
 800f130:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f138:	2200      	movs	r2, #0
 800f13a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f140:	2b40      	cmp	r3, #64	@ 0x40
 800f142:	d106      	bne.n	800f152 <HAL_SAI_Receive_DMA+0xa6>
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d102      	bne.n	800f152 <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800f14c:	88fb      	ldrh	r3, [r7, #6]
 800f14e:	613b      	str	r3, [r7, #16]
 800f150:	e00a      	b.n	800f168 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f156:	2b80      	cmp	r3, #128	@ 0x80
 800f158:	d803      	bhi.n	800f162 <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800f15a:	88fb      	ldrh	r3, [r7, #6]
 800f15c:	005b      	lsls	r3, r3, #1
 800f15e:	613b      	str	r3, [r7, #16]
 800f160:	e002      	b.n	800f168 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800f162:	88fb      	ldrh	r3, [r7, #6]
 800f164:	009b      	lsls	r3, r3, #2
 800f166:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f16e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f174:	2b00      	cmp	r3, #0
 800f176:	d02d      	beq.n	800f1d4 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f17e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f180:	2b00      	cmp	r3, #0
 800f182:	d021      	beq.n	800f1c8 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f18a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	693a      	ldr	r2, [r7, #16]
 800f190:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f103 021c 	add.w	r2, r3, #28
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7f7 fe53 	bl	8006e68 <HAL_DMAEx_List_Start_IT>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	75fb      	strb	r3, [r7, #23]
 800f1c6:	e014      	b.n	800f1f2 <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	e041      	b.n	800f258 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	331c      	adds	r3, #28
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	f7f6 feab 	bl	8005f44 <HAL_DMA_Start_IT>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800f1f2:	7dfb      	ldrb	r3, [r7, #23]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d005      	beq.n	800f204 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800f200:	2301      	movs	r3, #1
 800f202:	e029      	b.n	800f258 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f204:	2100      	movs	r1, #0
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f000 f96e 	bl	800f4e8 <SAI_InterruptFlag>
 800f20c:	4601      	mov	r1, r0
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	691a      	ldr	r2, [r3, #16]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	430a      	orrs	r2, r1
 800f21a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f22a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f236:	2b00      	cmp	r3, #0
 800f238:	d107      	bne.n	800f24a <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f248:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800f252:	2300      	movs	r3, #0
 800f254:	e000      	b.n	800f258 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800f256:	2302      	movs	r3, #2
  }
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3718      	adds	r7, #24
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	0800f6a5 	.word	0x0800f6a5
 800f264:	0800f647 	.word	0x0800f647
 800f268:	0800f6c1 	.word	0x0800f6c1

0800f26c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800f274:	bf00      	nop
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f280:	b480      	push	{r7}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
 800f28c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f28e:	2300      	movs	r3, #0
 800f290:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2200      	movs	r2, #0
 800f296:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2200      	movs	r2, #0
 800f29c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d003      	beq.n	800f2ae <SAI_InitI2S+0x2e>
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	2b02      	cmp	r3, #2
 800f2ac:	d103      	bne.n	800f2b6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	651a      	str	r2, [r3, #80]	@ 0x50
 800f2b4:	e002      	b.n	800f2bc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f2c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2ca:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	683a      	ldr	r2, [r7, #0]
 800f2d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	f003 0301 	and.w	r3, r3, #1
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e077      	b.n	800f3d6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d107      	bne.n	800f2fc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f2f8:	665a      	str	r2, [r3, #100]	@ 0x64
 800f2fa:	e006      	b.n	800f30a <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f302:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2200      	movs	r2, #0
 800f308:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2b03      	cmp	r3, #3
 800f30e:	d84f      	bhi.n	800f3b0 <SAI_InitI2S+0x130>
 800f310:	a201      	add	r2, pc, #4	@ (adr r2, 800f318 <SAI_InitI2S+0x98>)
 800f312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f316:	bf00      	nop
 800f318:	0800f329 	.word	0x0800f329
 800f31c:	0800f34b 	.word	0x0800f34b
 800f320:	0800f36d 	.word	0x0800f36d
 800f324:	0800f38f 	.word	0x0800f38f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2280      	movs	r2, #128	@ 0x80
 800f32c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	085b      	lsrs	r3, r3, #1
 800f332:	015a      	lsls	r2, r3, #5
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	085b      	lsrs	r3, r3, #1
 800f33c:	011a      	lsls	r2, r3, #4
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2240      	movs	r2, #64	@ 0x40
 800f346:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f348:	e035      	b.n	800f3b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2280      	movs	r2, #128	@ 0x80
 800f34e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	085b      	lsrs	r3, r3, #1
 800f354:	019a      	lsls	r2, r3, #6
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	085b      	lsrs	r3, r3, #1
 800f35e:	015a      	lsls	r2, r3, #5
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2280      	movs	r2, #128	@ 0x80
 800f368:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f36a:	e024      	b.n	800f3b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	22c0      	movs	r2, #192	@ 0xc0
 800f370:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	085b      	lsrs	r3, r3, #1
 800f376:	019a      	lsls	r2, r3, #6
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	085b      	lsrs	r3, r3, #1
 800f380:	015a      	lsls	r2, r3, #5
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2280      	movs	r2, #128	@ 0x80
 800f38a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f38c:	e013      	b.n	800f3b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	22e0      	movs	r2, #224	@ 0xe0
 800f392:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	085b      	lsrs	r3, r3, #1
 800f398:	019a      	lsls	r2, r3, #6
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	085b      	lsrs	r3, r3, #1
 800f3a2:	015a      	lsls	r2, r3, #5
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2280      	movs	r2, #128	@ 0x80
 800f3ac:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f3ae:	e002      	b.n	800f3b6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	75fb      	strb	r3, [r7, #23]
      break;
 800f3b4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	2b02      	cmp	r3, #2
 800f3ba:	d10b      	bne.n	800f3d4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	d102      	bne.n	800f3c8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2210      	movs	r2, #16
 800f3c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2b02      	cmp	r3, #2
 800f3cc:	d102      	bne.n	800f3d4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2208      	movs	r2, #8
 800f3d2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800f3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	371c      	adds	r7, #28
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop

0800f3e4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b087      	sub	sp, #28
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
 800f3f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2200      	movs	r2, #0
 800f400:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d003      	beq.n	800f412 <SAI_InitPCM+0x2e>
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	2b02      	cmp	r3, #2
 800f410:	d103      	bne.n	800f41a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2201      	movs	r2, #1
 800f416:	651a      	str	r2, [r3, #80]	@ 0x50
 800f418:	e002      	b.n	800f420 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2200      	movs	r2, #0
 800f41e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2200      	movs	r2, #0
 800f424:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f42c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f434:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2200      	movs	r2, #0
 800f43a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f448:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	2b04      	cmp	r3, #4
 800f44e:	d103      	bne.n	800f458 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2201      	movs	r2, #1
 800f454:	659a      	str	r2, [r3, #88]	@ 0x58
 800f456:	e002      	b.n	800f45e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	220d      	movs	r2, #13
 800f45c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2b03      	cmp	r3, #3
 800f462:	d837      	bhi.n	800f4d4 <SAI_InitPCM+0xf0>
 800f464:	a201      	add	r2, pc, #4	@ (adr r2, 800f46c <SAI_InitPCM+0x88>)
 800f466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f46a:	bf00      	nop
 800f46c:	0800f47d 	.word	0x0800f47d
 800f470:	0800f493 	.word	0x0800f493
 800f474:	0800f4a9 	.word	0x0800f4a9
 800f478:	0800f4bf 	.word	0x0800f4bf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2280      	movs	r2, #128	@ 0x80
 800f480:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	011a      	lsls	r2, r3, #4
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2240      	movs	r2, #64	@ 0x40
 800f48e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f490:	e023      	b.n	800f4da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2280      	movs	r2, #128	@ 0x80
 800f496:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	015a      	lsls	r2, r3, #5
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2280      	movs	r2, #128	@ 0x80
 800f4a4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f4a6:	e018      	b.n	800f4da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	22c0      	movs	r2, #192	@ 0xc0
 800f4ac:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	015a      	lsls	r2, r3, #5
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2280      	movs	r2, #128	@ 0x80
 800f4ba:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f4bc:	e00d      	b.n	800f4da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	22e0      	movs	r2, #224	@ 0xe0
 800f4c2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	015a      	lsls	r2, r3, #5
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2280      	movs	r2, #128	@ 0x80
 800f4d0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f4d2:	e002      	b.n	800f4da <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	75fb      	strb	r3, [r7, #23]
      break;
 800f4d8:	bf00      	nop
  }

  return status;
 800f4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	371c      	adds	r7, #28
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b085      	sub	sp, #20
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f4f8:	78fb      	ldrb	r3, [r7, #3]
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d103      	bne.n	800f506 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f043 0308 	orr.w	r3, r3, #8
 800f504:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f50a:	2b08      	cmp	r3, #8
 800f50c:	d10b      	bne.n	800f526 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f512:	2b03      	cmp	r3, #3
 800f514:	d003      	beq.n	800f51e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d103      	bne.n	800f526 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	f043 0310 	orr.w	r3, r3, #16
 800f524:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	2b03      	cmp	r3, #3
 800f52c:	d003      	beq.n	800f536 <SAI_InterruptFlag+0x4e>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	2b02      	cmp	r3, #2
 800f534:	d104      	bne.n	800f540 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f53c:	60fb      	str	r3, [r7, #12]
 800f53e:	e003      	b.n	800f548 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f043 0304 	orr.w	r3, r3, #4
 800f546:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f548:	68fb      	ldr	r3, [r7, #12]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
	...

0800f558 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f558:	b480      	push	{r7}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f560:	4b18      	ldr	r3, [pc, #96]	@ (800f5c4 <SAI_Disable+0x6c>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	4a18      	ldr	r2, [pc, #96]	@ (800f5c8 <SAI_Disable+0x70>)
 800f566:	fba2 2303 	umull	r2, r3, r2, r3
 800f56a:	0b1b      	lsrs	r3, r3, #12
 800f56c:	009b      	lsls	r3, r3, #2
 800f56e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f570:	2300      	movs	r3, #0
 800f572:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f582:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d10a      	bne.n	800f5a0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f590:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800f59a:	2303      	movs	r3, #3
 800f59c:	72fb      	strb	r3, [r7, #11]
      break;
 800f59e:	e009      	b.n	800f5b4 <SAI_Disable+0x5c>
    }
    count--;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	3b01      	subs	r3, #1
 800f5a4:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d1e7      	bne.n	800f584 <SAI_Disable+0x2c>

  return status;
 800f5b4:	7afb      	ldrb	r3, [r7, #11]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3714      	adds	r7, #20
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	20000028 	.word	0x20000028
 800f5c8:	95cbec1b 	.word	0x95cbec1b

0800f5cc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f5d8:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5de:	2b81      	cmp	r3, #129	@ 0x81
 800f5e0:	d01c      	beq.n	800f61c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f5f8:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f7ff ff73 	bl	800f4e8 <SAI_InterruptFlag>
 800f602:	4603      	mov	r3, r0
 800f604:	43d9      	mvns	r1, r3
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	691a      	ldr	r2, [r3, #16]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	400a      	ands	r2, r1
 800f612:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2201      	movs	r2, #1
 800f618:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f7f2 fce3 	bl	8001fe8 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f622:	bf00      	nop
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b084      	sub	sp, #16
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f636:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f7f2 fcbf 	bl	8001fbc <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f63e:	bf00      	nop
 800f640:	3710      	adds	r7, #16
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f646:	b580      	push	{r7, lr}
 800f648:	b084      	sub	sp, #16
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f652:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f658:	2b81      	cmp	r3, #129	@ 0x81
 800f65a:	d01c      	beq.n	800f696 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f66a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2200      	movs	r2, #0
 800f670:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f674:	2100      	movs	r1, #0
 800f676:	68f8      	ldr	r0, [r7, #12]
 800f678:	f7ff ff36 	bl	800f4e8 <SAI_InterruptFlag>
 800f67c:	4603      	mov	r3, r0
 800f67e:	43d9      	mvns	r1, r3
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	691a      	ldr	r2, [r3, #16]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	400a      	ands	r2, r1
 800f68c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2201      	movs	r2, #1
 800f692:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f7f2 fc7a 	bl	8001f90 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f69c:	bf00      	nop
 800f69e:	3710      	adds	r7, #16
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f6b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f6b2:	68f8      	ldr	r0, [r7, #12]
 800f6b4:	f7f2 fc56 	bl	8001f64 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f6b8:	bf00      	nop
 800f6ba:	3710      	adds	r7, #16
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f6cc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f6d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f6ec:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f7ff ff32 	bl	800f558 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2200      	movs	r2, #0
 800f700:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f7ff fdb1 	bl	800f26c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f70a:	bf00      	nop
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}

0800f712 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f712:	b580      	push	{r7, lr}
 800f714:	b082      	sub	sp, #8
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d101      	bne.n	800f724 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f720:	2301      	movs	r3, #1
 800f722:	e049      	b.n	800f7b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d106      	bne.n	800f73e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f7f3 fa0b 	bl	8002b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2202      	movs	r2, #2
 800f742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	3304      	adds	r3, #4
 800f74e:	4619      	mov	r1, r3
 800f750:	4610      	mov	r0, r2
 800f752:	f000 fb3b 	bl	800fdcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2201      	movs	r2, #1
 800f75a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2201      	movs	r2, #1
 800f762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2201      	movs	r2, #1
 800f76a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2201      	movs	r2, #1
 800f772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2201      	movs	r2, #1
 800f77a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2201      	movs	r2, #1
 800f782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2201      	movs	r2, #1
 800f78a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2201      	movs	r2, #1
 800f792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2201      	movs	r2, #1
 800f79a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f7b6:	2300      	movs	r3, #0
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d001      	beq.n	800f7d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	e06a      	b.n	800f8ae <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2202      	movs	r2, #2
 800f7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4a35      	ldr	r2, [pc, #212]	@ (800f8bc <HAL_TIM_Base_Start+0xfc>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d040      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4a34      	ldr	r2, [pc, #208]	@ (800f8c0 <HAL_TIM_Base_Start+0x100>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d03b      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7fc:	d036      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f806:	d031      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a2d      	ldr	r2, [pc, #180]	@ (800f8c4 <HAL_TIM_Base_Start+0x104>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d02c      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	4a2c      	ldr	r2, [pc, #176]	@ (800f8c8 <HAL_TIM_Base_Start+0x108>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d027      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	4a2a      	ldr	r2, [pc, #168]	@ (800f8cc <HAL_TIM_Base_Start+0x10c>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d022      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4a29      	ldr	r2, [pc, #164]	@ (800f8d0 <HAL_TIM_Base_Start+0x110>)
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d01d      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	4a27      	ldr	r2, [pc, #156]	@ (800f8d4 <HAL_TIM_Base_Start+0x114>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d018      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a26      	ldr	r2, [pc, #152]	@ (800f8d8 <HAL_TIM_Base_Start+0x118>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d013      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a24      	ldr	r2, [pc, #144]	@ (800f8dc <HAL_TIM_Base_Start+0x11c>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d00e      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4a23      	ldr	r2, [pc, #140]	@ (800f8e0 <HAL_TIM_Base_Start+0x120>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d009      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4a21      	ldr	r2, [pc, #132]	@ (800f8e4 <HAL_TIM_Base_Start+0x124>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d004      	beq.n	800f86c <HAL_TIM_Base_Start+0xac>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4a20      	ldr	r2, [pc, #128]	@ (800f8e8 <HAL_TIM_Base_Start+0x128>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d115      	bne.n	800f898 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	689a      	ldr	r2, [r3, #8]
 800f872:	4b1e      	ldr	r3, [pc, #120]	@ (800f8ec <HAL_TIM_Base_Start+0x12c>)
 800f874:	4013      	ands	r3, r2
 800f876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2b06      	cmp	r3, #6
 800f87c:	d015      	beq.n	800f8aa <HAL_TIM_Base_Start+0xea>
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f884:	d011      	beq.n	800f8aa <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f042 0201 	orr.w	r2, r2, #1
 800f894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f896:	e008      	b.n	800f8aa <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f042 0201 	orr.w	r2, r2, #1
 800f8a6:	601a      	str	r2, [r3, #0]
 800f8a8:	e000      	b.n	800f8ac <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f8ac:	2300      	movs	r3, #0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3714      	adds	r7, #20
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	40012c00 	.word	0x40012c00
 800f8c0:	50012c00 	.word	0x50012c00
 800f8c4:	40000400 	.word	0x40000400
 800f8c8:	50000400 	.word	0x50000400
 800f8cc:	40000800 	.word	0x40000800
 800f8d0:	50000800 	.word	0x50000800
 800f8d4:	40000c00 	.word	0x40000c00
 800f8d8:	50000c00 	.word	0x50000c00
 800f8dc:	40013400 	.word	0x40013400
 800f8e0:	50013400 	.word	0x50013400
 800f8e4:	40014000 	.word	0x40014000
 800f8e8:	50014000 	.word	0x50014000
 800f8ec:	00010007 	.word	0x00010007

0800f8f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e049      	b.n	800f996 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d106      	bne.n	800f91c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f7f3 f8fa 	bl	8002b10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2202      	movs	r2, #2
 800f920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	3304      	adds	r3, #4
 800f92c:	4619      	mov	r1, r3
 800f92e:	4610      	mov	r0, r2
 800f930:	f000 fa4c 	bl	800fdcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2201      	movs	r2, #1
 800f938:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2201      	movs	r2, #1
 800f940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2201      	movs	r2, #1
 800f948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2201      	movs	r2, #1
 800f950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2201      	movs	r2, #1
 800f958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2201      	movs	r2, #1
 800f968:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2201      	movs	r2, #1
 800f978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2201      	movs	r2, #1
 800f980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2201      	movs	r2, #1
 800f988:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2201      	movs	r2, #1
 800f990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f994:	2300      	movs	r3, #0
}
 800f996:	4618      	mov	r0, r3
 800f998:	3708      	adds	r7, #8
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
	...

0800f9a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b086      	sub	sp, #24
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d101      	bne.n	800f9be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f9ba:	2302      	movs	r3, #2
 800f9bc:	e0ff      	b.n	800fbbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b14      	cmp	r3, #20
 800f9ca:	f200 80f0 	bhi.w	800fbae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800f9d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d4:	0800fa29 	.word	0x0800fa29
 800f9d8:	0800fbaf 	.word	0x0800fbaf
 800f9dc:	0800fbaf 	.word	0x0800fbaf
 800f9e0:	0800fbaf 	.word	0x0800fbaf
 800f9e4:	0800fa69 	.word	0x0800fa69
 800f9e8:	0800fbaf 	.word	0x0800fbaf
 800f9ec:	0800fbaf 	.word	0x0800fbaf
 800f9f0:	0800fbaf 	.word	0x0800fbaf
 800f9f4:	0800faab 	.word	0x0800faab
 800f9f8:	0800fbaf 	.word	0x0800fbaf
 800f9fc:	0800fbaf 	.word	0x0800fbaf
 800fa00:	0800fbaf 	.word	0x0800fbaf
 800fa04:	0800faeb 	.word	0x0800faeb
 800fa08:	0800fbaf 	.word	0x0800fbaf
 800fa0c:	0800fbaf 	.word	0x0800fbaf
 800fa10:	0800fbaf 	.word	0x0800fbaf
 800fa14:	0800fb2d 	.word	0x0800fb2d
 800fa18:	0800fbaf 	.word	0x0800fbaf
 800fa1c:	0800fbaf 	.word	0x0800fbaf
 800fa20:	0800fbaf 	.word	0x0800fbaf
 800fa24:	0800fb6d 	.word	0x0800fb6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	68b9      	ldr	r1, [r7, #8]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 fad2 	bl	800ffd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	699a      	ldr	r2, [r3, #24]
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f042 0208 	orr.w	r2, r2, #8
 800fa42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	699a      	ldr	r2, [r3, #24]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f022 0204 	bic.w	r2, r2, #4
 800fa52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	6999      	ldr	r1, [r3, #24]
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	691a      	ldr	r2, [r3, #16]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	430a      	orrs	r2, r1
 800fa64:	619a      	str	r2, [r3, #24]
      break;
 800fa66:	e0a5      	b.n	800fbb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	68b9      	ldr	r1, [r7, #8]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 fb74 	bl	801015c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	699a      	ldr	r2, [r3, #24]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fa82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	699a      	ldr	r2, [r3, #24]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fa92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	6999      	ldr	r1, [r3, #24]
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	691b      	ldr	r3, [r3, #16]
 800fa9e:	021a      	lsls	r2, r3, #8
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	430a      	orrs	r2, r1
 800faa6:	619a      	str	r2, [r3, #24]
      break;
 800faa8:	e084      	b.n	800fbb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	68b9      	ldr	r1, [r7, #8]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f000 fc03 	bl	80102bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	69da      	ldr	r2, [r3, #28]
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f042 0208 	orr.w	r2, r2, #8
 800fac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	69da      	ldr	r2, [r3, #28]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f022 0204 	bic.w	r2, r2, #4
 800fad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	69d9      	ldr	r1, [r3, #28]
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	691a      	ldr	r2, [r3, #16]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	430a      	orrs	r2, r1
 800fae6:	61da      	str	r2, [r3, #28]
      break;
 800fae8:	e064      	b.n	800fbb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	68b9      	ldr	r1, [r7, #8]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f000 fc91 	bl	8010418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	69da      	ldr	r2, [r3, #28]
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fb04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	69da      	ldr	r2, [r3, #28]
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fb14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	69d9      	ldr	r1, [r3, #28]
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	691b      	ldr	r3, [r3, #16]
 800fb20:	021a      	lsls	r2, r3, #8
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	430a      	orrs	r2, r1
 800fb28:	61da      	str	r2, [r3, #28]
      break;
 800fb2a:	e043      	b.n	800fbb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	68b9      	ldr	r1, [r7, #8]
 800fb32:	4618      	mov	r0, r3
 800fb34:	f000 fd20 	bl	8010578 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f042 0208 	orr.w	r2, r2, #8
 800fb46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f022 0204 	bic.w	r2, r2, #4
 800fb56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	691a      	ldr	r2, [r3, #16]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	430a      	orrs	r2, r1
 800fb68:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800fb6a:	e023      	b.n	800fbb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	68b9      	ldr	r1, [r7, #8]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f000 fd82 	bl	801067c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fb86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fb96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	691b      	ldr	r3, [r3, #16]
 800fba2:	021a      	lsls	r2, r3, #8
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	430a      	orrs	r2, r1
 800fbaa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800fbac:	e002      	b.n	800fbb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	75fb      	strb	r3, [r7, #23]
      break;
 800fbb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fbbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3718      	adds	r7, #24
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop

0800fbc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d101      	bne.n	800fbe4 <HAL_TIM_ConfigClockSource+0x1c>
 800fbe0:	2302      	movs	r3, #2
 800fbe2:	e0e6      	b.n	800fdb2 <HAL_TIM_ConfigClockSource+0x1ea>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2202      	movs	r2, #2
 800fbf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	689b      	ldr	r3, [r3, #8]
 800fbfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800fc02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fc06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fc0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	68ba      	ldr	r2, [r7, #8]
 800fc16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4a67      	ldr	r2, [pc, #412]	@ (800fdbc <HAL_TIM_ConfigClockSource+0x1f4>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	f000 80b1 	beq.w	800fd86 <HAL_TIM_ConfigClockSource+0x1be>
 800fc24:	4a65      	ldr	r2, [pc, #404]	@ (800fdbc <HAL_TIM_ConfigClockSource+0x1f4>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	f200 80b6 	bhi.w	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fc2c:	4a64      	ldr	r2, [pc, #400]	@ (800fdc0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	f000 80a9 	beq.w	800fd86 <HAL_TIM_ConfigClockSource+0x1be>
 800fc34:	4a62      	ldr	r2, [pc, #392]	@ (800fdc0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	f200 80ae 	bhi.w	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fc3c:	4a61      	ldr	r2, [pc, #388]	@ (800fdc4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	f000 80a1 	beq.w	800fd86 <HAL_TIM_ConfigClockSource+0x1be>
 800fc44:	4a5f      	ldr	r2, [pc, #380]	@ (800fdc4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	f200 80a6 	bhi.w	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fc4c:	4a5e      	ldr	r2, [pc, #376]	@ (800fdc8 <HAL_TIM_ConfigClockSource+0x200>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	f000 8099 	beq.w	800fd86 <HAL_TIM_ConfigClockSource+0x1be>
 800fc54:	4a5c      	ldr	r2, [pc, #368]	@ (800fdc8 <HAL_TIM_ConfigClockSource+0x200>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	f200 809e 	bhi.w	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fc5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fc60:	f000 8091 	beq.w	800fd86 <HAL_TIM_ConfigClockSource+0x1be>
 800fc64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fc68:	f200 8096 	bhi.w	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fc6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc70:	f000 8089 	beq.w	800fd86 <HAL_TIM_ConfigClockSource+0x1be>
 800fc74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc78:	f200 808e 	bhi.w	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fc7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fc80:	d03e      	beq.n	800fd00 <HAL_TIM_ConfigClockSource+0x138>
 800fc82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fc86:	f200 8087 	bhi.w	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fc8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fc8e:	f000 8086 	beq.w	800fd9e <HAL_TIM_ConfigClockSource+0x1d6>
 800fc92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fc96:	d87f      	bhi.n	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fc98:	2b70      	cmp	r3, #112	@ 0x70
 800fc9a:	d01a      	beq.n	800fcd2 <HAL_TIM_ConfigClockSource+0x10a>
 800fc9c:	2b70      	cmp	r3, #112	@ 0x70
 800fc9e:	d87b      	bhi.n	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fca0:	2b60      	cmp	r3, #96	@ 0x60
 800fca2:	d050      	beq.n	800fd46 <HAL_TIM_ConfigClockSource+0x17e>
 800fca4:	2b60      	cmp	r3, #96	@ 0x60
 800fca6:	d877      	bhi.n	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fca8:	2b50      	cmp	r3, #80	@ 0x50
 800fcaa:	d03c      	beq.n	800fd26 <HAL_TIM_ConfigClockSource+0x15e>
 800fcac:	2b50      	cmp	r3, #80	@ 0x50
 800fcae:	d873      	bhi.n	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fcb0:	2b40      	cmp	r3, #64	@ 0x40
 800fcb2:	d058      	beq.n	800fd66 <HAL_TIM_ConfigClockSource+0x19e>
 800fcb4:	2b40      	cmp	r3, #64	@ 0x40
 800fcb6:	d86f      	bhi.n	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fcb8:	2b30      	cmp	r3, #48	@ 0x30
 800fcba:	d064      	beq.n	800fd86 <HAL_TIM_ConfigClockSource+0x1be>
 800fcbc:	2b30      	cmp	r3, #48	@ 0x30
 800fcbe:	d86b      	bhi.n	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fcc0:	2b20      	cmp	r3, #32
 800fcc2:	d060      	beq.n	800fd86 <HAL_TIM_ConfigClockSource+0x1be>
 800fcc4:	2b20      	cmp	r3, #32
 800fcc6:	d867      	bhi.n	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d05c      	beq.n	800fd86 <HAL_TIM_ConfigClockSource+0x1be>
 800fccc:	2b10      	cmp	r3, #16
 800fcce:	d05a      	beq.n	800fd86 <HAL_TIM_ConfigClockSource+0x1be>
 800fcd0:	e062      	b.n	800fd98 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fce2:	f000 fdcb 	bl	801087c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fcf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	609a      	str	r2, [r3, #8]
      break;
 800fcfe:	e04f      	b.n	800fda0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fd10:	f000 fdb4 	bl	801087c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	689a      	ldr	r2, [r3, #8]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fd22:	609a      	str	r2, [r3, #8]
      break;
 800fd24:	e03c      	b.n	800fda0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fd32:	461a      	mov	r2, r3
 800fd34:	f000 fd26 	bl	8010784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2150      	movs	r1, #80	@ 0x50
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f000 fd7f 	bl	8010842 <TIM_ITRx_SetConfig>
      break;
 800fd44:	e02c      	b.n	800fda0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fd52:	461a      	mov	r2, r3
 800fd54:	f000 fd45 	bl	80107e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2160      	movs	r1, #96	@ 0x60
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f000 fd6f 	bl	8010842 <TIM_ITRx_SetConfig>
      break;
 800fd64:	e01c      	b.n	800fda0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fd72:	461a      	mov	r2, r3
 800fd74:	f000 fd06 	bl	8010784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2140      	movs	r1, #64	@ 0x40
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f000 fd5f 	bl	8010842 <TIM_ITRx_SetConfig>
      break;
 800fd84:	e00c      	b.n	800fda0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4619      	mov	r1, r3
 800fd90:	4610      	mov	r0, r2
 800fd92:	f000 fd56 	bl	8010842 <TIM_ITRx_SetConfig>
      break;
 800fd96:	e003      	b.n	800fda0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	73fb      	strb	r3, [r7, #15]
      break;
 800fd9c:	e000      	b.n	800fda0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800fd9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2201      	movs	r2, #1
 800fda4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fdb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3710      	adds	r7, #16
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	00100070 	.word	0x00100070
 800fdc0:	00100040 	.word	0x00100040
 800fdc4:	00100030 	.word	0x00100030
 800fdc8:	00100020 	.word	0x00100020

0800fdcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b085      	sub	sp, #20
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	4a6e      	ldr	r2, [pc, #440]	@ (800ff98 <TIM_Base_SetConfig+0x1cc>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d02b      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	4a6d      	ldr	r2, [pc, #436]	@ (800ff9c <TIM_Base_SetConfig+0x1d0>)
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d027      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fdf2:	d023      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fdfa:	d01f      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4a68      	ldr	r2, [pc, #416]	@ (800ffa0 <TIM_Base_SetConfig+0x1d4>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d01b      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	4a67      	ldr	r2, [pc, #412]	@ (800ffa4 <TIM_Base_SetConfig+0x1d8>)
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d017      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	4a66      	ldr	r2, [pc, #408]	@ (800ffa8 <TIM_Base_SetConfig+0x1dc>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d013      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	4a65      	ldr	r2, [pc, #404]	@ (800ffac <TIM_Base_SetConfig+0x1e0>)
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d00f      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	4a64      	ldr	r2, [pc, #400]	@ (800ffb0 <TIM_Base_SetConfig+0x1e4>)
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d00b      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	4a63      	ldr	r2, [pc, #396]	@ (800ffb4 <TIM_Base_SetConfig+0x1e8>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d007      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	4a62      	ldr	r2, [pc, #392]	@ (800ffb8 <TIM_Base_SetConfig+0x1ec>)
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d003      	beq.n	800fe3c <TIM_Base_SetConfig+0x70>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4a61      	ldr	r2, [pc, #388]	@ (800ffbc <TIM_Base_SetConfig+0x1f0>)
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d108      	bne.n	800fe4e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	68fa      	ldr	r2, [r7, #12]
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4a51      	ldr	r2, [pc, #324]	@ (800ff98 <TIM_Base_SetConfig+0x1cc>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d043      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4a50      	ldr	r2, [pc, #320]	@ (800ff9c <TIM_Base_SetConfig+0x1d0>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d03f      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe64:	d03b      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fe6c:	d037      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4a4b      	ldr	r2, [pc, #300]	@ (800ffa0 <TIM_Base_SetConfig+0x1d4>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d033      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4a4a      	ldr	r2, [pc, #296]	@ (800ffa4 <TIM_Base_SetConfig+0x1d8>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d02f      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	4a49      	ldr	r2, [pc, #292]	@ (800ffa8 <TIM_Base_SetConfig+0x1dc>)
 800fe82:	4293      	cmp	r3, r2
 800fe84:	d02b      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	4a48      	ldr	r2, [pc, #288]	@ (800ffac <TIM_Base_SetConfig+0x1e0>)
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d027      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4a47      	ldr	r2, [pc, #284]	@ (800ffb0 <TIM_Base_SetConfig+0x1e4>)
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d023      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	4a46      	ldr	r2, [pc, #280]	@ (800ffb4 <TIM_Base_SetConfig+0x1e8>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d01f      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4a45      	ldr	r2, [pc, #276]	@ (800ffb8 <TIM_Base_SetConfig+0x1ec>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d01b      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4a44      	ldr	r2, [pc, #272]	@ (800ffbc <TIM_Base_SetConfig+0x1f0>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d017      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4a43      	ldr	r2, [pc, #268]	@ (800ffc0 <TIM_Base_SetConfig+0x1f4>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d013      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4a42      	ldr	r2, [pc, #264]	@ (800ffc4 <TIM_Base_SetConfig+0x1f8>)
 800feba:	4293      	cmp	r3, r2
 800febc:	d00f      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	4a41      	ldr	r2, [pc, #260]	@ (800ffc8 <TIM_Base_SetConfig+0x1fc>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d00b      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4a40      	ldr	r2, [pc, #256]	@ (800ffcc <TIM_Base_SetConfig+0x200>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d007      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4a3f      	ldr	r2, [pc, #252]	@ (800ffd0 <TIM_Base_SetConfig+0x204>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d003      	beq.n	800fede <TIM_Base_SetConfig+0x112>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4a3e      	ldr	r2, [pc, #248]	@ (800ffd4 <TIM_Base_SetConfig+0x208>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d108      	bne.n	800fef0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	68fa      	ldr	r2, [r7, #12]
 800feec:	4313      	orrs	r3, r2
 800feee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	695b      	ldr	r3, [r3, #20]
 800fefa:	4313      	orrs	r3, r2
 800fefc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	68fa      	ldr	r2, [r7, #12]
 800ff02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	689a      	ldr	r2, [r3, #8]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	4a20      	ldr	r2, [pc, #128]	@ (800ff98 <TIM_Base_SetConfig+0x1cc>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d023      	beq.n	800ff64 <TIM_Base_SetConfig+0x198>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ff9c <TIM_Base_SetConfig+0x1d0>)
 800ff20:	4293      	cmp	r3, r2
 800ff22:	d01f      	beq.n	800ff64 <TIM_Base_SetConfig+0x198>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4a24      	ldr	r2, [pc, #144]	@ (800ffb8 <TIM_Base_SetConfig+0x1ec>)
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	d01b      	beq.n	800ff64 <TIM_Base_SetConfig+0x198>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4a23      	ldr	r2, [pc, #140]	@ (800ffbc <TIM_Base_SetConfig+0x1f0>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d017      	beq.n	800ff64 <TIM_Base_SetConfig+0x198>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4a22      	ldr	r2, [pc, #136]	@ (800ffc0 <TIM_Base_SetConfig+0x1f4>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d013      	beq.n	800ff64 <TIM_Base_SetConfig+0x198>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4a21      	ldr	r2, [pc, #132]	@ (800ffc4 <TIM_Base_SetConfig+0x1f8>)
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d00f      	beq.n	800ff64 <TIM_Base_SetConfig+0x198>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4a20      	ldr	r2, [pc, #128]	@ (800ffc8 <TIM_Base_SetConfig+0x1fc>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d00b      	beq.n	800ff64 <TIM_Base_SetConfig+0x198>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	4a1f      	ldr	r2, [pc, #124]	@ (800ffcc <TIM_Base_SetConfig+0x200>)
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d007      	beq.n	800ff64 <TIM_Base_SetConfig+0x198>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4a1e      	ldr	r2, [pc, #120]	@ (800ffd0 <TIM_Base_SetConfig+0x204>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d003      	beq.n	800ff64 <TIM_Base_SetConfig+0x198>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a1d      	ldr	r2, [pc, #116]	@ (800ffd4 <TIM_Base_SetConfig+0x208>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d103      	bne.n	800ff6c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	691a      	ldr	r2, [r3, #16]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	f003 0301 	and.w	r3, r3, #1
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d105      	bne.n	800ff8a <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	691b      	ldr	r3, [r3, #16]
 800ff82:	f023 0201 	bic.w	r2, r3, #1
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	611a      	str	r2, [r3, #16]
  }
}
 800ff8a:	bf00      	nop
 800ff8c:	3714      	adds	r7, #20
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop
 800ff98:	40012c00 	.word	0x40012c00
 800ff9c:	50012c00 	.word	0x50012c00
 800ffa0:	40000400 	.word	0x40000400
 800ffa4:	50000400 	.word	0x50000400
 800ffa8:	40000800 	.word	0x40000800
 800ffac:	50000800 	.word	0x50000800
 800ffb0:	40000c00 	.word	0x40000c00
 800ffb4:	50000c00 	.word	0x50000c00
 800ffb8:	40013400 	.word	0x40013400
 800ffbc:	50013400 	.word	0x50013400
 800ffc0:	40014000 	.word	0x40014000
 800ffc4:	50014000 	.word	0x50014000
 800ffc8:	40014400 	.word	0x40014400
 800ffcc:	50014400 	.word	0x50014400
 800ffd0:	40014800 	.word	0x40014800
 800ffd4:	50014800 	.word	0x50014800

0800ffd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b087      	sub	sp, #28
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6a1b      	ldr	r3, [r3, #32]
 800ffe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6a1b      	ldr	r3, [r3, #32]
 800ffec:	f023 0201 	bic.w	r2, r3, #1
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	699b      	ldr	r3, [r3, #24]
 800fffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801000a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f023 0303 	bic.w	r3, r3, #3
 8010012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	68fa      	ldr	r2, [r7, #12]
 801001a:	4313      	orrs	r3, r2
 801001c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	f023 0302 	bic.w	r3, r3, #2
 8010024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	689b      	ldr	r3, [r3, #8]
 801002a:	697a      	ldr	r2, [r7, #20]
 801002c:	4313      	orrs	r3, r2
 801002e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	4a40      	ldr	r2, [pc, #256]	@ (8010134 <TIM_OC1_SetConfig+0x15c>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d023      	beq.n	8010080 <TIM_OC1_SetConfig+0xa8>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4a3f      	ldr	r2, [pc, #252]	@ (8010138 <TIM_OC1_SetConfig+0x160>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d01f      	beq.n	8010080 <TIM_OC1_SetConfig+0xa8>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	4a3e      	ldr	r2, [pc, #248]	@ (801013c <TIM_OC1_SetConfig+0x164>)
 8010044:	4293      	cmp	r3, r2
 8010046:	d01b      	beq.n	8010080 <TIM_OC1_SetConfig+0xa8>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	4a3d      	ldr	r2, [pc, #244]	@ (8010140 <TIM_OC1_SetConfig+0x168>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d017      	beq.n	8010080 <TIM_OC1_SetConfig+0xa8>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	4a3c      	ldr	r2, [pc, #240]	@ (8010144 <TIM_OC1_SetConfig+0x16c>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d013      	beq.n	8010080 <TIM_OC1_SetConfig+0xa8>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	4a3b      	ldr	r2, [pc, #236]	@ (8010148 <TIM_OC1_SetConfig+0x170>)
 801005c:	4293      	cmp	r3, r2
 801005e:	d00f      	beq.n	8010080 <TIM_OC1_SetConfig+0xa8>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	4a3a      	ldr	r2, [pc, #232]	@ (801014c <TIM_OC1_SetConfig+0x174>)
 8010064:	4293      	cmp	r3, r2
 8010066:	d00b      	beq.n	8010080 <TIM_OC1_SetConfig+0xa8>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	4a39      	ldr	r2, [pc, #228]	@ (8010150 <TIM_OC1_SetConfig+0x178>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d007      	beq.n	8010080 <TIM_OC1_SetConfig+0xa8>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	4a38      	ldr	r2, [pc, #224]	@ (8010154 <TIM_OC1_SetConfig+0x17c>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d003      	beq.n	8010080 <TIM_OC1_SetConfig+0xa8>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	4a37      	ldr	r2, [pc, #220]	@ (8010158 <TIM_OC1_SetConfig+0x180>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d10c      	bne.n	801009a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	f023 0308 	bic.w	r3, r3, #8
 8010086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	697a      	ldr	r2, [r7, #20]
 801008e:	4313      	orrs	r3, r2
 8010090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	f023 0304 	bic.w	r3, r3, #4
 8010098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4a25      	ldr	r2, [pc, #148]	@ (8010134 <TIM_OC1_SetConfig+0x15c>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d023      	beq.n	80100ea <TIM_OC1_SetConfig+0x112>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4a24      	ldr	r2, [pc, #144]	@ (8010138 <TIM_OC1_SetConfig+0x160>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d01f      	beq.n	80100ea <TIM_OC1_SetConfig+0x112>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4a23      	ldr	r2, [pc, #140]	@ (801013c <TIM_OC1_SetConfig+0x164>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d01b      	beq.n	80100ea <TIM_OC1_SetConfig+0x112>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4a22      	ldr	r2, [pc, #136]	@ (8010140 <TIM_OC1_SetConfig+0x168>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d017      	beq.n	80100ea <TIM_OC1_SetConfig+0x112>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4a21      	ldr	r2, [pc, #132]	@ (8010144 <TIM_OC1_SetConfig+0x16c>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d013      	beq.n	80100ea <TIM_OC1_SetConfig+0x112>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	4a20      	ldr	r2, [pc, #128]	@ (8010148 <TIM_OC1_SetConfig+0x170>)
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d00f      	beq.n	80100ea <TIM_OC1_SetConfig+0x112>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	4a1f      	ldr	r2, [pc, #124]	@ (801014c <TIM_OC1_SetConfig+0x174>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d00b      	beq.n	80100ea <TIM_OC1_SetConfig+0x112>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	4a1e      	ldr	r2, [pc, #120]	@ (8010150 <TIM_OC1_SetConfig+0x178>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d007      	beq.n	80100ea <TIM_OC1_SetConfig+0x112>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4a1d      	ldr	r2, [pc, #116]	@ (8010154 <TIM_OC1_SetConfig+0x17c>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d003      	beq.n	80100ea <TIM_OC1_SetConfig+0x112>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	4a1c      	ldr	r2, [pc, #112]	@ (8010158 <TIM_OC1_SetConfig+0x180>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d111      	bne.n	801010e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80100f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80100f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	695b      	ldr	r3, [r3, #20]
 80100fe:	693a      	ldr	r2, [r7, #16]
 8010100:	4313      	orrs	r3, r2
 8010102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	693a      	ldr	r2, [r7, #16]
 801010a:	4313      	orrs	r3, r2
 801010c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	693a      	ldr	r2, [r7, #16]
 8010112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	68fa      	ldr	r2, [r7, #12]
 8010118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	685a      	ldr	r2, [r3, #4]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	697a      	ldr	r2, [r7, #20]
 8010126:	621a      	str	r2, [r3, #32]
}
 8010128:	bf00      	nop
 801012a:	371c      	adds	r7, #28
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr
 8010134:	40012c00 	.word	0x40012c00
 8010138:	50012c00 	.word	0x50012c00
 801013c:	40013400 	.word	0x40013400
 8010140:	50013400 	.word	0x50013400
 8010144:	40014000 	.word	0x40014000
 8010148:	50014000 	.word	0x50014000
 801014c:	40014400 	.word	0x40014400
 8010150:	50014400 	.word	0x50014400
 8010154:	40014800 	.word	0x40014800
 8010158:	50014800 	.word	0x50014800

0801015c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801015c:	b480      	push	{r7}
 801015e:	b087      	sub	sp, #28
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6a1b      	ldr	r3, [r3, #32]
 801016a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6a1b      	ldr	r3, [r3, #32]
 8010170:	f023 0210 	bic.w	r2, r3, #16
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	699b      	ldr	r3, [r3, #24]
 8010182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801018a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801018e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	021b      	lsls	r3, r3, #8
 801019e:	68fa      	ldr	r2, [r7, #12]
 80101a0:	4313      	orrs	r3, r2
 80101a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	f023 0320 	bic.w	r3, r3, #32
 80101aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	689b      	ldr	r3, [r3, #8]
 80101b0:	011b      	lsls	r3, r3, #4
 80101b2:	697a      	ldr	r2, [r7, #20]
 80101b4:	4313      	orrs	r3, r2
 80101b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	4a36      	ldr	r2, [pc, #216]	@ (8010294 <TIM_OC2_SetConfig+0x138>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d00b      	beq.n	80101d8 <TIM_OC2_SetConfig+0x7c>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4a35      	ldr	r2, [pc, #212]	@ (8010298 <TIM_OC2_SetConfig+0x13c>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d007      	beq.n	80101d8 <TIM_OC2_SetConfig+0x7c>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4a34      	ldr	r2, [pc, #208]	@ (801029c <TIM_OC2_SetConfig+0x140>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d003      	beq.n	80101d8 <TIM_OC2_SetConfig+0x7c>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	4a33      	ldr	r2, [pc, #204]	@ (80102a0 <TIM_OC2_SetConfig+0x144>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d10d      	bne.n	80101f4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80101de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	011b      	lsls	r3, r3, #4
 80101e6:	697a      	ldr	r2, [r7, #20]
 80101e8:	4313      	orrs	r3, r2
 80101ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80101f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	4a27      	ldr	r2, [pc, #156]	@ (8010294 <TIM_OC2_SetConfig+0x138>)
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d023      	beq.n	8010244 <TIM_OC2_SetConfig+0xe8>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4a26      	ldr	r2, [pc, #152]	@ (8010298 <TIM_OC2_SetConfig+0x13c>)
 8010200:	4293      	cmp	r3, r2
 8010202:	d01f      	beq.n	8010244 <TIM_OC2_SetConfig+0xe8>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	4a25      	ldr	r2, [pc, #148]	@ (801029c <TIM_OC2_SetConfig+0x140>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d01b      	beq.n	8010244 <TIM_OC2_SetConfig+0xe8>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4a24      	ldr	r2, [pc, #144]	@ (80102a0 <TIM_OC2_SetConfig+0x144>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d017      	beq.n	8010244 <TIM_OC2_SetConfig+0xe8>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4a23      	ldr	r2, [pc, #140]	@ (80102a4 <TIM_OC2_SetConfig+0x148>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d013      	beq.n	8010244 <TIM_OC2_SetConfig+0xe8>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	4a22      	ldr	r2, [pc, #136]	@ (80102a8 <TIM_OC2_SetConfig+0x14c>)
 8010220:	4293      	cmp	r3, r2
 8010222:	d00f      	beq.n	8010244 <TIM_OC2_SetConfig+0xe8>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4a21      	ldr	r2, [pc, #132]	@ (80102ac <TIM_OC2_SetConfig+0x150>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d00b      	beq.n	8010244 <TIM_OC2_SetConfig+0xe8>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4a20      	ldr	r2, [pc, #128]	@ (80102b0 <TIM_OC2_SetConfig+0x154>)
 8010230:	4293      	cmp	r3, r2
 8010232:	d007      	beq.n	8010244 <TIM_OC2_SetConfig+0xe8>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4a1f      	ldr	r2, [pc, #124]	@ (80102b4 <TIM_OC2_SetConfig+0x158>)
 8010238:	4293      	cmp	r3, r2
 801023a:	d003      	beq.n	8010244 <TIM_OC2_SetConfig+0xe8>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	4a1e      	ldr	r2, [pc, #120]	@ (80102b8 <TIM_OC2_SetConfig+0x15c>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d113      	bne.n	801026c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801024a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	695b      	ldr	r3, [r3, #20]
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	693a      	ldr	r2, [r7, #16]
 801025c:	4313      	orrs	r3, r2
 801025e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	699b      	ldr	r3, [r3, #24]
 8010264:	009b      	lsls	r3, r3, #2
 8010266:	693a      	ldr	r2, [r7, #16]
 8010268:	4313      	orrs	r3, r2
 801026a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	693a      	ldr	r2, [r7, #16]
 8010270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	68fa      	ldr	r2, [r7, #12]
 8010276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	685a      	ldr	r2, [r3, #4]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	697a      	ldr	r2, [r7, #20]
 8010284:	621a      	str	r2, [r3, #32]
}
 8010286:	bf00      	nop
 8010288:	371c      	adds	r7, #28
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop
 8010294:	40012c00 	.word	0x40012c00
 8010298:	50012c00 	.word	0x50012c00
 801029c:	40013400 	.word	0x40013400
 80102a0:	50013400 	.word	0x50013400
 80102a4:	40014000 	.word	0x40014000
 80102a8:	50014000 	.word	0x50014000
 80102ac:	40014400 	.word	0x40014400
 80102b0:	50014400 	.word	0x50014400
 80102b4:	40014800 	.word	0x40014800
 80102b8:	50014800 	.word	0x50014800

080102bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102bc:	b480      	push	{r7}
 80102be:	b087      	sub	sp, #28
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6a1b      	ldr	r3, [r3, #32]
 80102ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6a1b      	ldr	r3, [r3, #32]
 80102d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	69db      	ldr	r3, [r3, #28]
 80102e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80102ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80102ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f023 0303 	bic.w	r3, r3, #3
 80102f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	68fa      	ldr	r2, [r7, #12]
 80102fe:	4313      	orrs	r3, r2
 8010300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	021b      	lsls	r3, r3, #8
 8010310:	697a      	ldr	r2, [r7, #20]
 8010312:	4313      	orrs	r3, r2
 8010314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	4a35      	ldr	r2, [pc, #212]	@ (80103f0 <TIM_OC3_SetConfig+0x134>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d00b      	beq.n	8010336 <TIM_OC3_SetConfig+0x7a>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	4a34      	ldr	r2, [pc, #208]	@ (80103f4 <TIM_OC3_SetConfig+0x138>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d007      	beq.n	8010336 <TIM_OC3_SetConfig+0x7a>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	4a33      	ldr	r2, [pc, #204]	@ (80103f8 <TIM_OC3_SetConfig+0x13c>)
 801032a:	4293      	cmp	r3, r2
 801032c:	d003      	beq.n	8010336 <TIM_OC3_SetConfig+0x7a>
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	4a32      	ldr	r2, [pc, #200]	@ (80103fc <TIM_OC3_SetConfig+0x140>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d10d      	bne.n	8010352 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801033c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	021b      	lsls	r3, r3, #8
 8010344:	697a      	ldr	r2, [r7, #20]
 8010346:	4313      	orrs	r3, r2
 8010348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	4a26      	ldr	r2, [pc, #152]	@ (80103f0 <TIM_OC3_SetConfig+0x134>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d023      	beq.n	80103a2 <TIM_OC3_SetConfig+0xe6>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4a25      	ldr	r2, [pc, #148]	@ (80103f4 <TIM_OC3_SetConfig+0x138>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d01f      	beq.n	80103a2 <TIM_OC3_SetConfig+0xe6>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4a24      	ldr	r2, [pc, #144]	@ (80103f8 <TIM_OC3_SetConfig+0x13c>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d01b      	beq.n	80103a2 <TIM_OC3_SetConfig+0xe6>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	4a23      	ldr	r2, [pc, #140]	@ (80103fc <TIM_OC3_SetConfig+0x140>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d017      	beq.n	80103a2 <TIM_OC3_SetConfig+0xe6>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4a22      	ldr	r2, [pc, #136]	@ (8010400 <TIM_OC3_SetConfig+0x144>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d013      	beq.n	80103a2 <TIM_OC3_SetConfig+0xe6>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4a21      	ldr	r2, [pc, #132]	@ (8010404 <TIM_OC3_SetConfig+0x148>)
 801037e:	4293      	cmp	r3, r2
 8010380:	d00f      	beq.n	80103a2 <TIM_OC3_SetConfig+0xe6>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	4a20      	ldr	r2, [pc, #128]	@ (8010408 <TIM_OC3_SetConfig+0x14c>)
 8010386:	4293      	cmp	r3, r2
 8010388:	d00b      	beq.n	80103a2 <TIM_OC3_SetConfig+0xe6>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4a1f      	ldr	r2, [pc, #124]	@ (801040c <TIM_OC3_SetConfig+0x150>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d007      	beq.n	80103a2 <TIM_OC3_SetConfig+0xe6>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	4a1e      	ldr	r2, [pc, #120]	@ (8010410 <TIM_OC3_SetConfig+0x154>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d003      	beq.n	80103a2 <TIM_OC3_SetConfig+0xe6>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	4a1d      	ldr	r2, [pc, #116]	@ (8010414 <TIM_OC3_SetConfig+0x158>)
 801039e:	4293      	cmp	r3, r2
 80103a0:	d113      	bne.n	80103ca <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80103a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80103b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	695b      	ldr	r3, [r3, #20]
 80103b6:	011b      	lsls	r3, r3, #4
 80103b8:	693a      	ldr	r2, [r7, #16]
 80103ba:	4313      	orrs	r3, r2
 80103bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	699b      	ldr	r3, [r3, #24]
 80103c2:	011b      	lsls	r3, r3, #4
 80103c4:	693a      	ldr	r2, [r7, #16]
 80103c6:	4313      	orrs	r3, r2
 80103c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	693a      	ldr	r2, [r7, #16]
 80103ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	68fa      	ldr	r2, [r7, #12]
 80103d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	685a      	ldr	r2, [r3, #4]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	697a      	ldr	r2, [r7, #20]
 80103e2:	621a      	str	r2, [r3, #32]
}
 80103e4:	bf00      	nop
 80103e6:	371c      	adds	r7, #28
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr
 80103f0:	40012c00 	.word	0x40012c00
 80103f4:	50012c00 	.word	0x50012c00
 80103f8:	40013400 	.word	0x40013400
 80103fc:	50013400 	.word	0x50013400
 8010400:	40014000 	.word	0x40014000
 8010404:	50014000 	.word	0x50014000
 8010408:	40014400 	.word	0x40014400
 801040c:	50014400 	.word	0x50014400
 8010410:	40014800 	.word	0x40014800
 8010414:	50014800 	.word	0x50014800

08010418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010418:	b480      	push	{r7}
 801041a:	b087      	sub	sp, #28
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6a1b      	ldr	r3, [r3, #32]
 8010426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6a1b      	ldr	r3, [r3, #32]
 801042c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	69db      	ldr	r3, [r3, #28]
 801043e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801044a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	021b      	lsls	r3, r3, #8
 801045a:	68fa      	ldr	r2, [r7, #12]
 801045c:	4313      	orrs	r3, r2
 801045e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	031b      	lsls	r3, r3, #12
 801046e:	697a      	ldr	r2, [r7, #20]
 8010470:	4313      	orrs	r3, r2
 8010472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4a36      	ldr	r2, [pc, #216]	@ (8010550 <TIM_OC4_SetConfig+0x138>)
 8010478:	4293      	cmp	r3, r2
 801047a:	d00b      	beq.n	8010494 <TIM_OC4_SetConfig+0x7c>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	4a35      	ldr	r2, [pc, #212]	@ (8010554 <TIM_OC4_SetConfig+0x13c>)
 8010480:	4293      	cmp	r3, r2
 8010482:	d007      	beq.n	8010494 <TIM_OC4_SetConfig+0x7c>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	4a34      	ldr	r2, [pc, #208]	@ (8010558 <TIM_OC4_SetConfig+0x140>)
 8010488:	4293      	cmp	r3, r2
 801048a:	d003      	beq.n	8010494 <TIM_OC4_SetConfig+0x7c>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	4a33      	ldr	r2, [pc, #204]	@ (801055c <TIM_OC4_SetConfig+0x144>)
 8010490:	4293      	cmp	r3, r2
 8010492:	d10d      	bne.n	80104b0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801049a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	031b      	lsls	r3, r3, #12
 80104a2:	697a      	ldr	r2, [r7, #20]
 80104a4:	4313      	orrs	r3, r2
 80104a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80104ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4a27      	ldr	r2, [pc, #156]	@ (8010550 <TIM_OC4_SetConfig+0x138>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d023      	beq.n	8010500 <TIM_OC4_SetConfig+0xe8>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	4a26      	ldr	r2, [pc, #152]	@ (8010554 <TIM_OC4_SetConfig+0x13c>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d01f      	beq.n	8010500 <TIM_OC4_SetConfig+0xe8>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	4a25      	ldr	r2, [pc, #148]	@ (8010558 <TIM_OC4_SetConfig+0x140>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d01b      	beq.n	8010500 <TIM_OC4_SetConfig+0xe8>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	4a24      	ldr	r2, [pc, #144]	@ (801055c <TIM_OC4_SetConfig+0x144>)
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d017      	beq.n	8010500 <TIM_OC4_SetConfig+0xe8>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	4a23      	ldr	r2, [pc, #140]	@ (8010560 <TIM_OC4_SetConfig+0x148>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d013      	beq.n	8010500 <TIM_OC4_SetConfig+0xe8>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4a22      	ldr	r2, [pc, #136]	@ (8010564 <TIM_OC4_SetConfig+0x14c>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d00f      	beq.n	8010500 <TIM_OC4_SetConfig+0xe8>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a21      	ldr	r2, [pc, #132]	@ (8010568 <TIM_OC4_SetConfig+0x150>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d00b      	beq.n	8010500 <TIM_OC4_SetConfig+0xe8>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a20      	ldr	r2, [pc, #128]	@ (801056c <TIM_OC4_SetConfig+0x154>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d007      	beq.n	8010500 <TIM_OC4_SetConfig+0xe8>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4a1f      	ldr	r2, [pc, #124]	@ (8010570 <TIM_OC4_SetConfig+0x158>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d003      	beq.n	8010500 <TIM_OC4_SetConfig+0xe8>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4a1e      	ldr	r2, [pc, #120]	@ (8010574 <TIM_OC4_SetConfig+0x15c>)
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d113      	bne.n	8010528 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010506:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801050e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	695b      	ldr	r3, [r3, #20]
 8010514:	019b      	lsls	r3, r3, #6
 8010516:	693a      	ldr	r2, [r7, #16]
 8010518:	4313      	orrs	r3, r2
 801051a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	699b      	ldr	r3, [r3, #24]
 8010520:	019b      	lsls	r3, r3, #6
 8010522:	693a      	ldr	r2, [r7, #16]
 8010524:	4313      	orrs	r3, r2
 8010526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	693a      	ldr	r2, [r7, #16]
 801052c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	68fa      	ldr	r2, [r7, #12]
 8010532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	685a      	ldr	r2, [r3, #4]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	697a      	ldr	r2, [r7, #20]
 8010540:	621a      	str	r2, [r3, #32]
}
 8010542:	bf00      	nop
 8010544:	371c      	adds	r7, #28
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop
 8010550:	40012c00 	.word	0x40012c00
 8010554:	50012c00 	.word	0x50012c00
 8010558:	40013400 	.word	0x40013400
 801055c:	50013400 	.word	0x50013400
 8010560:	40014000 	.word	0x40014000
 8010564:	50014000 	.word	0x50014000
 8010568:	40014400 	.word	0x40014400
 801056c:	50014400 	.word	0x50014400
 8010570:	40014800 	.word	0x40014800
 8010574:	50014800 	.word	0x50014800

08010578 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010578:	b480      	push	{r7}
 801057a:	b087      	sub	sp, #28
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a1b      	ldr	r3, [r3, #32]
 8010586:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6a1b      	ldr	r3, [r3, #32]
 801058c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801059e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80105a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80105aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	68fa      	ldr	r2, [r7, #12]
 80105b2:	4313      	orrs	r3, r2
 80105b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80105bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	689b      	ldr	r3, [r3, #8]
 80105c2:	041b      	lsls	r3, r3, #16
 80105c4:	693a      	ldr	r2, [r7, #16]
 80105c6:	4313      	orrs	r3, r2
 80105c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4a21      	ldr	r2, [pc, #132]	@ (8010654 <TIM_OC5_SetConfig+0xdc>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d023      	beq.n	801061a <TIM_OC5_SetConfig+0xa2>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	4a20      	ldr	r2, [pc, #128]	@ (8010658 <TIM_OC5_SetConfig+0xe0>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d01f      	beq.n	801061a <TIM_OC5_SetConfig+0xa2>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	4a1f      	ldr	r2, [pc, #124]	@ (801065c <TIM_OC5_SetConfig+0xe4>)
 80105de:	4293      	cmp	r3, r2
 80105e0:	d01b      	beq.n	801061a <TIM_OC5_SetConfig+0xa2>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	4a1e      	ldr	r2, [pc, #120]	@ (8010660 <TIM_OC5_SetConfig+0xe8>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d017      	beq.n	801061a <TIM_OC5_SetConfig+0xa2>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4a1d      	ldr	r2, [pc, #116]	@ (8010664 <TIM_OC5_SetConfig+0xec>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d013      	beq.n	801061a <TIM_OC5_SetConfig+0xa2>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	4a1c      	ldr	r2, [pc, #112]	@ (8010668 <TIM_OC5_SetConfig+0xf0>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d00f      	beq.n	801061a <TIM_OC5_SetConfig+0xa2>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4a1b      	ldr	r2, [pc, #108]	@ (801066c <TIM_OC5_SetConfig+0xf4>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d00b      	beq.n	801061a <TIM_OC5_SetConfig+0xa2>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	4a1a      	ldr	r2, [pc, #104]	@ (8010670 <TIM_OC5_SetConfig+0xf8>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d007      	beq.n	801061a <TIM_OC5_SetConfig+0xa2>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4a19      	ldr	r2, [pc, #100]	@ (8010674 <TIM_OC5_SetConfig+0xfc>)
 801060e:	4293      	cmp	r3, r2
 8010610:	d003      	beq.n	801061a <TIM_OC5_SetConfig+0xa2>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	4a18      	ldr	r2, [pc, #96]	@ (8010678 <TIM_OC5_SetConfig+0x100>)
 8010616:	4293      	cmp	r3, r2
 8010618:	d109      	bne.n	801062e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010620:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	695b      	ldr	r3, [r3, #20]
 8010626:	021b      	lsls	r3, r3, #8
 8010628:	697a      	ldr	r2, [r7, #20]
 801062a:	4313      	orrs	r3, r2
 801062c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	697a      	ldr	r2, [r7, #20]
 8010632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	68fa      	ldr	r2, [r7, #12]
 8010638:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	685a      	ldr	r2, [r3, #4]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	693a      	ldr	r2, [r7, #16]
 8010646:	621a      	str	r2, [r3, #32]
}
 8010648:	bf00      	nop
 801064a:	371c      	adds	r7, #28
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr
 8010654:	40012c00 	.word	0x40012c00
 8010658:	50012c00 	.word	0x50012c00
 801065c:	40013400 	.word	0x40013400
 8010660:	50013400 	.word	0x50013400
 8010664:	40014000 	.word	0x40014000
 8010668:	50014000 	.word	0x50014000
 801066c:	40014400 	.word	0x40014400
 8010670:	50014400 	.word	0x50014400
 8010674:	40014800 	.word	0x40014800
 8010678:	50014800 	.word	0x50014800

0801067c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801067c:	b480      	push	{r7}
 801067e:	b087      	sub	sp, #28
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a1b      	ldr	r3, [r3, #32]
 801068a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6a1b      	ldr	r3, [r3, #32]
 8010690:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80106aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80106ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	021b      	lsls	r3, r3, #8
 80106b6:	68fa      	ldr	r2, [r7, #12]
 80106b8:	4313      	orrs	r3, r2
 80106ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80106c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	051b      	lsls	r3, r3, #20
 80106ca:	693a      	ldr	r2, [r7, #16]
 80106cc:	4313      	orrs	r3, r2
 80106ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	4a22      	ldr	r2, [pc, #136]	@ (801075c <TIM_OC6_SetConfig+0xe0>)
 80106d4:	4293      	cmp	r3, r2
 80106d6:	d023      	beq.n	8010720 <TIM_OC6_SetConfig+0xa4>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	4a21      	ldr	r2, [pc, #132]	@ (8010760 <TIM_OC6_SetConfig+0xe4>)
 80106dc:	4293      	cmp	r3, r2
 80106de:	d01f      	beq.n	8010720 <TIM_OC6_SetConfig+0xa4>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	4a20      	ldr	r2, [pc, #128]	@ (8010764 <TIM_OC6_SetConfig+0xe8>)
 80106e4:	4293      	cmp	r3, r2
 80106e6:	d01b      	beq.n	8010720 <TIM_OC6_SetConfig+0xa4>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	4a1f      	ldr	r2, [pc, #124]	@ (8010768 <TIM_OC6_SetConfig+0xec>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d017      	beq.n	8010720 <TIM_OC6_SetConfig+0xa4>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	4a1e      	ldr	r2, [pc, #120]	@ (801076c <TIM_OC6_SetConfig+0xf0>)
 80106f4:	4293      	cmp	r3, r2
 80106f6:	d013      	beq.n	8010720 <TIM_OC6_SetConfig+0xa4>
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	4a1d      	ldr	r2, [pc, #116]	@ (8010770 <TIM_OC6_SetConfig+0xf4>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d00f      	beq.n	8010720 <TIM_OC6_SetConfig+0xa4>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	4a1c      	ldr	r2, [pc, #112]	@ (8010774 <TIM_OC6_SetConfig+0xf8>)
 8010704:	4293      	cmp	r3, r2
 8010706:	d00b      	beq.n	8010720 <TIM_OC6_SetConfig+0xa4>
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	4a1b      	ldr	r2, [pc, #108]	@ (8010778 <TIM_OC6_SetConfig+0xfc>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d007      	beq.n	8010720 <TIM_OC6_SetConfig+0xa4>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	4a1a      	ldr	r2, [pc, #104]	@ (801077c <TIM_OC6_SetConfig+0x100>)
 8010714:	4293      	cmp	r3, r2
 8010716:	d003      	beq.n	8010720 <TIM_OC6_SetConfig+0xa4>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	4a19      	ldr	r2, [pc, #100]	@ (8010780 <TIM_OC6_SetConfig+0x104>)
 801071c:	4293      	cmp	r3, r2
 801071e:	d109      	bne.n	8010734 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010726:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	695b      	ldr	r3, [r3, #20]
 801072c:	029b      	lsls	r3, r3, #10
 801072e:	697a      	ldr	r2, [r7, #20]
 8010730:	4313      	orrs	r3, r2
 8010732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	697a      	ldr	r2, [r7, #20]
 8010738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	685a      	ldr	r2, [r3, #4]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	693a      	ldr	r2, [r7, #16]
 801074c:	621a      	str	r2, [r3, #32]
}
 801074e:	bf00      	nop
 8010750:	371c      	adds	r7, #28
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop
 801075c:	40012c00 	.word	0x40012c00
 8010760:	50012c00 	.word	0x50012c00
 8010764:	40013400 	.word	0x40013400
 8010768:	50013400 	.word	0x50013400
 801076c:	40014000 	.word	0x40014000
 8010770:	50014000 	.word	0x50014000
 8010774:	40014400 	.word	0x40014400
 8010778:	50014400 	.word	0x50014400
 801077c:	40014800 	.word	0x40014800
 8010780:	50014800 	.word	0x50014800

08010784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010784:	b480      	push	{r7}
 8010786:	b087      	sub	sp, #28
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6a1b      	ldr	r3, [r3, #32]
 8010794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6a1b      	ldr	r3, [r3, #32]
 801079a:	f023 0201 	bic.w	r2, r3, #1
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	699b      	ldr	r3, [r3, #24]
 80107a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80107ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	011b      	lsls	r3, r3, #4
 80107b4:	693a      	ldr	r2, [r7, #16]
 80107b6:	4313      	orrs	r3, r2
 80107b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	f023 030a 	bic.w	r3, r3, #10
 80107c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80107c2:	697a      	ldr	r2, [r7, #20]
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	4313      	orrs	r3, r2
 80107c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	693a      	ldr	r2, [r7, #16]
 80107ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	697a      	ldr	r2, [r7, #20]
 80107d4:	621a      	str	r2, [r3, #32]
}
 80107d6:	bf00      	nop
 80107d8:	371c      	adds	r7, #28
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr

080107e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80107e2:	b480      	push	{r7}
 80107e4:	b087      	sub	sp, #28
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	60f8      	str	r0, [r7, #12]
 80107ea:	60b9      	str	r1, [r7, #8]
 80107ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6a1b      	ldr	r3, [r3, #32]
 80107f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6a1b      	ldr	r3, [r3, #32]
 80107f8:	f023 0210 	bic.w	r2, r3, #16
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	699b      	ldr	r3, [r3, #24]
 8010804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801080c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	031b      	lsls	r3, r3, #12
 8010812:	693a      	ldr	r2, [r7, #16]
 8010814:	4313      	orrs	r3, r2
 8010816:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801081e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	011b      	lsls	r3, r3, #4
 8010824:	697a      	ldr	r2, [r7, #20]
 8010826:	4313      	orrs	r3, r2
 8010828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	693a      	ldr	r2, [r7, #16]
 801082e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	697a      	ldr	r2, [r7, #20]
 8010834:	621a      	str	r2, [r3, #32]
}
 8010836:	bf00      	nop
 8010838:	371c      	adds	r7, #28
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr

08010842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010842:	b480      	push	{r7}
 8010844:	b085      	sub	sp, #20
 8010846:	af00      	add	r7, sp, #0
 8010848:	6078      	str	r0, [r7, #4]
 801084a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	689b      	ldr	r3, [r3, #8]
 8010850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801085c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801085e:	683a      	ldr	r2, [r7, #0]
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	4313      	orrs	r3, r2
 8010864:	f043 0307 	orr.w	r3, r3, #7
 8010868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	609a      	str	r2, [r3, #8]
}
 8010870:	bf00      	nop
 8010872:	3714      	adds	r7, #20
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr

0801087c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801087c:	b480      	push	{r7}
 801087e:	b087      	sub	sp, #28
 8010880:	af00      	add	r7, sp, #0
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	607a      	str	r2, [r7, #4]
 8010888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	689b      	ldr	r3, [r3, #8]
 801088e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	021a      	lsls	r2, r3, #8
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	431a      	orrs	r2, r3
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	4313      	orrs	r3, r2
 80108a4:	697a      	ldr	r2, [r7, #20]
 80108a6:	4313      	orrs	r3, r2
 80108a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	697a      	ldr	r2, [r7, #20]
 80108ae:	609a      	str	r2, [r3, #8]
}
 80108b0:	bf00      	nop
 80108b2:	371c      	adds	r7, #28
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr

080108bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80108bc:	b480      	push	{r7}
 80108be:	b085      	sub	sp, #20
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d101      	bne.n	80108d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80108d0:	2302      	movs	r3, #2
 80108d2:	e097      	b.n	8010a04 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2202      	movs	r2, #2
 80108e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	689b      	ldr	r3, [r3, #8]
 80108f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4a45      	ldr	r2, [pc, #276]	@ (8010a10 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d00e      	beq.n	801091c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4a44      	ldr	r2, [pc, #272]	@ (8010a14 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d009      	beq.n	801091c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4a42      	ldr	r2, [pc, #264]	@ (8010a18 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d004      	beq.n	801091c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a41      	ldr	r2, [pc, #260]	@ (8010a1c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010918:	4293      	cmp	r3, r2
 801091a:	d108      	bne.n	801092e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010922:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	685b      	ldr	r3, [r3, #4]
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	4313      	orrs	r3, r2
 801092c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010938:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	68fa      	ldr	r2, [r7, #12]
 8010940:	4313      	orrs	r3, r2
 8010942:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	4a2f      	ldr	r2, [pc, #188]	@ (8010a10 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010952:	4293      	cmp	r3, r2
 8010954:	d040      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4a2e      	ldr	r2, [pc, #184]	@ (8010a14 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 801095c:	4293      	cmp	r3, r2
 801095e:	d03b      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010968:	d036      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010972:	d031      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4a29      	ldr	r2, [pc, #164]	@ (8010a20 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d02c      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	4a28      	ldr	r2, [pc, #160]	@ (8010a24 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d027      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4a26      	ldr	r2, [pc, #152]	@ (8010a28 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 801098e:	4293      	cmp	r3, r2
 8010990:	d022      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	4a25      	ldr	r2, [pc, #148]	@ (8010a2c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010998:	4293      	cmp	r3, r2
 801099a:	d01d      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4a23      	ldr	r2, [pc, #140]	@ (8010a30 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d018      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	4a22      	ldr	r2, [pc, #136]	@ (8010a34 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d013      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4a18      	ldr	r2, [pc, #96]	@ (8010a18 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80109b6:	4293      	cmp	r3, r2
 80109b8:	d00e      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	4a17      	ldr	r2, [pc, #92]	@ (8010a1c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80109c0:	4293      	cmp	r3, r2
 80109c2:	d009      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4a1b      	ldr	r2, [pc, #108]	@ (8010a38 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d004      	beq.n	80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	4a1a      	ldr	r2, [pc, #104]	@ (8010a3c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80109d4:	4293      	cmp	r3, r2
 80109d6:	d10c      	bne.n	80109f2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80109de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	689b      	ldr	r3, [r3, #8]
 80109e4:	68ba      	ldr	r2, [r7, #8]
 80109e6:	4313      	orrs	r3, r2
 80109e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	68ba      	ldr	r2, [r7, #8]
 80109f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2201      	movs	r2, #1
 80109f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2200      	movs	r2, #0
 80109fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010a02:	2300      	movs	r3, #0
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3714      	adds	r7, #20
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr
 8010a10:	40012c00 	.word	0x40012c00
 8010a14:	50012c00 	.word	0x50012c00
 8010a18:	40013400 	.word	0x40013400
 8010a1c:	50013400 	.word	0x50013400
 8010a20:	40000400 	.word	0x40000400
 8010a24:	50000400 	.word	0x50000400
 8010a28:	40000800 	.word	0x40000800
 8010a2c:	50000800 	.word	0x50000800
 8010a30:	40000c00 	.word	0x40000c00
 8010a34:	50000c00 	.word	0x50000c00
 8010a38:	40014000 	.word	0x40014000
 8010a3c:	50014000 	.word	0x50014000

08010a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d101      	bne.n	8010a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010a4e:	2301      	movs	r3, #1
 8010a50:	e042      	b.n	8010ad8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d106      	bne.n	8010a6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f7f2 f8d1 	bl	8002c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2224      	movs	r2, #36	@ 0x24
 8010a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f022 0201 	bic.w	r2, r2, #1
 8010a80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d002      	beq.n	8010a90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 fd02 	bl	8011494 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f000 fb51 	bl	8011138 <UART_SetConfig>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	d101      	bne.n	8010aa0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e01b      	b.n	8010ad8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	689a      	ldr	r2, [r3, #8]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f042 0201 	orr.w	r2, r2, #1
 8010ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f000 fd81 	bl	80115d8 <UART_CheckIdleState>
 8010ad6:	4603      	mov	r3, r0
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3708      	adds	r7, #8
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}

08010ae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b0ba      	sub	sp, #232	@ 0xe8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	69db      	ldr	r3, [r3, #28]
 8010aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	689b      	ldr	r3, [r3, #8]
 8010b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010b06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010b0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010b0e:	4013      	ands	r3, r2
 8010b10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d11b      	bne.n	8010b54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b20:	f003 0320 	and.w	r3, r3, #32
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d015      	beq.n	8010b54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b2c:	f003 0320 	and.w	r3, r3, #32
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d105      	bne.n	8010b40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d009      	beq.n	8010b54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	f000 82cb 	beq.w	80110e0 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	4798      	blx	r3
      }
      return;
 8010b52:	e2c5      	b.n	80110e0 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010b54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	f000 8123 	beq.w	8010da4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010b5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010b62:	4b8d      	ldr	r3, [pc, #564]	@ (8010d98 <HAL_UART_IRQHandler+0x2b8>)
 8010b64:	4013      	ands	r3, r2
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d106      	bne.n	8010b78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010b6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8010d9c <HAL_UART_IRQHandler+0x2bc>)
 8010b70:	4013      	ands	r3, r2
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f000 8116 	beq.w	8010da4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b7c:	f003 0301 	and.w	r3, r3, #1
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d011      	beq.n	8010ba8 <HAL_UART_IRQHandler+0xc8>
 8010b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d00b      	beq.n	8010ba8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	2201      	movs	r2, #1
 8010b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b9e:	f043 0201 	orr.w	r2, r3, #1
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bac:	f003 0302 	and.w	r3, r3, #2
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d011      	beq.n	8010bd8 <HAL_UART_IRQHandler+0xf8>
 8010bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010bb8:	f003 0301 	and.w	r3, r3, #1
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d00b      	beq.n	8010bd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	2202      	movs	r2, #2
 8010bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bce:	f043 0204 	orr.w	r2, r3, #4
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bdc:	f003 0304 	and.w	r3, r3, #4
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d011      	beq.n	8010c08 <HAL_UART_IRQHandler+0x128>
 8010be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010be8:	f003 0301 	and.w	r3, r3, #1
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d00b      	beq.n	8010c08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2204      	movs	r2, #4
 8010bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bfe:	f043 0202 	orr.w	r2, r3, #2
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c0c:	f003 0308 	and.w	r3, r3, #8
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d017      	beq.n	8010c44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010c18:	f003 0320 	and.w	r3, r3, #32
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d105      	bne.n	8010c2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010c20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010c24:	4b5c      	ldr	r3, [pc, #368]	@ (8010d98 <HAL_UART_IRQHandler+0x2b8>)
 8010c26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d00b      	beq.n	8010c44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	2208      	movs	r2, #8
 8010c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c3a:	f043 0208 	orr.w	r2, r3, #8
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d012      	beq.n	8010c76 <HAL_UART_IRQHandler+0x196>
 8010c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010c54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d00c      	beq.n	8010c76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c6c:	f043 0220 	orr.w	r2, r3, #32
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	f000 8231 	beq.w	80110e4 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c86:	f003 0320 	and.w	r3, r3, #32
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d013      	beq.n	8010cb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010c92:	f003 0320 	and.w	r3, r3, #32
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d105      	bne.n	8010ca6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d007      	beq.n	8010cb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d003      	beq.n	8010cb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010cbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	689b      	ldr	r3, [r3, #8]
 8010cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cca:	2b40      	cmp	r3, #64	@ 0x40
 8010ccc:	d005      	beq.n	8010cda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010cd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d054      	beq.n	8010d84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 fd93 	bl	8011806 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	689b      	ldr	r3, [r3, #8]
 8010ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cea:	2b40      	cmp	r3, #64	@ 0x40
 8010cec:	d146      	bne.n	8010d7c <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	3308      	adds	r3, #8
 8010cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010cfc:	e853 3f00 	ldrex	r3, [r3]
 8010d00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	3308      	adds	r3, #8
 8010d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010d2a:	e841 2300 	strex	r3, r2, [r1]
 8010d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d1d9      	bne.n	8010cee <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d017      	beq.n	8010d74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d4a:	4a15      	ldr	r2, [pc, #84]	@ (8010da0 <HAL_UART_IRQHandler+0x2c0>)
 8010d4c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7f5 f9d1 	bl	80060fc <HAL_DMA_Abort_IT>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d019      	beq.n	8010d94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010d6e:	4610      	mov	r0, r2
 8010d70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d72:	e00f      	b.n	8010d94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 f9c9 	bl	801110c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d7a:	e00b      	b.n	8010d94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f000 f9c5 	bl	801110c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d82:	e007      	b.n	8010d94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 f9c1 	bl	801110c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010d92:	e1a7      	b.n	80110e4 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d94:	bf00      	nop
    return;
 8010d96:	e1a5      	b.n	80110e4 <HAL_UART_IRQHandler+0x604>
 8010d98:	10000001 	.word	0x10000001
 8010d9c:	04000120 	.word	0x04000120
 8010da0:	080118d3 	.word	0x080118d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	f040 8150 	bne.w	801104e <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010db2:	f003 0310 	and.w	r3, r3, #16
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f000 8149 	beq.w	801104e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010dc0:	f003 0310 	and.w	r3, r3, #16
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f000 8142 	beq.w	801104e <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	2210      	movs	r2, #16
 8010dd0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	689b      	ldr	r3, [r3, #8]
 8010dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ddc:	2b40      	cmp	r3, #64	@ 0x40
 8010dde:	f040 80b8 	bne.w	8010f52 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010dec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010df0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f000 8177 	beq.w	80110e8 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010e04:	429a      	cmp	r2, r3
 8010e06:	f080 816f 	bcs.w	80110e8 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010e10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e1c:	2b81      	cmp	r3, #129	@ 0x81
 8010e1e:	f000 8087 	beq.w	8010f30 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010e2e:	e853 3f00 	ldrex	r3, [r3]
 8010e32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010e3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	461a      	mov	r2, r3
 8010e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010e4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010e50:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010e58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010e5c:	e841 2300 	strex	r3, r2, [r1]
 8010e60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d1da      	bne.n	8010e22 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	3308      	adds	r3, #8
 8010e72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010e76:	e853 3f00 	ldrex	r3, [r3]
 8010e7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010e7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010e7e:	f023 0301 	bic.w	r3, r3, #1
 8010e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	3308      	adds	r3, #8
 8010e8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010e90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010e98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010e9c:	e841 2300 	strex	r3, r2, [r1]
 8010ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010ea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d1e1      	bne.n	8010e6c <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	3308      	adds	r3, #8
 8010eae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010eb2:	e853 3f00 	ldrex	r3, [r3]
 8010eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	3308      	adds	r3, #8
 8010ec8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010ecc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010ece:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ed0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010ed2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010ed4:	e841 2300 	strex	r3, r2, [r1]
 8010ed8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d1e3      	bne.n	8010ea8 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2220      	movs	r2, #32
 8010ee4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2200      	movs	r2, #0
 8010eec:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ef6:	e853 3f00 	ldrex	r3, [r3]
 8010efa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010efc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010efe:	f023 0310 	bic.w	r3, r3, #16
 8010f02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f12:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010f16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010f18:	e841 2300 	strex	r3, r2, [r1]
 8010f1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1e4      	bne.n	8010eee <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7f5 f86a 	bl	8006004 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2202      	movs	r2, #2
 8010f34:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	4619      	mov	r1, r3
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 f8e8 	bl	8011120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010f50:	e0ca      	b.n	80110e8 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	1ad3      	subs	r3, r2, r3
 8010f62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	f000 80bc 	beq.w	80110ec <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8010f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	f000 80b7 	beq.w	80110ec <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f86:	e853 3f00 	ldrex	r3, [r3]
 8010f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010f92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010fa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010fa8:	e841 2300 	strex	r3, r2, [r1]
 8010fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d1e4      	bne.n	8010f7e <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	3308      	adds	r3, #8
 8010fba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fbe:	e853 3f00 	ldrex	r3, [r3]
 8010fc2:	623b      	str	r3, [r7, #32]
   return(result);
 8010fc4:	6a3b      	ldr	r3, [r7, #32]
 8010fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010fca:	f023 0301 	bic.w	r3, r3, #1
 8010fce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	3308      	adds	r3, #8
 8010fd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010fdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8010fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fe4:	e841 2300 	strex	r3, r2, [r1]
 8010fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d1e1      	bne.n	8010fb4 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2220      	movs	r2, #32
 8010ff4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2200      	movs	r2, #0
 8011002:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	e853 3f00 	ldrex	r3, [r3]
 8011010:	60fb      	str	r3, [r7, #12]
   return(result);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f023 0310 	bic.w	r3, r3, #16
 8011018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	461a      	mov	r2, r3
 8011022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011026:	61fb      	str	r3, [r7, #28]
 8011028:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801102a:	69b9      	ldr	r1, [r7, #24]
 801102c:	69fa      	ldr	r2, [r7, #28]
 801102e:	e841 2300 	strex	r3, r2, [r1]
 8011032:	617b      	str	r3, [r7, #20]
   return(result);
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d1e4      	bne.n	8011004 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2202      	movs	r2, #2
 801103e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011044:	4619      	mov	r1, r3
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f000 f86a 	bl	8011120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801104c:	e04e      	b.n	80110ec <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801104e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011056:	2b00      	cmp	r3, #0
 8011058:	d014      	beq.n	8011084 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801105a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801105e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011062:	2b00      	cmp	r3, #0
 8011064:	d105      	bne.n	8011072 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801106a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801106e:	2b00      	cmp	r3, #0
 8011070:	d008      	beq.n	8011084 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011076:	2b00      	cmp	r3, #0
 8011078:	d03a      	beq.n	80110f0 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	4798      	blx	r3
    }
    return;
 8011082:	e035      	b.n	80110f0 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801108c:	2b00      	cmp	r3, #0
 801108e:	d009      	beq.n	80110a4 <HAL_UART_IRQHandler+0x5c4>
 8011090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011098:	2b00      	cmp	r3, #0
 801109a:	d003      	beq.n	80110a4 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 fc2e 	bl	80118fe <UART_EndTransmit_IT>
    return;
 80110a2:	e026      	b.n	80110f2 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80110a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d009      	beq.n	80110c4 <HAL_UART_IRQHandler+0x5e4>
 80110b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d003      	beq.n	80110c4 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 fc53 	bl	8011968 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80110c2:	e016      	b.n	80110f2 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80110c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d010      	beq.n	80110f2 <HAL_UART_IRQHandler+0x612>
 80110d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	da0c      	bge.n	80110f2 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 fc3b 	bl	8011954 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80110de:	e008      	b.n	80110f2 <HAL_UART_IRQHandler+0x612>
      return;
 80110e0:	bf00      	nop
 80110e2:	e006      	b.n	80110f2 <HAL_UART_IRQHandler+0x612>
    return;
 80110e4:	bf00      	nop
 80110e6:	e004      	b.n	80110f2 <HAL_UART_IRQHandler+0x612>
      return;
 80110e8:	bf00      	nop
 80110ea:	e002      	b.n	80110f2 <HAL_UART_IRQHandler+0x612>
      return;
 80110ec:	bf00      	nop
 80110ee:	e000      	b.n	80110f2 <HAL_UART_IRQHandler+0x612>
    return;
 80110f0:	bf00      	nop
  }
}
 80110f2:	37e8      	adds	r7, #232	@ 0xe8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011100:	bf00      	nop
 8011102:	370c      	adds	r7, #12
 8011104:	46bd      	mov	sp, r7
 8011106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110a:	4770      	bx	lr

0801110c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801110c:	b480      	push	{r7}
 801110e:	b083      	sub	sp, #12
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011114:	bf00      	nop
 8011116:	370c      	adds	r7, #12
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr

08011120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	460b      	mov	r3, r1
 801112a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801112c:	bf00      	nop
 801112e:	370c      	adds	r7, #12
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr

08011138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801113c:	b094      	sub	sp, #80	@ 0x50
 801113e:	af00      	add	r7, sp, #0
 8011140:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011142:	2300      	movs	r3, #0
 8011144:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8011148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	4b83      	ldr	r3, [pc, #524]	@ (801135c <UART_SetConfig+0x224>)
 801114e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011152:	689a      	ldr	r2, [r3, #8]
 8011154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	431a      	orrs	r2, r3
 801115a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801115c:	695b      	ldr	r3, [r3, #20]
 801115e:	431a      	orrs	r2, r3
 8011160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011162:	69db      	ldr	r3, [r3, #28]
 8011164:	4313      	orrs	r3, r2
 8011166:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	497c      	ldr	r1, [pc, #496]	@ (8011360 <UART_SetConfig+0x228>)
 8011170:	4019      	ands	r1, r3
 8011172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011174:	681a      	ldr	r2, [r3, #0]
 8011176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011178:	430b      	orrs	r3, r1
 801117a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801117c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011188:	68d9      	ldr	r1, [r3, #12]
 801118a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	ea40 0301 	orr.w	r3, r0, r1
 8011192:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011196:	699b      	ldr	r3, [r3, #24]
 8011198:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801119a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	4b6f      	ldr	r3, [pc, #444]	@ (801135c <UART_SetConfig+0x224>)
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d009      	beq.n	80111b8 <UART_SetConfig+0x80>
 80111a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	4b6e      	ldr	r3, [pc, #440]	@ (8011364 <UART_SetConfig+0x22c>)
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d004      	beq.n	80111b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80111ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111b0:	6a1a      	ldr	r2, [r3, #32]
 80111b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111b4:	4313      	orrs	r3, r2
 80111b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80111b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	689b      	ldr	r3, [r3, #8]
 80111be:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80111c2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80111c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111cc:	430b      	orrs	r3, r1
 80111ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80111d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111d6:	f023 000f 	bic.w	r0, r3, #15
 80111da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80111de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111e0:	681a      	ldr	r2, [r3, #0]
 80111e2:	ea40 0301 	orr.w	r3, r0, r1
 80111e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80111e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	4b5e      	ldr	r3, [pc, #376]	@ (8011368 <UART_SetConfig+0x230>)
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d102      	bne.n	80111f8 <UART_SetConfig+0xc0>
 80111f2:	2301      	movs	r3, #1
 80111f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111f6:	e032      	b.n	801125e <UART_SetConfig+0x126>
 80111f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	4b5b      	ldr	r3, [pc, #364]	@ (801136c <UART_SetConfig+0x234>)
 80111fe:	429a      	cmp	r2, r3
 8011200:	d102      	bne.n	8011208 <UART_SetConfig+0xd0>
 8011202:	2302      	movs	r3, #2
 8011204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011206:	e02a      	b.n	801125e <UART_SetConfig+0x126>
 8011208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	4b58      	ldr	r3, [pc, #352]	@ (8011370 <UART_SetConfig+0x238>)
 801120e:	429a      	cmp	r2, r3
 8011210:	d102      	bne.n	8011218 <UART_SetConfig+0xe0>
 8011212:	2304      	movs	r3, #4
 8011214:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011216:	e022      	b.n	801125e <UART_SetConfig+0x126>
 8011218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	4b55      	ldr	r3, [pc, #340]	@ (8011374 <UART_SetConfig+0x23c>)
 801121e:	429a      	cmp	r2, r3
 8011220:	d102      	bne.n	8011228 <UART_SetConfig+0xf0>
 8011222:	2308      	movs	r3, #8
 8011224:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011226:	e01a      	b.n	801125e <UART_SetConfig+0x126>
 8011228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801122a:	681a      	ldr	r2, [r3, #0]
 801122c:	4b52      	ldr	r3, [pc, #328]	@ (8011378 <UART_SetConfig+0x240>)
 801122e:	429a      	cmp	r2, r3
 8011230:	d102      	bne.n	8011238 <UART_SetConfig+0x100>
 8011232:	2310      	movs	r3, #16
 8011234:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011236:	e012      	b.n	801125e <UART_SetConfig+0x126>
 8011238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	4b4f      	ldr	r3, [pc, #316]	@ (801137c <UART_SetConfig+0x244>)
 801123e:	429a      	cmp	r2, r3
 8011240:	d103      	bne.n	801124a <UART_SetConfig+0x112>
 8011242:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8011246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011248:	e009      	b.n	801125e <UART_SetConfig+0x126>
 801124a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	4b43      	ldr	r3, [pc, #268]	@ (801135c <UART_SetConfig+0x224>)
 8011250:	429a      	cmp	r2, r3
 8011252:	d102      	bne.n	801125a <UART_SetConfig+0x122>
 8011254:	2320      	movs	r3, #32
 8011256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011258:	e001      	b.n	801125e <UART_SetConfig+0x126>
 801125a:	2300      	movs	r3, #0
 801125c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801125e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	4b3e      	ldr	r3, [pc, #248]	@ (801135c <UART_SetConfig+0x224>)
 8011264:	429a      	cmp	r2, r3
 8011266:	d005      	beq.n	8011274 <UART_SetConfig+0x13c>
 8011268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	4b3d      	ldr	r3, [pc, #244]	@ (8011364 <UART_SetConfig+0x22c>)
 801126e:	429a      	cmp	r2, r3
 8011270:	f040 8088 	bne.w	8011384 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011276:	2200      	movs	r2, #0
 8011278:	623b      	str	r3, [r7, #32]
 801127a:	627a      	str	r2, [r7, #36]	@ 0x24
 801127c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011280:	f7fb fdea 	bl	800ce58 <HAL_RCCEx_GetPeriphCLKFreq>
 8011284:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8011286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011288:	2b00      	cmp	r3, #0
 801128a:	f000 80eb 	beq.w	8011464 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801128e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011292:	4a3b      	ldr	r2, [pc, #236]	@ (8011380 <UART_SetConfig+0x248>)
 8011294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011298:	461a      	mov	r2, r3
 801129a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801129c:	fbb3 f3f2 	udiv	r3, r3, r2
 80112a0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80112a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112a4:	685a      	ldr	r2, [r3, #4]
 80112a6:	4613      	mov	r3, r2
 80112a8:	005b      	lsls	r3, r3, #1
 80112aa:	4413      	add	r3, r2
 80112ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d305      	bcc.n	80112be <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80112b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80112b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d903      	bls.n	80112c6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80112be:	2301      	movs	r3, #1
 80112c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80112c4:	e048      	b.n	8011358 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112c8:	2200      	movs	r2, #0
 80112ca:	61bb      	str	r3, [r7, #24]
 80112cc:	61fa      	str	r2, [r7, #28]
 80112ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112d2:	4a2b      	ldr	r2, [pc, #172]	@ (8011380 <UART_SetConfig+0x248>)
 80112d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112d8:	b29b      	uxth	r3, r3
 80112da:	2200      	movs	r2, #0
 80112dc:	613b      	str	r3, [r7, #16]
 80112de:	617a      	str	r2, [r7, #20]
 80112e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80112e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80112e8:	f7ee ffe4 	bl	80002b4 <__aeabi_uldivmod>
 80112ec:	4602      	mov	r2, r0
 80112ee:	460b      	mov	r3, r1
 80112f0:	4610      	mov	r0, r2
 80112f2:	4619      	mov	r1, r3
 80112f4:	f04f 0200 	mov.w	r2, #0
 80112f8:	f04f 0300 	mov.w	r3, #0
 80112fc:	020b      	lsls	r3, r1, #8
 80112fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011302:	0202      	lsls	r2, r0, #8
 8011304:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011306:	6849      	ldr	r1, [r1, #4]
 8011308:	0849      	lsrs	r1, r1, #1
 801130a:	2000      	movs	r0, #0
 801130c:	460c      	mov	r4, r1
 801130e:	4605      	mov	r5, r0
 8011310:	eb12 0804 	adds.w	r8, r2, r4
 8011314:	eb43 0905 	adc.w	r9, r3, r5
 8011318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	2200      	movs	r2, #0
 801131e:	60bb      	str	r3, [r7, #8]
 8011320:	60fa      	str	r2, [r7, #12]
 8011322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011326:	4640      	mov	r0, r8
 8011328:	4649      	mov	r1, r9
 801132a:	f7ee ffc3 	bl	80002b4 <__aeabi_uldivmod>
 801132e:	4602      	mov	r2, r0
 8011330:	460b      	mov	r3, r1
 8011332:	4613      	mov	r3, r2
 8011334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011338:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801133c:	d308      	bcc.n	8011350 <UART_SetConfig+0x218>
 801133e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011340:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011344:	d204      	bcs.n	8011350 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8011346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801134c:	60da      	str	r2, [r3, #12]
 801134e:	e003      	b.n	8011358 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8011350:	2301      	movs	r3, #1
 8011352:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8011356:	e085      	b.n	8011464 <UART_SetConfig+0x32c>
 8011358:	e084      	b.n	8011464 <UART_SetConfig+0x32c>
 801135a:	bf00      	nop
 801135c:	46002400 	.word	0x46002400
 8011360:	cfff69f3 	.word	0xcfff69f3
 8011364:	56002400 	.word	0x56002400
 8011368:	40013800 	.word	0x40013800
 801136c:	40004400 	.word	0x40004400
 8011370:	40004800 	.word	0x40004800
 8011374:	40004c00 	.word	0x40004c00
 8011378:	40005000 	.word	0x40005000
 801137c:	40006400 	.word	0x40006400
 8011380:	0801259c 	.word	0x0801259c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011386:	69db      	ldr	r3, [r3, #28]
 8011388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801138c:	d13c      	bne.n	8011408 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801138e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011390:	2200      	movs	r2, #0
 8011392:	603b      	str	r3, [r7, #0]
 8011394:	607a      	str	r2, [r7, #4]
 8011396:	e9d7 0100 	ldrd	r0, r1, [r7]
 801139a:	f7fb fd5d 	bl	800ce58 <HAL_RCCEx_GetPeriphCLKFreq>
 801139e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80113a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d05e      	beq.n	8011464 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80113a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113aa:	4a39      	ldr	r2, [pc, #228]	@ (8011490 <UART_SetConfig+0x358>)
 80113ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113b0:	461a      	mov	r2, r3
 80113b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80113b8:	005a      	lsls	r2, r3, #1
 80113ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	085b      	lsrs	r3, r3, #1
 80113c0:	441a      	add	r2, r3
 80113c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80113ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80113cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113ce:	2b0f      	cmp	r3, #15
 80113d0:	d916      	bls.n	8011400 <UART_SetConfig+0x2c8>
 80113d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80113d8:	d212      	bcs.n	8011400 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80113da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113dc:	b29b      	uxth	r3, r3
 80113de:	f023 030f 	bic.w	r3, r3, #15
 80113e2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80113e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113e6:	085b      	lsrs	r3, r3, #1
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	f003 0307 	and.w	r3, r3, #7
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80113f2:	4313      	orrs	r3, r2
 80113f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80113f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80113fc:	60da      	str	r2, [r3, #12]
 80113fe:	e031      	b.n	8011464 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8011400:	2301      	movs	r3, #1
 8011402:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011406:	e02d      	b.n	8011464 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801140a:	2200      	movs	r2, #0
 801140c:	469a      	mov	sl, r3
 801140e:	4693      	mov	fp, r2
 8011410:	4650      	mov	r0, sl
 8011412:	4659      	mov	r1, fp
 8011414:	f7fb fd20 	bl	800ce58 <HAL_RCCEx_GetPeriphCLKFreq>
 8011418:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801141a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801141c:	2b00      	cmp	r3, #0
 801141e:	d021      	beq.n	8011464 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011424:	4a1a      	ldr	r2, [pc, #104]	@ (8011490 <UART_SetConfig+0x358>)
 8011426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801142a:	461a      	mov	r2, r3
 801142c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801142e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	085b      	lsrs	r3, r3, #1
 8011438:	441a      	add	r2, r3
 801143a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011442:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011446:	2b0f      	cmp	r3, #15
 8011448:	d909      	bls.n	801145e <UART_SetConfig+0x326>
 801144a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801144c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011450:	d205      	bcs.n	801145e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011454:	b29a      	uxth	r2, r3
 8011456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	60da      	str	r2, [r3, #12]
 801145c:	e002      	b.n	8011464 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 801145e:	2301      	movs	r3, #1
 8011460:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011466:	2201      	movs	r2, #1
 8011468:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801146c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801146e:	2201      	movs	r2, #1
 8011470:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011476:	2200      	movs	r2, #0
 8011478:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801147a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147c:	2200      	movs	r2, #0
 801147e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011480:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011484:	4618      	mov	r0, r3
 8011486:	3750      	adds	r7, #80	@ 0x50
 8011488:	46bd      	mov	sp, r7
 801148a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801148e:	bf00      	nop
 8011490:	0801259c 	.word	0x0801259c

08011494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114a0:	f003 0308 	and.w	r3, r3, #8
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d00a      	beq.n	80114be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	430a      	orrs	r2, r1
 80114bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114c2:	f003 0301 	and.w	r3, r3, #1
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00a      	beq.n	80114e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	430a      	orrs	r2, r1
 80114de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114e4:	f003 0302 	and.w	r3, r3, #2
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00a      	beq.n	8011502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	430a      	orrs	r2, r1
 8011500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011506:	f003 0304 	and.w	r3, r3, #4
 801150a:	2b00      	cmp	r3, #0
 801150c:	d00a      	beq.n	8011524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	430a      	orrs	r2, r1
 8011522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011528:	f003 0310 	and.w	r3, r3, #16
 801152c:	2b00      	cmp	r3, #0
 801152e:	d00a      	beq.n	8011546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	430a      	orrs	r2, r1
 8011544:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801154a:	f003 0320 	and.w	r3, r3, #32
 801154e:	2b00      	cmp	r3, #0
 8011550:	d00a      	beq.n	8011568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	430a      	orrs	r2, r1
 8011566:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801156c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011570:	2b00      	cmp	r3, #0
 8011572:	d01a      	beq.n	80115aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	430a      	orrs	r2, r1
 8011588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801158e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011592:	d10a      	bne.n	80115aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	430a      	orrs	r2, r1
 80115a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00a      	beq.n	80115cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	430a      	orrs	r2, r1
 80115ca:	605a      	str	r2, [r3, #4]
  }
}
 80115cc:	bf00      	nop
 80115ce:	370c      	adds	r7, #12
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b098      	sub	sp, #96	@ 0x60
 80115dc:	af02      	add	r7, sp, #8
 80115de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80115e8:	f7f1 ffa0 	bl	800352c <HAL_GetTick>
 80115ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f003 0308 	and.w	r3, r3, #8
 80115f8:	2b08      	cmp	r3, #8
 80115fa:	d12f      	bne.n	801165c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011600:	9300      	str	r3, [sp, #0]
 8011602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011604:	2200      	movs	r2, #0
 8011606:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f000 f88e 	bl	801172c <UART_WaitOnFlagUntilTimeout>
 8011610:	4603      	mov	r3, r0
 8011612:	2b00      	cmp	r3, #0
 8011614:	d022      	beq.n	801165c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801161c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801161e:	e853 3f00 	ldrex	r3, [r3]
 8011622:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801162a:	653b      	str	r3, [r7, #80]	@ 0x50
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	461a      	mov	r2, r3
 8011632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011634:	647b      	str	r3, [r7, #68]	@ 0x44
 8011636:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011638:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801163a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801163c:	e841 2300 	strex	r3, r2, [r1]
 8011640:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011644:	2b00      	cmp	r3, #0
 8011646:	d1e6      	bne.n	8011616 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2220      	movs	r2, #32
 801164c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011658:	2303      	movs	r3, #3
 801165a:	e063      	b.n	8011724 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f003 0304 	and.w	r3, r3, #4
 8011666:	2b04      	cmp	r3, #4
 8011668:	d149      	bne.n	80116fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801166a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011672:	2200      	movs	r2, #0
 8011674:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f000 f857 	bl	801172c <UART_WaitOnFlagUntilTimeout>
 801167e:	4603      	mov	r3, r0
 8011680:	2b00      	cmp	r3, #0
 8011682:	d03c      	beq.n	80116fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168c:	e853 3f00 	ldrex	r3, [r3]
 8011690:	623b      	str	r3, [r7, #32]
   return(result);
 8011692:	6a3b      	ldr	r3, [r7, #32]
 8011694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	461a      	mov	r2, r3
 80116a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80116a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80116a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116aa:	e841 2300 	strex	r3, r2, [r1]
 80116ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80116b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1e6      	bne.n	8011684 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	3308      	adds	r3, #8
 80116bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	e853 3f00 	ldrex	r3, [r3]
 80116c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	f023 0301 	bic.w	r3, r3, #1
 80116cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	3308      	adds	r3, #8
 80116d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80116d6:	61fa      	str	r2, [r7, #28]
 80116d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116da:	69b9      	ldr	r1, [r7, #24]
 80116dc:	69fa      	ldr	r2, [r7, #28]
 80116de:	e841 2300 	strex	r3, r2, [r1]
 80116e2:	617b      	str	r3, [r7, #20]
   return(result);
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d1e5      	bne.n	80116b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2220      	movs	r2, #32
 80116ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80116fa:	2303      	movs	r3, #3
 80116fc:	e012      	b.n	8011724 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2220      	movs	r2, #32
 8011702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2220      	movs	r2, #32
 801170a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2200      	movs	r2, #0
 8011712:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2200      	movs	r2, #0
 801171e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	3758      	adds	r7, #88	@ 0x58
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	603b      	str	r3, [r7, #0]
 8011738:	4613      	mov	r3, r2
 801173a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801173c:	e04f      	b.n	80117de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011744:	d04b      	beq.n	80117de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011746:	f7f1 fef1 	bl	800352c <HAL_GetTick>
 801174a:	4602      	mov	r2, r0
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	69ba      	ldr	r2, [r7, #24]
 8011752:	429a      	cmp	r2, r3
 8011754:	d302      	bcc.n	801175c <UART_WaitOnFlagUntilTimeout+0x30>
 8011756:	69bb      	ldr	r3, [r7, #24]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d101      	bne.n	8011760 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801175c:	2303      	movs	r3, #3
 801175e:	e04e      	b.n	80117fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f003 0304 	and.w	r3, r3, #4
 801176a:	2b00      	cmp	r3, #0
 801176c:	d037      	beq.n	80117de <UART_WaitOnFlagUntilTimeout+0xb2>
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	2b80      	cmp	r3, #128	@ 0x80
 8011772:	d034      	beq.n	80117de <UART_WaitOnFlagUntilTimeout+0xb2>
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	2b40      	cmp	r3, #64	@ 0x40
 8011778:	d031      	beq.n	80117de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	69db      	ldr	r3, [r3, #28]
 8011780:	f003 0308 	and.w	r3, r3, #8
 8011784:	2b08      	cmp	r3, #8
 8011786:	d110      	bne.n	80117aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	2208      	movs	r2, #8
 801178e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	f000 f838 	bl	8011806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2208      	movs	r2, #8
 801179a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2200      	movs	r2, #0
 80117a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80117a6:	2301      	movs	r3, #1
 80117a8:	e029      	b.n	80117fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	69db      	ldr	r3, [r3, #28]
 80117b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80117b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80117b8:	d111      	bne.n	80117de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80117c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f000 f81e 	bl	8011806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2220      	movs	r2, #32
 80117ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2200      	movs	r2, #0
 80117d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80117da:	2303      	movs	r3, #3
 80117dc:	e00f      	b.n	80117fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	69da      	ldr	r2, [r3, #28]
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	4013      	ands	r3, r2
 80117e8:	68ba      	ldr	r2, [r7, #8]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	bf0c      	ite	eq
 80117ee:	2301      	moveq	r3, #1
 80117f0:	2300      	movne	r3, #0
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	461a      	mov	r2, r3
 80117f6:	79fb      	ldrb	r3, [r7, #7]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d0a0      	beq.n	801173e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80117fc:	2300      	movs	r3, #0
}
 80117fe:	4618      	mov	r0, r3
 8011800:	3710      	adds	r7, #16
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011806:	b480      	push	{r7}
 8011808:	b095      	sub	sp, #84	@ 0x54
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011816:	e853 3f00 	ldrex	r3, [r3]
 801181a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801181c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801181e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	461a      	mov	r2, r3
 801182a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801182c:	643b      	str	r3, [r7, #64]	@ 0x40
 801182e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011830:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011832:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011834:	e841 2300 	strex	r3, r2, [r1]
 8011838:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801183a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801183c:	2b00      	cmp	r3, #0
 801183e:	d1e6      	bne.n	801180e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	3308      	adds	r3, #8
 8011846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011848:	6a3b      	ldr	r3, [r7, #32]
 801184a:	e853 3f00 	ldrex	r3, [r3]
 801184e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011856:	f023 0301 	bic.w	r3, r3, #1
 801185a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	3308      	adds	r3, #8
 8011862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011864:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011866:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011868:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801186a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801186c:	e841 2300 	strex	r3, r2, [r1]
 8011870:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011874:	2b00      	cmp	r3, #0
 8011876:	d1e3      	bne.n	8011840 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801187c:	2b01      	cmp	r3, #1
 801187e:	d118      	bne.n	80118b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	e853 3f00 	ldrex	r3, [r3]
 801188c:	60bb      	str	r3, [r7, #8]
   return(result);
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	f023 0310 	bic.w	r3, r3, #16
 8011894:	647b      	str	r3, [r7, #68]	@ 0x44
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	461a      	mov	r2, r3
 801189c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801189e:	61bb      	str	r3, [r7, #24]
 80118a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a2:	6979      	ldr	r1, [r7, #20]
 80118a4:	69ba      	ldr	r2, [r7, #24]
 80118a6:	e841 2300 	strex	r3, r2, [r1]
 80118aa:	613b      	str	r3, [r7, #16]
   return(result);
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1e6      	bne.n	8011880 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2220      	movs	r2, #32
 80118b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2200      	movs	r2, #0
 80118be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80118c6:	bf00      	nop
 80118c8:	3754      	adds	r7, #84	@ 0x54
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr

080118d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80118d2:	b580      	push	{r7, lr}
 80118d4:	b084      	sub	sp, #16
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80118de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2200      	movs	r2, #0
 80118e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	2200      	movs	r2, #0
 80118ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80118f0:	68f8      	ldr	r0, [r7, #12]
 80118f2:	f7ff fc0b 	bl	801110c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80118f6:	bf00      	nop
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}

080118fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80118fe:	b580      	push	{r7, lr}
 8011900:	b088      	sub	sp, #32
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	e853 3f00 	ldrex	r3, [r3]
 8011912:	60bb      	str	r3, [r7, #8]
   return(result);
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801191a:	61fb      	str	r3, [r7, #28]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	461a      	mov	r2, r3
 8011922:	69fb      	ldr	r3, [r7, #28]
 8011924:	61bb      	str	r3, [r7, #24]
 8011926:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011928:	6979      	ldr	r1, [r7, #20]
 801192a:	69ba      	ldr	r2, [r7, #24]
 801192c:	e841 2300 	strex	r3, r2, [r1]
 8011930:	613b      	str	r3, [r7, #16]
   return(result);
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d1e6      	bne.n	8011906 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2220      	movs	r2, #32
 801193c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2200      	movs	r2, #0
 8011944:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f7ff fbd6 	bl	80110f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801194c:	bf00      	nop
 801194e:	3720      	adds	r7, #32
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011954:	b480      	push	{r7}
 8011956:	b083      	sub	sp, #12
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801195c:	bf00      	nop
 801195e:	370c      	adds	r7, #12
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr

08011968 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011970:	bf00      	nop
 8011972:	370c      	adds	r7, #12
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801197c:	b480      	push	{r7}
 801197e:	b085      	sub	sp, #20
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801198a:	2b01      	cmp	r3, #1
 801198c:	d101      	bne.n	8011992 <HAL_UARTEx_DisableFifoMode+0x16>
 801198e:	2302      	movs	r3, #2
 8011990:	e027      	b.n	80119e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2201      	movs	r2, #1
 8011996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2224      	movs	r2, #36	@ 0x24
 801199e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f022 0201 	bic.w	r2, r2, #1
 80119b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80119c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2200      	movs	r2, #0
 80119c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2220      	movs	r2, #32
 80119d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80119e0:	2300      	movs	r3, #0
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3714      	adds	r7, #20
 80119e6:	46bd      	mov	sp, r7
 80119e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ec:	4770      	bx	lr

080119ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119ee:	b580      	push	{r7, lr}
 80119f0:	b084      	sub	sp, #16
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	6078      	str	r0, [r7, #4]
 80119f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d101      	bne.n	8011a06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011a02:	2302      	movs	r3, #2
 8011a04:	e02d      	b.n	8011a62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2201      	movs	r2, #1
 8011a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2224      	movs	r2, #36	@ 0x24
 8011a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	681a      	ldr	r2, [r3, #0]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	f022 0201 	bic.w	r2, r2, #1
 8011a2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	689b      	ldr	r3, [r3, #8]
 8011a34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	683a      	ldr	r2, [r7, #0]
 8011a3e:	430a      	orrs	r2, r1
 8011a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 f850 	bl	8011ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	68fa      	ldr	r2, [r7, #12]
 8011a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2220      	movs	r2, #32
 8011a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a60:	2300      	movs	r3, #0
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}

08011a6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a6a:	b580      	push	{r7, lr}
 8011a6c:	b084      	sub	sp, #16
 8011a6e:	af00      	add	r7, sp, #0
 8011a70:	6078      	str	r0, [r7, #4]
 8011a72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	d101      	bne.n	8011a82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011a7e:	2302      	movs	r3, #2
 8011a80:	e02d      	b.n	8011ade <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2201      	movs	r2, #1
 8011a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2224      	movs	r2, #36	@ 0x24
 8011a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	681a      	ldr	r2, [r3, #0]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f022 0201 	bic.w	r2, r2, #1
 8011aa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	689b      	ldr	r3, [r3, #8]
 8011ab0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	683a      	ldr	r2, [r7, #0]
 8011aba:	430a      	orrs	r2, r1
 8011abc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f000 f812 	bl	8011ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	68fa      	ldr	r2, [r7, #12]
 8011aca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2220      	movs	r2, #32
 8011ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011adc:	2300      	movs	r3, #0
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3710      	adds	r7, #16
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
	...

08011ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b085      	sub	sp, #20
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d108      	bne.n	8011b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2201      	movs	r2, #1
 8011afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2201      	movs	r2, #1
 8011b04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011b08:	e031      	b.n	8011b6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011b0a:	2308      	movs	r3, #8
 8011b0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011b0e:	2308      	movs	r3, #8
 8011b10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	689b      	ldr	r3, [r3, #8]
 8011b18:	0e5b      	lsrs	r3, r3, #25
 8011b1a:	b2db      	uxtb	r3, r3
 8011b1c:	f003 0307 	and.w	r3, r3, #7
 8011b20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	689b      	ldr	r3, [r3, #8]
 8011b28:	0f5b      	lsrs	r3, r3, #29
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	f003 0307 	and.w	r3, r3, #7
 8011b30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b32:	7bbb      	ldrb	r3, [r7, #14]
 8011b34:	7b3a      	ldrb	r2, [r7, #12]
 8011b36:	4911      	ldr	r1, [pc, #68]	@ (8011b7c <UARTEx_SetNbDataToProcess+0x94>)
 8011b38:	5c8a      	ldrb	r2, [r1, r2]
 8011b3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011b3e:	7b3a      	ldrb	r2, [r7, #12]
 8011b40:	490f      	ldr	r1, [pc, #60]	@ (8011b80 <UARTEx_SetNbDataToProcess+0x98>)
 8011b42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b50:	7bfb      	ldrb	r3, [r7, #15]
 8011b52:	7b7a      	ldrb	r2, [r7, #13]
 8011b54:	4909      	ldr	r1, [pc, #36]	@ (8011b7c <UARTEx_SetNbDataToProcess+0x94>)
 8011b56:	5c8a      	ldrb	r2, [r1, r2]
 8011b58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011b5c:	7b7a      	ldrb	r2, [r7, #13]
 8011b5e:	4908      	ldr	r1, [pc, #32]	@ (8011b80 <UARTEx_SetNbDataToProcess+0x98>)
 8011b60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011b6e:	bf00      	nop
 8011b70:	3714      	adds	r7, #20
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr
 8011b7a:	bf00      	nop
 8011b7c:	080125b4 	.word	0x080125b4
 8011b80:	080125bc 	.word	0x080125bc

08011b84 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af02      	add	r7, sp, #8
 8011b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011b90:	f7f1 fccc 	bl	800352c <HAL_GetTick>
 8011b94:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d102      	bne.n	8011ba2 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	73fb      	strb	r3, [r7, #15]
 8011ba0:	e137      	b.n	8011e12 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4a76      	ldr	r2, [pc, #472]	@ (8011d80 <HAL_XSPI_Init+0x1fc>)
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d008      	beq.n	8011bbe <HAL_XSPI_Init+0x3a>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	4a74      	ldr	r2, [pc, #464]	@ (8011d84 <HAL_XSPI_Init+0x200>)
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d003      	beq.n	8011bbe <HAL_XSPI_Init+0x3a>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	4a73      	ldr	r2, [pc, #460]	@ (8011d88 <HAL_XSPI_Init+0x204>)
 8011bbc:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	4a72      	ldr	r2, [pc, #456]	@ (8011d8c <HAL_XSPI_Init+0x208>)
 8011bc4:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4a6d      	ldr	r2, [pc, #436]	@ (8011d80 <HAL_XSPI_Init+0x1fc>)
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	d008      	beq.n	8011be2 <HAL_XSPI_Init+0x5e>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4a6b      	ldr	r2, [pc, #428]	@ (8011d84 <HAL_XSPI_Init+0x200>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d003      	beq.n	8011be2 <HAL_XSPI_Init+0x5e>
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4a6a      	ldr	r2, [pc, #424]	@ (8011d88 <HAL_XSPI_Init+0x204>)
 8011be0:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	4a66      	ldr	r2, [pc, #408]	@ (8011d80 <HAL_XSPI_Init+0x1fc>)
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d008      	beq.n	8011bfe <HAL_XSPI_Init+0x7a>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	4a64      	ldr	r2, [pc, #400]	@ (8011d84 <HAL_XSPI_Init+0x200>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d003      	beq.n	8011bfe <HAL_XSPI_Init+0x7a>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	4a63      	ldr	r2, [pc, #396]	@ (8011d88 <HAL_XSPI_Init+0x204>)
 8011bfc:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2200      	movs	r2, #0
 8011c02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f040 8102 	bne.w	8011e12 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7f0 fc8a 	bl	8002528 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011c14:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f000 f8ff 	bl	8011e1c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	689a      	ldr	r2, [r3, #8]
 8011c24:	4b5a      	ldr	r3, [pc, #360]	@ (8011d90 <HAL_XSPI_Init+0x20c>)
 8011c26:	4013      	ands	r3, r2
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	68d1      	ldr	r1, [r2, #12]
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	6912      	ldr	r2, [r2, #16]
 8011c30:	0412      	lsls	r2, r2, #16
 8011c32:	4311      	orrs	r1, r2
 8011c34:	687a      	ldr	r2, [r7, #4]
 8011c36:	6952      	ldr	r2, [r2, #20]
 8011c38:	3a01      	subs	r2, #1
 8011c3a:	0212      	lsls	r2, r2, #8
 8011c3c:	4311      	orrs	r1, r2
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	69d2      	ldr	r2, [r2, #28]
 8011c42:	4311      	orrs	r1, r2
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	6812      	ldr	r2, [r2, #0]
 8011c48:	430b      	orrs	r3, r1
 8011c4a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	4a4b      	ldr	r2, [pc, #300]	@ (8011d80 <HAL_XSPI_Init+0x1fc>)
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d00e      	beq.n	8011c74 <HAL_XSPI_Init+0xf0>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8011d84 <HAL_XSPI_Init+0x200>)
 8011c5c:	4293      	cmp	r3, r2
 8011c5e:	d009      	beq.n	8011c74 <HAL_XSPI_Init+0xf0>
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4a48      	ldr	r2, [pc, #288]	@ (8011d88 <HAL_XSPI_Init+0x204>)
 8011c66:	4293      	cmp	r3, r2
 8011c68:	d004      	beq.n	8011c74 <HAL_XSPI_Init+0xf0>
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	4a49      	ldr	r2, [pc, #292]	@ (8011d94 <HAL_XSPI_Init+0x210>)
 8011c70:	4293      	cmp	r3, r2
 8011c72:	d10a      	bne.n	8011c8a <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	689b      	ldr	r3, [r3, #8]
 8011c7a:	f023 0108 	bic.w	r1, r3, #8
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	430a      	orrs	r2, r1
 8011c88:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6a1a      	ldr	r2, [r3, #32]
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	430a      	orrs	r2, r1
 8011c9e:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	691b      	ldr	r3, [r3, #16]
 8011ca6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cae:	041a      	lsls	r2, r3, #16
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	430a      	orrs	r2, r1
 8011cb6:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4a30      	ldr	r2, [pc, #192]	@ (8011d80 <HAL_XSPI_Init+0x1fc>)
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	d00e      	beq.n	8011ce0 <HAL_XSPI_Init+0x15c>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8011d84 <HAL_XSPI_Init+0x200>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d009      	beq.n	8011ce0 <HAL_XSPI_Init+0x15c>
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8011d88 <HAL_XSPI_Init+0x204>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d004      	beq.n	8011ce0 <HAL_XSPI_Init+0x15c>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	4a2e      	ldr	r2, [pc, #184]	@ (8011d94 <HAL_XSPI_Init+0x210>)
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	d10a      	bne.n	8011cf6 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	691b      	ldr	r3, [r3, #16]
 8011ce6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	430a      	orrs	r2, r1
 8011cf4:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011cfe:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	3b01      	subs	r3, #1
 8011d10:	021a      	lsls	r2, r3, #8
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	430a      	orrs	r2, r1
 8011d18:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011d1e:	9300      	str	r3, [sp, #0]
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	2200      	movs	r2, #0
 8011d24:	2120      	movs	r1, #32
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f000 f887 	bl	8011e3a <XSPI_WaitFlagStateUntilTimeout>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011d30:	7bfb      	ldrb	r3, [r7, #15]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d16d      	bne.n	8011e12 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	68db      	ldr	r3, [r3, #12]
 8011d3c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	430a      	orrs	r2, r1
 8011d4a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	4a0e      	ldr	r2, [pc, #56]	@ (8011d8c <HAL_XSPI_Init+0x208>)
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d004      	beq.n	8011d60 <HAL_XSPI_Init+0x1dc>
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8011d98 <HAL_XSPI_Init+0x214>)
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d11d      	bne.n	8011d9c <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011d64:	9300      	str	r3, [sp, #0]
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	2120      	movs	r1, #32
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 f864 	bl	8011e3a <XSPI_WaitFlagStateUntilTimeout>
 8011d72:	4603      	mov	r3, r0
 8011d74:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8011d76:	7bfb      	ldrb	r3, [r7, #15]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00f      	beq.n	8011d9c <HAL_XSPI_Init+0x218>
          {
            return status;
 8011d7c:	7bfb      	ldrb	r3, [r7, #15]
 8011d7e:	e049      	b.n	8011e14 <HAL_XSPI_Init+0x290>
 8011d80:	420d1400 	.word	0x420d1400
 8011d84:	520d1400 	.word	0x520d1400
 8011d88:	420d2400 	.word	0x420d2400
 8011d8c:	420d3400 	.word	0x420d3400
 8011d90:	f8e0c0fc 	.word	0xf8e0c0fc
 8011d94:	520d2400 	.word	0x520d2400
 8011d98:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	689a      	ldr	r2, [r3, #8]
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	430a      	orrs	r2, r1
 8011db0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8011dba:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dc6:	431a      	orrs	r2, r3
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	430a      	orrs	r2, r1
 8011dce:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f042 0201 	orr.w	r2, r2, #1
 8011de0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	699b      	ldr	r3, [r3, #24]
 8011de6:	2b02      	cmp	r3, #2
 8011de8:	d107      	bne.n	8011dfa <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	689a      	ldr	r2, [r3, #8]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	f042 0202 	orr.w	r2, r2, #2
 8011df8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	68db      	ldr	r3, [r3, #12]
 8011dfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011e02:	d103      	bne.n	8011e0c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2201      	movs	r2, #1
 8011e08:	655a      	str	r2, [r3, #84]	@ 0x54
 8011e0a:	e002      	b.n	8011e12 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2202      	movs	r2, #2
 8011e10:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8011e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e14:	4618      	mov	r0, r3
 8011e16:	3710      	adds	r7, #16
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b083      	sub	sp, #12
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	683a      	ldr	r2, [r7, #0]
 8011e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8011e2c:	2300      	movs	r3, #0
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	370c      	adds	r7, #12
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr

08011e3a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8011e3a:	b580      	push	{r7, lr}
 8011e3c:	b084      	sub	sp, #16
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	60f8      	str	r0, [r7, #12]
 8011e42:	60b9      	str	r1, [r7, #8]
 8011e44:	603b      	str	r3, [r7, #0]
 8011e46:	4613      	mov	r3, r2
 8011e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8011e4a:	e01a      	b.n	8011e82 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e4c:	69bb      	ldr	r3, [r7, #24]
 8011e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e52:	d016      	beq.n	8011e82 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e54:	f7f1 fb6a 	bl	800352c <HAL_GetTick>
 8011e58:	4602      	mov	r2, r0
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	1ad3      	subs	r3, r2, r3
 8011e5e:	69ba      	ldr	r2, [r7, #24]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d302      	bcc.n	8011e6a <XSPI_WaitFlagStateUntilTimeout+0x30>
 8011e64:	69bb      	ldr	r3, [r7, #24]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d10b      	bne.n	8011e82 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011e70:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e76:	f043 0201 	orr.w	r2, r3, #1
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8011e7e:	2303      	movs	r3, #3
 8011e80:	e00e      	b.n	8011ea0 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	6a1a      	ldr	r2, [r3, #32]
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	4013      	ands	r3, r2
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	bf14      	ite	ne
 8011e90:	2301      	movne	r3, #1
 8011e92:	2300      	moveq	r3, #0
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	461a      	mov	r2, r3
 8011e98:	79fb      	ldrb	r3, [r7, #7]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d1d6      	bne.n	8011e4c <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011e9e:	2300      	movs	r3, #0
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3710      	adds	r7, #16
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011ea8:	b084      	sub	sp, #16
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b084      	sub	sp, #16
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
 8011eb2:	f107 001c 	add.w	r0, r7, #28
 8011eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8011eba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011ebe:	2b03      	cmp	r3, #3
 8011ec0:	d105      	bne.n	8011ece <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f000 fa8e 	bl	80123f0 <USB_CoreReset>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8011ed8:	7fbb      	ldrb	r3, [r7, #30]
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	d10b      	bne.n	8011ef6 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	689b      	ldr	r3, [r3, #8]
 8011ee2:	f043 0208 	orr.w	r2, r3, #8
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	689b      	ldr	r3, [r3, #8]
 8011eee:	f043 0220 	orr.w	r2, r3, #32
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8011ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3710      	adds	r7, #16
 8011efc:	46bd      	mov	sp, r7
 8011efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011f02:	b004      	add	sp, #16
 8011f04:	4770      	bx	lr

08011f06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011f06:	b480      	push	{r7}
 8011f08:	b083      	sub	sp, #12
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	689b      	ldr	r3, [r3, #8]
 8011f12:	f023 0201 	bic.w	r2, r3, #1
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011f1a:	2300      	movs	r3, #0
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr

08011f28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	460b      	mov	r3, r1
 8011f32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011f34:	2300      	movs	r3, #0
 8011f36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011f44:	78fb      	ldrb	r3, [r7, #3]
 8011f46:	2b01      	cmp	r3, #1
 8011f48:	d115      	bne.n	8011f76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	68db      	ldr	r3, [r3, #12]
 8011f4e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011f56:	200a      	movs	r0, #10
 8011f58:	f7f1 faf4 	bl	8003544 <HAL_Delay>
      ms += 10U;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	330a      	adds	r3, #10
 8011f60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f000 fa36 	bl	80123d4 <USB_GetMode>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d01e      	beq.n	8011fac <USB_SetCurrentMode+0x84>
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	2bc7      	cmp	r3, #199	@ 0xc7
 8011f72:	d9f0      	bls.n	8011f56 <USB_SetCurrentMode+0x2e>
 8011f74:	e01a      	b.n	8011fac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011f76:	78fb      	ldrb	r3, [r7, #3]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d115      	bne.n	8011fa8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011f88:	200a      	movs	r0, #10
 8011f8a:	f7f1 fadb 	bl	8003544 <HAL_Delay>
      ms += 10U;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	330a      	adds	r3, #10
 8011f92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f000 fa1d 	bl	80123d4 <USB_GetMode>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d005      	beq.n	8011fac <USB_SetCurrentMode+0x84>
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2bc7      	cmp	r3, #199	@ 0xc7
 8011fa4:	d9f0      	bls.n	8011f88 <USB_SetCurrentMode+0x60>
 8011fa6:	e001      	b.n	8011fac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011fa8:	2301      	movs	r3, #1
 8011faa:	e005      	b.n	8011fb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	2bc8      	cmp	r3, #200	@ 0xc8
 8011fb0:	d101      	bne.n	8011fb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	e000      	b.n	8011fb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011fb6:	2300      	movs	r3, #0
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011fc0:	b084      	sub	sp, #16
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b086      	sub	sp, #24
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
 8011fca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011fda:	2300      	movs	r3, #0
 8011fdc:	613b      	str	r3, [r7, #16]
 8011fde:	e009      	b.n	8011ff4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	3340      	adds	r3, #64	@ 0x40
 8011fe6:	009b      	lsls	r3, r3, #2
 8011fe8:	4413      	add	r3, r2
 8011fea:	2200      	movs	r2, #0
 8011fec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	3301      	adds	r3, #1
 8011ff2:	613b      	str	r3, [r7, #16]
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	2b0e      	cmp	r3, #14
 8011ff8:	d9f2      	bls.n	8011fe0 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ffe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012006:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801200a:	2b00      	cmp	r3, #0
 801200c:	d11c      	bne.n	8012048 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012014:	685b      	ldr	r3, [r3, #4]
 8012016:	68fa      	ldr	r2, [r7, #12]
 8012018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801201c:	f043 0302 	orr.w	r3, r3, #2
 8012020:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012026:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012032:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801203e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	639a      	str	r2, [r3, #56]	@ 0x38
 8012046:	e011      	b.n	801206c <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801204c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012058:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012064:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012072:	461a      	mov	r2, r3
 8012074:	2300      	movs	r3, #0
 8012076:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8012078:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801207c:	2b03      	cmp	r3, #3
 801207e:	d10d      	bne.n	801209c <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012084:	2b00      	cmp	r3, #0
 8012086:	d104      	bne.n	8012092 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012088:	2100      	movs	r1, #0
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f000 f968 	bl	8012360 <USB_SetDevSpeed>
 8012090:	e008      	b.n	80120a4 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012092:	2101      	movs	r1, #1
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f000 f963 	bl	8012360 <USB_SetDevSpeed>
 801209a:	e003      	b.n	80120a4 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801209c:	2103      	movs	r1, #3
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f000 f95e 	bl	8012360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80120a4:	2110      	movs	r1, #16
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f000 f8fa 	bl	80122a0 <USB_FlushTxFifo>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d001      	beq.n	80120b6 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80120b2:	2301      	movs	r3, #1
 80120b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f000 f924 	bl	8012304 <USB_FlushRxFifo>
 80120bc:	4603      	mov	r3, r0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d001      	beq.n	80120c6 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80120c2:	2301      	movs	r3, #1
 80120c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120cc:	461a      	mov	r2, r3
 80120ce:	2300      	movs	r3, #0
 80120d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120d8:	461a      	mov	r2, r3
 80120da:	2300      	movs	r3, #0
 80120dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120e4:	461a      	mov	r2, r3
 80120e6:	2300      	movs	r3, #0
 80120e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80120ea:	2300      	movs	r3, #0
 80120ec:	613b      	str	r3, [r7, #16]
 80120ee:	e043      	b.n	8012178 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	015a      	lsls	r2, r3, #5
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	4413      	add	r3, r2
 80120f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012102:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012106:	d118      	bne.n	801213a <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d10a      	bne.n	8012124 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	015a      	lsls	r2, r3, #5
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	4413      	add	r3, r2
 8012116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801211a:	461a      	mov	r2, r3
 801211c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012120:	6013      	str	r3, [r2, #0]
 8012122:	e013      	b.n	801214c <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	015a      	lsls	r2, r3, #5
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	4413      	add	r3, r2
 801212c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012130:	461a      	mov	r2, r3
 8012132:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012136:	6013      	str	r3, [r2, #0]
 8012138:	e008      	b.n	801214c <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	015a      	lsls	r2, r3, #5
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	4413      	add	r3, r2
 8012142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012146:	461a      	mov	r2, r3
 8012148:	2300      	movs	r3, #0
 801214a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	015a      	lsls	r2, r3, #5
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	4413      	add	r3, r2
 8012154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012158:	461a      	mov	r2, r3
 801215a:	2300      	movs	r3, #0
 801215c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	015a      	lsls	r2, r3, #5
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	4413      	add	r3, r2
 8012166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801216a:	461a      	mov	r2, r3
 801216c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012170:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	3301      	adds	r3, #1
 8012176:	613b      	str	r3, [r7, #16]
 8012178:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801217c:	461a      	mov	r2, r3
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	4293      	cmp	r3, r2
 8012182:	d3b5      	bcc.n	80120f0 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012184:	2300      	movs	r3, #0
 8012186:	613b      	str	r3, [r7, #16]
 8012188:	e043      	b.n	8012212 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	015a      	lsls	r2, r3, #5
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	4413      	add	r3, r2
 8012192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801219c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80121a0:	d118      	bne.n	80121d4 <USB_DevInit+0x214>
    {
      if (i == 0U)
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d10a      	bne.n	80121be <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	015a      	lsls	r2, r3, #5
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	4413      	add	r3, r2
 80121b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121b4:	461a      	mov	r2, r3
 80121b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80121ba:	6013      	str	r3, [r2, #0]
 80121bc:	e013      	b.n	80121e6 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	015a      	lsls	r2, r3, #5
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	4413      	add	r3, r2
 80121c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121ca:	461a      	mov	r2, r3
 80121cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80121d0:	6013      	str	r3, [r2, #0]
 80121d2:	e008      	b.n	80121e6 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	015a      	lsls	r2, r3, #5
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	4413      	add	r3, r2
 80121dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121e0:	461a      	mov	r2, r3
 80121e2:	2300      	movs	r3, #0
 80121e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	015a      	lsls	r2, r3, #5
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	4413      	add	r3, r2
 80121ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121f2:	461a      	mov	r2, r3
 80121f4:	2300      	movs	r3, #0
 80121f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80121f8:	693b      	ldr	r3, [r7, #16]
 80121fa:	015a      	lsls	r2, r3, #5
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	4413      	add	r3, r2
 8012200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012204:	461a      	mov	r2, r3
 8012206:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801220a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	3301      	adds	r3, #1
 8012210:	613b      	str	r3, [r7, #16]
 8012212:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012216:	461a      	mov	r2, r3
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	4293      	cmp	r3, r2
 801221c:	d3b5      	bcc.n	801218a <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012224:	691b      	ldr	r3, [r3, #16]
 8012226:	68fa      	ldr	r2, [r7, #12]
 8012228:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801222c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012230:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2200      	movs	r2, #0
 8012236:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801223e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012240:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012244:	2b00      	cmp	r3, #0
 8012246:	d105      	bne.n	8012254 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	699b      	ldr	r3, [r3, #24]
 801224c:	f043 0210 	orr.w	r2, r3, #16
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	699a      	ldr	r2, [r3, #24]
 8012258:	4b10      	ldr	r3, [pc, #64]	@ (801229c <USB_DevInit+0x2dc>)
 801225a:	4313      	orrs	r3, r2
 801225c:	687a      	ldr	r2, [r7, #4]
 801225e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012260:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8012264:	2b00      	cmp	r3, #0
 8012266:	d005      	beq.n	8012274 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	699b      	ldr	r3, [r3, #24]
 801226c:	f043 0208 	orr.w	r2, r3, #8
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012274:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012278:	2b01      	cmp	r3, #1
 801227a:	d107      	bne.n	801228c <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	699b      	ldr	r3, [r3, #24]
 8012280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012284:	f043 0304 	orr.w	r3, r3, #4
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801228c:	7dfb      	ldrb	r3, [r7, #23]
}
 801228e:	4618      	mov	r0, r3
 8012290:	3718      	adds	r7, #24
 8012292:	46bd      	mov	sp, r7
 8012294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012298:	b004      	add	sp, #16
 801229a:	4770      	bx	lr
 801229c:	803c3800 	.word	0x803c3800

080122a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80122a0:	b480      	push	{r7}
 80122a2:	b085      	sub	sp, #20
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80122aa:	2300      	movs	r3, #0
 80122ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	3301      	adds	r3, #1
 80122b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80122ba:	d901      	bls.n	80122c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80122bc:	2303      	movs	r3, #3
 80122be:	e01b      	b.n	80122f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	691b      	ldr	r3, [r3, #16]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	daf2      	bge.n	80122ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80122c8:	2300      	movs	r3, #0
 80122ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	019b      	lsls	r3, r3, #6
 80122d0:	f043 0220 	orr.w	r2, r3, #32
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	3301      	adds	r3, #1
 80122dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80122e4:	d901      	bls.n	80122ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80122e6:	2303      	movs	r3, #3
 80122e8:	e006      	b.n	80122f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	691b      	ldr	r3, [r3, #16]
 80122ee:	f003 0320 	and.w	r3, r3, #32
 80122f2:	2b20      	cmp	r3, #32
 80122f4:	d0f0      	beq.n	80122d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3714      	adds	r7, #20
 80122fc:	46bd      	mov	sp, r7
 80122fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012302:	4770      	bx	lr

08012304 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012304:	b480      	push	{r7}
 8012306:	b085      	sub	sp, #20
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801230c:	2300      	movs	r3, #0
 801230e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	3301      	adds	r3, #1
 8012314:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801231c:	d901      	bls.n	8012322 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801231e:	2303      	movs	r3, #3
 8012320:	e018      	b.n	8012354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	691b      	ldr	r3, [r3, #16]
 8012326:	2b00      	cmp	r3, #0
 8012328:	daf2      	bge.n	8012310 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801232a:	2300      	movs	r3, #0
 801232c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2210      	movs	r2, #16
 8012332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	3301      	adds	r3, #1
 8012338:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012340:	d901      	bls.n	8012346 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012342:	2303      	movs	r3, #3
 8012344:	e006      	b.n	8012354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	691b      	ldr	r3, [r3, #16]
 801234a:	f003 0310 	and.w	r3, r3, #16
 801234e:	2b10      	cmp	r3, #16
 8012350:	d0f0      	beq.n	8012334 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012352:	2300      	movs	r3, #0
}
 8012354:	4618      	mov	r0, r3
 8012356:	3714      	adds	r7, #20
 8012358:	46bd      	mov	sp, r7
 801235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235e:	4770      	bx	lr

08012360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012360:	b480      	push	{r7}
 8012362:	b085      	sub	sp, #20
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	460b      	mov	r3, r1
 801236a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	78fb      	ldrb	r3, [r7, #3]
 801237a:	68f9      	ldr	r1, [r7, #12]
 801237c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012380:	4313      	orrs	r3, r2
 8012382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012384:	2300      	movs	r3, #0
}
 8012386:	4618      	mov	r0, r3
 8012388:	3714      	adds	r7, #20
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr

08012392 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012392:	b480      	push	{r7}
 8012394:	b085      	sub	sp, #20
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	68fa      	ldr	r2, [r7, #12]
 80123a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80123ac:	f023 0303 	bic.w	r3, r3, #3
 80123b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80123b8:	685b      	ldr	r3, [r3, #4]
 80123ba:	68fa      	ldr	r2, [r7, #12]
 80123bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80123c0:	f043 0302 	orr.w	r3, r3, #2
 80123c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80123c6:	2300      	movs	r3, #0
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3714      	adds	r7, #20
 80123cc:	46bd      	mov	sp, r7
 80123ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d2:	4770      	bx	lr

080123d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80123d4:	b480      	push	{r7}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	695b      	ldr	r3, [r3, #20]
 80123e0:	f003 0301 	and.w	r3, r3, #1
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	370c      	adds	r7, #12
 80123e8:	46bd      	mov	sp, r7
 80123ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ee:	4770      	bx	lr

080123f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80123f0:	b480      	push	{r7}
 80123f2:	b085      	sub	sp, #20
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80123f8:	2300      	movs	r3, #0
 80123fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	3301      	adds	r3, #1
 8012400:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012408:	d901      	bls.n	801240e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801240a:	2303      	movs	r3, #3
 801240c:	e01b      	b.n	8012446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	691b      	ldr	r3, [r3, #16]
 8012412:	2b00      	cmp	r3, #0
 8012414:	daf2      	bge.n	80123fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012416:	2300      	movs	r3, #0
 8012418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	691b      	ldr	r3, [r3, #16]
 801241e:	f043 0201 	orr.w	r2, r3, #1
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	3301      	adds	r3, #1
 801242a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012432:	d901      	bls.n	8012438 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012434:	2303      	movs	r3, #3
 8012436:	e006      	b.n	8012446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	691b      	ldr	r3, [r3, #16]
 801243c:	f003 0301 	and.w	r3, r3, #1
 8012440:	2b01      	cmp	r3, #1
 8012442:	d0f0      	beq.n	8012426 <USB_CoreReset+0x36>

  return HAL_OK;
 8012444:	2300      	movs	r3, #0
}
 8012446:	4618      	mov	r0, r3
 8012448:	3714      	adds	r7, #20
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr

08012452 <memset>:
 8012452:	4402      	add	r2, r0
 8012454:	4603      	mov	r3, r0
 8012456:	4293      	cmp	r3, r2
 8012458:	d100      	bne.n	801245c <memset+0xa>
 801245a:	4770      	bx	lr
 801245c:	f803 1b01 	strb.w	r1, [r3], #1
 8012460:	e7f9      	b.n	8012456 <memset+0x4>
	...

08012464 <__libc_init_array>:
 8012464:	b570      	push	{r4, r5, r6, lr}
 8012466:	4d0d      	ldr	r5, [pc, #52]	@ (801249c <__libc_init_array+0x38>)
 8012468:	2600      	movs	r6, #0
 801246a:	4c0d      	ldr	r4, [pc, #52]	@ (80124a0 <__libc_init_array+0x3c>)
 801246c:	1b64      	subs	r4, r4, r5
 801246e:	10a4      	asrs	r4, r4, #2
 8012470:	42a6      	cmp	r6, r4
 8012472:	d109      	bne.n	8012488 <__libc_init_array+0x24>
 8012474:	4d0b      	ldr	r5, [pc, #44]	@ (80124a4 <__libc_init_array+0x40>)
 8012476:	2600      	movs	r6, #0
 8012478:	4c0b      	ldr	r4, [pc, #44]	@ (80124a8 <__libc_init_array+0x44>)
 801247a:	f000 f817 	bl	80124ac <_init>
 801247e:	1b64      	subs	r4, r4, r5
 8012480:	10a4      	asrs	r4, r4, #2
 8012482:	42a6      	cmp	r6, r4
 8012484:	d105      	bne.n	8012492 <__libc_init_array+0x2e>
 8012486:	bd70      	pop	{r4, r5, r6, pc}
 8012488:	f855 3b04 	ldr.w	r3, [r5], #4
 801248c:	3601      	adds	r6, #1
 801248e:	4798      	blx	r3
 8012490:	e7ee      	b.n	8012470 <__libc_init_array+0xc>
 8012492:	f855 3b04 	ldr.w	r3, [r5], #4
 8012496:	3601      	adds	r6, #1
 8012498:	4798      	blx	r3
 801249a:	e7f2      	b.n	8012482 <__libc_init_array+0x1e>
 801249c:	080125cc 	.word	0x080125cc
 80124a0:	080125cc 	.word	0x080125cc
 80124a4:	080125cc 	.word	0x080125cc
 80124a8:	080125d0 	.word	0x080125d0

080124ac <_init>:
 80124ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ae:	bf00      	nop
 80124b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124b2:	bc08      	pop	{r3}
 80124b4:	469e      	mov	lr, r3
 80124b6:	4770      	bx	lr

080124b8 <_fini>:
 80124b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ba:	bf00      	nop
 80124bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124be:	bc08      	pop	{r3}
 80124c0:	469e      	mov	lr, r3
 80124c2:	4770      	bx	lr
