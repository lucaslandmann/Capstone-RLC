
RLCMixer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012154  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080123c8  080123c8  000133c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124c8  080124c8  00014030  2**0
                  CONTENTS
  4 .ARM          00000008  080124c8  080124c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124d0  080124d0  00014030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124d0  080124d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080124d4  080124d4  000134d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  080124d8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00033bbc  20000030  08012508  00014030  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20033bec  08012508  00014bec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003367c  00000000  00000000  00014066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005027  00000000  00000000  000476e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b10  00000000  00000000  0004c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021c1  00000000  00000000  0004f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047681  00000000  00000000  000513e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003669f  00000000  00000000  00098a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bcbc5  00000000  00000000  000cf101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0028bcc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf0c  00000000  00000000  0028bd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00297c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000030 	.word	0x20000030
 8000290:	00000000 	.word	0x00000000
 8000294:	080123b0 	.word	0x080123b0

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000034 	.word	0x20000034
 80002b0:	080123b0 	.word	0x080123b0

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b08c      	sub	sp, #48	@ 0x30
 80005d0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

  //code credits start 'yetanotherelectronicschannel'
  delayChannel[0].cf_lim = (int)(time*CB);
 80005d2:	4bb5      	ldr	r3, [pc, #724]	@ (80008a8 <main+0x2dc>)
 80005d4:	edd3 7a00 	vldr	s15, [r3]
 80005d8:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80008ac <main+0x2e0>
 80005dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005e8:	ee17 2a90 	vmov	r2, s15
 80005ec:	4bb0      	ldr	r3, [pc, #704]	@ (80008b0 <main+0x2e4>)
 80005ee:	601a      	str	r2, [r3, #0]
  delayChannel[0].ap_lim = (int)(time*AP);
 80005f0:	4bad      	ldr	r3, [pc, #692]	@ (80008a8 <main+0x2dc>)
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 80008b4 <main+0x2e8>
 80005fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000606:	ee17 2a90 	vmov	r2, s15
 800060a:	4ba9      	ldr	r3, [pc, #676]	@ (80008b0 <main+0x2e4>)
 800060c:	605a      	str	r2, [r3, #4]

  delayChannel[1].cf_lim = (int)(time*CB);
 800060e:	4ba6      	ldr	r3, [pc, #664]	@ (80008a8 <main+0x2dc>)
 8000610:	edd3 7a00 	vldr	s15, [r3]
 8000614:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80008ac <main+0x2e0>
 8000618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800061c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000624:	ee17 2a90 	vmov	r2, s15
 8000628:	4ba1      	ldr	r3, [pc, #644]	@ (80008b0 <main+0x2e4>)
 800062a:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800062e:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
  delayChannel[1].ap_lim = (int)(time*AP);
 8000632:	4b9d      	ldr	r3, [pc, #628]	@ (80008a8 <main+0x2dc>)
 8000634:	edd3 7a00 	vldr	s15, [r3]
 8000638:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80008b4 <main+0x2e8>
 800063c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000640:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000648:	ee17 2a90 	vmov	r2, s15
 800064c:	4b98      	ldr	r3, [pc, #608]	@ (80008b0 <main+0x2e4>)
 800064e:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8000652:	f8c3 24ac 	str.w	r2, [r3, #1196]	@ 0x4ac

  delayChannel[2].cf_lim = (int)(time*CB);
 8000656:	4b94      	ldr	r3, [pc, #592]	@ (80008a8 <main+0x2dc>)
 8000658:	edd3 7a00 	vldr	s15, [r3]
 800065c:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80008ac <main+0x2e0>
 8000660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000664:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800066c:	ee17 2a90 	vmov	r2, s15
 8000670:	4b8f      	ldr	r3, [pc, #572]	@ (80008b0 <main+0x2e4>)
 8000672:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8000676:	f8c3 2950 	str.w	r2, [r3, #2384]	@ 0x950
  delayChannel[2].ap_lim = (int)(time*AP);
 800067a:	4b8b      	ldr	r3, [pc, #556]	@ (80008a8 <main+0x2dc>)
 800067c:	edd3 7a00 	vldr	s15, [r3]
 8000680:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80008b4 <main+0x2e8>
 8000684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000688:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800068c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000690:	ee17 2a90 	vmov	r2, s15
 8000694:	4b86      	ldr	r3, [pc, #536]	@ (80008b0 <main+0x2e4>)
 8000696:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 800069a:	f8c3 2954 	str.w	r2, [r3, #2388]	@ 0x954

  delayChannel[3].cf_lim = (int)(time*CB);
 800069e:	4b82      	ldr	r3, [pc, #520]	@ (80008a8 <main+0x2dc>)
 80006a0:	edd3 7a00 	vldr	s15, [r3]
 80006a4:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80008ac <main+0x2e0>
 80006a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b4:	ee17 2a90 	vmov	r2, s15
 80006b8:	4b7d      	ldr	r3, [pc, #500]	@ (80008b0 <main+0x2e4>)
 80006ba:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80006be:	f8c3 2df8 	str.w	r2, [r3, #3576]	@ 0xdf8
  delayChannel[3].ap_lim = (int)(time*AP);
 80006c2:	4b79      	ldr	r3, [pc, #484]	@ (80008a8 <main+0x2dc>)
 80006c4:	edd3 7a00 	vldr	s15, [r3]
 80006c8:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80008b4 <main+0x2e8>
 80006cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d8:	ee17 2a90 	vmov	r2, s15
 80006dc:	4b74      	ldr	r3, [pc, #464]	@ (80008b0 <main+0x2e4>)
 80006de:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80006e2:	f8c3 2dfc 	str.w	r2, [r3, #3580]	@ 0xdfc

  delayChannel[4].cf_lim = (int)(time*CB);
 80006e6:	4b70      	ldr	r3, [pc, #448]	@ (80008a8 <main+0x2dc>)
 80006e8:	edd3 7a00 	vldr	s15, [r3]
 80006ec:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80008ac <main+0x2e0>
 80006f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006fc:	ee17 2a90 	vmov	r2, s15
 8000700:	4b6b      	ldr	r3, [pc, #428]	@ (80008b0 <main+0x2e4>)
 8000702:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8000706:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
  delayChannel[4].ap_lim = (int)(time*AP);
 800070a:	4b67      	ldr	r3, [pc, #412]	@ (80008a8 <main+0x2dc>)
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80008b4 <main+0x2e8>
 8000714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000718:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800071c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000720:	ee17 2a90 	vmov	r2, s15
 8000724:	4b62      	ldr	r3, [pc, #392]	@ (80008b0 <main+0x2e4>)
 8000726:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 800072a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  delayChannel[5].cf_lim = (int)(time*CB);
 800072e:	4b5e      	ldr	r3, [pc, #376]	@ (80008a8 <main+0x2dc>)
 8000730:	edd3 7a00 	vldr	s15, [r3]
 8000734:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80008ac <main+0x2e0>
 8000738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800073c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000744:	ee17 2a90 	vmov	r2, s15
 8000748:	4b59      	ldr	r3, [pc, #356]	@ (80008b0 <main+0x2e4>)
 800074a:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 800074e:	f8c3 2748 	str.w	r2, [r3, #1864]	@ 0x748
  delayChannel[5].ap_lim = (int)(time*AP);
 8000752:	4b55      	ldr	r3, [pc, #340]	@ (80008a8 <main+0x2dc>)
 8000754:	edd3 7a00 	vldr	s15, [r3]
 8000758:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80008b4 <main+0x2e8>
 800075c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000760:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000768:	ee17 2a90 	vmov	r2, s15
 800076c:	4b50      	ldr	r3, [pc, #320]	@ (80008b0 <main+0x2e4>)
 800076e:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000772:	f8c3 274c 	str.w	r2, [r3, #1868]	@ 0x74c

  delayChannel[0].cf_p = 0;
 8000776:	4b4e      	ldr	r3, [pc, #312]	@ (80008b0 <main+0x2e4>)
 8000778:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800077c:	461a      	mov	r2, r3
 800077e:	2300      	movs	r3, #0
 8000780:	f8c2 34a0 	str.w	r3, [r2, #1184]	@ 0x4a0
  delayChannel[1].cf_p = 0;
 8000784:	4b4a      	ldr	r3, [pc, #296]	@ (80008b0 <main+0x2e4>)
 8000786:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 800078a:	461a      	mov	r2, r3
 800078c:	2300      	movs	r3, #0
 800078e:	f8c2 3948 	str.w	r3, [r2, #2376]	@ 0x948
  delayChannel[2].cf_p = 0;
 8000792:	4b47      	ldr	r3, [pc, #284]	@ (80008b0 <main+0x2e4>)
 8000794:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8000798:	461a      	mov	r2, r3
 800079a:	2300      	movs	r3, #0
 800079c:	f8c2 3df0 	str.w	r3, [r2, #3568]	@ 0xdf0
  delayChannel[3].cf_p = 0;
 80007a0:	4b43      	ldr	r3, [pc, #268]	@ (80008b0 <main+0x2e4>)
 80007a2:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 80007a6:	461a      	mov	r2, r3
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c2 3298 	str.w	r3, [r2, #664]	@ 0x298
  delayChannel[4].cf_p = 0;
 80007ae:	4b40      	ldr	r3, [pc, #256]	@ (80008b0 <main+0x2e4>)
 80007b0:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 80007b4:	461a      	mov	r2, r3
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c2 3740 	str.w	r3, [r2, #1856]	@ 0x740
  delayChannel[5].cf_p = 0;
 80007bc:	4b3c      	ldr	r3, [pc, #240]	@ (80008b0 <main+0x2e4>)
 80007be:	f503 332c 	add.w	r3, r3, #176128	@ 0x2b000
 80007c2:	461a      	mov	r2, r3
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8c2 3be8 	str.w	r3, [r2, #3048]	@ 0xbe8

  delayChannel[0].ap_p = 0;
 80007ca:	4b39      	ldr	r3, [pc, #228]	@ (80008b0 <main+0x2e4>)
 80007cc:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80007d0:	461a      	mov	r2, r3
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c2 34a4 	str.w	r3, [r2, #1188]	@ 0x4a4
  delayChannel[1].ap_p = 0;
 80007d8:	4b35      	ldr	r3, [pc, #212]	@ (80008b0 <main+0x2e4>)
 80007da:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 80007de:	461a      	mov	r2, r3
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c2 394c 	str.w	r3, [r2, #2380]	@ 0x94c
  delayChannel[2].ap_p = 0;
 80007e6:	4b32      	ldr	r3, [pc, #200]	@ (80008b0 <main+0x2e4>)
 80007e8:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80007ec:	461a      	mov	r2, r3
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c2 3df4 	str.w	r3, [r2, #3572]	@ 0xdf4
  delayChannel[3].ap_p = 0;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	@ (80008b0 <main+0x2e4>)
 80007f6:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 80007fa:	461a      	mov	r2, r3
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c2 329c 	str.w	r3, [r2, #668]	@ 0x29c
  delayChannel[4].ap_p = 0;
 8000802:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <main+0x2e4>)
 8000804:	f503 3310 	add.w	r3, r3, #147456	@ 0x24000
 8000808:	461a      	mov	r2, r3
 800080a:	2300      	movs	r3, #0
 800080c:	f8c2 3744 	str.w	r3, [r2, #1860]	@ 0x744
  delayChannel[5].ap_p = 0;
 8000810:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <main+0x2e4>)
 8000812:	f503 332c 	add.w	r3, r3, #176128	@ 0x2b000
 8000816:	461a      	mov	r2, r3
 8000818:	2300      	movs	r3, #0
 800081a:	f8c2 3bec 	str.w	r3, [r2, #3052]	@ 0xbec
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f002 fb8b 	bl	8002f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f973 	bl	8000b0c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000826:	f000 f9dd 	bl	8000be4 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800082a:	f000 fa12 	bl	8000c52 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f000 ff73 	bl	8001718 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000832:	f000 fc01 	bl	8001038 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 8000836:	f000 fbc1 	bl	8000fbc <MX_DMA2D_Init>
  MX_HSPI1_Init();
 800083a:	f000 fc35 	bl	80010a8 <MX_HSPI1_Init>
  MX_I2C2_Init();
 800083e:	f000 fcb1 	bl	80011a4 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8000842:	f000 fcef 	bl	8001224 <MX_ICACHE_Init>
  MX_LTDC_Init();
 8000846:	f000 fd01 	bl	800124c <MX_LTDC_Init>
  MX_RTC_Init();
 800084a:	f000 fd7f 	bl	800134c <MX_RTC_Init>
  MX_TIM3_Init();
 800084e:	f000 fe37 	bl	80014c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000852:	f000 fa0d 	bl	8000c70 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000856:	f000 fee5 	bl	8001624 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800085a:	f000 fdc5 	bl	80013e8 <MX_SAI2_Init>
  MX_ADC4_Init();
 800085e:	f000 fb31 	bl	8000ec4 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000862:	f000 fc5f 	bl	8001124 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000866:	f000 ff29 	bl	80016bc <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800086a:	f000 fe8b 	bl	8001584 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //Begins DMA transfer for first ADC
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1));
 800086e:	220c      	movs	r2, #12
 8000870:	4911      	ldr	r1, [pc, #68]	@ (80008b8 <main+0x2ec>)
 8000872:	4812      	ldr	r0, [pc, #72]	@ (80008bc <main+0x2f0>)
 8000874:	f003 fa36 	bl	8003ce4 <HAL_ADC_Start_DMA>
  //begins DMA transfer for fourth ADC
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4));
 8000878:	2202      	movs	r2, #2
 800087a:	4911      	ldr	r1, [pc, #68]	@ (80008c0 <main+0x2f4>)
 800087c:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <main+0x2f8>)
 800087e:	f003 fa31 	bl	8003ce4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000882:	4811      	ldr	r0, [pc, #68]	@ (80008c8 <main+0x2fc>)
 8000884:	f00e fcc2 	bl	800f20c <HAL_TIM_Base_Start>
  //Config ADC/DAC

  HAL_Delay(2000);
 8000888:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800088c:	f002 fba4 	bl	8002fd8 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000890:	2201      	movs	r2, #1
 8000892:	2104      	movs	r1, #4
 8000894:	480d      	ldr	r0, [pc, #52]	@ (80008cc <main+0x300>)
 8000896:	f007 f963 	bl	8007b60 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800089a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800089e:	f002 fb9b 	bl	8002fd8 <HAL_Delay>

  for(int i = 0; i < sizeof(pcm6260Config); i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80008a6:	e024      	b.n	80008f2 <main+0x326>
 80008a8:	20000000 	.word	0x20000000
 80008ac:	454b2000 	.word	0x454b2000
 80008b0:	20000d80 	.word	0x20000d80
 80008b4:	43f00000 	.word	0x43f00000
 80008b8:	2002c970 	.word	0x2002c970
 80008bc:	2000004c 	.word	0x2000004c
 80008c0:	2002c988 	.word	0x2002c988
 80008c4:	200000d8 	.word	0x200000d8
 80008c8:	200007bc 	.word	0x200007bc
 80008cc:	42021000 	.word	0x42021000
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 80008d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4a7e      	ldr	r2, [pc, #504]	@ (8000ad0 <main+0x504>)
 80008d6:	441a      	add	r2, r3
 80008d8:	2364      	movs	r3, #100	@ 0x64
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2302      	movs	r3, #2
 80008de:	2190      	movs	r1, #144	@ 0x90
 80008e0:	487c      	ldr	r0, [pc, #496]	@ (8000ad4 <main+0x508>)
 80008e2:	f007 fa47 	bl	8007d74 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 80008e6:	200a      	movs	r0, #10
 80008e8:	f002 fb76 	bl	8002fd8 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 80008ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ee:	3301      	adds	r3, #1
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80008f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f4:	2b1d      	cmp	r3, #29
 80008f6:	d9eb      	bls.n	80008d0 <main+0x304>
  }

  HAL_Delay(100);
 80008f8:	2064      	movs	r0, #100	@ 0x64
 80008fa:	f002 fb6d 	bl	8002fd8 <HAL_Delay>
  //Begins DMA transfer for PCM6260
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData));
 80008fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000902:	4975      	ldr	r1, [pc, #468]	@ (8000ad8 <main+0x50c>)
 8000904:	4875      	ldr	r0, [pc, #468]	@ (8000adc <main+0x510>)
 8000906:	f00e f8f7 	bl	800eaf8 <HAL_SAI_Receive_DMA>
  //Begins DMA transfer for CS4334k-QZ
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacDataBuffer, DIM(dacDataBuffer));
 800090a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800090e:	4974      	ldr	r1, [pc, #464]	@ (8000ae0 <main+0x514>)
 8000910:	4874      	ldr	r0, [pc, #464]	@ (8000ae4 <main+0x518>)
 8000912:	f00d ffef 	bl	800e8f4 <HAL_SAI_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t heartBeatTick = HAL_GetTick() + 1000;
 8000916:	f002 fb53 	bl	8002fc0 <HAL_GetTick>
 800091a:	4603      	mov	r3, r0
 800091c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000920:	623b      	str	r3, [r7, #32]
  uint16_t index = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	83fb      	strh	r3, [r7, #30]
  int channelNumber = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	  if(HAL_GetTick() >= heartBeatTick)
 800092a:	f002 fb49 	bl	8002fc0 <HAL_GetTick>
 800092e:	4602      	mov	r2, r0
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	4293      	cmp	r3, r2
 8000934:	d809      	bhi.n	800094a <main+0x37e>
	  {
		 heartBeatTick = HAL_GetTick() + 1000;
 8000936:	f002 fb43 	bl	8002fc0 <HAL_GetTick>
 800093a:	4603      	mov	r3, r0
 800093c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000940:	623b      	str	r3, [r7, #32]
		 HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000942:	2104      	movs	r1, #4
 8000944:	4868      	ldr	r0, [pc, #416]	@ (8000ae8 <main+0x51c>)
 8000946:	f007 f923 	bl	8007b90 <HAL_GPIO_TogglePin>
	  }
	  //Slider/Pot Processing
	  volumeLRPoll(index);
 800094a:	8bfb      	ldrh	r3, [r7, #30]
 800094c:	4618      	mov	r0, r3
 800094e:	f001 f82f 	bl	80019b0 <volumeLRPoll>
	  index++;
 8000952:	8bfb      	ldrh	r3, [r7, #30]
 8000954:	3301      	adds	r3, #1
 8000956:	83fb      	strh	r3, [r7, #30]

	  uint16_t currChannelLR = channels[index % 6].lr >> 2;
 8000958:	8bfa      	ldrh	r2, [r7, #30]
 800095a:	4b64      	ldr	r3, [pc, #400]	@ (8000aec <main+0x520>)
 800095c:	fba3 1302 	umull	r1, r3, r3, r2
 8000960:	0899      	lsrs	r1, r3, #2
 8000962:	460b      	mov	r3, r1
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	440b      	add	r3, r1
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	b29b      	uxth	r3, r3
 800096e:	4619      	mov	r1, r3
 8000970:	4a5f      	ldr	r2, [pc, #380]	@ (8000af0 <main+0x524>)
 8000972:	460b      	mov	r3, r1
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	440b      	add	r3, r1
 8000978:	019b      	lsls	r3, r3, #6
 800097a:	4413      	add	r3, r2
 800097c:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	80fb      	strh	r3, [r7, #6]
//	  {
//		  channels[index % 6].lFloat = (float)pan / 512.0f;
//		  channels[index %6].rFloat = 1;
//	  }

	  if(adcReady)
 8000986:	4b5b      	ldr	r3, [pc, #364]	@ (8000af4 <main+0x528>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d02b      	beq.n	80009e8 <main+0x41c>
	  {
		  //Loads sample data into Structs
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000990:	2300      	movs	r3, #0
 8000992:	83bb      	strh	r3, [r7, #28]
 8000994:	e022      	b.n	80009dc <main+0x410>
		  {
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000996:	2300      	movs	r3, #0
 8000998:	837b      	strh	r3, [r7, #26]
 800099a:	e019      	b.n	80009d0 <main+0x404>
		        {
		            channels[channel].channelData[sample] = signExtend24((uint32_t)(adcData[channelCount*sample + channel]));
 800099c:	4b56      	ldr	r3, [pc, #344]	@ (8000af8 <main+0x52c>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	8b7b      	ldrh	r3, [r7, #26]
 80009a2:	00d9      	lsls	r1, r3, #3
 80009a4:	8bbb      	ldrh	r3, [r7, #28]
 80009a6:	440b      	add	r3, r1
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	8bbc      	ldrh	r4, [r7, #28]
 80009b0:	8b7d      	ldrh	r5, [r7, #26]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 ffe6 	bl	8001984 <signExtend24>
 80009b8:	4602      	mov	r2, r0
 80009ba:	494d      	ldr	r1, [pc, #308]	@ (8000af0 <main+0x524>)
 80009bc:	4623      	mov	r3, r4
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	4423      	add	r3, r4
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	442b      	add	r3, r5
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 80009ca:	8b7b      	ldrh	r3, [r7, #26]
 80009cc:	3301      	adds	r3, #1
 80009ce:	837b      	strh	r3, [r7, #26]
 80009d0:	8b7b      	ldrh	r3, [r7, #26]
 80009d2:	2bff      	cmp	r3, #255	@ 0xff
 80009d4:	d9e2      	bls.n	800099c <main+0x3d0>
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 80009d6:	8bbb      	ldrh	r3, [r7, #28]
 80009d8:	3301      	adds	r3, #1
 80009da:	83bb      	strh	r3, [r7, #28]
 80009dc:	8bbb      	ldrh	r3, [r7, #28]
 80009de:	2b07      	cmp	r3, #7
 80009e0:	d9d9      	bls.n	8000996 <main+0x3ca>
//		            }
		        }
		  }
		  //TODO: apply effects
		  //TODO: mix
		  adcReady = false;
 80009e2:	4b44      	ldr	r3, [pc, #272]	@ (8000af4 <main+0x528>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
	  }
	  if(dacReady)
 80009e8:	4b44      	ldr	r3, [pc, #272]	@ (8000afc <main+0x530>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d09b      	beq.n	800092a <main+0x35e>
	  {
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	833b      	strh	r3, [r7, #24]
 80009f6:	e064      	b.n	8000ac2 <main+0x4f6>
		  {
			  int32_t mixedSignalLeft = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
			  int32_t mixedSignalRight = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	81fb      	strh	r3, [r7, #14]
 8000a04:	e03a      	b.n	8000a7c <main+0x4b0>
			  {
				  float digGain = (float)(channels[currChannel].volumeRunner >> 6) / 512.0f;
 8000a06:	89fa      	ldrh	r2, [r7, #14]
 8000a08:	4939      	ldr	r1, [pc, #228]	@ (8000af0 <main+0x524>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	4413      	add	r3, r2
 8000a10:	019b      	lsls	r3, r3, #6
 8000a12:	440b      	add	r3, r1
 8000a14:	f203 4312 	addw	r3, r3, #1042	@ 0x412
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	099b      	lsrs	r3, r3, #6
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	ee07 3a90 	vmov	s15, r3
 8000a22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a26:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8000b00 <main+0x534>
 8000a2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a2e:	edc7 7a00 	vstr	s15, [r7]
				  digGain = digGain * maxGain;
 8000a32:	edd7 7a00 	vldr	s15, [r7]
 8000a36:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a3e:	edc7 7a00 	vstr	s15, [r7]

				  mixedSignalLeft += channels[currChannel].channelData[sample]; //* digGain * channels[currChannel].lFloat);
 8000a42:	89fa      	ldrh	r2, [r7, #14]
 8000a44:	8b39      	ldrh	r1, [r7, #24]
 8000a46:	482a      	ldr	r0, [pc, #168]	@ (8000af0 <main+0x524>)
 8000a48:	4613      	mov	r3, r2
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	4413      	add	r3, r2
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	440b      	add	r3, r1
 8000a52:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	4413      	add	r3, r2
 8000a5a:	617b      	str	r3, [r7, #20]
				  mixedSignalRight += channels[currChannel].channelData[sample]; //* digGain * channels[currChannel].rFloat);
 8000a5c:	89fa      	ldrh	r2, [r7, #14]
 8000a5e:	8b39      	ldrh	r1, [r7, #24]
 8000a60:	4823      	ldr	r0, [pc, #140]	@ (8000af0 <main+0x524>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	011b      	lsls	r3, r3, #4
 8000a66:	4413      	add	r3, r2
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4413      	add	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 8000a76:	89fb      	ldrh	r3, [r7, #14]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	81fb      	strh	r3, [r7, #14]
 8000a7c:	89fb      	ldrh	r3, [r7, #14]
 8000a7e:	2b05      	cmp	r3, #5
 8000a80:	d9c1      	bls.n	8000a06 <main+0x43a>
			  }
			  mixedSignalLeft = mixedSignalLeft / 6;
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	4a1f      	ldr	r2, [pc, #124]	@ (8000b04 <main+0x538>)
 8000a86:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8a:	17db      	asrs	r3, r3, #31
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
			  mixedSignalRight = mixedSignalRight / 6;
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4a1c      	ldr	r2, [pc, #112]	@ (8000b04 <main+0x538>)
 8000a94:	fb82 1203 	smull	r1, r2, r2, r3
 8000a98:	17db      	asrs	r3, r3, #31
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	613b      	str	r3, [r7, #16]
			  dacData[(sample * 2)] =  mixedSignalLeft;//channels[2].channelData[sample];
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <main+0x53c>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	8b3b      	ldrh	r3, [r7, #24]
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	601a      	str	r2, [r3, #0]
			  dacData[(sample * 2) + 1] = mixedSignalRight;//channels[2].channelData[sample];
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <main+0x53c>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	8b3b      	ldrh	r3, [r7, #24]
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	4413      	add	r3, r2
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	601a      	str	r2, [r3, #0]
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000abc:	8b3b      	ldrh	r3, [r7, #24]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	833b      	strh	r3, [r7, #24]
 8000ac2:	8b3b      	ldrh	r3, [r7, #24]
 8000ac4:	2bff      	cmp	r3, #255	@ 0xff
 8000ac6:	d997      	bls.n	80009f8 <main+0x42c>
		  }
		  dacReady = false;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <main+0x530>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
  {
 8000ace:	e72c      	b.n	800092a <main+0x35e>
 8000ad0:	20000004 	.word	0x20000004
 8000ad4:	20000358 	.word	0x20000358
 8000ad8:	2002c98c 	.word	0x2002c98c
 8000adc:	20000570 	.word	0x20000570
 8000ae0:	2003098c 	.word	0x2003098c
 8000ae4:	200004d8 	.word	0x200004d8
 8000ae8:	42020c00 	.word	0x42020c00
 8000aec:	aaaaaaab 	.word	0xaaaaaaab
 8000af0:	2003198c 	.word	0x2003198c
 8000af4:	20033b8c 	.word	0x20033b8c
 8000af8:	20033b90 	.word	0x20033b90
 8000afc:	20033b8d 	.word	0x20033b8d
 8000b00:	44000000 	.word	0x44000000
 8000b04:	2aaaaaab 	.word	0x2aaaaaab
 8000b08:	20033b94 	.word	0x20033b94

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09e      	sub	sp, #120	@ 0x78
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	2260      	movs	r2, #96	@ 0x60
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f011 fc1b 	bl	8012356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b30:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000b34:	f008 ff62 	bl	80099fc <HAL_PWREx_ControlVoltageScaling>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000b3e:	f000 ffad 	bl	8001a9c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b42:	f008 ff4b 	bl	80099dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b46:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <SystemClock_Config+0xd4>)
 8000b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b4c:	4a24      	ldr	r2, [pc, #144]	@ (8000be0 <SystemClock_Config+0xd4>)
 8000b4e:	f023 0318 	bic.w	r3, r3, #24
 8000b52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000b56:	2307      	movs	r3, #7
 8000b58:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b60:	2381      	movs	r3, #129	@ 0x81
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b72:	2303      	movs	r3, #3
 8000b74:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000b82:	2308      	movs	r3, #8
 8000b84:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f009 f858 	bl	8009c50 <HAL_RCC_OscConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ba6:	f000 ff79 	bl	8001a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	231f      	movs	r3, #31
 8000bac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2103      	movs	r1, #3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f009 ff1e 	bl	800aa08 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bd2:	f000 ff63 	bl	8001a9c <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3778      	adds	r7, #120	@ 0x78
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	46020c00 	.word	0x46020c00

08000be4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0b8      	sub	sp, #224	@ 0xe0
 8000be8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	22e0      	movs	r2, #224	@ 0xe0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f011 fbb0 	bl	8012356 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8000bf6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bfa:	f04f 0301 	mov.w	r3, #1
 8000bfe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000c08:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8000c10:	2303      	movs	r3, #3
 8000c12:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8000c20:	2303      	movs	r3, #3
 8000c22:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8000c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000c32:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00a faec 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000c46:	f000 ff29 	bl	8001a9c <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	37e0      	adds	r7, #224	@ 0xe0
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000c56:	f008 ffbd 	bl	8009bd4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f008 ff5a 	bl	8009b14 <HAL_PWREx_ConfigSupply>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000c66:	f000 ff19 	bl	8001a9c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2220      	movs	r2, #32
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f011 fb6a 	bl	8012356 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c82:	4b82      	ldr	r3, [pc, #520]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000c84:	4a82      	ldr	r2, [pc, #520]	@ (8000e90 <MX_ADC1_Init+0x220>)
 8000c86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c88:	4b80      	ldr	r3, [pc, #512]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000c94:	4b7d      	ldr	r3, [pc, #500]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ca0:	4b7a      	ldr	r3, [pc, #488]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b79      	ldr	r3, [pc, #484]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000cac:	4b77      	ldr	r3, [pc, #476]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cb2:	4b76      	ldr	r3, [pc, #472]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 12;
 8000cba:	4b74      	ldr	r3, [pc, #464]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc0:	4b72      	ldr	r3, [pc, #456]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000cc8:	4b70      	ldr	r3, [pc, #448]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000cca:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000cce:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cd0:	4b6e      	ldr	r3, [pc, #440]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000cd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ce0:	4b6a      	ldr	r3, [pc, #424]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ce6:	4b69      	ldr	r3, [pc, #420]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cec:	4b67      	ldr	r3, [pc, #412]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000cf2:	4b66      	ldr	r3, [pc, #408]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf8:	4b64      	ldr	r3, [pc, #400]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d00:	4862      	ldr	r0, [pc, #392]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000d02:	f002 fd07 	bl	8003714 <HAL_ADC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000d0c:	f000 fec6 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d10:	4b60      	ldr	r3, [pc, #384]	@ (8000e94 <MX_ADC1_Init+0x224>)
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d14:	2306      	movs	r3, #6
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d22:	2304      	movs	r3, #4
 8000d24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4857      	ldr	r0, [pc, #348]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000d30:	f003 fc1e 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000d3a:	f000 feaf 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d3e:	4b56      	ldr	r3, [pc, #344]	@ (8000e98 <MX_ADC1_Init+0x228>)
 8000d40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d42:	230c      	movs	r3, #12
 8000d44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4850      	ldr	r0, [pc, #320]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000d4c:	f003 fc10 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000d56:	f000 fea1 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d5a:	4b50      	ldr	r3, [pc, #320]	@ (8000e9c <MX_ADC1_Init+0x22c>)
 8000d5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d5e:	2312      	movs	r3, #18
 8000d60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4849      	ldr	r0, [pc, #292]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000d68:	f003 fc02 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000d72:	f000 fe93 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d76:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea0 <MX_ADC1_Init+0x230>)
 8000d78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d7a:	2318      	movs	r3, #24
 8000d7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4619      	mov	r1, r3
 8000d82:	4842      	ldr	r0, [pc, #264]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000d84:	f003 fbf4 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000d8e:	f000 fe85 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d92:	4b44      	ldr	r3, [pc, #272]	@ (8000ea4 <MX_ADC1_Init+0x234>)
 8000d94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	483a      	ldr	r0, [pc, #232]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000da2:	f003 fbe5 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000dac:	f000 fe76 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000db0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea8 <MX_ADC1_Init+0x238>)
 8000db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000db4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000db8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4833      	ldr	r0, [pc, #204]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000dc0:	f003 fbd6 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000dca:	f000 fe67 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dce:	4b37      	ldr	r3, [pc, #220]	@ (8000eac <MX_ADC1_Init+0x23c>)
 8000dd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000dd2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000dd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	482b      	ldr	r0, [pc, #172]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000dde:	f003 fbc7 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000de8:	f000 fe58 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dec:	4b30      	ldr	r3, [pc, #192]	@ (8000eb0 <MX_ADC1_Init+0x240>)
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000df0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000df4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4824      	ldr	r0, [pc, #144]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000dfc:	f003 fbb8 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000e06:	f000 fe49 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb4 <MX_ADC1_Init+0x244>)
 8000e0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000e0e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000e12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4619      	mov	r1, r3
 8000e18:	481c      	ldr	r0, [pc, #112]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000e1a:	f003 fba9 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000e24:	f000 fe3a 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e28:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <MX_ADC1_Init+0x248>)
 8000e2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	4619      	mov	r1, r3
 8000e36:	4815      	ldr	r0, [pc, #84]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000e38:	f003 fb9a 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000e42:	f000 fe2b 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <MX_ADC1_Init+0x24c>)
 8000e48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000e4a:	f240 2306 	movw	r3, #518	@ 0x206
 8000e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000e56:	f003 fb8b 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000e60:	f000 fe1c 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e64:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <MX_ADC1_Init+0x250>)
 8000e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000e68:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000e6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <MX_ADC1_Init+0x21c>)
 8000e74:	f003 fb7c 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000e7e:	f000 fe0d 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000004c 	.word	0x2000004c
 8000e90:	42028000 	.word	0x42028000
 8000e94:	04000002 	.word	0x04000002
 8000e98:	08000004 	.word	0x08000004
 8000e9c:	0c000008 	.word	0x0c000008
 8000ea0:	10000010 	.word	0x10000010
 8000ea4:	14000020 	.word	0x14000020
 8000ea8:	1c000080 	.word	0x1c000080
 8000eac:	20000100 	.word	0x20000100
 8000eb0:	2a000400 	.word	0x2a000400
 8000eb4:	2e000800 	.word	0x2e000800
 8000eb8:	32001000 	.word	0x32001000
 8000ebc:	3e008000 	.word	0x3e008000
 8000ec0:	42010000 	.word	0x42010000

08000ec4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2220      	movs	r2, #32
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f011 fa40 	bl	8012356 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000ed6:	4b35      	ldr	r3, [pc, #212]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000ed8:	4a35      	ldr	r2, [pc, #212]	@ (8000fb0 <MX_ADC4_Init+0xec>)
 8000eda:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000edc:	4b33      	ldr	r3, [pc, #204]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee2:	4b32      	ldr	r3, [pc, #200]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee8:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000eee:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000ef0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ef4:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000efc:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000f02:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000f08:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000f10:	4b26      	ldr	r3, [pc, #152]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC4_EXTERNALTRIG_T15_TRGO;
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f18:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8000f1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f24:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f30:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f34:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000f50:	4816      	ldr	r0, [pc, #88]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f52:	f002 fbdf 	bl	8003714 <HAL_ADC_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC4_Init+0x9c>
  {
    Error_Handler();
 8000f5c:	f000 fd9e 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f60:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_ADC4_Init+0xf0>)
 8000f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f7a:	f003 faf9 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC4_Init+0xc4>
  {
    Error_Handler();
 8000f84:	f000 fd8a 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <MX_ADC4_Init+0xf4>)
 8000f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_ADC4_Init+0xe8>)
 8000f96:	f003 faeb 	bl	8004570 <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC4_Init+0xe0>
  {
    Error_Handler();
 8000fa0:	f000 fd7c 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200000d8 	.word	0x200000d8
 8000fb0:	46021000 	.word	0x46021000
 8000fb4:	1c000080 	.word	0x1c000080
 8000fb8:	20000100 	.word	0x20000100

08000fbc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <MX_DMA2D_Init+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000fde:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <MX_DMA2D_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001008:	4809      	ldr	r0, [pc, #36]	@ (8001030 <MX_DMA2D_Init+0x74>)
 800100a:	f005 f9df 	bl	80063cc <HAL_DMA2D_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001014:	f000 fd42 	bl	8001a9c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001018:	2101      	movs	r1, #1
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_DMA2D_Init+0x74>)
 800101c:	f005 fa38 	bl	8006490 <HAL_DMA2D_ConfigLayer>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8001026:	f000 fd39 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000290 	.word	0x20000290
 8001034:	4002b000 	.word	0x4002b000

08001038 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800103e:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <MX_GPDMA1_Init+0x6c>)
 8001040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001044:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <MX_GPDMA1_Init+0x6c>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_GPDMA1_Init+0x6c>)
 8001050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	201d      	movs	r0, #29
 8001062:	f004 fab1 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001066:	201d      	movs	r0, #29
 8001068:	f004 fac8 	bl	80055fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	201e      	movs	r0, #30
 8001072:	f004 faa9 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001076:	201e      	movs	r0, #30
 8001078:	f004 fac0 	bl	80055fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	201f      	movs	r0, #31
 8001082:	f004 faa1 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001086:	201f      	movs	r0, #31
 8001088:	f004 fab8 	bl	80055fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2020      	movs	r0, #32
 8001092:	f004 fa99 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001096:	2020      	movs	r0, #32
 8001098:	f004 fab0 	bl	80055fc <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	46020c00 	.word	0x46020c00

080010a8 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <MX_HSPI1_Init+0x78>)
 80010b0:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010b4:	2204      	movs	r2, #4
 80010b6:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80010c4:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010c8:	221a      	movs	r2, #26
 80010ca:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 80010cc:	4b13      	ldr	r3, [pc, #76]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <MX_HSPI1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_HSPI1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8001108:	4804      	ldr	r0, [pc, #16]	@ (800111c <MX_HSPI1_Init+0x74>)
 800110a:	f010 fcbd 	bl	8011a88 <HAL_XSPI_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8001114:	f000 fcc2 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200002f8 	.word	0x200002f8
 8001120:	420d3400 	.word	0x420d3400

08001124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <MX_I2C1_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <MX_I2C1_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001130:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <MX_I2C1_Init+0x7c>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_I2C1_Init+0x74>)
 800113c:	2201      	movs	r2, #1
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115e:	480e      	ldr	r0, [pc, #56]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001160:	f006 fd6c 	bl	8007c3c <HAL_I2C_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800116a:	f000 fc97 	bl	8001a9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4809      	ldr	r0, [pc, #36]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001172:	f007 fef7 	bl	8008f64 <HAL_I2CEx_ConfigAnalogFilter>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800117c:	f000 fc8e 	bl	8001a9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001184:	f007 ff39 	bl	8008ffa <HAL_I2CEx_ConfigDigitalFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800118e:	f000 fc85 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000358 	.word	0x20000358
 800119c:	40005400 	.word	0x40005400
 80011a0:	20a0c4df 	.word	0x20a0c4df

080011a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011aa:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <MX_I2C2_Init+0x78>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <MX_I2C2_Init+0x7c>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011bc:	2201      	movs	r2, #1
 80011be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011de:	480e      	ldr	r0, [pc, #56]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011e0:	f006 fd2c 	bl	8007c3c <HAL_I2C_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011ea:	f000 fc57 	bl	8001a9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <MX_I2C2_Init+0x74>)
 80011f2:	f007 feb7 	bl	8008f64 <HAL_I2CEx_ConfigAnalogFilter>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011fc:	f000 fc4e 	bl	8001a9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001200:	2100      	movs	r1, #0
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_I2C2_Init+0x74>)
 8001204:	f007 fef9 	bl	8008ffa <HAL_I2CEx_ConfigDigitalFilter>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800120e:	f000 fc45 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200003ac 	.word	0x200003ac
 800121c:	40005800 	.word	0x40005800
 8001220:	20a0c4df 	.word	0x20a0c4df

08001224 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001228:	2000      	movs	r0, #0
 800122a:	f007 ff33 	bl	8009094 <HAL_ICACHE_ConfigAssociativityMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001234:	f000 fc32 	bl	8001a9c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001238:	f007 ff4c 	bl	80090d4 <HAL_ICACHE_Enable>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001242:	f000 fc2b 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	@ 0x38
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2234      	movs	r2, #52	@ 0x34
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f011 f87c 	bl	8012356 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800125e:	4b39      	ldr	r3, [pc, #228]	@ (8001344 <MX_LTDC_Init+0xf8>)
 8001260:	4a39      	ldr	r2, [pc, #228]	@ (8001348 <MX_LTDC_Init+0xfc>)
 8001262:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001264:	4b37      	ldr	r3, [pc, #220]	@ (8001344 <MX_LTDC_Init+0xf8>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800126a:	4b36      	ldr	r3, [pc, #216]	@ (8001344 <MX_LTDC_Init+0xf8>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001270:	4b34      	ldr	r3, [pc, #208]	@ (8001344 <MX_LTDC_Init+0xf8>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001276:	4b33      	ldr	r3, [pc, #204]	@ (8001344 <MX_LTDC_Init+0xf8>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 800127c:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <MX_LTDC_Init+0xf8>)
 800127e:	2203      	movs	r2, #3
 8001280:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001282:	4b30      	ldr	r3, [pc, #192]	@ (8001344 <MX_LTDC_Init+0xf8>)
 8001284:	2203      	movs	r2, #3
 8001286:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001288:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <MX_LTDC_Init+0xf8>)
 800128a:	220b      	movs	r2, #11
 800128c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800128e:	4b2d      	ldr	r3, [pc, #180]	@ (8001344 <MX_LTDC_Init+0xf8>)
 8001290:	220b      	movs	r2, #11
 8001292:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8001294:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <MX_LTDC_Init+0xf8>)
 8001296:	f240 322b 	movw	r2, #811	@ 0x32b
 800129a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 800129c:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <MX_LTDC_Init+0xf8>)
 800129e:	f240 12eb 	movw	r2, #491	@ 0x1eb
 80012a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 80012a4:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <MX_LTDC_Init+0xf8>)
 80012a6:	f240 3233 	movw	r2, #819	@ 0x333
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 80012ac:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <MX_LTDC_Init+0xf8>)
 80012ae:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80012b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80012b4:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <MX_LTDC_Init+0xf8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80012bc:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <MX_LTDC_Init+0xf8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_LTDC_Init+0xf8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012cc:	481d      	ldr	r0, [pc, #116]	@ (8001344 <MX_LTDC_Init+0xf8>)
 80012ce:	f007 ff11 	bl	80090f4 <HAL_LTDC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80012d8:	f000 fbe0 	bl	8001a9c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80012e0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80012e4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80012ea:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80012ee:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80012f0:	2301      	movs	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80012f4:	23ff      	movs	r3, #255	@ 0xff
 80012f6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80012fc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001300:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001302:	2307      	movs	r3, #7
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <MX_LTDC_Init+0xf8>)
 800132c:	f008 f874 	bl	8009418 <HAL_LTDC_ConfigLayer>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001336:	f000 fbb1 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3738      	adds	r7, #56	@ 0x38
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000400 	.word	0x20000400
 8001348:	40016800 	.word	0x40016800

0800134c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]
 8001362:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001364:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_RTC_Init+0x94>)
 8001366:	4a1f      	ldr	r2, [pc, #124]	@ (80013e4 <MX_RTC_Init+0x98>)
 8001368:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <MX_RTC_Init+0x94>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <MX_RTC_Init+0x94>)
 8001372:	227f      	movs	r2, #127	@ 0x7f
 8001374:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_RTC_Init+0x94>)
 8001378:	22ff      	movs	r2, #255	@ 0xff
 800137a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <MX_RTC_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_RTC_Init+0x94>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <MX_RTC_Init+0x94>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_RTC_Init+0x94>)
 8001390:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001394:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_RTC_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800139c:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <MX_RTC_Init+0x94>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013a2:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <MX_RTC_Init+0x94>)
 80013a4:	f00c ff34 	bl	800e210 <HAL_RTC_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80013ae:	f000 fb75 	bl	8001a9c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <MX_RTC_Init+0x94>)
 80013c8:	f00d f850 	bl	800e46c <HAL_RTCEx_PrivilegeModeSet>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80013d2:	f000 fb63 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200004a8 	.word	0x200004a8
 80013e4:	46007800 	.word	0x46007800

080013e8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 80013ee:	4a31      	ldr	r2, [pc, #196]	@ (80014b4 <MX_SAI2_Init+0xcc>)
 80013f0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80013f2:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80013fe:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001404:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800140a:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 8001412:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001416:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001418:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 800141e:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 8001420:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001424:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001426:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 8001428:	2200      	movs	r2, #0
 800142a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 800142e:	2200      	movs	r2, #0
 8001430:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 8001434:	2210      	movs	r2, #16
 8001436:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001438:	2302      	movs	r3, #2
 800143a:	2202      	movs	r2, #2
 800143c:	2101      	movs	r1, #1
 800143e:	481c      	ldr	r0, [pc, #112]	@ (80014b0 <MX_SAI2_Init+0xc8>)
 8001440:	f00d f842 	bl	800e4c8 <HAL_SAI_InitProtocol>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_SAI2_Init+0x66>
  {
    Error_Handler();
 800144a:	f000 fb27 	bl	8001a9c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800144e:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 8001450:	4a1a      	ldr	r2, [pc, #104]	@ (80014bc <MX_SAI2_Init+0xd4>)
 8001452:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 8001456:	2201      	movs	r2, #1
 8001458:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 800146e:	2202      	movs	r2, #2
 8001470:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 8001474:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001478:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 8001482:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001486:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 800148a:	2200      	movs	r2, #0
 800148c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 8001490:	2200      	movs	r2, #0
 8001492:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001494:	2308      	movs	r3, #8
 8001496:	2202      	movs	r2, #2
 8001498:	2100      	movs	r1, #0
 800149a:	4807      	ldr	r0, [pc, #28]	@ (80014b8 <MX_SAI2_Init+0xd0>)
 800149c:	f00d f814 	bl	800e4c8 <HAL_SAI_InitProtocol>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_SAI2_Init+0xc2>
  {
    Error_Handler();
 80014a6:	f000 faf9 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200004d8 	.word	0x200004d8
 80014b4:	40015804 	.word	0x40015804
 80014b8:	20000570 	.word	0x20000570
 80014bc:	40015824 	.word	0x40015824

080014c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <MX_TIM3_Init+0xbc>)
 80014e6:	4a26      	ldr	r2, [pc, #152]	@ (8001580 <MX_TIM3_Init+0xc0>)
 80014e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <MX_TIM3_Init+0xbc>)
 80014ec:	22a0      	movs	r2, #160	@ 0xa0
 80014ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_TIM3_Init+0xbc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_TIM3_Init+0xbc>)
 80014f8:	2264      	movs	r2, #100	@ 0x64
 80014fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_TIM3_Init+0xbc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_TIM3_Init+0xbc>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001508:	481c      	ldr	r0, [pc, #112]	@ (800157c <MX_TIM3_Init+0xbc>)
 800150a:	f00d ffb7 	bl	800f47c <HAL_TIM_PWM_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001514:	f000 fac2 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	4815      	ldr	r0, [pc, #84]	@ (800157c <MX_TIM3_Init+0xbc>)
 8001528:	f00f f904 	bl	8010734 <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001532:	f000 fab3 	bl	8001a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001536:	2360      	movs	r3, #96	@ 0x60
 8001538:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 800153a:	234b      	movs	r3, #75	@ 0x4b
 800153c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001546:	463b      	mov	r3, r7
 8001548:	220c      	movs	r2, #12
 800154a:	4619      	mov	r1, r3
 800154c:	480b      	ldr	r0, [pc, #44]	@ (800157c <MX_TIM3_Init+0xbc>)
 800154e:	f00e f93b 	bl	800f7c8 <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001558:	f000 faa0 	bl	8001a9c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 800155c:	4b07      	ldr	r3, [pc, #28]	@ (800157c <MX_TIM3_Init+0xbc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	69da      	ldr	r2, [r3, #28]
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <MX_TIM3_Init+0xbc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800156a:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800156c:	4803      	ldr	r0, [pc, #12]	@ (800157c <MX_TIM3_Init+0xbc>)
 800156e:	f001 f857 	bl	8002620 <HAL_TIM_MspPostInit>

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000770 	.word	0x20000770
 8001580:	40000400 	.word	0x40000400

08001584 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <MX_TIM15_Init+0x98>)
 80015a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <MX_TIM15_Init+0x9c>)
 80015a6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <MX_TIM15_Init+0x98>)
 80015aa:	221a      	movs	r2, #26
 80015ac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <MX_TIM15_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 80015b4:	4b19      	ldr	r3, [pc, #100]	@ (800161c <MX_TIM15_Init+0x98>)
 80015b6:	2231      	movs	r2, #49	@ 0x31
 80015b8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <MX_TIM15_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <MX_TIM15_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <MX_TIM15_Init+0x98>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80015cc:	4813      	ldr	r0, [pc, #76]	@ (800161c <MX_TIM15_Init+0x98>)
 80015ce:	f00d fdc6 	bl	800f15e <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 fa60 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <MX_TIM15_Init+0x98>)
 80015ea:	f00e fa01 	bl	800f9f0 <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80015f4:	f000 fa52 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015f8:	2320      	movs	r3, #32
 80015fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_TIM15_Init+0x98>)
 8001606:	f00f f895 	bl	8010734 <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001610:	f000 fa44 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200007bc 	.word	0x200007bc
 8001620:	40014000 	.word	0x40014000

08001624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <MX_USART1_UART_Init+0x94>)
 800162c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800166c:	4811      	ldr	r0, [pc, #68]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 800166e:	f00f f969 	bl	8010944 <HAL_UART_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001678:	f000 fa10 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 8001680:	f010 f937 	bl	80118f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800168a:	f000 fa07 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168e:	2100      	movs	r1, #0
 8001690:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 8001692:	f010 f96c 	bl	801196e <HAL_UARTEx_SetRxFifoThreshold>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800169c:	f000 f9fe 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <MX_USART1_UART_Init+0x90>)
 80016a2:	f010 f8ed 	bl	8011880 <HAL_UARTEx_DisableFifoMode>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016ac:	f000 f9f6 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000808 	.word	0x20000808
 80016b8:	40013800 	.word	0x40013800

080016bc <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016c2:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80016c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80016c6:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016c8:	2209      	movs	r2, #9
 80016ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016d4:	2203      	movs	r2, #3
 80016d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016da:	2200      	movs	r2, #0
 80016dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	@ (8001710 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80016fe:	f008 f83c 	bl	800977a <HAL_PCD_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8001708:	f000 f9c8 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000089c 	.word	0x2000089c
 8001714:	42040000 	.word	0x42040000

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08e      	sub	sp, #56	@ 0x38
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172e:	4b8c      	ldr	r3, [pc, #560]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001734:	4a8a      	ldr	r2, [pc, #552]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001736:	f043 0310 	orr.w	r3, r3, #16
 800173a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800173e:	4b88      	ldr	r3, [pc, #544]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	623b      	str	r3, [r7, #32]
 800174a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174c:	4b84      	ldr	r3, [pc, #528]	@ (8001960 <MX_GPIO_Init+0x248>)
 800174e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001752:	4a83      	ldr	r2, [pc, #524]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800175c:	4b80      	ldr	r3, [pc, #512]	@ (8001960 <MX_GPIO_Init+0x248>)
 800175e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176a:	4b7d      	ldr	r3, [pc, #500]	@ (8001960 <MX_GPIO_Init+0x248>)
 800176c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001770:	4a7b      	ldr	r2, [pc, #492]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001772:	f043 0320 	orr.w	r3, r3, #32
 8001776:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800177a:	4b79      	ldr	r3, [pc, #484]	@ (8001960 <MX_GPIO_Init+0x248>)
 800177c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001788:	4b75      	ldr	r3, [pc, #468]	@ (8001960 <MX_GPIO_Init+0x248>)
 800178a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178e:	4a74      	ldr	r2, [pc, #464]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001794:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001798:	4b71      	ldr	r3, [pc, #452]	@ (8001960 <MX_GPIO_Init+0x248>)
 800179a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001960 <MX_GPIO_Init+0x248>)
 80017a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ac:	4a6c      	ldr	r2, [pc, #432]	@ (8001960 <MX_GPIO_Init+0x248>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001960 <MX_GPIO_Init+0x248>)
 80017b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b66      	ldr	r3, [pc, #408]	@ (8001960 <MX_GPIO_Init+0x248>)
 80017c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ca:	4a65      	ldr	r2, [pc, #404]	@ (8001960 <MX_GPIO_Init+0x248>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017d4:	4b62      	ldr	r3, [pc, #392]	@ (8001960 <MX_GPIO_Init+0x248>)
 80017d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001960 <MX_GPIO_Init+0x248>)
 80017e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e8:	4a5d      	ldr	r2, [pc, #372]	@ (8001960 <MX_GPIO_Init+0x248>)
 80017ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001960 <MX_GPIO_Init+0x248>)
 80017f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	4b57      	ldr	r3, [pc, #348]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001802:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001806:	4a56      	ldr	r2, [pc, #344]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001810:	4b53      	ldr	r3, [pc, #332]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800181e:	4b50      	ldr	r3, [pc, #320]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001824:	4a4e      	ldr	r2, [pc, #312]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800182e:	4b4c      	ldr	r3, [pc, #304]	@ (8001960 <MX_GPIO_Init+0x248>)
 8001830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2104      	movs	r1, #4
 8001840:	4848      	ldr	r0, [pc, #288]	@ (8001964 <MX_GPIO_Init+0x24c>)
 8001842:	f006 f98d 	bl	8007b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2110      	movs	r1, #16
 800184a:	4846      	ldr	r0, [pc, #280]	@ (8001964 <MX_GPIO_Init+0x24c>)
 800184c:	f006 f988 	bl	8007b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2114      	movs	r1, #20
 8001854:	4844      	ldr	r0, [pc, #272]	@ (8001968 <MX_GPIO_Init+0x250>)
 8001856:	f006 f983 	bl	8007b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 800185a:	2314      	movs	r3, #20
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	483c      	ldr	r0, [pc, #240]	@ (8001964 <MX_GPIO_Init+0x24c>)
 8001872:	f005 ff9d 	bl	80077b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001876:	2320      	movs	r3, #32
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800187a:	4b3c      	ldr	r3, [pc, #240]	@ (800196c <MX_GPIO_Init+0x254>)
 800187c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001886:	4619      	mov	r1, r3
 8001888:	4836      	ldr	r0, [pc, #216]	@ (8001964 <MX_GPIO_Init+0x24c>)
 800188a:	f005 ff91 	bl	80077b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800188e:	2302      	movs	r3, #2
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001892:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <MX_GPIO_Init+0x258>)
 8001894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189e:	4619      	mov	r1, r3
 80018a0:	4834      	ldr	r0, [pc, #208]	@ (8001974 <MX_GPIO_Init+0x25c>)
 80018a2:	f005 ff85 	bl	80077b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 80018a6:	2310      	movs	r3, #16
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018aa:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <MX_GPIO_Init+0x260>)
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	482e      	ldr	r0, [pc, #184]	@ (8001974 <MX_GPIO_Init+0x25c>)
 80018ba:	f005 ff79 	bl	80077b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 80018be:	2314      	movs	r3, #20
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d2:	4619      	mov	r1, r3
 80018d4:	4824      	ldr	r0, [pc, #144]	@ (8001968 <MX_GPIO_Init+0x250>)
 80018d6:	f005 ff6b 	bl	80077b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 80018da:	2380      	movs	r3, #128	@ 0x80
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ea:	4619      	mov	r1, r3
 80018ec:	481e      	ldr	r0, [pc, #120]	@ (8001968 <MX_GPIO_Init+0x250>)
 80018ee:	f005 ff5f 	bl	80077b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80018f2:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001904:	4619      	mov	r1, r3
 8001906:	481d      	ldr	r0, [pc, #116]	@ (800197c <MX_GPIO_Init+0x264>)
 8001908:	f005 ff52 	bl	80077b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 800190c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191e:	4619      	mov	r1, r3
 8001920:	4817      	ldr	r0, [pc, #92]	@ (8001980 <MX_GPIO_Init+0x268>)
 8001922:	f005 ff45 	bl	80077b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	200c      	movs	r0, #12
 800192c:	f003 fe4c 	bl	80055c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001930:	200c      	movs	r0, #12
 8001932:	f003 fe63 	bl	80055fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	200f      	movs	r0, #15
 800193c:	f003 fe44 	bl	80055c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001940:	200f      	movs	r0, #15
 8001942:	f003 fe5b 	bl	80055fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2010      	movs	r0, #16
 800194c:	f003 fe3c 	bl	80055c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001950:	2010      	movs	r0, #16
 8001952:	f003 fe53 	bl	80055fc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001956:	bf00      	nop
 8001958:	3738      	adds	r7, #56	@ 0x38
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	46020c00 	.word	0x46020c00
 8001964:	42021000 	.word	0x42021000
 8001968:	42020c00 	.word	0x42020c00
 800196c:	10110000 	.word	0x10110000
 8001970:	10310000 	.word	0x10310000
 8001974:	42020000 	.word	0x42020000
 8001978:	10210000 	.word	0x10210000
 800197c:	42021800 	.word	0x42021800
 8001980:	42020400 	.word	0x42020400

08001984 <signExtend24>:

/* USER CODE BEGIN 4 */

static inline int32_t signExtend24(uint32_t value)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    return (int32_t)((value & (1 << 23)) ? value | 0xFF000000 : value & 0x007FFFFF);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <signExtend24+0x1a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800199c:	e002      	b.n	80019a4 <signExtend24+0x20>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <volumeLRPoll>:

static void volumeLRPoll(uint16_t index)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
//	  //Channel 5 LR
//	  channels[4].lr = adcGroup4[c5LR];
//
//	  //Channel 6 LR
//	  channels[5].lr = adcGroup4[c6LR];
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	adcReady = true;
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <HAL_SAI_RxHalfCpltCallback+0x20>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[0];
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_SAI_RxHalfCpltCallback+0x24>)
 80019d8:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80019da:	601a      	str	r2, [r3, #0]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20033b8c 	.word	0x20033b8c
 80019ec:	20033b90 	.word	0x20033b90
 80019f0:	2002c98c 	.word	0x2002c98c

080019f4 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	adcReady = true;
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_SAI_RxCpltCallback+0x20>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[sampleSize * (channelCount / 2)];
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_SAI_RxCpltCallback+0x24>)
 8001a04:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <HAL_SAI_RxCpltCallback+0x28>)
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	20033b8c 	.word	0x20033b8c
 8001a18:	20033b90 	.word	0x20033b90
 8001a1c:	2002e98c 	.word	0x2002e98c

08001a20 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_SAI_TxHalfCpltCallback+0x20>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[0];
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_SAI_TxHalfCpltCallback+0x24>)
 8001a30:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <HAL_SAI_TxHalfCpltCallback+0x28>)
 8001a32:	601a      	str	r2, [r3, #0]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	20033b8d 	.word	0x20033b8d
 8001a44:	20033b94 	.word	0x20033b94
 8001a48:	2003098c 	.word	0x2003098c

08001a4c <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_SAI_TxCpltCallback+0x20>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[sampleSize];
 8001a5a:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_SAI_TxCpltCallback+0x24>)
 8001a5c:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <HAL_SAI_TxCpltCallback+0x28>)
 8001a5e:	601a      	str	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	20033b8d 	.word	0x20033b8d
 8001a70:	20033b94 	.word	0x20033b94
 8001a74:	2003118c 	.word	0x2003118c

08001a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a8a:	f001 fa85 	bl	8002f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40001000 	.word	0x40001000

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <Error_Handler+0x8>

08001aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_MspInit+0x30>)
 8001ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ab4:	4a08      	ldr	r2, [pc, #32]	@ (8001ad8 <HAL_MspInit+0x30>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_MspInit+0x30>)
 8001ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001acc:	f008 f892 	bl	8009bf4 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	46020c00 	.word	0x46020c00

08001adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0e4      	sub	sp, #400	@ 0x190
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001ae6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001aea:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  DMA_TriggerConfTypeDef TriggerConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001afc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001b00:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001b04:	4618      	mov	r0, r3
 8001b06:	23e0      	movs	r3, #224	@ 0xe0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	f010 fc23 	bl	8012356 <memset>
  if(hadc->Instance==ADC1)
 8001b10:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001b14:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4aa1      	ldr	r2, [pc, #644]	@ (8001da4 <HAL_ADC_MspInit+0x2c8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	f040 8152 	bne.w	8001dc8 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001b24:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001b28:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8001b2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001b38:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001b3c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001b40:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b44:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f009 fb63 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001b58:	f7ff ffa0 	bl	8001a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b5c:	4b92      	ldr	r3, [pc, #584]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b62:	4a91      	ldr	r2, [pc, #580]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001b64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b6c:	4b8e      	ldr	r3, [pc, #568]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b72:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001b76:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001b7a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001b84:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b88:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	4b87      	ldr	r3, [pc, #540]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b90:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b9a:	4b83      	ldr	r3, [pc, #524]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba0:	f003 0204 	and.w	r2, r3, #4
 8001ba4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001ba8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001bb2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001bb6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	4b7b      	ldr	r3, [pc, #492]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bbe:	4a7a      	ldr	r2, [pc, #488]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bc8:	4b77      	ldr	r3, [pc, #476]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bce:	f003 0201 	and.w	r2, r3, #1
 8001bd2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001bd6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001be0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001be4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	4b70      	ldr	r3, [pc, #448]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bec:	4a6e      	ldr	r2, [pc, #440]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8001da8 <HAL_ADC_MspInit+0x2cc>)
 8001bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfc:	f003 0202 	and.w	r2, r3, #2
 8001c00:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001c04:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001c0e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001c12:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8001c14:	230f      	movs	r3, #15
 8001c16:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	485f      	ldr	r0, [pc, #380]	@ (8001dac <HAL_ADC_MspInit+0x2d0>)
 8001c2e:	f005 fdbf 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8001c32:	23ed      	movs	r3, #237	@ 0xed
 8001c34:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4859      	ldr	r0, [pc, #356]	@ (8001db0 <HAL_ADC_MspInit+0x2d4>)
 8001c4c:	f005 fdb0 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8001c50:	2303      	movs	r3, #3
 8001c52:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c56:	2303      	movs	r3, #3
 8001c58:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001c66:	4619      	mov	r1, r3
 8001c68:	4852      	ldr	r0, [pc, #328]	@ (8001db4 <HAL_ADC_MspInit+0x2d8>)
 8001c6a:	f005 fda1 	bl	80077b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001c6e:	2321      	movs	r3, #33	@ 0x21
 8001c70:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001c8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001c90:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001c9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.SrcBurstLength = 1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.DestBurstLength = 1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001cae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cb2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8001cc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ccc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8001cd0:	232b      	movs	r3, #43	@ 0x2b
 8001cd2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001ce2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ce6:	4934      	ldr	r1, [pc, #208]	@ (8001db8 <HAL_ADC_MspInit+0x2dc>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 fe3f 	bl	800696c <HAL_DMAEx_List_BuildNode>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 8001cf4:	f7ff fed2 	bl	8001a9c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8001db8 <HAL_ADC_MspInit+0x2dc>)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	482f      	ldr	r0, [pc, #188]	@ (8001dbc <HAL_ADC_MspInit+0x2e0>)
 8001cfe:	f004 fe61 	bl	80069c4 <HAL_DMAEx_List_InsertNode>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 8001d08:	f7ff fec8 	bl	8001a9c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001d0c:	482b      	ldr	r0, [pc, #172]	@ (8001dbc <HAL_ADC_MspInit+0x2e0>)
 8001d0e:	f004 ff22 	bl	8006b56 <HAL_DMAEx_List_SetCircularMode>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 8001d18:	f7ff fec0 	bl	8001a9c <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001d1c:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d1e:	4a29      	ldr	r2, [pc, #164]	@ (8001dc4 <HAL_ADC_MspInit+0x2e8>)
 8001d20:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001d22:	4b27      	ldr	r3, [pc, #156]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001d28:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001d2e:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001d34:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001d3a:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d3c:	2281      	movs	r2, #129	@ 0x81
 8001d3e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001d40:	481f      	ldr	r0, [pc, #124]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d42:	f004 fc53 	bl	80065ec <HAL_DMAEx_List_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8001d4c:	f7ff fea6 	bl	8001a9c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001d50:	491a      	ldr	r1, [pc, #104]	@ (8001dbc <HAL_ADC_MspInit+0x2e0>)
 8001d52:	481b      	ldr	r0, [pc, #108]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d54:	f004 ff60 	bl	8006c18 <HAL_DMAEx_List_LinkQ>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8001d5e:	f7ff fe9d 	bl	8001a9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001d62:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d66:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a14      	ldr	r2, [pc, #80]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d6e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001d70:	4a13      	ldr	r2, [pc, #76]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d72:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d76:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001d7e:	2110      	movs	r1, #16
 8001d80:	480f      	ldr	r0, [pc, #60]	@ (8001dc0 <HAL_ADC_MspInit+0x2e4>)
 8001d82:	f004 f841 	bl	8005e08 <HAL_DMA_ConfigChannelAttributes>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001d8c:	f7ff fe86 	bl	8001a9c <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2025      	movs	r0, #37	@ 0x25
 8001d96:	f003 fc17 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d9a:	2025      	movs	r0, #37	@ 0x25
 8001d9c:	f003 fc2e 	bl	80055fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001da0:	e0d5      	b.n	8001f4e <HAL_ADC_MspInit+0x472>
 8001da2:	bf00      	nop
 8001da4:	42028000 	.word	0x42028000
 8001da8:	46020c00 	.word	0x46020c00
 8001dac:	42020800 	.word	0x42020800
 8001db0:	42020000 	.word	0x42020000
 8001db4:	42020400 	.word	0x42020400
 8001db8:	20000164 	.word	0x20000164
 8001dbc:	20000188 	.word	0x20000188
 8001dc0:	200001a0 	.word	0x200001a0
 8001dc4:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001dc8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001dcc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a60      	ldr	r2, [pc, #384]	@ (8001f58 <HAL_ADC_MspInit+0x47c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	f040 80b9 	bne.w	8001f4e <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001ddc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001de0:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8001de4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001df0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001df4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001df8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dfc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e00:	f107 0320 	add.w	r3, r7, #32
 8001e04:	4618      	mov	r0, r3
 8001e06:	f009 fa07 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001e10:	f7ff fe44 	bl	8001a9c <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001e14:	4b51      	ldr	r3, [pc, #324]	@ (8001f5c <HAL_ADC_MspInit+0x480>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1a:	4a50      	ldr	r2, [pc, #320]	@ (8001f5c <HAL_ADC_MspInit+0x480>)
 8001e1c:	f043 0320 	orr.w	r3, r3, #32
 8001e20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e24:	4b4d      	ldr	r3, [pc, #308]	@ (8001f5c <HAL_ADC_MspInit+0x480>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2a:	f003 0220 	and.w	r2, r3, #32
 8001e2e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e32:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e3c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e40:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e42:	4b46      	ldr	r3, [pc, #280]	@ (8001f5c <HAL_ADC_MspInit+0x480>)
 8001e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e48:	4a44      	ldr	r2, [pc, #272]	@ (8001f5c <HAL_ADC_MspInit+0x480>)
 8001e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e52:	4b42      	ldr	r3, [pc, #264]	@ (8001f5c <HAL_ADC_MspInit+0x480>)
 8001e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e58:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001e5c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e60:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e6a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e6e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001e70:	2303      	movs	r3, #3
 8001e72:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e76:	2303      	movs	r3, #3
 8001e78:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e82:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001e86:	4619      	mov	r1, r3
 8001e88:	4835      	ldr	r0, [pc, #212]	@ (8001f60 <HAL_ADC_MspInit+0x484>)
 8001e8a:	f005 fc91 	bl	80077b0 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001e8e:	4b35      	ldr	r3, [pc, #212]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001e90:	4a35      	ldr	r2, [pc, #212]	@ (8001f68 <HAL_ADC_MspInit+0x48c>)
 8001e92:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001e94:	4b33      	ldr	r3, [pc, #204]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001e9a:	4b32      	ldr	r3, [pc, #200]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea0:	4b30      	ldr	r3, [pc, #192]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001eac:	4b2d      	ldr	r3, [pc, #180]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001eae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001eb2:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001eba:	4b2a      	ldr	r3, [pc, #168]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001ebc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ec0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001ec2:	4b28      	ldr	r3, [pc, #160]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001ec8:	4b26      	ldr	r3, [pc, #152]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001ece:	4b25      	ldr	r3, [pc, #148]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001ed4:	4b23      	ldr	r3, [pc, #140]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001eda:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001ee0:	4b20      	ldr	r3, [pc, #128]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001ee6:	481f      	ldr	r0, [pc, #124]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001ee8:	f003 fbee 	bl	80056c8 <HAL_DMA_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8001ef2:	f7ff fdd3 	bl	8001a9c <Error_Handler>
    TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8001efc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f00:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8001f04:	232b      	movs	r3, #43	@ 0x2b
 8001f06:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (HAL_DMAEx_ConfigTrigger(&handle_GPDMA1_Channel2, &TriggerConfig) != HAL_OK)
 8001f0a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4814      	ldr	r0, [pc, #80]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001f12:	f004 ff17 	bl	8006d44 <HAL_DMAEx_ConfigTrigger>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_ADC_MspInit+0x444>
      Error_Handler();
 8001f1c:	f7ff fdbe 	bl	8001a9c <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001f20:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f24:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001f2c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001f2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001f30:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f34:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	4809      	ldr	r0, [pc, #36]	@ (8001f64 <HAL_ADC_MspInit+0x488>)
 8001f40:	f003 ff62 	bl	8005e08 <HAL_DMA_ConfigChannelAttributes>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_ADC_MspInit+0x472>
      Error_Handler();
 8001f4a:	f7ff fda7 	bl	8001a9c <Error_Handler>
}
 8001f4e:	bf00      	nop
 8001f50:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	46021000 	.word	0x46021000
 8001f5c:	46020c00 	.word	0x46020c00
 8001f60:	42021800 	.word	0x42021800
 8001f64:	20000218 	.word	0x20000218
 8001f68:	40020150 	.word	0x40020150

08001f6c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa8 <HAL_DMA2D_MspInit+0x3c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10e      	bne.n	8001f9c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_DMA2D_MspInit+0x40>)
 8001f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f84:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <HAL_DMA2D_MspInit+0x40>)
 8001f86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f8a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001f8e:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <HAL_DMA2D_MspInit+0x40>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	4002b000 	.word	0x4002b000
 8001fac:	46020c00 	.word	0x46020c00

08001fb0 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8002078 <HAL_XSPI_MspInit+0xc8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d14d      	bne.n	800206e <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <HAL_XSPI_MspInit+0xcc>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd8:	4a28      	ldr	r2, [pc, #160]	@ (800207c <HAL_XSPI_MspInit+0xcc>)
 8001fda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <HAL_XSPI_MspInit+0xcc>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff0:	4b22      	ldr	r3, [pc, #136]	@ (800207c <HAL_XSPI_MspInit+0xcc>)
 8001ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff6:	4a21      	ldr	r2, [pc, #132]	@ (800207c <HAL_XSPI_MspInit+0xcc>)
 8001ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ffc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002000:	4b1e      	ldr	r3, [pc, #120]	@ (800207c <HAL_XSPI_MspInit+0xcc>)
 8002002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800200e:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_XSPI_MspInit+0xcc>)
 8002010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002014:	4a19      	ldr	r2, [pc, #100]	@ (800207c <HAL_XSPI_MspInit+0xcc>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <HAL_XSPI_MspInit+0xcc>)
 8002020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800202c:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8002030:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 800203e:	2308      	movs	r3, #8
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	480d      	ldr	r0, [pc, #52]	@ (8002080 <HAL_XSPI_MspInit+0xd0>)
 800204a:	f005 fbb1 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800204e:	230f      	movs	r3, #15
 8002050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 800205e:	2308      	movs	r3, #8
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	4806      	ldr	r0, [pc, #24]	@ (8002084 <HAL_XSPI_MspInit+0xd4>)
 800206a:	f005 fba1 	bl	80077b0 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	@ 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	420d3400 	.word	0x420d3400
 800207c:	46020c00 	.word	0x46020c00
 8002080:	42021c00 	.word	0x42021c00
 8002084:	42022000 	.word	0x42022000

08002088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0c4      	sub	sp, #272	@ 0x110
 800208c:	af00      	add	r7, sp, #0
 800208e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002092:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002096:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a8:	f107 0318 	add.w	r3, r7, #24
 80020ac:	22e0      	movs	r2, #224	@ 0xe0
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f010 f950 	bl	8012356 <memset>
  if(hi2c->Instance==I2C1)
 80020b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a63      	ldr	r2, [pc, #396]	@ (8002250 <HAL_I2C_MspInit+0x1c8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d14f      	bne.n	8002168 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020c8:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020da:	f107 0318 	add.w	r3, r7, #24
 80020de:	4618      	mov	r0, r3
 80020e0:	f009 f89a 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 80020ea:	f7ff fcd7 	bl	8001a9c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020ee:	4b59      	ldr	r3, [pc, #356]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 80020f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020f4:	4a57      	ldr	r2, [pc, #348]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 80020f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020fe:	4b55      	ldr	r3, [pc, #340]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 8002100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800210c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002110:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002114:	2312      	movs	r3, #18
 8002116:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002126:	2304      	movs	r3, #4
 8002128:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800212c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002130:	4619      	mov	r1, r3
 8002132:	4849      	ldr	r0, [pc, #292]	@ (8002258 <HAL_I2C_MspInit+0x1d0>)
 8002134:	f005 fb3c 	bl	80077b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002138:	4b46      	ldr	r3, [pc, #280]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 800213a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800213e:	4a45      	ldr	r2, [pc, #276]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 8002140:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002144:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002148:	4b42      	ldr	r3, [pc, #264]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 800214a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800214e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002152:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002156:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002160:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002164:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002166:	e06e      	b.n	8002246 <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8002168:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800216c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a39      	ldr	r2, [pc, #228]	@ (800225c <HAL_I2C_MspInit+0x1d4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d165      	bne.n	8002246 <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800217a:	f04f 0280 	mov.w	r2, #128	@ 0x80
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800218c:	f107 0318 	add.w	r3, r7, #24
 8002190:	4618      	mov	r0, r3
 8002192:	f009 f841 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 800219c:	f7ff fc7e 	bl	8001a9c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 80021a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 80021a8:	f043 0320 	orr.w	r3, r3, #32
 80021ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021b0:	4b28      	ldr	r3, [pc, #160]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 80021b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b6:	f003 0220 	and.w	r2, r3, #32
 80021ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021cc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d4:	2312      	movs	r3, #18
 80021d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021e6:	2304      	movs	r3, #4
 80021e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ec:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80021f0:	4619      	mov	r1, r3
 80021f2:	481b      	ldr	r0, [pc, #108]	@ (8002260 <HAL_I2C_MspInit+0x1d8>)
 80021f4:	f005 fadc 	bl	80077b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021f8:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 80021fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021fe:	4a15      	ldr	r2, [pc, #84]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 8002200:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002204:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002208:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_I2C_MspInit+0x1cc>)
 800220a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800220e:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002212:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002224:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2039      	movs	r0, #57	@ 0x39
 800222c:	f003 f9cc 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002230:	2039      	movs	r0, #57	@ 0x39
 8002232:	f003 f9e3 	bl	80055fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	203a      	movs	r0, #58	@ 0x3a
 800223c:	f003 f9c4 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002240:	203a      	movs	r0, #58	@ 0x3a
 8002242:	f003 f9db 	bl	80055fc <HAL_NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40005400 	.word	0x40005400
 8002254:	46020c00 	.word	0x46020c00
 8002258:	42021800 	.word	0x42021800
 800225c:	40005800 	.word	0x40005800
 8002260:	42021400 	.word	0x42021400

08002264 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0c6      	sub	sp, #280	@ 0x118
 8002268:	af00      	add	r7, sp, #0
 800226a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800226e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002272:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002284:	f107 0320 	add.w	r3, r7, #32
 8002288:	22e0      	movs	r2, #224	@ 0xe0
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f010 f862 	bl	8012356 <memset>
  if(hltdc->Instance==LTDC)
 8002292:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002296:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a92      	ldr	r2, [pc, #584]	@ (80024e8 <HAL_LTDC_MspInit+0x284>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f040 811b 	bne.w	80024dc <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0302 	mov.w	r3, #2
 80022ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 80022b8:	2303      	movs	r3, #3
 80022ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 80022bc:	2304      	movs	r3, #4
 80022be:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 80022c0:	2332      	movs	r3, #50	@ 0x32
 80022c2:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 80022c8:	2302      	movs	r3, #2
 80022ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 80022cc:	2308      	movs	r3, #8
 80022ce:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 80022d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80022dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022de:	f107 0320 	add.w	r3, r7, #32
 80022e2:	4618      	mov	r0, r3
 80022e4:	f008 ff98 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 80022ee:	f7ff fbd5 	bl	8001a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022f2:	4b7e      	ldr	r3, [pc, #504]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 80022f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022f8:	4a7c      	ldr	r2, [pc, #496]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 80022fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022fe:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002302:	4b7a      	ldr	r3, [pc, #488]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 8002304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002308:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002310:	4b76      	ldr	r3, [pc, #472]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 8002312:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002316:	4a75      	ldr	r2, [pc, #468]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002320:	4b72      	ldr	r3, [pc, #456]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 8002322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002326:	f003 0202 	and.w	r2, r3, #2
 800232a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800232e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002338:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800233c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800233e:	4b6b      	ldr	r3, [pc, #428]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 8002340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002344:	4a69      	ldr	r2, [pc, #420]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 8002346:	f043 0310 	orr.w	r3, r3, #16
 800234a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800234e:	4b67      	ldr	r3, [pc, #412]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 8002350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002354:	f003 0210 	and.w	r2, r3, #16
 8002358:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800235c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800236a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800236c:	4b5f      	ldr	r3, [pc, #380]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 800236e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002372:	4a5e      	ldr	r2, [pc, #376]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800237c:	4b5b      	ldr	r3, [pc, #364]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 800237e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002382:	f003 0208 	and.w	r2, r3, #8
 8002386:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800238a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002398:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800239a:	4b54      	ldr	r3, [pc, #336]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 800239c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023a0:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023aa:	4b50      	ldr	r3, [pc, #320]	@ (80024ec <HAL_LTDC_MspInit+0x288>)
 80023ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b0:	f003 0204 	and.w	r2, r3, #4
 80023b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023c6:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023c8:	2304      	movs	r3, #4
 80023ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80023e0:	2308      	movs	r3, #8
 80023e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80023ea:	4619      	mov	r1, r3
 80023ec:	4840      	ldr	r0, [pc, #256]	@ (80024f0 <HAL_LTDC_MspInit+0x28c>)
 80023ee:	f005 f9df 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80023f2:	f64f 7381 	movw	r3, #65409	@ 0xff81
 80023f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 800240c:	2308      	movs	r3, #8
 800240e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002412:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002416:	4619      	mov	r1, r3
 8002418:	4836      	ldr	r0, [pc, #216]	@ (80024f4 <HAL_LTDC_MspInit+0x290>)
 800241a:	f005 f9c9 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800241e:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8002422:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002438:	2308      	movs	r3, #8
 800243a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800243e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002442:	4619      	mov	r1, r3
 8002444:	482c      	ldr	r0, [pc, #176]	@ (80024f8 <HAL_LTDC_MspInit+0x294>)
 8002446:	f005 f9b3 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800244a:	23c0      	movs	r3, #192	@ 0xc0
 800244c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002462:	2307      	movs	r3, #7
 8002464:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002468:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800246c:	4619      	mov	r1, r3
 800246e:	4823      	ldr	r0, [pc, #140]	@ (80024fc <HAL_LTDC_MspInit+0x298>)
 8002470:	f005 f99e 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002474:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002478:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 800248e:	2308      	movs	r3, #8
 8002490:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002494:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002498:	4619      	mov	r1, r3
 800249a:	4818      	ldr	r0, [pc, #96]	@ (80024fc <HAL_LTDC_MspInit+0x298>)
 800249c:	f005 f988 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80024ba:	2307      	movs	r3, #7
 80024bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80024c4:	4619      	mov	r1, r3
 80024c6:	480a      	ldr	r0, [pc, #40]	@ (80024f0 <HAL_LTDC_MspInit+0x28c>)
 80024c8:	f005 f972 	bl	80077b0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	2087      	movs	r0, #135	@ 0x87
 80024d2:	f003 f879 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80024d6:	2087      	movs	r0, #135	@ 0x87
 80024d8:	f003 f890 	bl	80055fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80024dc:	bf00      	nop
 80024de:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40016800 	.word	0x40016800
 80024ec:	46020c00 	.word	0x46020c00
 80024f0:	42020400 	.word	0x42020400
 80024f4:	42021000 	.word	0x42021000
 80024f8:	42020c00 	.word	0x42020c00
 80024fc:	42020800 	.word	0x42020800

08002500 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0bc      	sub	sp, #240	@ 0xf0
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	22e0      	movs	r2, #224	@ 0xe0
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f00f ff20 	bl	8012356 <memset>
  if(hrtc->Instance==RTC)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <HAL_RTC_MspInit+0x90>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d132      	bne.n	8002586 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002520:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800252c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	4618      	mov	r0, r3
 800253a:	f008 fe6d 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002544:	f7ff faaa 	bl	8001a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002548:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <HAL_RTC_MspInit+0x94>)
 800254a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800254e:	4a11      	ldr	r2, [pc, #68]	@ (8002594 <HAL_RTC_MspInit+0x94>)
 8002550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002554:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002558:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_RTC_MspInit+0x94>)
 800255a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800255e:	4a0d      	ldr	r2, [pc, #52]	@ (8002594 <HAL_RTC_MspInit+0x94>)
 8002560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002564:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <HAL_RTC_MspInit+0x94>)
 800256a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800256e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002576:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <HAL_RTC_MspInit+0x94>)
 8002578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800257c:	4a05      	ldr	r2, [pc, #20]	@ (8002594 <HAL_RTC_MspInit+0x94>)
 800257e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002582:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002586:	bf00      	nop
 8002588:	37f0      	adds	r7, #240	@ 0xf0
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	46007800 	.word	0x46007800
 8002594:	46020c00 	.word	0x46020c00

08002598 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0b      	ldr	r2, [pc, #44]	@ (80025d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <HAL_TIM_PWM_MspInit+0x40>)
 80025ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025b0:	4a09      	ldr	r2, [pc, #36]	@ (80025d8 <HAL_TIM_PWM_MspInit+0x40>)
 80025b2:	f043 0302 	orr.w	r3, r3, #2
 80025b6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80025ba:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <HAL_TIM_PWM_MspInit+0x40>)
 80025bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40000400 	.word	0x40000400
 80025d8:	46020c00 	.word	0x46020c00

080025dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002618 <HAL_TIM_Base_MspInit+0x3c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <HAL_TIM_Base_MspInit+0x40>)
 80025f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025f4:	4a09      	ldr	r2, [pc, #36]	@ (800261c <HAL_TIM_Base_MspInit+0x40>)
 80025f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80025fe:	4b07      	ldr	r3, [pc, #28]	@ (800261c <HAL_TIM_Base_MspInit+0x40>)
 8002600:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	40014000 	.word	0x40014000
 800261c:	46020c00 	.word	0x46020c00

08002620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a12      	ldr	r2, [pc, #72]	@ (8002688 <HAL_TIM_MspPostInit+0x68>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d11e      	bne.n	8002680 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002642:	4b12      	ldr	r3, [pc, #72]	@ (800268c <HAL_TIM_MspPostInit+0x6c>)
 8002644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002648:	4a10      	ldr	r2, [pc, #64]	@ (800268c <HAL_TIM_MspPostInit+0x6c>)
 800264a:	f043 0310 	orr.w	r3, r3, #16
 800264e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002652:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <HAL_TIM_MspPostInit+0x6c>)
 8002654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002660:	2340      	movs	r3, #64	@ 0x40
 8002662:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002670:	2302      	movs	r3, #2
 8002672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	4619      	mov	r1, r3
 800267a:	4805      	ldr	r0, [pc, #20]	@ (8002690 <HAL_TIM_MspPostInit+0x70>)
 800267c:	f005 f898 	bl	80077b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002680:	bf00      	nop
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40000400 	.word	0x40000400
 800268c:	46020c00 	.word	0x46020c00
 8002690:	42021000 	.word	0x42021000

08002694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0c2      	sub	sp, #264	@ 0x108
 8002698:	af00      	add	r7, sp, #0
 800269a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800269e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026a2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	22e0      	movs	r2, #224	@ 0xe0
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f00f fe4a 	bl	8012356 <memset>
  if(huart->Instance==USART1)
 80026c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80026c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2f      	ldr	r2, [pc, #188]	@ (800278c <HAL_UART_MspInit+0xf8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d155      	bne.n	8002780 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026d4:	f04f 0201 	mov.w	r2, #1
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026e0:	2300      	movs	r3, #0
 80026e2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	4618      	mov	r0, r3
 80026ea:	f008 fd95 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80026f4:	f7ff f9d2 	bl	8001a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026f8:	4b25      	ldr	r3, [pc, #148]	@ (8002790 <HAL_UART_MspInit+0xfc>)
 80026fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026fe:	4a24      	ldr	r2, [pc, #144]	@ (8002790 <HAL_UART_MspInit+0xfc>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002704:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002708:	4b21      	ldr	r3, [pc, #132]	@ (8002790 <HAL_UART_MspInit+0xfc>)
 800270a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800270e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	4b1e      	ldr	r3, [pc, #120]	@ (8002790 <HAL_UART_MspInit+0xfc>)
 8002718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800271c:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <HAL_UART_MspInit+0xfc>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002726:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <HAL_UART_MspInit+0xfc>)
 8002728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800272c:	f003 0201 	and.w	r2, r3, #1
 8002730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002734:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800273e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002742:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002744:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002748:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800275e:	2307      	movs	r3, #7
 8002760:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002768:	4619      	mov	r1, r3
 800276a:	480a      	ldr	r0, [pc, #40]	@ (8002794 <HAL_UART_MspInit+0x100>)
 800276c:	f005 f820 	bl	80077b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	203d      	movs	r0, #61	@ 0x3d
 8002776:	f002 ff27 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800277a:	203d      	movs	r0, #61	@ 0x3d
 800277c:	f002 ff3e 	bl	80055fc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002780:	bf00      	nop
 8002782:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40013800 	.word	0x40013800
 8002790:	46020c00 	.word	0x46020c00
 8002794:	42020000 	.word	0x42020000

08002798 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0be      	sub	sp, #248	@ 0xf8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a0:	f107 0318 	add.w	r3, r7, #24
 80027a4:	22e0      	movs	r2, #224	@ 0xe0
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f00f fdd4 	bl	8012356 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3a      	ldr	r2, [pc, #232]	@ (800289c <HAL_PCD_MspInit+0x104>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d16d      	bne.n	8002894 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b8:	4b39      	ldr	r3, [pc, #228]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 80027ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027be:	4a38      	ldr	r2, [pc, #224]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80027c8:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 80027ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0308 	mov.w	r3, #8
 80027de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80027e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80027e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ea:	f107 0318 	add.w	r3, r7, #24
 80027ee:	4618      	mov	r0, r3
 80027f0:	f008 fd12 	bl	800b218 <HAL_RCCEx_PeriphCLKConfig>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80027fa:	f7ff f94f 	bl	8001a9c <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80027fe:	200c      	movs	r0, #12
 8002800:	f000 fc22 	bl	8003048 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002804:	4b26      	ldr	r3, [pc, #152]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 8002806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800280a:	4a25      	ldr	r2, [pc, #148]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002810:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002814:	4b22      	ldr	r3, [pc, #136]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 8002816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800281a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002822:	4b1f      	ldr	r3, [pc, #124]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 8002824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002828:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 800282a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800282e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002832:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002840:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 8002842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d11b      	bne.n	8002886 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 8002850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002854:	4a12      	ldr	r2, [pc, #72]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 8002856:	f043 0304 	orr.w	r3, r3, #4
 800285a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800285e:	4b10      	ldr	r3, [pc, #64]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 8002860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800286c:	f007 f9a2 	bl	8009bb4 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002870:	f007 f9d0 	bl	8009c14 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002874:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800287a:	4a09      	ldr	r2, [pc, #36]	@ (80028a0 <HAL_PCD_MspInit+0x108>)
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002884:	e003      	b.n	800288e <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002886:	f007 f995 	bl	8009bb4 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800288a:	f007 f9c3 	bl	8009c14 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800288e:	2001      	movs	r0, #1
 8002890:	f000 fbc6 	bl	8003020 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002894:	bf00      	nop
 8002896:	37f8      	adds	r7, #248	@ 0xf8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	42040000 	.word	0x42040000
 80028a0:	46020c00 	.word	0x46020c00

080028a4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b0a4      	sub	sp, #144	@ 0x90
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4abb      	ldr	r2, [pc, #748]	@ (8002ba0 <HAL_SAI_MspInit+0x2fc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	f040 80ca 	bne.w	8002a4c <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80028b8:	4bba      	ldr	r3, [pc, #744]	@ (8002ba4 <HAL_SAI_MspInit+0x300>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10e      	bne.n	80028de <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80028c0:	4bb9      	ldr	r3, [pc, #740]	@ (8002ba8 <HAL_SAI_MspInit+0x304>)
 80028c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028c6:	4ab8      	ldr	r2, [pc, #736]	@ (8002ba8 <HAL_SAI_MspInit+0x304>)
 80028c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028cc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80028d0:	4bb5      	ldr	r3, [pc, #724]	@ (8002ba8 <HAL_SAI_MspInit+0x304>)
 80028d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80028de:	4bb1      	ldr	r3, [pc, #708]	@ (8002ba4 <HAL_SAI_MspInit+0x300>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	4aaf      	ldr	r2, [pc, #700]	@ (8002ba4 <HAL_SAI_MspInit+0x300>)
 80028e6:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80028e8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80028ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002900:	230d      	movs	r3, #13
 8002902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002906:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800290a:	4619      	mov	r1, r3
 800290c:	48a7      	ldr	r0, [pc, #668]	@ (8002bac <HAL_SAI_MspInit+0x308>)
 800290e:	f004 ff4f 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002912:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002916:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800292a:	230d      	movs	r3, #13
 800292c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002930:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002934:	4619      	mov	r1, r3
 8002936:	489d      	ldr	r0, [pc, #628]	@ (8002bac <HAL_SAI_MspInit+0x308>)
 8002938:	f004 ff3a 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800293c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002940:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002954:	230d      	movs	r3, #13
 8002956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800295a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800295e:	4619      	mov	r1, r3
 8002960:	4893      	ldr	r0, [pc, #588]	@ (8002bb0 <HAL_SAI_MspInit+0x30c>)
 8002962:	f004 ff25 	bl	80077b0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002966:	2321      	movs	r3, #33	@ 0x21
 8002968:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 800296a:	2326      	movs	r3, #38	@ 0x26
 800296c:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002976:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002978:	2308      	movs	r3, #8
 800297a:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002980:	2302      	movs	r3, #2
 8002982:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002984:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002992:	2300      	movs	r3, #0
 8002994:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002996:	2300      	movs	r3, #0
 8002998:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800299a:	2300      	movs	r3, #0
 800299c:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800299e:	2300      	movs	r3, #0
 80029a0:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80029a6:	2300      	movs	r3, #0
 80029a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 80029aa:	f107 0310 	add.w	r3, r7, #16
 80029ae:	4981      	ldr	r1, [pc, #516]	@ (8002bb4 <HAL_SAI_MspInit+0x310>)
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 ffdb 	bl	800696c <HAL_DMAEx_List_BuildNode>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 80029bc:	f7ff f86e 	bl	8001a9c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 80029c0:	4a7c      	ldr	r2, [pc, #496]	@ (8002bb4 <HAL_SAI_MspInit+0x310>)
 80029c2:	2100      	movs	r1, #0
 80029c4:	487c      	ldr	r0, [pc, #496]	@ (8002bb8 <HAL_SAI_MspInit+0x314>)
 80029c6:	f003 fffd 	bl	80069c4 <HAL_DMAEx_List_InsertNode>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 80029d0:	f7ff f864 	bl	8001a9c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 80029d4:	4878      	ldr	r0, [pc, #480]	@ (8002bb8 <HAL_SAI_MspInit+0x314>)
 80029d6:	f004 f8be 	bl	8006b56 <HAL_DMAEx_List_SetCircularMode>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 80029e0:	f7ff f85c 	bl	8001a9c <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80029e4:	4b75      	ldr	r3, [pc, #468]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 80029e6:	4a76      	ldr	r2, [pc, #472]	@ (8002bc0 <HAL_SAI_MspInit+0x31c>)
 80029e8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80029ea:	4b74      	ldr	r3, [pc, #464]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 80029ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029f0:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80029f2:	4b72      	ldr	r3, [pc, #456]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80029f8:	4b70      	ldr	r3, [pc, #448]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80029fe:	4b6f      	ldr	r3, [pc, #444]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002a04:	4b6d      	ldr	r3, [pc, #436]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 8002a06:	2281      	movs	r2, #129	@ 0x81
 8002a08:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002a0a:	486c      	ldr	r0, [pc, #432]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 8002a0c:	f003 fdee 	bl	80065ec <HAL_DMAEx_List_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 8002a16:	f7ff f841 	bl	8001a9c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 8002a1a:	4967      	ldr	r1, [pc, #412]	@ (8002bb8 <HAL_SAI_MspInit+0x314>)
 8002a1c:	4867      	ldr	r0, [pc, #412]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 8002a1e:	f004 f8fb 	bl	8006c18 <HAL_DMAEx_List_LinkQ>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 8002a28:	f7ff f838 	bl	8001a9c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a63      	ldr	r2, [pc, #396]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 8002a30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a34:	4a61      	ldr	r2, [pc, #388]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002a3a:	2110      	movs	r1, #16
 8002a3c:	485f      	ldr	r0, [pc, #380]	@ (8002bbc <HAL_SAI_MspInit+0x318>)
 8002a3e:	f003 f9e3 	bl	8005e08 <HAL_DMA_ConfigChannelAttributes>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8002a48:	f7ff f828 	bl	8001a9c <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a5c      	ldr	r2, [pc, #368]	@ (8002bc4 <HAL_SAI_MspInit+0x320>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	f040 80eb 	bne.w	8002c2e <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002a58:	4b52      	ldr	r3, [pc, #328]	@ (8002ba4 <HAL_SAI_MspInit+0x300>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10e      	bne.n	8002a7e <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002a60:	4b51      	ldr	r3, [pc, #324]	@ (8002ba8 <HAL_SAI_MspInit+0x304>)
 8002a62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a66:	4a50      	ldr	r2, [pc, #320]	@ (8002ba8 <HAL_SAI_MspInit+0x304>)
 8002a68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a6c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002a70:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba8 <HAL_SAI_MspInit+0x304>)
 8002a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002a7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ba4 <HAL_SAI_MspInit+0x300>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3301      	adds	r3, #1
 8002a84:	4a47      	ldr	r2, [pc, #284]	@ (8002ba4 <HAL_SAI_MspInit+0x300>)
 8002a86:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002aa0:	230d      	movs	r3, #13
 8002aa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4846      	ldr	r0, [pc, #280]	@ (8002bc8 <HAL_SAI_MspInit+0x324>)
 8002aae:	f004 fe7f 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002aca:	230d      	movs	r3, #13
 8002acc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	483d      	ldr	r0, [pc, #244]	@ (8002bcc <HAL_SAI_MspInit+0x328>)
 8002ad8:	f004 fe6a 	bl	80077b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002adc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ae0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002af4:	230d      	movs	r3, #13
 8002af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afa:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002afe:	4619      	mov	r1, r3
 8002b00:	4832      	ldr	r0, [pc, #200]	@ (8002bcc <HAL_SAI_MspInit+0x328>)
 8002b02:	f004 fe55 	bl	80077b0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002b06:	2321      	movs	r3, #33	@ 0x21
 8002b08:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8002b0a:	2327      	movs	r3, #39	@ 0x27
 8002b0c:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002b1a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002b20:	2302      	movs	r3, #2
 8002b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002b24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002b36:	2300      	movs	r3, #0
 8002b38:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002b46:	2300      	movs	r3, #0
 8002b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	4920      	ldr	r1, [pc, #128]	@ (8002bd0 <HAL_SAI_MspInit+0x32c>)
 8002b50:	4618      	mov	r0, r3
 8002b52:	f003 ff0b 	bl	800696c <HAL_DMAEx_List_BuildNode>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8002b5c:	f7fe ff9e 	bl	8001a9c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002b60:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd0 <HAL_SAI_MspInit+0x32c>)
 8002b62:	2100      	movs	r1, #0
 8002b64:	481b      	ldr	r0, [pc, #108]	@ (8002bd4 <HAL_SAI_MspInit+0x330>)
 8002b66:	f003 ff2d 	bl	80069c4 <HAL_DMAEx_List_InsertNode>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8002b70:	f7fe ff94 	bl	8001a9c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8002b74:	4817      	ldr	r0, [pc, #92]	@ (8002bd4 <HAL_SAI_MspInit+0x330>)
 8002b76:	f003 ffee 	bl	8006b56 <HAL_DMAEx_List_SetCircularMode>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8002b80:	f7fe ff8c 	bl	8001a9c <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002b84:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <HAL_SAI_MspInit+0x334>)
 8002b86:	4a15      	ldr	r2, [pc, #84]	@ (8002bdc <HAL_SAI_MspInit+0x338>)
 8002b88:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <HAL_SAI_MspInit+0x334>)
 8002b8c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002b90:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002b92:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <HAL_SAI_MspInit+0x334>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002b98:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <HAL_SAI_MspInit+0x334>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b9e:	e01f      	b.n	8002be0 <HAL_SAI_MspInit+0x33c>
 8002ba0:	40015804 	.word	0x40015804
 8002ba4:	20033b98 	.word	0x20033b98
 8002ba8:	46020c00 	.word	0x46020c00
 8002bac:	42020400 	.word	0x42020400
 8002bb0:	42021800 	.word	0x42021800
 8002bb4:	20000608 	.word	0x20000608
 8002bb8:	2000062c 	.word	0x2000062c
 8002bbc:	20000644 	.word	0x20000644
 8002bc0:	400201d0 	.word	0x400201d0
 8002bc4:	40015824 	.word	0x40015824
 8002bc8:	42020000 	.word	0x42020000
 8002bcc:	42020800 	.word	0x42020800
 8002bd0:	200006bc 	.word	0x200006bc
 8002bd4:	200006e0 	.word	0x200006e0
 8002bd8:	200006f8 	.word	0x200006f8
 8002bdc:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002be0:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <HAL_SAI_MspInit+0x394>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002be6:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_SAI_MspInit+0x394>)
 8002be8:	2281      	movs	r2, #129	@ 0x81
 8002bea:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002bec:	4812      	ldr	r0, [pc, #72]	@ (8002c38 <HAL_SAI_MspInit+0x394>)
 8002bee:	f003 fcfd 	bl	80065ec <HAL_DMAEx_List_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 8002bf8:	f7fe ff50 	bl	8001a9c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002bfc:	490f      	ldr	r1, [pc, #60]	@ (8002c3c <HAL_SAI_MspInit+0x398>)
 8002bfe:	480e      	ldr	r0, [pc, #56]	@ (8002c38 <HAL_SAI_MspInit+0x394>)
 8002c00:	f004 f80a 	bl	8006c18 <HAL_DMAEx_List_LinkQ>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 8002c0a:	f7fe ff47 	bl	8001a9c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a09      	ldr	r2, [pc, #36]	@ (8002c38 <HAL_SAI_MspInit+0x394>)
 8002c12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002c16:	4a08      	ldr	r2, [pc, #32]	@ (8002c38 <HAL_SAI_MspInit+0x394>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002c1c:	2110      	movs	r1, #16
 8002c1e:	4806      	ldr	r0, [pc, #24]	@ (8002c38 <HAL_SAI_MspInit+0x394>)
 8002c20:	f003 f8f2 	bl	8005e08 <HAL_DMA_ConfigChannelAttributes>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 8002c2a:	f7fe ff37 	bl	8001a9c <Error_Handler>
    }

    }
}
 8002c2e:	bf00      	nop
 8002c30:	3790      	adds	r7, #144	@ 0x90
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200006f8 	.word	0x200006f8
 8002c3c:	200006e0 	.word	0x200006e0

08002c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08e      	sub	sp, #56	@ 0x38
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c50:	4b2e      	ldr	r3, [pc, #184]	@ (8002d0c <HAL_InitTick+0xcc>)
 8002c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c56:	4a2d      	ldr	r2, [pc, #180]	@ (8002d0c <HAL_InitTick+0xcc>)
 8002c58:	f043 0310 	orr.w	r3, r3, #16
 8002c5c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002c60:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_InitTick+0xcc>)
 8002c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c6e:	f107 0210 	add.w	r2, r7, #16
 8002c72:	f107 0314 	add.w	r3, r7, #20
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f008 fa0f 	bl	800b09c <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c7e:	f008 f9d1 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 8002c82:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	4a22      	ldr	r2, [pc, #136]	@ (8002d10 <HAL_InitTick+0xd0>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	0c9b      	lsrs	r3, r3, #18
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c92:	4b20      	ldr	r3, [pc, #128]	@ (8002d14 <HAL_InitTick+0xd4>)
 8002c94:	4a20      	ldr	r2, [pc, #128]	@ (8002d18 <HAL_InitTick+0xd8>)
 8002c96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c98:	4b1e      	ldr	r3, [pc, #120]	@ (8002d14 <HAL_InitTick+0xd4>)
 8002c9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d14 <HAL_InitTick+0xd4>)
 8002ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_InitTick+0xd4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_InitTick+0xd4>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002cb2:	4818      	ldr	r0, [pc, #96]	@ (8002d14 <HAL_InitTick+0xd4>)
 8002cb4:	f00c fa53 	bl	800f15e <HAL_TIM_Base_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8002cbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d118      	bne.n	8002cf8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002cc6:	4813      	ldr	r0, [pc, #76]	@ (8002d14 <HAL_InitTick+0xd4>)
 8002cc8:	f00c fb38 	bl	800f33c <HAL_TIM_Base_Start_IT>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8002cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d808      	bhi.n	8002cf2 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	2031      	movs	r0, #49	@ 0x31
 8002ce6:	f002 fc6f 	bl	80055c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cea:	4a0c      	ldr	r2, [pc, #48]	@ (8002d1c <HAL_InitTick+0xdc>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e002      	b.n	8002cf8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002cf8:	2031      	movs	r0, #49	@ 0x31
 8002cfa:	f002 fc7f 	bl	80055fc <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002cfe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3738      	adds	r7, #56	@ 0x38
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	46020c00 	.word	0x46020c00
 8002d10:	431bde83 	.word	0x431bde83
 8002d14:	20033b9c 	.word	0x20033b9c
 8002d18:	40001000 	.word	0x40001000
 8002d1c:	20000028 	.word	0x20000028

08002d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <NMI_Handler+0x4>

08002d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <MemManage_Handler+0x4>

08002d38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <BusFault_Handler+0x4>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <UsageFault_Handler+0x4>

08002d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8002d84:	2002      	movs	r0, #2
 8002d86:	f004 ff1d 	bl	8007bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8002d92:	2010      	movs	r0, #16
 8002d94:	f004 ff16 	bl	8007bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002da0:	2020      	movs	r0, #32
 8002da2:	f004 ff0f 	bl	8007bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002db0:	4802      	ldr	r0, [pc, #8]	@ (8002dbc <GPDMA1_Channel0_IRQHandler+0x10>)
 8002db2:	f002 feba 	bl	8005b2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200001a0 	.word	0x200001a0

08002dc0 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002dc4:	4802      	ldr	r0, [pc, #8]	@ (8002dd0 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002dc6:	f002 feb0 	bl	8005b2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200006f8 	.word	0x200006f8

08002dd4 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002dd8:	4802      	ldr	r0, [pc, #8]	@ (8002de4 <GPDMA1_Channel2_IRQHandler+0x10>)
 8002dda:	f002 fea6 	bl	8005b2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000218 	.word	0x20000218

08002de8 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8002dec:	4802      	ldr	r0, [pc, #8]	@ (8002df8 <GPDMA1_Channel3_IRQHandler+0x10>)
 8002dee:	f002 fe9c 	bl	8005b2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000644 	.word	0x20000644

08002dfc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e00:	4802      	ldr	r0, [pc, #8]	@ (8002e0c <ADC1_2_IRQHandler+0x10>)
 8002e02:	f001 f8b9 	bl	8003f78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	2000004c 	.word	0x2000004c

08002e10 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e14:	4802      	ldr	r0, [pc, #8]	@ (8002e20 <TIM6_IRQHandler+0x10>)
 8002e16:	f00c fb88 	bl	800f52a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20033b9c 	.word	0x20033b9c

08002e24 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002e28:	4802      	ldr	r0, [pc, #8]	@ (8002e34 <I2C2_EV_IRQHandler+0x10>)
 8002e2a:	f005 f897 	bl	8007f5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200003ac 	.word	0x200003ac

08002e38 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002e3c:	4802      	ldr	r0, [pc, #8]	@ (8002e48 <I2C2_ER_IRQHandler+0x10>)
 8002e3e:	f005 f8a7 	bl	8007f90 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200003ac 	.word	0x200003ac

08002e4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e50:	4802      	ldr	r0, [pc, #8]	@ (8002e5c <USART1_IRQHandler+0x10>)
 8002e52:	f00d fdc7 	bl	80109e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000808 	.word	0x20000808

08002e60 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e64:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <LTDC_IRQHandler+0x10>)
 8002e66:	f006 fa15 	bl	8009294 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000400 	.word	0x20000400

08002e74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e78:	4b18      	ldr	r3, [pc, #96]	@ (8002edc <SystemInit+0x68>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	4a17      	ldr	r2, [pc, #92]	@ (8002edc <SystemInit+0x68>)
 8002e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002e88:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <SystemInit+0x6c>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002e8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <SystemInit+0x6c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002e94:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <SystemInit+0x6c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002e9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <SystemInit+0x6c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <SystemInit+0x6c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee0 <SystemInit+0x6c>)
 8002ea6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002eaa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002eae:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <SystemInit+0x6c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <SystemInit+0x6c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a09      	ldr	r2, [pc, #36]	@ (8002ee0 <SystemInit+0x6c>)
 8002ebc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002ec2:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <SystemInit+0x6c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ec8:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <SystemInit+0x68>)
 8002eca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ece:	609a      	str	r2, [r3, #8]
  #endif
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000ed00 	.word	0xe000ed00
 8002ee0:	46020c00 	.word	0x46020c00

08002ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f1c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ee8:	f7ff ffc4 	bl	8002e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002eec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002eee:	e003      	b.n	8002ef8 <LoopCopyDataInit>

08002ef0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002ef2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ef4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ef6:	3104      	adds	r1, #4

08002ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ef8:	480a      	ldr	r0, [pc, #40]	@ (8002f24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002efa:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002efc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002efe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f00:	d3f6      	bcc.n	8002ef0 <CopyDataInit>
	ldr	r2, =_sbss
 8002f02:	4a0a      	ldr	r2, [pc, #40]	@ (8002f2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f04:	e002      	b.n	8002f0c <LoopFillZerobss>

08002f06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f08:	f842 3b04 	str.w	r3, [r2], #4

08002f0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f0c:	4b08      	ldr	r3, [pc, #32]	@ (8002f30 <LoopForever+0x16>)
	cmp	r2, r3
 8002f0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f10:	d3f9      	bcc.n	8002f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f12:	f00f fa29 	bl	8012368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f16:	f7fd fb59 	bl	80005cc <main>

08002f1a <LoopForever>:

LoopForever:
    b LoopForever
 8002f1a:	e7fe      	b.n	8002f1a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002f1c:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002f20:	080124d8 	.word	0x080124d8
	ldr	r0, =_sdata
 8002f24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f28:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8002f2c:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8002f30:	20033bec 	.word	0x20033bec

08002f34 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f34:	e7fe      	b.n	8002f34 <ADC4_IRQHandler>
	...

08002f38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f3c:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <HAL_Init+0x50>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a11      	ldr	r2, [pc, #68]	@ (8002f88 <HAL_Init+0x50>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f48:	2003      	movs	r0, #3
 8002f4a:	f002 fb32 	bl	80055b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f4e:	f007 ff4d 	bl	800adec <HAL_RCC_GetSysClockFreq>
 8002f52:	4602      	mov	r2, r0
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <HAL_Init+0x54>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	490c      	ldr	r1, [pc, #48]	@ (8002f90 <HAL_Init+0x58>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	4a0b      	ldr	r2, [pc, #44]	@ (8002f94 <HAL_Init+0x5c>)
 8002f66:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002f68:	2004      	movs	r0, #4
 8002f6a:	f002 fb55 	bl	8005618 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f7ff fe66 	bl	8002c40 <HAL_InitTick>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e002      	b.n	8002f84 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f7e:	f7fe fd93 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	46020c00 	.word	0x46020c00
 8002f90:	080123c8 	.word	0x080123c8
 8002f94:	20000024 	.word	0x20000024

08002f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	2000002c 	.word	0x2000002c
 8002fbc:	20033be8 	.word	0x20033be8

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20033be8 	.word	0x20033be8

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	2000002c 	.word	0x2000002c

08003020 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800302a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800302c:	f023 0201 	bic.w	r2, r3, #1
 8003030:	4904      	ldr	r1, [pc, #16]	@ (8003044 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4313      	orrs	r3, r2
 8003036:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	46000400 	.word	0x46000400

08003048 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8003050:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8003052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003054:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8003058:	4904      	ldr	r1, [pc, #16]	@ (800306c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4313      	orrs	r3, r2
 800305e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	46000400 	.word	0x46000400

08003070 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	609a      	str	r2, [r3, #8]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003114 <LL_ADC_SetResolution+0x3c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d104      	bne.n	80030f8 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f023 020c 	bic.w	r2, r3, #12
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	60da      	str	r2, [r3, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	46021000 	.word	0x46021000

08003118 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3360      	adds	r3, #96	@ 0x60
 800312a:	461a      	mov	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	430b      	orrs	r3, r1
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3360      	adds	r3, #96	@ 0x60
 8003168:	461a      	mov	r2, r3
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3360      	adds	r3, #96	@ 0x60
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	601a      	str	r2, [r3, #0]
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3360      	adds	r3, #96	@ 0x60
 80031cc:	461a      	mov	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	601a      	str	r2, [r3, #0]
}
 80031e6:	bf00      	nop
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b087      	sub	sp, #28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3360      	adds	r3, #96	@ 0x60
 8003202:	461a      	mov	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	431a      	orrs	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]
}
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003236:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800323a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	2a00      	cmp	r2, #0
 8003252:	d002      	beq.n	800325a <LL_ADC_SetGainCompensation+0x32>
 8003254:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003258:	e000      	b.n	800325c <LL_ADC_SetGainCompensation+0x34>
 800325a:	2200      	movs	r2, #0
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800326e:	b480      	push	{r7}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2107      	movs	r1, #7
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	401a      	ands	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	431a      	orrs	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	@ 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003390 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d020      	beq.n	800332a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3330      	adds	r3, #48	@ 0x30
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	4413      	add	r3, r2
 80032fa:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	211f      	movs	r1, #31
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	401a      	ands	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	f003 011f 	and.w	r1, r3, #31
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	431a      	orrs	r2, r3
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003328:	e02b      	b.n	8003382 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	210f      	movs	r1, #15
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	401a      	ands	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	e010      	b.n	8003374 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	613b      	str	r3, [r7, #16]
  return result;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003368:	2320      	movs	r3, #32
 800336a:	e003      	b.n	8003374 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	f001 011f 	and.w	r1, r1, #31
 800337a:	408b      	lsls	r3, r1
 800337c:	431a      	orrs	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003382:	bf00      	nop
 8003384:	3724      	adds	r7, #36	@ 0x24
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	46021000 	.word	0x46021000

08003394 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <LL_ADC_REG_SetSequencerChAdd+0x24>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	0e9b      	lsrs	r3, r3, #26
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2201      	movs	r2, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	e015      	b.n	80033e4 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	60fb      	str	r3, [r7, #12]
  return result;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80033ce:	2320      	movs	r3, #32
 80033d0:	e003      	b.n	80033da <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2201      	movs	r2, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	0e9b      	lsrs	r3, r3, #26
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	401a      	ands	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0303 	and.w	r3, r3, #3
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800346c:	b480      	push	{r7}
 800346e:	b08b      	sub	sp, #44	@ 0x2c
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4a2d      	ldr	r2, [pc, #180]	@ (8003530 <LL_ADC_SetChannelSamplingTime+0xc4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d042      	beq.n	8003506 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <LL_ADC_SetChannelSamplingTime+0x28>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	0e9b      	lsrs	r3, r3, #26
 800348e:	f003 021f 	and.w	r2, r3, #31
 8003492:	e011      	b.n	80034b8 <LL_ADC_SetChannelSamplingTime+0x4c>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	617b      	str	r3, [r7, #20]
  return result;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80034aa:	2320      	movs	r3, #32
 80034ac:	e003      	b.n	80034b6 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	0e5b      	lsrs	r3, r3, #25
 80034bc:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80034c0:	460b      	mov	r3, r1
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	1ad2      	subs	r2, r2, r3
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3314      	adds	r3, #20
 80034d6:	461a      	mov	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	0e5b      	lsrs	r3, r3, #25
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	4413      	add	r3, r2
 80034e4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	2107      	movs	r1, #7
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	401a      	ands	r2, r3
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	431a      	orrs	r2, r3
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003504:	e00e      	b.n	8003524 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	43db      	mvns	r3, r3
 8003510:	401a      	ands	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	0219      	lsls	r1, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	400b      	ands	r3, r1
 800351a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800351e:	431a      	orrs	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	615a      	str	r2, [r3, #20]
}
 8003524:	bf00      	nop
 8003526:	372c      	adds	r7, #44	@ 0x2c
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	46021000 	.word	0x46021000

08003534 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800354c:	43db      	mvns	r3, r3
 800354e:	401a      	ands	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0318 	and.w	r3, r3, #24
 8003556:	4908      	ldr	r1, [pc, #32]	@ (8003578 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003558:	40d9      	lsrs	r1, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	400b      	ands	r3, r1
 800355e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003562:	431a      	orrs	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	000fffff 	.word	0x000fffff

0800357c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 031f 	and.w	r3, r3, #31
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80035c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6093      	str	r3, [r2, #8]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035ec:	d101      	bne.n	80035f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003614:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800363c:	d101      	bne.n	8003642 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003660:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003664:	f043 0201 	orr.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	609a      	str	r2, [r3, #8]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <LL_ADC_IsEnabled+0x18>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <LL_ADC_IsEnabled+0x1a>
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036b2:	f043 0204 	orr.w	r2, r3, #4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	609a      	str	r2, [r3, #8]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d101      	bne.n	80036de <LL_ADC_REG_IsConversionOngoing+0x18>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d101      	bne.n	8003704 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b08b      	sub	sp, #44	@ 0x2c
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003722:	2300      	movs	r3, #0
 8003724:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e2ce      	b.n	8003cd2 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a95      	ldr	r2, [pc, #596]	@ (8003998 <HAL_ADC_Init+0x284>)
 8003742:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7fe f9c5 	bl	8001adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff37 	bl	80035d8 <LL_ADC_IsDeepPowerDownEnabled>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d004      	beq.n	800377a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff1d 	bl	80035b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ff52 	bl	8003628 <LL_ADC_IsInternalRegulatorEnabled>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d115      	bne.n	80037b6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff ff36 	bl	8003600 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003794:	4b81      	ldr	r3, [pc, #516]	@ (800399c <HAL_ADC_Init+0x288>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	099b      	lsrs	r3, r3, #6
 800379a:	4a81      	ldr	r2, [pc, #516]	@ (80039a0 <HAL_ADC_Init+0x28c>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	3301      	adds	r3, #1
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037a8:	e002      	b.n	80037b0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f9      	bne.n	80037aa <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ff34 	bl	8003628 <LL_ADC_IsInternalRegulatorEnabled>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10e      	bne.n	80037e4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff ff6c 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 80037ee:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f040 825f 	bne.w	8003cbc <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f040 825b 	bne.w	8003cbc <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800380a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800380e:	f043 0202 	orr.w	r2, r3, #2
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff ff2c 	bl	8003678 <LL_ADC_IsEnabled>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d14f      	bne.n	80038c6 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a5b      	ldr	r2, [pc, #364]	@ (8003998 <HAL_ADC_Init+0x284>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d037      	beq.n	80038a0 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a5b      	ldr	r2, [pc, #364]	@ (80039a4 <HAL_ADC_Init+0x290>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_ADC_Init+0x130>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a5a      	ldr	r2, [pc, #360]	@ (80039a8 <HAL_ADC_Init+0x294>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10e      	bne.n	8003862 <HAL_ADC_Init+0x14e>
 8003844:	4857      	ldr	r0, [pc, #348]	@ (80039a4 <HAL_ADC_Init+0x290>)
 8003846:	f7ff ff17 	bl	8003678 <LL_ADC_IsEnabled>
 800384a:	4604      	mov	r4, r0
 800384c:	4856      	ldr	r0, [pc, #344]	@ (80039a8 <HAL_ADC_Init+0x294>)
 800384e:	f7ff ff13 	bl	8003678 <LL_ADC_IsEnabled>
 8003852:	4603      	mov	r3, r0
 8003854:	4323      	orrs	r3, r4
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e008      	b.n	8003874 <HAL_ADC_Init+0x160>
 8003862:	484d      	ldr	r0, [pc, #308]	@ (8003998 <HAL_ADC_Init+0x284>)
 8003864:	f7ff ff08 	bl	8003678 <LL_ADC_IsEnabled>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d026      	beq.n	80038c6 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a49      	ldr	r2, [pc, #292]	@ (80039a4 <HAL_ADC_Init+0x290>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_ADC_Init+0x178>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a48      	ldr	r2, [pc, #288]	@ (80039a8 <HAL_ADC_Init+0x294>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_ADC_Init+0x17c>
 800388c:	4a47      	ldr	r2, [pc, #284]	@ (80039ac <HAL_ADC_Init+0x298>)
 800388e:	e000      	b.n	8003892 <HAL_ADC_Init+0x17e>
 8003890:	4a47      	ldr	r2, [pc, #284]	@ (80039b0 <HAL_ADC_Init+0x29c>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4619      	mov	r1, r3
 8003898:	4610      	mov	r0, r2
 800389a:	f7ff fbe9 	bl	8003070 <LL_ADC_SetCommonClock>
 800389e:	e012      	b.n	80038c6 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f7ff fc14 	bl	80030d8 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80038b0:	4b3f      	ldr	r3, [pc, #252]	@ (80039b0 <HAL_ADC_Init+0x29c>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80038c0:	493b      	ldr	r1, [pc, #236]	@ (80039b0 <HAL_ADC_Init+0x29c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a33      	ldr	r2, [pc, #204]	@ (8003998 <HAL_ADC_Init+0x284>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d010      	beq.n	80038f2 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038d6:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038dc:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80038e2:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80038ea:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80038ec:	4313      	orrs	r3, r2
 80038ee:	623b      	str	r3, [r7, #32]
 80038f0:	e035      	b.n	800395e <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	7f1b      	ldrb	r3, [r3, #28]
 80038f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038fe:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003900:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003906:	2a00      	cmp	r2, #0
 8003908:	d002      	beq.n	8003910 <HAL_ADC_Init+0x1fc>
 800390a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800390e:	e000      	b.n	8003912 <HAL_ADC_Init+0x1fe>
 8003910:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003912:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003918:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	da04      	bge.n	800392c <HAL_ADC_Init+0x218>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800392a:	e001      	b.n	8003930 <HAL_ADC_Init+0x21c>
 800392c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003930:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	491b      	ldr	r1, [pc, #108]	@ (80039a4 <HAL_ADC_Init+0x290>)
 8003938:	428b      	cmp	r3, r1
 800393a:	d004      	beq.n	8003946 <HAL_ADC_Init+0x232>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4919      	ldr	r1, [pc, #100]	@ (80039a8 <HAL_ADC_Init+0x294>)
 8003942:	428b      	cmp	r3, r1
 8003944:	d103      	bne.n	800394e <HAL_ADC_Init+0x23a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800394c:	e003      	b.n	8003956 <HAL_ADC_Init+0x242>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003954:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003956:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	4313      	orrs	r3, r2
 800395c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d131      	bne.n	80039cc <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0a      	ldr	r2, [pc, #40]	@ (8003998 <HAL_ADC_Init+0x284>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	3b01      	subs	r3, #1
 8003978:	045b      	lsls	r3, r3, #17
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	4313      	orrs	r3, r2
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	e024      	b.n	80039cc <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d113      	bne.n	80039b4 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	e01a      	b.n	80039cc <HAL_ADC_Init+0x2b8>
 8003996:	bf00      	nop
 8003998:	46021000 	.word	0x46021000
 800399c:	20000024 	.word	0x20000024
 80039a0:	053e2d63 	.word	0x053e2d63
 80039a4:	42028000 	.word	0x42028000
 80039a8:	42028100 	.word	0x42028100
 80039ac:	42028300 	.word	0x42028300
 80039b0:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a75      	ldr	r2, [pc, #468]	@ (8003ba8 <HAL_ADC_Init+0x494>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d018      	beq.n	8003a08 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ea:	4313      	orrs	r3, r2
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	4b6c      	ldr	r3, [pc, #432]	@ (8003bac <HAL_ADC_Init+0x498>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	6a39      	ldr	r1, [r7, #32]
 8003a02:	430b      	orrs	r3, r1
 8003a04:	60d3      	str	r3, [r2, #12]
 8003a06:	e031      	b.n	8003a6c <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a14:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	4b61      	ldr	r3, [pc, #388]	@ (8003bb0 <HAL_ADC_Init+0x49c>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	6a39      	ldr	r1, [r7, #32]
 8003a34:	430b      	orrs	r3, r1
 8003a36:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4d      	ldr	r2, [pc, #308]	@ (8003ba8 <HAL_ADC_Init+0x494>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	f000 80a4 	beq.w	8003bc0 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fe22 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 8003a82:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fe2f 	bl	80036ec <LL_ADC_INJ_IsConversionOngoing>
 8003a8e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d166      	bne.n	8003b64 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d163      	bne.n	8003b64 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	7f1b      	ldrb	r3, [r3, #28]
 8003aa0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4943      	ldr	r1, [pc, #268]	@ (8003bb4 <HAL_ADC_Init+0x4a0>)
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	d004      	beq.n	8003ab6 <HAL_ADC_Init+0x3a2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4941      	ldr	r1, [pc, #260]	@ (8003bb8 <HAL_ADC_Init+0x4a4>)
 8003ab2:	428b      	cmp	r3, r1
 8003ab4:	d102      	bne.n	8003abc <HAL_ADC_Init+0x3a8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aba:	e002      	b.n	8003ac2 <HAL_ADC_Init+0x3ae>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ad0:	f023 0303 	bic.w	r3, r3, #3
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	6a39      	ldr	r1, [r7, #32]
 8003ada:	430b      	orrs	r3, r1
 8003adc:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7ff fb99 	bl	8003228 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d11e      	bne.n	8003b3e <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b04:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bbc <HAL_ADC_Init+0x4a8>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003b14:	0411      	lsls	r1, r2, #16
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b2c:	0892      	lsrs	r2, r2, #2
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	611a      	str	r2, [r3, #16]
 8003b3c:	e007      	b.n	8003b4e <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d10c      	bne.n	8003b86 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	f023 010f 	bic.w	r1, r3, #15
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7a:	1e5a      	subs	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b84:	e007      	b.n	8003b96 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 020f 	bic.w	r2, r2, #15
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	f043 0201 	orr.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003ba6:	e092      	b.n	8003cce <HAL_ADC_Init+0x5ba>
 8003ba8:	46021000 	.word	0x46021000
 8003bac:	fff0c013 	.word	0xfff0c013
 8003bb0:	ffde800d 	.word	0xffde800d
 8003bb4:	42028000 	.word	0x42028000
 8003bb8:	42028100 	.word	0x42028100
 8003bbc:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d111      	bne.n	8003bee <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003bd2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003bd8:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003bde:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	4b39      	ldr	r3, [pc, #228]	@ (8003cdc <HAL_ADC_Init+0x5c8>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	69f9      	ldr	r1, [r7, #28]
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	f7ff fb2e 	bl	800326e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003c20:	f7ff fb25 	bl	800326e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d108      	bne.n	8003c3e <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f062 020f 	orn	r2, r2, #15
 8003c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c3c:	e018      	b.n	8003c70 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c46:	d113      	bne.n	8003c70 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c52:	3b01      	subs	r3, #1
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	f003 031c 	and.w	r3, r3, #28
 8003c5a:	f06f 020f 	mvn.w	r2, #15
 8003c5e:	fa02 f103 	lsl.w	r1, r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce0 <HAL_ADC_Init+0x5cc>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	6a3a      	ldr	r2, [r7, #32]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d10b      	bne.n	8003c98 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003c96:	e01a      	b.n	8003cce <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c9c:	f023 0312 	bic.w	r3, r3, #18
 8003ca0:	f043 0210 	orr.w	r2, r3, #16
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003cba:	e008      	b.n	8003cce <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cc0:	f043 0210 	orr.w	r2, r3, #16
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	372c      	adds	r7, #44	@ 0x2c
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd90      	pop	{r4, r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	f7fffc02 	.word	0xf7fffc02
 8003ce0:	833ffff3 	.word	0x833ffff3

08003ce4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b0a2      	sub	sp, #136	@ 0x88
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a98      	ldr	r2, [pc, #608]	@ (8003f58 <HAL_ADC_Start_DMA+0x274>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_ADC_Start_DMA+0x20>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a97      	ldr	r2, [pc, #604]	@ (8003f5c <HAL_ADC_Start_DMA+0x278>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <HAL_ADC_Start_DMA+0x24>
 8003d04:	4b96      	ldr	r3, [pc, #600]	@ (8003f60 <HAL_ADC_Start_DMA+0x27c>)
 8003d06:	e000      	b.n	8003d0a <HAL_ADC_Start_DMA+0x26>
 8003d08:	4b96      	ldr	r3, [pc, #600]	@ (8003f64 <HAL_ADC_Start_DMA+0x280>)
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fc36 	bl	800357c <LL_ADC_GetMultimode>
 8003d10:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fcd5 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f040 8111 	bne.w	8003f46 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_Start_DMA+0x4e>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e10e      	b.n	8003f50 <HAL_ADC_Start_DMA+0x26c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d006      	beq.n	8003d4e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d003      	beq.n	8003d4e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d48:	2b09      	cmp	r3, #9
 8003d4a:	f040 80f4 	bne.w	8003f36 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f001 fa2c 	bl	80051ac <ADC_Enable>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003d5a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 80e4 	bne.w	8003f2c <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a7a      	ldr	r2, [pc, #488]	@ (8003f68 <HAL_ADC_Start_DMA+0x284>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d026      	beq.n	8003dd0 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a75      	ldr	r2, [pc, #468]	@ (8003f5c <HAL_ADC_Start_DMA+0x278>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d002      	beq.n	8003d92 <HAL_ADC_Start_DMA+0xae>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	e000      	b.n	8003d94 <HAL_ADC_Start_DMA+0xb0>
 8003d92:	4b71      	ldr	r3, [pc, #452]	@ (8003f58 <HAL_ADC_Start_DMA+0x274>)
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d002      	beq.n	8003da2 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d105      	bne.n	8003dae <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003da6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dbe:	f023 0206 	bic.w	r2, r3, #6
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003dc6:	e006      	b.n	8003dd6 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003dce:	e002      	b.n	8003dd6 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	4a64      	ldr	r2, [pc, #400]	@ (8003f6c <HAL_ADC_Start_DMA+0x288>)
 8003ddc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de2:	4a63      	ldr	r2, [pc, #396]	@ (8003f70 <HAL_ADC_Start_DMA+0x28c>)
 8003de4:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	4a62      	ldr	r2, [pc, #392]	@ (8003f74 <HAL_ADC_Start_DMA+0x290>)
 8003dec:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	221c      	movs	r2, #28
 8003df4:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0210 	orr.w	r2, r2, #16
 8003e0c:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a55      	ldr	r2, [pc, #340]	@ (8003f68 <HAL_ADC_Start_DMA+0x284>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d107      	bne.n	8003e28 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d04f      	beq.n	8003ed6 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d046      	beq.n	8003ece <HAL_ADC_Start_DMA+0x1ea>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d040      	beq.n	8003ece <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	f107 0310 	add.w	r3, r7, #16
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f002 fd9c 	bl	8006998 <HAL_DMAEx_List_GetNodeConfig>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e072      	b.n	8003f50 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d104      	bne.n	8003e7a <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e78:	e00a      	b.n	8003e90 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d104      	bne.n	8003e8a <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e88:	e002      	b.n	8003e90 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e9c:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f002 fcbf 	bl	8006844 <HAL_DMAEx_List_Start_IT>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003ecc:	e028      	b.n	8003f20 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003ed4:	e024      	b.n	8003f20 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d104      	bne.n	8003eea <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ee8:	e00c      	b.n	8003f04 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d104      	bne.n	8003efe <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003efc:	e002      	b.n	8003f04 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3340      	adds	r3, #64	@ 0x40
 8003f0e:	4619      	mov	r1, r3
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f16:	f001 fd03 	bl	8005920 <HAL_DMA_Start_IT>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fbba 	bl	800369e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003f2a:	e00f      	b.n	8003f4c <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003f34:	e00a      	b.n	8003f4c <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003f44:	e002      	b.n	8003f4c <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
 8003f48:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003f4c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3788      	adds	r7, #136	@ 0x88
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	42028000 	.word	0x42028000
 8003f5c:	42028100 	.word	0x42028100
 8003f60:	42028300 	.word	0x42028300
 8003f64:	46021300 	.word	0x46021300
 8003f68:	46021000 	.word	0x46021000
 8003f6c:	080052e1 	.word	0x080052e1
 8003f70:	080053b9 	.word	0x080053b9
 8003f74:	080053d5 	.word	0x080053d5

08003f78 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	@ 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a77      	ldr	r2, [pc, #476]	@ (8004178 <HAL_ADC_IRQHandler+0x200>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_ADC_IRQHandler+0x30>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a76      	ldr	r2, [pc, #472]	@ (800417c <HAL_ADC_IRQHandler+0x204>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d101      	bne.n	8003fac <HAL_ADC_IRQHandler+0x34>
 8003fa8:	4b75      	ldr	r3, [pc, #468]	@ (8004180 <HAL_ADC_IRQHandler+0x208>)
 8003faa:	e000      	b.n	8003fae <HAL_ADC_IRQHandler+0x36>
 8003fac:	4b75      	ldr	r3, [pc, #468]	@ (8004184 <HAL_ADC_IRQHandler+0x20c>)
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fae4 	bl	800357c <LL_ADC_GetMultimode>
 8003fb4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d017      	beq.n	8003ff0 <HAL_ADC_IRQHandler+0x78>
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d012      	beq.n	8003ff0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d105      	bne.n	8003fe2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fda:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f001 fa2e 	bl	8005444 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2202      	movs	r2, #2
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <HAL_ADC_IRQHandler+0x8c>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10b      	bne.n	800401c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 80d1 	beq.w	80041b2 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 80cb 	beq.w	80041b2 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d105      	bne.n	8004034 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800402c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a53      	ldr	r2, [pc, #332]	@ (8004188 <HAL_ADC_IRQHandler+0x210>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d06c      	beq.n	8004118 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff f932 	bl	80032ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80aa 	beq.w	80041a4 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a49      	ldr	r2, [pc, #292]	@ (800417c <HAL_ADC_IRQHandler+0x204>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d002      	beq.n	8004060 <HAL_ADC_IRQHandler+0xe8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	e000      	b.n	8004062 <HAL_ADC_IRQHandler+0xea>
 8004060:	4b45      	ldr	r3, [pc, #276]	@ (8004178 <HAL_ADC_IRQHandler+0x200>)
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	4293      	cmp	r3, r2
 8004068:	d008      	beq.n	800407c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b05      	cmp	r3, #5
 8004074:	d002      	beq.n	800407c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b09      	cmp	r3, #9
 800407a:	d104      	bne.n	8004086 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	e00c      	b.n	80040a0 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a3c      	ldr	r2, [pc, #240]	@ (800417c <HAL_ADC_IRQHandler+0x204>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d002      	beq.n	8004096 <HAL_ADC_IRQHandler+0x11e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	e000      	b.n	8004098 <HAL_ADC_IRQHandler+0x120>
 8004096:	4b38      	ldr	r3, [pc, #224]	@ (8004178 <HAL_ADC_IRQHandler+0x200>)
 8004098:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d17c      	bne.n	80041a4 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d175      	bne.n	80041a4 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fb02 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d11a      	bne.n	80040fe <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 020c 	bic.w	r2, r2, #12
 80040d6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d159      	bne.n	80041a4 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040f4:	f043 0201 	orr.w	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	679a      	str	r2, [r3, #120]	@ 0x78
 80040fc:	e052      	b.n	80041a4 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004102:	f043 0210 	orr.w	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800410e:	f043 0201 	orr.w	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004116:	e045      	b.n	80041a4 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff f8c5 	bl	80032ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d03d      	beq.n	80041a4 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800412e:	2b00      	cmp	r3, #0
 8004130:	d138      	bne.n	80041a4 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b08      	cmp	r3, #8
 800413e:	d131      	bne.n	80041a4 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fabe 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d11d      	bne.n	800418c <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 020c 	bic.w	r2, r2, #12
 800415e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	f043 0201 	orr.w	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	679a      	str	r2, [r3, #120]	@ 0x78
 8004174:	e016      	b.n	80041a4 <HAL_ADC_IRQHandler+0x22c>
 8004176:	bf00      	nop
 8004178:	42028000 	.word	0x42028000
 800417c:	42028100 	.word	0x42028100
 8004180:	42028300 	.word	0x42028300
 8004184:	46021300 	.word	0x46021300
 8004188:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800419c:	f043 0201 	orr.w	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f99d 	bl	80044e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	220c      	movs	r2, #12
 80041b0:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a8c      	ldr	r2, [pc, #560]	@ (80043e8 <HAL_ADC_IRQHandler+0x470>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	f000 8095 	beq.w	80042e8 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d004      	beq.n	80041d2 <HAL_ADC_IRQHandler+0x25a>
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8085 	beq.w	80042e8 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d07f      	beq.n	80042e8 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff f91e 	bl	8003446 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800420a:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff f84b 	bl	80032ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8004216:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a73      	ldr	r2, [pc, #460]	@ (80043ec <HAL_ADC_IRQHandler+0x474>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d002      	beq.n	8004228 <HAL_ADC_IRQHandler+0x2b0>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	e000      	b.n	800422a <HAL_ADC_IRQHandler+0x2b2>
 8004228:	4b71      	ldr	r3, [pc, #452]	@ (80043f0 <HAL_ADC_IRQHandler+0x478>)
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	4293      	cmp	r3, r2
 8004230:	d008      	beq.n	8004244 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b06      	cmp	r3, #6
 800423c:	d002      	beq.n	8004244 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b07      	cmp	r3, #7
 8004242:	d104      	bne.n	800424e <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	623b      	str	r3, [r7, #32]
 800424c:	e00c      	b.n	8004268 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a66      	ldr	r2, [pc, #408]	@ (80043ec <HAL_ADC_IRQHandler+0x474>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d002      	beq.n	800425e <HAL_ADC_IRQHandler+0x2e6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	e000      	b.n	8004260 <HAL_ADC_IRQHandler+0x2e8>
 800425e:	4b64      	ldr	r3, [pc, #400]	@ (80043f0 <HAL_ADC_IRQHandler+0x478>)
 8004260:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d035      	beq.n	80042da <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_ADC_IRQHandler+0x310>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d02d      	beq.n	80042da <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004284:	2b00      	cmp	r3, #0
 8004286:	d128      	bne.n	80042da <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004292:	2b40      	cmp	r3, #64	@ 0x40
 8004294:	d121      	bne.n	80042da <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fa26 	bl	80036ec <LL_ADC_INJ_IsConversionOngoing>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d119      	bne.n	80042da <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042b4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042d2:	f043 0201 	orr.w	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 f894 	bl	8005408 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2260      	movs	r2, #96	@ 0x60
 80042e6:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d011      	beq.n	8004316 <HAL_ADC_IRQHandler+0x39e>
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00c      	beq.n	8004316 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004300:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f8ff 	bl	800450c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2280      	movs	r2, #128	@ 0x80
 8004314:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d012      	beq.n	8004346 <HAL_ADC_IRQHandler+0x3ce>
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800432e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f001 f870 	bl	800541c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004344:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800434c:	2b00      	cmp	r3, #0
 800434e:	d012      	beq.n	8004376 <HAL_ADC_IRQHandler+0x3fe>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800435e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f001 f862 	bl	8005430 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	d05d      	beq.n	800443c <HAL_ADC_IRQHandler+0x4c4>
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b00      	cmp	r3, #0
 8004388:	d058      	beq.n	800443c <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8004392:	2301      	movs	r3, #1
 8004394:	627b      	str	r3, [r7, #36]	@ 0x24
 8004396:	e03b      	b.n	8004410 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a12      	ldr	r2, [pc, #72]	@ (80043e8 <HAL_ADC_IRQHandler+0x470>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d02c      	beq.n	80043fc <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d015      	beq.n	80043d4 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a10      	ldr	r2, [pc, #64]	@ (80043f0 <HAL_ADC_IRQHandler+0x478>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_ADC_IRQHandler+0x444>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a0d      	ldr	r2, [pc, #52]	@ (80043ec <HAL_ADC_IRQHandler+0x474>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_IRQHandler+0x448>
 80043bc:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <HAL_ADC_IRQHandler+0x47c>)
 80043be:	e000      	b.n	80043c2 <HAL_ADC_IRQHandler+0x44a>
 80043c0:	4b0d      	ldr	r3, [pc, #52]	@ (80043f8 <HAL_ADC_IRQHandler+0x480>)
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff f8e8 	bl	8003598 <LL_ADC_GetMultiDMATransfer>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d020      	beq.n	8004410 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80043ce:	2301      	movs	r3, #1
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d2:	e01d      	b.n	8004410 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d016      	beq.n	8004410 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80043e2:	2301      	movs	r3, #1
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e6:	e013      	b.n	8004410 <HAL_ADC_IRQHandler+0x498>
 80043e8:	46021000 	.word	0x46021000
 80043ec:	42028100 	.word	0x42028100
 80043f0:	42028000 	.word	0x42028000
 80043f4:	42028300 	.word	0x42028300
 80043f8:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff f812 	bl	800342a <LL_ADC_REG_GetDMATransfer>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 800440c:	2301      	movs	r3, #1
 800440e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10e      	bne.n	8004434 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800441a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004426:	f043 0202 	orr.w	r2, r3, #2
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f876 	bl	8004520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2210      	movs	r2, #16
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01b      	beq.n	800447e <HAL_ADC_IRQHandler+0x506>
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d016      	beq.n	800447e <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f877 	bl	800455c <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a17      	ldr	r2, [pc, #92]	@ (80044e0 <HAL_ADC_IRQHandler+0x568>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d126      	bne.n	80044d6 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00c      	beq.n	80044ac <HAL_ADC_IRQHandler+0x534>
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f849 	bl	8004534 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044aa:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00f      	beq.n	80044d6 <HAL_ADC_IRQHandler+0x55e>
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f841 	bl	8004548 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044d4:	605a      	str	r2, [r3, #4]
    }
  }
}
 80044d6:	bf00      	nop
 80044d8:	3728      	adds	r7, #40	@ 0x28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	46021000 	.word	0x46021000

080044e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b0b7      	sub	sp, #220	@ 0xdc
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4aa8      	ldr	r2, [pc, #672]	@ (800482c <HAL_ADC_ConfigChannel+0x2bc>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d103      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800459c:	2b01      	cmp	r3, #1
 800459e:	d102      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x36>
 80045a0:	2302      	movs	r3, #2
 80045a2:	f000 bdfe 	b.w	80051a2 <HAL_ADC_ConfigChannel+0xc32>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff f887 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f040 85c1 	bne.w	8005142 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a99      	ldr	r2, [pc, #612]	@ (800482c <HAL_ADC_ConfigChannel+0x2bc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	f000 8409 	beq.w	8004dde <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d108      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x7a>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0e9b      	lsrs	r3, r3, #26
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	2201      	movs	r2, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	e01d      	b.n	8004626 <HAL_ADC_ConfigChannel+0xb6>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80045fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004602:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004606:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800460e:	2320      	movs	r3, #32
 8004610:	e004      	b.n	800461c <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8004612:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	2201      	movs	r2, #1
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	69d1      	ldr	r1, [r2, #28]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	430b      	orrs	r3, r1
 8004632:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	f7fe fe47 	bl	80032d4 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff f83b 	bl	80036c6 <LL_ADC_REG_IsConversionOngoing>
 8004650:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff f847 	bl	80036ec <LL_ADC_INJ_IsConversionOngoing>
 800465e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004666:	2b00      	cmp	r3, #0
 8004668:	f040 81df 	bne.w	8004a2a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800466c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004670:	2b00      	cmp	r3, #0
 8004672:	f040 81da 	bne.w	8004a2a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6819      	ldr	r1, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	461a      	mov	r2, r3
 8004684:	f7fe fef2 	bl	800346c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	089b      	lsrs	r3, r3, #2
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d046      	beq.n	8004738 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6919      	ldr	r1, [r3, #16]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046ba:	f7fe fd2d 	bl	8003118 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6919      	ldr	r1, [r3, #16]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f7fe fd5b 	bl	8003186 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	7e9b      	ldrb	r3, [r3, #26]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d11e      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x17e>
 80046e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046ec:	e000      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x180>
 80046ee:	2300      	movs	r3, #0
 80046f0:	461a      	mov	r2, r3
 80046f2:	f7fe fd7e 	bl	80031f2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004702:	2b01      	cmp	r3, #1
 8004704:	d102      	bne.n	800470c <HAL_ADC_ConfigChannel+0x19c>
 8004706:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800470a:	e000      	b.n	800470e <HAL_ADC_ConfigChannel+0x19e>
 800470c:	2300      	movs	r3, #0
 800470e:	461a      	mov	r2, r3
 8004710:	f7fe fd54 	bl	80031bc <LL_ADC_SetOffsetSignedSaturation>
 8004714:	e189      	b.n	8004a2a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2200      	movs	r2, #0
 8004720:	4619      	mov	r1, r3
 8004722:	f7fe fd66 	bl	80031f2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2200      	movs	r2, #0
 8004730:	4619      	mov	r1, r3
 8004732:	f7fe fd43 	bl	80031bc <LL_ADC_SetOffsetSignedSaturation>
 8004736:	e178      	b.n	8004a2a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fd0b 	bl	800315a <LL_ADC_GetOffsetChannel>
 8004744:	4603      	mov	r3, r0
 8004746:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x1f4>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fd00 	bl	800315a <LL_ADC_GetOffsetChannel>
 800475a:	4603      	mov	r3, r0
 800475c:	0e9b      	lsrs	r3, r3, #26
 800475e:	f003 021f 	and.w	r2, r3, #31
 8004762:	e01e      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x232>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fcf5 	bl	800315a <LL_ADC_GetOffsetChannel>
 8004770:	4603      	mov	r3, r0
 8004772:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800478a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004792:	2320      	movs	r3, #32
 8004794:	e004      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004796:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d105      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x24a>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	0e9b      	lsrs	r3, r3, #26
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	e018      	b.n	80047ec <HAL_ADC_ConfigChannel+0x27c>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047c6:	fa93 f3a3 	rbit	r3, r3
 80047ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80047ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80047d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80047de:	2320      	movs	r3, #32
 80047e0:	e004      	b.n	80047ec <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80047e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d107      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	2300      	movs	r3, #0
 80047fa:	2100      	movs	r1, #0
 80047fc:	f7fe fc8c 	bl	8003118 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2101      	movs	r1, #1
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fca7 	bl	800315a <LL_ADC_GetOffsetChannel>
 800480c:	4603      	mov	r3, r0
 800480e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10c      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x2c0>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2101      	movs	r1, #1
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe fc9c 	bl	800315a <LL_ADC_GetOffsetChannel>
 8004822:	4603      	mov	r3, r0
 8004824:	0e9b      	lsrs	r3, r3, #26
 8004826:	f003 021f 	and.w	r2, r3, #31
 800482a:	e020      	b.n	800486e <HAL_ADC_ConfigChannel+0x2fe>
 800482c:	46021000 	.word	0x46021000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2101      	movs	r1, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fc8f 	bl	800315a <LL_ADC_GetOffsetChannel>
 800483c:	4603      	mov	r3, r0
 800483e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004846:	fa93 f3a3 	rbit	r3, r3
 800484a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800484e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004852:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004856:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800485e:	2320      	movs	r3, #32
 8004860:	e004      	b.n	800486c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004862:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004866:	fab3 f383 	clz	r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x316>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	0e9b      	lsrs	r3, r3, #26
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	e018      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x348>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004892:	fa93 f3a3 	rbit	r3, r3
 8004896:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800489a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800489e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80048a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80048aa:	2320      	movs	r3, #32
 80048ac:	e004      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80048ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d107      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	2300      	movs	r3, #0
 80048c6:	2101      	movs	r1, #1
 80048c8:	f7fe fc26 	bl	8003118 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2102      	movs	r1, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fc41 	bl	800315a <LL_ADC_GetOffsetChannel>
 80048d8:	4603      	mov	r3, r0
 80048da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x388>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2102      	movs	r1, #2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe fc36 	bl	800315a <LL_ADC_GetOffsetChannel>
 80048ee:	4603      	mov	r3, r0
 80048f0:	0e9b      	lsrs	r3, r3, #26
 80048f2:	f003 021f 	and.w	r2, r3, #31
 80048f6:	e01a      	b.n	800492e <HAL_ADC_ConfigChannel+0x3be>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2102      	movs	r1, #2
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe fc2b 	bl	800315a <LL_ADC_GetOffsetChannel>
 8004904:	4603      	mov	r3, r0
 8004906:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800490a:	fa93 f3a3 	rbit	r3, r3
 800490e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004912:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004916:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800491e:	2320      	movs	r3, #32
 8004920:	e004      	b.n	800492c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004922:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d105      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x3d6>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	0e9b      	lsrs	r3, r3, #26
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	e011      	b.n	800496a <HAL_ADC_ConfigChannel+0x3fa>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004956:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004958:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800495e:	2320      	movs	r3, #32
 8004960:	e003      	b.n	800496a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004964:	fab3 f383 	clz	r3, r3
 8004968:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800496a:	429a      	cmp	r2, r3
 800496c:	d107      	bne.n	800497e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	2300      	movs	r3, #0
 8004978:	2102      	movs	r1, #2
 800497a:	f7fe fbcd 	bl	8003118 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2103      	movs	r1, #3
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fbe8 	bl	800315a <LL_ADC_GetOffsetChannel>
 800498a:	4603      	mov	r3, r0
 800498c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x43a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2103      	movs	r1, #3
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fbdd 	bl	800315a <LL_ADC_GetOffsetChannel>
 80049a0:	4603      	mov	r3, r0
 80049a2:	0e9b      	lsrs	r3, r3, #26
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	e017      	b.n	80049da <HAL_ADC_ConfigChannel+0x46a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2103      	movs	r1, #3
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fe fbd2 	bl	800315a <LL_ADC_GetOffsetChannel>
 80049b6:	4603      	mov	r3, r0
 80049b8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049bc:	fa93 f3a3 	rbit	r3, r3
 80049c0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80049c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80049c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80049cc:	2320      	movs	r3, #32
 80049ce:	e003      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80049d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049d2:	fab3 f383 	clz	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d105      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x482>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	0e9b      	lsrs	r3, r3, #26
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	e011      	b.n	8004a16 <HAL_ADC_ConfigChannel+0x4a6>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8004a0a:	2320      	movs	r3, #32
 8004a0c:	e003      	b.n	8004a16 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8004a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a10:	fab3 f383 	clz	r3, r3
 8004a14:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d107      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	2103      	movs	r1, #3
 8004a26:	f7fe fb77 	bl	8003118 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fe22 	bl	8003678 <LL_ADC_IsEnabled>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 83ad 	bne.w	8005196 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f7fe fd73 	bl	8003534 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a56:	f040 80d6 	bne.w	8004c06 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x50e>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	0e9b      	lsrs	r3, r3, #26
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	2b09      	cmp	r3, #9
 8004a74:	bf94      	ite	ls
 8004a76:	2301      	movls	r3, #1
 8004a78:	2300      	movhi	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e019      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x542>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a86:	fa93 f3a3 	rbit	r3, r3
 8004a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a8e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004a96:	2320      	movs	r3, #32
 8004a98:	e003      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a9c:	fab3 f383 	clz	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	2b09      	cmp	r3, #9
 8004aaa:	bf94      	ite	ls
 8004aac:	2301      	movls	r3, #1
 8004aae:	2300      	movhi	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d04d      	beq.n	8004b52 <HAL_ADC_ConfigChannel+0x5e2>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x562>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	0e9b      	lsrs	r3, r3, #26
 8004ac8:	3301      	adds	r3, #1
 8004aca:	069b      	lsls	r3, r3, #26
 8004acc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ad0:	e015      	b.n	8004afe <HAL_ADC_ConfigChannel+0x58e>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004aea:	2320      	movs	r3, #32
 8004aec:	e003      	b.n	8004af6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004af0:	fab3 f383 	clz	r3, r3
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	069b      	lsls	r3, r3, #26
 8004afa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x5ae>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	0e9b      	lsrs	r3, r3, #26
 8004b10:	3301      	adds	r3, #1
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2101      	movs	r1, #1
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	e017      	b.n	8004b4e <HAL_ADC_ConfigChannel+0x5de>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b26:	fa93 f3a3 	rbit	r3, r3
 8004b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8004b36:	2320      	movs	r3, #32
 8004b38:	e003      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3c:	fab3 f383 	clz	r3, r3
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	e04e      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x680>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d107      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0x5fe>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	0e9b      	lsrs	r3, r3, #26
 8004b64:	3301      	adds	r3, #1
 8004b66:	069b      	lsls	r3, r3, #26
 8004b68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b6c:	e015      	b.n	8004b9a <HAL_ADC_ConfigChannel+0x62a>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	fa93 f3a3 	rbit	r3, r3
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004b86:	2320      	movs	r3, #32
 8004b88:	e003      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b8c:	fab3 f383 	clz	r3, r3
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	3301      	adds	r3, #1
 8004b94:	069b      	lsls	r3, r3, #26
 8004b96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x64a>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	0e9b      	lsrs	r3, r3, #26
 8004bac:	3301      	adds	r3, #1
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb8:	e017      	b.n	8004bea <HAL_ADC_ConfigChannel+0x67a>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	61bb      	str	r3, [r7, #24]
  return result;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8004bd2:	2320      	movs	r3, #32
 8004bd4:	e003      	b.n	8004bde <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	fab3 f383 	clz	r3, r3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	3301      	adds	r3, #1
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004c02:	f7fe fc33 	bl	800346c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f280 82c3 	bge.w	8005196 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a92      	ldr	r2, [pc, #584]	@ (8004e60 <HAL_ADC_ConfigChannel+0x8f0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_ADC_ConfigChannel+0x6b4>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a91      	ldr	r2, [pc, #580]	@ (8004e64 <HAL_ADC_ConfigChannel+0x8f4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x6b8>
 8004c24:	4b90      	ldr	r3, [pc, #576]	@ (8004e68 <HAL_ADC_ConfigChannel+0x8f8>)
 8004c26:	e000      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x6ba>
 8004c28:	4b90      	ldr	r3, [pc, #576]	@ (8004e6c <HAL_ADC_ConfigChannel+0x8fc>)
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fa46 	bl	80030bc <LL_ADC_GetCommonPathInternalCh>
 8004c30:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a89      	ldr	r2, [pc, #548]	@ (8004e60 <HAL_ADC_ConfigChannel+0x8f0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <HAL_ADC_ConfigChannel+0x6d8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a88      	ldr	r2, [pc, #544]	@ (8004e64 <HAL_ADC_ConfigChannel+0x8f4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d10e      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x6f6>
 8004c48:	4885      	ldr	r0, [pc, #532]	@ (8004e60 <HAL_ADC_ConfigChannel+0x8f0>)
 8004c4a:	f7fe fd15 	bl	8003678 <LL_ADC_IsEnabled>
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4884      	ldr	r0, [pc, #528]	@ (8004e64 <HAL_ADC_ConfigChannel+0x8f4>)
 8004c52:	f7fe fd11 	bl	8003678 <LL_ADC_IsEnabled>
 8004c56:	4603      	mov	r3, r0
 8004c58:	4323      	orrs	r3, r4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	e008      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x708>
 8004c66:	4882      	ldr	r0, [pc, #520]	@ (8004e70 <HAL_ADC_ConfigChannel+0x900>)
 8004c68:	f7fe fd06 	bl	8003678 <LL_ADC_IsEnabled>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf0c      	ite	eq
 8004c72:	2301      	moveq	r3, #1
 8004c74:	2300      	movne	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80a6 	beq.w	8004dca <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a7c      	ldr	r2, [pc, #496]	@ (8004e74 <HAL_ADC_ConfigChannel+0x904>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d13c      	bne.n	8004d02 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d136      	bne.n	8004d02 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a71      	ldr	r2, [pc, #452]	@ (8004e60 <HAL_ADC_ConfigChannel+0x8f0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_ADC_ConfigChannel+0x744>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a70      	ldr	r2, [pc, #448]	@ (8004e64 <HAL_ADC_ConfigChannel+0x8f4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d005      	beq.n	8004cb4 <HAL_ADC_ConfigChannel+0x744>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a70      	ldr	r2, [pc, #448]	@ (8004e70 <HAL_ADC_ConfigChannel+0x900>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	f040 826e 	bne.w	8005190 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a69      	ldr	r2, [pc, #420]	@ (8004e60 <HAL_ADC_ConfigChannel+0x8f0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_ADC_ConfigChannel+0x758>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a68      	ldr	r2, [pc, #416]	@ (8004e64 <HAL_ADC_ConfigChannel+0x8f4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x75c>
 8004cc8:	4a67      	ldr	r2, [pc, #412]	@ (8004e68 <HAL_ADC_ConfigChannel+0x8f8>)
 8004cca:	e000      	b.n	8004cce <HAL_ADC_ConfigChannel+0x75e>
 8004ccc:	4a67      	ldr	r2, [pc, #412]	@ (8004e6c <HAL_ADC_ConfigChannel+0x8fc>)
 8004cce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cd2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f7fe f9dc 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cde:	4b66      	ldr	r3, [pc, #408]	@ (8004e78 <HAL_ADC_ConfigChannel+0x908>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	099b      	lsrs	r3, r3, #6
 8004ce4:	4a65      	ldr	r2, [pc, #404]	@ (8004e7c <HAL_ADC_ConfigChannel+0x90c>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	3301      	adds	r3, #1
 8004cee:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004cf0:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004cf2:	e002      	b.n	8004cfa <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f9      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d00:	e246      	b.n	8005190 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a5e      	ldr	r2, [pc, #376]	@ (8004e80 <HAL_ADC_ConfigChannel+0x910>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d12b      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d125      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a50      	ldr	r2, [pc, #320]	@ (8004e60 <HAL_ADC_ConfigChannel+0x8f0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00a      	beq.n	8004d38 <HAL_ADC_ConfigChannel+0x7c8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a4f      	ldr	r2, [pc, #316]	@ (8004e64 <HAL_ADC_ConfigChannel+0x8f4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d005      	beq.n	8004d38 <HAL_ADC_ConfigChannel+0x7c8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a4f      	ldr	r2, [pc, #316]	@ (8004e70 <HAL_ADC_ConfigChannel+0x900>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	f040 822e 	bne.w	8005194 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a48      	ldr	r2, [pc, #288]	@ (8004e60 <HAL_ADC_ConfigChannel+0x8f0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <HAL_ADC_ConfigChannel+0x7dc>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a47      	ldr	r2, [pc, #284]	@ (8004e64 <HAL_ADC_ConfigChannel+0x8f4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x7e0>
 8004d4c:	4a46      	ldr	r2, [pc, #280]	@ (8004e68 <HAL_ADC_ConfigChannel+0x8f8>)
 8004d4e:	e000      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x7e2>
 8004d50:	4a46      	ldr	r2, [pc, #280]	@ (8004e6c <HAL_ADC_ConfigChannel+0x8fc>)
 8004d52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7fe f99a 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d62:	e217      	b.n	8005194 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a46      	ldr	r2, [pc, #280]	@ (8004e84 <HAL_ADC_ConfigChannel+0x914>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	f040 8213 	bne.w	8005196 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f040 820c 	bne.w	8005196 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a37      	ldr	r2, [pc, #220]	@ (8004e60 <HAL_ADC_ConfigChannel+0x8f0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00a      	beq.n	8004d9e <HAL_ADC_ConfigChannel+0x82e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a35      	ldr	r2, [pc, #212]	@ (8004e64 <HAL_ADC_ConfigChannel+0x8f4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d005      	beq.n	8004d9e <HAL_ADC_ConfigChannel+0x82e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a36      	ldr	r2, [pc, #216]	@ (8004e70 <HAL_ADC_ConfigChannel+0x900>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	f040 81fc 	bne.w	8005196 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2f      	ldr	r2, [pc, #188]	@ (8004e60 <HAL_ADC_ConfigChannel+0x8f0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_ADC_ConfigChannel+0x842>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2d      	ldr	r2, [pc, #180]	@ (8004e64 <HAL_ADC_ConfigChannel+0x8f4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_ConfigChannel+0x846>
 8004db2:	4a2d      	ldr	r2, [pc, #180]	@ (8004e68 <HAL_ADC_ConfigChannel+0x8f8>)
 8004db4:	e000      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x848>
 8004db6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e6c <HAL_ADC_ConfigChannel+0x8fc>)
 8004db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f7fe f967 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
 8004dc8:	e1e5      	b.n	8005196 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004ddc:	e1db      	b.n	8005196 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	f000 811b 	beq.w	8005026 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004df8:	d004      	beq.n	8004e04 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004dfe:	4a22      	ldr	r2, [pc, #136]	@ (8004e88 <HAL_ADC_ConfigChannel+0x918>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d107      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fe fac1 	bl	8003394 <LL_ADC_REG_SetSequencerChAdd>
 8004e12:	e059      	b.n	8004ec8 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	210f      	movs	r1, #15
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e30:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x8d4>
 8004e38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e3c:	0e9b      	lsrs	r3, r3, #26
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	e027      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x924>
 8004e44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e48:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	fa93 f3a3 	rbit	r3, r3
 8004e50:	60fb      	str	r3, [r7, #12]
  return result;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d117      	bne.n	8004e8c <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004e5c:	2320      	movs	r3, #32
 8004e5e:	e019      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x924>
 8004e60:	42028000 	.word	0x42028000
 8004e64:	42028100 	.word	0x42028100
 8004e68:	42028300 	.word	0x42028300
 8004e6c:	46021300 	.word	0x46021300
 8004e70:	46021000 	.word	0x46021000
 8004e74:	ce080000 	.word	0xce080000
 8004e78:	20000024 	.word	0x20000024
 8004e7c:	053e2d63 	.word	0x053e2d63
 8004e80:	ca040000 	.word	0xca040000
 8004e84:	80000001 	.word	0x80000001
 8004e88:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	fab3 f383 	clz	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6849      	ldr	r1, [r1, #4]
 8004e98:	f001 011f 	and.w	r1, r1, #31
 8004e9c:	408b      	lsls	r3, r1
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	089b      	lsrs	r3, r3, #2
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d808      	bhi.n	8004ec8 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f7fe fa06 	bl	80032d4 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004ed6:	f7fe fac9 	bl	800346c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f280 8159 	bge.w	8005196 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a9b      	ldr	r2, [pc, #620]	@ (8005158 <HAL_ADC_ConfigChannel+0xbe8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_ADC_ConfigChannel+0x988>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a9a      	ldr	r2, [pc, #616]	@ (800515c <HAL_ADC_ConfigChannel+0xbec>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d101      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x98c>
 8004ef8:	4b99      	ldr	r3, [pc, #612]	@ (8005160 <HAL_ADC_ConfigChannel+0xbf0>)
 8004efa:	e000      	b.n	8004efe <HAL_ADC_ConfigChannel+0x98e>
 8004efc:	4b99      	ldr	r3, [pc, #612]	@ (8005164 <HAL_ADC_ConfigChannel+0xbf4>)
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe f8dc 	bl	80030bc <LL_ADC_GetCommonPathInternalCh>
 8004f04:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a96      	ldr	r2, [pc, #600]	@ (8005168 <HAL_ADC_ConfigChannel+0xbf8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d12b      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d125      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a8d      	ldr	r2, [pc, #564]	@ (8005158 <HAL_ADC_ConfigChannel+0xbe8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <HAL_ADC_ConfigChannel+0x9c2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a8b      	ldr	r2, [pc, #556]	@ (800515c <HAL_ADC_ConfigChannel+0xbec>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x9c6>
 8004f32:	4a8b      	ldr	r2, [pc, #556]	@ (8005160 <HAL_ADC_ConfigChannel+0xbf0>)
 8004f34:	e000      	b.n	8004f38 <HAL_ADC_ConfigChannel+0x9c8>
 8004f36:	4a8b      	ldr	r2, [pc, #556]	@ (8005164 <HAL_ADC_ConfigChannel+0xbf4>)
 8004f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f7fe f8a7 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004f48:	4b88      	ldr	r3, [pc, #544]	@ (800516c <HAL_ADC_ConfigChannel+0xbfc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	4a88      	ldr	r2, [pc, #544]	@ (8005170 <HAL_ADC_ConfigChannel+0xc00>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	099b      	lsrs	r3, r3, #6
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004f5a:	e002      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f9      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004f68:	e045      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a81      	ldr	r2, [pc, #516]	@ (8005174 <HAL_ADC_ConfigChannel+0xc04>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d11b      	bne.n	8004fac <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d115      	bne.n	8004fac <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a74      	ldr	r2, [pc, #464]	@ (8005158 <HAL_ADC_ConfigChannel+0xbe8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <HAL_ADC_ConfigChannel+0xa24>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a73      	ldr	r2, [pc, #460]	@ (800515c <HAL_ADC_ConfigChannel+0xbec>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d101      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0xa28>
 8004f94:	4a72      	ldr	r2, [pc, #456]	@ (8005160 <HAL_ADC_ConfigChannel+0xbf0>)
 8004f96:	e000      	b.n	8004f9a <HAL_ADC_ConfigChannel+0xa2a>
 8004f98:	4a72      	ldr	r2, [pc, #456]	@ (8005164 <HAL_ADC_ConfigChannel+0xbf4>)
 8004f9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	f7fe f876 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
 8004faa:	e024      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a71      	ldr	r2, [pc, #452]	@ (8005178 <HAL_ADC_ConfigChannel+0xc08>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d11f      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d115      	bne.n	8004fee <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a64      	ldr	r2, [pc, #400]	@ (8005158 <HAL_ADC_ConfigChannel+0xbe8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_ADC_ConfigChannel+0xa66>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a62      	ldr	r2, [pc, #392]	@ (800515c <HAL_ADC_ConfigChannel+0xbec>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_ADC_ConfigChannel+0xa6a>
 8004fd6:	4a62      	ldr	r2, [pc, #392]	@ (8005160 <HAL_ADC_ConfigChannel+0xbf0>)
 8004fd8:	e000      	b.n	8004fdc <HAL_ADC_ConfigChannel+0xa6c>
 8004fda:	4a62      	ldr	r2, [pc, #392]	@ (8005164 <HAL_ADC_ConfigChannel+0xbf4>)
 8004fdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fe0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7fe f855 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
 8004fec:	e003      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a62      	ldr	r2, [pc, #392]	@ (800517c <HAL_ADC_ConfigChannel+0xc0c>)
 8004ff4:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a61      	ldr	r2, [pc, #388]	@ (8005180 <HAL_ADC_ConfigChannel+0xc10>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	f040 80ca 	bne.w	8005196 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005002:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800500a:	2b00      	cmp	r3, #0
 800500c:	f040 80c3 	bne.w	8005196 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005024:	e0b7      	b.n	8005196 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800502e:	d004      	beq.n	800503a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005034:	4a53      	ldr	r2, [pc, #332]	@ (8005184 <HAL_ADC_ConfigChannel+0xc14>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d106      	bne.n	8005048 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe f9d9 	bl	80033fa <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f280 80a2 	bge.w	8005196 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a40      	ldr	r2, [pc, #256]	@ (8005158 <HAL_ADC_ConfigChannel+0xbe8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_ADC_ConfigChannel+0xaf6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3e      	ldr	r2, [pc, #248]	@ (800515c <HAL_ADC_ConfigChannel+0xbec>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d101      	bne.n	800506a <HAL_ADC_ConfigChannel+0xafa>
 8005066:	4b3e      	ldr	r3, [pc, #248]	@ (8005160 <HAL_ADC_ConfigChannel+0xbf0>)
 8005068:	e000      	b.n	800506c <HAL_ADC_ConfigChannel+0xafc>
 800506a:	4b3e      	ldr	r3, [pc, #248]	@ (8005164 <HAL_ADC_ConfigChannel+0xbf4>)
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe f825 	bl	80030bc <LL_ADC_GetCommonPathInternalCh>
 8005072:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a43      	ldr	r2, [pc, #268]	@ (8005188 <HAL_ADC_ConfigChannel+0xc18>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d115      	bne.n	80050ac <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a34      	ldr	r2, [pc, #208]	@ (8005158 <HAL_ADC_ConfigChannel+0xbe8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_ADC_ConfigChannel+0xb24>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a33      	ldr	r2, [pc, #204]	@ (800515c <HAL_ADC_ConfigChannel+0xbec>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d101      	bne.n	8005098 <HAL_ADC_ConfigChannel+0xb28>
 8005094:	4a32      	ldr	r2, [pc, #200]	@ (8005160 <HAL_ADC_ConfigChannel+0xbf0>)
 8005096:	e000      	b.n	800509a <HAL_ADC_ConfigChannel+0xb2a>
 8005098:	4a32      	ldr	r2, [pc, #200]	@ (8005164 <HAL_ADC_ConfigChannel+0xbf4>)
 800509a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800509e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f7fd fff6 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
 80050aa:	e034      	b.n	8005116 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a36      	ldr	r2, [pc, #216]	@ (800518c <HAL_ADC_ConfigChannel+0xc1c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d115      	bne.n	80050e2 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a27      	ldr	r2, [pc, #156]	@ (8005158 <HAL_ADC_ConfigChannel+0xbe8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_ADC_ConfigChannel+0xb5a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a25      	ldr	r2, [pc, #148]	@ (800515c <HAL_ADC_ConfigChannel+0xbec>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d101      	bne.n	80050ce <HAL_ADC_ConfigChannel+0xb5e>
 80050ca:	4a25      	ldr	r2, [pc, #148]	@ (8005160 <HAL_ADC_ConfigChannel+0xbf0>)
 80050cc:	e000      	b.n	80050d0 <HAL_ADC_ConfigChannel+0xb60>
 80050ce:	4a25      	ldr	r2, [pc, #148]	@ (8005164 <HAL_ADC_ConfigChannel+0xbf4>)
 80050d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f7fd ffdb 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
 80050e0:	e019      	b.n	8005116 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a24      	ldr	r2, [pc, #144]	@ (8005178 <HAL_ADC_ConfigChannel+0xc08>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d114      	bne.n	8005116 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a19      	ldr	r2, [pc, #100]	@ (8005158 <HAL_ADC_ConfigChannel+0xbe8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d004      	beq.n	8005100 <HAL_ADC_ConfigChannel+0xb90>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a18      	ldr	r2, [pc, #96]	@ (800515c <HAL_ADC_ConfigChannel+0xbec>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d101      	bne.n	8005104 <HAL_ADC_ConfigChannel+0xb94>
 8005100:	4a17      	ldr	r2, [pc, #92]	@ (8005160 <HAL_ADC_ConfigChannel+0xbf0>)
 8005102:	e000      	b.n	8005106 <HAL_ADC_ConfigChannel+0xb96>
 8005104:	4a17      	ldr	r2, [pc, #92]	@ (8005164 <HAL_ADC_ConfigChannel+0xbf4>)
 8005106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800510a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fd ffc0 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a19      	ldr	r2, [pc, #100]	@ (8005180 <HAL_ADC_ConfigChannel+0xc10>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d13a      	bne.n	8005196 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d134      	bne.n	8005196 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005140:	e029      	b.n	8005196 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005146:	f043 0220 	orr.w	r2, r3, #32
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005154:	e01f      	b.n	8005196 <HAL_ADC_ConfigChannel+0xc26>
 8005156:	bf00      	nop
 8005158:	42028000 	.word	0x42028000
 800515c:	42028100 	.word	0x42028100
 8005160:	42028300 	.word	0x42028300
 8005164:	46021300 	.word	0x46021300
 8005168:	b6002000 	.word	0xb6002000
 800516c:	20000024 	.word	0x20000024
 8005170:	053e2d63 	.word	0x053e2d63
 8005174:	ba004000 	.word	0xba004000
 8005178:	80000001 	.word	0x80000001
 800517c:	b2001000 	.word	0xb2001000
 8005180:	d7200000 	.word	0xd7200000
 8005184:	80000010 	.word	0x80000010
 8005188:	ce080000 	.word	0xce080000
 800518c:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005190:	bf00      	nop
 8005192:	e000      	b.n	8005196 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005194:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 800519e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	37dc      	adds	r7, #220	@ 0xdc
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd90      	pop	{r4, r7, pc}
 80051aa:	bf00      	nop

080051ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe fa5d 	bl	8003678 <LL_ADC_IsEnabled>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d17b      	bne.n	80052bc <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	4b3f      	ldr	r3, [pc, #252]	@ (80052c8 <ADC_Enable+0x11c>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00d      	beq.n	80051ee <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051d6:	f043 0210 	orr.w	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e067      	b.n	80052be <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fa28 	bl	8003650 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <ADC_Enable+0x66>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a2f      	ldr	r2, [pc, #188]	@ (80052cc <ADC_Enable+0x120>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d054      	beq.n	80052bc <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005212:	f7fd fed5 	bl	8002fc0 <HAL_GetTick>
 8005216:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2c      	ldr	r2, [pc, #176]	@ (80052d0 <ADC_Enable+0x124>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <ADC_Enable+0x80>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2b      	ldr	r2, [pc, #172]	@ (80052d4 <ADC_Enable+0x128>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d101      	bne.n	8005230 <ADC_Enable+0x84>
 800522c:	4b2a      	ldr	r3, [pc, #168]	@ (80052d8 <ADC_Enable+0x12c>)
 800522e:	e000      	b.n	8005232 <ADC_Enable+0x86>
 8005230:	4b2a      	ldr	r3, [pc, #168]	@ (80052dc <ADC_Enable+0x130>)
 8005232:	4618      	mov	r0, r3
 8005234:	f7fe f9a2 	bl	800357c <LL_ADC_GetMultimode>
 8005238:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a25      	ldr	r2, [pc, #148]	@ (80052d4 <ADC_Enable+0x128>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d002      	beq.n	800524a <ADC_Enable+0x9e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	e000      	b.n	800524c <ADC_Enable+0xa0>
 800524a:	4b21      	ldr	r3, [pc, #132]	@ (80052d0 <ADC_Enable+0x124>)
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	4293      	cmp	r3, r2
 8005252:	d02c      	beq.n	80052ae <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d130      	bne.n	80052bc <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800525a:	e028      	b.n	80052ae <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7fe fa09 	bl	8003678 <LL_ADC_IsEnabled>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7fe f9ed 	bl	8003650 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005276:	f7fd fea3 	bl	8002fc0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d914      	bls.n	80052ae <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d00d      	beq.n	80052ae <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005296:	f043 0210 	orr.w	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052a2:	f043 0201 	orr.w	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e007      	b.n	80052be <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d1cf      	bne.n	800525c <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	8000003f 	.word	0x8000003f
 80052cc:	46021000 	.word	0x46021000
 80052d0:	42028000 	.word	0x42028000
 80052d4:	42028100 	.word	0x42028100
 80052d8:	42028300 	.word	0x42028300
 80052dc:	46021300 	.word	0x46021300

080052e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052f2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d14b      	bne.n	8005392 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d021      	beq.n	8005358 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f7fd ffc7 	bl	80032ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d032      	beq.n	800538a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d12b      	bne.n	800538a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005336:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d11f      	bne.n	800538a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800534e:	f043 0201 	orr.w	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	679a      	str	r2, [r3, #120]	@ 0x78
 8005356:	e018      	b.n	800538a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d111      	bne.n	800538a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800536a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005382:	f043 0201 	orr.w	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff f8aa 	bl	80044e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005390:	e00e      	b.n	80053b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff f8be 	bl	8004520 <HAL_ADC_ErrorCallback>
}
 80053a4:	e004      	b.n	80053b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff f896 	bl	80044f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053f2:	f043 0204 	orr.w	r2, r3, #4
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff f890 	bl	8004520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005400:	bf00      	nop
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005468:	4b0c      	ldr	r3, [pc, #48]	@ (800549c <__NVIC_SetPriorityGrouping+0x44>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005474:	4013      	ands	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800548a:	4a04      	ldr	r2, [pc, #16]	@ (800549c <__NVIC_SetPriorityGrouping+0x44>)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	60d3      	str	r3, [r2, #12]
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	e000ed00 	.word	0xe000ed00

080054a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a4:	4b04      	ldr	r3, [pc, #16]	@ (80054b8 <__NVIC_GetPriorityGrouping+0x18>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	0a1b      	lsrs	r3, r3, #8
 80054aa:	f003 0307 	and.w	r3, r3, #7
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	e000ed00 	.word	0xe000ed00

080054bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	db0b      	blt.n	80054e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	f003 021f 	and.w	r2, r3, #31
 80054d4:	4907      	ldr	r1, [pc, #28]	@ (80054f4 <__NVIC_EnableIRQ+0x38>)
 80054d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2001      	movs	r0, #1
 80054de:	fa00 f202 	lsl.w	r2, r0, r2
 80054e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	e000e100 	.word	0xe000e100

080054f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	6039      	str	r1, [r7, #0]
 8005502:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005508:	2b00      	cmp	r3, #0
 800550a:	db0a      	blt.n	8005522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	b2da      	uxtb	r2, r3
 8005510:	490c      	ldr	r1, [pc, #48]	@ (8005544 <__NVIC_SetPriority+0x4c>)
 8005512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005516:	0112      	lsls	r2, r2, #4
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	440b      	add	r3, r1
 800551c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005520:	e00a      	b.n	8005538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	4908      	ldr	r1, [pc, #32]	@ (8005548 <__NVIC_SetPriority+0x50>)
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	3b04      	subs	r3, #4
 8005530:	0112      	lsls	r2, r2, #4
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	440b      	add	r3, r1
 8005536:	761a      	strb	r2, [r3, #24]
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	e000e100 	.word	0xe000e100
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	@ 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f1c3 0307 	rsb	r3, r3, #7
 8005566:	2b04      	cmp	r3, #4
 8005568:	bf28      	it	cs
 800556a:	2304      	movcs	r3, #4
 800556c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3304      	adds	r3, #4
 8005572:	2b06      	cmp	r3, #6
 8005574:	d902      	bls.n	800557c <NVIC_EncodePriority+0x30>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	3b03      	subs	r3, #3
 800557a:	e000      	b.n	800557e <NVIC_EncodePriority+0x32>
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	f04f 32ff 	mov.w	r2, #4294967295
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	43da      	mvns	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	401a      	ands	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005594:	f04f 31ff 	mov.w	r1, #4294967295
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	43d9      	mvns	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a4:	4313      	orrs	r3, r2
         );
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3724      	adds	r7, #36	@ 0x24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ff4c 	bl	8005458 <__NVIC_SetPriorityGrouping>
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055d6:	f7ff ff63 	bl	80054a0 <__NVIC_GetPriorityGrouping>
 80055da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	6978      	ldr	r0, [r7, #20]
 80055e2:	f7ff ffb3 	bl	800554c <NVIC_EncodePriority>
 80055e6:	4602      	mov	r2, r0
 80055e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff ff82 	bl	80054f8 <__NVIC_SetPriority>
}
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ff56 	bl	80054bc <__NVIC_EnableIRQ>
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b04      	cmp	r3, #4
 8005624:	d844      	bhi.n	80056b0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005626:	a201      	add	r2, pc, #4	@ (adr r2, 800562c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	0800564f 	.word	0x0800564f
 8005630:	0800566d 	.word	0x0800566d
 8005634:	0800568f 	.word	0x0800568f
 8005638:	080056b1 	.word	0x080056b1
 800563c:	08005641 	.word	0x08005641
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005640:	4b1f      	ldr	r3, [pc, #124]	@ (80056c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1e      	ldr	r2, [pc, #120]	@ (80056c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005646:	f043 0304 	orr.w	r3, r3, #4
 800564a:	6013      	str	r3, [r2, #0]
      break;
 800564c:	e031      	b.n	80056b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800564e:	4b1c      	ldr	r3, [pc, #112]	@ (80056c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1b      	ldr	r2, [pc, #108]	@ (80056c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005654:	f023 0304 	bic.w	r3, r3, #4
 8005658:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800565a:	4b1a      	ldr	r3, [pc, #104]	@ (80056c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800565c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005660:	4a18      	ldr	r2, [pc, #96]	@ (80056c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005662:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005666:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800566a:	e022      	b.n	80056b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800566c:	4b14      	ldr	r3, [pc, #80]	@ (80056c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a13      	ldr	r2, [pc, #76]	@ (80056c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005672:	f023 0304 	bic.w	r3, r3, #4
 8005676:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005678:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800567a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800567e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005682:	4a10      	ldr	r2, [pc, #64]	@ (80056c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005684:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800568c:	e011      	b.n	80056b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800568e:	4b0c      	ldr	r3, [pc, #48]	@ (80056c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a0b      	ldr	r2, [pc, #44]	@ (80056c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005694:	f023 0304 	bic.w	r3, r3, #4
 8005698:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800569a:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800569c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056a0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80056a4:	4a07      	ldr	r2, [pc, #28]	@ (80056c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80056a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80056ae:	e000      	b.n	80056b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80056b0:	bf00      	nop
  }
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	e000e010 	.word	0xe000e010
 80056c4:	46020c00 	.word	0x46020c00

080056c8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80056d0:	f7fd fc76 	bl	8002fc0 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0db      	b.n	8005898 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a6e      	ldr	r2, [pc, #440]	@ (80058a0 <HAL_DMA_Init+0x1d8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	f000 809f 	beq.w	800582a <HAL_DMA_Init+0x162>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a6c      	ldr	r2, [pc, #432]	@ (80058a4 <HAL_DMA_Init+0x1dc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	f000 8099 	beq.w	800582a <HAL_DMA_Init+0x162>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a6a      	ldr	r2, [pc, #424]	@ (80058a8 <HAL_DMA_Init+0x1e0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	f000 8093 	beq.w	800582a <HAL_DMA_Init+0x162>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a68      	ldr	r2, [pc, #416]	@ (80058ac <HAL_DMA_Init+0x1e4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	f000 808d 	beq.w	800582a <HAL_DMA_Init+0x162>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a66      	ldr	r2, [pc, #408]	@ (80058b0 <HAL_DMA_Init+0x1e8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	f000 8087 	beq.w	800582a <HAL_DMA_Init+0x162>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a64      	ldr	r2, [pc, #400]	@ (80058b4 <HAL_DMA_Init+0x1ec>)
 8005722:	4293      	cmp	r3, r2
 8005724:	f000 8081 	beq.w	800582a <HAL_DMA_Init+0x162>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a62      	ldr	r2, [pc, #392]	@ (80058b8 <HAL_DMA_Init+0x1f0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d07b      	beq.n	800582a <HAL_DMA_Init+0x162>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a61      	ldr	r2, [pc, #388]	@ (80058bc <HAL_DMA_Init+0x1f4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d076      	beq.n	800582a <HAL_DMA_Init+0x162>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a5f      	ldr	r2, [pc, #380]	@ (80058c0 <HAL_DMA_Init+0x1f8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d071      	beq.n	800582a <HAL_DMA_Init+0x162>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a5e      	ldr	r2, [pc, #376]	@ (80058c4 <HAL_DMA_Init+0x1fc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d06c      	beq.n	800582a <HAL_DMA_Init+0x162>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a5c      	ldr	r2, [pc, #368]	@ (80058c8 <HAL_DMA_Init+0x200>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d067      	beq.n	800582a <HAL_DMA_Init+0x162>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a5b      	ldr	r2, [pc, #364]	@ (80058cc <HAL_DMA_Init+0x204>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d062      	beq.n	800582a <HAL_DMA_Init+0x162>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a59      	ldr	r2, [pc, #356]	@ (80058d0 <HAL_DMA_Init+0x208>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d05d      	beq.n	800582a <HAL_DMA_Init+0x162>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a58      	ldr	r2, [pc, #352]	@ (80058d4 <HAL_DMA_Init+0x20c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d058      	beq.n	800582a <HAL_DMA_Init+0x162>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a56      	ldr	r2, [pc, #344]	@ (80058d8 <HAL_DMA_Init+0x210>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d053      	beq.n	800582a <HAL_DMA_Init+0x162>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a55      	ldr	r2, [pc, #340]	@ (80058dc <HAL_DMA_Init+0x214>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d04e      	beq.n	800582a <HAL_DMA_Init+0x162>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a53      	ldr	r2, [pc, #332]	@ (80058e0 <HAL_DMA_Init+0x218>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d049      	beq.n	800582a <HAL_DMA_Init+0x162>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a52      	ldr	r2, [pc, #328]	@ (80058e4 <HAL_DMA_Init+0x21c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d044      	beq.n	800582a <HAL_DMA_Init+0x162>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a50      	ldr	r2, [pc, #320]	@ (80058e8 <HAL_DMA_Init+0x220>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d03f      	beq.n	800582a <HAL_DMA_Init+0x162>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a4f      	ldr	r2, [pc, #316]	@ (80058ec <HAL_DMA_Init+0x224>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d03a      	beq.n	800582a <HAL_DMA_Init+0x162>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a4d      	ldr	r2, [pc, #308]	@ (80058f0 <HAL_DMA_Init+0x228>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d035      	beq.n	800582a <HAL_DMA_Init+0x162>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a4c      	ldr	r2, [pc, #304]	@ (80058f4 <HAL_DMA_Init+0x22c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d030      	beq.n	800582a <HAL_DMA_Init+0x162>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a4a      	ldr	r2, [pc, #296]	@ (80058f8 <HAL_DMA_Init+0x230>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d02b      	beq.n	800582a <HAL_DMA_Init+0x162>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a49      	ldr	r2, [pc, #292]	@ (80058fc <HAL_DMA_Init+0x234>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d026      	beq.n	800582a <HAL_DMA_Init+0x162>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a47      	ldr	r2, [pc, #284]	@ (8005900 <HAL_DMA_Init+0x238>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d021      	beq.n	800582a <HAL_DMA_Init+0x162>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a46      	ldr	r2, [pc, #280]	@ (8005904 <HAL_DMA_Init+0x23c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d01c      	beq.n	800582a <HAL_DMA_Init+0x162>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a44      	ldr	r2, [pc, #272]	@ (8005908 <HAL_DMA_Init+0x240>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d017      	beq.n	800582a <HAL_DMA_Init+0x162>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a43      	ldr	r2, [pc, #268]	@ (800590c <HAL_DMA_Init+0x244>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d012      	beq.n	800582a <HAL_DMA_Init+0x162>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a41      	ldr	r2, [pc, #260]	@ (8005910 <HAL_DMA_Init+0x248>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00d      	beq.n	800582a <HAL_DMA_Init+0x162>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a40      	ldr	r2, [pc, #256]	@ (8005914 <HAL_DMA_Init+0x24c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d008      	beq.n	800582a <HAL_DMA_Init+0x162>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a3e      	ldr	r2, [pc, #248]	@ (8005918 <HAL_DMA_Init+0x250>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <HAL_DMA_Init+0x162>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a3d      	ldr	r2, [pc, #244]	@ (800591c <HAL_DMA_Init+0x254>)
 8005828:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0206 	orr.w	r2, r2, #6
 8005848:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800584a:	e00f      	b.n	800586c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800584c:	f7fd fbb8 	bl	8002fc0 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b05      	cmp	r3, #5
 8005858:	d908      	bls.n	800586c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2210      	movs	r2, #16
 800585e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2203      	movs	r2, #3
 8005864:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e015      	b.n	8005898 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e8      	bne.n	800584c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fb26 	bl	8005ecc <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40020050 	.word	0x40020050
 80058a4:	50020050 	.word	0x50020050
 80058a8:	400200d0 	.word	0x400200d0
 80058ac:	500200d0 	.word	0x500200d0
 80058b0:	40020150 	.word	0x40020150
 80058b4:	50020150 	.word	0x50020150
 80058b8:	400201d0 	.word	0x400201d0
 80058bc:	500201d0 	.word	0x500201d0
 80058c0:	40020250 	.word	0x40020250
 80058c4:	50020250 	.word	0x50020250
 80058c8:	400202d0 	.word	0x400202d0
 80058cc:	500202d0 	.word	0x500202d0
 80058d0:	40020350 	.word	0x40020350
 80058d4:	50020350 	.word	0x50020350
 80058d8:	400203d0 	.word	0x400203d0
 80058dc:	500203d0 	.word	0x500203d0
 80058e0:	40020450 	.word	0x40020450
 80058e4:	50020450 	.word	0x50020450
 80058e8:	400204d0 	.word	0x400204d0
 80058ec:	500204d0 	.word	0x500204d0
 80058f0:	40020550 	.word	0x40020550
 80058f4:	50020550 	.word	0x50020550
 80058f8:	400205d0 	.word	0x400205d0
 80058fc:	500205d0 	.word	0x500205d0
 8005900:	40020650 	.word	0x40020650
 8005904:	50020650 	.word	0x50020650
 8005908:	400206d0 	.word	0x400206d0
 800590c:	500206d0 	.word	0x500206d0
 8005910:	40020750 	.word	0x40020750
 8005914:	50020750 	.word	0x50020750
 8005918:	400207d0 	.word	0x400207d0
 800591c:	500207d0 	.word	0x500207d0

08005920 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e04f      	b.n	80059d8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_DMA_Start_IT+0x26>
 8005942:	2302      	movs	r3, #2
 8005944:	e048      	b.n	80059d8 <HAL_DMA_Start_IT+0xb8>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b01      	cmp	r3, #1
 8005958:	d136      	bne.n	80059c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 fa86 	bl	8005e80 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005982:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695a      	ldr	r2, [r3, #20]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800599a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695a      	ldr	r2, [r3, #20]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059b2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e007      	b.n	80059d8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2240      	movs	r2, #64	@ 0x40
 80059cc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80059e8:	f7fd faea 	bl	8002fc0 <HAL_GetTick>
 80059ec:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e06b      	b.n	8005ad0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d008      	beq.n	8005a16 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e05c      	b.n	8005ad0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0204 	orr.w	r2, r2, #4
 8005a24:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2205      	movs	r2, #5
 8005a2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005a2e:	e020      	b.n	8005a72 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005a30:	f7fd fac6 	bl	8002fc0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b05      	cmp	r3, #5
 8005a3c:	d919      	bls.n	8005a72 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a42:	f043 0210 	orr.w	r2, r3, #16
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a62:	2201      	movs	r2, #1
 8005a64:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e02e      	b.n	8005ad0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0d7      	beq.n	8005a30 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0202 	orr.w	r2, r2, #2
 8005a8e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2204      	movs	r2, #4
 8005a94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005aa0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aba:	2201      	movs	r2, #1
 8005abc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e019      	b.n	8005b1e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d004      	beq.n	8005b00 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e00e      	b.n	8005b1e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2204      	movs	r2, #4
 8005b04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005b16:	f043 0304 	orr.w	r3, r3, #4
 8005b1a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b086      	sub	sp, #24
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005b3a:	f023 030f 	bic.w	r3, r3, #15
 8005b3e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b48:	3b50      	subs	r3, #80	@ 0x50
 8005b4a:	09db      	lsrs	r3, r3, #7
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	2201      	movs	r2, #1
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 813b 	beq.w	8005de0 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d011      	beq.n	8005b9c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b8e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b94:	f043 0201 	orr.w	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d011      	beq.n	8005bce <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bc0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc6:	f043 0202 	orr.w	r2, r3, #2
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d011      	beq.n	8005c00 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005bf2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf8:	f043 0204 	orr.w	r2, r3, #4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d011      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005c24:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2a:	f043 0208 	orr.w	r2, r3, #8
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d013      	beq.n	8005c68 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00c      	beq.n	8005c68 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c56:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d04c      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d045      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c8c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d12e      	bne.n	8005cf8 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ca8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0202 	orr.w	r2, r2, #2
 8005cb8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d07a      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
        }

        return;
 8005cf6:	e075      	b.n	8005de4 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2205      	movs	r2, #5
 8005cfc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d039      	beq.n	8005d92 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d032      	beq.n	8005d92 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d012      	beq.n	8005d5e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d116      	bne.n	8005d70 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d111      	bne.n	8005d70 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d58:	2201      	movs	r2, #1
 8005d5a:	731a      	strb	r2, [r3, #12]
 8005d5c:	e008      	b.n	8005d70 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d103      	bne.n	8005d70 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005d78:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d025      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695a      	ldr	r2, [r3, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0202 	orr.w	r2, r2, #2
 8005da8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d007      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
 8005dde:	e002      	b.n	8005de6 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005de0:	bf00      	nop
 8005de2:	e000      	b.n	8005de6 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005de4:	bf00      	nop
    }
  }
}
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005dfa:	b2db      	uxtb	r3, r3
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e02b      	b.n	8005e74 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005e24:	f023 030f 	bic.w	r3, r3, #15
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e32:	3b50      	subs	r3, #80	@ 0x50
 8005e34:	09db      	lsrs	r3, r3, #7
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d012      	beq.n	8005e72 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	f003 0311 	and.w	r3, r3, #17
 8005e52:	2b11      	cmp	r3, #17
 8005e54:	d106      	bne.n	8005e64 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	e006      	b.n	8005e72 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	401a      	ands	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	041b      	lsls	r3, r3, #16
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	b291      	uxth	r1, r2
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005eac:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
	...

08005ecc <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a53      	ldr	r2, [pc, #332]	@ (8006058 <DMA_Init+0x18c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	f000 80a0 	beq.w	8006052 <DMA_Init+0x186>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a51      	ldr	r2, [pc, #324]	@ (800605c <DMA_Init+0x190>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	f000 809a 	beq.w	8006052 <DMA_Init+0x186>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a4f      	ldr	r2, [pc, #316]	@ (8006060 <DMA_Init+0x194>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	f000 8094 	beq.w	8006052 <DMA_Init+0x186>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8006064 <DMA_Init+0x198>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	f000 808e 	beq.w	8006052 <DMA_Init+0x186>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8006068 <DMA_Init+0x19c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	f000 8088 	beq.w	8006052 <DMA_Init+0x186>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a49      	ldr	r2, [pc, #292]	@ (800606c <DMA_Init+0x1a0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	f000 8082 	beq.w	8006052 <DMA_Init+0x186>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a47      	ldr	r2, [pc, #284]	@ (8006070 <DMA_Init+0x1a4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d07c      	beq.n	8006052 <DMA_Init+0x186>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a45      	ldr	r2, [pc, #276]	@ (8006074 <DMA_Init+0x1a8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d077      	beq.n	8006052 <DMA_Init+0x186>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a44      	ldr	r2, [pc, #272]	@ (8006078 <DMA_Init+0x1ac>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d072      	beq.n	8006052 <DMA_Init+0x186>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a42      	ldr	r2, [pc, #264]	@ (800607c <DMA_Init+0x1b0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d06d      	beq.n	8006052 <DMA_Init+0x186>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a41      	ldr	r2, [pc, #260]	@ (8006080 <DMA_Init+0x1b4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d068      	beq.n	8006052 <DMA_Init+0x186>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a3f      	ldr	r2, [pc, #252]	@ (8006084 <DMA_Init+0x1b8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d063      	beq.n	8006052 <DMA_Init+0x186>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a3e      	ldr	r2, [pc, #248]	@ (8006088 <DMA_Init+0x1bc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d05e      	beq.n	8006052 <DMA_Init+0x186>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a3c      	ldr	r2, [pc, #240]	@ (800608c <DMA_Init+0x1c0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d059      	beq.n	8006052 <DMA_Init+0x186>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8006090 <DMA_Init+0x1c4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d054      	beq.n	8006052 <DMA_Init+0x186>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a39      	ldr	r2, [pc, #228]	@ (8006094 <DMA_Init+0x1c8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d04f      	beq.n	8006052 <DMA_Init+0x186>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a38      	ldr	r2, [pc, #224]	@ (8006098 <DMA_Init+0x1cc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d04a      	beq.n	8006052 <DMA_Init+0x186>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a36      	ldr	r2, [pc, #216]	@ (800609c <DMA_Init+0x1d0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d045      	beq.n	8006052 <DMA_Init+0x186>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a35      	ldr	r2, [pc, #212]	@ (80060a0 <DMA_Init+0x1d4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d040      	beq.n	8006052 <DMA_Init+0x186>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a33      	ldr	r2, [pc, #204]	@ (80060a4 <DMA_Init+0x1d8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d03b      	beq.n	8006052 <DMA_Init+0x186>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a32      	ldr	r2, [pc, #200]	@ (80060a8 <DMA_Init+0x1dc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d036      	beq.n	8006052 <DMA_Init+0x186>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a30      	ldr	r2, [pc, #192]	@ (80060ac <DMA_Init+0x1e0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d031      	beq.n	8006052 <DMA_Init+0x186>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80060b0 <DMA_Init+0x1e4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d02c      	beq.n	8006052 <DMA_Init+0x186>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80060b4 <DMA_Init+0x1e8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d027      	beq.n	8006052 <DMA_Init+0x186>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <DMA_Init+0x1ec>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d022      	beq.n	8006052 <DMA_Init+0x186>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2a      	ldr	r2, [pc, #168]	@ (80060bc <DMA_Init+0x1f0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01d      	beq.n	8006052 <DMA_Init+0x186>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a29      	ldr	r2, [pc, #164]	@ (80060c0 <DMA_Init+0x1f4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d018      	beq.n	8006052 <DMA_Init+0x186>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a27      	ldr	r2, [pc, #156]	@ (80060c4 <DMA_Init+0x1f8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <DMA_Init+0x186>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a26      	ldr	r2, [pc, #152]	@ (80060c8 <DMA_Init+0x1fc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00e      	beq.n	8006052 <DMA_Init+0x186>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a24      	ldr	r2, [pc, #144]	@ (80060cc <DMA_Init+0x200>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d009      	beq.n	8006052 <DMA_Init+0x186>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <DMA_Init+0x204>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <DMA_Init+0x186>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a21      	ldr	r2, [pc, #132]	@ (80060d4 <DMA_Init+0x208>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d142      	bne.n	80060d8 <DMA_Init+0x20c>
 8006052:	2301      	movs	r3, #1
 8006054:	e041      	b.n	80060da <DMA_Init+0x20e>
 8006056:	bf00      	nop
 8006058:	40020050 	.word	0x40020050
 800605c:	50020050 	.word	0x50020050
 8006060:	400200d0 	.word	0x400200d0
 8006064:	500200d0 	.word	0x500200d0
 8006068:	40020150 	.word	0x40020150
 800606c:	50020150 	.word	0x50020150
 8006070:	400201d0 	.word	0x400201d0
 8006074:	500201d0 	.word	0x500201d0
 8006078:	40020250 	.word	0x40020250
 800607c:	50020250 	.word	0x50020250
 8006080:	400202d0 	.word	0x400202d0
 8006084:	500202d0 	.word	0x500202d0
 8006088:	40020350 	.word	0x40020350
 800608c:	50020350 	.word	0x50020350
 8006090:	400203d0 	.word	0x400203d0
 8006094:	500203d0 	.word	0x500203d0
 8006098:	40020450 	.word	0x40020450
 800609c:	50020450 	.word	0x50020450
 80060a0:	400204d0 	.word	0x400204d0
 80060a4:	500204d0 	.word	0x500204d0
 80060a8:	40020550 	.word	0x40020550
 80060ac:	50020550 	.word	0x50020550
 80060b0:	400205d0 	.word	0x400205d0
 80060b4:	500205d0 	.word	0x500205d0
 80060b8:	40020650 	.word	0x40020650
 80060bc:	50020650 	.word	0x50020650
 80060c0:	400206d0 	.word	0x400206d0
 80060c4:	500206d0 	.word	0x500206d0
 80060c8:	40020750 	.word	0x40020750
 80060cc:	50020750 	.word	0x50020750
 80060d0:	400207d0 	.word	0x400207d0
 80060d4:	500207d0 	.word	0x500207d0
 80060d8:	2300      	movs	r3, #0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d012      	beq.n	8006104 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e6:	3b01      	subs	r3, #1
 80060e8:	051b      	lsls	r3, r3, #20
 80060ea:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80060ee:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f4:	3b01      	subs	r3, #1
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80060fc:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	430a      	orrs	r2, r1
 8006116:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006136:	f040 80b0 	bne.w	800629a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a82      	ldr	r2, [pc, #520]	@ (8006348 <DMA_Init+0x47c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	f000 80a0 	beq.w	8006286 <DMA_Init+0x3ba>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a80      	ldr	r2, [pc, #512]	@ (800634c <DMA_Init+0x480>)
 800614c:	4293      	cmp	r3, r2
 800614e:	f000 809a 	beq.w	8006286 <DMA_Init+0x3ba>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a7e      	ldr	r2, [pc, #504]	@ (8006350 <DMA_Init+0x484>)
 8006158:	4293      	cmp	r3, r2
 800615a:	f000 8094 	beq.w	8006286 <DMA_Init+0x3ba>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a7c      	ldr	r2, [pc, #496]	@ (8006354 <DMA_Init+0x488>)
 8006164:	4293      	cmp	r3, r2
 8006166:	f000 808e 	beq.w	8006286 <DMA_Init+0x3ba>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a7a      	ldr	r2, [pc, #488]	@ (8006358 <DMA_Init+0x48c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	f000 8088 	beq.w	8006286 <DMA_Init+0x3ba>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a78      	ldr	r2, [pc, #480]	@ (800635c <DMA_Init+0x490>)
 800617c:	4293      	cmp	r3, r2
 800617e:	f000 8082 	beq.w	8006286 <DMA_Init+0x3ba>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a76      	ldr	r2, [pc, #472]	@ (8006360 <DMA_Init+0x494>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d07c      	beq.n	8006286 <DMA_Init+0x3ba>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a74      	ldr	r2, [pc, #464]	@ (8006364 <DMA_Init+0x498>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d077      	beq.n	8006286 <DMA_Init+0x3ba>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a73      	ldr	r2, [pc, #460]	@ (8006368 <DMA_Init+0x49c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d072      	beq.n	8006286 <DMA_Init+0x3ba>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a71      	ldr	r2, [pc, #452]	@ (800636c <DMA_Init+0x4a0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d06d      	beq.n	8006286 <DMA_Init+0x3ba>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a70      	ldr	r2, [pc, #448]	@ (8006370 <DMA_Init+0x4a4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d068      	beq.n	8006286 <DMA_Init+0x3ba>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a6e      	ldr	r2, [pc, #440]	@ (8006374 <DMA_Init+0x4a8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d063      	beq.n	8006286 <DMA_Init+0x3ba>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6d      	ldr	r2, [pc, #436]	@ (8006378 <DMA_Init+0x4ac>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d05e      	beq.n	8006286 <DMA_Init+0x3ba>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a6b      	ldr	r2, [pc, #428]	@ (800637c <DMA_Init+0x4b0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d059      	beq.n	8006286 <DMA_Init+0x3ba>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a6a      	ldr	r2, [pc, #424]	@ (8006380 <DMA_Init+0x4b4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d054      	beq.n	8006286 <DMA_Init+0x3ba>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a68      	ldr	r2, [pc, #416]	@ (8006384 <DMA_Init+0x4b8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d04f      	beq.n	8006286 <DMA_Init+0x3ba>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a67      	ldr	r2, [pc, #412]	@ (8006388 <DMA_Init+0x4bc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d04a      	beq.n	8006286 <DMA_Init+0x3ba>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a65      	ldr	r2, [pc, #404]	@ (800638c <DMA_Init+0x4c0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d045      	beq.n	8006286 <DMA_Init+0x3ba>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a64      	ldr	r2, [pc, #400]	@ (8006390 <DMA_Init+0x4c4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d040      	beq.n	8006286 <DMA_Init+0x3ba>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a62      	ldr	r2, [pc, #392]	@ (8006394 <DMA_Init+0x4c8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d03b      	beq.n	8006286 <DMA_Init+0x3ba>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a61      	ldr	r2, [pc, #388]	@ (8006398 <DMA_Init+0x4cc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d036      	beq.n	8006286 <DMA_Init+0x3ba>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a5f      	ldr	r2, [pc, #380]	@ (800639c <DMA_Init+0x4d0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d031      	beq.n	8006286 <DMA_Init+0x3ba>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a5e      	ldr	r2, [pc, #376]	@ (80063a0 <DMA_Init+0x4d4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d02c      	beq.n	8006286 <DMA_Init+0x3ba>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a5c      	ldr	r2, [pc, #368]	@ (80063a4 <DMA_Init+0x4d8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d027      	beq.n	8006286 <DMA_Init+0x3ba>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a5b      	ldr	r2, [pc, #364]	@ (80063a8 <DMA_Init+0x4dc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d022      	beq.n	8006286 <DMA_Init+0x3ba>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a59      	ldr	r2, [pc, #356]	@ (80063ac <DMA_Init+0x4e0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01d      	beq.n	8006286 <DMA_Init+0x3ba>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a58      	ldr	r2, [pc, #352]	@ (80063b0 <DMA_Init+0x4e4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d018      	beq.n	8006286 <DMA_Init+0x3ba>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a56      	ldr	r2, [pc, #344]	@ (80063b4 <DMA_Init+0x4e8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <DMA_Init+0x3ba>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a55      	ldr	r2, [pc, #340]	@ (80063b8 <DMA_Init+0x4ec>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <DMA_Init+0x3ba>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a53      	ldr	r2, [pc, #332]	@ (80063bc <DMA_Init+0x4f0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <DMA_Init+0x3ba>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a52      	ldr	r2, [pc, #328]	@ (80063c0 <DMA_Init+0x4f4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <DMA_Init+0x3ba>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a50      	ldr	r2, [pc, #320]	@ (80063c4 <DMA_Init+0x4f8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d101      	bne.n	800628a <DMA_Init+0x3be>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <DMA_Init+0x3c0>
 800628a:	2300      	movs	r3, #0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00d      	beq.n	80062ac <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e008      	b.n	80062ac <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062a2:	d103      	bne.n	80062ac <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062aa:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062b2:	4b45      	ldr	r3, [pc, #276]	@ (80063c8 <DMA_Init+0x4fc>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6812      	ldr	r2, [r2, #0]
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	430b      	orrs	r3, r1
 80062be:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2200      	movs	r2, #0
 80062c6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a36      	ldr	r2, [pc, #216]	@ (80063a8 <DMA_Init+0x4dc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d022      	beq.n	8006318 <DMA_Init+0x44c>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a35      	ldr	r2, [pc, #212]	@ (80063ac <DMA_Init+0x4e0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d01d      	beq.n	8006318 <DMA_Init+0x44c>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a33      	ldr	r2, [pc, #204]	@ (80063b0 <DMA_Init+0x4e4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d018      	beq.n	8006318 <DMA_Init+0x44c>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a32      	ldr	r2, [pc, #200]	@ (80063b4 <DMA_Init+0x4e8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <DMA_Init+0x44c>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a30      	ldr	r2, [pc, #192]	@ (80063b8 <DMA_Init+0x4ec>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00e      	beq.n	8006318 <DMA_Init+0x44c>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a2f      	ldr	r2, [pc, #188]	@ (80063bc <DMA_Init+0x4f0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d009      	beq.n	8006318 <DMA_Init+0x44c>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2d      	ldr	r2, [pc, #180]	@ (80063c0 <DMA_Init+0x4f4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <DMA_Init+0x44c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a2c      	ldr	r2, [pc, #176]	@ (80063c4 <DMA_Init+0x4f8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d101      	bne.n	800631c <DMA_Init+0x450>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <DMA_Init+0x452>
 800631c:	2300      	movs	r3, #0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d007      	beq.n	8006332 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2200      	movs	r2, #0
 8006328:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2200      	movs	r2, #0
 8006330:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40020050 	.word	0x40020050
 800634c:	50020050 	.word	0x50020050
 8006350:	400200d0 	.word	0x400200d0
 8006354:	500200d0 	.word	0x500200d0
 8006358:	40020150 	.word	0x40020150
 800635c:	50020150 	.word	0x50020150
 8006360:	400201d0 	.word	0x400201d0
 8006364:	500201d0 	.word	0x500201d0
 8006368:	40020250 	.word	0x40020250
 800636c:	50020250 	.word	0x50020250
 8006370:	400202d0 	.word	0x400202d0
 8006374:	500202d0 	.word	0x500202d0
 8006378:	40020350 	.word	0x40020350
 800637c:	50020350 	.word	0x50020350
 8006380:	400203d0 	.word	0x400203d0
 8006384:	500203d0 	.word	0x500203d0
 8006388:	40020450 	.word	0x40020450
 800638c:	50020450 	.word	0x50020450
 8006390:	400204d0 	.word	0x400204d0
 8006394:	500204d0 	.word	0x500204d0
 8006398:	40020550 	.word	0x40020550
 800639c:	50020550 	.word	0x50020550
 80063a0:	400205d0 	.word	0x400205d0
 80063a4:	500205d0 	.word	0x500205d0
 80063a8:	40020650 	.word	0x40020650
 80063ac:	50020650 	.word	0x50020650
 80063b0:	400206d0 	.word	0x400206d0
 80063b4:	500206d0 	.word	0x500206d0
 80063b8:	40020750 	.word	0x40020750
 80063bc:	50020750 	.word	0x50020750
 80063c0:	400207d0 	.word	0x400207d0
 80063c4:	500207d0 	.word	0x500207d0
 80063c8:	3c803180 	.word	0x3c803180

080063cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e053      	b.n	8006486 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fb fdba 	bl	8001f6c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800640a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6851      	ldr	r1, [r2, #4]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	69d2      	ldr	r2, [r2, #28]
 8006416:	4311      	orrs	r1, r2
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	430b      	orrs	r3, r1
 800641e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006426:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6891      	ldr	r1, [r2, #8]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6992      	ldr	r2, [r2, #24]
 8006436:	4311      	orrs	r1, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6812      	ldr	r2, [r2, #0]
 800643c:	430b      	orrs	r3, r1
 800643e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	0c1b      	lsrs	r3, r3, #16
 8006448:	041b      	lsls	r3, r3, #16
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	68d1      	ldr	r1, [r2, #12]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6812      	ldr	r2, [r2, #0]
 8006452:	430b      	orrs	r3, r1
 8006454:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800645c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	051a      	lsls	r2, r3, #20
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	055b      	lsls	r3, r3, #21
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_DMA2D_ConfigLayer+0x24>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e092      	b.n	80065da <HAL_DMA2D_ConfigLayer+0x14a>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	4613      	mov	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	3328      	adds	r3, #40	@ 0x28
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4413      	add	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	041b      	lsls	r3, r3, #16
 80064e0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80064e8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80064f4:	4b3c      	ldr	r3, [pc, #240]	@ (80065e8 <HAL_DMA2D_ConfigLayer+0x158>)
 80064f6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	2b0a      	cmp	r3, #10
 80064fe:	d003      	beq.n	8006508 <HAL_DMA2D_ConfigLayer+0x78>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b09      	cmp	r3, #9
 8006506:	d107      	bne.n	8006518 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	e005      	b.n	8006524 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	061b      	lsls	r3, r3, #24
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d120      	bne.n	800656c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	43db      	mvns	r3, r3
 8006534:	ea02 0103 	and.w	r1, r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	430a      	orrs	r2, r1
 8006540:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b0a      	cmp	r3, #10
 8006552:	d003      	beq.n	800655c <HAL_DMA2D_ConfigLayer+0xcc>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b09      	cmp	r3, #9
 800655a:	d135      	bne.n	80065c8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006568:	629a      	str	r2, [r3, #40]	@ 0x28
 800656a:	e02d      	b.n	80065c8 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b0b      	cmp	r3, #11
 8006572:	d109      	bne.n	8006588 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	049b      	lsls	r3, r3, #18
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006586:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69da      	ldr	r2, [r3, #28]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	43db      	mvns	r3, r3
 8006592:	ea02 0103 	and.w	r1, r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	430a      	orrs	r2, r1
 800659e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b0a      	cmp	r3, #10
 80065b0:	d003      	beq.n	80065ba <HAL_DMA2D_ConfigLayer+0x12a>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b09      	cmp	r3, #9
 80065b8:	d106      	bne.n	80065c8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80065c6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	ff33000f 	.word	0xff33000f

080065ec <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80065f4:	f7fc fce4 	bl	8002fc0 <HAL_GetTick>
 80065f8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e0db      	b.n	80067bc <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6e      	ldr	r2, [pc, #440]	@ (80067c4 <HAL_DMAEx_List_Init+0x1d8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	f000 809f 	beq.w	800674e <HAL_DMAEx_List_Init+0x162>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a6c      	ldr	r2, [pc, #432]	@ (80067c8 <HAL_DMAEx_List_Init+0x1dc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	f000 8099 	beq.w	800674e <HAL_DMAEx_List_Init+0x162>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a6a      	ldr	r2, [pc, #424]	@ (80067cc <HAL_DMAEx_List_Init+0x1e0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	f000 8093 	beq.w	800674e <HAL_DMAEx_List_Init+0x162>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a68      	ldr	r2, [pc, #416]	@ (80067d0 <HAL_DMAEx_List_Init+0x1e4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	f000 808d 	beq.w	800674e <HAL_DMAEx_List_Init+0x162>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a66      	ldr	r2, [pc, #408]	@ (80067d4 <HAL_DMAEx_List_Init+0x1e8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	f000 8087 	beq.w	800674e <HAL_DMAEx_List_Init+0x162>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a64      	ldr	r2, [pc, #400]	@ (80067d8 <HAL_DMAEx_List_Init+0x1ec>)
 8006646:	4293      	cmp	r3, r2
 8006648:	f000 8081 	beq.w	800674e <HAL_DMAEx_List_Init+0x162>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a62      	ldr	r2, [pc, #392]	@ (80067dc <HAL_DMAEx_List_Init+0x1f0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d07b      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a61      	ldr	r2, [pc, #388]	@ (80067e0 <HAL_DMAEx_List_Init+0x1f4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d076      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a5f      	ldr	r2, [pc, #380]	@ (80067e4 <HAL_DMAEx_List_Init+0x1f8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d071      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a5e      	ldr	r2, [pc, #376]	@ (80067e8 <HAL_DMAEx_List_Init+0x1fc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d06c      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a5c      	ldr	r2, [pc, #368]	@ (80067ec <HAL_DMAEx_List_Init+0x200>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d067      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a5b      	ldr	r2, [pc, #364]	@ (80067f0 <HAL_DMAEx_List_Init+0x204>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d062      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a59      	ldr	r2, [pc, #356]	@ (80067f4 <HAL_DMAEx_List_Init+0x208>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d05d      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a58      	ldr	r2, [pc, #352]	@ (80067f8 <HAL_DMAEx_List_Init+0x20c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d058      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a56      	ldr	r2, [pc, #344]	@ (80067fc <HAL_DMAEx_List_Init+0x210>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d053      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a55      	ldr	r2, [pc, #340]	@ (8006800 <HAL_DMAEx_List_Init+0x214>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d04e      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a53      	ldr	r2, [pc, #332]	@ (8006804 <HAL_DMAEx_List_Init+0x218>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d049      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a52      	ldr	r2, [pc, #328]	@ (8006808 <HAL_DMAEx_List_Init+0x21c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d044      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a50      	ldr	r2, [pc, #320]	@ (800680c <HAL_DMAEx_List_Init+0x220>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d03f      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a4f      	ldr	r2, [pc, #316]	@ (8006810 <HAL_DMAEx_List_Init+0x224>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d03a      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a4d      	ldr	r2, [pc, #308]	@ (8006814 <HAL_DMAEx_List_Init+0x228>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d035      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4c      	ldr	r2, [pc, #304]	@ (8006818 <HAL_DMAEx_List_Init+0x22c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d030      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a4a      	ldr	r2, [pc, #296]	@ (800681c <HAL_DMAEx_List_Init+0x230>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d02b      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a49      	ldr	r2, [pc, #292]	@ (8006820 <HAL_DMAEx_List_Init+0x234>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d026      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a47      	ldr	r2, [pc, #284]	@ (8006824 <HAL_DMAEx_List_Init+0x238>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d021      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a46      	ldr	r2, [pc, #280]	@ (8006828 <HAL_DMAEx_List_Init+0x23c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d01c      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a44      	ldr	r2, [pc, #272]	@ (800682c <HAL_DMAEx_List_Init+0x240>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d017      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a43      	ldr	r2, [pc, #268]	@ (8006830 <HAL_DMAEx_List_Init+0x244>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d012      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a41      	ldr	r2, [pc, #260]	@ (8006834 <HAL_DMAEx_List_Init+0x248>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00d      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a40      	ldr	r2, [pc, #256]	@ (8006838 <HAL_DMAEx_List_Init+0x24c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d008      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a3e      	ldr	r2, [pc, #248]	@ (800683c <HAL_DMAEx_List_Init+0x250>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d003      	beq.n	800674e <HAL_DMAEx_List_Init+0x162>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a3d      	ldr	r2, [pc, #244]	@ (8006840 <HAL_DMAEx_List_Init+0x254>)
 800674c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695a      	ldr	r2, [r3, #20]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0206 	orr.w	r2, r2, #6
 800676c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800676e:	e00f      	b.n	8006790 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006770:	f7fc fc26 	bl	8002fc0 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b05      	cmp	r3, #5
 800677c:	d908      	bls.n	8006790 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2210      	movs	r2, #16
 8006782:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2203      	movs	r2, #3
 8006788:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e015      	b.n	80067bc <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e8      	bne.n	8006770 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fb16 	bl	8006dd0 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40020050 	.word	0x40020050
 80067c8:	50020050 	.word	0x50020050
 80067cc:	400200d0 	.word	0x400200d0
 80067d0:	500200d0 	.word	0x500200d0
 80067d4:	40020150 	.word	0x40020150
 80067d8:	50020150 	.word	0x50020150
 80067dc:	400201d0 	.word	0x400201d0
 80067e0:	500201d0 	.word	0x500201d0
 80067e4:	40020250 	.word	0x40020250
 80067e8:	50020250 	.word	0x50020250
 80067ec:	400202d0 	.word	0x400202d0
 80067f0:	500202d0 	.word	0x500202d0
 80067f4:	40020350 	.word	0x40020350
 80067f8:	50020350 	.word	0x50020350
 80067fc:	400203d0 	.word	0x400203d0
 8006800:	500203d0 	.word	0x500203d0
 8006804:	40020450 	.word	0x40020450
 8006808:	50020450 	.word	0x50020450
 800680c:	400204d0 	.word	0x400204d0
 8006810:	500204d0 	.word	0x500204d0
 8006814:	40020550 	.word	0x40020550
 8006818:	50020550 	.word	0x50020550
 800681c:	400205d0 	.word	0x400205d0
 8006820:	500205d0 	.word	0x500205d0
 8006824:	40020650 	.word	0x40020650
 8006828:	50020650 	.word	0x50020650
 800682c:	400206d0 	.word	0x400206d0
 8006830:	500206d0 	.word	0x500206d0
 8006834:	40020750 	.word	0x40020750
 8006838:	50020750 	.word	0x50020750
 800683c:	400207d0 	.word	0x400207d0
 8006840:	500207d0 	.word	0x500207d0

08006844 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_DMAEx_List_Start_IT+0x16>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e082      	b.n	8006964 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006864:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006870:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d005      	beq.n	8006884 <HAL_DMAEx_List_Start_IT+0x40>
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d16a      	bne.n	8006954 <HAL_DMAEx_List_Start_IT+0x110>
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d067      	beq.n	8006954 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	d157      	bne.n	8006940 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <HAL_DMAEx_List_Start_IT+0x5a>
 800689a:	2302      	movs	r3, #2
 800689c:	e062      	b.n	8006964 <HAL_DMAEx_List_Start_IT+0x120>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b2:	2202      	movs	r2, #2
 80068b4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c0:	2200      	movs	r2, #0
 80068c2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80068d2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d007      	beq.n	80068ec <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695a      	ldr	r2, [r3, #20]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068ea:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006902:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f107 010c 	add.w	r1, r7, #12
 800690e:	2200      	movs	r2, #0
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fe7d 	bl	8007610 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4619      	mov	r1, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	0c0b      	lsrs	r3, r1, #16
 8006924:	041b      	lsls	r3, r3, #16
 8006926:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006934:	4013      	ands	r3, r2
 8006936:	68f9      	ldr	r1, [r7, #12]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	430b      	orrs	r3, r1
 800693e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695a      	ldr	r2, [r3, #20]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	e007      	b.n	8006964 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2240      	movs	r2, #64	@ 0x40
 8006958:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_DMAEx_List_BuildNode+0x16>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e004      	b.n	8006990 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fb79 	bl	8007080 <DMA_List_BuildNode>

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <HAL_DMAEx_List_GetNodeConfig+0x16>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e004      	b.n	80069bc <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fcb5 	bl	8007324 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08c      	sub	sp, #48	@ 0x30
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <HAL_DMAEx_List_InsertNode+0x18>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0b6      	b.n	8006b4e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d104      	bne.n	80069f2 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2204      	movs	r2, #4
 80069ec:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0ad      	b.n	8006b4e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fd9c 	bl	8007538 <DMA_List_CheckNodesBaseAddresses>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d004      	beq.n	8006a10 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2205      	movs	r2, #5
 8006a0a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e09e      	b.n	8006b4e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fdbd 	bl	8007598 <DMA_List_CheckNodesTypes>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2204      	movs	r2, #4
 8006a28:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e08f      	b.n	8006b4e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2202      	movs	r2, #2
 8006a32:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006a3a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fde3 	bl	8007610 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d11a      	bne.n	8006a88 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d106      	bne.n	8006a66 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	609a      	str	r2, [r3, #8]
 8006a64:	e06c      	b.n	8006b40 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006a72:	4013      	ands	r3, r2
 8006a74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a78:	4319      	orrs	r1, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2202      	movs	r2, #2
 8006a84:	609a      	str	r2, [r3, #8]
 8006a86:	e05b      	b.n	8006b40 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10f      	bne.n	8006aae <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006a98:	4013      	ands	r3, r2
 8006a9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a9e:	4319      	orrs	r1, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	e043      	b.n	8006b36 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006ab2:	f107 0314 	add.w	r3, r7, #20
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fdd8 	bl	8007670 <DMA_List_FindNode>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d132      	bne.n	8006b2c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d11a      	bne.n	8006b06 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	461a      	mov	r2, r3
 8006ade:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ae8:	4319      	orrs	r1, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006af6:	4013      	ands	r3, r2
 8006af8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006afc:	4319      	orrs	r1, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006b04:	e017      	b.n	8006b36 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b22:	4319      	orrs	r1, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006b2a:	e004      	b.n	8006b36 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2206      	movs	r2, #6
 8006b30:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e00b      	b.n	8006b4e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3730      	adds	r7, #48	@ 0x30
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b08a      	sub	sp, #40	@ 0x28
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e052      	b.n	8006c0e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e049      	b.n	8006c0e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00c      	beq.n	8006b9c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d101      	bne.n	8006b92 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e03d      	b.n	8006c0e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2204      	movs	r2, #4
 8006b96:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e038      	b.n	8006c0e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d104      	bne.n	8006bae <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e02f      	b.n	8006c0e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f107 0220 	add.w	r2, r7, #32
 8006bc2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fd22 	bl	8007610 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006bd0:	f107 030c 	add.w	r3, r7, #12
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fd49 	bl	8007670 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006be8:	4013      	ands	r3, r2
 8006bea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4610      	mov	r0, r2
 8006bf0:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006bf2:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006bf4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3728      	adds	r7, #40	@ 0x28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <HAL_DMAEx_List_LinkQ+0x16>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e072      	b.n	8006d18 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006c38:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d002      	beq.n	8006c4c <HAL_DMAEx_List_LinkQ+0x34>
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
 8006c48:	2b05      	cmp	r3, #5
 8006c4a:	d108      	bne.n	8006c5e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2240      	movs	r2, #64	@ 0x40
 8006c50:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e05c      	b.n	8006d18 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	7b1b      	ldrb	r3, [r3, #12]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d104      	bne.n	8006c72 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e052      	b.n	8006d18 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2b      	ldr	r2, [pc, #172]	@ (8006d24 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d022      	beq.n	8006cc2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a29      	ldr	r2, [pc, #164]	@ (8006d28 <HAL_DMAEx_List_LinkQ+0x110>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01d      	beq.n	8006cc2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a28      	ldr	r2, [pc, #160]	@ (8006d2c <HAL_DMAEx_List_LinkQ+0x114>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d018      	beq.n	8006cc2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a26      	ldr	r2, [pc, #152]	@ (8006d30 <HAL_DMAEx_List_LinkQ+0x118>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a25      	ldr	r2, [pc, #148]	@ (8006d34 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a23      	ldr	r2, [pc, #140]	@ (8006d38 <HAL_DMAEx_List_LinkQ+0x120>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a22      	ldr	r2, [pc, #136]	@ (8006d3c <HAL_DMAEx_List_LinkQ+0x124>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a20      	ldr	r2, [pc, #128]	@ (8006d40 <HAL_DMAEx_List_LinkQ+0x128>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d101      	bne.n	8006cc6 <HAL_DMAEx_List_LinkQ+0xae>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <HAL_DMAEx_List_LinkQ+0xb0>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10b      	bne.n	8006ce4 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d004      	beq.n	8006ce4 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2203      	movs	r2, #3
 8006cde:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e019      	b.n	8006d18 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ce8:	2b81      	cmp	r3, #129	@ 0x81
 8006cea:	d108      	bne.n	8006cfe <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10d      	bne.n	8006d10 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e00c      	b.n	8006d18 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e003      	b.n	8006d18 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	40020650 	.word	0x40020650
 8006d28:	50020650 	.word	0x50020650
 8006d2c:	400206d0 	.word	0x400206d0
 8006d30:	500206d0 	.word	0x500206d0
 8006d34:	40020750 	.word	0x40020750
 8006d38:	50020750 	.word	0x50020750
 8006d3c:	400207d0 	.word	0x400207d0
 8006d40:	500207d0 	.word	0x500207d0

08006d44 <HAL_DMAEx_ConfigTrigger>:
  * @param  pConfigTrigger : Pointer to a DMA_TriggerConfTypeDef structure that contains the trigger configuration.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigTrigger(DMA_HandleTypeDef *const hdma,
                                          DMA_TriggerConfTypeDef const *const pConfigTrigger)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  /* Check the DMA peripheral handle and trigger parameters */
  if ((hdma == NULL) || (pConfigTrigger == NULL))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_DMAEx_ConfigTrigger+0x16>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_DMAEx_ConfigTrigger+0x1a>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e023      	b.n	8006da6 <HAL_DMAEx_ConfigTrigger+0x62>
  assert_param(IS_DMA_TRIGGER_POLARITY(pConfigTrigger->TriggerPolarity));
  assert_param(IS_DMA_TRIGGER_MODE(pConfigTrigger->TriggerMode));
  assert_param(IS_DMA_TRIGGER_SELECTION(pConfigTrigger->TriggerSelection));

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d115      	bne.n	8006d96 <HAL_DMAEx_ConfigTrigger+0x52>
  {
    MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM),
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d70:	f023 735f 	bic.w	r3, r3, #58458112	@ 0x37c0000
 8006d74:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	6851      	ldr	r1, [r2, #4]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	4311      	orrs	r1, r2
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	6892      	ldr	r2, [r2, #8]
 8006d86:	0412      	lsls	r2, r2, #16
 8006d88:	4311      	orrs	r1, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6812      	ldr	r2, [r2, #0]
 8006d8e:	430b      	orrs	r3, r1
 8006d90:	6453      	str	r3, [r2, #68]	@ 0x44
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e007      	b.n	8006da6 <HAL_DMAEx_ConfigTrigger+0x62>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2240      	movs	r2, #64	@ 0x40
 8006d9a:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	0c1b      	lsrs	r3, r3, #16
 8006dc2:	b2db      	uxtb	r3, r3
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a85      	ldr	r2, [pc, #532]	@ (8007000 <DMA_List_Init+0x230>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	f000 80a0 	beq.w	8006f30 <DMA_List_Init+0x160>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a83      	ldr	r2, [pc, #524]	@ (8007004 <DMA_List_Init+0x234>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	f000 809a 	beq.w	8006f30 <DMA_List_Init+0x160>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a81      	ldr	r2, [pc, #516]	@ (8007008 <DMA_List_Init+0x238>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f000 8094 	beq.w	8006f30 <DMA_List_Init+0x160>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a7f      	ldr	r2, [pc, #508]	@ (800700c <DMA_List_Init+0x23c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	f000 808e 	beq.w	8006f30 <DMA_List_Init+0x160>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a7d      	ldr	r2, [pc, #500]	@ (8007010 <DMA_List_Init+0x240>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	f000 8088 	beq.w	8006f30 <DMA_List_Init+0x160>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a7b      	ldr	r2, [pc, #492]	@ (8007014 <DMA_List_Init+0x244>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	f000 8082 	beq.w	8006f30 <DMA_List_Init+0x160>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a79      	ldr	r2, [pc, #484]	@ (8007018 <DMA_List_Init+0x248>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d07c      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a78      	ldr	r2, [pc, #480]	@ (800701c <DMA_List_Init+0x24c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d077      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a76      	ldr	r2, [pc, #472]	@ (8007020 <DMA_List_Init+0x250>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d072      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a75      	ldr	r2, [pc, #468]	@ (8007024 <DMA_List_Init+0x254>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d06d      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a73      	ldr	r2, [pc, #460]	@ (8007028 <DMA_List_Init+0x258>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d068      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a72      	ldr	r2, [pc, #456]	@ (800702c <DMA_List_Init+0x25c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d063      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a70      	ldr	r2, [pc, #448]	@ (8007030 <DMA_List_Init+0x260>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d05e      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a6f      	ldr	r2, [pc, #444]	@ (8007034 <DMA_List_Init+0x264>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d059      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a6d      	ldr	r2, [pc, #436]	@ (8007038 <DMA_List_Init+0x268>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d054      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a6c      	ldr	r2, [pc, #432]	@ (800703c <DMA_List_Init+0x26c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d04f      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a6a      	ldr	r2, [pc, #424]	@ (8007040 <DMA_List_Init+0x270>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d04a      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a69      	ldr	r2, [pc, #420]	@ (8007044 <DMA_List_Init+0x274>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d045      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a67      	ldr	r2, [pc, #412]	@ (8007048 <DMA_List_Init+0x278>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d040      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a66      	ldr	r2, [pc, #408]	@ (800704c <DMA_List_Init+0x27c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d03b      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a64      	ldr	r2, [pc, #400]	@ (8007050 <DMA_List_Init+0x280>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d036      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a63      	ldr	r2, [pc, #396]	@ (8007054 <DMA_List_Init+0x284>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d031      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a61      	ldr	r2, [pc, #388]	@ (8007058 <DMA_List_Init+0x288>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d02c      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a60      	ldr	r2, [pc, #384]	@ (800705c <DMA_List_Init+0x28c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d027      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a5e      	ldr	r2, [pc, #376]	@ (8007060 <DMA_List_Init+0x290>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d022      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a5d      	ldr	r2, [pc, #372]	@ (8007064 <DMA_List_Init+0x294>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d01d      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a5b      	ldr	r2, [pc, #364]	@ (8007068 <DMA_List_Init+0x298>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d018      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a5a      	ldr	r2, [pc, #360]	@ (800706c <DMA_List_Init+0x29c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d013      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a58      	ldr	r2, [pc, #352]	@ (8007070 <DMA_List_Init+0x2a0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00e      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a57      	ldr	r2, [pc, #348]	@ (8007074 <DMA_List_Init+0x2a4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d009      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a55      	ldr	r2, [pc, #340]	@ (8007078 <DMA_List_Init+0x2a8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d004      	beq.n	8006f30 <DMA_List_Init+0x160>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a54      	ldr	r2, [pc, #336]	@ (800707c <DMA_List_Init+0x2ac>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d101      	bne.n	8006f34 <DMA_List_Init+0x164>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <DMA_List_Init+0x166>
 8006f34:	2300      	movs	r3, #0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006f68:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a36      	ldr	r2, [pc, #216]	@ (8007060 <DMA_List_Init+0x290>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d022      	beq.n	8006fd2 <DMA_List_Init+0x202>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a34      	ldr	r2, [pc, #208]	@ (8007064 <DMA_List_Init+0x294>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01d      	beq.n	8006fd2 <DMA_List_Init+0x202>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a33      	ldr	r2, [pc, #204]	@ (8007068 <DMA_List_Init+0x298>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d018      	beq.n	8006fd2 <DMA_List_Init+0x202>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a31      	ldr	r2, [pc, #196]	@ (800706c <DMA_List_Init+0x29c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <DMA_List_Init+0x202>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a30      	ldr	r2, [pc, #192]	@ (8007070 <DMA_List_Init+0x2a0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <DMA_List_Init+0x202>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8007074 <DMA_List_Init+0x2a4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <DMA_List_Init+0x202>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8007078 <DMA_List_Init+0x2a8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <DMA_List_Init+0x202>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800707c <DMA_List_Init+0x2ac>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d101      	bne.n	8006fd6 <DMA_List_Init+0x206>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <DMA_List_Init+0x208>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006ff4:	bf00      	nop
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	40020050 	.word	0x40020050
 8007004:	50020050 	.word	0x50020050
 8007008:	400200d0 	.word	0x400200d0
 800700c:	500200d0 	.word	0x500200d0
 8007010:	40020150 	.word	0x40020150
 8007014:	50020150 	.word	0x50020150
 8007018:	400201d0 	.word	0x400201d0
 800701c:	500201d0 	.word	0x500201d0
 8007020:	40020250 	.word	0x40020250
 8007024:	50020250 	.word	0x50020250
 8007028:	400202d0 	.word	0x400202d0
 800702c:	500202d0 	.word	0x500202d0
 8007030:	40020350 	.word	0x40020350
 8007034:	50020350 	.word	0x50020350
 8007038:	400203d0 	.word	0x400203d0
 800703c:	500203d0 	.word	0x500203d0
 8007040:	40020450 	.word	0x40020450
 8007044:	50020450 	.word	0x50020450
 8007048:	400204d0 	.word	0x400204d0
 800704c:	500204d0 	.word	0x500204d0
 8007050:	40020550 	.word	0x40020550
 8007054:	50020550 	.word	0x50020550
 8007058:	400205d0 	.word	0x400205d0
 800705c:	500205d0 	.word	0x500205d0
 8007060:	40020650 	.word	0x40020650
 8007064:	50020650 	.word	0x50020650
 8007068:	400206d0 	.word	0x400206d0
 800706c:	500206d0 	.word	0x500206d0
 8007070:	40020750 	.word	0x40020750
 8007074:	50020750 	.word	0x50020750
 8007078:	400207d0 	.word	0x400207d0
 800707c:	500207d0 	.word	0x500207d0

08007080 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007092:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8007098:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800709e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80070a4:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d017      	beq.n	80070e6 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c2:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c8:	3b01      	subs	r3, #1
 80070ca:	051b      	lsls	r3, r3, #20
 80070cc:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80070d0:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d6:	3b01      	subs	r3, #1
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80070de:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80070e0:	431a      	orrs	r2, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6859      	ldr	r1, [r3, #4]
 80070ee:	f240 237f 	movw	r3, #639	@ 0x27f
 80070f2:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80070f4:	431a      	orrs	r2, r3
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007102:	d10c      	bne.n	800711e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b00      	cmp	r3, #0
 800710e:	d011      	beq.n	8007134 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	605a      	str	r2, [r3, #4]
 800711c:	e00a      	b.n	8007134 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007126:	d105      	bne.n	8007134 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00f      	beq.n	800715c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007148:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800714e:	041b      	lsls	r3, r3, #16
 8007150:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007154:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007156:	431a      	orrs	r2, r3
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007160:	b29a      	uxth	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d04e      	beq.n	8007210 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800717a:	3b01      	subs	r3, #1
 800717c:	0419      	lsls	r1, r3, #16
 800717e:	4b67      	ldr	r3, [pc, #412]	@ (800731c <DMA_List_BuildNode+0x29c>)
 8007180:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007182:	431a      	orrs	r2, r3
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800718c:	2b00      	cmp	r3, #0
 800718e:	da06      	bge.n	800719e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	e005      	b.n	80071aa <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	da06      	bge.n	80071c0 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	609a      	str	r2, [r3, #8]
 80071be:	e005      	b.n	80071cc <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da06      	bge.n	80071e2 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	609a      	str	r2, [r3, #8]
 80071e0:	e005      	b.n	80071ee <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	da06      	bge.n	8007204 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	609a      	str	r2, [r3, #8]
 8007202:	e005      	b.n	8007210 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d059      	beq.n	80072e0 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007230:	2b00      	cmp	r3, #0
 8007232:	da09      	bge.n	8007248 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007238:	425b      	negs	r3, r3
 800723a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	615a      	str	r2, [r3, #20]
 8007246:	e005      	b.n	8007254 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800724c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007258:	2b00      	cmp	r3, #0
 800725a:	da0d      	bge.n	8007278 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007260:	425b      	negs	r3, r3
 8007262:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	695a      	ldr	r2, [r3, #20]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	0419      	lsls	r1, r3, #16
 800726c:	4b2c      	ldr	r3, [pc, #176]	@ (8007320 <DMA_List_BuildNode+0x2a0>)
 800726e:	400b      	ands	r3, r1
 8007270:	431a      	orrs	r2, r3
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	615a      	str	r2, [r3, #20]
 8007276:	e009      	b.n	800728c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007280:	0419      	lsls	r1, r3, #16
 8007282:	4b27      	ldr	r3, [pc, #156]	@ (8007320 <DMA_List_BuildNode+0x2a0>)
 8007284:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007286:	431a      	orrs	r2, r3
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007290:	2b00      	cmp	r3, #0
 8007292:	da08      	bge.n	80072a6 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007298:	425b      	negs	r3, r3
 800729a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	619a      	str	r2, [r3, #24]
 80072a4:	e004      	b.n	80072b0 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072aa:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	da0b      	bge.n	80072d0 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072bc:	425b      	negs	r3, r3
 80072be:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80072c8:	431a      	orrs	r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	619a      	str	r2, [r3, #24]
 80072ce:	e007      	b.n	80072e0 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d8:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80072da:	431a      	orrs	r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d006      	beq.n	8007302 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007300:	e005      	b.n	800730e <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	07ff0000 	.word	0x07ff0000
 8007320:	1fff0000 	.word	0x1fff0000

08007324 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	b2da      	uxtb	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0208 	and.w	r2, r3, #8
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0203 	and.w	r2, r3, #3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 800736c:	091b      	lsrs	r3, r3, #4
 800736e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007372:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 800737c:	0d1b      	lsrs	r3, r3, #20
 800737e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007382:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	4b66      	ldr	r3, [pc, #408]	@ (8007534 <DMA_List_GetNodeConfig+0x210>)
 800739a:	4013      	ands	r3, r2
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073be:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073c6:	60da      	str	r2, [r3, #12]
 80073c8:	e013      	b.n	80073f2 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80073e8:	60da      	str	r2, [r3, #12]
 80073ea:	e002      	b.n	80073f2 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	b29a      	uxth	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d008      	beq.n	8007458 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	0c1b      	lsrs	r3, r3, #16
 800744c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007450:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007456:	e002      	b.n	800745e <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d04a      	beq.n	8007510 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007484:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8007486:	89fa      	ldrh	r2, [r7, #14]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	0c1b      	lsrs	r3, r3, #16
 8007492:	b29b      	uxth	r3, r3
 8007494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007498:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800749a:	89fa      	ldrh	r2, [r7, #14]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b0:	425a      	negs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d004      	beq.n	80074cc <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c6:	425a      	negs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80074d2:	89fa      	ldrh	r2, [r7, #14]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	0c1b      	lsrs	r3, r3, #16
 80074de:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80074e0:	89fa      	ldrh	r2, [r7, #14]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f6:	425a      	negs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	da11      	bge.n	8007528 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007508:	425a      	negs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800750e:	e00b      	b.n	8007528 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007528:	bf00      	nop
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	0c002000 	.word	0x0c002000

08007538 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4313      	orrs	r3, r2
 800754e:	0c1b      	lsrs	r3, r3, #16
 8007550:	041b      	lsls	r3, r3, #16
 8007552:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e00a      	b.n	800757a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	e004      	b.n	800757a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	0c1b      	lsrs	r3, r3, #16
 800757e:	041b      	lsls	r3, r3, #16
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	429a      	cmp	r2, r3
 8007584:	d001      	beq.n	800758a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d004      	beq.n	80075b8 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	e00e      	b.n	80075d6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	e006      	b.n	80075d6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d007      	beq.n	80075ec <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d001      	beq.n	80075ec <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80075e8:	2302      	movs	r3, #2
 80075ea:	e00b      	b.n	8007604 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d001      	beq.n	8007602 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80075fe:	2303      	movs	r3, #3
 8007600:	e000      	b.n	8007604 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	371c      	adds	r7, #28
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00c      	beq.n	8007642 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4a0d      	ldr	r2, [pc, #52]	@ (8007668 <DMA_List_GetCLLRNodeInfo+0x58>)
 8007632:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00f      	beq.n	800765a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2207      	movs	r2, #7
 800763e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007640:	e00b      	b.n	800765a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4a08      	ldr	r2, [pc, #32]	@ (800766c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800764c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2205      	movs	r2, #5
 8007658:	601a      	str	r2, [r3, #0]
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	fe010000 	.word	0xfe010000
 800766c:	f8010000 	.word	0xf8010000

08007670 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007670:	b480      	push	{r7}
 8007672:	b089      	sub	sp, #36	@ 0x24
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d142      	bne.n	800771a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007694:	e01d      	b.n	80076d2 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d107      	bne.n	80076ac <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80076a6:	4013      	ands	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	e00f      	b.n	80076cc <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	0c1b      	lsrs	r3, r3, #16
 80076b6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	4413      	add	r3, r2
 80076bc:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80076c4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80076c8:	4013      	ands	r3, r2
 80076ca:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	3301      	adds	r3, #1
 80076d0:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d3dc      	bcc.n	8007696 <DMA_List_FindNode+0x26>
 80076dc:	e029      	b.n	8007732 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d107      	bne.n	80076f4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80076ee:	4013      	ands	r3, r2
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	e00f      	b.n	8007714 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	0c1b      	lsrs	r3, r3, #16
 80076fe:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	4413      	add	r3, r2
 8007704:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800770c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007710:	4013      	ands	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	3301      	adds	r3, #1
 8007718:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	429a      	cmp	r2, r3
 8007722:	d206      	bcs.n	8007732 <DMA_List_FindNode+0xc2>
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800772a:	4013      	ands	r3, r2
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	429a      	cmp	r2, r3
 8007730:	d1d5      	bne.n	80076de <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d008      	beq.n	800774a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800773e:	4013      	ands	r3, r2
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	429a      	cmp	r2, r3
 8007744:	d001      	beq.n	800774a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8007746:	2301      	movs	r3, #1
 8007748:	e02b      	b.n	80077a2 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	0c1b      	lsrs	r3, r3, #16
 8007756:	041b      	lsls	r3, r3, #16
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	0c1b      	lsrs	r3, r3, #16
 8007766:	041b      	lsls	r3, r3, #16
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	461a      	mov	r2, r3
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00f      	beq.n	80077a0 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	461a      	mov	r2, r3
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800778c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007790:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	0c1b      	lsrs	r3, r3, #16
 8007798:	041b      	lsls	r3, r3, #16
 800779a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3724      	adds	r7, #36	@ 0x24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b089      	sub	sp, #36	@ 0x24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80077c2:	e1ba      	b.n	8007b3a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	2101      	movs	r1, #1
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	fa01 f303 	lsl.w	r3, r1, r3
 80077d0:	4013      	ands	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 81aa 	beq.w	8007b34 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a55      	ldr	r2, [pc, #340]	@ (8007938 <HAL_GPIO_Init+0x188>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d15d      	bne.n	80078a4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80077ee:	2201      	movs	r2, #1
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	fa02 f303 	lsl.w	r3, r2, r3
 80077f6:	43db      	mvns	r3, r3
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	4013      	ands	r3, r2
 80077fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f003 0201 	and.w	r2, r3, #1
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	4313      	orrs	r3, r2
 8007810:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007818:	4a48      	ldr	r2, [pc, #288]	@ (800793c <HAL_GPIO_Init+0x18c>)
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007820:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007822:	4a46      	ldr	r2, [pc, #280]	@ (800793c <HAL_GPIO_Init+0x18c>)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	4413      	add	r3, r2
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	08da      	lsrs	r2, r3, #3
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	3208      	adds	r2, #8
 8007836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	220f      	movs	r2, #15
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	43db      	mvns	r3, r3
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	4013      	ands	r3, r2
 8007850:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	220b      	movs	r2, #11
 800785c:	fa02 f303 	lsl.w	r3, r2, r3
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	4313      	orrs	r3, r2
 8007864:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	08da      	lsrs	r2, r3, #3
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	3208      	adds	r2, #8
 800786e:	69f9      	ldr	r1, [r7, #28]
 8007870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	2203      	movs	r2, #3
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	43db      	mvns	r3, r3
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	4013      	ands	r3, r2
 800788a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	2202      	movs	r2, #2
 8007892:	fa02 f303 	lsl.w	r3, r2, r3
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	4313      	orrs	r3, r2
 800789a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	e067      	b.n	8007974 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d003      	beq.n	80078b4 <HAL_GPIO_Init+0x104>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2b12      	cmp	r3, #18
 80078b2:	d145      	bne.n	8007940 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	08da      	lsrs	r2, r3, #3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3208      	adds	r2, #8
 80078bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f003 0307 	and.w	r3, r3, #7
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	220f      	movs	r2, #15
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	43db      	mvns	r3, r3
 80078d2:	69fa      	ldr	r2, [r7, #28]
 80078d4:	4013      	ands	r3, r2
 80078d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	f003 020f 	and.w	r2, r3, #15
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	08da      	lsrs	r2, r3, #3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3208      	adds	r2, #8
 80078fa:	69f9      	ldr	r1, [r7, #28]
 80078fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	2203      	movs	r2, #3
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	43db      	mvns	r3, r3
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	4013      	ands	r3, r2
 8007916:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f003 0203 	and.w	r2, r3, #3
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	69fa      	ldr	r2, [r7, #28]
 800792a:	4313      	orrs	r3, r2
 800792c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	e01e      	b.n	8007974 <HAL_GPIO_Init+0x1c4>
 8007936:	bf00      	nop
 8007938:	46020000 	.word	0x46020000
 800793c:	08012420 	.word	0x08012420
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	2203      	movs	r2, #3
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	43db      	mvns	r3, r3
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	4013      	ands	r3, r2
 8007956:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f003 0203 	and.w	r2, r3, #3
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	4313      	orrs	r3, r2
 800796c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d00b      	beq.n	8007994 <HAL_GPIO_Init+0x1e4>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d007      	beq.n	8007994 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007988:	2b11      	cmp	r3, #17
 800798a:	d003      	beq.n	8007994 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	2b12      	cmp	r3, #18
 8007992:	d130      	bne.n	80079f6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	2203      	movs	r2, #3
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	43db      	mvns	r3, r3
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	4013      	ands	r3, r2
 80079aa:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	fa02 f303 	lsl.w	r3, r2, r3
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	69fa      	ldr	r2, [r7, #28]
 80079c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80079ca:	2201      	movs	r2, #1
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	43db      	mvns	r3, r3
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	4013      	ands	r3, r2
 80079d8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	091b      	lsrs	r3, r3, #4
 80079e0:	f003 0201 	and.w	r2, r3, #1
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d017      	beq.n	8007a2e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	2203      	movs	r2, #3
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	4013      	ands	r3, r2
 8007a14:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d07c      	beq.n	8007b34 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007a3a:	4a47      	ldr	r2, [pc, #284]	@ (8007b58 <HAL_GPIO_Init+0x3a8>)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	089b      	lsrs	r3, r3, #2
 8007a40:	3318      	adds	r3, #24
 8007a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a46:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	220f      	movs	r2, #15
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	43db      	mvns	r3, r3
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	0a9a      	lsrs	r2, r3, #10
 8007a62:	4b3e      	ldr	r3, [pc, #248]	@ (8007b5c <HAL_GPIO_Init+0x3ac>)
 8007a64:	4013      	ands	r3, r2
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	f002 0203 	and.w	r2, r2, #3
 8007a6c:	00d2      	lsls	r2, r2, #3
 8007a6e:	4093      	lsls	r3, r2
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007a76:	4938      	ldr	r1, [pc, #224]	@ (8007b58 <HAL_GPIO_Init+0x3a8>)
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	089b      	lsrs	r3, r3, #2
 8007a7c:	3318      	adds	r3, #24
 8007a7e:	69fa      	ldr	r2, [r7, #28]
 8007a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007a84:	4b34      	ldr	r3, [pc, #208]	@ (8007b58 <HAL_GPIO_Init+0x3a8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	43db      	mvns	r3, r3
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	4013      	ands	r3, r2
 8007a92:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8007b58 <HAL_GPIO_Init+0x3a8>)
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007aae:	4b2a      	ldr	r3, [pc, #168]	@ (8007b58 <HAL_GPIO_Init+0x3a8>)
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	4013      	ands	r3, r2
 8007abc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007ad2:	4a21      	ldr	r2, [pc, #132]	@ (8007b58 <HAL_GPIO_Init+0x3a8>)
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8007b58 <HAL_GPIO_Init+0x3a8>)
 8007ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ade:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	69fa      	ldr	r2, [r7, #28]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007afe:	4a16      	ldr	r2, [pc, #88]	@ (8007b58 <HAL_GPIO_Init+0x3a8>)
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8007b06:	4b14      	ldr	r3, [pc, #80]	@ (8007b58 <HAL_GPIO_Init+0x3a8>)
 8007b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	43db      	mvns	r3, r3
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	4013      	ands	r3, r2
 8007b16:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b58 <HAL_GPIO_Init+0x3a8>)
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	3301      	adds	r3, #1
 8007b38:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	fa22 f303 	lsr.w	r3, r2, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f47f ae3d 	bne.w	80077c4 <HAL_GPIO_Init+0x14>
  }
}
 8007b4a:	bf00      	nop
 8007b4c:	bf00      	nop
 8007b4e:	3724      	adds	r7, #36	@ 0x24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	46022000 	.word	0x46022000
 8007b5c:	002f7f7f 	.word	0x002f7f7f

08007b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	807b      	strh	r3, [r7, #2]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b70:	787b      	ldrb	r3, [r7, #1]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007b76:	887a      	ldrh	r2, [r7, #2]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007b7c:	e002      	b.n	8007b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007b7e:	887a      	ldrh	r2, [r7, #2]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ba2:	887a      	ldrh	r2, [r7, #2]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	041a      	lsls	r2, r3, #16
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	43d9      	mvns	r1, r3
 8007bae:	887b      	ldrh	r3, [r7, #2]
 8007bb0:	400b      	ands	r3, r1
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	619a      	str	r2, [r3, #24]
}
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007bce:	4b0f      	ldr	r3, [pc, #60]	@ (8007c0c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d006      	beq.n	8007be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007bda:	4a0c      	ldr	r2, [pc, #48]	@ (8007c0c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007bdc:	88fb      	ldrh	r3, [r7, #6]
 8007bde:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007be0:	88fb      	ldrh	r3, [r7, #6]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 f814 	bl	8007c10 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007be8:	4b08      	ldr	r3, [pc, #32]	@ (8007c0c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d006      	beq.n	8007c02 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007bf4:	4a05      	ldr	r2, [pc, #20]	@ (8007c0c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 f812 	bl	8007c26 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	46022000 	.word	0x46022000

08007c10 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e08d      	b.n	8007d6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fa fa10 	bl	8002088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2224      	movs	r2, #36	@ 0x24
 8007c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0201 	bic.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d107      	bne.n	8007cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cb2:	609a      	str	r2, [r3, #8]
 8007cb4:	e006      	b.n	8007cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689a      	ldr	r2, [r3, #8]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d108      	bne.n	8007cde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cda:	605a      	str	r2, [r3, #4]
 8007cdc:	e007      	b.n	8007cee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691a      	ldr	r2, [r3, #16]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	69d9      	ldr	r1, [r3, #28]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a1a      	ldr	r2, [r3, #32]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0201 	orr.w	r2, r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
	...

08007d74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	607a      	str	r2, [r7, #4]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	460b      	mov	r3, r1
 8007d82:	817b      	strh	r3, [r7, #10]
 8007d84:	4613      	mov	r3, r2
 8007d86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	f040 80da 	bne.w	8007f4a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_I2C_Master_Transmit+0x30>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e0d3      	b.n	8007f4c <HAL_I2C_Master_Transmit+0x1d8>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007dac:	f7fb f908 	bl	8002fc0 <HAL_GetTick>
 8007db0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	2319      	movs	r3, #25
 8007db8:	2201      	movs	r2, #1
 8007dba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 fe7d 	bl	8008abe <I2C_WaitOnFlagUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e0be      	b.n	8007f4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2221      	movs	r2, #33	@ 0x21
 8007dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2210      	movs	r2, #16
 8007dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	893a      	ldrh	r2, [r7, #8]
 8007dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	2bff      	cmp	r3, #255	@ 0xff
 8007dfe:	d90e      	bls.n	8007e1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	22ff      	movs	r2, #255	@ 0xff
 8007e04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	8979      	ldrh	r1, [r7, #10]
 8007e0e:	4b51      	ldr	r3, [pc, #324]	@ (8007f54 <HAL_I2C_Master_Transmit+0x1e0>)
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f001 f814 	bl	8008e44 <I2C_TransferConfig>
 8007e1c:	e06c      	b.n	8007ef8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	8979      	ldrh	r1, [r7, #10]
 8007e30:	4b48      	ldr	r3, [pc, #288]	@ (8007f54 <HAL_I2C_Master_Transmit+0x1e0>)
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f001 f803 	bl	8008e44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007e3e:	e05b      	b.n	8007ef8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	6a39      	ldr	r1, [r7, #32]
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fe93 	bl	8008b70 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e07b      	b.n	8007f4c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e58:	781a      	ldrb	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d034      	beq.n	8007ef8 <HAL_I2C_Master_Transmit+0x184>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d130      	bne.n	8007ef8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2180      	movs	r1, #128	@ 0x80
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fe0c 	bl	8008abe <I2C_WaitOnFlagUntilTimeout>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e04d      	b.n	8007f4c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2bff      	cmp	r3, #255	@ 0xff
 8007eb8:	d90e      	bls.n	8007ed8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	22ff      	movs	r2, #255	@ 0xff
 8007ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	8979      	ldrh	r1, [r7, #10]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 ffb7 	bl	8008e44 <I2C_TransferConfig>
 8007ed6:	e00f      	b.n	8007ef8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	8979      	ldrh	r1, [r7, #10]
 8007eea:	2300      	movs	r3, #0
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 ffa6 	bl	8008e44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d19e      	bne.n	8007e40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	6a39      	ldr	r1, [r7, #32]
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 fe79 	bl	8008bfe <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e01a      	b.n	8007f4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6859      	ldr	r1, [r3, #4]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	4b0b      	ldr	r3, [pc, #44]	@ (8007f58 <HAL_I2C_Master_Transmit+0x1e4>)
 8007f2a:	400b      	ands	r3, r1
 8007f2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	e000      	b.n	8007f4c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007f4a:	2302      	movs	r3, #2
  }
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	80002000 	.word	0x80002000
 8007f58:	fe00e800 	.word	0xfe00e800

08007f5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	4798      	blx	r3
  }
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00f      	beq.n	8007fd2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc0:	f043 0201 	orr.w	r2, r3, #1
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fd0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00f      	beq.n	8007ffc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fea:	f043 0208 	orr.w	r2, r3, #8
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ffa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00f      	beq.n	8008026 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00a      	beq.n	8008026 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008014:	f043 0202 	orr.w	r2, r3, #2
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008024:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800802a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 030b 	and.w	r3, r3, #11
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8008036:	68f9      	ldr	r1, [r7, #12]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fbe7 	bl	800880c <I2C_ITError>
  }
}
 800803e:	bf00      	nop
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	460b      	mov	r3, r1
 8008078:	70fb      	strb	r3, [r7, #3]
 800807a:	4613      	mov	r3, r2
 800807c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b086      	sub	sp, #24
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d101      	bne.n	80080ea <I2C_Slave_ISR_IT+0x24>
 80080e6:	2302      	movs	r3, #2
 80080e8:	e0e2      	b.n	80082b0 <I2C_Slave_ISR_IT+0x1ea>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008102:	2b00      	cmp	r3, #0
 8008104:	d004      	beq.n	8008110 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008106:	6939      	ldr	r1, [r7, #16]
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f9b5 	bl	8008478 <I2C_ITSlaveCplt>
 800810e:	e0ca      	b.n	80082a6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f003 0310 	and.w	r3, r3, #16
 8008116:	2b00      	cmp	r3, #0
 8008118:	d04b      	beq.n	80081b2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008120:	2b00      	cmp	r3, #0
 8008122:	d046      	beq.n	80081b2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d128      	bne.n	8008180 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b28      	cmp	r3, #40	@ 0x28
 8008138:	d108      	bne.n	800814c <I2C_Slave_ISR_IT+0x86>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008140:	d104      	bne.n	800814c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008142:	6939      	ldr	r1, [r7, #16]
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 fb0d 	bl	8008764 <I2C_ITListenCplt>
 800814a:	e031      	b.n	80081b0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b29      	cmp	r3, #41	@ 0x29
 8008156:	d10e      	bne.n	8008176 <I2C_Slave_ISR_IT+0xb0>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800815e:	d00a      	beq.n	8008176 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2210      	movs	r2, #16
 8008166:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fc66 	bl	8008a3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f926 	bl	80083c0 <I2C_ITSlaveSeqCplt>
 8008174:	e01c      	b.n	80081b0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2210      	movs	r2, #16
 800817c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800817e:	e08f      	b.n	80082a0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2210      	movs	r2, #16
 8008186:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818c:	f043 0204 	orr.w	r2, r3, #4
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <I2C_Slave_ISR_IT+0xdc>
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081a0:	d17e      	bne.n	80082a0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a6:	4619      	mov	r1, r3
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fb2f 	bl	800880c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80081ae:	e077      	b.n	80082a0 <I2C_Slave_ISR_IT+0x1da>
 80081b0:	e076      	b.n	80082a0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d02f      	beq.n	800821c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d02a      	beq.n	800821c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d018      	beq.n	8008202 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081da:	b2d2      	uxtb	r2, r2
 80081dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	3b01      	subs	r3, #1
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008206:	b29b      	uxth	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d14b      	bne.n	80082a4 <I2C_Slave_ISR_IT+0x1de>
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008212:	d047      	beq.n	80082a4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 f8d3 	bl	80083c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800821a:	e043      	b.n	80082a4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f003 0308 	and.w	r3, r3, #8
 8008222:	2b00      	cmp	r3, #0
 8008224:	d009      	beq.n	800823a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008230:	6939      	ldr	r1, [r7, #16]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 f840 	bl	80082b8 <I2C_ITAddrCplt>
 8008238:	e035      	b.n	80082a6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	2b00      	cmp	r3, #0
 8008242:	d030      	beq.n	80082a6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800824a:	2b00      	cmp	r3, #0
 800824c:	d02b      	beq.n	80082a6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008252:	b29b      	uxth	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d018      	beq.n	800828a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825c:	781a      	ldrb	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008272:	b29b      	uxth	r3, r3
 8008274:	3b01      	subs	r3, #1
 8008276:	b29a      	uxth	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008280:	3b01      	subs	r3, #1
 8008282:	b29a      	uxth	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008288:	e00d      	b.n	80082a6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008290:	d002      	beq.n	8008298 <I2C_Slave_ISR_IT+0x1d2>
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 f891 	bl	80083c0 <I2C_ITSlaveSeqCplt>
 800829e:	e002      	b.n	80082a6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80082a0:	bf00      	nop
 80082a2:	e000      	b.n	80082a6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80082a4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80082ce:	2b28      	cmp	r3, #40	@ 0x28
 80082d0:	d16a      	bne.n	80083a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	0c1b      	lsrs	r3, r3, #16
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	0c1b      	lsrs	r3, r3, #16
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80082f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800830c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d138      	bne.n	8008388 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008316:	897b      	ldrh	r3, [r7, #10]
 8008318:	09db      	lsrs	r3, r3, #7
 800831a:	b29a      	uxth	r2, r3
 800831c:	89bb      	ldrh	r3, [r7, #12]
 800831e:	4053      	eors	r3, r2
 8008320:	b29b      	uxth	r3, r3
 8008322:	f003 0306 	and.w	r3, r3, #6
 8008326:	2b00      	cmp	r3, #0
 8008328:	d11c      	bne.n	8008364 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800832a:	897b      	ldrh	r3, [r7, #10]
 800832c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800833c:	2b02      	cmp	r3, #2
 800833e:	d13b      	bne.n	80083b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2208      	movs	r2, #8
 800834c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008356:	89ba      	ldrh	r2, [r7, #12]
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff fe86 	bl	800806e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008362:	e029      	b.n	80083b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008364:	893b      	ldrh	r3, [r7, #8]
 8008366:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008368:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fd9b 	bl	8008ea8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800837a:	89ba      	ldrh	r2, [r7, #12]
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff fe74 	bl	800806e <HAL_I2C_AddrCallback>
}
 8008386:	e017      	b.n	80083b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008388:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fd8b 	bl	8008ea8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800839a:	89ba      	ldrh	r2, [r7, #12]
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7ff fe64 	bl	800806e <HAL_I2C_AddrCallback>
}
 80083a6:	e007      	b.n	80083b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2208      	movs	r2, #8
 80083ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80083b8:	bf00      	nop
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d008      	beq.n	80083f4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	e00c      	b.n	800840e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800840c:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b29      	cmp	r3, #41	@ 0x29
 8008418:	d112      	bne.n	8008440 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2228      	movs	r2, #40	@ 0x28
 800841e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2221      	movs	r2, #33	@ 0x21
 8008426:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008428:	2101      	movs	r1, #1
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fd3c 	bl	8008ea8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7ff fe04 	bl	8008046 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800843e:	e017      	b.n	8008470 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b2a      	cmp	r3, #42	@ 0x2a
 800844a:	d111      	bne.n	8008470 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2228      	movs	r2, #40	@ 0x28
 8008450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2222      	movs	r2, #34	@ 0x22
 8008458:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800845a:	2102      	movs	r1, #2
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fd23 	bl	8008ea8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff fdf5 	bl	800805a <HAL_I2C_SlaveRxCpltCallback>
}
 8008470:	bf00      	nop
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008478:	b590      	push	{r4, r7, lr}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008492:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800849a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2220      	movs	r2, #32
 80084a2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80084a4:	7afb      	ldrb	r3, [r7, #11]
 80084a6:	2b21      	cmp	r3, #33	@ 0x21
 80084a8:	d002      	beq.n	80084b0 <I2C_ITSlaveCplt+0x38>
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	2b29      	cmp	r3, #41	@ 0x29
 80084ae:	d108      	bne.n	80084c2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80084b0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fcf7 	bl	8008ea8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2221      	movs	r2, #33	@ 0x21
 80084be:	631a      	str	r2, [r3, #48]	@ 0x30
 80084c0:	e019      	b.n	80084f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	2b22      	cmp	r3, #34	@ 0x22
 80084c6:	d002      	beq.n	80084ce <I2C_ITSlaveCplt+0x56>
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80084cc:	d108      	bne.n	80084e0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80084ce:	f248 0102 	movw	r1, #32770	@ 0x8002
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fce8 	bl	8008ea8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2222      	movs	r2, #34	@ 0x22
 80084dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80084de:	e00a      	b.n	80084f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	2b28      	cmp	r3, #40	@ 0x28
 80084e4:	d107      	bne.n	80084f6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80084e6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fcdc 	bl	8008ea8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008504:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6859      	ldr	r1, [r3, #4]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	4b92      	ldr	r3, [pc, #584]	@ (800875c <I2C_ITSlaveCplt+0x2e4>)
 8008512:	400b      	ands	r3, r1
 8008514:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa8f 	bl	8008a3a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01c      	beq.n	8008560 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008534:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800853a:	2b00      	cmp	r3, #0
 800853c:	d031      	beq.n	80085a2 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008546:	b29c      	uxth	r4, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854c:	4618      	mov	r0, r3
 800854e:	f7fe fc30 	bl	8006db2 <HAL_DMAEx_GetFifoLevel>
 8008552:	4603      	mov	r3, r0
 8008554:	b29b      	uxth	r3, r3
 8008556:	4423      	add	r3, r4
 8008558:	b29a      	uxth	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800855e:	e020      	b.n	80085a2 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01b      	beq.n	80085a2 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008578:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00f      	beq.n	80085a2 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800858a:	b29c      	uxth	r4, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe fc0e 	bl	8006db2 <HAL_DMAEx_GetFifoLevel>
 8008596:	4603      	mov	r3, r0
 8008598:	b29b      	uxth	r3, r3
 800859a:	4423      	add	r3, r4
 800859c:	b29a      	uxth	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d020      	beq.n	80085ee <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f023 0304 	bic.w	r3, r3, #4
 80085b2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085be:	b2d2      	uxtb	r2, r2
 80085c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00c      	beq.n	80085ee <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085d8:	3b01      	subs	r3, #1
 80085da:	b29a      	uxth	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fc:	f043 0204 	orr.w	r2, r3, #4
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f003 0310 	and.w	r3, r3, #16
 800860a:	2b00      	cmp	r3, #0
 800860c:	d049      	beq.n	80086a2 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008614:	2b00      	cmp	r3, #0
 8008616:	d044      	beq.n	80086a2 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d128      	bne.n	8008674 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b28      	cmp	r3, #40	@ 0x28
 800862c:	d108      	bne.n	8008640 <I2C_ITSlaveCplt+0x1c8>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008634:	d104      	bne.n	8008640 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008636:	6979      	ldr	r1, [r7, #20]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f893 	bl	8008764 <I2C_ITListenCplt>
 800863e:	e030      	b.n	80086a2 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b29      	cmp	r3, #41	@ 0x29
 800864a:	d10e      	bne.n	800866a <I2C_ITSlaveCplt+0x1f2>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008652:	d00a      	beq.n	800866a <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2210      	movs	r2, #16
 800865a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f9ec 	bl	8008a3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff feac 	bl	80083c0 <I2C_ITSlaveSeqCplt>
 8008668:	e01b      	b.n	80086a2 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2210      	movs	r2, #16
 8008670:	61da      	str	r2, [r3, #28]
 8008672:	e016      	b.n	80086a2 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2210      	movs	r2, #16
 800867a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008680:	f043 0204 	orr.w	r2, r3, #4
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <I2C_ITSlaveCplt+0x21e>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008694:	d105      	bne.n	80086a2 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f8b5 	bl	800880c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d010      	beq.n	80086da <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f8a4 	bl	800880c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b28      	cmp	r3, #40	@ 0x28
 80086ce:	d141      	bne.n	8008754 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80086d0:	6979      	ldr	r1, [r7, #20]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f846 	bl	8008764 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80086d8:	e03c      	b.n	8008754 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80086e2:	d014      	beq.n	800870e <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff fe6b 	bl	80083c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008760 <I2C_ITSlaveCplt+0x2e8>)
 80086ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff fcbf 	bl	800808a <HAL_I2C_ListenCpltCallback>
}
 800870c:	e022      	b.n	8008754 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b22      	cmp	r3, #34	@ 0x22
 8008718:	d10e      	bne.n	8008738 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2220      	movs	r2, #32
 800871e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fc92 	bl	800805a <HAL_I2C_SlaveRxCpltCallback>
}
 8008736:	e00d      	b.n	8008754 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2220      	movs	r2, #32
 800873c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff fc79 	bl	8008046 <HAL_I2C_SlaveTxCpltCallback>
}
 8008754:	bf00      	nop
 8008756:	371c      	adds	r7, #28
 8008758:	46bd      	mov	sp, r7
 800875a:	bd90      	pop	{r4, r7, pc}
 800875c:	fe00e800 	.word	0xfe00e800
 8008760:	ffff0000 	.word	0xffff0000

08008764 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a25      	ldr	r2, [pc, #148]	@ (8008808 <I2C_ITListenCplt+0xa4>)
 8008772:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	f003 0304 	and.w	r3, r3, #4
 8008796:	2b00      	cmp	r3, #0
 8008798:	d022      	beq.n	80087e0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a4:	b2d2      	uxtb	r2, r2
 80087a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d012      	beq.n	80087e0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d8:	f043 0204 	orr.w	r2, r3, #4
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fb5f 	bl	8008ea8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2210      	movs	r2, #16
 80087f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff fc45 	bl	800808a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	ffff0000 	.word	0xffff0000

0800880c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800881c:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a6d      	ldr	r2, [pc, #436]	@ (80089e0 <I2C_ITError+0x1d4>)
 800882a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	2b28      	cmp	r3, #40	@ 0x28
 8008842:	d005      	beq.n	8008850 <I2C_ITError+0x44>
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	2b29      	cmp	r3, #41	@ 0x29
 8008848:	d002      	beq.n	8008850 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2b2a      	cmp	r3, #42	@ 0x2a
 800884e:	d10b      	bne.n	8008868 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008850:	2103      	movs	r1, #3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fb28 	bl	8008ea8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2228      	movs	r2, #40	@ 0x28
 800885c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a60      	ldr	r2, [pc, #384]	@ (80089e4 <I2C_ITError+0x1d8>)
 8008864:	635a      	str	r2, [r3, #52]	@ 0x34
 8008866:	e030      	b.n	80088ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008868:	f248 0103 	movw	r1, #32771	@ 0x8003
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fb1b 	bl	8008ea8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f8e1 	bl	8008a3a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b60      	cmp	r3, #96	@ 0x60
 8008882:	d01f      	beq.n	80088c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	f003 0320 	and.w	r3, r3, #32
 8008896:	2b20      	cmp	r3, #32
 8008898:	d114      	bne.n	80088c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b10      	cmp	r3, #16
 80088a6:	d109      	bne.n	80088bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2210      	movs	r2, #16
 80088ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088b4:	f043 0204 	orr.w	r2, r3, #4
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2220      	movs	r2, #32
 80088c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d039      	beq.n	800894c <I2C_ITError+0x140>
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b11      	cmp	r3, #17
 80088dc:	d002      	beq.n	80088e4 <I2C_ITError+0xd8>
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b21      	cmp	r3, #33	@ 0x21
 80088e2:	d133      	bne.n	800894c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088f2:	d107      	bne.n	8008904 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008902:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008908:	4618      	mov	r0, r3
 800890a:	f7fd fa6f 	bl	8005dec <HAL_DMA_GetState>
 800890e:	4603      	mov	r3, r0
 8008910:	2b01      	cmp	r3, #1
 8008912:	d017      	beq.n	8008944 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008918:	4a33      	ldr	r2, [pc, #204]	@ (80089e8 <I2C_ITError+0x1dc>)
 800891a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008928:	4618      	mov	r0, r3
 800892a:	f7fd f8d5 	bl	8005ad8 <HAL_DMA_Abort_IT>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d04d      	beq.n	80089d0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800893e:	4610      	mov	r0, r2
 8008940:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008942:	e045      	b.n	80089d0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f851 	bl	80089ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800894a:	e041      	b.n	80089d0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008950:	2b00      	cmp	r3, #0
 8008952:	d039      	beq.n	80089c8 <I2C_ITError+0x1bc>
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b12      	cmp	r3, #18
 8008958:	d002      	beq.n	8008960 <I2C_ITError+0x154>
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2b22      	cmp	r3, #34	@ 0x22
 800895e:	d133      	bne.n	80089c8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800896a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800896e:	d107      	bne.n	8008980 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800897e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008984:	4618      	mov	r0, r3
 8008986:	f7fd fa31 	bl	8005dec <HAL_DMA_GetState>
 800898a:	4603      	mov	r3, r0
 800898c:	2b01      	cmp	r3, #1
 800898e:	d017      	beq.n	80089c0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008994:	4a14      	ldr	r2, [pc, #80]	@ (80089e8 <I2C_ITError+0x1dc>)
 8008996:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fd f897 	bl	8005ad8 <HAL_DMA_Abort_IT>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d011      	beq.n	80089d4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80089ba:	4610      	mov	r0, r2
 80089bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80089be:	e009      	b.n	80089d4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f813 	bl	80089ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80089c6:	e005      	b.n	80089d4 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f80f 	bl	80089ec <I2C_TreatErrorCallback>
  }
}
 80089ce:	e002      	b.n	80089d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80089d0:	bf00      	nop
 80089d2:	e000      	b.n	80089d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80089d4:	bf00      	nop
}
 80089d6:	bf00      	nop
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	ffff0000 	.word	0xffff0000
 80089e4:	080080c7 	.word	0x080080c7
 80089e8:	08008a83 	.word	0x08008a83

080089ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b60      	cmp	r3, #96	@ 0x60
 80089fe:	d10e      	bne.n	8008a1e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2220      	movs	r2, #32
 8008a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff fb4b 	bl	80080b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a1c:	e009      	b.n	8008a32 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff fb36 	bl	800809e <HAL_I2C_ErrorCallback>
}
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d103      	bne.n	8008a58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2200      	movs	r2, #0
 8008a56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d007      	beq.n	8008a76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	699a      	ldr	r2, [r3, #24]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0201 	orr.w	r2, r2, #1
 8008a74:	619a      	str	r2, [r3, #24]
  }
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aac:	2200      	movs	r2, #0
 8008aae:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f7ff ff9b 	bl	80089ec <I2C_TreatErrorCallback>
}
 8008ab6:	bf00      	nop
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	603b      	str	r3, [r7, #0]
 8008aca:	4613      	mov	r3, r2
 8008acc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ace:	e03b      	b.n	8008b48 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 f8d5 	bl	8008c84 <I2C_IsErrorOccurred>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e041      	b.n	8008b68 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aea:	d02d      	beq.n	8008b48 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aec:	f7fa fa68 	bl	8002fc0 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d302      	bcc.n	8008b02 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d122      	bne.n	8008b48 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	699a      	ldr	r2, [r3, #24]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	bf0c      	ite	eq
 8008b12:	2301      	moveq	r3, #1
 8008b14:	2300      	movne	r3, #0
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	461a      	mov	r2, r3
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d113      	bne.n	8008b48 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b24:	f043 0220 	orr.w	r2, r3, #32
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e00f      	b.n	8008b68 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	4013      	ands	r3, r2
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	bf0c      	ite	eq
 8008b58:	2301      	moveq	r3, #1
 8008b5a:	2300      	movne	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d0b4      	beq.n	8008ad0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b7c:	e033      	b.n	8008be6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 f87e 	bl	8008c84 <I2C_IsErrorOccurred>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e031      	b.n	8008bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b98:	d025      	beq.n	8008be6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b9a:	f7fa fa11 	bl	8002fc0 <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d302      	bcc.n	8008bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d11a      	bne.n	8008be6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d013      	beq.n	8008be6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bc2:	f043 0220 	orr.w	r2, r3, #32
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e007      	b.n	8008bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d1c4      	bne.n	8008b7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c0a:	e02f      	b.n	8008c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f837 	bl	8008c84 <I2C_IsErrorOccurred>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e02d      	b.n	8008c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c20:	f7fa f9ce 	bl	8002fc0 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d302      	bcc.n	8008c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d11a      	bne.n	8008c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	f003 0320 	and.w	r3, r3, #32
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d013      	beq.n	8008c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c48:	f043 0220 	orr.w	r2, r3, #32
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e007      	b.n	8008c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	d1c8      	bne.n	8008c0c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08a      	sub	sp, #40	@ 0x28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d068      	beq.n	8008d82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2210      	movs	r2, #16
 8008cb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008cb8:	e049      	b.n	8008d4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d045      	beq.n	8008d4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008cc2:	f7fa f97d 	bl	8002fc0 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d302      	bcc.n	8008cd8 <I2C_IsErrorOccurred+0x54>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d13a      	bne.n	8008d4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ce2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cfa:	d121      	bne.n	8008d40 <I2C_IsErrorOccurred+0xbc>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d02:	d01d      	beq.n	8008d40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d04:	7cfb      	ldrb	r3, [r7, #19]
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	d01a      	beq.n	8008d40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008d1a:	f7fa f951 	bl	8002fc0 <HAL_GetTick>
 8008d1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d20:	e00e      	b.n	8008d40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008d22:	f7fa f94d 	bl	8002fc0 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b19      	cmp	r3, #25
 8008d2e:	d907      	bls.n	8008d40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	f043 0320 	orr.w	r3, r3, #32
 8008d36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008d3e:	e006      	b.n	8008d4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	2b20      	cmp	r3, #32
 8008d4c:	d1e9      	bne.n	8008d22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	f003 0320 	and.w	r3, r3, #32
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d003      	beq.n	8008d64 <I2C_IsErrorOccurred+0xe0>
 8008d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0aa      	beq.n	8008cba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d103      	bne.n	8008d74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2220      	movs	r2, #32
 8008d72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	f043 0304 	orr.w	r3, r3, #4
 8008d7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00b      	beq.n	8008dac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	f043 0301 	orr.w	r3, r3, #1
 8008d9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008da4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00b      	beq.n	8008dce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	f043 0308 	orr.w	r3, r3, #8
 8008dbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008dc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00b      	beq.n	8008df0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	f043 0302 	orr.w	r3, r3, #2
 8008dde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008de8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01c      	beq.n	8008e32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7ff fe1e 	bl	8008a3a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6859      	ldr	r1, [r3, #4]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b0d      	ldr	r3, [pc, #52]	@ (8008e40 <I2C_IsErrorOccurred+0x1bc>)
 8008e0a:	400b      	ands	r3, r1
 8008e0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	431a      	orrs	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3728      	adds	r7, #40	@ 0x28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	fe00e800 	.word	0xfe00e800

08008e44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	607b      	str	r3, [r7, #4]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	817b      	strh	r3, [r7, #10]
 8008e52:	4613      	mov	r3, r2
 8008e54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e56:	897b      	ldrh	r3, [r7, #10]
 8008e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e5c:	7a7b      	ldrb	r3, [r7, #9]
 8008e5e:	041b      	lsls	r3, r3, #16
 8008e60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	0d5b      	lsrs	r3, r3, #21
 8008e7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008e82:	4b08      	ldr	r3, [pc, #32]	@ (8008ea4 <I2C_TransferConfig+0x60>)
 8008e84:	430b      	orrs	r3, r1
 8008e86:	43db      	mvns	r3, r3
 8008e88:	ea02 0103 	and.w	r1, r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008e96:	bf00      	nop
 8008e98:	371c      	adds	r7, #28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	03ff63ff 	.word	0x03ff63ff

08008ea8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008eb8:	887b      	ldrh	r3, [r7, #2]
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00f      	beq.n	8008ee2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008ec8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008ed6:	2b28      	cmp	r3, #40	@ 0x28
 8008ed8:	d003      	beq.n	8008ee2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008ee0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008ee2:	887b      	ldrh	r3, [r7, #2]
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00f      	beq.n	8008f0c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008ef2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008f00:	2b28      	cmp	r3, #40	@ 0x28
 8008f02:	d003      	beq.n	8008f0c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008f0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da03      	bge.n	8008f1c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008f1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f1c:	887b      	ldrh	r3, [r7, #2]
 8008f1e:	2b10      	cmp	r3, #16
 8008f20:	d103      	bne.n	8008f2a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008f28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f2a:	887b      	ldrh	r3, [r7, #2]
 8008f2c:	2b20      	cmp	r3, #32
 8008f2e:	d103      	bne.n	8008f38 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f043 0320 	orr.w	r3, r3, #32
 8008f36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008f38:	887b      	ldrh	r3, [r7, #2]
 8008f3a:	2b40      	cmp	r3, #64	@ 0x40
 8008f3c:	d103      	bne.n	8008f46 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f44:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6819      	ldr	r1, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	43da      	mvns	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	400a      	ands	r2, r1
 8008f56:	601a      	str	r2, [r3, #0]
}
 8008f58:	bf00      	nop
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b20      	cmp	r3, #32
 8008f78:	d138      	bne.n	8008fec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e032      	b.n	8008fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2224      	movs	r2, #36	@ 0x24
 8008f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 0201 	bic.w	r2, r2, #1
 8008fa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008fb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6819      	ldr	r1, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0201 	orr.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e000      	b.n	8008fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b20      	cmp	r3, #32
 800900e:	d139      	bne.n	8009084 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009016:	2b01      	cmp	r3, #1
 8009018:	d101      	bne.n	800901e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800901a:	2302      	movs	r3, #2
 800901c:	e033      	b.n	8009086 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2224      	movs	r2, #36	@ 0x24
 800902a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 0201 	bic.w	r2, r2, #1
 800903c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800904c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	021b      	lsls	r3, r3, #8
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0201 	orr.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	e000      	b.n	8009086 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009084:	2302      	movs	r3, #2
  }
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
	...

08009094 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80090a0:	4b0b      	ldr	r3, [pc, #44]	@ (80090d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	73fb      	strb	r3, [r7, #15]
 80090b0:	e007      	b.n	80090c2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80090b2:	4b07      	ldr	r3, [pc, #28]	@ (80090d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f023 0204 	bic.w	r2, r3, #4
 80090ba:	4905      	ldr	r1, [pc, #20]	@ (80090d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4313      	orrs	r3, r2
 80090c0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	40030400 	.word	0x40030400

080090d4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80090d8:	4b05      	ldr	r3, [pc, #20]	@ (80090f0 <HAL_ICACHE_Enable+0x1c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a04      	ldr	r2, [pc, #16]	@ (80090f0 <HAL_ICACHE_Enable+0x1c>)
 80090de:	f043 0301 	orr.w	r3, r3, #1
 80090e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	40030400 	.word	0x40030400

080090f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e0bf      	b.n	8009286 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d106      	bne.n	8009120 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7f9 f8a2 	bl	8002264 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	699a      	ldr	r2, [r3, #24]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009136:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6999      	ldr	r1, [r3, #24]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800914c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	430a      	orrs	r2, r1
 800915a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6899      	ldr	r1, [r3, #8]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	4b4a      	ldr	r3, [pc, #296]	@ (8009290 <HAL_LTDC_Init+0x19c>)
 8009168:	400b      	ands	r3, r1
 800916a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	041b      	lsls	r3, r3, #16
 8009172:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6899      	ldr	r1, [r3, #8]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	699a      	ldr	r2, [r3, #24]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	431a      	orrs	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68d9      	ldr	r1, [r3, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	4b3e      	ldr	r3, [pc, #248]	@ (8009290 <HAL_LTDC_Init+0x19c>)
 8009196:	400b      	ands	r3, r1
 8009198:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	041b      	lsls	r3, r3, #16
 80091a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68d9      	ldr	r1, [r3, #12]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a1a      	ldr	r2, [r3, #32]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6919      	ldr	r1, [r3, #16]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	4b33      	ldr	r3, [pc, #204]	@ (8009290 <HAL_LTDC_Init+0x19c>)
 80091c4:	400b      	ands	r3, r1
 80091c6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091cc:	041b      	lsls	r3, r3, #16
 80091ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6919      	ldr	r1, [r3, #16]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	431a      	orrs	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6959      	ldr	r1, [r3, #20]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	4b27      	ldr	r3, [pc, #156]	@ (8009290 <HAL_LTDC_Init+0x19c>)
 80091f2:	400b      	ands	r3, r1
 80091f4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fa:	041b      	lsls	r3, r3, #16
 80091fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6959      	ldr	r1, [r3, #20]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	431a      	orrs	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009224:	041b      	lsls	r3, r3, #16
 8009226:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009236:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800924a:	431a      	orrs	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f042 0206 	orr.w	r2, r2, #6
 8009262:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	f000f800 	.word	0xf000f800

08009294 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f003 0304 	and.w	r3, r3, #4
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d023      	beq.n	80092fe <HAL_LTDC_IRQHandler+0x6a>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01e      	beq.n	80092fe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0204 	bic.w	r2, r2, #4
 80092ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2204      	movs	r2, #4
 80092d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80092de:	f043 0201 	orr.w	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2204      	movs	r2, #4
 80092ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f86f 	bl	80093dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d023      	beq.n	8009350 <HAL_LTDC_IRQHandler+0xbc>
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d01e      	beq.n	8009350 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f022 0202 	bic.w	r2, r2, #2
 8009320:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2202      	movs	r2, #2
 8009328:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009330:	f043 0202 	orr.w	r2, r3, #2
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2204      	movs	r2, #4
 800933e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f846 	bl	80093dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d01b      	beq.n	8009392 <HAL_LTDC_IRQHandler+0xfe>
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	d016      	beq.n	8009392 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0201 	bic.w	r2, r2, #1
 8009372:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2201      	movs	r2, #1
 800937a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f82f 	bl	80093f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f003 0308 	and.w	r3, r3, #8
 8009398:	2b00      	cmp	r3, #0
 800939a:	d01b      	beq.n	80093d4 <HAL_LTDC_IRQHandler+0x140>
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f003 0308 	and.w	r3, r3, #8
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d016      	beq.n	80093d4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 0208 	bic.w	r2, r2, #8
 80093b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2208      	movs	r2, #8
 80093bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f818 	bl	8009404 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80093d4:	bf00      	nop
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009418:	b5b0      	push	{r4, r5, r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800942a:	2b01      	cmp	r3, #1
 800942c:	d101      	bne.n	8009432 <HAL_LTDC_ConfigLayer+0x1a>
 800942e:	2302      	movs	r3, #2
 8009430:	e02c      	b.n	800948c <HAL_LTDC_ConfigLayer+0x74>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2202      	movs	r2, #2
 800943e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2134      	movs	r1, #52	@ 0x34
 8009448:	fb01 f303 	mul.w	r3, r1, r3
 800944c:	4413      	add	r3, r2
 800944e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4614      	mov	r4, r2
 8009456:	461d      	mov	r5, r3
 8009458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800945a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800945c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800945e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	68b9      	ldr	r1, [r7, #8]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 f811 	bl	8009494 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2201      	movs	r2, #1
 8009478:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bdb0      	pop	{r4, r5, r7, pc}

08009494 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009494:	b480      	push	{r7}
 8009496:	b089      	sub	sp, #36	@ 0x24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	0c1b      	lsrs	r3, r3, #16
 80094ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094b0:	4413      	add	r3, r2
 80094b2:	041b      	lsls	r3, r3, #16
 80094b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	01db      	lsls	r3, r3, #7
 80094c0:	4413      	add	r3, r2
 80094c2:	3384      	adds	r3, #132	@ 0x84
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	6812      	ldr	r2, [r2, #0]
 80094ca:	4611      	mov	r1, r2
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	01d2      	lsls	r2, r2, #7
 80094d0:	440a      	add	r2, r1
 80094d2:	3284      	adds	r2, #132	@ 0x84
 80094d4:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80094d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	0c1b      	lsrs	r3, r3, #16
 80094e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80094ea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80094ec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4619      	mov	r1, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	01db      	lsls	r3, r3, #7
 80094f8:	440b      	add	r3, r1
 80094fa:	3384      	adds	r3, #132	@ 0x84
 80094fc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009502:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009512:	4413      	add	r3, r2
 8009514:	041b      	lsls	r3, r3, #16
 8009516:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	01db      	lsls	r3, r3, #7
 8009522:	4413      	add	r3, r2
 8009524:	3384      	adds	r3, #132	@ 0x84
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	6812      	ldr	r2, [r2, #0]
 800952c:	4611      	mov	r1, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	01d2      	lsls	r2, r2, #7
 8009532:	440a      	add	r2, r1
 8009534:	3284      	adds	r2, #132	@ 0x84
 8009536:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800953a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800954a:	4413      	add	r3, r2
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4619      	mov	r1, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	01db      	lsls	r3, r3, #7
 8009558:	440b      	add	r3, r1
 800955a:	3384      	adds	r3, #132	@ 0x84
 800955c:	4619      	mov	r1, r3
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	4313      	orrs	r3, r2
 8009562:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	01db      	lsls	r3, r3, #7
 800956e:	4413      	add	r3, r2
 8009570:	3384      	adds	r3, #132	@ 0x84
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	6812      	ldr	r2, [r2, #0]
 8009578:	4611      	mov	r1, r2
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	01d2      	lsls	r2, r2, #7
 800957e:	440a      	add	r2, r1
 8009580:	3284      	adds	r2, #132	@ 0x84
 8009582:	f023 0307 	bic.w	r3, r3, #7
 8009586:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	01db      	lsls	r3, r3, #7
 8009592:	4413      	add	r3, r2
 8009594:	3384      	adds	r3, #132	@ 0x84
 8009596:	461a      	mov	r2, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80095a4:	021b      	lsls	r3, r3, #8
 80095a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80095ae:	041b      	lsls	r3, r3, #16
 80095b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	061b      	lsls	r3, r3, #24
 80095b8:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095c0:	461a      	mov	r2, r3
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	431a      	orrs	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4619      	mov	r1, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	01db      	lsls	r3, r3, #7
 80095d4:	440b      	add	r3, r1
 80095d6:	3384      	adds	r3, #132	@ 0x84
 80095d8:	4619      	mov	r1, r3
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	4313      	orrs	r3, r2
 80095de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	01db      	lsls	r3, r3, #7
 80095ea:	4413      	add	r3, r2
 80095ec:	3384      	adds	r3, #132	@ 0x84
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	6812      	ldr	r2, [r2, #0]
 80095f4:	4611      	mov	r1, r2
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	01d2      	lsls	r2, r2, #7
 80095fa:	440a      	add	r2, r1
 80095fc:	3284      	adds	r2, #132	@ 0x84
 80095fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009602:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	01db      	lsls	r3, r3, #7
 800960e:	4413      	add	r3, r2
 8009610:	3384      	adds	r3, #132	@ 0x84
 8009612:	461a      	mov	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	01db      	lsls	r3, r3, #7
 8009624:	4413      	add	r3, r2
 8009626:	3384      	adds	r3, #132	@ 0x84
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	6812      	ldr	r2, [r2, #0]
 800962e:	4611      	mov	r1, r2
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	01d2      	lsls	r2, r2, #7
 8009634:	440a      	add	r2, r1
 8009636:	3284      	adds	r2, #132	@ 0x84
 8009638:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800963c:	f023 0307 	bic.w	r3, r3, #7
 8009640:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	69da      	ldr	r2, [r3, #28]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	68f9      	ldr	r1, [r7, #12]
 800964c:	6809      	ldr	r1, [r1, #0]
 800964e:	4608      	mov	r0, r1
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	01c9      	lsls	r1, r1, #7
 8009654:	4401      	add	r1, r0
 8009656:	3184      	adds	r1, #132	@ 0x84
 8009658:	4313      	orrs	r3, r2
 800965a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	01db      	lsls	r3, r3, #7
 8009666:	4413      	add	r3, r2
 8009668:	3384      	adds	r3, #132	@ 0x84
 800966a:	461a      	mov	r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009670:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d102      	bne.n	8009680 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800967a:	2304      	movs	r3, #4
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	e01b      	b.n	80096b8 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d102      	bne.n	800968e <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8009688:	2303      	movs	r3, #3
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	e014      	b.n	80096b8 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	2b04      	cmp	r3, #4
 8009694:	d00b      	beq.n	80096ae <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800969a:	2b02      	cmp	r3, #2
 800969c:	d007      	beq.n	80096ae <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d003      	beq.n	80096ae <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80096aa:	2b07      	cmp	r3, #7
 80096ac:	d102      	bne.n	80096b4 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 80096ae:	2302      	movs	r3, #2
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	e001      	b.n	80096b8 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 80096b4:	2301      	movs	r3, #1
 80096b6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	461a      	mov	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	01db      	lsls	r3, r3, #7
 80096c2:	4413      	add	r3, r2
 80096c4:	3384      	adds	r3, #132	@ 0x84
 80096c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	6812      	ldr	r2, [r2, #0]
 80096cc:	4611      	mov	r1, r2
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	01d2      	lsls	r2, r2, #7
 80096d2:	440a      	add	r2, r1
 80096d4:	3284      	adds	r2, #132	@ 0x84
 80096d6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80096da:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e0:	69fa      	ldr	r2, [r7, #28]
 80096e2:	fb02 f303 	mul.w	r3, r2, r3
 80096e6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	6859      	ldr	r1, [r3, #4]
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	1acb      	subs	r3, r1, r3
 80096f2:	69f9      	ldr	r1, [r7, #28]
 80096f4:	fb01 f303 	mul.w	r3, r1, r3
 80096f8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80096fa:	68f9      	ldr	r1, [r7, #12]
 80096fc:	6809      	ldr	r1, [r1, #0]
 80096fe:	4608      	mov	r0, r1
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	01c9      	lsls	r1, r1, #7
 8009704:	4401      	add	r1, r0
 8009706:	3184      	adds	r1, #132	@ 0x84
 8009708:	4313      	orrs	r3, r2
 800970a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	461a      	mov	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	01db      	lsls	r3, r3, #7
 8009716:	4413      	add	r3, r2
 8009718:	3384      	adds	r3, #132	@ 0x84
 800971a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	4611      	mov	r1, r2
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	01d2      	lsls	r2, r2, #7
 8009726:	440a      	add	r2, r1
 8009728:	3284      	adds	r2, #132	@ 0x84
 800972a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800972e:	f023 0307 	bic.w	r3, r3, #7
 8009732:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	01db      	lsls	r3, r3, #7
 800973e:	4413      	add	r3, r2
 8009740:	3384      	adds	r3, #132	@ 0x84
 8009742:	461a      	mov	r2, r3
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009748:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	01db      	lsls	r3, r3, #7
 8009754:	4413      	add	r3, r2
 8009756:	3384      	adds	r3, #132	@ 0x84
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	6812      	ldr	r2, [r2, #0]
 800975e:	4611      	mov	r1, r2
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	01d2      	lsls	r2, r2, #7
 8009764:	440a      	add	r2, r1
 8009766:	3284      	adds	r2, #132	@ 0x84
 8009768:	f043 0301 	orr.w	r3, r3, #1
 800976c:	6013      	str	r3, [r2, #0]
}
 800976e:	bf00      	nop
 8009770:	3724      	adds	r7, #36	@ 0x24
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b086      	sub	sp, #24
 800977e:	af02      	add	r7, sp, #8
 8009780:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e0fe      	b.n	800998a <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d106      	bne.n	80097a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7f8 fff9 	bl	8002798 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2203      	movs	r2, #3
 80097aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f008 fb29 	bl	8011e0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6818      	ldr	r0, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	7c1a      	ldrb	r2, [r3, #16]
 80097c0:	f88d 2000 	strb.w	r2, [sp]
 80097c4:	3304      	adds	r3, #4
 80097c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097c8:	f008 faf0 	bl	8011dac <USB_CoreInit>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2202      	movs	r2, #2
 80097d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e0d5      	b.n	800998a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2100      	movs	r1, #0
 80097e4:	4618      	mov	r0, r3
 80097e6:	f008 fb21 	bl	8011e2c <USB_SetCurrentMode>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d005      	beq.n	80097fc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2202      	movs	r2, #2
 80097f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e0c6      	b.n	800998a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097fc:	2300      	movs	r3, #0
 80097fe:	73fb      	strb	r3, [r7, #15]
 8009800:	e04a      	b.n	8009898 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009802:	7bfa      	ldrb	r2, [r7, #15]
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	3315      	adds	r3, #21
 8009812:	2201      	movs	r2, #1
 8009814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009816:	7bfa      	ldrb	r2, [r7, #15]
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	3314      	adds	r3, #20
 8009826:	7bfa      	ldrb	r2, [r7, #15]
 8009828:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800982a:	7bfa      	ldrb	r2, [r7, #15]
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	b298      	uxth	r0, r3
 8009830:	6879      	ldr	r1, [r7, #4]
 8009832:	4613      	mov	r3, r2
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	4413      	add	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	440b      	add	r3, r1
 800983c:	332e      	adds	r3, #46	@ 0x2e
 800983e:	4602      	mov	r2, r0
 8009840:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009842:	7bfa      	ldrb	r2, [r7, #15]
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	4613      	mov	r3, r2
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	4413      	add	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	440b      	add	r3, r1
 8009850:	3318      	adds	r3, #24
 8009852:	2200      	movs	r2, #0
 8009854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009856:	7bfa      	ldrb	r2, [r7, #15]
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	4613      	mov	r3, r2
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	440b      	add	r3, r1
 8009864:	331c      	adds	r3, #28
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800986a:	7bfa      	ldrb	r2, [r7, #15]
 800986c:	6879      	ldr	r1, [r7, #4]
 800986e:	4613      	mov	r3, r2
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	440b      	add	r3, r1
 8009878:	3320      	adds	r3, #32
 800987a:	2200      	movs	r2, #0
 800987c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800987e:	7bfa      	ldrb	r2, [r7, #15]
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	4613      	mov	r3, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	440b      	add	r3, r1
 800988c:	3324      	adds	r3, #36	@ 0x24
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	3301      	adds	r3, #1
 8009896:	73fb      	strb	r3, [r7, #15]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	791b      	ldrb	r3, [r3, #4]
 800989c:	7bfa      	ldrb	r2, [r7, #15]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d3af      	bcc.n	8009802 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
 80098a6:	e044      	b.n	8009932 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80098a8:	7bfa      	ldrb	r2, [r7, #15]
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4613      	mov	r3, r2
 80098ae:	00db      	lsls	r3, r3, #3
 80098b0:	4413      	add	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80098ba:	2200      	movs	r2, #0
 80098bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80098be:	7bfa      	ldrb	r2, [r7, #15]
 80098c0:	6879      	ldr	r1, [r7, #4]
 80098c2:	4613      	mov	r3, r2
 80098c4:	00db      	lsls	r3, r3, #3
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	440b      	add	r3, r1
 80098cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80098d0:	7bfa      	ldrb	r2, [r7, #15]
 80098d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80098d4:	7bfa      	ldrb	r2, [r7, #15]
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	4613      	mov	r3, r2
 80098da:	00db      	lsls	r3, r3, #3
 80098dc:	4413      	add	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	440b      	add	r3, r1
 80098e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80098e6:	2200      	movs	r2, #0
 80098e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80098ea:	7bfa      	ldrb	r2, [r7, #15]
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	440b      	add	r3, r1
 80098f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009900:	7bfa      	ldrb	r2, [r7, #15]
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009916:	7bfa      	ldrb	r2, [r7, #15]
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	4613      	mov	r3, r2
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	4413      	add	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	440b      	add	r3, r1
 8009924:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009928:	2200      	movs	r2, #0
 800992a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	3301      	adds	r3, #1
 8009930:	73fb      	strb	r3, [r7, #15]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	791b      	ldrb	r3, [r3, #4]
 8009936:	7bfa      	ldrb	r2, [r7, #15]
 8009938:	429a      	cmp	r2, r3
 800993a:	d3b5      	bcc.n	80098a8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	7c1a      	ldrb	r2, [r3, #16]
 8009944:	f88d 2000 	strb.w	r2, [sp]
 8009948:	3304      	adds	r3, #4
 800994a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800994c:	f008 faba 	bl	8011ec4 <USB_DevInit>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d005      	beq.n	8009962 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2202      	movs	r2, #2
 800995a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e013      	b.n	800998a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	7b1b      	ldrb	r3, [r3, #12]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d102      	bne.n	800997e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f80a 	bl	8009992 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4618      	mov	r0, r3
 8009984:	f008 fc87 	bl	8012296 <USB_DevDisconnect>

  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009992:	b480      	push	{r7}
 8009994:	b085      	sub	sp, #20
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099c4:	f043 0303 	orr.w	r3, r3, #3
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
	...

080099dc <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80099e0:	4b05      	ldr	r3, [pc, #20]	@ (80099f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80099e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e4:	4a04      	ldr	r2, [pc, #16]	@ (80099f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80099e6:	f043 0301 	orr.w	r3, r3, #1
 80099ea:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80099ec:	bf00      	nop
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	46020800 	.word	0x46020800

080099fc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009a04:	4b39      	ldr	r3, [pc, #228]	@ (8009aec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009a0c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d10b      	bne.n	8009a2e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a1c:	d905      	bls.n	8009a2a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009a1e:	4b33      	ldr	r3, [pc, #204]	@ (8009aec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	4a32      	ldr	r2, [pc, #200]	@ (8009aec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a28:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	e057      	b.n	8009ade <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a34:	d90a      	bls.n	8009a4c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8009a36:	4b2d      	ldr	r3, [pc, #180]	@ (8009aec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	4a2a      	ldr	r2, [pc, #168]	@ (8009aec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a48:	60d3      	str	r3, [r2, #12]
 8009a4a:	e007      	b.n	8009a5c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009a4c:	4b27      	ldr	r3, [pc, #156]	@ (8009aec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009a54:	4925      	ldr	r1, [pc, #148]	@ (8009aec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009a5c:	4b24      	ldr	r3, [pc, #144]	@ (8009af0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a24      	ldr	r2, [pc, #144]	@ (8009af4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009a62:	fba2 2303 	umull	r2, r3, r2, r3
 8009a66:	099b      	lsrs	r3, r3, #6
 8009a68:	2232      	movs	r2, #50	@ 0x32
 8009a6a:	fb02 f303 	mul.w	r3, r2, r3
 8009a6e:	4a21      	ldr	r2, [pc, #132]	@ (8009af4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009a70:	fba2 2303 	umull	r2, r3, r2, r3
 8009a74:	099b      	lsrs	r3, r3, #6
 8009a76:	3301      	adds	r3, #1
 8009a78:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009a7a:	e002      	b.n	8009a82 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009a82:	4b1a      	ldr	r3, [pc, #104]	@ (8009aec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d102      	bne.n	8009a94 <HAL_PWREx_ControlVoltageScaling+0x98>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f3      	bne.n	8009a7c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d01b      	beq.n	8009ad2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009a9a:	4b15      	ldr	r3, [pc, #84]	@ (8009af0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a15      	ldr	r2, [pc, #84]	@ (8009af4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa4:	099b      	lsrs	r3, r3, #6
 8009aa6:	2232      	movs	r2, #50	@ 0x32
 8009aa8:	fb02 f303 	mul.w	r3, r2, r3
 8009aac:	4a11      	ldr	r2, [pc, #68]	@ (8009af4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009aae:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab2:	099b      	lsrs	r3, r3, #6
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009ab8:	e002      	b.n	8009ac0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8009aec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d102      	bne.n	8009ad2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1f3      	bne.n	8009aba <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e000      	b.n	8009ade <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	46020800 	.word	0x46020800
 8009af0:	20000024 	.word	0x20000024
 8009af4:	10624dd3 	.word	0x10624dd3

08009af8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009afc:	4b04      	ldr	r3, [pc, #16]	@ (8009b10 <HAL_PWREx_GetVoltageRange+0x18>)
 8009afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	46020800 	.word	0x46020800

08009b14 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009b1c:	4b22      	ldr	r3, [pc, #136]	@ (8009ba8 <HAL_PWREx_ConfigSupply+0x94>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a22      	ldr	r2, [pc, #136]	@ (8009bac <HAL_PWREx_ConfigSupply+0x98>)
 8009b22:	fba2 2303 	umull	r2, r3, r2, r3
 8009b26:	099b      	lsrs	r3, r3, #6
 8009b28:	2232      	movs	r2, #50	@ 0x32
 8009b2a:	fb02 f303 	mul.w	r3, r2, r3
 8009b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bac <HAL_PWREx_ConfigSupply+0x98>)
 8009b30:	fba2 2303 	umull	r2, r3, r2, r3
 8009b34:	099b      	lsrs	r3, r3, #6
 8009b36:	3301      	adds	r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d113      	bne.n	8009b68 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009b40:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb0 <HAL_PWREx_ConfigSupply+0x9c>)
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	4a1a      	ldr	r2, [pc, #104]	@ (8009bb0 <HAL_PWREx_ConfigSupply+0x9c>)
 8009b46:	f023 0302 	bic.w	r3, r3, #2
 8009b4a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009b4c:	e002      	b.n	8009b54 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009b54:	4b16      	ldr	r3, [pc, #88]	@ (8009bb0 <HAL_PWREx_ConfigSupply+0x9c>)
 8009b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d116      	bne.n	8009b8e <HAL_PWREx_ConfigSupply+0x7a>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1f3      	bne.n	8009b4e <HAL_PWREx_ConfigSupply+0x3a>
 8009b66:	e012      	b.n	8009b8e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009b68:	4b11      	ldr	r3, [pc, #68]	@ (8009bb0 <HAL_PWREx_ConfigSupply+0x9c>)
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	4a10      	ldr	r2, [pc, #64]	@ (8009bb0 <HAL_PWREx_ConfigSupply+0x9c>)
 8009b6e:	f043 0302 	orr.w	r3, r3, #2
 8009b72:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009b74:	e002      	b.n	8009b7c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8009bb0 <HAL_PWREx_ConfigSupply+0x9c>)
 8009b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <HAL_PWREx_ConfigSupply+0x7a>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1f3      	bne.n	8009b76 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e000      	b.n	8009b9a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	20000024 	.word	0x20000024
 8009bac:	10624dd3 	.word	0x10624dd3
 8009bb0:	46020800 	.word	0x46020800

08009bb4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009bb8:	4b05      	ldr	r3, [pc, #20]	@ (8009bd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	4a04      	ldr	r2, [pc, #16]	@ (8009bd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bc2:	6113      	str	r3, [r2, #16]
}
 8009bc4:	bf00      	nop
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	46020800 	.word	0x46020800

08009bd4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009bd8:	4b05      	ldr	r3, [pc, #20]	@ (8009bf0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	4a04      	ldr	r2, [pc, #16]	@ (8009bf0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009bde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009be2:	6113      	str	r3, [r2, #16]
}
 8009be4:	bf00      	nop
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	46020800 	.word	0x46020800

08009bf4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009bf8:	4b05      	ldr	r3, [pc, #20]	@ (8009c10 <HAL_PWREx_EnableVddA+0x1c>)
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	4a04      	ldr	r2, [pc, #16]	@ (8009c10 <HAL_PWREx_EnableVddA+0x1c>)
 8009bfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c02:	6113      	str	r3, [r2, #16]
}
 8009c04:	bf00      	nop
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	46020800 	.word	0x46020800

08009c14 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8009c1a:	f7ff ff6d 	bl	8009af8 <HAL_PWREx_GetVoltageRange>
 8009c1e:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c26:	d003      	beq.n	8009c30 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c2e:	d107      	bne.n	8009c40 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8009c30:	4b06      	ldr	r3, [pc, #24]	@ (8009c4c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	4a05      	ldr	r2, [pc, #20]	@ (8009c4c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009c36:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8009c3a:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e000      	b.n	8009c42 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	46020800 	.word	0x46020800

08009c50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08e      	sub	sp, #56	@ 0x38
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	f000 bec8 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c6a:	4b99      	ldr	r3, [pc, #612]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009c6c:	69db      	ldr	r3, [r3, #28]
 8009c6e:	f003 030c 	and.w	r3, r3, #12
 8009c72:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c74:	4b96      	ldr	r3, [pc, #600]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c78:	f003 0303 	and.w	r3, r3, #3
 8009c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0310 	and.w	r3, r3, #16
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 816c 	beq.w	8009f64 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d007      	beq.n	8009ca2 <HAL_RCC_OscConfig+0x52>
 8009c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c94:	2b0c      	cmp	r3, #12
 8009c96:	f040 80de 	bne.w	8009e56 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	f040 80da 	bne.w	8009e56 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d102      	bne.n	8009cb0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	f000 bea5 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009cb4:	4b86      	ldr	r3, [pc, #536]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d004      	beq.n	8009cca <HAL_RCC_OscConfig+0x7a>
 8009cc0:	4b83      	ldr	r3, [pc, #524]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009cc8:	e005      	b.n	8009cd6 <HAL_RCC_OscConfig+0x86>
 8009cca:	4b81      	ldr	r3, [pc, #516]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cd0:	041b      	lsls	r3, r3, #16
 8009cd2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d255      	bcs.n	8009d86 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f001 fa11 	bl	800b10c <RCC_SetFlashLatencyFromMSIRange>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f000 be82 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009cf6:	4b76      	ldr	r3, [pc, #472]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	4a75      	ldr	r2, [pc, #468]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009cfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d00:	6093      	str	r3, [r2, #8]
 8009d02:	4b73      	ldr	r3, [pc, #460]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0e:	4970      	ldr	r1, [pc, #448]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d18:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009d1c:	d309      	bcc.n	8009d32 <HAL_RCC_OscConfig+0xe2>
 8009d1e:	4b6c      	ldr	r3, [pc, #432]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f023 021f 	bic.w	r2, r3, #31
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	4969      	ldr	r1, [pc, #420]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60cb      	str	r3, [r1, #12]
 8009d30:	e07e      	b.n	8009e30 <HAL_RCC_OscConfig+0x1e0>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da0a      	bge.n	8009d50 <HAL_RCC_OscConfig+0x100>
 8009d3a:	4b65      	ldr	r3, [pc, #404]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	015b      	lsls	r3, r3, #5
 8009d48:	4961      	ldr	r1, [pc, #388]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60cb      	str	r3, [r1, #12]
 8009d4e:	e06f      	b.n	8009e30 <HAL_RCC_OscConfig+0x1e0>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d58:	d30a      	bcc.n	8009d70 <HAL_RCC_OscConfig+0x120>
 8009d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	029b      	lsls	r3, r3, #10
 8009d68:	4959      	ldr	r1, [pc, #356]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60cb      	str	r3, [r1, #12]
 8009d6e:	e05f      	b.n	8009e30 <HAL_RCC_OscConfig+0x1e0>
 8009d70:	4b57      	ldr	r3, [pc, #348]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	03db      	lsls	r3, r3, #15
 8009d7e:	4954      	ldr	r1, [pc, #336]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	60cb      	str	r3, [r1, #12]
 8009d84:	e054      	b.n	8009e30 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009d86:	4b52      	ldr	r3, [pc, #328]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	4a51      	ldr	r2, [pc, #324]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d90:	6093      	str	r3, [r2, #8]
 8009d92:	4b4f      	ldr	r3, [pc, #316]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9e:	494c      	ldr	r1, [pc, #304]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009dac:	d309      	bcc.n	8009dc2 <HAL_RCC_OscConfig+0x172>
 8009dae:	4b48      	ldr	r3, [pc, #288]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f023 021f 	bic.w	r2, r3, #31
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	4945      	ldr	r1, [pc, #276]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	60cb      	str	r3, [r1, #12]
 8009dc0:	e028      	b.n	8009e14 <HAL_RCC_OscConfig+0x1c4>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	da0a      	bge.n	8009de0 <HAL_RCC_OscConfig+0x190>
 8009dca:	4b41      	ldr	r3, [pc, #260]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	015b      	lsls	r3, r3, #5
 8009dd8:	493d      	ldr	r1, [pc, #244]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60cb      	str	r3, [r1, #12]
 8009dde:	e019      	b.n	8009e14 <HAL_RCC_OscConfig+0x1c4>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009de8:	d30a      	bcc.n	8009e00 <HAL_RCC_OscConfig+0x1b0>
 8009dea:	4b39      	ldr	r3, [pc, #228]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	029b      	lsls	r3, r3, #10
 8009df8:	4935      	ldr	r1, [pc, #212]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60cb      	str	r3, [r1, #12]
 8009dfe:	e009      	b.n	8009e14 <HAL_RCC_OscConfig+0x1c4>
 8009e00:	4b33      	ldr	r3, [pc, #204]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	03db      	lsls	r3, r3, #15
 8009e0e:	4930      	ldr	r1, [pc, #192]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10a      	bne.n	8009e30 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f001 f974 	bl	800b10c <RCC_SetFlashLatencyFromMSIRange>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d002      	beq.n	8009e30 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	f000 bde5 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009e30:	f001 f8de 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009e34:	4b27      	ldr	r3, [pc, #156]	@ (8009ed4 <HAL_RCC_OscConfig+0x284>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7f8 ff01 	bl	8002c40 <HAL_InitTick>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 808a 	beq.w	8009f62 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e52:	f000 bdd2 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d066      	beq.n	8009f2c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a1b      	ldr	r2, [pc, #108]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009e64:	f043 0301 	orr.w	r3, r3, #1
 8009e68:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e6a:	f7f9 f8a9 	bl	8002fc0 <HAL_GetTick>
 8009e6e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009e70:	e009      	b.n	8009e86 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e72:	f7f9 f8a5 	bl	8002fc0 <HAL_GetTick>
 8009e76:	4602      	mov	r2, r0
 8009e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d902      	bls.n	8009e86 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009e80:	2303      	movs	r3, #3
 8009e82:	f000 bdba 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009e86:	4b12      	ldr	r3, [pc, #72]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0ef      	beq.n	8009e72 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009e92:	4b0f      	ldr	r3, [pc, #60]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	4a0e      	ldr	r2, [pc, #56]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009e98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009e9c:	6093      	str	r3, [r2, #8]
 8009e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eaa:	4909      	ldr	r1, [pc, #36]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009eb8:	d30e      	bcc.n	8009ed8 <HAL_RCC_OscConfig+0x288>
 8009eba:	4b05      	ldr	r3, [pc, #20]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	f023 021f 	bic.w	r2, r3, #31
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	4902      	ldr	r1, [pc, #8]	@ (8009ed0 <HAL_RCC_OscConfig+0x280>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	60cb      	str	r3, [r1, #12]
 8009ecc:	e04a      	b.n	8009f64 <HAL_RCC_OscConfig+0x314>
 8009ece:	bf00      	nop
 8009ed0:	46020c00 	.word	0x46020c00
 8009ed4:	20000028 	.word	0x20000028
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	da0a      	bge.n	8009ef6 <HAL_RCC_OscConfig+0x2a6>
 8009ee0:	4b98      	ldr	r3, [pc, #608]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	015b      	lsls	r3, r3, #5
 8009eee:	4995      	ldr	r1, [pc, #596]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	60cb      	str	r3, [r1, #12]
 8009ef4:	e036      	b.n	8009f64 <HAL_RCC_OscConfig+0x314>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009efe:	d30a      	bcc.n	8009f16 <HAL_RCC_OscConfig+0x2c6>
 8009f00:	4b90      	ldr	r3, [pc, #576]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	029b      	lsls	r3, r3, #10
 8009f0e:	498d      	ldr	r1, [pc, #564]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60cb      	str	r3, [r1, #12]
 8009f14:	e026      	b.n	8009f64 <HAL_RCC_OscConfig+0x314>
 8009f16:	4b8b      	ldr	r3, [pc, #556]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	03db      	lsls	r3, r3, #15
 8009f24:	4987      	ldr	r1, [pc, #540]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	60cb      	str	r3, [r1, #12]
 8009f2a:	e01b      	b.n	8009f64 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009f2c:	4b85      	ldr	r3, [pc, #532]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a84      	ldr	r2, [pc, #528]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009f32:	f023 0301 	bic.w	r3, r3, #1
 8009f36:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009f38:	f7f9 f842 	bl	8002fc0 <HAL_GetTick>
 8009f3c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009f3e:	e009      	b.n	8009f54 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009f40:	f7f9 f83e 	bl	8002fc0 <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d902      	bls.n	8009f54 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	f000 bd53 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009f54:	4b7b      	ldr	r3, [pc, #492]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1ef      	bne.n	8009f40 <HAL_RCC_OscConfig+0x2f0>
 8009f60:	e000      	b.n	8009f64 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009f62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 808b 	beq.w	800a088 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f74:	2b08      	cmp	r3, #8
 8009f76:	d005      	beq.n	8009f84 <HAL_RCC_OscConfig+0x334>
 8009f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7a:	2b0c      	cmp	r3, #12
 8009f7c:	d109      	bne.n	8009f92 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f80:	2b03      	cmp	r3, #3
 8009f82:	d106      	bne.n	8009f92 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d17d      	bne.n	800a088 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f000 bd34 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f9a:	d106      	bne.n	8009faa <HAL_RCC_OscConfig+0x35a>
 8009f9c:	4b69      	ldr	r3, [pc, #420]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a68      	ldr	r2, [pc, #416]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	e041      	b.n	800a02e <HAL_RCC_OscConfig+0x3de>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fb2:	d112      	bne.n	8009fda <HAL_RCC_OscConfig+0x38a>
 8009fb4:	4b63      	ldr	r3, [pc, #396]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a62      	ldr	r2, [pc, #392]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009fba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	4b60      	ldr	r3, [pc, #384]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a5f      	ldr	r2, [pc, #380]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009fc6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	4b5d      	ldr	r3, [pc, #372]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a5c      	ldr	r2, [pc, #368]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	e029      	b.n	800a02e <HAL_RCC_OscConfig+0x3de>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009fe2:	d112      	bne.n	800a00a <HAL_RCC_OscConfig+0x3ba>
 8009fe4:	4b57      	ldr	r3, [pc, #348]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a56      	ldr	r2, [pc, #344]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009fea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	4b54      	ldr	r3, [pc, #336]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a53      	ldr	r2, [pc, #332]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ffa:	6013      	str	r3, [r2, #0]
 8009ffc:	4b51      	ldr	r3, [pc, #324]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a50      	ldr	r2, [pc, #320]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a006:	6013      	str	r3, [r2, #0]
 800a008:	e011      	b.n	800a02e <HAL_RCC_OscConfig+0x3de>
 800a00a:	4b4e      	ldr	r3, [pc, #312]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a4d      	ldr	r2, [pc, #308]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	4b4b      	ldr	r3, [pc, #300]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a4a      	ldr	r2, [pc, #296]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a01c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	4b48      	ldr	r3, [pc, #288]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a47      	ldr	r2, [pc, #284]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a028:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a02c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d014      	beq.n	800a060 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800a036:	f7f8 ffc3 	bl	8002fc0 <HAL_GetTick>
 800a03a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a03c:	e009      	b.n	800a052 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a03e:	f7f8 ffbf 	bl	8002fc0 <HAL_GetTick>
 800a042:	4602      	mov	r2, r0
 800a044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	2b64      	cmp	r3, #100	@ 0x64
 800a04a:	d902      	bls.n	800a052 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800a04c:	2303      	movs	r3, #3
 800a04e:	f000 bcd4 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a052:	4b3c      	ldr	r3, [pc, #240]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0ef      	beq.n	800a03e <HAL_RCC_OscConfig+0x3ee>
 800a05e:	e013      	b.n	800a088 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800a060:	f7f8 ffae 	bl	8002fc0 <HAL_GetTick>
 800a064:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a066:	e009      	b.n	800a07c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a068:	f7f8 ffaa 	bl	8002fc0 <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	2b64      	cmp	r3, #100	@ 0x64
 800a074:	d902      	bls.n	800a07c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	f000 bcbf 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a07c:	4b31      	ldr	r3, [pc, #196]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1ef      	bne.n	800a068 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 0302 	and.w	r3, r3, #2
 800a090:	2b00      	cmp	r3, #0
 800a092:	d05f      	beq.n	800a154 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a096:	2b04      	cmp	r3, #4
 800a098:	d005      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x456>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09c:	2b0c      	cmp	r3, #12
 800a09e:	d114      	bne.n	800a0ca <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d111      	bne.n	800a0ca <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d102      	bne.n	800a0b4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	f000 bca3 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a0b4:	4b23      	ldr	r3, [pc, #140]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	041b      	lsls	r3, r3, #16
 800a0c2:	4920      	ldr	r1, [pc, #128]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a0c8:	e044      	b.n	800a154 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d024      	beq.n	800a11c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800a0d2:	4b1c      	ldr	r3, [pc, #112]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a1b      	ldr	r2, [pc, #108]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a0d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a0de:	f7f8 ff6f 	bl	8002fc0 <HAL_GetTick>
 800a0e2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0e4:	e009      	b.n	800a0fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0e6:	f7f8 ff6b 	bl	8002fc0 <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d902      	bls.n	800a0fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	f000 bc80 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0fa:	4b12      	ldr	r3, [pc, #72]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0ef      	beq.n	800a0e6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a106:	4b0f      	ldr	r3, [pc, #60]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	041b      	lsls	r3, r3, #16
 800a114:	490b      	ldr	r1, [pc, #44]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a116:	4313      	orrs	r3, r2
 800a118:	610b      	str	r3, [r1, #16]
 800a11a:	e01b      	b.n	800a154 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800a11c:	4b09      	ldr	r3, [pc, #36]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a08      	ldr	r2, [pc, #32]	@ (800a144 <HAL_RCC_OscConfig+0x4f4>)
 800a122:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a126:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a128:	f7f8 ff4a 	bl	8002fc0 <HAL_GetTick>
 800a12c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a12e:	e00b      	b.n	800a148 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a130:	f7f8 ff46 	bl	8002fc0 <HAL_GetTick>
 800a134:	4602      	mov	r2, r0
 800a136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d904      	bls.n	800a148 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	f000 bc5b 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
 800a144:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a148:	4baf      	ldr	r3, [pc, #700]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1ed      	bne.n	800a130 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0308 	and.w	r3, r3, #8
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 80c8 	beq.w	800a2f2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a162:	2300      	movs	r3, #0
 800a164:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a168:	4ba7      	ldr	r3, [pc, #668]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a16a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a16e:	f003 0304 	and.w	r3, r3, #4
 800a172:	2b00      	cmp	r3, #0
 800a174:	d111      	bne.n	800a19a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a176:	4ba4      	ldr	r3, [pc, #656]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a17c:	4aa2      	ldr	r2, [pc, #648]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a17e:	f043 0304 	orr.w	r3, r3, #4
 800a182:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a186:	4ba0      	ldr	r3, [pc, #640]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	617b      	str	r3, [r7, #20]
 800a192:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a194:	2301      	movs	r3, #1
 800a196:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a19a:	4b9c      	ldr	r3, [pc, #624]	@ (800a40c <HAL_RCC_OscConfig+0x7bc>)
 800a19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d119      	bne.n	800a1da <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a1a6:	4b99      	ldr	r3, [pc, #612]	@ (800a40c <HAL_RCC_OscConfig+0x7bc>)
 800a1a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1aa:	4a98      	ldr	r2, [pc, #608]	@ (800a40c <HAL_RCC_OscConfig+0x7bc>)
 800a1ac:	f043 0301 	orr.w	r3, r3, #1
 800a1b0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1b2:	f7f8 ff05 	bl	8002fc0 <HAL_GetTick>
 800a1b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a1b8:	e009      	b.n	800a1ce <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1ba:	f7f8 ff01 	bl	8002fc0 <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d902      	bls.n	800a1ce <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	f000 bc16 	b.w	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a1ce:	4b8f      	ldr	r3, [pc, #572]	@ (800a40c <HAL_RCC_OscConfig+0x7bc>)
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0ef      	beq.n	800a1ba <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d05f      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a1e2:	4b89      	ldr	r3, [pc, #548]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a1e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1e8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d037      	beq.n	800a268 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d006      	beq.n	800a210 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e3f4      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a210:	6a3b      	ldr	r3, [r7, #32]
 800a212:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d01b      	beq.n	800a252 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800a21a:	4b7b      	ldr	r3, [pc, #492]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a21c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a220:	4a79      	ldr	r2, [pc, #484]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a222:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a226:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800a22a:	f7f8 fec9 	bl	8002fc0 <HAL_GetTick>
 800a22e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a230:	e008      	b.n	800a244 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a232:	f7f8 fec5 	bl	8002fc0 <HAL_GetTick>
 800a236:	4602      	mov	r2, r0
 800a238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	2b05      	cmp	r3, #5
 800a23e:	d901      	bls.n	800a244 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800a240:	2303      	movs	r3, #3
 800a242:	e3da      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a244:	4b70      	ldr	r3, [pc, #448]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a24a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1ef      	bne.n	800a232 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a252:	4b6d      	ldr	r3, [pc, #436]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a258:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	4969      	ldr	r1, [pc, #420]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a262:	4313      	orrs	r3, r2
 800a264:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a268:	4b67      	ldr	r3, [pc, #412]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a26a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a26e:	4a66      	ldr	r2, [pc, #408]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a270:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a274:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a278:	f7f8 fea2 	bl	8002fc0 <HAL_GetTick>
 800a27c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a27e:	e008      	b.n	800a292 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a280:	f7f8 fe9e 	bl	8002fc0 <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	2b05      	cmp	r3, #5
 800a28c:	d901      	bls.n	800a292 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	e3b3      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a292:	4b5d      	ldr	r3, [pc, #372]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0ef      	beq.n	800a280 <HAL_RCC_OscConfig+0x630>
 800a2a0:	e01b      	b.n	800a2da <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a2a2:	4b59      	ldr	r3, [pc, #356]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a2a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2a8:	4a57      	ldr	r2, [pc, #348]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a2aa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a2ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a2b2:	f7f8 fe85 	bl	8002fc0 <HAL_GetTick>
 800a2b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a2b8:	e008      	b.n	800a2cc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2ba:	f7f8 fe81 	bl	8002fc0 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	2b05      	cmp	r3, #5
 800a2c6:	d901      	bls.n	800a2cc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e396      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a2cc:	4b4e      	ldr	r3, [pc, #312]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a2ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1ef      	bne.n	800a2ba <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d107      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2e2:	4b49      	ldr	r3, [pc, #292]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a2e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2e8:	4a47      	ldr	r2, [pc, #284]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a2ea:	f023 0304 	bic.w	r3, r3, #4
 800a2ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 0304 	and.w	r3, r3, #4
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 8111 	beq.w	800a522 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a300:	2300      	movs	r3, #0
 800a302:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a306:	4b40      	ldr	r3, [pc, #256]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a30c:	f003 0304 	and.w	r3, r3, #4
 800a310:	2b00      	cmp	r3, #0
 800a312:	d111      	bne.n	800a338 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a314:	4b3c      	ldr	r3, [pc, #240]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a31a:	4a3b      	ldr	r2, [pc, #236]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a31c:	f043 0304 	orr.w	r3, r3, #4
 800a320:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a324:	4b38      	ldr	r3, [pc, #224]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	613b      	str	r3, [r7, #16]
 800a330:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a332:	2301      	movs	r3, #1
 800a334:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a338:	4b34      	ldr	r3, [pc, #208]	@ (800a40c <HAL_RCC_OscConfig+0x7bc>)
 800a33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	2b00      	cmp	r3, #0
 800a342:	d118      	bne.n	800a376 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a344:	4b31      	ldr	r3, [pc, #196]	@ (800a40c <HAL_RCC_OscConfig+0x7bc>)
 800a346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a348:	4a30      	ldr	r2, [pc, #192]	@ (800a40c <HAL_RCC_OscConfig+0x7bc>)
 800a34a:	f043 0301 	orr.w	r3, r3, #1
 800a34e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a350:	f7f8 fe36 	bl	8002fc0 <HAL_GetTick>
 800a354:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a356:	e008      	b.n	800a36a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a358:	f7f8 fe32 	bl	8002fc0 <HAL_GetTick>
 800a35c:	4602      	mov	r2, r0
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	2b02      	cmp	r3, #2
 800a364:	d901      	bls.n	800a36a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e347      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a36a:	4b28      	ldr	r3, [pc, #160]	@ (800a40c <HAL_RCC_OscConfig+0x7bc>)
 800a36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0f0      	beq.n	800a358 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d01f      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f003 0304 	and.w	r3, r3, #4
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d010      	beq.n	800a3b0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a38e:	4b1e      	ldr	r3, [pc, #120]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a394:	4a1c      	ldr	r2, [pc, #112]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a396:	f043 0304 	orr.w	r3, r3, #4
 800a39a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a39e:	4b1a      	ldr	r3, [pc, #104]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a3a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3a4:	4a18      	ldr	r2, [pc, #96]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a3a6:	f043 0301 	orr.w	r3, r3, #1
 800a3aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a3ae:	e018      	b.n	800a3e2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a3b0:	4b15      	ldr	r3, [pc, #84]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a3b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3b6:	4a14      	ldr	r2, [pc, #80]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a3b8:	f043 0301 	orr.w	r3, r3, #1
 800a3bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a3c0:	e00f      	b.n	800a3e2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a3c2:	4b11      	ldr	r3, [pc, #68]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a3c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3c8:	4a0f      	ldr	r2, [pc, #60]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a3ca:	f023 0301 	bic.w	r3, r3, #1
 800a3ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a3d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3d8:	4a0b      	ldr	r2, [pc, #44]	@ (800a408 <HAL_RCC_OscConfig+0x7b8>)
 800a3da:	f023 0304 	bic.w	r3, r3, #4
 800a3de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d057      	beq.n	800a49a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a3ea:	f7f8 fde9 	bl	8002fc0 <HAL_GetTick>
 800a3ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3f0:	e00e      	b.n	800a410 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3f2:	f7f8 fde5 	bl	8002fc0 <HAL_GetTick>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a400:	4293      	cmp	r3, r2
 800a402:	d905      	bls.n	800a410 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e2f8      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
 800a408:	46020c00 	.word	0x46020c00
 800a40c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a410:	4b9c      	ldr	r3, [pc, #624]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a416:	f003 0302 	and.w	r3, r3, #2
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d0e9      	beq.n	800a3f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a426:	2b00      	cmp	r3, #0
 800a428:	d01b      	beq.n	800a462 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a42a:	4b96      	ldr	r3, [pc, #600]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a42c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a430:	4a94      	ldr	r2, [pc, #592]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a436:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a43a:	e00a      	b.n	800a452 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a43c:	f7f8 fdc0 	bl	8002fc0 <HAL_GetTick>
 800a440:	4602      	mov	r2, r0
 800a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d901      	bls.n	800a452 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e2d3      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a452:	4b8c      	ldr	r3, [pc, #560]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0ed      	beq.n	800a43c <HAL_RCC_OscConfig+0x7ec>
 800a460:	e053      	b.n	800a50a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a462:	4b88      	ldr	r3, [pc, #544]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a468:	4a86      	ldr	r2, [pc, #536]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a46a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a46e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a472:	e00a      	b.n	800a48a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a474:	f7f8 fda4 	bl	8002fc0 <HAL_GetTick>
 800a478:	4602      	mov	r2, r0
 800a47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a482:	4293      	cmp	r3, r2
 800a484:	d901      	bls.n	800a48a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e2b7      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a48a:	4b7e      	ldr	r3, [pc, #504]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a48c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1ed      	bne.n	800a474 <HAL_RCC_OscConfig+0x824>
 800a498:	e037      	b.n	800a50a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a49a:	f7f8 fd91 	bl	8002fc0 <HAL_GetTick>
 800a49e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a4a0:	e00a      	b.n	800a4b8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4a2:	f7f8 fd8d 	bl	8002fc0 <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d901      	bls.n	800a4b8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e2a0      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a4b8:	4b72      	ldr	r3, [pc, #456]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a4ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1ed      	bne.n	800a4a2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a4c6:	4b6f      	ldr	r3, [pc, #444]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a4c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01a      	beq.n	800a50a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a4d4:	4b6b      	ldr	r3, [pc, #428]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a4d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4da:	4a6a      	ldr	r2, [pc, #424]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a4dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a4e4:	e00a      	b.n	800a4fc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4e6:	f7f8 fd6b 	bl	8002fc0 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d901      	bls.n	800a4fc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e27e      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a4fc:	4b61      	ldr	r3, [pc, #388]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a4fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1ed      	bne.n	800a4e6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a50a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d107      	bne.n	800a522 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a512:	4b5c      	ldr	r3, [pc, #368]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a518:	4a5a      	ldr	r2, [pc, #360]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a51a:	f023 0304 	bic.w	r3, r3, #4
 800a51e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d036      	beq.n	800a59c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a532:	2b00      	cmp	r3, #0
 800a534:	d019      	beq.n	800a56a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a536:	4b53      	ldr	r3, [pc, #332]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a52      	ldr	r2, [pc, #328]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a53c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a540:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a542:	f7f8 fd3d 	bl	8002fc0 <HAL_GetTick>
 800a546:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a548:	e008      	b.n	800a55c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a54a:	f7f8 fd39 	bl	8002fc0 <HAL_GetTick>
 800a54e:	4602      	mov	r2, r0
 800a550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	2b02      	cmp	r3, #2
 800a556:	d901      	bls.n	800a55c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a558:	2303      	movs	r3, #3
 800a55a:	e24e      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a55c:	4b49      	ldr	r3, [pc, #292]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0f0      	beq.n	800a54a <HAL_RCC_OscConfig+0x8fa>
 800a568:	e018      	b.n	800a59c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a56a:	4b46      	ldr	r3, [pc, #280]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a45      	ldr	r2, [pc, #276]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a574:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a576:	f7f8 fd23 	bl	8002fc0 <HAL_GetTick>
 800a57a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a57c:	e008      	b.n	800a590 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a57e:	f7f8 fd1f 	bl	8002fc0 <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d901      	bls.n	800a590 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e234      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a590:	4b3c      	ldr	r3, [pc, #240]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1f0      	bne.n	800a57e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d036      	beq.n	800a616 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d019      	beq.n	800a5e4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a5b0:	4b34      	ldr	r3, [pc, #208]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a33      	ldr	r2, [pc, #204]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a5b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a5ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a5bc:	f7f8 fd00 	bl	8002fc0 <HAL_GetTick>
 800a5c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a5c2:	e008      	b.n	800a5d6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a5c4:	f7f8 fcfc 	bl	8002fc0 <HAL_GetTick>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d901      	bls.n	800a5d6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	e211      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a5d6:	4b2b      	ldr	r3, [pc, #172]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0f0      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x974>
 800a5e2:	e018      	b.n	800a616 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a5e4:	4b27      	ldr	r3, [pc, #156]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a26      	ldr	r2, [pc, #152]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a5ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a5f0:	f7f8 fce6 	bl	8002fc0 <HAL_GetTick>
 800a5f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a5f6:	e008      	b.n	800a60a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a5f8:	f7f8 fce2 	bl	8002fc0 <HAL_GetTick>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	2b02      	cmp	r3, #2
 800a604:	d901      	bls.n	800a60a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e1f7      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a60a:	4b1e      	ldr	r3, [pc, #120]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1f0      	bne.n	800a5f8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d07f      	beq.n	800a722 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a626:	2b00      	cmp	r3, #0
 800a628:	d062      	beq.n	800a6f0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a62a:	4b16      	ldr	r3, [pc, #88]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	4a15      	ldr	r2, [pc, #84]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a630:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a634:	6093      	str	r3, [r2, #8]
 800a636:	4b13      	ldr	r3, [pc, #76]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a642:	4910      	ldr	r1, [pc, #64]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a644:	4313      	orrs	r3, r2
 800a646:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a650:	d309      	bcc.n	800a666 <HAL_RCC_OscConfig+0xa16>
 800a652:	4b0c      	ldr	r3, [pc, #48]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	f023 021f 	bic.w	r2, r3, #31
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	4909      	ldr	r1, [pc, #36]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a660:	4313      	orrs	r3, r2
 800a662:	60cb      	str	r3, [r1, #12]
 800a664:	e02a      	b.n	800a6bc <HAL_RCC_OscConfig+0xa6c>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	da0c      	bge.n	800a688 <HAL_RCC_OscConfig+0xa38>
 800a66e:	4b05      	ldr	r3, [pc, #20]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	015b      	lsls	r3, r3, #5
 800a67c:	4901      	ldr	r1, [pc, #4]	@ (800a684 <HAL_RCC_OscConfig+0xa34>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	60cb      	str	r3, [r1, #12]
 800a682:	e01b      	b.n	800a6bc <HAL_RCC_OscConfig+0xa6c>
 800a684:	46020c00 	.word	0x46020c00
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a690:	d30a      	bcc.n	800a6a8 <HAL_RCC_OscConfig+0xa58>
 800a692:	4ba1      	ldr	r3, [pc, #644]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	029b      	lsls	r3, r3, #10
 800a6a0:	499d      	ldr	r1, [pc, #628]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	60cb      	str	r3, [r1, #12]
 800a6a6:	e009      	b.n	800a6bc <HAL_RCC_OscConfig+0xa6c>
 800a6a8:	4b9b      	ldr	r3, [pc, #620]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	03db      	lsls	r3, r3, #15
 800a6b6:	4998      	ldr	r1, [pc, #608]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a6bc:	4b96      	ldr	r3, [pc, #600]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a95      	ldr	r2, [pc, #596]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a6c2:	f043 0310 	orr.w	r3, r3, #16
 800a6c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a6c8:	f7f8 fc7a 	bl	8002fc0 <HAL_GetTick>
 800a6cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a6ce:	e008      	b.n	800a6e2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a6d0:	f7f8 fc76 	bl	8002fc0 <HAL_GetTick>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d901      	bls.n	800a6e2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e18b      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a6e2:	4b8d      	ldr	r3, [pc, #564]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0320 	and.w	r3, r3, #32
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0f0      	beq.n	800a6d0 <HAL_RCC_OscConfig+0xa80>
 800a6ee:	e018      	b.n	800a722 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a6f0:	4b89      	ldr	r3, [pc, #548]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a88      	ldr	r2, [pc, #544]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a6f6:	f023 0310 	bic.w	r3, r3, #16
 800a6fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a6fc:	f7f8 fc60 	bl	8002fc0 <HAL_GetTick>
 800a700:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a702:	e008      	b.n	800a716 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a704:	f7f8 fc5c 	bl	8002fc0 <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d901      	bls.n	800a716 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	e171      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a716:	4b80      	ldr	r3, [pc, #512]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0320 	and.w	r3, r3, #32
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1f0      	bne.n	800a704 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 8166 	beq.w	800a9f8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a72c:	2300      	movs	r3, #0
 800a72e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a732:	4b79      	ldr	r3, [pc, #484]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	f003 030c 	and.w	r3, r3, #12
 800a73a:	2b0c      	cmp	r3, #12
 800a73c:	f000 80f2 	beq.w	800a924 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a744:	2b02      	cmp	r3, #2
 800a746:	f040 80c5 	bne.w	800a8d4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a74a:	4b73      	ldr	r3, [pc, #460]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a72      	ldr	r2, [pc, #456]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a750:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a754:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a756:	f7f8 fc33 	bl	8002fc0 <HAL_GetTick>
 800a75a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a75c:	e008      	b.n	800a770 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a75e:	f7f8 fc2f 	bl	8002fc0 <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d901      	bls.n	800a770 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e144      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a770:	4b69      	ldr	r3, [pc, #420]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1f0      	bne.n	800a75e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a77c:	4b66      	ldr	r3, [pc, #408]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a77e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a782:	f003 0304 	and.w	r3, r3, #4
 800a786:	2b00      	cmp	r3, #0
 800a788:	d111      	bne.n	800a7ae <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a78a:	4b63      	ldr	r3, [pc, #396]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a78c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a790:	4a61      	ldr	r2, [pc, #388]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a792:	f043 0304 	orr.w	r3, r3, #4
 800a796:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a79a:	4b5f      	ldr	r3, [pc, #380]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a79c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7a0:	f003 0304 	and.w	r3, r3, #4
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a7ae:	4b5b      	ldr	r3, [pc, #364]	@ (800a91c <HAL_RCC_OscConfig+0xccc>)
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a7b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a7ba:	d102      	bne.n	800a7c2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a7c2:	4b56      	ldr	r3, [pc, #344]	@ (800a91c <HAL_RCC_OscConfig+0xccc>)
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	4a55      	ldr	r2, [pc, #340]	@ (800a91c <HAL_RCC_OscConfig+0xccc>)
 800a7c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7cc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a7ce:	4b52      	ldr	r3, [pc, #328]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7d6:	f023 0303 	bic.w	r3, r3, #3
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a7e2:	3a01      	subs	r2, #1
 800a7e4:	0212      	lsls	r2, r2, #8
 800a7e6:	4311      	orrs	r1, r2
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a7ec:	430a      	orrs	r2, r1
 800a7ee:	494a      	ldr	r1, [pc, #296]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	628b      	str	r3, [r1, #40]	@ 0x28
 800a7f4:	4b48      	ldr	r3, [pc, #288]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a7f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7f8:	4b49      	ldr	r3, [pc, #292]	@ (800a920 <HAL_RCC_OscConfig+0xcd0>)
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a800:	3a01      	subs	r2, #1
 800a802:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a80a:	3a01      	subs	r2, #1
 800a80c:	0252      	lsls	r2, r2, #9
 800a80e:	b292      	uxth	r2, r2
 800a810:	4311      	orrs	r1, r2
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a816:	3a01      	subs	r2, #1
 800a818:	0412      	lsls	r2, r2, #16
 800a81a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a81e:	4311      	orrs	r1, r2
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a824:	3a01      	subs	r2, #1
 800a826:	0612      	lsls	r2, r2, #24
 800a828:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a82c:	430a      	orrs	r2, r1
 800a82e:	493a      	ldr	r1, [pc, #232]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a830:	4313      	orrs	r3, r2
 800a832:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a834:	4b38      	ldr	r3, [pc, #224]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a838:	4a37      	ldr	r2, [pc, #220]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a83a:	f023 0310 	bic.w	r3, r3, #16
 800a83e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a844:	4a34      	ldr	r2, [pc, #208]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a84a:	4b33      	ldr	r3, [pc, #204]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a84e:	4a32      	ldr	r2, [pc, #200]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a850:	f043 0310 	orr.w	r3, r3, #16
 800a854:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a856:	4b30      	ldr	r3, [pc, #192]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85a:	f023 020c 	bic.w	r2, r3, #12
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a862:	492d      	ldr	r1, [pc, #180]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a864:	4313      	orrs	r3, r2
 800a866:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a868:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d105      	bne.n	800a87c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a870:	4b2a      	ldr	r3, [pc, #168]	@ (800a91c <HAL_RCC_OscConfig+0xccc>)
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	4a29      	ldr	r2, [pc, #164]	@ (800a91c <HAL_RCC_OscConfig+0xccc>)
 800a876:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a87a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a87c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a880:	2b01      	cmp	r3, #1
 800a882:	d107      	bne.n	800a894 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a884:	4b24      	ldr	r3, [pc, #144]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a88a:	4a23      	ldr	r2, [pc, #140]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a88c:	f023 0304 	bic.w	r3, r3, #4
 800a890:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a894:	4b20      	ldr	r3, [pc, #128]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a1f      	ldr	r2, [pc, #124]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a89a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a89e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a8a0:	f7f8 fb8e 	bl	8002fc0 <HAL_GetTick>
 800a8a4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a8a6:	e008      	b.n	800a8ba <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8a8:	f7f8 fb8a 	bl	8002fc0 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d901      	bls.n	800a8ba <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e09f      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a8ba:	4b17      	ldr	r3, [pc, #92]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0f0      	beq.n	800a8a8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a8c6:	4b14      	ldr	r3, [pc, #80]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ca:	4a13      	ldr	r2, [pc, #76]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a8cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a8d0:	6293      	str	r3, [r2, #40]	@ 0x28
 800a8d2:	e091      	b.n	800a9f8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a8d4:	4b10      	ldr	r3, [pc, #64]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a0f      	ldr	r2, [pc, #60]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a8da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a8e0:	f7f8 fb6e 	bl	8002fc0 <HAL_GetTick>
 800a8e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a8e6:	e008      	b.n	800a8fa <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8e8:	f7f8 fb6a 	bl	8002fc0 <HAL_GetTick>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d901      	bls.n	800a8fa <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e07f      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a8fa:	4b07      	ldr	r3, [pc, #28]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1f0      	bne.n	800a8e8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a906:	4b04      	ldr	r3, [pc, #16]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a90a:	4a03      	ldr	r2, [pc, #12]	@ (800a918 <HAL_RCC_OscConfig+0xcc8>)
 800a90c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a910:	f023 0303 	bic.w	r3, r3, #3
 800a914:	6293      	str	r3, [r2, #40]	@ 0x28
 800a916:	e06f      	b.n	800a9f8 <HAL_RCC_OscConfig+0xda8>
 800a918:	46020c00 	.word	0x46020c00
 800a91c:	46020800 	.word	0x46020800
 800a920:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a924:	4b37      	ldr	r3, [pc, #220]	@ (800aa04 <HAL_RCC_OscConfig+0xdb4>)
 800a926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a928:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a92a:	4b36      	ldr	r3, [pc, #216]	@ (800aa04 <HAL_RCC_OscConfig+0xdb4>)
 800a92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a92e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a934:	2b01      	cmp	r3, #1
 800a936:	d039      	beq.n	800a9ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	f003 0203 	and.w	r2, r3, #3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a942:	429a      	cmp	r2, r3
 800a944:	d132      	bne.n	800a9ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	0a1b      	lsrs	r3, r3, #8
 800a94a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a952:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a954:	429a      	cmp	r2, r3
 800a956:	d129      	bne.n	800a9ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a962:	429a      	cmp	r2, r3
 800a964:	d122      	bne.n	800a9ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a970:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a972:	429a      	cmp	r2, r3
 800a974:	d11a      	bne.n	800a9ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	0a5b      	lsrs	r3, r3, #9
 800a97a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a982:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a984:	429a      	cmp	r2, r3
 800a986:	d111      	bne.n	800a9ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	0c1b      	lsrs	r3, r3, #16
 800a98c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a994:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a996:	429a      	cmp	r2, r3
 800a998:	d108      	bne.n	800a9ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	0e1b      	lsrs	r3, r3, #24
 800a99e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9a6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d001      	beq.n	800a9b0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e024      	b.n	800a9fa <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a9b0:	4b14      	ldr	r3, [pc, #80]	@ (800aa04 <HAL_RCC_OscConfig+0xdb4>)
 800a9b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b4:	08db      	lsrs	r3, r3, #3
 800a9b6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d01a      	beq.n	800a9f8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a9c2:	4b10      	ldr	r3, [pc, #64]	@ (800aa04 <HAL_RCC_OscConfig+0xdb4>)
 800a9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c6:	4a0f      	ldr	r2, [pc, #60]	@ (800aa04 <HAL_RCC_OscConfig+0xdb4>)
 800a9c8:	f023 0310 	bic.w	r3, r3, #16
 800a9cc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ce:	f7f8 faf7 	bl	8002fc0 <HAL_GetTick>
 800a9d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a9d4:	bf00      	nop
 800a9d6:	f7f8 faf3 	bl	8002fc0 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d0f9      	beq.n	800a9d6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9e6:	4a07      	ldr	r2, [pc, #28]	@ (800aa04 <HAL_RCC_OscConfig+0xdb4>)
 800a9e8:	00db      	lsls	r3, r3, #3
 800a9ea:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a9ec:	4b05      	ldr	r3, [pc, #20]	@ (800aa04 <HAL_RCC_OscConfig+0xdb4>)
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f0:	4a04      	ldr	r2, [pc, #16]	@ (800aa04 <HAL_RCC_OscConfig+0xdb4>)
 800a9f2:	f043 0310 	orr.w	r3, r3, #16
 800a9f6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3738      	adds	r7, #56	@ 0x38
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	46020c00 	.word	0x46020c00

0800aa08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e1d9      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa1c:	4b9b      	ldr	r3, [pc, #620]	@ (800ac8c <HAL_RCC_ClockConfig+0x284>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 030f 	and.w	r3, r3, #15
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d910      	bls.n	800aa4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa2a:	4b98      	ldr	r3, [pc, #608]	@ (800ac8c <HAL_RCC_ClockConfig+0x284>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f023 020f 	bic.w	r2, r3, #15
 800aa32:	4996      	ldr	r1, [pc, #600]	@ (800ac8c <HAL_RCC_ClockConfig+0x284>)
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa3a:	4b94      	ldr	r3, [pc, #592]	@ (800ac8c <HAL_RCC_ClockConfig+0x284>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 030f 	and.w	r3, r3, #15
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d001      	beq.n	800aa4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e1c1      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d010      	beq.n	800aa7a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	695a      	ldr	r2, [r3, #20]
 800aa5c:	4b8c      	ldr	r3, [pc, #560]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d908      	bls.n	800aa7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800aa68:	4b89      	ldr	r3, [pc, #548]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	4986      	ldr	r1, [pc, #536]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aa76:	4313      	orrs	r3, r2
 800aa78:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 0308 	and.w	r3, r3, #8
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d012      	beq.n	800aaac <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	691a      	ldr	r2, [r3, #16]
 800aa8a:	4b81      	ldr	r3, [pc, #516]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	091b      	lsrs	r3, r3, #4
 800aa90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d909      	bls.n	800aaac <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800aa98:	4b7d      	ldr	r3, [pc, #500]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aa9a:	6a1b      	ldr	r3, [r3, #32]
 800aa9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	011b      	lsls	r3, r3, #4
 800aaa6:	497a      	ldr	r1, [pc, #488]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0304 	and.w	r3, r3, #4
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d010      	beq.n	800aada <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	68da      	ldr	r2, [r3, #12]
 800aabc:	4b74      	ldr	r3, [pc, #464]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d908      	bls.n	800aada <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800aac8:	4b71      	ldr	r3, [pc, #452]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	496e      	ldr	r1, [pc, #440]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aad6:	4313      	orrs	r3, r2
 800aad8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 0302 	and.w	r3, r3, #2
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d010      	beq.n	800ab08 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	689a      	ldr	r2, [r3, #8]
 800aaea:	4b69      	ldr	r3, [pc, #420]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	f003 030f 	and.w	r3, r3, #15
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d908      	bls.n	800ab08 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800aaf6:	4b66      	ldr	r3, [pc, #408]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	f023 020f 	bic.w	r2, r3, #15
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	4963      	ldr	r1, [pc, #396]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ab04:	4313      	orrs	r3, r2
 800ab06:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 80d2 	beq.w	800acba <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800ab16:	2300      	movs	r3, #0
 800ab18:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d143      	bne.n	800abaa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab22:	4b5b      	ldr	r3, [pc, #364]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ab24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab28:	f003 0304 	and.w	r3, r3, #4
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d110      	bne.n	800ab52 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800ab30:	4b57      	ldr	r3, [pc, #348]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ab32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab36:	4a56      	ldr	r2, [pc, #344]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ab38:	f043 0304 	orr.w	r3, r3, #4
 800ab3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ab40:	4b53      	ldr	r3, [pc, #332]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ab42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab46:	f003 0304 	and.w	r3, r3, #4
 800ab4a:	60bb      	str	r3, [r7, #8]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800ab52:	f7f8 fa35 	bl	8002fc0 <HAL_GetTick>
 800ab56:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800ab58:	4b4e      	ldr	r3, [pc, #312]	@ (800ac94 <HAL_RCC_ClockConfig+0x28c>)
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00f      	beq.n	800ab84 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800ab64:	e008      	b.n	800ab78 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800ab66:	f7f8 fa2b 	bl	8002fc0 <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d901      	bls.n	800ab78 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e12b      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800ab78:	4b46      	ldr	r3, [pc, #280]	@ (800ac94 <HAL_RCC_ClockConfig+0x28c>)
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0f0      	beq.n	800ab66 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d107      	bne.n	800ab9a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800ab8a:	4b41      	ldr	r3, [pc, #260]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ab8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab90:	4a3f      	ldr	r2, [pc, #252]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ab92:	f023 0304 	bic.w	r3, r3, #4
 800ab96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ab9a:	4b3d      	ldr	r3, [pc, #244]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d121      	bne.n	800abea <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e112      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d107      	bne.n	800abc2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800abb2:	4b37      	ldr	r3, [pc, #220]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d115      	bne.n	800abea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e106      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d107      	bne.n	800abda <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800abca:	4b31      	ldr	r3, [pc, #196]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0304 	and.w	r3, r3, #4
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d109      	bne.n	800abea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e0fa      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800abda:	4b2d      	ldr	r3, [pc, #180]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e0f2      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800abea:	4b29      	ldr	r3, [pc, #164]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	f023 0203 	bic.w	r2, r3, #3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	4926      	ldr	r1, [pc, #152]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800abf8:	4313      	orrs	r3, r2
 800abfa:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800abfc:	f7f8 f9e0 	bl	8002fc0 <HAL_GetTick>
 800ac00:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d112      	bne.n	800ac30 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac0a:	e00a      	b.n	800ac22 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac0c:	f7f8 f9d8 	bl	8002fc0 <HAL_GetTick>
 800ac10:	4602      	mov	r2, r0
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d901      	bls.n	800ac22 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	e0d6      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac22:	4b1b      	ldr	r3, [pc, #108]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	f003 030c 	and.w	r3, r3, #12
 800ac2a:	2b0c      	cmp	r3, #12
 800ac2c:	d1ee      	bne.n	800ac0c <HAL_RCC_ClockConfig+0x204>
 800ac2e:	e044      	b.n	800acba <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d112      	bne.n	800ac5e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac38:	e00a      	b.n	800ac50 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac3a:	f7f8 f9c1 	bl	8002fc0 <HAL_GetTick>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d901      	bls.n	800ac50 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e0bf      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac50:	4b0f      	ldr	r3, [pc, #60]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ac52:	69db      	ldr	r3, [r3, #28]
 800ac54:	f003 030c 	and.w	r3, r3, #12
 800ac58:	2b08      	cmp	r3, #8
 800ac5a:	d1ee      	bne.n	800ac3a <HAL_RCC_ClockConfig+0x232>
 800ac5c:	e02d      	b.n	800acba <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d123      	bne.n	800acae <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ac66:	e00a      	b.n	800ac7e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac68:	f7f8 f9aa 	bl	8002fc0 <HAL_GetTick>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d901      	bls.n	800ac7e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e0a8      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ac7e:	4b04      	ldr	r3, [pc, #16]	@ (800ac90 <HAL_RCC_ClockConfig+0x288>)
 800ac80:	69db      	ldr	r3, [r3, #28]
 800ac82:	f003 030c 	and.w	r3, r3, #12
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1ee      	bne.n	800ac68 <HAL_RCC_ClockConfig+0x260>
 800ac8a:	e016      	b.n	800acba <HAL_RCC_ClockConfig+0x2b2>
 800ac8c:	40022000 	.word	0x40022000
 800ac90:	46020c00 	.word	0x46020c00
 800ac94:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac98:	f7f8 f992 	bl	8002fc0 <HAL_GetTick>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d901      	bls.n	800acae <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e090      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800acae:	4b4a      	ldr	r3, [pc, #296]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	f003 030c 	and.w	r3, r3, #12
 800acb6:	2b04      	cmp	r3, #4
 800acb8:	d1ee      	bne.n	800ac98 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0302 	and.w	r3, r3, #2
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d010      	beq.n	800ace8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	689a      	ldr	r2, [r3, #8]
 800acca:	4b43      	ldr	r3, [pc, #268]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800accc:	6a1b      	ldr	r3, [r3, #32]
 800acce:	f003 030f 	and.w	r3, r3, #15
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d208      	bcs.n	800ace8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800acd6:	4b40      	ldr	r3, [pc, #256]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	f023 020f 	bic.w	r2, r3, #15
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	493d      	ldr	r1, [pc, #244]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ace8:	4b3c      	ldr	r3, [pc, #240]	@ (800addc <HAL_RCC_ClockConfig+0x3d4>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 030f 	and.w	r3, r3, #15
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d210      	bcs.n	800ad18 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acf6:	4b39      	ldr	r3, [pc, #228]	@ (800addc <HAL_RCC_ClockConfig+0x3d4>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f023 020f 	bic.w	r2, r3, #15
 800acfe:	4937      	ldr	r1, [pc, #220]	@ (800addc <HAL_RCC_ClockConfig+0x3d4>)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad06:	4b35      	ldr	r3, [pc, #212]	@ (800addc <HAL_RCC_ClockConfig+0x3d4>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 030f 	and.w	r3, r3, #15
 800ad0e:	683a      	ldr	r2, [r7, #0]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d001      	beq.n	800ad18 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e05b      	b.n	800add0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d010      	beq.n	800ad46 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	68da      	ldr	r2, [r3, #12]
 800ad28:	4b2b      	ldr	r3, [pc, #172]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800ad2a:	6a1b      	ldr	r3, [r3, #32]
 800ad2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d208      	bcs.n	800ad46 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800ad34:	4b28      	ldr	r3, [pc, #160]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800ad36:	6a1b      	ldr	r3, [r3, #32]
 800ad38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	4925      	ldr	r1, [pc, #148]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800ad42:	4313      	orrs	r3, r2
 800ad44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 0308 	and.w	r3, r3, #8
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d012      	beq.n	800ad78 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	691a      	ldr	r2, [r3, #16]
 800ad56:	4b20      	ldr	r3, [pc, #128]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	091b      	lsrs	r3, r3, #4
 800ad5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d209      	bcs.n	800ad78 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800ad64:	4b1c      	ldr	r3, [pc, #112]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800ad66:	6a1b      	ldr	r3, [r3, #32]
 800ad68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	011b      	lsls	r3, r3, #4
 800ad72:	4919      	ldr	r1, [pc, #100]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0310 	and.w	r3, r3, #16
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d010      	beq.n	800ada6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	695a      	ldr	r2, [r3, #20]
 800ad88:	4b13      	ldr	r3, [pc, #76]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d208      	bcs.n	800ada6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800ad94:	4b10      	ldr	r3, [pc, #64]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800ad96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	695b      	ldr	r3, [r3, #20]
 800ada0:	490d      	ldr	r1, [pc, #52]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800ada2:	4313      	orrs	r3, r2
 800ada4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ada6:	f000 f821 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800adaa:	4602      	mov	r2, r0
 800adac:	4b0a      	ldr	r3, [pc, #40]	@ (800add8 <HAL_RCC_ClockConfig+0x3d0>)
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	f003 030f 	and.w	r3, r3, #15
 800adb4:	490a      	ldr	r1, [pc, #40]	@ (800ade0 <HAL_RCC_ClockConfig+0x3d8>)
 800adb6:	5ccb      	ldrb	r3, [r1, r3]
 800adb8:	fa22 f303 	lsr.w	r3, r2, r3
 800adbc:	4a09      	ldr	r2, [pc, #36]	@ (800ade4 <HAL_RCC_ClockConfig+0x3dc>)
 800adbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800adc0:	4b09      	ldr	r3, [pc, #36]	@ (800ade8 <HAL_RCC_ClockConfig+0x3e0>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7f7 ff3b 	bl	8002c40 <HAL_InitTick>
 800adca:	4603      	mov	r3, r0
 800adcc:	73fb      	strb	r3, [r7, #15]

  return status;
 800adce:	7bfb      	ldrb	r3, [r7, #15]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	46020c00 	.word	0x46020c00
 800addc:	40022000 	.word	0x40022000
 800ade0:	080123c8 	.word	0x080123c8
 800ade4:	20000024 	.word	0x20000024
 800ade8:	20000028 	.word	0x20000028

0800adec <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800adec:	b480      	push	{r7}
 800adee:	b08b      	sub	sp, #44	@ 0x2c
 800adf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800adf2:	2300      	movs	r3, #0
 800adf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800adf6:	2300      	movs	r3, #0
 800adf8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adfa:	4b78      	ldr	r3, [pc, #480]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f003 030c 	and.w	r3, r3, #12
 800ae02:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae04:	4b75      	ldr	r3, [pc, #468]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae08:	f003 0303 	and.w	r3, r3, #3
 800ae0c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d005      	beq.n	800ae20 <HAL_RCC_GetSysClockFreq+0x34>
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	2b0c      	cmp	r3, #12
 800ae18:	d121      	bne.n	800ae5e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d11e      	bne.n	800ae5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800ae20:	4b6e      	ldr	r3, [pc, #440]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d107      	bne.n	800ae3c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800ae2c:	4b6b      	ldr	r3, [pc, #428]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae32:	0b1b      	lsrs	r3, r3, #12
 800ae34:	f003 030f 	and.w	r3, r3, #15
 800ae38:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae3a:	e005      	b.n	800ae48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800ae3c:	4b67      	ldr	r3, [pc, #412]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	0f1b      	lsrs	r3, r3, #28
 800ae42:	f003 030f 	and.w	r3, r3, #15
 800ae46:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ae48:	4a65      	ldr	r2, [pc, #404]	@ (800afe0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae50:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d110      	bne.n	800ae7a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ae58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ae5c:	e00d      	b.n	800ae7a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ae5e:	4b5f      	ldr	r3, [pc, #380]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	f003 030c 	and.w	r3, r3, #12
 800ae66:	2b04      	cmp	r3, #4
 800ae68:	d102      	bne.n	800ae70 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ae6a:	4b5e      	ldr	r3, [pc, #376]	@ (800afe4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ae6c:	623b      	str	r3, [r7, #32]
 800ae6e:	e004      	b.n	800ae7a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	2b08      	cmp	r3, #8
 800ae74:	d101      	bne.n	800ae7a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ae76:	4b5b      	ldr	r3, [pc, #364]	@ (800afe4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ae78:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	2b0c      	cmp	r3, #12
 800ae7e:	f040 80a5 	bne.w	800afcc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ae82:	4b56      	ldr	r3, [pc, #344]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae86:	f003 0303 	and.w	r3, r3, #3
 800ae8a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ae8c:	4b53      	ldr	r3, [pc, #332]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae90:	0a1b      	lsrs	r3, r3, #8
 800ae92:	f003 030f 	and.w	r3, r3, #15
 800ae96:	3301      	adds	r3, #1
 800ae98:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ae9a:	4b50      	ldr	r3, [pc, #320]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae9e:	091b      	lsrs	r3, r3, #4
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800aea6:	4b4d      	ldr	r3, [pc, #308]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeaa:	08db      	lsrs	r3, r3, #3
 800aeac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	fb02 f303 	mul.w	r3, r2, r3
 800aeb6:	ee07 3a90 	vmov	s15, r3
 800aeba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aebe:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d003      	beq.n	800aed0 <HAL_RCC_GetSysClockFreq+0xe4>
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	d022      	beq.n	800af14 <HAL_RCC_GetSysClockFreq+0x128>
 800aece:	e043      	b.n	800af58 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeda:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800afe8 <HAL_RCC_GetSysClockFreq+0x1fc>
 800aede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee2:	4b3e      	ldr	r3, [pc, #248]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800aef2:	ed97 6a01 	vldr	s12, [r7, #4]
 800aef6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800afec <HAL_RCC_GetSysClockFreq+0x200>
 800aefa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aefe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800af02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af06:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800af0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af12:	e046      	b.n	800afa2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800afe8 <HAL_RCC_GetSysClockFreq+0x1fc>
 800af22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af26:	4b2d      	ldr	r3, [pc, #180]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800af28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2e:	ee07 3a90 	vmov	s15, r3
 800af32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800af36:	ed97 6a01 	vldr	s12, [r7, #4]
 800af3a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800afec <HAL_RCC_GetSysClockFreq+0x200>
 800af3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800af42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800af46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800af4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af56:	e024      	b.n	800afa2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800af58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	ee07 3a90 	vmov	s15, r3
 800af68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af70:	4b1a      	ldr	r3, [pc, #104]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800af72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af78:	ee07 3a90 	vmov	s15, r3
 800af7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800af80:	ed97 6a01 	vldr	s12, [r7, #4]
 800af84:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800afec <HAL_RCC_GetSysClockFreq+0x200>
 800af88:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800af8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800af90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af94:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800af98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afa0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800afa2:	4b0e      	ldr	r3, [pc, #56]	@ (800afdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800afa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afa6:	0e1b      	lsrs	r3, r3, #24
 800afa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afac:	3301      	adds	r3, #1
 800afae:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	ee07 3a90 	vmov	s15, r3
 800afb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800afba:	edd7 6a07 	vldr	s13, [r7, #28]
 800afbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afc6:	ee17 3a90 	vmov	r3, s15
 800afca:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800afcc:	6a3b      	ldr	r3, [r7, #32]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	372c      	adds	r7, #44	@ 0x2c
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	46020c00 	.word	0x46020c00
 800afe0:	080123e0 	.word	0x080123e0
 800afe4:	00f42400 	.word	0x00f42400
 800afe8:	4b742400 	.word	0x4b742400
 800afec:	46000000 	.word	0x46000000

0800aff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800aff4:	f7ff fefa 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800aff8:	4602      	mov	r2, r0
 800affa:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <HAL_RCC_GetHCLKFreq+0x28>)
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	f003 030f 	and.w	r3, r3, #15
 800b002:	4906      	ldr	r1, [pc, #24]	@ (800b01c <HAL_RCC_GetHCLKFreq+0x2c>)
 800b004:	5ccb      	ldrb	r3, [r1, r3]
 800b006:	fa22 f303 	lsr.w	r3, r2, r3
 800b00a:	4a05      	ldr	r2, [pc, #20]	@ (800b020 <HAL_RCC_GetHCLKFreq+0x30>)
 800b00c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b00e:	4b04      	ldr	r3, [pc, #16]	@ (800b020 <HAL_RCC_GetHCLKFreq+0x30>)
 800b010:	681b      	ldr	r3, [r3, #0]
}
 800b012:	4618      	mov	r0, r3
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	46020c00 	.word	0x46020c00
 800b01c:	080123c8 	.word	0x080123c8
 800b020:	20000024 	.word	0x20000024

0800b024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b028:	f7ff ffe2 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800b02c:	4602      	mov	r2, r0
 800b02e:	4b05      	ldr	r3, [pc, #20]	@ (800b044 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	091b      	lsrs	r3, r3, #4
 800b034:	f003 0307 	and.w	r3, r3, #7
 800b038:	4903      	ldr	r1, [pc, #12]	@ (800b048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b03a:	5ccb      	ldrb	r3, [r1, r3]
 800b03c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b040:	4618      	mov	r0, r3
 800b042:	bd80      	pop	{r7, pc}
 800b044:	46020c00 	.word	0x46020c00
 800b048:	080123d8 	.word	0x080123d8

0800b04c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800b050:	f7ff ffce 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800b054:	4602      	mov	r2, r0
 800b056:	4b05      	ldr	r3, [pc, #20]	@ (800b06c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	0a1b      	lsrs	r3, r3, #8
 800b05c:	f003 0307 	and.w	r3, r3, #7
 800b060:	4903      	ldr	r1, [pc, #12]	@ (800b070 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b062:	5ccb      	ldrb	r3, [r1, r3]
 800b064:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b068:	4618      	mov	r0, r3
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	46020c00 	.word	0x46020c00
 800b070:	080123d8 	.word	0x080123d8

0800b074 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800b078:	f7ff ffba 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800b07c:	4602      	mov	r2, r0
 800b07e:	4b05      	ldr	r3, [pc, #20]	@ (800b094 <HAL_RCC_GetPCLK3Freq+0x20>)
 800b080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b082:	091b      	lsrs	r3, r3, #4
 800b084:	f003 0307 	and.w	r3, r3, #7
 800b088:	4903      	ldr	r1, [pc, #12]	@ (800b098 <HAL_RCC_GetPCLK3Freq+0x24>)
 800b08a:	5ccb      	ldrb	r3, [r1, r3]
 800b08c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b090:	4618      	mov	r0, r3
 800b092:	bd80      	pop	{r7, pc}
 800b094:	46020c00 	.word	0x46020c00
 800b098:	080123d8 	.word	0x080123d8

0800b09c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	221f      	movs	r2, #31
 800b0aa:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800b0ac:	4b15      	ldr	r3, [pc, #84]	@ (800b104 <HAL_RCC_GetClockConfig+0x68>)
 800b0ae:	69db      	ldr	r3, [r3, #28]
 800b0b0:	f003 0203 	and.w	r2, r3, #3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800b0b8:	4b12      	ldr	r3, [pc, #72]	@ (800b104 <HAL_RCC_GetClockConfig+0x68>)
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	f003 020f 	and.w	r2, r3, #15
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800b0c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b104 <HAL_RCC_GetClockConfig+0x68>)
 800b0c6:	6a1b      	ldr	r3, [r3, #32]
 800b0c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800b0d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b104 <HAL_RCC_GetClockConfig+0x68>)
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
 800b0d4:	091b      	lsrs	r3, r3, #4
 800b0d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800b0de:	4b09      	ldr	r3, [pc, #36]	@ (800b104 <HAL_RCC_GetClockConfig+0x68>)
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b0ea:	4b07      	ldr	r3, [pc, #28]	@ (800b108 <HAL_RCC_GetClockConfig+0x6c>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 020f 	and.w	r2, r3, #15
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	601a      	str	r2, [r3, #0]
}
 800b0f6:	bf00      	nop
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	46020c00 	.word	0x46020c00
 800b108:	40022000 	.word	0x40022000

0800b10c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b114:	4b3e      	ldr	r3, [pc, #248]	@ (800b210 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b11a:	f003 0304 	and.w	r3, r3, #4
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b122:	f7fe fce9 	bl	8009af8 <HAL_PWREx_GetVoltageRange>
 800b126:	6178      	str	r0, [r7, #20]
 800b128:	e019      	b.n	800b15e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b12a:	4b39      	ldr	r3, [pc, #228]	@ (800b210 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b12c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b130:	4a37      	ldr	r2, [pc, #220]	@ (800b210 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b132:	f043 0304 	orr.w	r3, r3, #4
 800b136:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b13a:	4b35      	ldr	r3, [pc, #212]	@ (800b210 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b13c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b140:	f003 0304 	and.w	r3, r3, #4
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b148:	f7fe fcd6 	bl	8009af8 <HAL_PWREx_GetVoltageRange>
 800b14c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b14e:	4b30      	ldr	r3, [pc, #192]	@ (800b210 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b154:	4a2e      	ldr	r2, [pc, #184]	@ (800b210 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b156:	f023 0304 	bic.w	r3, r3, #4
 800b15a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b164:	d003      	beq.n	800b16e <RCC_SetFlashLatencyFromMSIRange+0x62>
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b16c:	d109      	bne.n	800b182 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b174:	d202      	bcs.n	800b17c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800b176:	2301      	movs	r3, #1
 800b178:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b17a:	e033      	b.n	800b1e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800b17c:	2300      	movs	r3, #0
 800b17e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b180:	e030      	b.n	800b1e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b188:	d208      	bcs.n	800b19c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b190:	d102      	bne.n	800b198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800b192:	2303      	movs	r3, #3
 800b194:	613b      	str	r3, [r7, #16]
 800b196:	e025      	b.n	800b1e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	e035      	b.n	800b208 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1a2:	d90f      	bls.n	800b1c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d109      	bne.n	800b1be <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b1b0:	d902      	bls.n	800b1b8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	613b      	str	r3, [r7, #16]
 800b1b6:	e015      	b.n	800b1e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	613b      	str	r3, [r7, #16]
 800b1bc:	e012      	b.n	800b1e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b1be:	2300      	movs	r3, #0
 800b1c0:	613b      	str	r3, [r7, #16]
 800b1c2:	e00f      	b.n	800b1e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1ca:	d109      	bne.n	800b1e0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1d2:	d102      	bne.n	800b1da <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	613b      	str	r3, [r7, #16]
 800b1d8:	e004      	b.n	800b1e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b1da:	2302      	movs	r3, #2
 800b1dc:	613b      	str	r3, [r7, #16]
 800b1de:	e001      	b.n	800b1e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b214 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f023 020f 	bic.w	r2, r3, #15
 800b1ec:	4909      	ldr	r1, [pc, #36]	@ (800b214 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b1f4:	4b07      	ldr	r3, [pc, #28]	@ (800b214 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 030f 	and.w	r3, r3, #15
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d001      	beq.n	800b206 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e000      	b.n	800b208 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	46020c00 	.word	0x46020c00
 800b214:	40022000 	.word	0x40022000

0800b218 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800b218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b21c:	b0c8      	sub	sp, #288	@ 0x120
 800b21e:	af00      	add	r7, sp, #0
 800b220:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b224:	2300      	movs	r3, #0
 800b226:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b22a:	2300      	movs	r3, #0
 800b22c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	f002 0401 	and.w	r4, r2, #1
 800b23c:	2500      	movs	r5, #0
 800b23e:	ea54 0305 	orrs.w	r3, r4, r5
 800b242:	d00b      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b244:	4bd5      	ldr	r3, [pc, #852]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b24a:	f023 0103 	bic.w	r1, r3, #3
 800b24e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b254:	4ad1      	ldr	r2, [pc, #836]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b256:	430b      	orrs	r3, r1
 800b258:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b25c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b264:	f002 0802 	and.w	r8, r2, #2
 800b268:	f04f 0900 	mov.w	r9, #0
 800b26c:	ea58 0309 	orrs.w	r3, r8, r9
 800b270:	d00b      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b272:	4bca      	ldr	r3, [pc, #808]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b278:	f023 010c 	bic.w	r1, r3, #12
 800b27c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b282:	4ac6      	ldr	r2, [pc, #792]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b284:	430b      	orrs	r3, r1
 800b286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b28a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b292:	f002 0a04 	and.w	sl, r2, #4
 800b296:	f04f 0b00 	mov.w	fp, #0
 800b29a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b29e:	d00b      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b2a0:	4bbe      	ldr	r3, [pc, #760]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2a6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b2aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2b0:	4aba      	ldr	r2, [pc, #744]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2b2:	430b      	orrs	r3, r1
 800b2b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b2b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f002 0308 	and.w	r3, r2, #8
 800b2c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b2ce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	d00b      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800b2d8:	4bb0      	ldr	r3, [pc, #704]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b2e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2e8:	4aac      	ldr	r2, [pc, #688]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2ea:	430b      	orrs	r3, r1
 800b2ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b2f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	f002 0310 	and.w	r3, r2, #16
 800b2fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b300:	2300      	movs	r3, #0
 800b302:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b306:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b30a:	460b      	mov	r3, r1
 800b30c:	4313      	orrs	r3, r2
 800b30e:	d00b      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800b310:	4ba2      	ldr	r3, [pc, #648]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b316:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b31a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b31e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b320:	4a9e      	ldr	r2, [pc, #632]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b322:	430b      	orrs	r3, r1
 800b324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b330:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b334:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b338:	2300      	movs	r3, #0
 800b33a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b33e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b342:	460b      	mov	r3, r1
 800b344:	4313      	orrs	r3, r2
 800b346:	d00b      	beq.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800b348:	4b94      	ldr	r3, [pc, #592]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b34a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b34e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b358:	4a90      	ldr	r2, [pc, #576]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b35a:	430b      	orrs	r3, r1
 800b35c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	f002 0320 	and.w	r3, r2, #32
 800b36c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b370:	2300      	movs	r3, #0
 800b372:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b376:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b37a:	460b      	mov	r3, r1
 800b37c:	4313      	orrs	r3, r2
 800b37e:	d00b      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b380:	4b86      	ldr	r3, [pc, #536]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b382:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b386:	f023 0107 	bic.w	r1, r3, #7
 800b38a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b38e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b390:	4a82      	ldr	r2, [pc, #520]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b392:	430b      	orrs	r3, r1
 800b394:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b3a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b3ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	d00b      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b3b8:	4b78      	ldr	r3, [pc, #480]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b3ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b3be:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3c8:	4a74      	ldr	r2, [pc, #464]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b3dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b3e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	d00b      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b3f0:	4b6a      	ldr	r3, [pc, #424]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b3f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b3f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b3fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b400:	4a66      	ldr	r2, [pc, #408]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b402:	430b      	orrs	r3, r1
 800b404:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b418:	2300      	movs	r3, #0
 800b41a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b41e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b422:	460b      	mov	r3, r1
 800b424:	4313      	orrs	r3, r2
 800b426:	d00b      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b428:	4b5c      	ldr	r3, [pc, #368]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b42a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b42e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b438:	4a58      	ldr	r2, [pc, #352]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b43a:	430b      	orrs	r3, r1
 800b43c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b44c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b450:	2300      	movs	r3, #0
 800b452:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b456:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b45a:	460b      	mov	r3, r1
 800b45c:	4313      	orrs	r3, r2
 800b45e:	d00b      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b460:	4b4e      	ldr	r3, [pc, #312]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b466:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b46a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b46e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b470:	4a4a      	ldr	r2, [pc, #296]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b472:	430b      	orrs	r3, r1
 800b474:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b484:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b488:	2300      	movs	r3, #0
 800b48a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b48e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b492:	460b      	mov	r3, r1
 800b494:	4313      	orrs	r3, r2
 800b496:	d00b      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b498:	4b40      	ldr	r3, [pc, #256]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b49a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b49e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4a8:	4a3c      	ldr	r2, [pc, #240]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b4aa:	430b      	orrs	r3, r1
 800b4ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b4b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b4bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b4c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	d00c      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b4d0:	4b32      	ldr	r3, [pc, #200]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b4d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b4d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b4da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4e2:	4a2e      	ldr	r2, [pc, #184]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b4f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b500:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b504:	460b      	mov	r3, r1
 800b506:	4313      	orrs	r3, r2
 800b508:	d00c      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b50a:	4b24      	ldr	r3, [pc, #144]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b50c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b510:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b51c:	4a1f      	ldr	r2, [pc, #124]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b51e:	430b      	orrs	r3, r1
 800b520:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b534:	2300      	movs	r3, #0
 800b536:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b53a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b53e:	460b      	mov	r3, r1
 800b540:	4313      	orrs	r3, r2
 800b542:	d00c      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b544:	4b15      	ldr	r3, [pc, #84]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b54a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b54e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b556:	4a11      	ldr	r2, [pc, #68]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b558:	430b      	orrs	r3, r1
 800b55a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b55e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b56a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b56e:	2300      	movs	r3, #0
 800b570:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b574:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b578:	460b      	mov	r3, r1
 800b57a:	4313      	orrs	r3, r2
 800b57c:	d010      	beq.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b57e:	4b07      	ldr	r3, [pc, #28]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b584:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b590:	4a02      	ldr	r2, [pc, #8]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b592:	430b      	orrs	r3, r1
 800b594:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b598:	e002      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b59a:	bf00      	nop
 800b59c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b5ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b5b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	d04c      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b5c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b5c8:	2b80      	cmp	r3, #128	@ 0x80
 800b5ca:	d02d      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b5cc:	2b80      	cmp	r3, #128	@ 0x80
 800b5ce:	d827      	bhi.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b5d0:	2b60      	cmp	r3, #96	@ 0x60
 800b5d2:	d02b      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b5d4:	2b60      	cmp	r3, #96	@ 0x60
 800b5d6:	d823      	bhi.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b5d8:	2b40      	cmp	r3, #64	@ 0x40
 800b5da:	d006      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b5dc:	2b40      	cmp	r3, #64	@ 0x40
 800b5de:	d81f      	bhi.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d009      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b5e4:	2b20      	cmp	r3, #32
 800b5e6:	d011      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b5e8:	e01a      	b.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b5ea:	4bc0      	ldr	r3, [pc, #768]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b5ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ee:	4abf      	ldr	r2, [pc, #764]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b5f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5f4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b5f6:	e01a      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b5f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	4618      	mov	r0, r3
 800b600:	f002 fcd6 	bl	800dfb0 <RCCEx_PLL2_Config>
 800b604:	4603      	mov	r3, r0
 800b606:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b60a:	e010      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b60c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b610:	332c      	adds	r3, #44	@ 0x2c
 800b612:	4618      	mov	r0, r3
 800b614:	f002 fd64 	bl	800e0e0 <RCCEx_PLL3_Config>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b61e:	e006      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b626:	e002      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b628:	bf00      	nop
 800b62a:	e000      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b62e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10d      	bne.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b636:	4bad      	ldr	r3, [pc, #692]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b638:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b63c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b644:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b648:	4aa8      	ldr	r2, [pc, #672]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b64a:	430b      	orrs	r3, r1
 800b64c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b650:	e003      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b652:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b656:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b65a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b66a:	2300      	movs	r3, #0
 800b66c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b670:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b674:	460b      	mov	r3, r1
 800b676:	4313      	orrs	r3, r2
 800b678:	d053      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b67a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b67e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b686:	d033      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b68c:	d82c      	bhi.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b68e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b692:	d02f      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b694:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b698:	d826      	bhi.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b69a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b69e:	d008      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b6a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6a4:	d820      	bhi.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b6aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6ae:	d011      	beq.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b6b0:	e01a      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b6b2:	4b8e      	ldr	r3, [pc, #568]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b6:	4a8d      	ldr	r2, [pc, #564]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b6b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6bc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b6be:	e01a      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b6c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6c4:	3308      	adds	r3, #8
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f002 fc72 	bl	800dfb0 <RCCEx_PLL2_Config>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b6d2:	e010      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d8:	332c      	adds	r3, #44	@ 0x2c
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f002 fd00 	bl	800e0e0 <RCCEx_PLL3_Config>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b6e6:	e006      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b6ee:	e002      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b6f0:	bf00      	nop
 800b6f2:	e000      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b6f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10d      	bne.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b6fe:	4b7b      	ldr	r3, [pc, #492]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b700:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b704:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b70c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b710:	4a76      	ldr	r2, [pc, #472]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b712:	430b      	orrs	r3, r1
 800b714:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b718:	e003      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b71a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b71e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b72e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b732:	2300      	movs	r3, #0
 800b734:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b738:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b73c:	460b      	mov	r3, r1
 800b73e:	4313      	orrs	r3, r2
 800b740:	d046      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b746:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b74a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b74e:	d028      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b750:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b754:	d821      	bhi.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b756:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b75a:	d022      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b75c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b760:	d81b      	bhi.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b762:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b766:	d01c      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b768:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b76c:	d815      	bhi.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b76e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b772:	d008      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b778:	d80f      	bhi.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d011      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b77e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b782:	d00e      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b784:	e009      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b78a:	3308      	adds	r3, #8
 800b78c:	4618      	mov	r0, r3
 800b78e:	f002 fc0f 	bl	800dfb0 <RCCEx_PLL2_Config>
 800b792:	4603      	mov	r3, r0
 800b794:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b798:	e004      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b7a0:	e000      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b7a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7a4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10d      	bne.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b7ac:	4b4f      	ldr	r3, [pc, #316]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b7ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b7b2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b7b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b7be:	4a4b      	ldr	r2, [pc, #300]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b7c0:	430b      	orrs	r3, r1
 800b7c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b7c6:	e003      	b.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7cc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b7d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b7dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b7e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	d03f      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b7f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d81e      	bhi.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b7fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b804 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b802:	bf00      	nop
 800b804:	0800b843 	.word	0x0800b843
 800b808:	0800b819 	.word	0x0800b819
 800b80c:	0800b827 	.word	0x0800b827
 800b810:	0800b843 	.word	0x0800b843
 800b814:	0800b843 	.word	0x0800b843
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b818:	4b34      	ldr	r3, [pc, #208]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b81c:	4a33      	ldr	r2, [pc, #204]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b81e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b822:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b824:	e00e      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b82a:	332c      	adds	r3, #44	@ 0x2c
 800b82c:	4618      	mov	r0, r3
 800b82e:	f002 fc57 	bl	800e0e0 <RCCEx_PLL3_Config>
 800b832:	4603      	mov	r3, r0
 800b834:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b838:	e004      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b840:	e000      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b842:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b844:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10d      	bne.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b84c:	4b27      	ldr	r3, [pc, #156]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b84e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b852:	f023 0107 	bic.w	r1, r3, #7
 800b856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b85a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b85e:	4a23      	ldr	r2, [pc, #140]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b860:	430b      	orrs	r3, r1
 800b862:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b866:	e003      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b868:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b86c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b87c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b87e:	2300      	movs	r3, #0
 800b880:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b882:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b886:	460b      	mov	r3, r1
 800b888:	4313      	orrs	r3, r2
 800b88a:	d04c      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b88c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b890:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b894:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b898:	d02a      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b89a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b89e:	d821      	bhi.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b8a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8a4:	d026      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b8a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8aa:	d81b      	bhi.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b8ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8b0:	d00e      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b8b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8b6:	d815      	bhi.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d01d      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b8bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8c0:	d110      	bne.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b8c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c6:	4a09      	ldr	r2, [pc, #36]	@ (800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b8c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8cc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b8ce:	e014      	b.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b8d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d4:	332c      	adds	r3, #44	@ 0x2c
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f002 fc02 	bl	800e0e0 <RCCEx_PLL3_Config>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b8e2:	e00a      	b.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b8ea:	e006      	b.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b8ec:	46020c00 	.word	0x46020c00
        break;
 800b8f0:	bf00      	nop
 800b8f2:	e002      	b.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b8f4:	bf00      	nop
 800b8f6:	e000      	b.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b8f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b8fa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10d      	bne.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b902:	4baf      	ldr	r3, [pc, #700]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b908:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b90c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b914:	4aaa      	ldr	r2, [pc, #680]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b916:	430b      	orrs	r3, r1
 800b918:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b91c:	e003      	b.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b91e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b922:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b932:	673b      	str	r3, [r7, #112]	@ 0x70
 800b934:	2300      	movs	r3, #0
 800b936:	677b      	str	r3, [r7, #116]	@ 0x74
 800b938:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b93c:	460b      	mov	r3, r1
 800b93e:	4313      	orrs	r3, r2
 800b940:	f000 80b5 	beq.w	800baae <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b944:	2300      	movs	r3, #0
 800b946:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b94a:	4b9d      	ldr	r3, [pc, #628]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b94c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b950:	f003 0304 	and.w	r3, r3, #4
 800b954:	2b00      	cmp	r3, #0
 800b956:	d113      	bne.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b958:	4b99      	ldr	r3, [pc, #612]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b95a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b95e:	4a98      	ldr	r2, [pc, #608]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b960:	f043 0304 	orr.w	r3, r3, #4
 800b964:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b968:	4b95      	ldr	r3, [pc, #596]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b96a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b96e:	f003 0304 	and.w	r3, r3, #4
 800b972:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b976:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b97a:	2301      	movs	r3, #1
 800b97c:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b980:	4b90      	ldr	r3, [pc, #576]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b984:	4a8f      	ldr	r2, [pc, #572]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b986:	f043 0301 	orr.w	r3, r3, #1
 800b98a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b98c:	f7f7 fb18 	bl	8002fc0 <HAL_GetTick>
 800b990:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b994:	e00b      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b996:	f7f7 fb13 	bl	8002fc0 <HAL_GetTick>
 800b99a:	4602      	mov	r2, r0
 800b99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d903      	bls.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b9ac:	e005      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b9ae:	4b85      	ldr	r3, [pc, #532]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d0ed      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b9ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d165      	bne.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b9c2:	4b7f      	ldr	r3, [pc, #508]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b9c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b9c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b9d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d023      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b9d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9dc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b9e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d01b      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b9e8:	4b75      	ldr	r3, [pc, #468]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b9ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b9ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b9f6:	4b72      	ldr	r3, [pc, #456]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b9f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b9fc:	4a70      	ldr	r2, [pc, #448]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b9fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba06:	4b6e      	ldr	r3, [pc, #440]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ba08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba0c:	4a6c      	ldr	r2, [pc, #432]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ba0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ba16:	4a6a      	ldr	r2, [pc, #424]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ba18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ba1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ba20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d019      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba2c:	f7f7 fac8 	bl	8002fc0 <HAL_GetTick>
 800ba30:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba34:	e00d      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba36:	f7f7 fac3 	bl	8002fc0 <HAL_GetTick>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba40:	1ad2      	subs	r2, r2, r3
 800ba42:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d903      	bls.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800ba50:	e006      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba52:	4b5b      	ldr	r3, [pc, #364]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ba54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba58:	f003 0302 	and.w	r3, r3, #2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d0ea      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800ba60:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10d      	bne.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800ba68:	4b55      	ldr	r3, [pc, #340]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ba6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ba72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba76:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800ba7a:	4a51      	ldr	r2, [pc, #324]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ba7c:	430b      	orrs	r3, r1
 800ba7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ba82:	e008      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ba84:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba88:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800ba8c:	e003      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba92:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ba96:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d107      	bne.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba9e:	4b48      	ldr	r3, [pc, #288]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800baa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800baa4:	4a46      	ldr	r2, [pc, #280]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800baa6:	f023 0304 	bic.w	r3, r3, #4
 800baaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800baae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800baba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800babc:	2300      	movs	r3, #0
 800babe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bac0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800bac4:	460b      	mov	r3, r1
 800bac6:	4313      	orrs	r3, r2
 800bac8:	d042      	beq.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800baca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bace:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bad2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bad6:	d022      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x906>
 800bad8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800badc:	d81b      	bhi.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800bade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bae2:	d011      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800bae4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bae8:	d815      	bhi.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800baea:	2b00      	cmp	r3, #0
 800baec:	d019      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800baee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800baf2:	d110      	bne.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800baf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baf8:	3308      	adds	r3, #8
 800bafa:	4618      	mov	r0, r3
 800bafc:	f002 fa58 	bl	800dfb0 <RCCEx_PLL2_Config>
 800bb00:	4603      	mov	r3, r0
 800bb02:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb06:	e00d      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb08:	4b2d      	ldr	r3, [pc, #180]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bb0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb0c:	4a2c      	ldr	r2, [pc, #176]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bb0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb12:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800bb14:	e006      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb1c:	e002      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800bb1e:	bf00      	nop
 800bb20:	e000      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800bb22:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bb24:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10d      	bne.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800bb2c:	4b24      	ldr	r3, [pc, #144]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bb2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb32:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800bb36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bb3e:	4a20      	ldr	r2, [pc, #128]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bb40:	430b      	orrs	r3, r1
 800bb42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bb46:	e003      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb48:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb4c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800bb5c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb5e:	2300      	movs	r3, #0
 800bb60:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb62:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800bb66:	460b      	mov	r3, r1
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	d031      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800bb6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb78:	d00b      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800bb7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb7e:	d804      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d008      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800bb84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb88:	d007      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb90:	e004      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800bb92:	bf00      	nop
 800bb94:	e002      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800bb96:	bf00      	nop
 800bb98:	e000      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800bb9a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bb9c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d111      	bne.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800bba4:	4b06      	ldr	r3, [pc, #24]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bba6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bbae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bbb6:	4a02      	ldr	r2, [pc, #8]	@ (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bbbe:	e007      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800bbc0:	46020c00 	.word	0x46020c00
 800bbc4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbcc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800bbd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bbdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bbde:	2300      	movs	r3, #0
 800bbe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bbe2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	d00c      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800bbec:	4bb2      	ldr	r3, [pc, #712]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bbee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbf2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800bbf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bbfe:	4aae      	ldr	r2, [pc, #696]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc00:	430b      	orrs	r3, r1
 800bc02:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800bc06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800bc12:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc14:	2300      	movs	r3, #0
 800bc16:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc18:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	d019      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800bc22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bc2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc2e:	d105      	bne.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc30:	4ba1      	ldr	r3, [pc, #644]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc34:	4aa0      	ldr	r2, [pc, #640]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc3a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800bc3c:	4b9e      	ldr	r3, [pc, #632]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc42:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800bc46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bc4e:	4a9a      	ldr	r2, [pc, #616]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc50:	430b      	orrs	r3, r1
 800bc52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800bc56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800bc62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc64:	2300      	movs	r3, #0
 800bc66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	d00c      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800bc72:	4b91      	ldr	r3, [pc, #580]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc78:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bc7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bc84:	4a8c      	ldr	r2, [pc, #560]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc86:	430b      	orrs	r3, r1
 800bc88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800bc8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc94:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bc98:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bca2:	460b      	mov	r3, r1
 800bca4:	4313      	orrs	r3, r2
 800bca6:	d00c      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800bca8:	4b83      	ldr	r3, [pc, #524]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bcaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bcb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bcba:	4a7f      	ldr	r2, [pc, #508]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bcbc:	430b      	orrs	r3, r1
 800bcbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800bcc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcca:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bcce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcd4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	d00c      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800bcde:	4b76      	ldr	r3, [pc, #472]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bce4:	f023 0118 	bic.w	r1, r3, #24
 800bce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800bcf0:	4a71      	ldr	r2, [pc, #452]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bcf2:	430b      	orrs	r3, r1
 800bcf4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bcf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800bd04:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd06:	2300      	movs	r3, #0
 800bd08:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd0a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4313      	orrs	r3, r2
 800bd12:	d032      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800bd14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bd1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd20:	d105      	bne.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd22:	4b65      	ldr	r3, [pc, #404]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd26:	4a64      	ldr	r2, [pc, #400]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd2c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800bd2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bd36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bd3a:	d108      	bne.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bd3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd40:	3308      	adds	r3, #8
 800bd42:	4618      	mov	r0, r3
 800bd44:	f002 f934 	bl	800dfb0 <RCCEx_PLL2_Config>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800bd4e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10d      	bne.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800bd56:	4b58      	ldr	r3, [pc, #352]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd5c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bd60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bd68:	4a53      	ldr	r2, [pc, #332]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd6a:	430b      	orrs	r3, r1
 800bd6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bd70:	e003      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd72:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd76:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800bd7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd82:	2100      	movs	r1, #0
 800bd84:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bd86:	f003 0301 	and.w	r3, r3, #1
 800bd8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bd90:	460b      	mov	r3, r1
 800bd92:	4313      	orrs	r3, r2
 800bd94:	d04a      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800bd96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bd9e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bda2:	d01e      	beq.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800bda4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bda8:	d825      	bhi.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800bdaa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bdae:	d00e      	beq.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800bdb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bdb4:	d81f      	bhi.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d021      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800bdba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdbe:	d11a      	bne.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdc0:	4b3d      	ldr	r3, [pc, #244]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc4:	4a3c      	ldr	r2, [pc, #240]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bdcc:	e018      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bdce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdd2:	3308      	adds	r3, #8
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f002 f8eb 	bl	800dfb0 <RCCEx_PLL2_Config>
 800bdda:	4603      	mov	r3, r0
 800bddc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bde0:	e00e      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bde2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bde6:	332c      	adds	r3, #44	@ 0x2c
 800bde8:	4618      	mov	r0, r3
 800bdea:	f002 f979 	bl	800e0e0 <RCCEx_PLL3_Config>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bdf4:	e004      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bdfc:	e000      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800bdfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be00:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10d      	bne.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800be08:	4b2b      	ldr	r3, [pc, #172]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800be12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800be1a:	4927      	ldr	r1, [pc, #156]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be1c:	4313      	orrs	r3, r2
 800be1e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800be22:	e003      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be24:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be28:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800be2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800be38:	623b      	str	r3, [r7, #32]
 800be3a:	2300      	movs	r3, #0
 800be3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800be3e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800be42:	460b      	mov	r3, r1
 800be44:	4313      	orrs	r3, r2
 800be46:	d03d      	beq.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800be48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be54:	d00e      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800be56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be5a:	d815      	bhi.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d017      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800be60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be64:	d110      	bne.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be66:	4b14      	ldr	r3, [pc, #80]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6a:	4a13      	ldr	r2, [pc, #76]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be70:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800be72:	e00e      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800be74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be78:	3308      	adds	r3, #8
 800be7a:	4618      	mov	r0, r3
 800be7c:	f002 f898 	bl	800dfb0 <RCCEx_PLL2_Config>
 800be80:	4603      	mov	r3, r0
 800be82:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800be86:	e004      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800be8e:	e000      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800be90:	bf00      	nop
    }
    if (ret == HAL_OK)
 800be92:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be96:	2b00      	cmp	r3, #0
 800be98:	d110      	bne.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800be9a:	4b07      	ldr	r3, [pc, #28]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bea0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beac:	4902      	ldr	r1, [pc, #8]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800beae:	4313      	orrs	r3, r2
 800beb0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800beb4:	e006      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800beb6:	bf00      	nop
 800beb8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bebc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bec0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800bec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bed0:	61bb      	str	r3, [r7, #24]
 800bed2:	2300      	movs	r3, #0
 800bed4:	61fb      	str	r3, [r7, #28]
 800bed6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800beda:	460b      	mov	r3, r1
 800bedc:	4313      	orrs	r3, r2
 800bede:	d00c      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bee0:	4b68      	ldr	r3, [pc, #416]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bee6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800beea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bef2:	4964      	ldr	r1, [pc, #400]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bef4:	4313      	orrs	r3, r2
 800bef6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800befa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	2100      	movs	r1, #0
 800bf04:	6139      	str	r1, [r7, #16]
 800bf06:	f003 0302 	and.w	r3, r3, #2
 800bf0a:	617b      	str	r3, [r7, #20]
 800bf0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf10:	460b      	mov	r3, r1
 800bf12:	4313      	orrs	r3, r2
 800bf14:	d036      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800bf16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00c      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bf22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bf26:	d113      	bne.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bf28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f002 f83e 	bl	800dfb0 <RCCEx_PLL2_Config>
 800bf34:	4603      	mov	r3, r0
 800bf36:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bf3a:	e00d      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bf3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf40:	332c      	adds	r3, #44	@ 0x2c
 800bf42:	4618      	mov	r0, r3
 800bf44:	f002 f8cc 	bl	800e0e0 <RCCEx_PLL3_Config>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bf4e:	e003      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bf56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf58:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10d      	bne.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800bf60:	4b48      	ldr	r3, [pc, #288]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bf62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800bf6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bf72:	4944      	ldr	r1, [pc, #272]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bf74:	4313      	orrs	r3, r2
 800bf76:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bf7a:	e003      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf7c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf80:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bf84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	60b9      	str	r1, [r7, #8]
 800bf90:	f003 0304 	and.w	r3, r3, #4
 800bf94:	60fb      	str	r3, [r7, #12]
 800bf96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	d024      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bfa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d108      	bne.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bfac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfb0:	332c      	adds	r3, #44	@ 0x2c
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f002 f894 	bl	800e0e0 <RCCEx_PLL3_Config>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800bfbe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10d      	bne.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800bfc6:	4b2f      	ldr	r3, [pc, #188]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bfc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bfcc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bfd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bfd8:	492a      	ldr	r1, [pc, #168]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bfe0:	e003      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfe2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bfe6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800bfea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff2:	2100      	movs	r1, #0
 800bff4:	6039      	str	r1, [r7, #0]
 800bff6:	f003 0308 	and.w	r3, r3, #8
 800bffa:	607b      	str	r3, [r7, #4]
 800bffc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c000:	460b      	mov	r3, r1
 800c002:	4313      	orrs	r3, r2
 800c004:	d036      	beq.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800c006:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c00a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c00e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c012:	d00d      	beq.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800c014:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c018:	d811      	bhi.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c01a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c01e:	d012      	beq.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c024:	d80b      	bhi.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00d      	beq.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c02a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c02e:	d106      	bne.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c030:	4b14      	ldr	r3, [pc, #80]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c034:	4a13      	ldr	r2, [pc, #76]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c03a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800c03c:	e004      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c044:	e000      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800c046:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c048:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10d      	bne.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800c050:	4b0c      	ldr	r3, [pc, #48]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c052:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c056:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c05a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c05e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c062:	4908      	ldr	r1, [pc, #32]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c064:	4313      	orrs	r3, r2
 800c066:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c06a:	e003      	b.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c06c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c070:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800c074:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800c078:	4618      	mov	r0, r3
 800c07a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c07e:	46bd      	mov	sp, r7
 800c080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c084:	46020c00 	.word	0x46020c00

0800c088 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c088:	b480      	push	{r7}
 800c08a:	b089      	sub	sp, #36	@ 0x24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800c090:	4ba6      	ldr	r3, [pc, #664]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c098:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c09a:	4ba4      	ldr	r3, [pc, #656]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c09e:	f003 0303 	and.w	r3, r3, #3
 800c0a2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800c0a4:	4ba1      	ldr	r3, [pc, #644]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0a8:	0a1b      	lsrs	r3, r3, #8
 800c0aa:	f003 030f 	and.w	r3, r3, #15
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c0b2:	4b9e      	ldr	r3, [pc, #632]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0b6:	091b      	lsrs	r3, r3, #4
 800c0b8:	f003 0301 	and.w	r3, r3, #1
 800c0bc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800c0be:	4b9b      	ldr	r3, [pc, #620]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c0c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0c2:	08db      	lsrs	r3, r3, #3
 800c0c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	fb02 f303 	mul.w	r3, r2, r3
 800c0ce:	ee07 3a90 	vmov	s15, r3
 800c0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d062      	beq.n	800c1a6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2b03      	cmp	r3, #3
 800c0e4:	f200 8081 	bhi.w	800c1ea <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d024      	beq.n	800c138 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d17a      	bne.n	800c1ea <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0fe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c330 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c106:	4b89      	ldr	r3, [pc, #548]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c116:	ed97 6a02 	vldr	s12, [r7, #8]
 800c11a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c122:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c136:	e08f      	b.n	800c258 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c138:	4b7c      	ldr	r3, [pc, #496]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d005      	beq.n	800c150 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800c144:	4b79      	ldr	r3, [pc, #484]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	0f1b      	lsrs	r3, r3, #28
 800c14a:	f003 030f 	and.w	r3, r3, #15
 800c14e:	e006      	b.n	800c15e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800c150:	4b76      	ldr	r3, [pc, #472]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c156:	041b      	lsls	r3, r3, #16
 800c158:	0f1b      	lsrs	r3, r3, #28
 800c15a:	f003 030f 	and.w	r3, r3, #15
 800c15e:	4a76      	ldr	r2, [pc, #472]	@ (800c338 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c164:	ee07 3a90 	vmov	s15, r3
 800c168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	ee07 3a90 	vmov	s15, r3
 800c172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	ee07 3a90 	vmov	s15, r3
 800c180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c184:	ed97 6a02 	vldr	s12, [r7, #8]
 800c188:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c18c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c194:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c198:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c19c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1a4:	e058      	b.n	800c258 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	ee07 3a90 	vmov	s15, r3
 800c1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c330 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c1b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1b8:	4b5c      	ldr	r3, [pc, #368]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c0:	ee07 3a90 	vmov	s15, r3
 800c1c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1c8:	ed97 6a02 	vldr	s12, [r7, #8]
 800c1cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c1d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c1d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c1e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1e8:	e036      	b.n	800c258 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c1ea:	4b50      	ldr	r3, [pc, #320]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d005      	beq.n	800c202 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800c1f6:	4b4d      	ldr	r3, [pc, #308]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	0f1b      	lsrs	r3, r3, #28
 800c1fc:	f003 030f 	and.w	r3, r3, #15
 800c200:	e006      	b.n	800c210 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800c202:	4b4a      	ldr	r3, [pc, #296]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c204:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c208:	041b      	lsls	r3, r3, #16
 800c20a:	0f1b      	lsrs	r3, r3, #28
 800c20c:	f003 030f 	and.w	r3, r3, #15
 800c210:	4a49      	ldr	r2, [pc, #292]	@ (800c338 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c216:	ee07 3a90 	vmov	s15, r3
 800c21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	ee07 3a90 	vmov	s15, r3
 800c224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	ee07 3a90 	vmov	s15, r3
 800c232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c236:	ed97 6a02 	vldr	s12, [r7, #8]
 800c23a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c256:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800c258:	4b34      	ldr	r3, [pc, #208]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c25c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d017      	beq.n	800c294 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c264:	4b31      	ldr	r3, [pc, #196]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c268:	0a5b      	lsrs	r3, r3, #9
 800c26a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c26e:	ee07 3a90 	vmov	s15, r3
 800c272:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800c276:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c27a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c27e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c28a:	ee17 2a90 	vmov	r2, s15
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	601a      	str	r2, [r3, #0]
 800c292:	e002      	b.n	800c29a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800c29a:	4b24      	ldr	r3, [pc, #144]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c29e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d017      	beq.n	800c2d6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c2a6:	4b21      	ldr	r3, [pc, #132]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c2a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2aa:	0c1b      	lsrs	r3, r3, #16
 800c2ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2b0:	ee07 3a90 	vmov	s15, r3
 800c2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800c2b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2bc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c2c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2cc:	ee17 2a90 	vmov	r2, s15
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	605a      	str	r2, [r3, #4]
 800c2d4:	e002      	b.n	800c2dc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800c2dc:	4b13      	ldr	r3, [pc, #76]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d017      	beq.n	800c318 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c2e8:	4b10      	ldr	r3, [pc, #64]	@ (800c32c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c2ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2ec:	0e1b      	lsrs	r3, r3, #24
 800c2ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2f2:	ee07 3a90 	vmov	s15, r3
 800c2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800c2fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2fe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c302:	edd7 6a07 	vldr	s13, [r7, #28]
 800c306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c30a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c30e:	ee17 2a90 	vmov	r2, s15
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c316:	e002      	b.n	800c31e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	609a      	str	r2, [r3, #8]
}
 800c31e:	bf00      	nop
 800c320:	3724      	adds	r7, #36	@ 0x24
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	46020c00 	.word	0x46020c00
 800c330:	4b742400 	.word	0x4b742400
 800c334:	46000000 	.word	0x46000000
 800c338:	080123e0 	.word	0x080123e0

0800c33c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b089      	sub	sp, #36	@ 0x24
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800c344:	4ba6      	ldr	r3, [pc, #664]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c34c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800c34e:	4ba4      	ldr	r3, [pc, #656]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c352:	f003 0303 	and.w	r3, r3, #3
 800c356:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800c358:	4ba1      	ldr	r3, [pc, #644]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35c:	0a1b      	lsrs	r3, r3, #8
 800c35e:	f003 030f 	and.w	r3, r3, #15
 800c362:	3301      	adds	r3, #1
 800c364:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800c366:	4b9e      	ldr	r3, [pc, #632]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36a:	091b      	lsrs	r3, r3, #4
 800c36c:	f003 0301 	and.w	r3, r3, #1
 800c370:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c372:	4b9b      	ldr	r3, [pc, #620]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c376:	08db      	lsrs	r3, r3, #3
 800c378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	fb02 f303 	mul.w	r3, r2, r3
 800c382:	ee07 3a90 	vmov	s15, r3
 800c386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c38a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	2b03      	cmp	r3, #3
 800c392:	d062      	beq.n	800c45a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	2b03      	cmp	r3, #3
 800c398:	f200 8081 	bhi.w	800c49e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d024      	beq.n	800c3ec <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d17a      	bne.n	800c49e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	ee07 3a90 	vmov	s15, r3
 800c3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3b2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c3b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ba:	4b89      	ldr	r3, [pc, #548]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c3bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3ce:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c3d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c3d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3ea:	e08f      	b.n	800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c3ec:	4b7c      	ldr	r3, [pc, #496]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d005      	beq.n	800c404 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c3f8:	4b79      	ldr	r3, [pc, #484]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	0f1b      	lsrs	r3, r3, #28
 800c3fe:	f003 030f 	and.w	r3, r3, #15
 800c402:	e006      	b.n	800c412 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c404:	4b76      	ldr	r3, [pc, #472]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c40a:	041b      	lsls	r3, r3, #16
 800c40c:	0f1b      	lsrs	r3, r3, #28
 800c40e:	f003 030f 	and.w	r3, r3, #15
 800c412:	4a76      	ldr	r2, [pc, #472]	@ (800c5ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c418:	ee07 3a90 	vmov	s15, r3
 800c41c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	ee07 3a90 	vmov	s15, r3
 800c426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	ee07 3a90 	vmov	s15, r3
 800c434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c438:	ed97 6a02 	vldr	s12, [r7, #8]
 800c43c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c44c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c450:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c454:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c458:	e058      	b.n	800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	ee07 3a90 	vmov	s15, r3
 800c460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c464:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c46c:	4b5c      	ldr	r3, [pc, #368]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c46e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c474:	ee07 3a90 	vmov	s15, r3
 800c478:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c47c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c480:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c484:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c488:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c48c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c490:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c494:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c498:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c49c:	e036      	b.n	800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c49e:	4b50      	ldr	r3, [pc, #320]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d005      	beq.n	800c4b6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c4aa:	4b4d      	ldr	r3, [pc, #308]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	0f1b      	lsrs	r3, r3, #28
 800c4b0:	f003 030f 	and.w	r3, r3, #15
 800c4b4:	e006      	b.n	800c4c4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c4b6:	4b4a      	ldr	r3, [pc, #296]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c4b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c4bc:	041b      	lsls	r3, r3, #16
 800c4be:	0f1b      	lsrs	r3, r3, #28
 800c4c0:	f003 030f 	and.w	r3, r3, #15
 800c4c4:	4a49      	ldr	r2, [pc, #292]	@ (800c5ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c4c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ca:	ee07 3a90 	vmov	s15, r3
 800c4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	ee07 3a90 	vmov	s15, r3
 800c4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	ee07 3a90 	vmov	s15, r3
 800c4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4ee:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c50a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c50c:	4b34      	ldr	r3, [pc, #208]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c50e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d017      	beq.n	800c548 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c518:	4b31      	ldr	r3, [pc, #196]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c51a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c51c:	0a5b      	lsrs	r3, r3, #9
 800c51e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c522:	ee07 3a90 	vmov	s15, r3
 800c526:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c52a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c52e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c532:	edd7 6a07 	vldr	s13, [r7, #28]
 800c536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c53a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c53e:	ee17 2a90 	vmov	r2, s15
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	e002      	b.n	800c54e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c54e:	4b24      	ldr	r3, [pc, #144]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c556:	2b00      	cmp	r3, #0
 800c558:	d017      	beq.n	800c58a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c55a:	4b21      	ldr	r3, [pc, #132]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c55c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c55e:	0c1b      	lsrs	r3, r3, #16
 800c560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c564:	ee07 3a90 	vmov	s15, r3
 800c568:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c56c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c570:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c574:	edd7 6a07 	vldr	s13, [r7, #28]
 800c578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c57c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c580:	ee17 2a90 	vmov	r2, s15
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	605a      	str	r2, [r3, #4]
 800c588:	e002      	b.n	800c590 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c590:	4b13      	ldr	r3, [pc, #76]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c594:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d017      	beq.n	800c5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c59c:	4b10      	ldr	r3, [pc, #64]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5a0:	0e1b      	lsrs	r3, r3, #24
 800c5a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5a6:	ee07 3a90 	vmov	s15, r3
 800c5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c5ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c5b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5c2:	ee17 2a90 	vmov	r2, s15
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c5ca:	e002      	b.n	800c5d2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	609a      	str	r2, [r3, #8]
}
 800c5d2:	bf00      	nop
 800c5d4:	3724      	adds	r7, #36	@ 0x24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	46020c00 	.word	0x46020c00
 800c5e4:	4b742400 	.word	0x4b742400
 800c5e8:	46000000 	.word	0x46000000
 800c5ec:	080123e0 	.word	0x080123e0

0800c5f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b089      	sub	sp, #36	@ 0x24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c5f8:	4ba6      	ldr	r3, [pc, #664]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c5fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c600:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c602:	4ba4      	ldr	r3, [pc, #656]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c606:	f003 0303 	and.w	r3, r3, #3
 800c60a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c60c:	4ba1      	ldr	r3, [pc, #644]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c60e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c610:	0a1b      	lsrs	r3, r3, #8
 800c612:	f003 030f 	and.w	r3, r3, #15
 800c616:	3301      	adds	r3, #1
 800c618:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c61a:	4b9e      	ldr	r3, [pc, #632]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c61c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c61e:	091b      	lsrs	r3, r3, #4
 800c620:	f003 0301 	and.w	r3, r3, #1
 800c624:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c626:	4b9b      	ldr	r3, [pc, #620]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c62a:	08db      	lsrs	r3, r3, #3
 800c62c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	fb02 f303 	mul.w	r3, r2, r3
 800c636:	ee07 3a90 	vmov	s15, r3
 800c63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2b03      	cmp	r3, #3
 800c646:	d062      	beq.n	800c70e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	f200 8081 	bhi.w	800c752 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d024      	beq.n	800c6a0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d17a      	bne.n	800c752 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	ee07 3a90 	vmov	s15, r3
 800c662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c666:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c66a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c66e:	4b89      	ldr	r3, [pc, #548]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c676:	ee07 3a90 	vmov	s15, r3
 800c67a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c67e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c682:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c89c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c686:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c68a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c68e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c692:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c69a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c69e:	e08f      	b.n	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c6a0:	4b7c      	ldr	r3, [pc, #496]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d005      	beq.n	800c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c6ac:	4b79      	ldr	r3, [pc, #484]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	0f1b      	lsrs	r3, r3, #28
 800c6b2:	f003 030f 	and.w	r3, r3, #15
 800c6b6:	e006      	b.n	800c6c6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c6b8:	4b76      	ldr	r3, [pc, #472]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c6ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c6be:	041b      	lsls	r3, r3, #16
 800c6c0:	0f1b      	lsrs	r3, r3, #28
 800c6c2:	f003 030f 	and.w	r3, r3, #15
 800c6c6:	4a76      	ldr	r2, [pc, #472]	@ (800c8a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6cc:	ee07 3a90 	vmov	s15, r3
 800c6d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	ee07 3a90 	vmov	s15, r3
 800c6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	ee07 3a90 	vmov	s15, r3
 800c6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ec:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6f0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c89c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c6f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c700:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c704:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c708:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c70c:	e058      	b.n	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	ee07 3a90 	vmov	s15, r3
 800c714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c718:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c71c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c720:	4b5c      	ldr	r3, [pc, #368]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c728:	ee07 3a90 	vmov	s15, r3
 800c72c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c730:	ed97 6a02 	vldr	s12, [r7, #8]
 800c734:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c89c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c738:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c73c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c740:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c744:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c750:	e036      	b.n	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c752:	4b50      	ldr	r3, [pc, #320]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d005      	beq.n	800c76a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c75e:	4b4d      	ldr	r3, [pc, #308]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	0f1b      	lsrs	r3, r3, #28
 800c764:	f003 030f 	and.w	r3, r3, #15
 800c768:	e006      	b.n	800c778 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c76a:	4b4a      	ldr	r3, [pc, #296]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c76c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c770:	041b      	lsls	r3, r3, #16
 800c772:	0f1b      	lsrs	r3, r3, #28
 800c774:	f003 030f 	and.w	r3, r3, #15
 800c778:	4a49      	ldr	r2, [pc, #292]	@ (800c8a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c77e:	ee07 3a90 	vmov	s15, r3
 800c782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	ee07 3a90 	vmov	s15, r3
 800c78c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	ee07 3a90 	vmov	s15, r3
 800c79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c79e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7a2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c89c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c7a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7be:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c7c0:	4b34      	ldr	r3, [pc, #208]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c7c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d017      	beq.n	800c7fc <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c7cc:	4b31      	ldr	r3, [pc, #196]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c7ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7d0:	0a5b      	lsrs	r3, r3, #9
 800c7d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7d6:	ee07 3a90 	vmov	s15, r3
 800c7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c7de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c7e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c7e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7f2:	ee17 2a90 	vmov	r2, s15
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	e002      	b.n	800c802 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c802:	4b24      	ldr	r3, [pc, #144]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d017      	beq.n	800c83e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c80e:	4b21      	ldr	r3, [pc, #132]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c812:	0c1b      	lsrs	r3, r3, #16
 800c814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c818:	ee07 3a90 	vmov	s15, r3
 800c81c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c820:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c824:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c828:	edd7 6a07 	vldr	s13, [r7, #28]
 800c82c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c834:	ee17 2a90 	vmov	r2, s15
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	605a      	str	r2, [r3, #4]
 800c83c:	e002      	b.n	800c844 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c844:	4b13      	ldr	r3, [pc, #76]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c848:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d017      	beq.n	800c880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c850:	4b10      	ldr	r3, [pc, #64]	@ (800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c854:	0e1b      	lsrs	r3, r3, #24
 800c856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c85a:	ee07 3a90 	vmov	s15, r3
 800c85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c862:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c866:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c86a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c86e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c876:	ee17 2a90 	vmov	r2, s15
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c87e:	e002      	b.n	800c886 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	609a      	str	r2, [r3, #8]
}
 800c886:	bf00      	nop
 800c888:	3724      	adds	r7, #36	@ 0x24
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	46020c00 	.word	0x46020c00
 800c898:	4b742400 	.word	0x4b742400
 800c89c:	46000000 	.word	0x46000000
 800c8a0:	080123e0 	.word	0x080123e0

0800c8a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b08e      	sub	sp, #56	@ 0x38
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c8ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c8b6:	430b      	orrs	r3, r1
 800c8b8:	d145      	bne.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c8ba:	4ba7      	ldr	r3, [pc, #668]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c8bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c8c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8c4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c8c6:	4ba4      	ldr	r3, [pc, #656]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c8c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c8cc:	f003 0302 	and.w	r3, r3, #2
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d108      	bne.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8da:	d104      	bne.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c8dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8e2:	f001 bb5a 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c8e6:	4b9c      	ldr	r3, [pc, #624]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c8e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c8ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c8f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8f4:	d114      	bne.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8fc:	d110      	bne.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c8fe:	4b96      	ldr	r3, [pc, #600]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c90c:	d103      	bne.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c90e:	23fa      	movs	r3, #250	@ 0xfa
 800c910:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c912:	f001 bb42 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c916:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c91a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c91c:	f001 bb3d 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c920:	4b8d      	ldr	r3, [pc, #564]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c92c:	d107      	bne.n	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c930:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c934:	d103      	bne.n	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c936:	4b89      	ldr	r3, [pc, #548]	@ (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c938:	637b      	str	r3, [r7, #52]	@ 0x34
 800c93a:	f001 bb2e 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c93e:	2300      	movs	r3, #0
 800c940:	637b      	str	r3, [r7, #52]	@ 0x34
 800c942:	f001 bb2a 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c94a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c94e:	430b      	orrs	r3, r1
 800c950:	d151      	bne.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c952:	4b81      	ldr	r3, [pc, #516]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c954:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c958:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c95c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c960:	2b80      	cmp	r3, #128	@ 0x80
 800c962:	d035      	beq.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c966:	2b80      	cmp	r3, #128	@ 0x80
 800c968:	d841      	bhi.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96c:	2b60      	cmp	r3, #96	@ 0x60
 800c96e:	d02a      	beq.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c972:	2b60      	cmp	r3, #96	@ 0x60
 800c974:	d83b      	bhi.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c978:	2b40      	cmp	r3, #64	@ 0x40
 800c97a:	d009      	beq.n	800c990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97e:	2b40      	cmp	r3, #64	@ 0x40
 800c980:	d835      	bhi.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00c      	beq.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98a:	2b20      	cmp	r3, #32
 800c98c:	d012      	beq.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c98e:	e02e      	b.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c994:	4618      	mov	r0, r3
 800c996:	f7ff fb77 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c99e:	f001 bafc 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9a2:	f107 0318 	add.w	r3, r7, #24
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7ff fcc8 	bl	800c33c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9b0:	f001 baf3 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9b4:	f107 030c 	add.w	r3, r7, #12
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7ff fe19 	bl	800c5f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9c2:	f001 baea 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c9c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c9ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9cc:	f001 bae5 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9d0:	4b61      	ldr	r3, [pc, #388]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9dc:	d103      	bne.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c9de:	4b60      	ldr	r3, [pc, #384]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c9e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c9e2:	f001 bada 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9ea:	f001 bad6 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9f2:	f001 bad2 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c9f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9fa:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c9fe:	430b      	orrs	r3, r1
 800ca00:	d158      	bne.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ca02:	4b55      	ldr	r3, [pc, #340]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ca04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ca08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ca0c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca14:	d03b      	beq.n	800ca8e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ca16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca1c:	d846      	bhi.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ca1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca24:	d02e      	beq.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800ca26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca2c:	d83e      	bhi.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca34:	d00b      	beq.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800ca36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca3c:	d836      	bhi.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00d      	beq.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ca44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca4a:	d012      	beq.n	800ca72 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800ca4c:	e02e      	b.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7ff fb18 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ca58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca5c:	f001 ba9d 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca60:	f107 0318 	add.w	r3, r7, #24
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7ff fc69 	bl	800c33c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca6e:	f001 ba94 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca72:	f107 030c 	add.w	r3, r7, #12
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff fdba 	bl	800c5f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca80:	f001 ba8b 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ca84:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ca88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca8a:	f001 ba86 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca8e:	4b32      	ldr	r3, [pc, #200]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca9a:	d103      	bne.n	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800ca9c:	4b30      	ldr	r3, [pc, #192]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ca9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800caa0:	f001 ba7b 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800caa4:	2300      	movs	r3, #0
 800caa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800caa8:	f001 ba77 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800caac:	2300      	movs	r3, #0
 800caae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cab0:	f001 ba73 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800cab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cab8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800cabc:	430b      	orrs	r3, r1
 800cabe:	d126      	bne.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800cac0:	4b25      	ldr	r3, [pc, #148]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cac2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800caca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800cacc:	4b22      	ldr	r3, [pc, #136]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cad8:	d106      	bne.n	800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800cada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d103      	bne.n	800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800cae0:	4b1f      	ldr	r3, [pc, #124]	@ (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cae2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cae4:	f001 ba59 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800cae8:	4b1b      	ldr	r3, [pc, #108]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800caf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caf4:	d107      	bne.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800caf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cafc:	d103      	bne.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800cafe:	4b19      	ldr	r3, [pc, #100]	@ (800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800cb00:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb02:	f001 ba4a 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb0a:	f001 ba46 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800cb0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb12:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800cb16:	430b      	orrs	r3, r1
 800cb18:	d16e      	bne.n	800cbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800cb1a:	4b0f      	ldr	r3, [pc, #60]	@ (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800cb1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb20:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800cb24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb28:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cb2c:	d03d      	beq.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb30:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cb34:	d85c      	bhi.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800cb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb3c:	d014      	beq.n	800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb44:	d854      	bhi.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800cb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d01f      	beq.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cb52:	d012      	beq.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800cb54:	e04c      	b.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800cb56:	bf00      	nop
 800cb58:	46020c00 	.word	0x46020c00
 800cb5c:	0007a120 	.word	0x0007a120
 800cb60:	00f42400 	.word	0x00f42400
 800cb64:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7ff fa8b 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb76:	f001 ba10 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb7a:	f107 0318 	add.w	r3, r7, #24
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7ff fbdc 	bl	800c33c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb88:	f001 ba07 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800cb8c:	4ba7      	ldr	r3, [pc, #668]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cb94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb98:	d103      	bne.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800cb9a:	4ba5      	ldr	r3, [pc, #660]	@ (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cb9c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cb9e:	f001 b9fc 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cba2:	2300      	movs	r3, #0
 800cba4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cba6:	f001 b9f8 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cbaa:	4ba0      	ldr	r3, [pc, #640]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f003 0320 	and.w	r3, r3, #32
 800cbb2:	2b20      	cmp	r3, #32
 800cbb4:	d118      	bne.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cbb6:	4b9d      	ldr	r3, [pc, #628]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d005      	beq.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800cbc2:	4b9a      	ldr	r3, [pc, #616]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	0e1b      	lsrs	r3, r3, #24
 800cbc8:	f003 030f 	and.w	r3, r3, #15
 800cbcc:	e006      	b.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800cbce:	4b97      	ldr	r3, [pc, #604]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cbd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cbd4:	041b      	lsls	r3, r3, #16
 800cbd6:	0e1b      	lsrs	r3, r3, #24
 800cbd8:	f003 030f 	and.w	r3, r3, #15
 800cbdc:	4a95      	ldr	r2, [pc, #596]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800cbde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbe2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cbe4:	f001 b9d9 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbec:	f001 b9d5 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbf4:	f001 b9d1 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cbf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbfc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800cc00:	430b      	orrs	r3, r1
 800cc02:	d17f      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cc04:	4b89      	ldr	r3, [pc, #548]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cc06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cc0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc0e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800cc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d165      	bne.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800cc16:	4b85      	ldr	r3, [pc, #532]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cc18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc1c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800cc20:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800cc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc24:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cc28:	d034      	beq.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cc30:	d853      	bhi.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800cc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc38:	d00b      	beq.n	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc40:	d84b      	bhi.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800cc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d016      	beq.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800cc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc4e:	d009      	beq.n	800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800cc50:	e043      	b.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7ff fa16 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc5e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cc60:	f001 b99b 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc64:	f107 0318 	add.w	r3, r7, #24
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7ff fb67 	bl	800c33c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cc72:	f001 b992 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800cc76:	4b6d      	ldr	r3, [pc, #436]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc82:	d103      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800cc84:	4b6a      	ldr	r3, [pc, #424]	@ (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cc86:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800cc88:	f001 b987 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cc90:	f001 b983 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cc94:	4b65      	ldr	r3, [pc, #404]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f003 0320 	and.w	r3, r3, #32
 800cc9c:	2b20      	cmp	r3, #32
 800cc9e:	d118      	bne.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cca0:	4b62      	ldr	r3, [pc, #392]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d005      	beq.n	800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800ccac:	4b5f      	ldr	r3, [pc, #380]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	0e1b      	lsrs	r3, r3, #24
 800ccb2:	f003 030f 	and.w	r3, r3, #15
 800ccb6:	e006      	b.n	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ccb8:	4b5c      	ldr	r3, [pc, #368]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ccba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ccbe:	041b      	lsls	r3, r3, #16
 800ccc0:	0e1b      	lsrs	r3, r3, #24
 800ccc2:	f003 030f 	and.w	r3, r3, #15
 800ccc6:	4a5b      	ldr	r2, [pc, #364]	@ (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ccc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cccc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ccce:	f001 b964 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ccd6:	f001 b960 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ccde:	f001 b95c 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800cce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cce8:	d108      	bne.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7ff f9ca 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccf8:	f001 b94f 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd00:	f001 b94b 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800cd04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd08:	1e51      	subs	r1, r2, #1
 800cd0a:	430b      	orrs	r3, r1
 800cd0c:	d136      	bne.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800cd0e:	4b47      	ldr	r3, [pc, #284]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cd10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cd14:	f003 0303 	and.w	r3, r3, #3
 800cd18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d104      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800cd20:	f7fe f994 	bl	800b04c <HAL_RCC_GetPCLK2Freq>
 800cd24:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd26:	f001 b938 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d104      	bne.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd30:	f7fe f85c 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800cd34:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd36:	f001 b930 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800cd3a:	4b3c      	ldr	r3, [pc, #240]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd46:	d106      	bne.n	800cd56 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800cd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d103      	bne.n	800cd56 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800cd4e:	4b3a      	ldr	r3, [pc, #232]	@ (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800cd50:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd52:	f001 b922 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800cd56:	4b35      	ldr	r3, [pc, #212]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cd58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd5c:	f003 0302 	and.w	r3, r3, #2
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d107      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800cd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d104      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800cd6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd70:	f001 b913 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800cd74:	2300      	movs	r3, #0
 800cd76:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd78:	f001 b90f 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800cd7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd80:	1e91      	subs	r1, r2, #2
 800cd82:	430b      	orrs	r3, r1
 800cd84:	d136      	bne.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800cd86:	4b29      	ldr	r3, [pc, #164]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cd88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cd8c:	f003 030c 	and.w	r3, r3, #12
 800cd90:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800cd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d104      	bne.n	800cda2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd98:	f7fe f944 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800cd9c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd9e:	f001 b8fc 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800cda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda4:	2b04      	cmp	r3, #4
 800cda6:	d104      	bne.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cda8:	f7fe f820 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800cdac:	6378      	str	r0, [r7, #52]	@ 0x34
 800cdae:	f001 b8f4 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800cdb2:	4b1e      	ldr	r3, [pc, #120]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdbe:	d106      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc2:	2b08      	cmp	r3, #8
 800cdc4:	d103      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800cdc6:	4b1c      	ldr	r3, [pc, #112]	@ (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800cdc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdca:	f001 b8e6 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800cdce:	4b17      	ldr	r3, [pc, #92]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cdd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cdd4:	f003 0302 	and.w	r3, r3, #2
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d107      	bne.n	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800cddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdde:	2b0c      	cmp	r3, #12
 800cde0:	d104      	bne.n	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800cde2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cde6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cde8:	f001 b8d7 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800cdec:	2300      	movs	r3, #0
 800cdee:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdf0:	f001 b8d3 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800cdf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf8:	1f11      	subs	r1, r2, #4
 800cdfa:	430b      	orrs	r3, r1
 800cdfc:	d13f      	bne.n	800ce7e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800cdfe:	4b0b      	ldr	r3, [pc, #44]	@ (800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ce00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ce08:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d104      	bne.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ce10:	f7fe f908 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800ce14:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce16:	f001 b8c0 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1c:	2b10      	cmp	r3, #16
 800ce1e:	d10d      	bne.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ce20:	f7fd ffe4 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800ce24:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce26:	f001 b8b8 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ce2a:	bf00      	nop
 800ce2c:	46020c00 	.word	0x46020c00
 800ce30:	02dc6c00 	.word	0x02dc6c00
 800ce34:	080123e0 	.word	0x080123e0
 800ce38:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ce3c:	4ba8      	ldr	r3, [pc, #672]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce48:	d106      	bne.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce4c:	2b20      	cmp	r3, #32
 800ce4e:	d103      	bne.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ce50:	4ba4      	ldr	r3, [pc, #656]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ce52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce54:	f001 b8a1 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ce58:	4ba1      	ldr	r3, [pc, #644]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce5e:	f003 0302 	and.w	r3, r3, #2
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d107      	bne.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ce66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce68:	2b30      	cmp	r3, #48	@ 0x30
 800ce6a:	d104      	bne.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800ce6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce70:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce72:	f001 b892 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800ce76:	2300      	movs	r3, #0
 800ce78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce7a:	f001 b88e 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800ce7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce82:	f1a2 0108 	sub.w	r1, r2, #8
 800ce86:	430b      	orrs	r3, r1
 800ce88:	d136      	bne.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ce8a:	4b95      	ldr	r3, [pc, #596]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce90:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ce94:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800ce96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d104      	bne.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ce9c:	f7fe f8c2 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800cea0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cea2:	f001 b87a 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800cea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea8:	2b40      	cmp	r3, #64	@ 0x40
 800ceaa:	d104      	bne.n	800ceb6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ceac:	f7fd ff9e 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800ceb0:	6378      	str	r0, [r7, #52]	@ 0x34
 800ceb2:	f001 b872 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ceb6:	4b8a      	ldr	r3, [pc, #552]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cec2:	d106      	bne.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800cec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec6:	2b80      	cmp	r3, #128	@ 0x80
 800cec8:	d103      	bne.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800ceca:	4b86      	ldr	r3, [pc, #536]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cecc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cece:	f001 b864 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800ced2:	4b83      	ldr	r3, [pc, #524]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ced4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ced8:	f003 0302 	and.w	r3, r3, #2
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d107      	bne.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee2:	2bc0      	cmp	r3, #192	@ 0xc0
 800cee4:	d104      	bne.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800cee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ceea:	637b      	str	r3, [r7, #52]	@ 0x34
 800ceec:	f001 b855 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cef0:	2300      	movs	r3, #0
 800cef2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef4:	f001 b851 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cefc:	f1a2 0110 	sub.w	r1, r2, #16
 800cf00:	430b      	orrs	r3, r1
 800cf02:	d139      	bne.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800cf04:	4b76      	ldr	r3, [pc, #472]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf0e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d104      	bne.n	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cf16:	f7fe f885 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800cf1a:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf1c:	f001 b83d 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf26:	d104      	bne.n	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cf28:	f7fd ff60 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800cf2c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf2e:	f001 b834 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800cf32:	4b6b      	ldr	r3, [pc, #428]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf3e:	d107      	bne.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800cf40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf46:	d103      	bne.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800cf48:	4b66      	ldr	r3, [pc, #408]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cf4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf4c:	f001 b825 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800cf50:	4b63      	ldr	r3, [pc, #396]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf56:	f003 0302 	and.w	r3, r3, #2
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	d108      	bne.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf64:	d104      	bne.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800cf66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf6c:	f001 b815 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cf70:	2300      	movs	r3, #0
 800cf72:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf74:	f001 b811 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800cf78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf7c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cf80:	430b      	orrs	r3, r1
 800cf82:	d139      	bne.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800cf84:	4b56      	ldr	r3, [pc, #344]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cf8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cf8e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800cf90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d104      	bne.n	800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cf96:	f7fe f845 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800cf9a:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf9c:	f000 bffd 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cfa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfa6:	d104      	bne.n	800cfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cfa8:	f7fd ff20 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800cfac:	6378      	str	r0, [r7, #52]	@ 0x34
 800cfae:	f000 bff4 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800cfb2:	4b4b      	ldr	r3, [pc, #300]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfbe:	d107      	bne.n	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfc6:	d103      	bne.n	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800cfc8:	4b46      	ldr	r3, [pc, #280]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cfca:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfcc:	f000 bfe5 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800cfd0:	4b43      	ldr	r3, [pc, #268]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cfd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfd6:	f003 0302 	and.w	r3, r3, #2
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d108      	bne.n	800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800cfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cfe4:	d104      	bne.n	800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800cfe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfea:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfec:	f000 bfd5 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cff4:	f000 bfd1 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800cff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cffc:	f1a2 0120 	sub.w	r1, r2, #32
 800d000:	430b      	orrs	r3, r1
 800d002:	d158      	bne.n	800d0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800d004:	4b36      	ldr	r3, [pc, #216]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d00a:	f003 0307 	and.w	r3, r3, #7
 800d00e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800d010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d012:	2b00      	cmp	r3, #0
 800d014:	d104      	bne.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800d016:	f7fe f82d 	bl	800b074 <HAL_RCC_GetPCLK3Freq>
 800d01a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d01c:	f000 bfbd 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800d020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d022:	2b01      	cmp	r3, #1
 800d024:	d104      	bne.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d026:	f7fd fee1 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800d02a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d02c:	f000 bfb5 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800d030:	4b2b      	ldr	r3, [pc, #172]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d03c:	d106      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800d03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d040:	2b02      	cmp	r3, #2
 800d042:	d103      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800d044:	4b27      	ldr	r3, [pc, #156]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d046:	637b      	str	r3, [r7, #52]	@ 0x34
 800d048:	f000 bfa7 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800d04c:	4b24      	ldr	r3, [pc, #144]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d04e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d052:	f003 0302 	and.w	r3, r3, #2
 800d056:	2b02      	cmp	r3, #2
 800d058:	d107      	bne.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800d05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05c:	2b03      	cmp	r3, #3
 800d05e:	d104      	bne.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800d060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d064:	637b      	str	r3, [r7, #52]	@ 0x34
 800d066:	f000 bf98 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800d06a:	4b1d      	ldr	r3, [pc, #116]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f003 0320 	and.w	r3, r3, #32
 800d072:	2b20      	cmp	r3, #32
 800d074:	d11b      	bne.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800d076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d118      	bne.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d07c:	4b18      	ldr	r3, [pc, #96]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d084:	2b00      	cmp	r3, #0
 800d086:	d005      	beq.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800d088:	4b15      	ldr	r3, [pc, #84]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	0e1b      	lsrs	r3, r3, #24
 800d08e:	f003 030f 	and.w	r3, r3, #15
 800d092:	e006      	b.n	800d0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800d094:	4b12      	ldr	r3, [pc, #72]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d09a:	041b      	lsls	r3, r3, #16
 800d09c:	0e1b      	lsrs	r3, r3, #24
 800d09e:	f003 030f 	and.w	r3, r3, #15
 800d0a2:	4a11      	ldr	r2, [pc, #68]	@ (800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0aa:	f000 bf76 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0b2:	f000 bf72 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800d0b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ba:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d0be:	430b      	orrs	r3, r1
 800d0c0:	d172      	bne.n	800d1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800d0c2:	4b07      	ldr	r3, [pc, #28]	@ (800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d0c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d0c8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d0cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0d4:	d10a      	bne.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d0d6:	f7fd fe89 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800d0da:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0dc:	f000 bf5d 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d0e0:	46020c00 	.word	0x46020c00
 800d0e4:	00f42400 	.word	0x00f42400
 800d0e8:	080123e0 	.word	0x080123e0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0f2:	d108      	bne.n	800d106 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0f4:	f107 0318 	add.w	r3, r7, #24
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7ff f91f 	bl	800c33c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800d0fe:	6a3b      	ldr	r3, [r7, #32]
 800d100:	637b      	str	r3, [r7, #52]	@ 0x34
 800d102:	f000 bf4a 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800d106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d104      	bne.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800d10c:	f7fd ff70 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800d110:	6378      	str	r0, [r7, #52]	@ 0x34
 800d112:	f000 bf42 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800d116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d118:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d11c:	d122      	bne.n	800d164 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d11e:	4bb0      	ldr	r3, [pc, #704]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 0320 	and.w	r3, r3, #32
 800d126:	2b20      	cmp	r3, #32
 800d128:	d118      	bne.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d12a:	4bad      	ldr	r3, [pc, #692]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d132:	2b00      	cmp	r3, #0
 800d134:	d005      	beq.n	800d142 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800d136:	4baa      	ldr	r3, [pc, #680]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	0e1b      	lsrs	r3, r3, #24
 800d13c:	f003 030f 	and.w	r3, r3, #15
 800d140:	e006      	b.n	800d150 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800d142:	4ba7      	ldr	r3, [pc, #668]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d148:	041b      	lsls	r3, r3, #16
 800d14a:	0e1b      	lsrs	r3, r3, #24
 800d14c:	f003 030f 	and.w	r3, r3, #15
 800d150:	4aa4      	ldr	r2, [pc, #656]	@ (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d156:	637b      	str	r3, [r7, #52]	@ 0x34
 800d158:	f000 bf1f 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d15c:	2300      	movs	r3, #0
 800d15e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d160:	f000 bf1b 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800d164:	4b9e      	ldr	r3, [pc, #632]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d16c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d170:	d107      	bne.n	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800d172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d174:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d178:	d103      	bne.n	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800d17a:	4b9b      	ldr	r3, [pc, #620]	@ (800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d17c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d17e:	f000 bf0c 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800d182:	4b97      	ldr	r3, [pc, #604]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d18a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d18e:	d107      	bne.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800d190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d196:	d103      	bne.n	800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800d198:	4b93      	ldr	r3, [pc, #588]	@ (800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d19a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d19c:	f000 befd 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1a4:	f000 bef9 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800d1a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ac:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d1b0:	430b      	orrs	r3, r1
 800d1b2:	d158      	bne.n	800d266 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800d1b4:	4b8a      	ldr	r3, [pc, #552]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d1b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d1ba:	f003 0307 	and.w	r3, r3, #7
 800d1be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d84b      	bhi.n	800d25e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800d1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800d1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1cc:	0800d205 	.word	0x0800d205
 800d1d0:	0800d1e1 	.word	0x0800d1e1
 800d1d4:	0800d1f3 	.word	0x0800d1f3
 800d1d8:	0800d20f 	.word	0x0800d20f
 800d1dc:	0800d219 	.word	0x0800d219
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fe ff4f 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1ee:	f000 bed4 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1f2:	f107 030c 	add.w	r3, r7, #12
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7ff f9fa 	bl	800c5f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d200:	f000 becb 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d204:	f7fd fef4 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800d208:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d20a:	f000 bec6 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d20e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d212:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d214:	f000 bec1 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d218:	4b71      	ldr	r3, [pc, #452]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f003 0320 	and.w	r3, r3, #32
 800d220:	2b20      	cmp	r3, #32
 800d222:	d118      	bne.n	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d224:	4b6e      	ldr	r3, [pc, #440]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d005      	beq.n	800d23c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800d230:	4b6b      	ldr	r3, [pc, #428]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	0e1b      	lsrs	r3, r3, #24
 800d236:	f003 030f 	and.w	r3, r3, #15
 800d23a:	e006      	b.n	800d24a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800d23c:	4b68      	ldr	r3, [pc, #416]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d23e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d242:	041b      	lsls	r3, r3, #16
 800d244:	0e1b      	lsrs	r3, r3, #24
 800d246:	f003 030f 	and.w	r3, r3, #15
 800d24a:	4a66      	ldr	r2, [pc, #408]	@ (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d250:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d252:	f000 bea2 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d256:	2300      	movs	r3, #0
 800d258:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d25a:	f000 be9e 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d25e:	2300      	movs	r3, #0
 800d260:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d262:	f000 be9a 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800d266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d26a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800d26e:	430b      	orrs	r3, r1
 800d270:	d167      	bne.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800d272:	4b5b      	ldr	r3, [pc, #364]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d278:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d27c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d280:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d284:	d036      	beq.n	800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800d286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d288:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d28c:	d855      	bhi.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d294:	d029      	beq.n	800d2ea <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d29c:	d84d      	bhi.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2a4:	d013      	beq.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2ac:	d845      	bhi.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d015      	beq.n	800d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2ba:	d13e      	bne.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fe fee1 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2ca:	f000 be66 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2ce:	f107 030c 	add.w	r3, r7, #12
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff f98c 	bl	800c5f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2dc:	f000 be5d 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d2e0:	f7fd fe86 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800d2e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d2e6:	f000 be58 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d2ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d2ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2f0:	f000 be53 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d2f4:	4b3a      	ldr	r3, [pc, #232]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f003 0320 	and.w	r3, r3, #32
 800d2fc:	2b20      	cmp	r3, #32
 800d2fe:	d118      	bne.n	800d332 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d300:	4b37      	ldr	r3, [pc, #220]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d005      	beq.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800d30c:	4b34      	ldr	r3, [pc, #208]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	0e1b      	lsrs	r3, r3, #24
 800d312:	f003 030f 	and.w	r3, r3, #15
 800d316:	e006      	b.n	800d326 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d318:	4b31      	ldr	r3, [pc, #196]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d31a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d31e:	041b      	lsls	r3, r3, #16
 800d320:	0e1b      	lsrs	r3, r3, #24
 800d322:	f003 030f 	and.w	r3, r3, #15
 800d326:	4a2f      	ldr	r2, [pc, #188]	@ (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d32c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d32e:	f000 be34 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d332:	2300      	movs	r3, #0
 800d334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d336:	f000 be30 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d33a:	2300      	movs	r3, #0
 800d33c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d33e:	f000 be2c 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800d342:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d346:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800d34a:	430b      	orrs	r3, r1
 800d34c:	d152      	bne.n	800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800d34e:	4b24      	ldr	r3, [pc, #144]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d354:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d358:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800d35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d104      	bne.n	800d36a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d360:	f7fd fe60 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800d364:	6378      	str	r0, [r7, #52]	@ 0x34
 800d366:	f000 be18 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800d36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d370:	d104      	bne.n	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d372:	f7fd fd3b 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800d376:	6378      	str	r0, [r7, #52]	@ 0x34
 800d378:	f000 be0f 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d37c:	4b18      	ldr	r3, [pc, #96]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d388:	d107      	bne.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800d38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d38c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d390:	d103      	bne.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800d392:	4b15      	ldr	r3, [pc, #84]	@ (800d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d394:	637b      	str	r3, [r7, #52]	@ 0x34
 800d396:	f000 be00 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d39a:	4b11      	ldr	r3, [pc, #68]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f003 0320 	and.w	r3, r3, #32
 800d3a2:	2b20      	cmp	r3, #32
 800d3a4:	d122      	bne.n	800d3ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d3ac:	d11e      	bne.n	800d3ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d005      	beq.n	800d3c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800d3ba:	4b09      	ldr	r3, [pc, #36]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	0e1b      	lsrs	r3, r3, #24
 800d3c0:	f003 030f 	and.w	r3, r3, #15
 800d3c4:	e006      	b.n	800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800d3c6:	4b06      	ldr	r3, [pc, #24]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d3c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3cc:	041b      	lsls	r3, r3, #16
 800d3ce:	0e1b      	lsrs	r3, r3, #24
 800d3d0:	f003 030f 	and.w	r3, r3, #15
 800d3d4:	4a03      	ldr	r2, [pc, #12]	@ (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3dc:	f000 bddd 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d3e0:	46020c00 	.word	0x46020c00
 800d3e4:	080123e0 	.word	0x080123e0
 800d3e8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3f0:	f000 bdd3 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d3f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3f8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d3fc:	430b      	orrs	r3, r1
 800d3fe:	d14c      	bne.n	800d49a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d400:	4ba8      	ldr	r3, [pc, #672]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d406:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d40a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d104      	bne.n	800d41c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d412:	f7fd fe07 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800d416:	6378      	str	r0, [r7, #52]	@ 0x34
 800d418:	f000 bdbf 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d422:	d104      	bne.n	800d42e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d424:	f7fd fce2 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800d428:	6378      	str	r0, [r7, #52]	@ 0x34
 800d42a:	f000 bdb6 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d42e:	4b9d      	ldr	r3, [pc, #628]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d43a:	d107      	bne.n	800d44c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d442:	d103      	bne.n	800d44c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d444:	4b98      	ldr	r3, [pc, #608]	@ (800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d446:	637b      	str	r3, [r7, #52]	@ 0x34
 800d448:	f000 bda7 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d44c:	4b95      	ldr	r3, [pc, #596]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f003 0320 	and.w	r3, r3, #32
 800d454:	2b20      	cmp	r3, #32
 800d456:	d11c      	bne.n	800d492 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d45e:	d118      	bne.n	800d492 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d460:	4b90      	ldr	r3, [pc, #576]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d005      	beq.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d46c:	4b8d      	ldr	r3, [pc, #564]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	0e1b      	lsrs	r3, r3, #24
 800d472:	f003 030f 	and.w	r3, r3, #15
 800d476:	e006      	b.n	800d486 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d478:	4b8a      	ldr	r3, [pc, #552]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d47a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d47e:	041b      	lsls	r3, r3, #16
 800d480:	0e1b      	lsrs	r3, r3, #24
 800d482:	f003 030f 	and.w	r3, r3, #15
 800d486:	4a89      	ldr	r2, [pc, #548]	@ (800d6ac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d48e:	f000 bd84 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d492:	2300      	movs	r3, #0
 800d494:	637b      	str	r3, [r7, #52]	@ 0x34
 800d496:	f000 bd80 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d49e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d4a2:	430b      	orrs	r3, r1
 800d4a4:	d158      	bne.n	800d558 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d4a6:	4b7f      	ldr	r3, [pc, #508]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d4a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d4ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d4b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b4:	2bc0      	cmp	r3, #192	@ 0xc0
 800d4b6:	d028      	beq.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800d4bc:	d848      	bhi.n	800d550 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c0:	2b80      	cmp	r3, #128	@ 0x80
 800d4c2:	d00e      	beq.n	800d4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c6:	2b80      	cmp	r3, #128	@ 0x80
 800d4c8:	d842      	bhi.n	800d550 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d003      	beq.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d2:	2b40      	cmp	r3, #64	@ 0x40
 800d4d4:	d014      	beq.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d4d6:	e03b      	b.n	800d550 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d4d8:	f7fd fdcc 	bl	800b074 <HAL_RCC_GetPCLK3Freq>
 800d4dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d4de:	f000 bd5c 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d4e2:	4b70      	ldr	r3, [pc, #448]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4ee:	d103      	bne.n	800d4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d4f0:	4b6d      	ldr	r3, [pc, #436]	@ (800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d4f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d4f4:	f000 bd51 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4fc:	f000 bd4d 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d500:	f7fd fc74 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800d504:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d506:	f000 bd48 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d50a:	4b66      	ldr	r3, [pc, #408]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f003 0320 	and.w	r3, r3, #32
 800d512:	2b20      	cmp	r3, #32
 800d514:	d118      	bne.n	800d548 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d516:	4b63      	ldr	r3, [pc, #396]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d005      	beq.n	800d52e <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d522:	4b60      	ldr	r3, [pc, #384]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	0e1b      	lsrs	r3, r3, #24
 800d528:	f003 030f 	and.w	r3, r3, #15
 800d52c:	e006      	b.n	800d53c <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d52e:	4b5d      	ldr	r3, [pc, #372]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d534:	041b      	lsls	r3, r3, #16
 800d536:	0e1b      	lsrs	r3, r3, #24
 800d538:	f003 030f 	and.w	r3, r3, #15
 800d53c:	4a5b      	ldr	r2, [pc, #364]	@ (800d6ac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d542:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d544:	f000 bd29 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d548:	2300      	movs	r3, #0
 800d54a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d54c:	f000 bd25 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d550:	2300      	movs	r3, #0
 800d552:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d554:	f000 bd21 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d55c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d560:	430b      	orrs	r3, r1
 800d562:	d14c      	bne.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d564:	4b4f      	ldr	r3, [pc, #316]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d56a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d56e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d572:	2b00      	cmp	r3, #0
 800d574:	d104      	bne.n	800d580 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d576:	f7fd fd55 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800d57a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d57c:	f000 bd0d 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d582:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d586:	d104      	bne.n	800d592 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d588:	f7fd fc30 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800d58c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d58e:	f000 bd04 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d592:	4b44      	ldr	r3, [pc, #272]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d59a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d59e:	d107      	bne.n	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d5a6:	d103      	bne.n	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d5a8:	4b3f      	ldr	r3, [pc, #252]	@ (800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d5aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5ac:	f000 bcf5 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d5b0:	4b3c      	ldr	r3, [pc, #240]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 0320 	and.w	r3, r3, #32
 800d5b8:	2b20      	cmp	r3, #32
 800d5ba:	d11c      	bne.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d5c2:	d118      	bne.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d5c4:	4b37      	ldr	r3, [pc, #220]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d005      	beq.n	800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d5d0:	4b34      	ldr	r3, [pc, #208]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	0e1b      	lsrs	r3, r3, #24
 800d5d6:	f003 030f 	and.w	r3, r3, #15
 800d5da:	e006      	b.n	800d5ea <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d5dc:	4b31      	ldr	r3, [pc, #196]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d5de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d5e2:	041b      	lsls	r3, r3, #16
 800d5e4:	0e1b      	lsrs	r3, r3, #24
 800d5e6:	f003 030f 	and.w	r3, r3, #15
 800d5ea:	4a30      	ldr	r2, [pc, #192]	@ (800d6ac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d5ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5f2:	f000 bcd2 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5fa:	f000 bcce 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d5fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d602:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d606:	430b      	orrs	r3, r1
 800d608:	d152      	bne.n	800d6b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d60a:	4b26      	ldr	r3, [pc, #152]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d60c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d610:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d614:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d104      	bne.n	800d626 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d61c:	f7fd fd02 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800d620:	6378      	str	r0, [r7, #52]	@ 0x34
 800d622:	f000 bcba 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d62c:	d104      	bne.n	800d638 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d62e:	f7fd fbdd 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800d632:	6378      	str	r0, [r7, #52]	@ 0x34
 800d634:	f000 bcb1 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d638:	4b1a      	ldr	r3, [pc, #104]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d644:	d107      	bne.n	800d656 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d648:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d64c:	d103      	bne.n	800d656 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d64e:	4b16      	ldr	r3, [pc, #88]	@ (800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d650:	637b      	str	r3, [r7, #52]	@ 0x34
 800d652:	f000 bca2 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d656:	4b13      	ldr	r3, [pc, #76]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f003 0320 	and.w	r3, r3, #32
 800d65e:	2b20      	cmp	r3, #32
 800d660:	d11c      	bne.n	800d69c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d664:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d668:	d118      	bne.n	800d69c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d66a:	4b0e      	ldr	r3, [pc, #56]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d672:	2b00      	cmp	r3, #0
 800d674:	d005      	beq.n	800d682 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d676:	4b0b      	ldr	r3, [pc, #44]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	0e1b      	lsrs	r3, r3, #24
 800d67c:	f003 030f 	and.w	r3, r3, #15
 800d680:	e006      	b.n	800d690 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d682:	4b08      	ldr	r3, [pc, #32]	@ (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d688:	041b      	lsls	r3, r3, #16
 800d68a:	0e1b      	lsrs	r3, r3, #24
 800d68c:	f003 030f 	and.w	r3, r3, #15
 800d690:	4a06      	ldr	r2, [pc, #24]	@ (800d6ac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d696:	637b      	str	r3, [r7, #52]	@ 0x34
 800d698:	f000 bc7f 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d69c:	2300      	movs	r3, #0
 800d69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6a0:	f000 bc7b 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d6a4:	46020c00 	.word	0x46020c00
 800d6a8:	00f42400 	.word	0x00f42400
 800d6ac:	080123e0 	.word	0x080123e0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d6b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6b4:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d6b8:	430b      	orrs	r3, r1
 800d6ba:	d14c      	bne.n	800d756 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d6bc:	4ba6      	ldr	r3, [pc, #664]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d6c2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d6c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d104      	bne.n	800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d6ce:	f7fd fca9 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800d6d2:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6d4:	f000 bc61 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d6de:	d104      	bne.n	800d6ea <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d6e0:	f7fd fb84 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800d6e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800d6e6:	f000 bc58 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d6ea:	4b9b      	ldr	r3, [pc, #620]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6f6:	d107      	bne.n	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d6fe:	d103      	bne.n	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d700:	4b96      	ldr	r3, [pc, #600]	@ (800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d702:	637b      	str	r3, [r7, #52]	@ 0x34
 800d704:	f000 bc49 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d708:	4b93      	ldr	r3, [pc, #588]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f003 0320 	and.w	r3, r3, #32
 800d710:	2b20      	cmp	r3, #32
 800d712:	d11c      	bne.n	800d74e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d716:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d71a:	d118      	bne.n	800d74e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d71c:	4b8e      	ldr	r3, [pc, #568]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d005      	beq.n	800d734 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d728:	4b8b      	ldr	r3, [pc, #556]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	0e1b      	lsrs	r3, r3, #24
 800d72e:	f003 030f 	and.w	r3, r3, #15
 800d732:	e006      	b.n	800d742 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d734:	4b88      	ldr	r3, [pc, #544]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d73a:	041b      	lsls	r3, r3, #16
 800d73c:	0e1b      	lsrs	r3, r3, #24
 800d73e:	f003 030f 	and.w	r3, r3, #15
 800d742:	4a87      	ldr	r2, [pc, #540]	@ (800d960 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d748:	637b      	str	r3, [r7, #52]	@ 0x34
 800d74a:	f000 bc26 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d74e:	2300      	movs	r3, #0
 800d750:	637b      	str	r3, [r7, #52]	@ 0x34
 800d752:	f000 bc22 	b.w	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d75a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d75e:	430b      	orrs	r3, r1
 800d760:	d164      	bne.n	800d82c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d762:	4b7d      	ldr	r3, [pc, #500]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d76c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d770:	2b00      	cmp	r3, #0
 800d772:	d120      	bne.n	800d7b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d774:	4b78      	ldr	r3, [pc, #480]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f003 0320 	and.w	r3, r3, #32
 800d77c:	2b20      	cmp	r3, #32
 800d77e:	d117      	bne.n	800d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d780:	4b75      	ldr	r3, [pc, #468]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d005      	beq.n	800d798 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d78c:	4b72      	ldr	r3, [pc, #456]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	0e1b      	lsrs	r3, r3, #24
 800d792:	f003 030f 	and.w	r3, r3, #15
 800d796:	e006      	b.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d798:	4b6f      	ldr	r3, [pc, #444]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d79a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d79e:	041b      	lsls	r3, r3, #16
 800d7a0:	0e1b      	lsrs	r3, r3, #24
 800d7a2:	f003 030f 	and.w	r3, r3, #15
 800d7a6:	4a6e      	ldr	r2, [pc, #440]	@ (800d960 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7ae:	e3f4      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7b4:	e3f1      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d7b6:	4b68      	ldr	r3, [pc, #416]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d7b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d7bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d7c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d7c4:	d112      	bne.n	800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7cc:	d10e      	bne.n	800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d7ce:	4b62      	ldr	r3, [pc, #392]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d7d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d7d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d7d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7dc:	d102      	bne.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d7de:	23fa      	movs	r3, #250	@ 0xfa
 800d7e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d7e2:	e3da      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d7e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d7e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d7ea:	e3d6      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d7ec:	4b5a      	ldr	r3, [pc, #360]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7f8:	d106      	bne.n	800d808 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d800:	d102      	bne.n	800d808 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d802:	4b56      	ldr	r3, [pc, #344]	@ (800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d804:	637b      	str	r3, [r7, #52]	@ 0x34
 800d806:	e3c8      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d808:	4b53      	ldr	r3, [pc, #332]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d80a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d80e:	f003 0302 	and.w	r3, r3, #2
 800d812:	2b02      	cmp	r3, #2
 800d814:	d107      	bne.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d81c:	d103      	bne.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d81e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d822:	637b      	str	r3, [r7, #52]	@ 0x34
 800d824:	e3b9      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d826:	2300      	movs	r3, #0
 800d828:	637b      	str	r3, [r7, #52]	@ 0x34
 800d82a:	e3b6      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d82c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d830:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d834:	430b      	orrs	r3, r1
 800d836:	d164      	bne.n	800d902 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d838:	4b47      	ldr	r3, [pc, #284]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d83a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d83e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d842:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d846:	2b00      	cmp	r3, #0
 800d848:	d120      	bne.n	800d88c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d84a:	4b43      	ldr	r3, [pc, #268]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f003 0320 	and.w	r3, r3, #32
 800d852:	2b20      	cmp	r3, #32
 800d854:	d117      	bne.n	800d886 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d856:	4b40      	ldr	r3, [pc, #256]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d005      	beq.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d862:	4b3d      	ldr	r3, [pc, #244]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	0e1b      	lsrs	r3, r3, #24
 800d868:	f003 030f 	and.w	r3, r3, #15
 800d86c:	e006      	b.n	800d87c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d86e:	4b3a      	ldr	r3, [pc, #232]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d874:	041b      	lsls	r3, r3, #16
 800d876:	0e1b      	lsrs	r3, r3, #24
 800d878:	f003 030f 	and.w	r3, r3, #15
 800d87c:	4a38      	ldr	r2, [pc, #224]	@ (800d960 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d87e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d882:	637b      	str	r3, [r7, #52]	@ 0x34
 800d884:	e389      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d886:	2300      	movs	r3, #0
 800d888:	637b      	str	r3, [r7, #52]	@ 0x34
 800d88a:	e386      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d88c:	4b32      	ldr	r3, [pc, #200]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d88e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d892:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d896:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d89a:	d112      	bne.n	800d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8a2:	d10e      	bne.n	800d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d8a4:	4b2c      	ldr	r3, [pc, #176]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d8a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d8ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8b2:	d102      	bne.n	800d8ba <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d8b4:	23fa      	movs	r3, #250	@ 0xfa
 800d8b6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d8b8:	e36f      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d8ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d8be:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d8c0:	e36b      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d8c2:	4b25      	ldr	r3, [pc, #148]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8ce:	d106      	bne.n	800d8de <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8d6:	d102      	bne.n	800d8de <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d8d8:	4b20      	ldr	r3, [pc, #128]	@ (800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d8da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8dc:	e35d      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d8de:	4b1e      	ldr	r3, [pc, #120]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d8e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8e4:	f003 0302 	and.w	r3, r3, #2
 800d8e8:	2b02      	cmp	r3, #2
 800d8ea:	d107      	bne.n	800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d8f2:	d103      	bne.n	800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d8f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8fa:	e34e      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800d900:	e34b      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d902:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d906:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d90a:	430b      	orrs	r3, r1
 800d90c:	d14e      	bne.n	800d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d90e:	4b12      	ldr	r3, [pc, #72]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d914:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d918:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d103      	bne.n	800d928 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d920:	f7fd fb80 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800d924:	6378      	str	r0, [r7, #52]	@ 0x34
 800d926:	e338      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d928:	4b0b      	ldr	r3, [pc, #44]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d92a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d92e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d936:	d119      	bne.n	800d96c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d93e:	d115      	bne.n	800d96c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d940:	4b05      	ldr	r3, [pc, #20]	@ (800d958 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d94a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d94e:	d109      	bne.n	800d964 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d950:	23fa      	movs	r3, #250	@ 0xfa
 800d952:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d954:	e321      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d956:	bf00      	nop
 800d958:	46020c00 	.word	0x46020c00
 800d95c:	00f42400 	.word	0x00f42400
 800d960:	080123e0 	.word	0x080123e0
      }
      else
      {
        frequency = LSI_VALUE;
 800d964:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d968:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d96a:	e316      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d96c:	4ba8      	ldr	r3, [pc, #672]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d978:	d106      	bne.n	800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d980:	d102      	bne.n	800d988 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d982:	4ba4      	ldr	r3, [pc, #656]	@ (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d984:	637b      	str	r3, [r7, #52]	@ 0x34
 800d986:	e308      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d988:	4ba1      	ldr	r3, [pc, #644]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d98a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d98e:	f003 0302 	and.w	r3, r3, #2
 800d992:	2b02      	cmp	r3, #2
 800d994:	d107      	bne.n	800d9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d998:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d99c:	d103      	bne.n	800d9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d99e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9a4:	e2f9      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9aa:	e2f6      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d9ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9b0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d9b4:	430b      	orrs	r3, r1
 800d9b6:	d12d      	bne.n	800da14 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d9b8:	4b95      	ldr	r3, [pc, #596]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d9ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d9be:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d9c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d9c4:	4b92      	ldr	r3, [pc, #584]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9d0:	d105      	bne.n	800d9de <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d102      	bne.n	800d9de <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d9d8:	4b8e      	ldr	r3, [pc, #568]	@ (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d9da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9dc:	e2dd      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d9e4:	d107      	bne.n	800d9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d9e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fe fb4c 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9f4:	e2d1      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d9fc:	d107      	bne.n	800da0e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9fe:	f107 0318 	add.w	r3, r7, #24
 800da02:	4618      	mov	r0, r3
 800da04:	f7fe fc9a 	bl	800c33c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800da0c:	e2c5      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800da0e:	2300      	movs	r3, #0
 800da10:	637b      	str	r3, [r7, #52]	@ 0x34
 800da12:	e2c2      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800da14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da18:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800da1c:	430b      	orrs	r3, r1
 800da1e:	d156      	bne.n	800dace <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800da20:	4b7b      	ldr	r3, [pc, #492]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800da22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800da26:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800da2a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800da2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da32:	d028      	beq.n	800da86 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800da34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da3a:	d845      	bhi.n	800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800da3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da42:	d013      	beq.n	800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800da44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da4a:	d83d      	bhi.n	800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800da4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d004      	beq.n	800da5c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800da52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da58:	d004      	beq.n	800da64 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800da5a:	e035      	b.n	800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800da5c:	f7fd faf6 	bl	800b04c <HAL_RCC_GetPCLK2Freq>
 800da60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da62:	e29a      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800da64:	f7fd f9c2 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800da68:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da6a:	e296      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800da6c:	4b68      	ldr	r3, [pc, #416]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da78:	d102      	bne.n	800da80 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800da7a:	4b66      	ldr	r3, [pc, #408]	@ (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800da7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800da7e:	e28c      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800da80:	2300      	movs	r3, #0
 800da82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da84:	e289      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800da86:	4b62      	ldr	r3, [pc, #392]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f003 0320 	and.w	r3, r3, #32
 800da8e:	2b20      	cmp	r3, #32
 800da90:	d117      	bne.n	800dac2 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800da92:	4b5f      	ldr	r3, [pc, #380]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d005      	beq.n	800daaa <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800da9e:	4b5c      	ldr	r3, [pc, #368]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	0e1b      	lsrs	r3, r3, #24
 800daa4:	f003 030f 	and.w	r3, r3, #15
 800daa8:	e006      	b.n	800dab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800daaa:	4b59      	ldr	r3, [pc, #356]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800daac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dab0:	041b      	lsls	r3, r3, #16
 800dab2:	0e1b      	lsrs	r3, r3, #24
 800dab4:	f003 030f 	and.w	r3, r3, #15
 800dab8:	4a57      	ldr	r2, [pc, #348]	@ (800dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800daba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dabe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dac0:	e26b      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dac2:	2300      	movs	r3, #0
 800dac4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dac6:	e268      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dac8:	2300      	movs	r3, #0
 800daca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dacc:	e265      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800dace:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dad2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800dad6:	430b      	orrs	r3, r1
 800dad8:	d156      	bne.n	800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800dada:	4b4d      	ldr	r3, [pc, #308]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800dadc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dae0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dae4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800dae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800daec:	d028      	beq.n	800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800daee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800daf4:	d845      	bhi.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800daf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dafc:	d013      	beq.n	800db26 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800dafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db04:	d83d      	bhi.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800db06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d004      	beq.n	800db16 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800db0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db12:	d004      	beq.n	800db1e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800db14:	e035      	b.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800db16:	f7fd fa85 	bl	800b024 <HAL_RCC_GetPCLK1Freq>
 800db1a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800db1c:	e23d      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800db1e:	f7fd f965 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800db22:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800db24:	e239      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800db26:	4b3a      	ldr	r3, [pc, #232]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db32:	d102      	bne.n	800db3a <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800db34:	4b37      	ldr	r3, [pc, #220]	@ (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800db36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800db38:	e22f      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800db3a:	2300      	movs	r3, #0
 800db3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db3e:	e22c      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800db40:	4b33      	ldr	r3, [pc, #204]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f003 0320 	and.w	r3, r3, #32
 800db48:	2b20      	cmp	r3, #32
 800db4a:	d117      	bne.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800db4c:	4b30      	ldr	r3, [pc, #192]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db54:	2b00      	cmp	r3, #0
 800db56:	d005      	beq.n	800db64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800db58:	4b2d      	ldr	r3, [pc, #180]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	0e1b      	lsrs	r3, r3, #24
 800db5e:	f003 030f 	and.w	r3, r3, #15
 800db62:	e006      	b.n	800db72 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800db64:	4b2a      	ldr	r3, [pc, #168]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800db66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800db6a:	041b      	lsls	r3, r3, #16
 800db6c:	0e1b      	lsrs	r3, r3, #24
 800db6e:	f003 030f 	and.w	r3, r3, #15
 800db72:	4a29      	ldr	r2, [pc, #164]	@ (800dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800db74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db78:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800db7a:	e20e      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800db7c:	2300      	movs	r3, #0
 800db7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db80:	e20b      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800db82:	2300      	movs	r3, #0
 800db84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db86:	e208      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800db88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db8c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800db90:	430b      	orrs	r3, r1
 800db92:	d17c      	bne.n	800dc8e <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800db94:	4b1e      	ldr	r3, [pc, #120]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800db96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800db9a:	f003 0318 	and.w	r3, r3, #24
 800db9e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800dba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba2:	2b18      	cmp	r3, #24
 800dba4:	d870      	bhi.n	800dc88 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800dba6:	a201      	add	r2, pc, #4	@ (adr r2, 800dbac <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800dba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbac:	0800dc1d 	.word	0x0800dc1d
 800dbb0:	0800dc89 	.word	0x0800dc89
 800dbb4:	0800dc89 	.word	0x0800dc89
 800dbb8:	0800dc89 	.word	0x0800dc89
 800dbbc:	0800dc89 	.word	0x0800dc89
 800dbc0:	0800dc89 	.word	0x0800dc89
 800dbc4:	0800dc89 	.word	0x0800dc89
 800dbc8:	0800dc89 	.word	0x0800dc89
 800dbcc:	0800dc25 	.word	0x0800dc25
 800dbd0:	0800dc89 	.word	0x0800dc89
 800dbd4:	0800dc89 	.word	0x0800dc89
 800dbd8:	0800dc89 	.word	0x0800dc89
 800dbdc:	0800dc89 	.word	0x0800dc89
 800dbe0:	0800dc89 	.word	0x0800dc89
 800dbe4:	0800dc89 	.word	0x0800dc89
 800dbe8:	0800dc89 	.word	0x0800dc89
 800dbec:	0800dc2d 	.word	0x0800dc2d
 800dbf0:	0800dc89 	.word	0x0800dc89
 800dbf4:	0800dc89 	.word	0x0800dc89
 800dbf8:	0800dc89 	.word	0x0800dc89
 800dbfc:	0800dc89 	.word	0x0800dc89
 800dc00:	0800dc89 	.word	0x0800dc89
 800dc04:	0800dc89 	.word	0x0800dc89
 800dc08:	0800dc89 	.word	0x0800dc89
 800dc0c:	0800dc47 	.word	0x0800dc47
 800dc10:	46020c00 	.word	0x46020c00
 800dc14:	00f42400 	.word	0x00f42400
 800dc18:	080123e0 	.word	0x080123e0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800dc1c:	f7fd fa2a 	bl	800b074 <HAL_RCC_GetPCLK3Freq>
 800dc20:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dc22:	e1ba      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800dc24:	f7fd f8e2 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800dc28:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dc2a:	e1b6      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dc2c:	4b9f      	ldr	r3, [pc, #636]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc38:	d102      	bne.n	800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800dc3a:	4b9d      	ldr	r3, [pc, #628]	@ (800deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800dc3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dc3e:	e1ac      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dc40:	2300      	movs	r3, #0
 800dc42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc44:	e1a9      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dc46:	4b99      	ldr	r3, [pc, #612]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f003 0320 	and.w	r3, r3, #32
 800dc4e:	2b20      	cmp	r3, #32
 800dc50:	d117      	bne.n	800dc82 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dc52:	4b96      	ldr	r3, [pc, #600]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d005      	beq.n	800dc6a <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800dc5e:	4b93      	ldr	r3, [pc, #588]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	0e1b      	lsrs	r3, r3, #24
 800dc64:	f003 030f 	and.w	r3, r3, #15
 800dc68:	e006      	b.n	800dc78 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800dc6a:	4b90      	ldr	r3, [pc, #576]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dc70:	041b      	lsls	r3, r3, #16
 800dc72:	0e1b      	lsrs	r3, r3, #24
 800dc74:	f003 030f 	and.w	r3, r3, #15
 800dc78:	4a8e      	ldr	r2, [pc, #568]	@ (800deb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800dc7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dc80:	e18b      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dc82:	2300      	movs	r3, #0
 800dc84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc86:	e188      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc8c:	e185      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800dc8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc92:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800dc96:	430b      	orrs	r3, r1
 800dc98:	d155      	bne.n	800dd46 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800dc9a:	4b84      	ldr	r3, [pc, #528]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dca0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800dca4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dcac:	d013      	beq.n	800dcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800dcae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dcb4:	d844      	bhi.n	800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dcbc:	d013      	beq.n	800dce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800dcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dcc4:	d83c      	bhi.n	800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d014      	beq.n	800dcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800dccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dcd2:	d014      	beq.n	800dcfe <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800dcd4:	e034      	b.n	800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcd6:	f107 0318 	add.w	r3, r7, #24
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fe fb2e 	bl	800c33c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dce4:	e159      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fe f9cc 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800dcf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dcf4:	e151      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800dcf6:	f7fd f879 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800dcfa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dcfc:	e14d      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dcfe:	4b6b      	ldr	r3, [pc, #428]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 0320 	and.w	r3, r3, #32
 800dd06:	2b20      	cmp	r3, #32
 800dd08:	d117      	bne.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dd0a:	4b68      	ldr	r3, [pc, #416]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d005      	beq.n	800dd22 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800dd16:	4b65      	ldr	r3, [pc, #404]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	0e1b      	lsrs	r3, r3, #24
 800dd1c:	f003 030f 	and.w	r3, r3, #15
 800dd20:	e006      	b.n	800dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800dd22:	4b62      	ldr	r3, [pc, #392]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dd28:	041b      	lsls	r3, r3, #16
 800dd2a:	0e1b      	lsrs	r3, r3, #24
 800dd2c:	f003 030f 	and.w	r3, r3, #15
 800dd30:	4a60      	ldr	r2, [pc, #384]	@ (800deb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800dd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dd38:	e12f      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dd3e:	e12c      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dd40:	2300      	movs	r3, #0
 800dd42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dd44:	e129      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800dd46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd4a:	1e59      	subs	r1, r3, #1
 800dd4c:	ea52 0301 	orrs.w	r3, r2, r1
 800dd50:	d13c      	bne.n	800ddcc <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800dd52:	4b56      	ldr	r3, [pc, #344]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd58:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800dd5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dd64:	d027      	beq.n	800ddb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800dd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dd6c:	d82b      	bhi.n	800ddc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dd74:	d017      	beq.n	800dda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800dd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dd7c:	d823      	bhi.n	800ddc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d004      	beq.n	800dd8e <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800dd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dd8a:	d004      	beq.n	800dd96 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800dd8c:	e01b      	b.n	800ddc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800dd8e:	f7fd f82d 	bl	800adec <HAL_RCC_GetSysClockFreq>
 800dd92:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dd94:	e101      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dd96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fe f974 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800dda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dda4:	e0f9      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dda6:	f107 0318 	add.w	r3, r7, #24
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fe fac6 	bl	800c33c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ddb4:	e0f1      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddb6:	f107 030c 	add.w	r3, r7, #12
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fe fc18 	bl	800c5f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ddc4:	e0e9      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ddca:	e0e6      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800ddcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddd0:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800ddd4:	430b      	orrs	r3, r1
 800ddd6:	d131      	bne.n	800de3c <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800ddd8:	4b34      	ldr	r3, [pc, #208]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ddda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ddde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dde2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800dde4:	4b31      	ldr	r3, [pc, #196]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dde6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ddea:	f003 0302 	and.w	r3, r3, #2
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d106      	bne.n	800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d103      	bne.n	800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800ddf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddfe:	e0cc      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800de00:	4b2a      	ldr	r3, [pc, #168]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800de02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800de06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de0e:	d112      	bne.n	800de36 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800de10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de16:	d10e      	bne.n	800de36 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800de18:	4b24      	ldr	r3, [pc, #144]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800de1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800de1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de26:	d102      	bne.n	800de2e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800de28:	23fa      	movs	r3, #250	@ 0xfa
 800de2a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800de2c:	e0b5      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800de2e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800de32:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800de34:	e0b1      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800de36:	2300      	movs	r3, #0
 800de38:	637b      	str	r3, [r7, #52]	@ 0x34
 800de3a:	e0ae      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800de3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de40:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800de44:	430b      	orrs	r3, r1
 800de46:	d13b      	bne.n	800dec0 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800de48:	4b18      	ldr	r3, [pc, #96]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800de4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800de4e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800de52:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800de54:	4b15      	ldr	r3, [pc, #84]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800de5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de60:	d105      	bne.n	800de6e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800de62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de64:	2b00      	cmp	r3, #0
 800de66:	d102      	bne.n	800de6e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800de68:	4b13      	ldr	r3, [pc, #76]	@ (800deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800de6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800de6c:	e095      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800de6e:	4b0f      	ldr	r3, [pc, #60]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800de76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de7a:	d106      	bne.n	800de8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800de7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de82:	d102      	bne.n	800de8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800de84:	4b0d      	ldr	r3, [pc, #52]	@ (800debc <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800de86:	637b      	str	r3, [r7, #52]	@ 0x34
 800de88:	e087      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800de8a:	4b08      	ldr	r3, [pc, #32]	@ (800deac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de96:	d106      	bne.n	800dea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800de98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de9e:	d102      	bne.n	800dea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800dea0:	4b03      	ldr	r3, [pc, #12]	@ (800deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800dea2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dea4:	e079      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800dea6:	2300      	movs	r3, #0
 800dea8:	637b      	str	r3, [r7, #52]	@ 0x34
 800deaa:	e076      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800deac:	46020c00 	.word	0x46020c00
 800deb0:	00f42400 	.word	0x00f42400
 800deb4:	080123e0 	.word	0x080123e0
 800deb8:	02dc6c00 	.word	0x02dc6c00
 800debc:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800dec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dec4:	1e99      	subs	r1, r3, #2
 800dec6:	ea52 0301 	orrs.w	r3, r2, r1
 800deca:	d120      	bne.n	800df0e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800decc:	4b35      	ldr	r3, [pc, #212]	@ (800dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ded2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ded6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ded8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d004      	beq.n	800dee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800dede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dee4:	d008      	beq.n	800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800dee6:	e00f      	b.n	800df08 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dee8:	f107 030c 	add.w	r3, r7, #12
 800deec:	4618      	mov	r0, r3
 800deee:	f7fe fb7f 	bl	800c5f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800def6:	e050      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800def8:	f107 0318 	add.w	r3, r7, #24
 800defc:	4618      	mov	r0, r3
 800defe:	f7fe fa1d 	bl	800c33c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800df02:	6a3b      	ldr	r3, [r7, #32]
 800df04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800df06:	e048      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800df08:	2300      	movs	r3, #0
 800df0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800df0c:	e045      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800df0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df12:	f1a3 0108 	sub.w	r1, r3, #8
 800df16:	ea52 0301 	orrs.w	r3, r2, r1
 800df1a:	d13c      	bne.n	800df96 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800df1c:	4b21      	ldr	r3, [pc, #132]	@ (800dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800df1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800df22:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800df26:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800df28:	4b1e      	ldr	r3, [pc, #120]	@ (800dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df34:	d105      	bne.n	800df42 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800df36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d102      	bne.n	800df42 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800df3c:	4b1a      	ldr	r3, [pc, #104]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800df3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800df40:	e02b      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800df42:	4b18      	ldr	r3, [pc, #96]	@ (800dfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df4e:	d106      	bne.n	800df5e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800df50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800df56:	d102      	bne.n	800df5e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800df58:	4b14      	ldr	r3, [pc, #80]	@ (800dfac <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800df5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800df5c:	e01d      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800df5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df64:	d107      	bne.n	800df76 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fe f88c 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800df70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df72:	637b      	str	r3, [r7, #52]	@ 0x34
 800df74:	e011      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800df76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df78:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800df7c:	d108      	bne.n	800df90 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df82:	4618      	mov	r0, r3
 800df84:	f7fe f880 	bl	800c088 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800df88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df8a:	085b      	lsrs	r3, r3, #1
 800df8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800df8e:	e004      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800df90:	2300      	movs	r3, #0
 800df92:	637b      	str	r3, [r7, #52]	@ 0x34
 800df94:	e001      	b.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800df96:	2300      	movs	r3, #0
 800df98:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800df9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3738      	adds	r7, #56	@ 0x38
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	46020c00 	.word	0x46020c00
 800dfa8:	00f42400 	.word	0x00f42400
 800dfac:	007a1200 	.word	0x007a1200

0800dfb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800dfb8:	4b47      	ldr	r3, [pc, #284]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a46      	ldr	r2, [pc, #280]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800dfbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dfc2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dfc4:	f7f4 fffc 	bl	8002fc0 <HAL_GetTick>
 800dfc8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dfca:	e008      	b.n	800dfde <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dfcc:	f7f4 fff8 	bl	8002fc0 <HAL_GetTick>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	2b02      	cmp	r3, #2
 800dfd8:	d901      	bls.n	800dfde <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dfda:	2303      	movs	r3, #3
 800dfdc:	e077      	b.n	800e0ce <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dfde:	4b3e      	ldr	r3, [pc, #248]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1f0      	bne.n	800dfcc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800dfea:	4b3b      	ldr	r3, [pc, #236]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800dfec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dff2:	f023 0303 	bic.w	r3, r3, #3
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	6811      	ldr	r1, [r2, #0]
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	6852      	ldr	r2, [r2, #4]
 800dffe:	3a01      	subs	r2, #1
 800e000:	0212      	lsls	r2, r2, #8
 800e002:	430a      	orrs	r2, r1
 800e004:	4934      	ldr	r1, [pc, #208]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e006:	4313      	orrs	r3, r2
 800e008:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800e00a:	4b33      	ldr	r3, [pc, #204]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e00c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e00e:	4b33      	ldr	r3, [pc, #204]	@ (800e0dc <RCCEx_PLL2_Config+0x12c>)
 800e010:	4013      	ands	r3, r2
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	6892      	ldr	r2, [r2, #8]
 800e016:	3a01      	subs	r2, #1
 800e018:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	68d2      	ldr	r2, [r2, #12]
 800e020:	3a01      	subs	r2, #1
 800e022:	0252      	lsls	r2, r2, #9
 800e024:	b292      	uxth	r2, r2
 800e026:	4311      	orrs	r1, r2
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	6912      	ldr	r2, [r2, #16]
 800e02c:	3a01      	subs	r2, #1
 800e02e:	0412      	lsls	r2, r2, #16
 800e030:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e034:	4311      	orrs	r1, r2
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	6952      	ldr	r2, [r2, #20]
 800e03a:	3a01      	subs	r2, #1
 800e03c:	0612      	lsls	r2, r2, #24
 800e03e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e042:	430a      	orrs	r2, r1
 800e044:	4924      	ldr	r1, [pc, #144]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e046:	4313      	orrs	r3, r2
 800e048:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800e04a:	4b23      	ldr	r3, [pc, #140]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e04e:	f023 020c 	bic.w	r2, r3, #12
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	699b      	ldr	r3, [r3, #24]
 800e056:	4920      	ldr	r1, [pc, #128]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e058:	4313      	orrs	r3, r2
 800e05a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800e05c:	4b1e      	ldr	r3, [pc, #120]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6a1b      	ldr	r3, [r3, #32]
 800e064:	491c      	ldr	r1, [pc, #112]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e066:	4313      	orrs	r3, r2
 800e068:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800e06a:	4b1b      	ldr	r3, [pc, #108]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e06e:	4a1a      	ldr	r2, [pc, #104]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e070:	f023 0310 	bic.w	r3, r3, #16
 800e074:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e076:	4b18      	ldr	r3, [pc, #96]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e07a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e07e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	69d2      	ldr	r2, [r2, #28]
 800e086:	00d2      	lsls	r2, r2, #3
 800e088:	4913      	ldr	r1, [pc, #76]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e08a:	4313      	orrs	r3, r2
 800e08c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800e08e:	4b12      	ldr	r3, [pc, #72]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e092:	4a11      	ldr	r2, [pc, #68]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e094:	f043 0310 	orr.w	r3, r3, #16
 800e098:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800e09a:	4b0f      	ldr	r3, [pc, #60]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a0e      	ldr	r2, [pc, #56]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e0a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e0a4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e0a6:	f7f4 ff8b 	bl	8002fc0 <HAL_GetTick>
 800e0aa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e0ac:	e008      	b.n	800e0c0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e0ae:	f7f4 ff87 	bl	8002fc0 <HAL_GetTick>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d901      	bls.n	800e0c0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e0bc:	2303      	movs	r3, #3
 800e0be:	e006      	b.n	800e0ce <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e0c0:	4b05      	ldr	r3, [pc, #20]	@ (800e0d8 <RCCEx_PLL2_Config+0x128>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d0f0      	beq.n	800e0ae <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800e0cc:	2300      	movs	r3, #0

}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	46020c00 	.word	0x46020c00
 800e0dc:	80800000 	.word	0x80800000

0800e0e0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800e0e8:	4b47      	ldr	r3, [pc, #284]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a46      	ldr	r2, [pc, #280]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e0ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e0f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e0f4:	f7f4 ff64 	bl	8002fc0 <HAL_GetTick>
 800e0f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e0fa:	e008      	b.n	800e10e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e0fc:	f7f4 ff60 	bl	8002fc0 <HAL_GetTick>
 800e100:	4602      	mov	r2, r0
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	1ad3      	subs	r3, r2, r3
 800e106:	2b02      	cmp	r3, #2
 800e108:	d901      	bls.n	800e10e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e10a:	2303      	movs	r3, #3
 800e10c:	e077      	b.n	800e1fe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e10e:	4b3e      	ldr	r3, [pc, #248]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1f0      	bne.n	800e0fc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800e11a:	4b3b      	ldr	r3, [pc, #236]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e11c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e11e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e122:	f023 0303 	bic.w	r3, r3, #3
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	6811      	ldr	r1, [r2, #0]
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	6852      	ldr	r2, [r2, #4]
 800e12e:	3a01      	subs	r2, #1
 800e130:	0212      	lsls	r2, r2, #8
 800e132:	430a      	orrs	r2, r1
 800e134:	4934      	ldr	r1, [pc, #208]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e136:	4313      	orrs	r3, r2
 800e138:	630b      	str	r3, [r1, #48]	@ 0x30
 800e13a:	4b33      	ldr	r3, [pc, #204]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e13c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e13e:	4b33      	ldr	r3, [pc, #204]	@ (800e20c <RCCEx_PLL3_Config+0x12c>)
 800e140:	4013      	ands	r3, r2
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	6892      	ldr	r2, [r2, #8]
 800e146:	3a01      	subs	r2, #1
 800e148:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	68d2      	ldr	r2, [r2, #12]
 800e150:	3a01      	subs	r2, #1
 800e152:	0252      	lsls	r2, r2, #9
 800e154:	b292      	uxth	r2, r2
 800e156:	4311      	orrs	r1, r2
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	6912      	ldr	r2, [r2, #16]
 800e15c:	3a01      	subs	r2, #1
 800e15e:	0412      	lsls	r2, r2, #16
 800e160:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e164:	4311      	orrs	r1, r2
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	6952      	ldr	r2, [r2, #20]
 800e16a:	3a01      	subs	r2, #1
 800e16c:	0612      	lsls	r2, r2, #24
 800e16e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e172:	430a      	orrs	r2, r1
 800e174:	4924      	ldr	r1, [pc, #144]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e176:	4313      	orrs	r3, r2
 800e178:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800e17a:	4b23      	ldr	r3, [pc, #140]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e17e:	f023 020c 	bic.w	r2, r3, #12
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	699b      	ldr	r3, [r3, #24]
 800e186:	4920      	ldr	r1, [pc, #128]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e188:	4313      	orrs	r3, r2
 800e18a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800e18c:	4b1e      	ldr	r3, [pc, #120]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e18e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a1b      	ldr	r3, [r3, #32]
 800e194:	491c      	ldr	r1, [pc, #112]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e196:	4313      	orrs	r3, r2
 800e198:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800e19a:	4b1b      	ldr	r3, [pc, #108]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e19c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e19e:	4a1a      	ldr	r2, [pc, #104]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e1a0:	f023 0310 	bic.w	r3, r3, #16
 800e1a4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e1a6:	4b18      	ldr	r3, [pc, #96]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e1a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e1ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	69d2      	ldr	r2, [r2, #28]
 800e1b6:	00d2      	lsls	r2, r2, #3
 800e1b8:	4913      	ldr	r1, [pc, #76]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800e1be:	4b12      	ldr	r3, [pc, #72]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e1c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1c2:	4a11      	ldr	r2, [pc, #68]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e1c4:	f043 0310 	orr.w	r3, r3, #16
 800e1c8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800e1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a0e      	ldr	r2, [pc, #56]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e1d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e1d4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e1d6:	f7f4 fef3 	bl	8002fc0 <HAL_GetTick>
 800e1da:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e1dc:	e008      	b.n	800e1f0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e1de:	f7f4 feef 	bl	8002fc0 <HAL_GetTick>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	d901      	bls.n	800e1f0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e1ec:	2303      	movs	r3, #3
 800e1ee:	e006      	b.n	800e1fe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e1f0:	4b05      	ldr	r3, [pc, #20]	@ (800e208 <RCCEx_PLL3_Config+0x128>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d0f0      	beq.n	800e1de <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	46020c00 	.word	0x46020c00
 800e20c:	80800000 	.word	0x80800000

0800e210 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d071      	beq.n	800e306 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d106      	bne.n	800e23c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2200      	movs	r2, #0
 800e232:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7f4 f962 	bl	8002500 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2202      	movs	r2, #2
 800e240:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e244:	4b32      	ldr	r3, [pc, #200]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	f003 0310 	and.w	r3, r3, #16
 800e24c:	2b10      	cmp	r3, #16
 800e24e:	d051      	beq.n	800e2f4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e250:	4b2f      	ldr	r3, [pc, #188]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e252:	22ca      	movs	r2, #202	@ 0xca
 800e254:	625a      	str	r2, [r3, #36]	@ 0x24
 800e256:	4b2e      	ldr	r3, [pc, #184]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e258:	2253      	movs	r2, #83	@ 0x53
 800e25a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 f88b 	bl	800e378 <RTC_EnterInitMode>
 800e262:	4603      	mov	r3, r0
 800e264:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800e266:	7bfb      	ldrb	r3, [r7, #15]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d13f      	bne.n	800e2ec <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800e26c:	4b28      	ldr	r3, [pc, #160]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	4a27      	ldr	r2, [pc, #156]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e272:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800e276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e27a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800e27c:	4b24      	ldr	r3, [pc, #144]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e27e:	699a      	ldr	r2, [r3, #24]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6859      	ldr	r1, [r3, #4]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	4319      	orrs	r1, r3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	699b      	ldr	r3, [r3, #24]
 800e28e:	430b      	orrs	r3, r1
 800e290:	491f      	ldr	r1, [pc, #124]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e292:	4313      	orrs	r3, r2
 800e294:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68da      	ldr	r2, [r3, #12]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	041b      	lsls	r3, r3, #16
 800e2a0:	491b      	ldr	r1, [pc, #108]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800e2a6:	4b1a      	ldr	r3, [pc, #104]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2b6:	430b      	orrs	r3, r1
 800e2b8:	4915      	ldr	r1, [pc, #84]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 f896 	bl	800e3f0 <RTC_ExitInitMode>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800e2c8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10e      	bne.n	800e2ec <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800e2ce:	4b10      	ldr	r3, [pc, #64]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e2d0:	699b      	ldr	r3, [r3, #24]
 800e2d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6a19      	ldr	r1, [r3, #32]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	69db      	ldr	r3, [r3, #28]
 800e2de:	4319      	orrs	r1, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	430b      	orrs	r3, r1
 800e2e6:	490a      	ldr	r1, [pc, #40]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e2ec:	4b08      	ldr	r3, [pc, #32]	@ (800e310 <HAL_RTC_Init+0x100>)
 800e2ee:	22ff      	movs	r2, #255	@ 0xff
 800e2f0:	625a      	str	r2, [r3, #36]	@ 0x24
 800e2f2:	e001      	b.n	800e2f8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d103      	bne.n	800e306 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2201      	movs	r2, #1
 800e302:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800e306:	7bfb      	ldrb	r3, [r7, #15]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	46007800 	.word	0x46007800

0800e314 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800e31c:	4b15      	ldr	r3, [pc, #84]	@ (800e374 <HAL_RTC_WaitForSynchro+0x60>)
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	4a14      	ldr	r2, [pc, #80]	@ (800e374 <HAL_RTC_WaitForSynchro+0x60>)
 800e322:	f023 0320 	bic.w	r3, r3, #32
 800e326:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800e328:	f7f4 fe4a 	bl	8002fc0 <HAL_GetTick>
 800e32c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e32e:	e013      	b.n	800e358 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e330:	f7f4 fe46 	bl	8002fc0 <HAL_GetTick>
 800e334:	4602      	mov	r2, r0
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e33e:	d90b      	bls.n	800e358 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e340:	4b0c      	ldr	r3, [pc, #48]	@ (800e374 <HAL_RTC_WaitForSynchro+0x60>)
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	f003 0320 	and.w	r3, r3, #32
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d10c      	bne.n	800e366 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2203      	movs	r2, #3
 800e350:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800e354:	2303      	movs	r3, #3
 800e356:	e008      	b.n	800e36a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e358:	4b06      	ldr	r3, [pc, #24]	@ (800e374 <HAL_RTC_WaitForSynchro+0x60>)
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	f003 0320 	and.w	r3, r3, #32
 800e360:	2b00      	cmp	r3, #0
 800e362:	d0e5      	beq.n	800e330 <HAL_RTC_WaitForSynchro+0x1c>
 800e364:	e000      	b.n	800e368 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800e366:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	46007800 	.word	0x46007800

0800e378 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e380:	2300      	movs	r3, #0
 800e382:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e384:	4b19      	ldr	r3, [pc, #100]	@ (800e3ec <RTC_EnterInitMode+0x74>)
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d128      	bne.n	800e3e2 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e390:	4b16      	ldr	r3, [pc, #88]	@ (800e3ec <RTC_EnterInitMode+0x74>)
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	4a15      	ldr	r2, [pc, #84]	@ (800e3ec <RTC_EnterInitMode+0x74>)
 800e396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e39a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e39c:	f7f4 fe10 	bl	8002fc0 <HAL_GetTick>
 800e3a0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e3a2:	e013      	b.n	800e3cc <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e3a4:	f7f4 fe0c 	bl	8002fc0 <HAL_GetTick>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	1ad3      	subs	r3, r2, r3
 800e3ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e3b2:	d90b      	bls.n	800e3cc <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e3b4:	4b0d      	ldr	r3, [pc, #52]	@ (800e3ec <RTC_EnterInitMode+0x74>)
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d10f      	bne.n	800e3e0 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e3c0:	2303      	movs	r3, #3
 800e3c2:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2203      	movs	r2, #3
 800e3c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e3cc:	4b07      	ldr	r3, [pc, #28]	@ (800e3ec <RTC_EnterInitMode+0x74>)
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d104      	bne.n	800e3e2 <RTC_EnterInitMode+0x6a>
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	2b03      	cmp	r3, #3
 800e3dc:	d1e2      	bne.n	800e3a4 <RTC_EnterInitMode+0x2c>
 800e3de:	e000      	b.n	800e3e2 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e3e0:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	46007800 	.word	0x46007800

0800e3f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e3fc:	4b1a      	ldr	r3, [pc, #104]	@ (800e468 <RTC_ExitInitMode+0x78>)
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	4a19      	ldr	r2, [pc, #100]	@ (800e468 <RTC_ExitInitMode+0x78>)
 800e402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e406:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e408:	4b17      	ldr	r3, [pc, #92]	@ (800e468 <RTC_ExitInitMode+0x78>)
 800e40a:	699b      	ldr	r3, [r3, #24]
 800e40c:	f003 0320 	and.w	r3, r3, #32
 800e410:	2b00      	cmp	r3, #0
 800e412:	d10c      	bne.n	800e42e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff ff7d 	bl	800e314 <HAL_RTC_WaitForSynchro>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d01e      	beq.n	800e45e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2203      	movs	r2, #3
 800e424:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e428:	2303      	movs	r3, #3
 800e42a:	73fb      	strb	r3, [r7, #15]
 800e42c:	e017      	b.n	800e45e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e42e:	4b0e      	ldr	r3, [pc, #56]	@ (800e468 <RTC_ExitInitMode+0x78>)
 800e430:	699b      	ldr	r3, [r3, #24]
 800e432:	4a0d      	ldr	r2, [pc, #52]	@ (800e468 <RTC_ExitInitMode+0x78>)
 800e434:	f023 0320 	bic.w	r3, r3, #32
 800e438:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7ff ff6a 	bl	800e314 <HAL_RTC_WaitForSynchro>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d005      	beq.n	800e452 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2203      	movs	r2, #3
 800e44a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e44e:	2303      	movs	r3, #3
 800e450:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e452:	4b05      	ldr	r3, [pc, #20]	@ (800e468 <RTC_ExitInitMode+0x78>)
 800e454:	699b      	ldr	r3, [r3, #24]
 800e456:	4a04      	ldr	r2, [pc, #16]	@ (800e468 <RTC_ExitInitMode+0x78>)
 800e458:	f043 0320 	orr.w	r3, r3, #32
 800e45c:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3710      	adds	r7, #16
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	46007800 	.word	0x46007800

0800e46c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	4910      	ldr	r1, [pc, #64]	@ (800e4c0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e480:	4313      	orrs	r3, r2
 800e482:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	689a      	ldr	r2, [r3, #8]
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	431a      	orrs	r2, r3
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	699b      	ldr	r3, [r3, #24]
 800e492:	490c      	ldr	r1, [pc, #48]	@ (800e4c4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e494:	4313      	orrs	r3, r2
 800e496:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e498:	4b0a      	ldr	r3, [pc, #40]	@ (800e4c4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e49a:	6a1b      	ldr	r3, [r3, #32]
 800e49c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	6919      	ldr	r1, [r3, #16]
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	041b      	lsls	r3, r3, #16
 800e4aa:	430b      	orrs	r3, r1
 800e4ac:	4905      	ldr	r1, [pc, #20]	@ (800e4c4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	46007800 	.word	0x46007800
 800e4c4:	46007c00 	.word	0x46007c00

0800e4c8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	607a      	str	r2, [r7, #4]
 800e4d4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	2b02      	cmp	r3, #2
 800e4da:	d904      	bls.n	800e4e6 <HAL_SAI_InitProtocol+0x1e>
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	3b03      	subs	r3, #3
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d812      	bhi.n	800e50a <HAL_SAI_InitProtocol+0x42>
 800e4e4:	e008      	b.n	800e4f8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	68b9      	ldr	r1, [r7, #8]
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f000 fbed 	bl	800eccc <SAI_InitI2S>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	75fb      	strb	r3, [r7, #23]
      break;
 800e4f6:	e00b      	b.n	800e510 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	68b9      	ldr	r1, [r7, #8]
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f000 fc96 	bl	800ee30 <SAI_InitPCM>
 800e504:	4603      	mov	r3, r0
 800e506:	75fb      	strb	r3, [r7, #23]
      break;
 800e508:	e002      	b.n	800e510 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	75fb      	strb	r3, [r7, #23]
      break;
 800e50e:	bf00      	nop
  }

  if (status == HAL_OK)
 800e510:	7dfb      	ldrb	r3, [r7, #23]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d104      	bne.n	800e520 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e516:	68f8      	ldr	r0, [r7, #12]
 800e518:	f000 f808 	bl	800e52c <HAL_SAI_Init>
 800e51c:	4603      	mov	r3, r0
 800e51e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e520:	7dfb      	ldrb	r3, [r7, #23]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3718      	adds	r7, #24
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b08a      	sub	sp, #40	@ 0x28
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d101      	bne.n	800e53e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	e1ce      	b.n	800e8dc <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e544:	2b01      	cmp	r3, #1
 800e546:	d10e      	bne.n	800e566 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a83      	ldr	r2, [pc, #524]	@ (800e75c <HAL_SAI_Init+0x230>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d107      	bne.n	800e562 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e556:	2b01      	cmp	r3, #1
 800e558:	d103      	bne.n	800e562 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e562:	2301      	movs	r3, #1
 800e564:	e1ba      	b.n	800e8dc <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d106      	bne.n	800e580 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7f4 f992 	bl	80028a4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 fd0f 	bl	800efa4 <SAI_Disable>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	e1a5      	b.n	800e8dc <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2202      	movs	r2, #2
 800e594:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	2b02      	cmp	r3, #2
 800e59e:	d00c      	beq.n	800e5ba <HAL_SAI_Init+0x8e>
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	d80d      	bhi.n	800e5c0 <HAL_SAI_Init+0x94>
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d002      	beq.n	800e5ae <HAL_SAI_Init+0x82>
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d003      	beq.n	800e5b4 <HAL_SAI_Init+0x88>
 800e5ac:	e008      	b.n	800e5c0 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e5b2:	e008      	b.n	800e5c6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e5b4:	2310      	movs	r3, #16
 800e5b6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e5b8:	e005      	b.n	800e5c6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e5ba:	2320      	movs	r3, #32
 800e5bc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e5be:	e002      	b.n	800e5c6 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e5c4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	2b03      	cmp	r3, #3
 800e5cc:	d81d      	bhi.n	800e60a <HAL_SAI_Init+0xde>
 800e5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800e5d4 <HAL_SAI_Init+0xa8>)
 800e5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d4:	0800e5e5 	.word	0x0800e5e5
 800e5d8:	0800e5eb 	.word	0x0800e5eb
 800e5dc:	0800e5f3 	.word	0x0800e5f3
 800e5e0:	0800e5fb 	.word	0x0800e5fb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	61fb      	str	r3, [r7, #28]
      break;
 800e5e8:	e012      	b.n	800e610 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e5ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5ee:	61fb      	str	r3, [r7, #28]
      break;
 800e5f0:	e00e      	b.n	800e610 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e5f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e5f6:	61fb      	str	r3, [r7, #28]
      break;
 800e5f8:	e00a      	b.n	800e610 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e5fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e5fe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e602:	f043 0301 	orr.w	r3, r3, #1
 800e606:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e608:	e002      	b.n	800e610 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e60a:	2300      	movs	r3, #0
 800e60c:	61fb      	str	r3, [r7, #28]
      break;
 800e60e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a51      	ldr	r2, [pc, #324]	@ (800e75c <HAL_SAI_Init+0x230>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d004      	beq.n	800e624 <HAL_SAI_Init+0xf8>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a50      	ldr	r2, [pc, #320]	@ (800e760 <HAL_SAI_Init+0x234>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d103      	bne.n	800e62c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e624:	4a4f      	ldr	r2, [pc, #316]	@ (800e764 <HAL_SAI_Init+0x238>)
 800e626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e628:	6013      	str	r3, [r2, #0]
 800e62a:	e002      	b.n	800e632 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e62c:	4a4e      	ldr	r2, [pc, #312]	@ (800e768 <HAL_SAI_Init+0x23c>)
 800e62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e630:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6a1b      	ldr	r3, [r3, #32]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d077      	beq.n	800e72a <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	4a47      	ldr	r2, [pc, #284]	@ (800e75c <HAL_SAI_Init+0x230>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d004      	beq.n	800e64e <HAL_SAI_Init+0x122>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a45      	ldr	r2, [pc, #276]	@ (800e760 <HAL_SAI_Init+0x234>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d107      	bne.n	800e65e <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e64e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e652:	f04f 0100 	mov.w	r1, #0
 800e656:	f7fe f925 	bl	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800e65a:	61b8      	str	r0, [r7, #24]
 800e65c:	e006      	b.n	800e66c <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e65e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e662:	f04f 0100 	mov.w	r1, #0
 800e666:	f7fe f91d 	bl	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800e66a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	699b      	ldr	r3, [r3, #24]
 800e670:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e674:	d120      	bne.n	800e6b8 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e67a:	2b04      	cmp	r3, #4
 800e67c:	d102      	bne.n	800e684 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e67e:	2340      	movs	r3, #64	@ 0x40
 800e680:	613b      	str	r3, [r7, #16]
 800e682:	e00a      	b.n	800e69a <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e688:	2b08      	cmp	r3, #8
 800e68a:	d103      	bne.n	800e694 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e68c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e690:	613b      	str	r3, [r7, #16]
 800e692:	e002      	b.n	800e69a <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e698:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e69a:	69ba      	ldr	r2, [r7, #24]
 800e69c:	4613      	mov	r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	4413      	add	r3, r2
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6a1b      	ldr	r3, [r3, #32]
 800e6aa:	693a      	ldr	r2, [r7, #16]
 800e6ac:	fb02 f303 	mul.w	r3, r2, r3
 800e6b0:	fbb1 f3f3 	udiv	r3, r1, r3
 800e6b4:	617b      	str	r3, [r7, #20]
 800e6b6:	e017      	b.n	800e6e8 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e6c0:	d101      	bne.n	800e6c6 <HAL_SAI_Init+0x19a>
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	e000      	b.n	800e6c8 <HAL_SAI_Init+0x19c>
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e6ca:	69ba      	ldr	r2, [r7, #24]
 800e6cc:	4613      	mov	r3, r2
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	4413      	add	r3, r2
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a1b      	ldr	r3, [r3, #32]
 800e6da:	68fa      	ldr	r2, [r7, #12]
 800e6dc:	fb02 f303 	mul.w	r3, r2, r3
 800e6e0:	021b      	lsls	r3, r3, #8
 800e6e2:	fbb1 f3f3 	udiv	r3, r1, r3
 800e6e6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	4a20      	ldr	r2, [pc, #128]	@ (800e76c <HAL_SAI_Init+0x240>)
 800e6ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e6f0:	08da      	lsrs	r2, r3, #3
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e6f6:	6979      	ldr	r1, [r7, #20]
 800e6f8:	4b1c      	ldr	r3, [pc, #112]	@ (800e76c <HAL_SAI_Init+0x240>)
 800e6fa:	fba3 2301 	umull	r2, r3, r3, r1
 800e6fe:	08da      	lsrs	r2, r3, #3
 800e700:	4613      	mov	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4413      	add	r3, r2
 800e706:	005b      	lsls	r3, r3, #1
 800e708:	1aca      	subs	r2, r1, r3
 800e70a:	2a08      	cmp	r2, #8
 800e70c:	d904      	bls.n	800e718 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e712:	1c5a      	adds	r2, r3, #1
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e71c:	2b04      	cmp	r3, #4
 800e71e:	d104      	bne.n	800e72a <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e724:	085a      	lsrs	r2, r3, #1
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d003      	beq.n	800e73a <HAL_SAI_Init+0x20e>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	2b02      	cmp	r3, #2
 800e738:	d109      	bne.n	800e74e <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d101      	bne.n	800e746 <HAL_SAI_Init+0x21a>
 800e742:	2300      	movs	r3, #0
 800e744:	e001      	b.n	800e74a <HAL_SAI_Init+0x21e>
 800e746:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e74a:	623b      	str	r3, [r7, #32]
 800e74c:	e012      	b.n	800e774 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e752:	2b01      	cmp	r3, #1
 800e754:	d10c      	bne.n	800e770 <HAL_SAI_Init+0x244>
 800e756:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e75a:	e00a      	b.n	800e772 <HAL_SAI_Init+0x246>
 800e75c:	40015404 	.word	0x40015404
 800e760:	40015424 	.word	0x40015424
 800e764:	40015400 	.word	0x40015400
 800e768:	40015800 	.word	0x40015800
 800e76c:	cccccccd 	.word	0xcccccccd
 800e770:	2300      	movs	r3, #0
 800e772:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	6819      	ldr	r1, [r3, #0]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	4b59      	ldr	r3, [pc, #356]	@ (800e8e4 <HAL_SAI_Init+0x3b8>)
 800e780:	400b      	ands	r3, r1
 800e782:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	6819      	ldr	r1, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	685a      	ldr	r2, [r3, #4]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e792:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e798:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e79e:	431a      	orrs	r2, r3
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e7ac:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	695b      	ldr	r3, [r3, #20]
 800e7b2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e7b8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7be:	051b      	lsls	r3, r3, #20
 800e7c0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e7c6:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	691b      	ldr	r3, [r3, #16]
 800e7cc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	430a      	orrs	r2, r1
 800e7d4:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	6812      	ldr	r2, [r2, #0]
 800e7e0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e7e4:	f023 030f 	bic.w	r3, r3, #15
 800e7e8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	6859      	ldr	r1, [r3, #4]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	69da      	ldr	r2, [r3, #28]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7f8:	431a      	orrs	r2, r3
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7fe:	431a      	orrs	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	430a      	orrs	r2, r1
 800e806:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	6899      	ldr	r1, [r3, #8]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	4b35      	ldr	r3, [pc, #212]	@ (800e8e8 <HAL_SAI_Init+0x3bc>)
 800e814:	400b      	ands	r3, r1
 800e816:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6899      	ldr	r1, [r3, #8]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e822:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e828:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e82e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e834:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e83a:	3b01      	subs	r3, #1
 800e83c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e83e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	430a      	orrs	r2, r1
 800e846:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	68d9      	ldr	r1, [r3, #12]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e856:	400b      	ands	r3, r1
 800e858:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	68d9      	ldr	r1, [r3, #12]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e868:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e86e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e870:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e876:	3b01      	subs	r3, #1
 800e878:	021b      	lsls	r3, r3, #8
 800e87a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	430a      	orrs	r2, r1
 800e882:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a18      	ldr	r2, [pc, #96]	@ (800e8ec <HAL_SAI_Init+0x3c0>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d119      	bne.n	800e8c2 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e88e:	4b18      	ldr	r3, [pc, #96]	@ (800e8f0 <HAL_SAI_Init+0x3c4>)
 800e890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e892:	4a17      	ldr	r2, [pc, #92]	@ (800e8f0 <HAL_SAI_Init+0x3c4>)
 800e894:	f023 0301 	bic.w	r3, r3, #1
 800e898:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d10e      	bne.n	800e8c2 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e8b0:	490f      	ldr	r1, [pc, #60]	@ (800e8f0 <HAL_SAI_Init+0x3c4>)
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e8b6:	4b0e      	ldr	r3, [pc, #56]	@ (800e8f0 <HAL_SAI_Init+0x3c4>)
 800e8b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8ba:	4a0d      	ldr	r2, [pc, #52]	@ (800e8f0 <HAL_SAI_Init+0x3c4>)
 800e8bc:	f043 0301 	orr.w	r3, r3, #1
 800e8c0:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3728      	adds	r7, #40	@ 0x28
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	f005c010 	.word	0xf005c010
 800e8e8:	fff88000 	.word	0xfff88000
 800e8ec:	40015404 	.word	0x40015404
 800e8f0:	40015400 	.word	0x40015400

0800e8f4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b088      	sub	sp, #32
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	4613      	mov	r3, r2
 800e900:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e902:	f7f4 fb5d 	bl	8002fc0 <HAL_GetTick>
 800e906:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d002      	beq.n	800e914 <HAL_SAI_Transmit_DMA+0x20>
 800e90e:	88fb      	ldrh	r3, [r7, #6]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d101      	bne.n	800e918 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800e914:	2301      	movs	r3, #1
 800e916:	e0e4      	b.n	800eae2 <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	2b01      	cmp	r3, #1
 800e922:	f040 80dd 	bne.w	800eae0 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d101      	bne.n	800e934 <HAL_SAI_Transmit_DMA+0x40>
 800e930:	2302      	movs	r3, #2
 800e932:	e0d6      	b.n	800eae2 <HAL_SAI_Transmit_DMA+0x1ee>
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	88fa      	ldrh	r2, [r7, #6]
 800e946:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	88fa      	ldrh	r2, [r7, #6]
 800e94e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2200      	movs	r2, #0
 800e956:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2212      	movs	r2, #18
 800e95e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e968:	4a60      	ldr	r2, [pc, #384]	@ (800eaec <HAL_SAI_Transmit_DMA+0x1f8>)
 800e96a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e972:	4a5f      	ldr	r2, [pc, #380]	@ (800eaf0 <HAL_SAI_Transmit_DMA+0x1fc>)
 800e974:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e97c:	4a5d      	ldr	r2, [pc, #372]	@ (800eaf4 <HAL_SAI_Transmit_DMA+0x200>)
 800e97e:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e986:	2200      	movs	r2, #0
 800e988:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e98e:	2b40      	cmp	r3, #64	@ 0x40
 800e990:	d106      	bne.n	800e9a0 <HAL_SAI_Transmit_DMA+0xac>
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e996:	2b00      	cmp	r3, #0
 800e998:	d102      	bne.n	800e9a0 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800e99a:	88fb      	ldrh	r3, [r7, #6]
 800e99c:	61bb      	str	r3, [r7, #24]
 800e99e:	e00a      	b.n	800e9b6 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e9a4:	2b80      	cmp	r3, #128	@ 0x80
 800e9a6:	d803      	bhi.n	800e9b0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e9a8:	88fb      	ldrh	r3, [r7, #6]
 800e9aa:	005b      	lsls	r3, r3, #1
 800e9ac:	61bb      	str	r3, [r7, #24]
 800e9ae:	e002      	b.n	800e9b6 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e9b0:	88fb      	ldrh	r3, [r7, #6]
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d02d      	beq.n	800ea22 <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d021      	beq.n	800ea16 <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	69ba      	ldr	r2, [r7, #24]
 800e9de:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f103 021c 	add.w	r2, r3, #28
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7f7 ff1a 	bl	8006844 <HAL_DMAEx_List_Start_IT>
 800ea10:	4603      	mov	r3, r0
 800ea12:	77fb      	strb	r3, [r7, #31]
 800ea14:	e014      	b.n	800ea40 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	e05f      	b.n	800eae2 <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	331c      	adds	r3, #28
 800ea34:	461a      	mov	r2, r3
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	f7f6 ff72 	bl	8005920 <HAL_DMA_Start_IT>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800ea40:	7ffb      	ldrb	r3, [r7, #31]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d005      	beq.n	800ea52 <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e047      	b.n	800eae2 <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ea52:	2100      	movs	r1, #0
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f000 fa6d 	bl	800ef34 <SAI_InterruptFlag>
 800ea5a:	4601      	mov	r1, r0
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	691a      	ldr	r2, [r3, #16]
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	430a      	orrs	r2, r1
 800ea68:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ea78:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ea7a:	e015      	b.n	800eaa8 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800ea7c:	f7f4 faa0 	bl	8002fc0 <HAL_GetTick>
 800ea80:	4602      	mov	r2, r0
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	1ad3      	subs	r3, r2, r3
 800ea86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ea8a:	d90d      	bls.n	800eaa8 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ea92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800eaa4:	2303      	movs	r3, #3
 800eaa6:	e01c      	b.n	800eae2 <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	695b      	ldr	r3, [r3, #20]
 800eaae:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0e2      	beq.n	800ea7c <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d107      	bne.n	800ead4 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ead2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800eadc:	2300      	movs	r3, #0
 800eade:	e000      	b.n	800eae2 <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800eae0:	2302      	movs	r3, #2
  }
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3720      	adds	r7, #32
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	0800f077 	.word	0x0800f077
 800eaf0:	0800f019 	.word	0x0800f019
 800eaf4:	0800f10d 	.word	0x0800f10d

0800eaf8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	4613      	mov	r3, r2
 800eb04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d002      	beq.n	800eb12 <HAL_SAI_Receive_DMA+0x1a>
 800eb0c:	88fb      	ldrh	r3, [r7, #6]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d101      	bne.n	800eb16 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800eb12:	2301      	movs	r3, #1
 800eb14:	e0c6      	b.n	800eca4 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	f040 80bf 	bne.w	800eca2 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d101      	bne.n	800eb32 <HAL_SAI_Receive_DMA+0x3a>
 800eb2e:	2302      	movs	r3, #2
 800eb30:	e0b8      	b.n	800eca4 <HAL_SAI_Receive_DMA+0x1ac>
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2201      	movs	r2, #1
 800eb36:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	68ba      	ldr	r2, [r7, #8]
 800eb3e:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	88fa      	ldrh	r2, [r7, #6]
 800eb44:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	88fa      	ldrh	r2, [r7, #6]
 800eb4c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2200      	movs	r2, #0
 800eb54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2222      	movs	r2, #34	@ 0x22
 800eb5c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb66:	4a51      	ldr	r2, [pc, #324]	@ (800ecac <HAL_SAI_Receive_DMA+0x1b4>)
 800eb68:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb70:	4a4f      	ldr	r2, [pc, #316]	@ (800ecb0 <HAL_SAI_Receive_DMA+0x1b8>)
 800eb72:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb7a:	4a4e      	ldr	r2, [pc, #312]	@ (800ecb4 <HAL_SAI_Receive_DMA+0x1bc>)
 800eb7c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb84:	2200      	movs	r2, #0
 800eb86:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb8c:	2b40      	cmp	r3, #64	@ 0x40
 800eb8e:	d106      	bne.n	800eb9e <HAL_SAI_Receive_DMA+0xa6>
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d102      	bne.n	800eb9e <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800eb98:	88fb      	ldrh	r3, [r7, #6]
 800eb9a:	613b      	str	r3, [r7, #16]
 800eb9c:	e00a      	b.n	800ebb4 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eba2:	2b80      	cmp	r3, #128	@ 0x80
 800eba4:	d803      	bhi.n	800ebae <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800eba6:	88fb      	ldrh	r3, [r7, #6]
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	613b      	str	r3, [r7, #16]
 800ebac:	e002      	b.n	800ebb4 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800ebae:	88fb      	ldrh	r3, [r7, #6]
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d02d      	beq.n	800ec20 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d021      	beq.n	800ec14 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f103 021c 	add.w	r2, r3, #28
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7f7 fe1b 	bl	8006844 <HAL_DMAEx_List_Start_IT>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	75fb      	strb	r3, [r7, #23]
 800ec12:	e014      	b.n	800ec3e <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2200      	movs	r2, #0
 800ec18:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e041      	b.n	800eca4 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	331c      	adds	r3, #28
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec32:	461a      	mov	r2, r3
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	f7f6 fe73 	bl	8005920 <HAL_DMA_Start_IT>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800ec3e:	7dfb      	ldrb	r3, [r7, #23]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d005      	beq.n	800ec50 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e029      	b.n	800eca4 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ec50:	2100      	movs	r1, #0
 800ec52:	68f8      	ldr	r0, [r7, #12]
 800ec54:	f000 f96e 	bl	800ef34 <SAI_InterruptFlag>
 800ec58:	4601      	mov	r1, r0
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	691a      	ldr	r2, [r3, #16]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	430a      	orrs	r2, r1
 800ec66:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ec76:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d107      	bne.n	800ec96 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ec94:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	e000      	b.n	800eca4 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800eca2:	2302      	movs	r3, #2
  }
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3718      	adds	r7, #24
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	0800f0f1 	.word	0x0800f0f1
 800ecb0:	0800f093 	.word	0x0800f093
 800ecb4:	0800f10d 	.word	0x0800f10d

0800ecb8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800ecc0:	bf00      	nop
 800ecc2:	370c      	adds	r7, #12
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b087      	sub	sp, #28
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
 800ecd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2200      	movs	r2, #0
 800ece2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2200      	movs	r2, #0
 800ece8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d003      	beq.n	800ecfa <SAI_InitI2S+0x2e>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	2b02      	cmp	r3, #2
 800ecf8:	d103      	bne.n	800ed02 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	651a      	str	r2, [r3, #80]	@ 0x50
 800ed00:	e002      	b.n	800ed08 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2201      	movs	r2, #1
 800ed06:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ed0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed16:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	683a      	ldr	r2, [r7, #0]
 800ed22:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	f003 0301 	and.w	r3, r3, #1
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e077      	b.n	800ee22 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d107      	bne.n	800ed48 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ed44:	665a      	str	r2, [r3, #100]	@ 0x64
 800ed46:	e006      	b.n	800ed56 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ed4e:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2200      	movs	r2, #0
 800ed54:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b03      	cmp	r3, #3
 800ed5a:	d84f      	bhi.n	800edfc <SAI_InitI2S+0x130>
 800ed5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ed64 <SAI_InitI2S+0x98>)
 800ed5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed62:	bf00      	nop
 800ed64:	0800ed75 	.word	0x0800ed75
 800ed68:	0800ed97 	.word	0x0800ed97
 800ed6c:	0800edb9 	.word	0x0800edb9
 800ed70:	0800eddb 	.word	0x0800eddb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2280      	movs	r2, #128	@ 0x80
 800ed78:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	085b      	lsrs	r3, r3, #1
 800ed7e:	015a      	lsls	r2, r3, #5
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	085b      	lsrs	r3, r3, #1
 800ed88:	011a      	lsls	r2, r3, #4
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2240      	movs	r2, #64	@ 0x40
 800ed92:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ed94:	e035      	b.n	800ee02 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2280      	movs	r2, #128	@ 0x80
 800ed9a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	085b      	lsrs	r3, r3, #1
 800eda0:	019a      	lsls	r2, r3, #6
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	085b      	lsrs	r3, r3, #1
 800edaa:	015a      	lsls	r2, r3, #5
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2280      	movs	r2, #128	@ 0x80
 800edb4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800edb6:	e024      	b.n	800ee02 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	22c0      	movs	r2, #192	@ 0xc0
 800edbc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	085b      	lsrs	r3, r3, #1
 800edc2:	019a      	lsls	r2, r3, #6
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	085b      	lsrs	r3, r3, #1
 800edcc:	015a      	lsls	r2, r3, #5
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2280      	movs	r2, #128	@ 0x80
 800edd6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800edd8:	e013      	b.n	800ee02 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	22e0      	movs	r2, #224	@ 0xe0
 800edde:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	085b      	lsrs	r3, r3, #1
 800ede4:	019a      	lsls	r2, r3, #6
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	085b      	lsrs	r3, r3, #1
 800edee:	015a      	lsls	r2, r3, #5
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2280      	movs	r2, #128	@ 0x80
 800edf8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800edfa:	e002      	b.n	800ee02 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800edfc:	2301      	movs	r3, #1
 800edfe:	75fb      	strb	r3, [r7, #23]
      break;
 800ee00:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	d10b      	bne.n	800ee20 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d102      	bne.n	800ee14 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2210      	movs	r2, #16
 800ee12:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b02      	cmp	r3, #2
 800ee18:	d102      	bne.n	800ee20 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2208      	movs	r2, #8
 800ee1e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800ee20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	371c      	adds	r7, #28
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop

0800ee30 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b087      	sub	sp, #28
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	607a      	str	r2, [r7, #4]
 800ee3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2200      	movs	r2, #0
 800ee46:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d003      	beq.n	800ee5e <SAI_InitPCM+0x2e>
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d103      	bne.n	800ee66 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2201      	movs	r2, #1
 800ee62:	651a      	str	r2, [r3, #80]	@ 0x50
 800ee64:	e002      	b.n	800ee6c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ee78:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ee80:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2200      	movs	r2, #0
 800ee86:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	683a      	ldr	r2, [r7, #0]
 800ee8c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee94:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	2b04      	cmp	r3, #4
 800ee9a:	d103      	bne.n	800eea4 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	659a      	str	r2, [r3, #88]	@ 0x58
 800eea2:	e002      	b.n	800eeaa <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	220d      	movs	r2, #13
 800eea8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2b03      	cmp	r3, #3
 800eeae:	d837      	bhi.n	800ef20 <SAI_InitPCM+0xf0>
 800eeb0:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb8 <SAI_InitPCM+0x88>)
 800eeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb6:	bf00      	nop
 800eeb8:	0800eec9 	.word	0x0800eec9
 800eebc:	0800eedf 	.word	0x0800eedf
 800eec0:	0800eef5 	.word	0x0800eef5
 800eec4:	0800ef0b 	.word	0x0800ef0b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2280      	movs	r2, #128	@ 0x80
 800eecc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	011a      	lsls	r2, r3, #4
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2240      	movs	r2, #64	@ 0x40
 800eeda:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eedc:	e023      	b.n	800ef26 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2280      	movs	r2, #128	@ 0x80
 800eee2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	015a      	lsls	r2, r3, #5
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2280      	movs	r2, #128	@ 0x80
 800eef0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eef2:	e018      	b.n	800ef26 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	22c0      	movs	r2, #192	@ 0xc0
 800eef8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	015a      	lsls	r2, r3, #5
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2280      	movs	r2, #128	@ 0x80
 800ef06:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ef08:	e00d      	b.n	800ef26 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	22e0      	movs	r2, #224	@ 0xe0
 800ef0e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	015a      	lsls	r2, r3, #5
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2280      	movs	r2, #128	@ 0x80
 800ef1c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ef1e:	e002      	b.n	800ef26 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ef20:	2301      	movs	r3, #1
 800ef22:	75fb      	strb	r3, [r7, #23]
      break;
 800ef24:	bf00      	nop
  }

  return status;
 800ef26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	371c      	adds	r7, #28
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ef40:	2301      	movs	r3, #1
 800ef42:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ef44:	78fb      	ldrb	r3, [r7, #3]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d103      	bne.n	800ef52 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f043 0308 	orr.w	r3, r3, #8
 800ef50:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef56:	2b08      	cmp	r3, #8
 800ef58:	d10b      	bne.n	800ef72 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ef5e:	2b03      	cmp	r3, #3
 800ef60:	d003      	beq.n	800ef6a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d103      	bne.n	800ef72 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f043 0310 	orr.w	r3, r3, #16
 800ef70:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	2b03      	cmp	r3, #3
 800ef78:	d003      	beq.n	800ef82 <SAI_InterruptFlag+0x4e>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	2b02      	cmp	r3, #2
 800ef80:	d104      	bne.n	800ef8c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ef88:	60fb      	str	r3, [r7, #12]
 800ef8a:	e003      	b.n	800ef94 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f043 0304 	orr.w	r3, r3, #4
 800ef92:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ef94:	68fb      	ldr	r3, [r7, #12]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
	...

0800efa4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b085      	sub	sp, #20
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800efac:	4b18      	ldr	r3, [pc, #96]	@ (800f010 <SAI_Disable+0x6c>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4a18      	ldr	r2, [pc, #96]	@ (800f014 <SAI_Disable+0x70>)
 800efb2:	fba2 2303 	umull	r2, r3, r2, r3
 800efb6:	0b1b      	lsrs	r3, r3, #12
 800efb8:	009b      	lsls	r3, r3, #2
 800efba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800efce:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d10a      	bne.n	800efec <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800efdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800efe6:	2303      	movs	r3, #3
 800efe8:	72fb      	strb	r3, [r7, #11]
      break;
 800efea:	e009      	b.n	800f000 <SAI_Disable+0x5c>
    }
    count--;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	3b01      	subs	r3, #1
 800eff0:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800effc:	2b00      	cmp	r3, #0
 800effe:	d1e7      	bne.n	800efd0 <SAI_Disable+0x2c>

  return status;
 800f000:	7afb      	ldrb	r3, [r7, #11]
}
 800f002:	4618      	mov	r0, r3
 800f004:	3714      	adds	r7, #20
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	20000024 	.word	0x20000024
 800f014:	95cbec1b 	.word	0x95cbec1b

0800f018 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f024:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f02a:	2b81      	cmp	r3, #129	@ 0x81
 800f02c:	d01c      	beq.n	800f068 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2200      	movs	r2, #0
 800f032:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f044:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f046:	2100      	movs	r1, #0
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	f7ff ff73 	bl	800ef34 <SAI_InterruptFlag>
 800f04e:	4603      	mov	r3, r0
 800f050:	43d9      	mvns	r1, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	691a      	ldr	r2, [r3, #16]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	400a      	ands	r2, r1
 800f05e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2201      	movs	r2, #1
 800f064:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f7f2 fcef 	bl	8001a4c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f06e:	bf00      	nop
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f076:	b580      	push	{r7, lr}
 800f078:	b084      	sub	sp, #16
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f082:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f084:	68f8      	ldr	r0, [r7, #12]
 800f086:	f7f2 fccb 	bl	8001a20 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f08a:	bf00      	nop
 800f08c:	3710      	adds	r7, #16
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}

0800f092 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f092:	b580      	push	{r7, lr}
 800f094:	b084      	sub	sp, #16
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f09e:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0a4:	2b81      	cmp	r3, #129	@ 0x81
 800f0a6:	d01c      	beq.n	800f0e2 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f0b6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	f7ff ff36 	bl	800ef34 <SAI_InterruptFlag>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	43d9      	mvns	r1, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	691a      	ldr	r2, [r3, #16]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	400a      	ands	r2, r1
 800f0d8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2201      	movs	r2, #1
 800f0de:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f7f2 fc86 	bl	80019f4 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f0e8:	bf00      	nop
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f0fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7f2 fc62 	bl	80019c8 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f104:	bf00      	nop
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f118:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f120:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f138:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f7ff ff32 	bl	800efa4 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2201      	movs	r2, #1
 800f144:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f7ff fdb1 	bl	800ecb8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f156:	bf00      	nop
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b082      	sub	sp, #8
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d101      	bne.n	800f170 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f16c:	2301      	movs	r3, #1
 800f16e:	e049      	b.n	800f204 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f176:	b2db      	uxtb	r3, r3
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d106      	bne.n	800f18a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f7f3 fa29 	bl	80025dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2202      	movs	r2, #2
 800f18e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	3304      	adds	r3, #4
 800f19a:	4619      	mov	r1, r3
 800f19c:	4610      	mov	r0, r2
 800f19e:	f000 fd51 	bl	800fc44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2201      	movs	r2, #1
 800f1de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f202:	2300      	movs	r3, #0
}
 800f204:	4618      	mov	r0, r3
 800f206:	3708      	adds	r7, #8
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b085      	sub	sp, #20
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d001      	beq.n	800f224 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f220:	2301      	movs	r3, #1
 800f222:	e06a      	b.n	800f2fa <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2202      	movs	r2, #2
 800f228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4a35      	ldr	r2, [pc, #212]	@ (800f308 <HAL_TIM_Base_Start+0xfc>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d040      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4a34      	ldr	r2, [pc, #208]	@ (800f30c <HAL_TIM_Base_Start+0x100>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d03b      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f248:	d036      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f252:	d031      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a2d      	ldr	r2, [pc, #180]	@ (800f310 <HAL_TIM_Base_Start+0x104>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d02c      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4a2c      	ldr	r2, [pc, #176]	@ (800f314 <HAL_TIM_Base_Start+0x108>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d027      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4a2a      	ldr	r2, [pc, #168]	@ (800f318 <HAL_TIM_Base_Start+0x10c>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d022      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a29      	ldr	r2, [pc, #164]	@ (800f31c <HAL_TIM_Base_Start+0x110>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d01d      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a27      	ldr	r2, [pc, #156]	@ (800f320 <HAL_TIM_Base_Start+0x114>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d018      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4a26      	ldr	r2, [pc, #152]	@ (800f324 <HAL_TIM_Base_Start+0x118>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d013      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a24      	ldr	r2, [pc, #144]	@ (800f328 <HAL_TIM_Base_Start+0x11c>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d00e      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a23      	ldr	r2, [pc, #140]	@ (800f32c <HAL_TIM_Base_Start+0x120>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d009      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4a21      	ldr	r2, [pc, #132]	@ (800f330 <HAL_TIM_Base_Start+0x124>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d004      	beq.n	800f2b8 <HAL_TIM_Base_Start+0xac>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a20      	ldr	r2, [pc, #128]	@ (800f334 <HAL_TIM_Base_Start+0x128>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d115      	bne.n	800f2e4 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	689a      	ldr	r2, [r3, #8]
 800f2be:	4b1e      	ldr	r3, [pc, #120]	@ (800f338 <HAL_TIM_Base_Start+0x12c>)
 800f2c0:	4013      	ands	r3, r2
 800f2c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2b06      	cmp	r3, #6
 800f2c8:	d015      	beq.n	800f2f6 <HAL_TIM_Base_Start+0xea>
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2d0:	d011      	beq.n	800f2f6 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f042 0201 	orr.w	r2, r2, #1
 800f2e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2e2:	e008      	b.n	800f2f6 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f042 0201 	orr.w	r2, r2, #1
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	e000      	b.n	800f2f8 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f2f8:	2300      	movs	r3, #0
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3714      	adds	r7, #20
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
 800f306:	bf00      	nop
 800f308:	40012c00 	.word	0x40012c00
 800f30c:	50012c00 	.word	0x50012c00
 800f310:	40000400 	.word	0x40000400
 800f314:	50000400 	.word	0x50000400
 800f318:	40000800 	.word	0x40000800
 800f31c:	50000800 	.word	0x50000800
 800f320:	40000c00 	.word	0x40000c00
 800f324:	50000c00 	.word	0x50000c00
 800f328:	40013400 	.word	0x40013400
 800f32c:	50013400 	.word	0x50013400
 800f330:	40014000 	.word	0x40014000
 800f334:	50014000 	.word	0x50014000
 800f338:	00010007 	.word	0x00010007

0800f33c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b085      	sub	sp, #20
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d001      	beq.n	800f354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f350:	2301      	movs	r3, #1
 800f352:	e072      	b.n	800f43a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2202      	movs	r2, #2
 800f358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	68da      	ldr	r2, [r3, #12]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f042 0201 	orr.w	r2, r2, #1
 800f36a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a35      	ldr	r2, [pc, #212]	@ (800f448 <HAL_TIM_Base_Start_IT+0x10c>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d040      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a34      	ldr	r2, [pc, #208]	@ (800f44c <HAL_TIM_Base_Start_IT+0x110>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d03b      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f388:	d036      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f392:	d031      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4a2d      	ldr	r2, [pc, #180]	@ (800f450 <HAL_TIM_Base_Start_IT+0x114>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d02c      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a2c      	ldr	r2, [pc, #176]	@ (800f454 <HAL_TIM_Base_Start_IT+0x118>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d027      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a2a      	ldr	r2, [pc, #168]	@ (800f458 <HAL_TIM_Base_Start_IT+0x11c>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d022      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4a29      	ldr	r2, [pc, #164]	@ (800f45c <HAL_TIM_Base_Start_IT+0x120>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d01d      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a27      	ldr	r2, [pc, #156]	@ (800f460 <HAL_TIM_Base_Start_IT+0x124>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d018      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4a26      	ldr	r2, [pc, #152]	@ (800f464 <HAL_TIM_Base_Start_IT+0x128>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d013      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4a24      	ldr	r2, [pc, #144]	@ (800f468 <HAL_TIM_Base_Start_IT+0x12c>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d00e      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	4a23      	ldr	r2, [pc, #140]	@ (800f46c <HAL_TIM_Base_Start_IT+0x130>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d009      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4a21      	ldr	r2, [pc, #132]	@ (800f470 <HAL_TIM_Base_Start_IT+0x134>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d004      	beq.n	800f3f8 <HAL_TIM_Base_Start_IT+0xbc>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	4a20      	ldr	r2, [pc, #128]	@ (800f474 <HAL_TIM_Base_Start_IT+0x138>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d115      	bne.n	800f424 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	689a      	ldr	r2, [r3, #8]
 800f3fe:	4b1e      	ldr	r3, [pc, #120]	@ (800f478 <HAL_TIM_Base_Start_IT+0x13c>)
 800f400:	4013      	ands	r3, r2
 800f402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2b06      	cmp	r3, #6
 800f408:	d015      	beq.n	800f436 <HAL_TIM_Base_Start_IT+0xfa>
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f410:	d011      	beq.n	800f436 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f042 0201 	orr.w	r2, r2, #1
 800f420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f422:	e008      	b.n	800f436 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f042 0201 	orr.w	r2, r2, #1
 800f432:	601a      	str	r2, [r3, #0]
 800f434:	e000      	b.n	800f438 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f438:	2300      	movs	r3, #0
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3714      	adds	r7, #20
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr
 800f446:	bf00      	nop
 800f448:	40012c00 	.word	0x40012c00
 800f44c:	50012c00 	.word	0x50012c00
 800f450:	40000400 	.word	0x40000400
 800f454:	50000400 	.word	0x50000400
 800f458:	40000800 	.word	0x40000800
 800f45c:	50000800 	.word	0x50000800
 800f460:	40000c00 	.word	0x40000c00
 800f464:	50000c00 	.word	0x50000c00
 800f468:	40013400 	.word	0x40013400
 800f46c:	50013400 	.word	0x50013400
 800f470:	40014000 	.word	0x40014000
 800f474:	50014000 	.word	0x50014000
 800f478:	00010007 	.word	0x00010007

0800f47c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d101      	bne.n	800f48e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e049      	b.n	800f522 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d106      	bne.n	800f4a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f7f3 f878 	bl	8002598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2202      	movs	r2, #2
 800f4ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	3304      	adds	r3, #4
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	4610      	mov	r0, r2
 800f4bc:	f000 fbc2 	bl	800fc44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2201      	movs	r2, #1
 800f504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2201      	movs	r2, #1
 800f50c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2201      	movs	r2, #1
 800f514:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2201      	movs	r2, #1
 800f51c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f520:	2300      	movs	r3, #0
}
 800f522:	4618      	mov	r0, r3
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f52a:	b580      	push	{r7, lr}
 800f52c:	b084      	sub	sp, #16
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	f003 0302 	and.w	r3, r3, #2
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d020      	beq.n	800f58e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f003 0302 	and.w	r3, r3, #2
 800f552:	2b00      	cmp	r3, #0
 800f554:	d01b      	beq.n	800f58e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f06f 0202 	mvn.w	r2, #2
 800f55e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2201      	movs	r2, #1
 800f564:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	699b      	ldr	r3, [r3, #24]
 800f56c:	f003 0303 	and.w	r3, r3, #3
 800f570:	2b00      	cmp	r3, #0
 800f572:	d003      	beq.n	800f57c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 fb47 	bl	800fc08 <HAL_TIM_IC_CaptureCallback>
 800f57a:	e005      	b.n	800f588 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 fb39 	bl	800fbf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f000 fb4a 	bl	800fc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	f003 0304 	and.w	r3, r3, #4
 800f594:	2b00      	cmp	r3, #0
 800f596:	d020      	beq.n	800f5da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f003 0304 	and.w	r3, r3, #4
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d01b      	beq.n	800f5da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f06f 0204 	mvn.w	r2, #4
 800f5aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	699b      	ldr	r3, [r3, #24]
 800f5b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d003      	beq.n	800f5c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 fb21 	bl	800fc08 <HAL_TIM_IC_CaptureCallback>
 800f5c6:	e005      	b.n	800f5d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 fb13 	bl	800fbf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f000 fb24 	bl	800fc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	f003 0308 	and.w	r3, r3, #8
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d020      	beq.n	800f626 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f003 0308 	and.w	r3, r3, #8
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d01b      	beq.n	800f626 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f06f 0208 	mvn.w	r2, #8
 800f5f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2204      	movs	r2, #4
 800f5fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	69db      	ldr	r3, [r3, #28]
 800f604:	f003 0303 	and.w	r3, r3, #3
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d003      	beq.n	800f614 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f000 fafb 	bl	800fc08 <HAL_TIM_IC_CaptureCallback>
 800f612:	e005      	b.n	800f620 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 faed 	bl	800fbf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 fafe 	bl	800fc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	f003 0310 	and.w	r3, r3, #16
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d020      	beq.n	800f672 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f003 0310 	and.w	r3, r3, #16
 800f636:	2b00      	cmp	r3, #0
 800f638:	d01b      	beq.n	800f672 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f06f 0210 	mvn.w	r2, #16
 800f642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2208      	movs	r2, #8
 800f648:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	69db      	ldr	r3, [r3, #28]
 800f650:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f654:	2b00      	cmp	r3, #0
 800f656:	d003      	beq.n	800f660 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f000 fad5 	bl	800fc08 <HAL_TIM_IC_CaptureCallback>
 800f65e:	e005      	b.n	800f66c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fac7 	bl	800fbf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 fad8 	bl	800fc1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	f003 0301 	and.w	r3, r3, #1
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00c      	beq.n	800f696 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f003 0301 	and.w	r3, r3, #1
 800f682:	2b00      	cmp	r3, #0
 800f684:	d007      	beq.n	800f696 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f06f 0201 	mvn.w	r2, #1
 800f68e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f7f2 f9f1 	bl	8001a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d104      	bne.n	800f6aa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d00c      	beq.n	800f6c4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d007      	beq.n	800f6c4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f6bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f001 f904 	bl	80108cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00c      	beq.n	800f6e8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d007      	beq.n	800f6e8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f6e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f001 f8fc 	bl	80108e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d00c      	beq.n	800f70c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d007      	beq.n	800f70c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 fa92 	bl	800fc30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	f003 0320 	and.w	r3, r3, #32
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00c      	beq.n	800f730 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f003 0320 	and.w	r3, r3, #32
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d007      	beq.n	800f730 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f06f 0220 	mvn.w	r2, #32
 800f728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f001 f8c4 	bl	80108b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00c      	beq.n	800f754 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f740:	2b00      	cmp	r3, #0
 800f742:	d007      	beq.n	800f754 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800f74c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f001 f8d0 	bl	80108f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d00c      	beq.n	800f778 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f764:	2b00      	cmp	r3, #0
 800f766:	d007      	beq.n	800f778 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800f770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f001 f8c8 	bl	8010908 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d00c      	beq.n	800f79c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d007      	beq.n	800f79c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800f794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f001 f8c0 	bl	801091c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00c      	beq.n	800f7c0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d007      	beq.n	800f7c0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800f7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f001 f8b8 	bl	8010930 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f7c0:	bf00      	nop
 800f7c2:	3710      	adds	r7, #16
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b086      	sub	sp, #24
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d101      	bne.n	800f7e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f7e2:	2302      	movs	r3, #2
 800f7e4:	e0ff      	b.n	800f9e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2b14      	cmp	r3, #20
 800f7f2:	f200 80f0 	bhi.w	800f9d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f7f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f7fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fc:	0800f851 	.word	0x0800f851
 800f800:	0800f9d7 	.word	0x0800f9d7
 800f804:	0800f9d7 	.word	0x0800f9d7
 800f808:	0800f9d7 	.word	0x0800f9d7
 800f80c:	0800f891 	.word	0x0800f891
 800f810:	0800f9d7 	.word	0x0800f9d7
 800f814:	0800f9d7 	.word	0x0800f9d7
 800f818:	0800f9d7 	.word	0x0800f9d7
 800f81c:	0800f8d3 	.word	0x0800f8d3
 800f820:	0800f9d7 	.word	0x0800f9d7
 800f824:	0800f9d7 	.word	0x0800f9d7
 800f828:	0800f9d7 	.word	0x0800f9d7
 800f82c:	0800f913 	.word	0x0800f913
 800f830:	0800f9d7 	.word	0x0800f9d7
 800f834:	0800f9d7 	.word	0x0800f9d7
 800f838:	0800f9d7 	.word	0x0800f9d7
 800f83c:	0800f955 	.word	0x0800f955
 800f840:	0800f9d7 	.word	0x0800f9d7
 800f844:	0800f9d7 	.word	0x0800f9d7
 800f848:	0800f9d7 	.word	0x0800f9d7
 800f84c:	0800f995 	.word	0x0800f995
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68b9      	ldr	r1, [r7, #8]
 800f856:	4618      	mov	r0, r3
 800f858:	f000 fafa 	bl	800fe50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	699a      	ldr	r2, [r3, #24]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f042 0208 	orr.w	r2, r2, #8
 800f86a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	699a      	ldr	r2, [r3, #24]
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f022 0204 	bic.w	r2, r2, #4
 800f87a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	6999      	ldr	r1, [r3, #24]
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	691a      	ldr	r2, [r3, #16]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	430a      	orrs	r2, r1
 800f88c:	619a      	str	r2, [r3, #24]
      break;
 800f88e:	e0a5      	b.n	800f9dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	68b9      	ldr	r1, [r7, #8]
 800f896:	4618      	mov	r0, r3
 800f898:	f000 fb9c 	bl	800ffd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	699a      	ldr	r2, [r3, #24]
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f8aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	699a      	ldr	r2, [r3, #24]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f8ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	6999      	ldr	r1, [r3, #24]
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	691b      	ldr	r3, [r3, #16]
 800f8c6:	021a      	lsls	r2, r3, #8
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	430a      	orrs	r2, r1
 800f8ce:	619a      	str	r2, [r3, #24]
      break;
 800f8d0:	e084      	b.n	800f9dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	68b9      	ldr	r1, [r7, #8]
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f000 fc2b 	bl	8010134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	69da      	ldr	r2, [r3, #28]
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f042 0208 	orr.w	r2, r2, #8
 800f8ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	69da      	ldr	r2, [r3, #28]
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f022 0204 	bic.w	r2, r2, #4
 800f8fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	69d9      	ldr	r1, [r3, #28]
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	691a      	ldr	r2, [r3, #16]
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	430a      	orrs	r2, r1
 800f90e:	61da      	str	r2, [r3, #28]
      break;
 800f910:	e064      	b.n	800f9dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	68b9      	ldr	r1, [r7, #8]
 800f918:	4618      	mov	r0, r3
 800f91a:	f000 fcb9 	bl	8010290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	69da      	ldr	r2, [r3, #28]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f92c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	69da      	ldr	r2, [r3, #28]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f93c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	69d9      	ldr	r1, [r3, #28]
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	691b      	ldr	r3, [r3, #16]
 800f948:	021a      	lsls	r2, r3, #8
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	430a      	orrs	r2, r1
 800f950:	61da      	str	r2, [r3, #28]
      break;
 800f952:	e043      	b.n	800f9dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	68b9      	ldr	r1, [r7, #8]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f000 fd48 	bl	80103f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f042 0208 	orr.w	r2, r2, #8
 800f96e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f022 0204 	bic.w	r2, r2, #4
 800f97e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	691a      	ldr	r2, [r3, #16]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	430a      	orrs	r2, r1
 800f990:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f992:	e023      	b.n	800f9dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	68b9      	ldr	r1, [r7, #8]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f000 fdaa 	bl	80104f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f9ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f9be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	691b      	ldr	r3, [r3, #16]
 800f9ca:	021a      	lsls	r2, r3, #8
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	430a      	orrs	r2, r1
 800f9d2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f9d4:	e002      	b.n	800f9dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	75fb      	strb	r3, [r7, #23]
      break;
 800f9da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3718      	adds	r7, #24
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop

0800f9f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d101      	bne.n	800fa0c <HAL_TIM_ConfigClockSource+0x1c>
 800fa08:	2302      	movs	r3, #2
 800fa0a:	e0e6      	b.n	800fbda <HAL_TIM_ConfigClockSource+0x1ea>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2202      	movs	r2, #2
 800fa18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	689b      	ldr	r3, [r3, #8]
 800fa22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800fa2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fa2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fa36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68ba      	ldr	r2, [r7, #8]
 800fa3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a67      	ldr	r2, [pc, #412]	@ (800fbe4 <HAL_TIM_ConfigClockSource+0x1f4>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	f000 80b1 	beq.w	800fbae <HAL_TIM_ConfigClockSource+0x1be>
 800fa4c:	4a65      	ldr	r2, [pc, #404]	@ (800fbe4 <HAL_TIM_ConfigClockSource+0x1f4>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	f200 80b6 	bhi.w	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fa54:	4a64      	ldr	r2, [pc, #400]	@ (800fbe8 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	f000 80a9 	beq.w	800fbae <HAL_TIM_ConfigClockSource+0x1be>
 800fa5c:	4a62      	ldr	r2, [pc, #392]	@ (800fbe8 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	f200 80ae 	bhi.w	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fa64:	4a61      	ldr	r2, [pc, #388]	@ (800fbec <HAL_TIM_ConfigClockSource+0x1fc>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	f000 80a1 	beq.w	800fbae <HAL_TIM_ConfigClockSource+0x1be>
 800fa6c:	4a5f      	ldr	r2, [pc, #380]	@ (800fbec <HAL_TIM_ConfigClockSource+0x1fc>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	f200 80a6 	bhi.w	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fa74:	4a5e      	ldr	r2, [pc, #376]	@ (800fbf0 <HAL_TIM_ConfigClockSource+0x200>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	f000 8099 	beq.w	800fbae <HAL_TIM_ConfigClockSource+0x1be>
 800fa7c:	4a5c      	ldr	r2, [pc, #368]	@ (800fbf0 <HAL_TIM_ConfigClockSource+0x200>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	f200 809e 	bhi.w	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fa84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fa88:	f000 8091 	beq.w	800fbae <HAL_TIM_ConfigClockSource+0x1be>
 800fa8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fa90:	f200 8096 	bhi.w	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fa94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa98:	f000 8089 	beq.w	800fbae <HAL_TIM_ConfigClockSource+0x1be>
 800fa9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800faa0:	f200 808e 	bhi.w	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800faa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800faa8:	d03e      	beq.n	800fb28 <HAL_TIM_ConfigClockSource+0x138>
 800faaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800faae:	f200 8087 	bhi.w	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fab6:	f000 8086 	beq.w	800fbc6 <HAL_TIM_ConfigClockSource+0x1d6>
 800faba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fabe:	d87f      	bhi.n	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fac0:	2b70      	cmp	r3, #112	@ 0x70
 800fac2:	d01a      	beq.n	800fafa <HAL_TIM_ConfigClockSource+0x10a>
 800fac4:	2b70      	cmp	r3, #112	@ 0x70
 800fac6:	d87b      	bhi.n	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fac8:	2b60      	cmp	r3, #96	@ 0x60
 800faca:	d050      	beq.n	800fb6e <HAL_TIM_ConfigClockSource+0x17e>
 800facc:	2b60      	cmp	r3, #96	@ 0x60
 800face:	d877      	bhi.n	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fad0:	2b50      	cmp	r3, #80	@ 0x50
 800fad2:	d03c      	beq.n	800fb4e <HAL_TIM_ConfigClockSource+0x15e>
 800fad4:	2b50      	cmp	r3, #80	@ 0x50
 800fad6:	d873      	bhi.n	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fad8:	2b40      	cmp	r3, #64	@ 0x40
 800fada:	d058      	beq.n	800fb8e <HAL_TIM_ConfigClockSource+0x19e>
 800fadc:	2b40      	cmp	r3, #64	@ 0x40
 800fade:	d86f      	bhi.n	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fae0:	2b30      	cmp	r3, #48	@ 0x30
 800fae2:	d064      	beq.n	800fbae <HAL_TIM_ConfigClockSource+0x1be>
 800fae4:	2b30      	cmp	r3, #48	@ 0x30
 800fae6:	d86b      	bhi.n	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800fae8:	2b20      	cmp	r3, #32
 800faea:	d060      	beq.n	800fbae <HAL_TIM_ConfigClockSource+0x1be>
 800faec:	2b20      	cmp	r3, #32
 800faee:	d867      	bhi.n	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d05c      	beq.n	800fbae <HAL_TIM_ConfigClockSource+0x1be>
 800faf4:	2b10      	cmp	r3, #16
 800faf6:	d05a      	beq.n	800fbae <HAL_TIM_ConfigClockSource+0x1be>
 800faf8:	e062      	b.n	800fbc0 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fb0a:	f000 fdf3 	bl	80106f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	689b      	ldr	r3, [r3, #8]
 800fb14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fb1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	609a      	str	r2, [r3, #8]
      break;
 800fb26:	e04f      	b.n	800fbc8 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fb38:	f000 fddc 	bl	80106f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	689a      	ldr	r2, [r3, #8]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fb4a:	609a      	str	r2, [r3, #8]
      break;
 800fb4c:	e03c      	b.n	800fbc8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	f000 fd4e 	bl	80105fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2150      	movs	r1, #80	@ 0x50
 800fb66:	4618      	mov	r0, r3
 800fb68:	f000 fda7 	bl	80106ba <TIM_ITRx_SetConfig>
      break;
 800fb6c:	e02c      	b.n	800fbc8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	f000 fd6d 	bl	801065a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	2160      	movs	r1, #96	@ 0x60
 800fb86:	4618      	mov	r0, r3
 800fb88:	f000 fd97 	bl	80106ba <TIM_ITRx_SetConfig>
      break;
 800fb8c:	e01c      	b.n	800fbc8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	f000 fd2e 	bl	80105fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2140      	movs	r1, #64	@ 0x40
 800fba6:	4618      	mov	r0, r3
 800fba8:	f000 fd87 	bl	80106ba <TIM_ITRx_SetConfig>
      break;
 800fbac:	e00c      	b.n	800fbc8 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	4610      	mov	r0, r2
 800fbba:	f000 fd7e 	bl	80106ba <TIM_ITRx_SetConfig>
      break;
 800fbbe:	e003      	b.n	800fbc8 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	73fb      	strb	r3, [r7, #15]
      break;
 800fbc4:	e000      	b.n	800fbc8 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800fbc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2201      	movs	r2, #1
 800fbcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	00100070 	.word	0x00100070
 800fbe8:	00100040 	.word	0x00100040
 800fbec:	00100030 	.word	0x00100030
 800fbf0:	00100020 	.word	0x00100020

0800fbf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fbfc:	bf00      	nop
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr

0800fc08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b083      	sub	sp, #12
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fc10:	bf00      	nop
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fc24:	bf00      	nop
 800fc26:	370c      	adds	r7, #12
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fc38:	bf00      	nop
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	4a6e      	ldr	r2, [pc, #440]	@ (800fe10 <TIM_Base_SetConfig+0x1cc>)
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d02b      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	4a6d      	ldr	r2, [pc, #436]	@ (800fe14 <TIM_Base_SetConfig+0x1d0>)
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d027      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc6a:	d023      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc72:	d01f      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	4a68      	ldr	r2, [pc, #416]	@ (800fe18 <TIM_Base_SetConfig+0x1d4>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d01b      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	4a67      	ldr	r2, [pc, #412]	@ (800fe1c <TIM_Base_SetConfig+0x1d8>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d017      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	4a66      	ldr	r2, [pc, #408]	@ (800fe20 <TIM_Base_SetConfig+0x1dc>)
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d013      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	4a65      	ldr	r2, [pc, #404]	@ (800fe24 <TIM_Base_SetConfig+0x1e0>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d00f      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4a64      	ldr	r2, [pc, #400]	@ (800fe28 <TIM_Base_SetConfig+0x1e4>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d00b      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	4a63      	ldr	r2, [pc, #396]	@ (800fe2c <TIM_Base_SetConfig+0x1e8>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d007      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	4a62      	ldr	r2, [pc, #392]	@ (800fe30 <TIM_Base_SetConfig+0x1ec>)
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d003      	beq.n	800fcb4 <TIM_Base_SetConfig+0x70>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	4a61      	ldr	r2, [pc, #388]	@ (800fe34 <TIM_Base_SetConfig+0x1f0>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d108      	bne.n	800fcc6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	68fa      	ldr	r2, [r7, #12]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	4a51      	ldr	r2, [pc, #324]	@ (800fe10 <TIM_Base_SetConfig+0x1cc>)
 800fcca:	4293      	cmp	r3, r2
 800fccc:	d043      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	4a50      	ldr	r2, [pc, #320]	@ (800fe14 <TIM_Base_SetConfig+0x1d0>)
 800fcd2:	4293      	cmp	r3, r2
 800fcd4:	d03f      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcdc:	d03b      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fce4:	d037      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	4a4b      	ldr	r2, [pc, #300]	@ (800fe18 <TIM_Base_SetConfig+0x1d4>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d033      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	4a4a      	ldr	r2, [pc, #296]	@ (800fe1c <TIM_Base_SetConfig+0x1d8>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d02f      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	4a49      	ldr	r2, [pc, #292]	@ (800fe20 <TIM_Base_SetConfig+0x1dc>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d02b      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	4a48      	ldr	r2, [pc, #288]	@ (800fe24 <TIM_Base_SetConfig+0x1e0>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d027      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	4a47      	ldr	r2, [pc, #284]	@ (800fe28 <TIM_Base_SetConfig+0x1e4>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d023      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4a46      	ldr	r2, [pc, #280]	@ (800fe2c <TIM_Base_SetConfig+0x1e8>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d01f      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4a45      	ldr	r2, [pc, #276]	@ (800fe30 <TIM_Base_SetConfig+0x1ec>)
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d01b      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	4a44      	ldr	r2, [pc, #272]	@ (800fe34 <TIM_Base_SetConfig+0x1f0>)
 800fd22:	4293      	cmp	r3, r2
 800fd24:	d017      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4a43      	ldr	r2, [pc, #268]	@ (800fe38 <TIM_Base_SetConfig+0x1f4>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d013      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4a42      	ldr	r2, [pc, #264]	@ (800fe3c <TIM_Base_SetConfig+0x1f8>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d00f      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	4a41      	ldr	r2, [pc, #260]	@ (800fe40 <TIM_Base_SetConfig+0x1fc>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d00b      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4a40      	ldr	r2, [pc, #256]	@ (800fe44 <TIM_Base_SetConfig+0x200>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d007      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4a3f      	ldr	r2, [pc, #252]	@ (800fe48 <TIM_Base_SetConfig+0x204>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d003      	beq.n	800fd56 <TIM_Base_SetConfig+0x112>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4a3e      	ldr	r2, [pc, #248]	@ (800fe4c <TIM_Base_SetConfig+0x208>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d108      	bne.n	800fd68 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fd5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	68fa      	ldr	r2, [r7, #12]
 800fd64:	4313      	orrs	r3, r2
 800fd66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	4313      	orrs	r3, r2
 800fd74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	68fa      	ldr	r2, [r7, #12]
 800fd7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	689a      	ldr	r2, [r3, #8]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	4a20      	ldr	r2, [pc, #128]	@ (800fe10 <TIM_Base_SetConfig+0x1cc>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d023      	beq.n	800fddc <TIM_Base_SetConfig+0x198>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	4a1f      	ldr	r2, [pc, #124]	@ (800fe14 <TIM_Base_SetConfig+0x1d0>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d01f      	beq.n	800fddc <TIM_Base_SetConfig+0x198>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	4a24      	ldr	r2, [pc, #144]	@ (800fe30 <TIM_Base_SetConfig+0x1ec>)
 800fda0:	4293      	cmp	r3, r2
 800fda2:	d01b      	beq.n	800fddc <TIM_Base_SetConfig+0x198>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	4a23      	ldr	r2, [pc, #140]	@ (800fe34 <TIM_Base_SetConfig+0x1f0>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d017      	beq.n	800fddc <TIM_Base_SetConfig+0x198>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	4a22      	ldr	r2, [pc, #136]	@ (800fe38 <TIM_Base_SetConfig+0x1f4>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d013      	beq.n	800fddc <TIM_Base_SetConfig+0x198>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	4a21      	ldr	r2, [pc, #132]	@ (800fe3c <TIM_Base_SetConfig+0x1f8>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d00f      	beq.n	800fddc <TIM_Base_SetConfig+0x198>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	4a20      	ldr	r2, [pc, #128]	@ (800fe40 <TIM_Base_SetConfig+0x1fc>)
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d00b      	beq.n	800fddc <TIM_Base_SetConfig+0x198>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	4a1f      	ldr	r2, [pc, #124]	@ (800fe44 <TIM_Base_SetConfig+0x200>)
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d007      	beq.n	800fddc <TIM_Base_SetConfig+0x198>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	4a1e      	ldr	r2, [pc, #120]	@ (800fe48 <TIM_Base_SetConfig+0x204>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d003      	beq.n	800fddc <TIM_Base_SetConfig+0x198>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	4a1d      	ldr	r2, [pc, #116]	@ (800fe4c <TIM_Base_SetConfig+0x208>)
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d103      	bne.n	800fde4 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	691a      	ldr	r2, [r3, #16]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2201      	movs	r2, #1
 800fde8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	f003 0301 	and.w	r3, r3, #1
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d105      	bne.n	800fe02 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	f023 0201 	bic.w	r2, r3, #1
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	611a      	str	r2, [r3, #16]
  }
}
 800fe02:	bf00      	nop
 800fe04:	3714      	adds	r7, #20
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	40012c00 	.word	0x40012c00
 800fe14:	50012c00 	.word	0x50012c00
 800fe18:	40000400 	.word	0x40000400
 800fe1c:	50000400 	.word	0x50000400
 800fe20:	40000800 	.word	0x40000800
 800fe24:	50000800 	.word	0x50000800
 800fe28:	40000c00 	.word	0x40000c00
 800fe2c:	50000c00 	.word	0x50000c00
 800fe30:	40013400 	.word	0x40013400
 800fe34:	50013400 	.word	0x50013400
 800fe38:	40014000 	.word	0x40014000
 800fe3c:	50014000 	.word	0x50014000
 800fe40:	40014400 	.word	0x40014400
 800fe44:	50014400 	.word	0x50014400
 800fe48:	40014800 	.word	0x40014800
 800fe4c:	50014800 	.word	0x50014800

0800fe50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b087      	sub	sp, #28
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a1b      	ldr	r3, [r3, #32]
 800fe5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6a1b      	ldr	r3, [r3, #32]
 800fe64:	f023 0201 	bic.w	r2, r3, #1
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	699b      	ldr	r3, [r3, #24]
 800fe76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fe7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f023 0303 	bic.w	r3, r3, #3
 800fe8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	68fa      	ldr	r2, [r7, #12]
 800fe92:	4313      	orrs	r3, r2
 800fe94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	f023 0302 	bic.w	r3, r3, #2
 800fe9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	697a      	ldr	r2, [r7, #20]
 800fea4:	4313      	orrs	r3, r2
 800fea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	4a40      	ldr	r2, [pc, #256]	@ (800ffac <TIM_OC1_SetConfig+0x15c>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d023      	beq.n	800fef8 <TIM_OC1_SetConfig+0xa8>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	4a3f      	ldr	r2, [pc, #252]	@ (800ffb0 <TIM_OC1_SetConfig+0x160>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d01f      	beq.n	800fef8 <TIM_OC1_SetConfig+0xa8>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	4a3e      	ldr	r2, [pc, #248]	@ (800ffb4 <TIM_OC1_SetConfig+0x164>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d01b      	beq.n	800fef8 <TIM_OC1_SetConfig+0xa8>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	4a3d      	ldr	r2, [pc, #244]	@ (800ffb8 <TIM_OC1_SetConfig+0x168>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d017      	beq.n	800fef8 <TIM_OC1_SetConfig+0xa8>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	4a3c      	ldr	r2, [pc, #240]	@ (800ffbc <TIM_OC1_SetConfig+0x16c>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d013      	beq.n	800fef8 <TIM_OC1_SetConfig+0xa8>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	4a3b      	ldr	r2, [pc, #236]	@ (800ffc0 <TIM_OC1_SetConfig+0x170>)
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d00f      	beq.n	800fef8 <TIM_OC1_SetConfig+0xa8>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	4a3a      	ldr	r2, [pc, #232]	@ (800ffc4 <TIM_OC1_SetConfig+0x174>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d00b      	beq.n	800fef8 <TIM_OC1_SetConfig+0xa8>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	4a39      	ldr	r2, [pc, #228]	@ (800ffc8 <TIM_OC1_SetConfig+0x178>)
 800fee4:	4293      	cmp	r3, r2
 800fee6:	d007      	beq.n	800fef8 <TIM_OC1_SetConfig+0xa8>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	4a38      	ldr	r2, [pc, #224]	@ (800ffcc <TIM_OC1_SetConfig+0x17c>)
 800feec:	4293      	cmp	r3, r2
 800feee:	d003      	beq.n	800fef8 <TIM_OC1_SetConfig+0xa8>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4a37      	ldr	r2, [pc, #220]	@ (800ffd0 <TIM_OC1_SetConfig+0x180>)
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d10c      	bne.n	800ff12 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	f023 0308 	bic.w	r3, r3, #8
 800fefe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	697a      	ldr	r2, [r7, #20]
 800ff06:	4313      	orrs	r3, r2
 800ff08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	f023 0304 	bic.w	r3, r3, #4
 800ff10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	4a25      	ldr	r2, [pc, #148]	@ (800ffac <TIM_OC1_SetConfig+0x15c>)
 800ff16:	4293      	cmp	r3, r2
 800ff18:	d023      	beq.n	800ff62 <TIM_OC1_SetConfig+0x112>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4a24      	ldr	r2, [pc, #144]	@ (800ffb0 <TIM_OC1_SetConfig+0x160>)
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d01f      	beq.n	800ff62 <TIM_OC1_SetConfig+0x112>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	4a23      	ldr	r2, [pc, #140]	@ (800ffb4 <TIM_OC1_SetConfig+0x164>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d01b      	beq.n	800ff62 <TIM_OC1_SetConfig+0x112>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4a22      	ldr	r2, [pc, #136]	@ (800ffb8 <TIM_OC1_SetConfig+0x168>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d017      	beq.n	800ff62 <TIM_OC1_SetConfig+0x112>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4a21      	ldr	r2, [pc, #132]	@ (800ffbc <TIM_OC1_SetConfig+0x16c>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d013      	beq.n	800ff62 <TIM_OC1_SetConfig+0x112>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4a20      	ldr	r2, [pc, #128]	@ (800ffc0 <TIM_OC1_SetConfig+0x170>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d00f      	beq.n	800ff62 <TIM_OC1_SetConfig+0x112>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4a1f      	ldr	r2, [pc, #124]	@ (800ffc4 <TIM_OC1_SetConfig+0x174>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d00b      	beq.n	800ff62 <TIM_OC1_SetConfig+0x112>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4a1e      	ldr	r2, [pc, #120]	@ (800ffc8 <TIM_OC1_SetConfig+0x178>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d007      	beq.n	800ff62 <TIM_OC1_SetConfig+0x112>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4a1d      	ldr	r2, [pc, #116]	@ (800ffcc <TIM_OC1_SetConfig+0x17c>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d003      	beq.n	800ff62 <TIM_OC1_SetConfig+0x112>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	4a1c      	ldr	r2, [pc, #112]	@ (800ffd0 <TIM_OC1_SetConfig+0x180>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d111      	bne.n	800ff86 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ff68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ff70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	695b      	ldr	r3, [r3, #20]
 800ff76:	693a      	ldr	r2, [r7, #16]
 800ff78:	4313      	orrs	r3, r2
 800ff7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	699b      	ldr	r3, [r3, #24]
 800ff80:	693a      	ldr	r2, [r7, #16]
 800ff82:	4313      	orrs	r3, r2
 800ff84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	693a      	ldr	r2, [r7, #16]
 800ff8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	68fa      	ldr	r2, [r7, #12]
 800ff90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	685a      	ldr	r2, [r3, #4]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	697a      	ldr	r2, [r7, #20]
 800ff9e:	621a      	str	r2, [r3, #32]
}
 800ffa0:	bf00      	nop
 800ffa2:	371c      	adds	r7, #28
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr
 800ffac:	40012c00 	.word	0x40012c00
 800ffb0:	50012c00 	.word	0x50012c00
 800ffb4:	40013400 	.word	0x40013400
 800ffb8:	50013400 	.word	0x50013400
 800ffbc:	40014000 	.word	0x40014000
 800ffc0:	50014000 	.word	0x50014000
 800ffc4:	40014400 	.word	0x40014400
 800ffc8:	50014400 	.word	0x50014400
 800ffcc:	40014800 	.word	0x40014800
 800ffd0:	50014800 	.word	0x50014800

0800ffd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b087      	sub	sp, #28
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6a1b      	ldr	r3, [r3, #32]
 800ffe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a1b      	ldr	r3, [r3, #32]
 800ffe8:	f023 0210 	bic.w	r2, r3, #16
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	699b      	ldr	r3, [r3, #24]
 800fffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801000e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	021b      	lsls	r3, r3, #8
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	4313      	orrs	r3, r2
 801001a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	f023 0320 	bic.w	r3, r3, #32
 8010022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	689b      	ldr	r3, [r3, #8]
 8010028:	011b      	lsls	r3, r3, #4
 801002a:	697a      	ldr	r2, [r7, #20]
 801002c:	4313      	orrs	r3, r2
 801002e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	4a36      	ldr	r2, [pc, #216]	@ (801010c <TIM_OC2_SetConfig+0x138>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d00b      	beq.n	8010050 <TIM_OC2_SetConfig+0x7c>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4a35      	ldr	r2, [pc, #212]	@ (8010110 <TIM_OC2_SetConfig+0x13c>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d007      	beq.n	8010050 <TIM_OC2_SetConfig+0x7c>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	4a34      	ldr	r2, [pc, #208]	@ (8010114 <TIM_OC2_SetConfig+0x140>)
 8010044:	4293      	cmp	r3, r2
 8010046:	d003      	beq.n	8010050 <TIM_OC2_SetConfig+0x7c>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	4a33      	ldr	r2, [pc, #204]	@ (8010118 <TIM_OC2_SetConfig+0x144>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d10d      	bne.n	801006c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	011b      	lsls	r3, r3, #4
 801005e:	697a      	ldr	r2, [r7, #20]
 8010060:	4313      	orrs	r3, r2
 8010062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801006a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4a27      	ldr	r2, [pc, #156]	@ (801010c <TIM_OC2_SetConfig+0x138>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d023      	beq.n	80100bc <TIM_OC2_SetConfig+0xe8>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	4a26      	ldr	r2, [pc, #152]	@ (8010110 <TIM_OC2_SetConfig+0x13c>)
 8010078:	4293      	cmp	r3, r2
 801007a:	d01f      	beq.n	80100bc <TIM_OC2_SetConfig+0xe8>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	4a25      	ldr	r2, [pc, #148]	@ (8010114 <TIM_OC2_SetConfig+0x140>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d01b      	beq.n	80100bc <TIM_OC2_SetConfig+0xe8>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	4a24      	ldr	r2, [pc, #144]	@ (8010118 <TIM_OC2_SetConfig+0x144>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d017      	beq.n	80100bc <TIM_OC2_SetConfig+0xe8>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4a23      	ldr	r2, [pc, #140]	@ (801011c <TIM_OC2_SetConfig+0x148>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d013      	beq.n	80100bc <TIM_OC2_SetConfig+0xe8>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4a22      	ldr	r2, [pc, #136]	@ (8010120 <TIM_OC2_SetConfig+0x14c>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d00f      	beq.n	80100bc <TIM_OC2_SetConfig+0xe8>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4a21      	ldr	r2, [pc, #132]	@ (8010124 <TIM_OC2_SetConfig+0x150>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d00b      	beq.n	80100bc <TIM_OC2_SetConfig+0xe8>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4a20      	ldr	r2, [pc, #128]	@ (8010128 <TIM_OC2_SetConfig+0x154>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d007      	beq.n	80100bc <TIM_OC2_SetConfig+0xe8>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	4a1f      	ldr	r2, [pc, #124]	@ (801012c <TIM_OC2_SetConfig+0x158>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d003      	beq.n	80100bc <TIM_OC2_SetConfig+0xe8>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4a1e      	ldr	r2, [pc, #120]	@ (8010130 <TIM_OC2_SetConfig+0x15c>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d113      	bne.n	80100e4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80100c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80100ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	695b      	ldr	r3, [r3, #20]
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	693a      	ldr	r2, [r7, #16]
 80100d4:	4313      	orrs	r3, r2
 80100d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	699b      	ldr	r3, [r3, #24]
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	693a      	ldr	r2, [r7, #16]
 80100e0:	4313      	orrs	r3, r2
 80100e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	693a      	ldr	r2, [r7, #16]
 80100e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	685a      	ldr	r2, [r3, #4]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	697a      	ldr	r2, [r7, #20]
 80100fc:	621a      	str	r2, [r3, #32]
}
 80100fe:	bf00      	nop
 8010100:	371c      	adds	r7, #28
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr
 801010a:	bf00      	nop
 801010c:	40012c00 	.word	0x40012c00
 8010110:	50012c00 	.word	0x50012c00
 8010114:	40013400 	.word	0x40013400
 8010118:	50013400 	.word	0x50013400
 801011c:	40014000 	.word	0x40014000
 8010120:	50014000 	.word	0x50014000
 8010124:	40014400 	.word	0x40014400
 8010128:	50014400 	.word	0x50014400
 801012c:	40014800 	.word	0x40014800
 8010130:	50014800 	.word	0x50014800

08010134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010134:	b480      	push	{r7}
 8010136:	b087      	sub	sp, #28
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6a1b      	ldr	r3, [r3, #32]
 8010142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6a1b      	ldr	r3, [r3, #32]
 8010148:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	69db      	ldr	r3, [r3, #28]
 801015a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f023 0303 	bic.w	r3, r3, #3
 801016e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	68fa      	ldr	r2, [r7, #12]
 8010176:	4313      	orrs	r3, r2
 8010178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	021b      	lsls	r3, r3, #8
 8010188:	697a      	ldr	r2, [r7, #20]
 801018a:	4313      	orrs	r3, r2
 801018c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4a35      	ldr	r2, [pc, #212]	@ (8010268 <TIM_OC3_SetConfig+0x134>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d00b      	beq.n	80101ae <TIM_OC3_SetConfig+0x7a>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4a34      	ldr	r2, [pc, #208]	@ (801026c <TIM_OC3_SetConfig+0x138>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d007      	beq.n	80101ae <TIM_OC3_SetConfig+0x7a>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4a33      	ldr	r2, [pc, #204]	@ (8010270 <TIM_OC3_SetConfig+0x13c>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d003      	beq.n	80101ae <TIM_OC3_SetConfig+0x7a>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4a32      	ldr	r2, [pc, #200]	@ (8010274 <TIM_OC3_SetConfig+0x140>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d10d      	bne.n	80101ca <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80101b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	68db      	ldr	r3, [r3, #12]
 80101ba:	021b      	lsls	r3, r3, #8
 80101bc:	697a      	ldr	r2, [r7, #20]
 80101be:	4313      	orrs	r3, r2
 80101c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80101c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	4a26      	ldr	r2, [pc, #152]	@ (8010268 <TIM_OC3_SetConfig+0x134>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d023      	beq.n	801021a <TIM_OC3_SetConfig+0xe6>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4a25      	ldr	r2, [pc, #148]	@ (801026c <TIM_OC3_SetConfig+0x138>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d01f      	beq.n	801021a <TIM_OC3_SetConfig+0xe6>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	4a24      	ldr	r2, [pc, #144]	@ (8010270 <TIM_OC3_SetConfig+0x13c>)
 80101de:	4293      	cmp	r3, r2
 80101e0:	d01b      	beq.n	801021a <TIM_OC3_SetConfig+0xe6>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	4a23      	ldr	r2, [pc, #140]	@ (8010274 <TIM_OC3_SetConfig+0x140>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d017      	beq.n	801021a <TIM_OC3_SetConfig+0xe6>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4a22      	ldr	r2, [pc, #136]	@ (8010278 <TIM_OC3_SetConfig+0x144>)
 80101ee:	4293      	cmp	r3, r2
 80101f0:	d013      	beq.n	801021a <TIM_OC3_SetConfig+0xe6>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4a21      	ldr	r2, [pc, #132]	@ (801027c <TIM_OC3_SetConfig+0x148>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d00f      	beq.n	801021a <TIM_OC3_SetConfig+0xe6>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4a20      	ldr	r2, [pc, #128]	@ (8010280 <TIM_OC3_SetConfig+0x14c>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d00b      	beq.n	801021a <TIM_OC3_SetConfig+0xe6>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	4a1f      	ldr	r2, [pc, #124]	@ (8010284 <TIM_OC3_SetConfig+0x150>)
 8010206:	4293      	cmp	r3, r2
 8010208:	d007      	beq.n	801021a <TIM_OC3_SetConfig+0xe6>
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	4a1e      	ldr	r2, [pc, #120]	@ (8010288 <TIM_OC3_SetConfig+0x154>)
 801020e:	4293      	cmp	r3, r2
 8010210:	d003      	beq.n	801021a <TIM_OC3_SetConfig+0xe6>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4a1d      	ldr	r2, [pc, #116]	@ (801028c <TIM_OC3_SetConfig+0x158>)
 8010216:	4293      	cmp	r3, r2
 8010218:	d113      	bne.n	8010242 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	695b      	ldr	r3, [r3, #20]
 801022e:	011b      	lsls	r3, r3, #4
 8010230:	693a      	ldr	r2, [r7, #16]
 8010232:	4313      	orrs	r3, r2
 8010234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	699b      	ldr	r3, [r3, #24]
 801023a:	011b      	lsls	r3, r3, #4
 801023c:	693a      	ldr	r2, [r7, #16]
 801023e:	4313      	orrs	r3, r2
 8010240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	693a      	ldr	r2, [r7, #16]
 8010246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	68fa      	ldr	r2, [r7, #12]
 801024c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	685a      	ldr	r2, [r3, #4]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	621a      	str	r2, [r3, #32]
}
 801025c:	bf00      	nop
 801025e:	371c      	adds	r7, #28
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr
 8010268:	40012c00 	.word	0x40012c00
 801026c:	50012c00 	.word	0x50012c00
 8010270:	40013400 	.word	0x40013400
 8010274:	50013400 	.word	0x50013400
 8010278:	40014000 	.word	0x40014000
 801027c:	50014000 	.word	0x50014000
 8010280:	40014400 	.word	0x40014400
 8010284:	50014400 	.word	0x50014400
 8010288:	40014800 	.word	0x40014800
 801028c:	50014800 	.word	0x50014800

08010290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010290:	b480      	push	{r7}
 8010292:	b087      	sub	sp, #28
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6a1b      	ldr	r3, [r3, #32]
 801029e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6a1b      	ldr	r3, [r3, #32]
 80102a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	69db      	ldr	r3, [r3, #28]
 80102b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80102be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80102c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80102ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	021b      	lsls	r3, r3, #8
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80102de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	031b      	lsls	r3, r3, #12
 80102e6:	697a      	ldr	r2, [r7, #20]
 80102e8:	4313      	orrs	r3, r2
 80102ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4a36      	ldr	r2, [pc, #216]	@ (80103c8 <TIM_OC4_SetConfig+0x138>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d00b      	beq.n	801030c <TIM_OC4_SetConfig+0x7c>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4a35      	ldr	r2, [pc, #212]	@ (80103cc <TIM_OC4_SetConfig+0x13c>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d007      	beq.n	801030c <TIM_OC4_SetConfig+0x7c>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	4a34      	ldr	r2, [pc, #208]	@ (80103d0 <TIM_OC4_SetConfig+0x140>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d003      	beq.n	801030c <TIM_OC4_SetConfig+0x7c>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	4a33      	ldr	r2, [pc, #204]	@ (80103d4 <TIM_OC4_SetConfig+0x144>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d10d      	bne.n	8010328 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	031b      	lsls	r3, r3, #12
 801031a:	697a      	ldr	r2, [r7, #20]
 801031c:	4313      	orrs	r3, r2
 801031e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	4a27      	ldr	r2, [pc, #156]	@ (80103c8 <TIM_OC4_SetConfig+0x138>)
 801032c:	4293      	cmp	r3, r2
 801032e:	d023      	beq.n	8010378 <TIM_OC4_SetConfig+0xe8>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4a26      	ldr	r2, [pc, #152]	@ (80103cc <TIM_OC4_SetConfig+0x13c>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d01f      	beq.n	8010378 <TIM_OC4_SetConfig+0xe8>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	4a25      	ldr	r2, [pc, #148]	@ (80103d0 <TIM_OC4_SetConfig+0x140>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d01b      	beq.n	8010378 <TIM_OC4_SetConfig+0xe8>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	4a24      	ldr	r2, [pc, #144]	@ (80103d4 <TIM_OC4_SetConfig+0x144>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d017      	beq.n	8010378 <TIM_OC4_SetConfig+0xe8>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4a23      	ldr	r2, [pc, #140]	@ (80103d8 <TIM_OC4_SetConfig+0x148>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d013      	beq.n	8010378 <TIM_OC4_SetConfig+0xe8>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	4a22      	ldr	r2, [pc, #136]	@ (80103dc <TIM_OC4_SetConfig+0x14c>)
 8010354:	4293      	cmp	r3, r2
 8010356:	d00f      	beq.n	8010378 <TIM_OC4_SetConfig+0xe8>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	4a21      	ldr	r2, [pc, #132]	@ (80103e0 <TIM_OC4_SetConfig+0x150>)
 801035c:	4293      	cmp	r3, r2
 801035e:	d00b      	beq.n	8010378 <TIM_OC4_SetConfig+0xe8>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4a20      	ldr	r2, [pc, #128]	@ (80103e4 <TIM_OC4_SetConfig+0x154>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d007      	beq.n	8010378 <TIM_OC4_SetConfig+0xe8>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	4a1f      	ldr	r2, [pc, #124]	@ (80103e8 <TIM_OC4_SetConfig+0x158>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d003      	beq.n	8010378 <TIM_OC4_SetConfig+0xe8>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4a1e      	ldr	r2, [pc, #120]	@ (80103ec <TIM_OC4_SetConfig+0x15c>)
 8010374:	4293      	cmp	r3, r2
 8010376:	d113      	bne.n	80103a0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801037e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010386:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	695b      	ldr	r3, [r3, #20]
 801038c:	019b      	lsls	r3, r3, #6
 801038e:	693a      	ldr	r2, [r7, #16]
 8010390:	4313      	orrs	r3, r2
 8010392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	699b      	ldr	r3, [r3, #24]
 8010398:	019b      	lsls	r3, r3, #6
 801039a:	693a      	ldr	r2, [r7, #16]
 801039c:	4313      	orrs	r3, r2
 801039e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	693a      	ldr	r2, [r7, #16]
 80103a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	685a      	ldr	r2, [r3, #4]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	697a      	ldr	r2, [r7, #20]
 80103b8:	621a      	str	r2, [r3, #32]
}
 80103ba:	bf00      	nop
 80103bc:	371c      	adds	r7, #28
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	40012c00 	.word	0x40012c00
 80103cc:	50012c00 	.word	0x50012c00
 80103d0:	40013400 	.word	0x40013400
 80103d4:	50013400 	.word	0x50013400
 80103d8:	40014000 	.word	0x40014000
 80103dc:	50014000 	.word	0x50014000
 80103e0:	40014400 	.word	0x40014400
 80103e4:	50014400 	.word	0x50014400
 80103e8:	40014800 	.word	0x40014800
 80103ec:	50014800 	.word	0x50014800

080103f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b087      	sub	sp, #28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6a1b      	ldr	r3, [r3, #32]
 80103fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6a1b      	ldr	r3, [r3, #32]
 8010404:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801041e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	4313      	orrs	r3, r2
 801042c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010434:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	689b      	ldr	r3, [r3, #8]
 801043a:	041b      	lsls	r3, r3, #16
 801043c:	693a      	ldr	r2, [r7, #16]
 801043e:	4313      	orrs	r3, r2
 8010440:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	4a21      	ldr	r2, [pc, #132]	@ (80104cc <TIM_OC5_SetConfig+0xdc>)
 8010446:	4293      	cmp	r3, r2
 8010448:	d023      	beq.n	8010492 <TIM_OC5_SetConfig+0xa2>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	4a20      	ldr	r2, [pc, #128]	@ (80104d0 <TIM_OC5_SetConfig+0xe0>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d01f      	beq.n	8010492 <TIM_OC5_SetConfig+0xa2>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	4a1f      	ldr	r2, [pc, #124]	@ (80104d4 <TIM_OC5_SetConfig+0xe4>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d01b      	beq.n	8010492 <TIM_OC5_SetConfig+0xa2>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4a1e      	ldr	r2, [pc, #120]	@ (80104d8 <TIM_OC5_SetConfig+0xe8>)
 801045e:	4293      	cmp	r3, r2
 8010460:	d017      	beq.n	8010492 <TIM_OC5_SetConfig+0xa2>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4a1d      	ldr	r2, [pc, #116]	@ (80104dc <TIM_OC5_SetConfig+0xec>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d013      	beq.n	8010492 <TIM_OC5_SetConfig+0xa2>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4a1c      	ldr	r2, [pc, #112]	@ (80104e0 <TIM_OC5_SetConfig+0xf0>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d00f      	beq.n	8010492 <TIM_OC5_SetConfig+0xa2>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	4a1b      	ldr	r2, [pc, #108]	@ (80104e4 <TIM_OC5_SetConfig+0xf4>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d00b      	beq.n	8010492 <TIM_OC5_SetConfig+0xa2>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4a1a      	ldr	r2, [pc, #104]	@ (80104e8 <TIM_OC5_SetConfig+0xf8>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d007      	beq.n	8010492 <TIM_OC5_SetConfig+0xa2>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4a19      	ldr	r2, [pc, #100]	@ (80104ec <TIM_OC5_SetConfig+0xfc>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d003      	beq.n	8010492 <TIM_OC5_SetConfig+0xa2>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4a18      	ldr	r2, [pc, #96]	@ (80104f0 <TIM_OC5_SetConfig+0x100>)
 801048e:	4293      	cmp	r3, r2
 8010490:	d109      	bne.n	80104a6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010498:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	695b      	ldr	r3, [r3, #20]
 801049e:	021b      	lsls	r3, r3, #8
 80104a0:	697a      	ldr	r2, [r7, #20]
 80104a2:	4313      	orrs	r3, r2
 80104a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	697a      	ldr	r2, [r7, #20]
 80104aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	68fa      	ldr	r2, [r7, #12]
 80104b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	685a      	ldr	r2, [r3, #4]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	693a      	ldr	r2, [r7, #16]
 80104be:	621a      	str	r2, [r3, #32]
}
 80104c0:	bf00      	nop
 80104c2:	371c      	adds	r7, #28
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr
 80104cc:	40012c00 	.word	0x40012c00
 80104d0:	50012c00 	.word	0x50012c00
 80104d4:	40013400 	.word	0x40013400
 80104d8:	50013400 	.word	0x50013400
 80104dc:	40014000 	.word	0x40014000
 80104e0:	50014000 	.word	0x50014000
 80104e4:	40014400 	.word	0x40014400
 80104e8:	50014400 	.word	0x50014400
 80104ec:	40014800 	.word	0x40014800
 80104f0:	50014800 	.word	0x50014800

080104f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b087      	sub	sp, #28
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6a1b      	ldr	r3, [r3, #32]
 8010502:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6a1b      	ldr	r3, [r3, #32]
 8010508:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801051a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	021b      	lsls	r3, r3, #8
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	4313      	orrs	r3, r2
 8010532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801053a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	689b      	ldr	r3, [r3, #8]
 8010540:	051b      	lsls	r3, r3, #20
 8010542:	693a      	ldr	r2, [r7, #16]
 8010544:	4313      	orrs	r3, r2
 8010546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	4a22      	ldr	r2, [pc, #136]	@ (80105d4 <TIM_OC6_SetConfig+0xe0>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d023      	beq.n	8010598 <TIM_OC6_SetConfig+0xa4>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	4a21      	ldr	r2, [pc, #132]	@ (80105d8 <TIM_OC6_SetConfig+0xe4>)
 8010554:	4293      	cmp	r3, r2
 8010556:	d01f      	beq.n	8010598 <TIM_OC6_SetConfig+0xa4>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	4a20      	ldr	r2, [pc, #128]	@ (80105dc <TIM_OC6_SetConfig+0xe8>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d01b      	beq.n	8010598 <TIM_OC6_SetConfig+0xa4>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	4a1f      	ldr	r2, [pc, #124]	@ (80105e0 <TIM_OC6_SetConfig+0xec>)
 8010564:	4293      	cmp	r3, r2
 8010566:	d017      	beq.n	8010598 <TIM_OC6_SetConfig+0xa4>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	4a1e      	ldr	r2, [pc, #120]	@ (80105e4 <TIM_OC6_SetConfig+0xf0>)
 801056c:	4293      	cmp	r3, r2
 801056e:	d013      	beq.n	8010598 <TIM_OC6_SetConfig+0xa4>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	4a1d      	ldr	r2, [pc, #116]	@ (80105e8 <TIM_OC6_SetConfig+0xf4>)
 8010574:	4293      	cmp	r3, r2
 8010576:	d00f      	beq.n	8010598 <TIM_OC6_SetConfig+0xa4>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	4a1c      	ldr	r2, [pc, #112]	@ (80105ec <TIM_OC6_SetConfig+0xf8>)
 801057c:	4293      	cmp	r3, r2
 801057e:	d00b      	beq.n	8010598 <TIM_OC6_SetConfig+0xa4>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	4a1b      	ldr	r2, [pc, #108]	@ (80105f0 <TIM_OC6_SetConfig+0xfc>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d007      	beq.n	8010598 <TIM_OC6_SetConfig+0xa4>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	4a1a      	ldr	r2, [pc, #104]	@ (80105f4 <TIM_OC6_SetConfig+0x100>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d003      	beq.n	8010598 <TIM_OC6_SetConfig+0xa4>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4a19      	ldr	r2, [pc, #100]	@ (80105f8 <TIM_OC6_SetConfig+0x104>)
 8010594:	4293      	cmp	r3, r2
 8010596:	d109      	bne.n	80105ac <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801059e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	695b      	ldr	r3, [r3, #20]
 80105a4:	029b      	lsls	r3, r3, #10
 80105a6:	697a      	ldr	r2, [r7, #20]
 80105a8:	4313      	orrs	r3, r2
 80105aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	697a      	ldr	r2, [r7, #20]
 80105b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	685a      	ldr	r2, [r3, #4]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	693a      	ldr	r2, [r7, #16]
 80105c4:	621a      	str	r2, [r3, #32]
}
 80105c6:	bf00      	nop
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop
 80105d4:	40012c00 	.word	0x40012c00
 80105d8:	50012c00 	.word	0x50012c00
 80105dc:	40013400 	.word	0x40013400
 80105e0:	50013400 	.word	0x50013400
 80105e4:	40014000 	.word	0x40014000
 80105e8:	50014000 	.word	0x50014000
 80105ec:	40014400 	.word	0x40014400
 80105f0:	50014400 	.word	0x50014400
 80105f4:	40014800 	.word	0x40014800
 80105f8:	50014800 	.word	0x50014800

080105fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80105fc:	b480      	push	{r7}
 80105fe:	b087      	sub	sp, #28
 8010600:	af00      	add	r7, sp, #0
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	60b9      	str	r1, [r7, #8]
 8010606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	6a1b      	ldr	r3, [r3, #32]
 801060c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6a1b      	ldr	r3, [r3, #32]
 8010612:	f023 0201 	bic.w	r2, r3, #1
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	699b      	ldr	r3, [r3, #24]
 801061e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	011b      	lsls	r3, r3, #4
 801062c:	693a      	ldr	r2, [r7, #16]
 801062e:	4313      	orrs	r3, r2
 8010630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	f023 030a 	bic.w	r3, r3, #10
 8010638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801063a:	697a      	ldr	r2, [r7, #20]
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	4313      	orrs	r3, r2
 8010640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	693a      	ldr	r2, [r7, #16]
 8010646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	697a      	ldr	r2, [r7, #20]
 801064c:	621a      	str	r2, [r3, #32]
}
 801064e:	bf00      	nop
 8010650:	371c      	adds	r7, #28
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr

0801065a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801065a:	b480      	push	{r7}
 801065c:	b087      	sub	sp, #28
 801065e:	af00      	add	r7, sp, #0
 8010660:	60f8      	str	r0, [r7, #12]
 8010662:	60b9      	str	r1, [r7, #8]
 8010664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	6a1b      	ldr	r3, [r3, #32]
 801066a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6a1b      	ldr	r3, [r3, #32]
 8010670:	f023 0210 	bic.w	r2, r3, #16
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	699b      	ldr	r3, [r3, #24]
 801067c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	031b      	lsls	r3, r3, #12
 801068a:	693a      	ldr	r2, [r7, #16]
 801068c:	4313      	orrs	r3, r2
 801068e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010696:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	011b      	lsls	r3, r3, #4
 801069c:	697a      	ldr	r2, [r7, #20]
 801069e:	4313      	orrs	r3, r2
 80106a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	693a      	ldr	r2, [r7, #16]
 80106a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	697a      	ldr	r2, [r7, #20]
 80106ac:	621a      	str	r2, [r3, #32]
}
 80106ae:	bf00      	nop
 80106b0:	371c      	adds	r7, #28
 80106b2:	46bd      	mov	sp, r7
 80106b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b8:	4770      	bx	lr

080106ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80106ba:	b480      	push	{r7}
 80106bc:	b085      	sub	sp, #20
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
 80106c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80106d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80106d6:	683a      	ldr	r2, [r7, #0]
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	4313      	orrs	r3, r2
 80106dc:	f043 0307 	orr.w	r3, r3, #7
 80106e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	68fa      	ldr	r2, [r7, #12]
 80106e6:	609a      	str	r2, [r3, #8]
}
 80106e8:	bf00      	nop
 80106ea:	3714      	adds	r7, #20
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b087      	sub	sp, #28
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	60b9      	str	r1, [r7, #8]
 80106fe:	607a      	str	r2, [r7, #4]
 8010700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801070e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	021a      	lsls	r2, r3, #8
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	431a      	orrs	r2, r3
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	4313      	orrs	r3, r2
 801071c:	697a      	ldr	r2, [r7, #20]
 801071e:	4313      	orrs	r3, r2
 8010720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	697a      	ldr	r2, [r7, #20]
 8010726:	609a      	str	r2, [r3, #8]
}
 8010728:	bf00      	nop
 801072a:	371c      	adds	r7, #28
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010734:	b480      	push	{r7}
 8010736:	b085      	sub	sp, #20
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010744:	2b01      	cmp	r3, #1
 8010746:	d101      	bne.n	801074c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010748:	2302      	movs	r3, #2
 801074a:	e097      	b.n	801087c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2202      	movs	r2, #2
 8010758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	689b      	ldr	r3, [r3, #8]
 801076a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	4a45      	ldr	r2, [pc, #276]	@ (8010888 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010772:	4293      	cmp	r3, r2
 8010774:	d00e      	beq.n	8010794 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	4a44      	ldr	r2, [pc, #272]	@ (801088c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d009      	beq.n	8010794 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a42      	ldr	r2, [pc, #264]	@ (8010890 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d004      	beq.n	8010794 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4a41      	ldr	r2, [pc, #260]	@ (8010894 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d108      	bne.n	80107a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801079a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	68fa      	ldr	r2, [r7, #12]
 80107a2:	4313      	orrs	r3, r2
 80107a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80107ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	4313      	orrs	r3, r2
 80107ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	68fa      	ldr	r2, [r7, #12]
 80107c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4a2f      	ldr	r2, [pc, #188]	@ (8010888 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d040      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	4a2e      	ldr	r2, [pc, #184]	@ (801088c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d03b      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80107e0:	d036      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80107ea:	d031      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4a29      	ldr	r2, [pc, #164]	@ (8010898 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d02c      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4a28      	ldr	r2, [pc, #160]	@ (801089c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d027      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	4a26      	ldr	r2, [pc, #152]	@ (80108a0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8010806:	4293      	cmp	r3, r2
 8010808:	d022      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	4a25      	ldr	r2, [pc, #148]	@ (80108a4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010810:	4293      	cmp	r3, r2
 8010812:	d01d      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	4a23      	ldr	r2, [pc, #140]	@ (80108a8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d018      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4a22      	ldr	r2, [pc, #136]	@ (80108ac <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010824:	4293      	cmp	r3, r2
 8010826:	d013      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4a18      	ldr	r2, [pc, #96]	@ (8010890 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801082e:	4293      	cmp	r3, r2
 8010830:	d00e      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	4a17      	ldr	r2, [pc, #92]	@ (8010894 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010838:	4293      	cmp	r3, r2
 801083a:	d009      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4a1b      	ldr	r2, [pc, #108]	@ (80108b0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d004      	beq.n	8010850 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4a1a      	ldr	r2, [pc, #104]	@ (80108b4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 801084c:	4293      	cmp	r3, r2
 801084e:	d10c      	bne.n	801086a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	689b      	ldr	r3, [r3, #8]
 801085c:	68ba      	ldr	r2, [r7, #8]
 801085e:	4313      	orrs	r3, r2
 8010860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2201      	movs	r2, #1
 801086e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2200      	movs	r2, #0
 8010876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3714      	adds	r7, #20
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr
 8010888:	40012c00 	.word	0x40012c00
 801088c:	50012c00 	.word	0x50012c00
 8010890:	40013400 	.word	0x40013400
 8010894:	50013400 	.word	0x50013400
 8010898:	40000400 	.word	0x40000400
 801089c:	50000400 	.word	0x50000400
 80108a0:	40000800 	.word	0x40000800
 80108a4:	50000800 	.word	0x50000800
 80108a8:	40000c00 	.word	0x40000c00
 80108ac:	50000c00 	.word	0x50000c00
 80108b0:	40014000 	.word	0x40014000
 80108b4:	50014000 	.word	0x50014000

080108b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b083      	sub	sp, #12
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80108c0:	bf00      	nop
 80108c2:	370c      	adds	r7, #12
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr

080108cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80108d4:	bf00      	nop
 80108d6:	370c      	adds	r7, #12
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80108e8:	bf00      	nop
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr

080108f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80108fc:	bf00      	nop
 80108fe:	370c      	adds	r7, #12
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8010910:	bf00      	nop
 8010912:	370c      	adds	r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801091c:	b480      	push	{r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8010924:	bf00      	nop
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8010938:	bf00      	nop
 801093a:	370c      	adds	r7, #12
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d101      	bne.n	8010956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010952:	2301      	movs	r3, #1
 8010954:	e042      	b.n	80109dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801095c:	2b00      	cmp	r3, #0
 801095e:	d106      	bne.n	801096e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2200      	movs	r2, #0
 8010964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7f1 fe93 	bl	8002694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2224      	movs	r2, #36	@ 0x24
 8010972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f022 0201 	bic.w	r2, r2, #1
 8010984:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801098a:	2b00      	cmp	r3, #0
 801098c:	d002      	beq.n	8010994 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 fd02 	bl	8011398 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 fb51 	bl	801103c <UART_SetConfig>
 801099a:	4603      	mov	r3, r0
 801099c:	2b01      	cmp	r3, #1
 801099e:	d101      	bne.n	80109a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80109a0:	2301      	movs	r3, #1
 80109a2:	e01b      	b.n	80109dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	685a      	ldr	r2, [r3, #4]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80109b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	689a      	ldr	r2, [r3, #8]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80109c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f042 0201 	orr.w	r2, r2, #1
 80109d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f000 fd81 	bl	80114dc <UART_CheckIdleState>
 80109da:	4603      	mov	r3, r0
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b0ba      	sub	sp, #232	@ 0xe8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	69db      	ldr	r3, [r3, #28]
 80109f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	689b      	ldr	r3, [r3, #8]
 8010a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010a0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010a0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010a12:	4013      	ands	r3, r2
 8010a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d11b      	bne.n	8010a58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a24:	f003 0320 	and.w	r3, r3, #32
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d015      	beq.n	8010a58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a30:	f003 0320 	and.w	r3, r3, #32
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d105      	bne.n	8010a44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d009      	beq.n	8010a58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	f000 82cb 	beq.w	8010fe4 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	4798      	blx	r3
      }
      return;
 8010a56:	e2c5      	b.n	8010fe4 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 8123 	beq.w	8010ca8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010a62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010a66:	4b8d      	ldr	r3, [pc, #564]	@ (8010c9c <HAL_UART_IRQHandler+0x2b8>)
 8010a68:	4013      	ands	r3, r2
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d106      	bne.n	8010a7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010a6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010a72:	4b8b      	ldr	r3, [pc, #556]	@ (8010ca0 <HAL_UART_IRQHandler+0x2bc>)
 8010a74:	4013      	ands	r3, r2
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f000 8116 	beq.w	8010ca8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a80:	f003 0301 	and.w	r3, r3, #1
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d011      	beq.n	8010aac <HAL_UART_IRQHandler+0xc8>
 8010a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d00b      	beq.n	8010aac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	2201      	movs	r2, #1
 8010a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010aa2:	f043 0201 	orr.w	r2, r3, #1
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ab0:	f003 0302 	and.w	r3, r3, #2
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d011      	beq.n	8010adc <HAL_UART_IRQHandler+0xf8>
 8010ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010abc:	f003 0301 	and.w	r3, r3, #1
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d00b      	beq.n	8010adc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2202      	movs	r2, #2
 8010aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ad2:	f043 0204 	orr.w	r2, r3, #4
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ae0:	f003 0304 	and.w	r3, r3, #4
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d011      	beq.n	8010b0c <HAL_UART_IRQHandler+0x128>
 8010ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010aec:	f003 0301 	and.w	r3, r3, #1
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00b      	beq.n	8010b0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2204      	movs	r2, #4
 8010afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b02:	f043 0202 	orr.w	r2, r3, #2
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b10:	f003 0308 	and.w	r3, r3, #8
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d017      	beq.n	8010b48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b1c:	f003 0320 	and.w	r3, r3, #32
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d105      	bne.n	8010b30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010b24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010b28:	4b5c      	ldr	r3, [pc, #368]	@ (8010c9c <HAL_UART_IRQHandler+0x2b8>)
 8010b2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d00b      	beq.n	8010b48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2208      	movs	r2, #8
 8010b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b3e:	f043 0208 	orr.w	r2, r3, #8
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d012      	beq.n	8010b7a <HAL_UART_IRQHandler+0x196>
 8010b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d00c      	beq.n	8010b7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b70:	f043 0220 	orr.w	r2, r3, #32
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	f000 8231 	beq.w	8010fe8 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b8a:	f003 0320 	and.w	r3, r3, #32
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d013      	beq.n	8010bba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b96:	f003 0320 	and.w	r3, r3, #32
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d105      	bne.n	8010baa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d007      	beq.n	8010bba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d003      	beq.n	8010bba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	689b      	ldr	r3, [r3, #8]
 8010bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bce:	2b40      	cmp	r3, #64	@ 0x40
 8010bd0:	d005      	beq.n	8010bde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010bd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d054      	beq.n	8010c88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 fd93 	bl	801170a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	689b      	ldr	r3, [r3, #8]
 8010bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bee:	2b40      	cmp	r3, #64	@ 0x40
 8010bf0:	d146      	bne.n	8010c80 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	3308      	adds	r3, #8
 8010bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010c00:	e853 3f00 	ldrex	r3, [r3]
 8010c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	3308      	adds	r3, #8
 8010c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010c2e:	e841 2300 	strex	r3, r2, [r1]
 8010c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d1d9      	bne.n	8010bf2 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d017      	beq.n	8010c78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c4e:	4a15      	ldr	r2, [pc, #84]	@ (8010ca4 <HAL_UART_IRQHandler+0x2c0>)
 8010c50:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7f4 ff3d 	bl	8005ad8 <HAL_DMA_Abort_IT>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d019      	beq.n	8010c98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010c72:	4610      	mov	r0, r2
 8010c74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c76:	e00f      	b.n	8010c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f000 f9c9 	bl	8011010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c7e:	e00b      	b.n	8010c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 f9c5 	bl	8011010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c86:	e007      	b.n	8010c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f000 f9c1 	bl	8011010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2200      	movs	r2, #0
 8010c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010c96:	e1a7      	b.n	8010fe8 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c98:	bf00      	nop
    return;
 8010c9a:	e1a5      	b.n	8010fe8 <HAL_UART_IRQHandler+0x604>
 8010c9c:	10000001 	.word	0x10000001
 8010ca0:	04000120 	.word	0x04000120
 8010ca4:	080117d7 	.word	0x080117d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	f040 8150 	bne.w	8010f52 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010cb6:	f003 0310 	and.w	r3, r3, #16
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 8149 	beq.w	8010f52 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010cc4:	f003 0310 	and.w	r3, r3, #16
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f000 8142 	beq.w	8010f52 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	2210      	movs	r2, #16
 8010cd4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	689b      	ldr	r3, [r3, #8]
 8010cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ce0:	2b40      	cmp	r3, #64	@ 0x40
 8010ce2:	f040 80b8 	bne.w	8010e56 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	f000 8177 	beq.w	8010fec <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010d04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	f080 816f 	bcs.w	8010fec <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010d14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d20:	2b81      	cmp	r3, #129	@ 0x81
 8010d22:	f000 8087 	beq.w	8010e34 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010d32:	e853 3f00 	ldrex	r3, [r3]
 8010d36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010d3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010d50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010d54:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010d5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010d60:	e841 2300 	strex	r3, r2, [r1]
 8010d64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d1da      	bne.n	8010d26 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	3308      	adds	r3, #8
 8010d76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010d7a:	e853 3f00 	ldrex	r3, [r3]
 8010d7e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010d80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010d82:	f023 0301 	bic.w	r3, r3, #1
 8010d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	3308      	adds	r3, #8
 8010d90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010d94:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010d98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d9a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010d9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010da0:	e841 2300 	strex	r3, r2, [r1]
 8010da4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d1e1      	bne.n	8010d70 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	3308      	adds	r3, #8
 8010db2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010db6:	e853 3f00 	ldrex	r3, [r3]
 8010dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010dbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010dbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	3308      	adds	r3, #8
 8010dcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010dd0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010dd6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010dd8:	e841 2300 	strex	r3, r2, [r1]
 8010ddc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010dde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1e3      	bne.n	8010dac <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2220      	movs	r2, #32
 8010de8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2200      	movs	r2, #0
 8010df0:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dfa:	e853 3f00 	ldrex	r3, [r3]
 8010dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e02:	f023 0310 	bic.w	r3, r3, #16
 8010e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	461a      	mov	r2, r3
 8010e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010e16:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010e1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010e1c:	e841 2300 	strex	r3, r2, [r1]
 8010e20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d1e4      	bne.n	8010df2 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7f4 fdd6 	bl	80059e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2202      	movs	r2, #2
 8010e38:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 f8e8 	bl	8011024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010e54:	e0ca      	b.n	8010fec <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	1ad3      	subs	r3, r2, r3
 8010e66:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	f000 80bc 	beq.w	8010ff0 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8010e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f000 80b7 	beq.w	8010ff0 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e8a:	e853 3f00 	ldrex	r3, [r3]
 8010e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ea6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010eac:	e841 2300 	strex	r3, r2, [r1]
 8010eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d1e4      	bne.n	8010e82 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	3308      	adds	r3, #8
 8010ebe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec2:	e853 3f00 	ldrex	r3, [r3]
 8010ec6:	623b      	str	r3, [r7, #32]
   return(result);
 8010ec8:	6a3b      	ldr	r3, [r7, #32]
 8010eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010ece:	f023 0301 	bic.w	r3, r3, #1
 8010ed2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	3308      	adds	r3, #8
 8010edc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010ee0:	633a      	str	r2, [r7, #48]	@ 0x30
 8010ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ee4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ee8:	e841 2300 	strex	r3, r2, [r1]
 8010eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d1e1      	bne.n	8010eb8 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2220      	movs	r2, #32
 8010ef8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2200      	movs	r2, #0
 8010f06:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	e853 3f00 	ldrex	r3, [r3]
 8010f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f023 0310 	bic.w	r3, r3, #16
 8010f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	461a      	mov	r2, r3
 8010f26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010f2a:	61fb      	str	r3, [r7, #28]
 8010f2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f2e:	69b9      	ldr	r1, [r7, #24]
 8010f30:	69fa      	ldr	r2, [r7, #28]
 8010f32:	e841 2300 	strex	r3, r2, [r1]
 8010f36:	617b      	str	r3, [r7, #20]
   return(result);
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d1e4      	bne.n	8010f08 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2202      	movs	r2, #2
 8010f42:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010f48:	4619      	mov	r1, r3
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 f86a 	bl	8011024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010f50:	e04e      	b.n	8010ff0 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d014      	beq.n	8010f88 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d105      	bne.n	8010f76 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d008      	beq.n	8010f88 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d03a      	beq.n	8010ff4 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	4798      	blx	r3
    }
    return;
 8010f86:	e035      	b.n	8010ff4 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d009      	beq.n	8010fa8 <HAL_UART_IRQHandler+0x5c4>
 8010f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d003      	beq.n	8010fa8 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f000 fc2e 	bl	8011802 <UART_EndTransmit_IT>
    return;
 8010fa6:	e026      	b.n	8010ff6 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010fac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d009      	beq.n	8010fc8 <HAL_UART_IRQHandler+0x5e4>
 8010fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010fb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d003      	beq.n	8010fc8 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f000 fc53 	bl	801186c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010fc6:	e016      	b.n	8010ff6 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010fcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d010      	beq.n	8010ff6 <HAL_UART_IRQHandler+0x612>
 8010fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	da0c      	bge.n	8010ff6 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f000 fc3b 	bl	8011858 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010fe2:	e008      	b.n	8010ff6 <HAL_UART_IRQHandler+0x612>
      return;
 8010fe4:	bf00      	nop
 8010fe6:	e006      	b.n	8010ff6 <HAL_UART_IRQHandler+0x612>
    return;
 8010fe8:	bf00      	nop
 8010fea:	e004      	b.n	8010ff6 <HAL_UART_IRQHandler+0x612>
      return;
 8010fec:	bf00      	nop
 8010fee:	e002      	b.n	8010ff6 <HAL_UART_IRQHandler+0x612>
      return;
 8010ff0:	bf00      	nop
 8010ff2:	e000      	b.n	8010ff6 <HAL_UART_IRQHandler+0x612>
    return;
 8010ff4:	bf00      	nop
  }
}
 8010ff6:	37e8      	adds	r7, #232	@ 0xe8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011004:	bf00      	nop
 8011006:	370c      	adds	r7, #12
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr

08011010 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011010:	b480      	push	{r7}
 8011012:	b083      	sub	sp, #12
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011018:	bf00      	nop
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	460b      	mov	r3, r1
 801102e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011030:	bf00      	nop
 8011032:	370c      	adds	r7, #12
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr

0801103c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801103c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011040:	b094      	sub	sp, #80	@ 0x50
 8011042:	af00      	add	r7, sp, #0
 8011044:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011046:	2300      	movs	r3, #0
 8011048:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801104c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	4b83      	ldr	r3, [pc, #524]	@ (8011260 <UART_SetConfig+0x224>)
 8011052:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011056:	689a      	ldr	r2, [r3, #8]
 8011058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801105a:	691b      	ldr	r3, [r3, #16]
 801105c:	431a      	orrs	r2, r3
 801105e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011060:	695b      	ldr	r3, [r3, #20]
 8011062:	431a      	orrs	r2, r3
 8011064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011066:	69db      	ldr	r3, [r3, #28]
 8011068:	4313      	orrs	r3, r2
 801106a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801106c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	497c      	ldr	r1, [pc, #496]	@ (8011264 <UART_SetConfig+0x228>)
 8011074:	4019      	ands	r1, r3
 8011076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011078:	681a      	ldr	r2, [r3, #0]
 801107a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801107c:	430b      	orrs	r3, r1
 801107e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801108a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801108c:	68d9      	ldr	r1, [r3, #12]
 801108e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	ea40 0301 	orr.w	r3, r0, r1
 8011096:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801109a:	699b      	ldr	r3, [r3, #24]
 801109c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801109e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110a0:	681a      	ldr	r2, [r3, #0]
 80110a2:	4b6f      	ldr	r3, [pc, #444]	@ (8011260 <UART_SetConfig+0x224>)
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d009      	beq.n	80110bc <UART_SetConfig+0x80>
 80110a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	4b6e      	ldr	r3, [pc, #440]	@ (8011268 <UART_SetConfig+0x22c>)
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d004      	beq.n	80110bc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80110b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110b4:	6a1a      	ldr	r2, [r3, #32]
 80110b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110b8:	4313      	orrs	r3, r2
 80110ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80110bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	689b      	ldr	r3, [r3, #8]
 80110c2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80110c6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80110ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110d0:	430b      	orrs	r3, r1
 80110d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80110d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110da:	f023 000f 	bic.w	r0, r3, #15
 80110de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80110e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e4:	681a      	ldr	r2, [r3, #0]
 80110e6:	ea40 0301 	orr.w	r3, r0, r1
 80110ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80110ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	4b5e      	ldr	r3, [pc, #376]	@ (801126c <UART_SetConfig+0x230>)
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d102      	bne.n	80110fc <UART_SetConfig+0xc0>
 80110f6:	2301      	movs	r3, #1
 80110f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80110fa:	e032      	b.n	8011162 <UART_SetConfig+0x126>
 80110fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	4b5b      	ldr	r3, [pc, #364]	@ (8011270 <UART_SetConfig+0x234>)
 8011102:	429a      	cmp	r2, r3
 8011104:	d102      	bne.n	801110c <UART_SetConfig+0xd0>
 8011106:	2302      	movs	r3, #2
 8011108:	64bb      	str	r3, [r7, #72]	@ 0x48
 801110a:	e02a      	b.n	8011162 <UART_SetConfig+0x126>
 801110c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801110e:	681a      	ldr	r2, [r3, #0]
 8011110:	4b58      	ldr	r3, [pc, #352]	@ (8011274 <UART_SetConfig+0x238>)
 8011112:	429a      	cmp	r2, r3
 8011114:	d102      	bne.n	801111c <UART_SetConfig+0xe0>
 8011116:	2304      	movs	r3, #4
 8011118:	64bb      	str	r3, [r7, #72]	@ 0x48
 801111a:	e022      	b.n	8011162 <UART_SetConfig+0x126>
 801111c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	4b55      	ldr	r3, [pc, #340]	@ (8011278 <UART_SetConfig+0x23c>)
 8011122:	429a      	cmp	r2, r3
 8011124:	d102      	bne.n	801112c <UART_SetConfig+0xf0>
 8011126:	2308      	movs	r3, #8
 8011128:	64bb      	str	r3, [r7, #72]	@ 0x48
 801112a:	e01a      	b.n	8011162 <UART_SetConfig+0x126>
 801112c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	4b52      	ldr	r3, [pc, #328]	@ (801127c <UART_SetConfig+0x240>)
 8011132:	429a      	cmp	r2, r3
 8011134:	d102      	bne.n	801113c <UART_SetConfig+0x100>
 8011136:	2310      	movs	r3, #16
 8011138:	64bb      	str	r3, [r7, #72]	@ 0x48
 801113a:	e012      	b.n	8011162 <UART_SetConfig+0x126>
 801113c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	4b4f      	ldr	r3, [pc, #316]	@ (8011280 <UART_SetConfig+0x244>)
 8011142:	429a      	cmp	r2, r3
 8011144:	d103      	bne.n	801114e <UART_SetConfig+0x112>
 8011146:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801114a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801114c:	e009      	b.n	8011162 <UART_SetConfig+0x126>
 801114e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	4b43      	ldr	r3, [pc, #268]	@ (8011260 <UART_SetConfig+0x224>)
 8011154:	429a      	cmp	r2, r3
 8011156:	d102      	bne.n	801115e <UART_SetConfig+0x122>
 8011158:	2320      	movs	r3, #32
 801115a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801115c:	e001      	b.n	8011162 <UART_SetConfig+0x126>
 801115e:	2300      	movs	r3, #0
 8011160:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	4b3e      	ldr	r3, [pc, #248]	@ (8011260 <UART_SetConfig+0x224>)
 8011168:	429a      	cmp	r2, r3
 801116a:	d005      	beq.n	8011178 <UART_SetConfig+0x13c>
 801116c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801116e:	681a      	ldr	r2, [r3, #0]
 8011170:	4b3d      	ldr	r3, [pc, #244]	@ (8011268 <UART_SetConfig+0x22c>)
 8011172:	429a      	cmp	r2, r3
 8011174:	f040 8088 	bne.w	8011288 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801117a:	2200      	movs	r2, #0
 801117c:	623b      	str	r3, [r7, #32]
 801117e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011180:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011184:	f7fb fb8e 	bl	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8011188:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801118a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801118c:	2b00      	cmp	r3, #0
 801118e:	f000 80eb 	beq.w	8011368 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011196:	4a3b      	ldr	r2, [pc, #236]	@ (8011284 <UART_SetConfig+0x248>)
 8011198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801119c:	461a      	mov	r2, r3
 801119e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80111a4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80111a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111a8:	685a      	ldr	r2, [r3, #4]
 80111aa:	4613      	mov	r3, r2
 80111ac:	005b      	lsls	r3, r3, #1
 80111ae:	4413      	add	r3, r2
 80111b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d305      	bcc.n	80111c2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80111b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80111bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111be:	429a      	cmp	r2, r3
 80111c0:	d903      	bls.n	80111ca <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80111c2:	2301      	movs	r3, #1
 80111c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80111c8:	e048      	b.n	801125c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80111ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111cc:	2200      	movs	r2, #0
 80111ce:	61bb      	str	r3, [r7, #24]
 80111d0:	61fa      	str	r2, [r7, #28]
 80111d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111d6:	4a2b      	ldr	r2, [pc, #172]	@ (8011284 <UART_SetConfig+0x248>)
 80111d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111dc:	b29b      	uxth	r3, r3
 80111de:	2200      	movs	r2, #0
 80111e0:	613b      	str	r3, [r7, #16]
 80111e2:	617a      	str	r2, [r7, #20]
 80111e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80111e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80111ec:	f7ef f862 	bl	80002b4 <__aeabi_uldivmod>
 80111f0:	4602      	mov	r2, r0
 80111f2:	460b      	mov	r3, r1
 80111f4:	4610      	mov	r0, r2
 80111f6:	4619      	mov	r1, r3
 80111f8:	f04f 0200 	mov.w	r2, #0
 80111fc:	f04f 0300 	mov.w	r3, #0
 8011200:	020b      	lsls	r3, r1, #8
 8011202:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011206:	0202      	lsls	r2, r0, #8
 8011208:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801120a:	6849      	ldr	r1, [r1, #4]
 801120c:	0849      	lsrs	r1, r1, #1
 801120e:	2000      	movs	r0, #0
 8011210:	460c      	mov	r4, r1
 8011212:	4605      	mov	r5, r0
 8011214:	eb12 0804 	adds.w	r8, r2, r4
 8011218:	eb43 0905 	adc.w	r9, r3, r5
 801121c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	2200      	movs	r2, #0
 8011222:	60bb      	str	r3, [r7, #8]
 8011224:	60fa      	str	r2, [r7, #12]
 8011226:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801122a:	4640      	mov	r0, r8
 801122c:	4649      	mov	r1, r9
 801122e:	f7ef f841 	bl	80002b4 <__aeabi_uldivmod>
 8011232:	4602      	mov	r2, r0
 8011234:	460b      	mov	r3, r1
 8011236:	4613      	mov	r3, r2
 8011238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801123a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801123c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011240:	d308      	bcc.n	8011254 <UART_SetConfig+0x218>
 8011242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011244:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011248:	d204      	bcs.n	8011254 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 801124a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011250:	60da      	str	r2, [r3, #12]
 8011252:	e003      	b.n	801125c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8011254:	2301      	movs	r3, #1
 8011256:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 801125a:	e085      	b.n	8011368 <UART_SetConfig+0x32c>
 801125c:	e084      	b.n	8011368 <UART_SetConfig+0x32c>
 801125e:	bf00      	nop
 8011260:	46002400 	.word	0x46002400
 8011264:	cfff69f3 	.word	0xcfff69f3
 8011268:	56002400 	.word	0x56002400
 801126c:	40013800 	.word	0x40013800
 8011270:	40004400 	.word	0x40004400
 8011274:	40004800 	.word	0x40004800
 8011278:	40004c00 	.word	0x40004c00
 801127c:	40005000 	.word	0x40005000
 8011280:	40006400 	.word	0x40006400
 8011284:	080124a0 	.word	0x080124a0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801128a:	69db      	ldr	r3, [r3, #28]
 801128c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011290:	d13c      	bne.n	801130c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011294:	2200      	movs	r2, #0
 8011296:	603b      	str	r3, [r7, #0]
 8011298:	607a      	str	r2, [r7, #4]
 801129a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801129e:	f7fb fb01 	bl	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80112a2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80112a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d05e      	beq.n	8011368 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ae:	4a39      	ldr	r2, [pc, #228]	@ (8011394 <UART_SetConfig+0x358>)
 80112b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112b4:	461a      	mov	r2, r3
 80112b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80112bc:	005a      	lsls	r2, r3, #1
 80112be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	085b      	lsrs	r3, r3, #1
 80112c4:	441a      	add	r2, r3
 80112c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80112ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112d2:	2b0f      	cmp	r3, #15
 80112d4:	d916      	bls.n	8011304 <UART_SetConfig+0x2c8>
 80112d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112dc:	d212      	bcs.n	8011304 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	f023 030f 	bic.w	r3, r3, #15
 80112e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80112e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112ea:	085b      	lsrs	r3, r3, #1
 80112ec:	b29b      	uxth	r3, r3
 80112ee:	f003 0307 	and.w	r3, r3, #7
 80112f2:	b29a      	uxth	r2, r3
 80112f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80112f6:	4313      	orrs	r3, r2
 80112f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80112fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011300:	60da      	str	r2, [r3, #12]
 8011302:	e031      	b.n	8011368 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8011304:	2301      	movs	r3, #1
 8011306:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801130a:	e02d      	b.n	8011368 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801130c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801130e:	2200      	movs	r2, #0
 8011310:	469a      	mov	sl, r3
 8011312:	4693      	mov	fp, r2
 8011314:	4650      	mov	r0, sl
 8011316:	4659      	mov	r1, fp
 8011318:	f7fb fac4 	bl	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq>
 801131c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801131e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011320:	2b00      	cmp	r3, #0
 8011322:	d021      	beq.n	8011368 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011328:	4a1a      	ldr	r2, [pc, #104]	@ (8011394 <UART_SetConfig+0x358>)
 801132a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801132e:	461a      	mov	r2, r3
 8011330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011332:	fbb3 f2f2 	udiv	r2, r3, r2
 8011336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	085b      	lsrs	r3, r3, #1
 801133c:	441a      	add	r2, r3
 801133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	fbb2 f3f3 	udiv	r3, r2, r3
 8011346:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801134a:	2b0f      	cmp	r3, #15
 801134c:	d909      	bls.n	8011362 <UART_SetConfig+0x326>
 801134e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011354:	d205      	bcs.n	8011362 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011358:	b29a      	uxth	r2, r3
 801135a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	60da      	str	r2, [r3, #12]
 8011360:	e002      	b.n	8011368 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8011362:	2301      	movs	r3, #1
 8011364:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136a:	2201      	movs	r2, #1
 801136c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011372:	2201      	movs	r2, #1
 8011374:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801137a:	2200      	movs	r2, #0
 801137c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801137e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011380:	2200      	movs	r2, #0
 8011382:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011384:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011388:	4618      	mov	r0, r3
 801138a:	3750      	adds	r7, #80	@ 0x50
 801138c:	46bd      	mov	sp, r7
 801138e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011392:	bf00      	nop
 8011394:	080124a0 	.word	0x080124a0

08011398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011398:	b480      	push	{r7}
 801139a:	b083      	sub	sp, #12
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113a4:	f003 0308 	and.w	r3, r3, #8
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00a      	beq.n	80113c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	430a      	orrs	r2, r1
 80113c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113c6:	f003 0301 	and.w	r3, r3, #1
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00a      	beq.n	80113e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	430a      	orrs	r2, r1
 80113e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113e8:	f003 0302 	and.w	r3, r3, #2
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00a      	beq.n	8011406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	430a      	orrs	r2, r1
 8011404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801140a:	f003 0304 	and.w	r3, r3, #4
 801140e:	2b00      	cmp	r3, #0
 8011410:	d00a      	beq.n	8011428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	430a      	orrs	r2, r1
 8011426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801142c:	f003 0310 	and.w	r3, r3, #16
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00a      	beq.n	801144a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	689b      	ldr	r3, [r3, #8]
 801143a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	430a      	orrs	r2, r1
 8011448:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801144e:	f003 0320 	and.w	r3, r3, #32
 8011452:	2b00      	cmp	r3, #0
 8011454:	d00a      	beq.n	801146c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	689b      	ldr	r3, [r3, #8]
 801145c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	430a      	orrs	r2, r1
 801146a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011474:	2b00      	cmp	r3, #0
 8011476:	d01a      	beq.n	80114ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	430a      	orrs	r2, r1
 801148c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011496:	d10a      	bne.n	80114ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	430a      	orrs	r2, r1
 80114ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00a      	beq.n	80114d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	430a      	orrs	r2, r1
 80114ce:	605a      	str	r2, [r3, #4]
  }
}
 80114d0:	bf00      	nop
 80114d2:	370c      	adds	r7, #12
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr

080114dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b098      	sub	sp, #96	@ 0x60
 80114e0:	af02      	add	r7, sp, #8
 80114e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2200      	movs	r2, #0
 80114e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80114ec:	f7f1 fd68 	bl	8002fc0 <HAL_GetTick>
 80114f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	f003 0308 	and.w	r3, r3, #8
 80114fc:	2b08      	cmp	r3, #8
 80114fe:	d12f      	bne.n	8011560 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011500:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011504:	9300      	str	r3, [sp, #0]
 8011506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011508:	2200      	movs	r2, #0
 801150a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f000 f88e 	bl	8011630 <UART_WaitOnFlagUntilTimeout>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d022      	beq.n	8011560 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011522:	e853 3f00 	ldrex	r3, [r3]
 8011526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801152a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801152e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	461a      	mov	r2, r3
 8011536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011538:	647b      	str	r3, [r7, #68]	@ 0x44
 801153a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801153c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801153e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011540:	e841 2300 	strex	r3, r2, [r1]
 8011544:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1e6      	bne.n	801151a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2220      	movs	r2, #32
 8011550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2200      	movs	r2, #0
 8011558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801155c:	2303      	movs	r3, #3
 801155e:	e063      	b.n	8011628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f003 0304 	and.w	r3, r3, #4
 801156a:	2b04      	cmp	r3, #4
 801156c:	d149      	bne.n	8011602 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801156e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011572:	9300      	str	r3, [sp, #0]
 8011574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011576:	2200      	movs	r2, #0
 8011578:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f000 f857 	bl	8011630 <UART_WaitOnFlagUntilTimeout>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d03c      	beq.n	8011602 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011590:	e853 3f00 	ldrex	r3, [r3]
 8011594:	623b      	str	r3, [r7, #32]
   return(result);
 8011596:	6a3b      	ldr	r3, [r7, #32]
 8011598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801159c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	461a      	mov	r2, r3
 80115a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80115a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115ae:	e841 2300 	strex	r3, r2, [r1]
 80115b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80115b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d1e6      	bne.n	8011588 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	3308      	adds	r3, #8
 80115c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	e853 3f00 	ldrex	r3, [r3]
 80115c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	f023 0301 	bic.w	r3, r3, #1
 80115d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	3308      	adds	r3, #8
 80115d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115da:	61fa      	str	r2, [r7, #28]
 80115dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115de:	69b9      	ldr	r1, [r7, #24]
 80115e0:	69fa      	ldr	r2, [r7, #28]
 80115e2:	e841 2300 	strex	r3, r2, [r1]
 80115e6:	617b      	str	r3, [r7, #20]
   return(result);
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1e5      	bne.n	80115ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2220      	movs	r2, #32
 80115f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2200      	movs	r2, #0
 80115fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80115fe:	2303      	movs	r3, #3
 8011600:	e012      	b.n	8011628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2220      	movs	r2, #32
 8011606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2220      	movs	r2, #32
 801160e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2200      	movs	r2, #0
 8011616:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2200      	movs	r2, #0
 8011622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011626:	2300      	movs	r3, #0
}
 8011628:	4618      	mov	r0, r3
 801162a:	3758      	adds	r7, #88	@ 0x58
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	60b9      	str	r1, [r7, #8]
 801163a:	603b      	str	r3, [r7, #0]
 801163c:	4613      	mov	r3, r2
 801163e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011640:	e04f      	b.n	80116e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011648:	d04b      	beq.n	80116e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801164a:	f7f1 fcb9 	bl	8002fc0 <HAL_GetTick>
 801164e:	4602      	mov	r2, r0
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	1ad3      	subs	r3, r2, r3
 8011654:	69ba      	ldr	r2, [r7, #24]
 8011656:	429a      	cmp	r2, r3
 8011658:	d302      	bcc.n	8011660 <UART_WaitOnFlagUntilTimeout+0x30>
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d101      	bne.n	8011664 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011660:	2303      	movs	r3, #3
 8011662:	e04e      	b.n	8011702 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	f003 0304 	and.w	r3, r3, #4
 801166e:	2b00      	cmp	r3, #0
 8011670:	d037      	beq.n	80116e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	2b80      	cmp	r3, #128	@ 0x80
 8011676:	d034      	beq.n	80116e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	2b40      	cmp	r3, #64	@ 0x40
 801167c:	d031      	beq.n	80116e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	69db      	ldr	r3, [r3, #28]
 8011684:	f003 0308 	and.w	r3, r3, #8
 8011688:	2b08      	cmp	r3, #8
 801168a:	d110      	bne.n	80116ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2208      	movs	r2, #8
 8011692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011694:	68f8      	ldr	r0, [r7, #12]
 8011696:	f000 f838 	bl	801170a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2208      	movs	r2, #8
 801169e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2200      	movs	r2, #0
 80116a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80116aa:	2301      	movs	r3, #1
 80116ac:	e029      	b.n	8011702 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	69db      	ldr	r3, [r3, #28]
 80116b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80116b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80116bc:	d111      	bne.n	80116e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80116c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80116c8:	68f8      	ldr	r0, [r7, #12]
 80116ca:	f000 f81e 	bl	801170a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2220      	movs	r2, #32
 80116d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2200      	movs	r2, #0
 80116da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80116de:	2303      	movs	r3, #3
 80116e0:	e00f      	b.n	8011702 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	69da      	ldr	r2, [r3, #28]
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	4013      	ands	r3, r2
 80116ec:	68ba      	ldr	r2, [r7, #8]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	bf0c      	ite	eq
 80116f2:	2301      	moveq	r3, #1
 80116f4:	2300      	movne	r3, #0
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	461a      	mov	r2, r3
 80116fa:	79fb      	ldrb	r3, [r7, #7]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d0a0      	beq.n	8011642 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	3710      	adds	r7, #16
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}

0801170a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801170a:	b480      	push	{r7}
 801170c:	b095      	sub	sp, #84	@ 0x54
 801170e:	af00      	add	r7, sp, #0
 8011710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801171a:	e853 3f00 	ldrex	r3, [r3]
 801171e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011722:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	461a      	mov	r2, r3
 801172e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011730:	643b      	str	r3, [r7, #64]	@ 0x40
 8011732:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011734:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011736:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011738:	e841 2300 	strex	r3, r2, [r1]
 801173c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801173e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011740:	2b00      	cmp	r3, #0
 8011742:	d1e6      	bne.n	8011712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	3308      	adds	r3, #8
 801174a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801174c:	6a3b      	ldr	r3, [r7, #32]
 801174e:	e853 3f00 	ldrex	r3, [r3]
 8011752:	61fb      	str	r3, [r7, #28]
   return(result);
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801175a:	f023 0301 	bic.w	r3, r3, #1
 801175e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	3308      	adds	r3, #8
 8011766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011768:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801176a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801176c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801176e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011770:	e841 2300 	strex	r3, r2, [r1]
 8011774:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011778:	2b00      	cmp	r3, #0
 801177a:	d1e3      	bne.n	8011744 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011780:	2b01      	cmp	r3, #1
 8011782:	d118      	bne.n	80117b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	e853 3f00 	ldrex	r3, [r3]
 8011790:	60bb      	str	r3, [r7, #8]
   return(result);
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	f023 0310 	bic.w	r3, r3, #16
 8011798:	647b      	str	r3, [r7, #68]	@ 0x44
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	461a      	mov	r2, r3
 80117a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117a2:	61bb      	str	r3, [r7, #24]
 80117a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117a6:	6979      	ldr	r1, [r7, #20]
 80117a8:	69ba      	ldr	r2, [r7, #24]
 80117aa:	e841 2300 	strex	r3, r2, [r1]
 80117ae:	613b      	str	r3, [r7, #16]
   return(result);
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d1e6      	bne.n	8011784 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2220      	movs	r2, #32
 80117ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2200      	movs	r2, #0
 80117c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2200      	movs	r2, #0
 80117c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80117ca:	bf00      	nop
 80117cc:	3754      	adds	r7, #84	@ 0x54
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr

080117d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80117d6:	b580      	push	{r7, lr}
 80117d8:	b084      	sub	sp, #16
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80117e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	2200      	movs	r2, #0
 80117e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	2200      	movs	r2, #0
 80117f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80117f4:	68f8      	ldr	r0, [r7, #12]
 80117f6:	f7ff fc0b 	bl	8011010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117fa:	bf00      	nop
 80117fc:	3710      	adds	r7, #16
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}

08011802 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011802:	b580      	push	{r7, lr}
 8011804:	b088      	sub	sp, #32
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	e853 3f00 	ldrex	r3, [r3]
 8011816:	60bb      	str	r3, [r7, #8]
   return(result);
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801181e:	61fb      	str	r3, [r7, #28]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	461a      	mov	r2, r3
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	61bb      	str	r3, [r7, #24]
 801182a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801182c:	6979      	ldr	r1, [r7, #20]
 801182e:	69ba      	ldr	r2, [r7, #24]
 8011830:	e841 2300 	strex	r3, r2, [r1]
 8011834:	613b      	str	r3, [r7, #16]
   return(result);
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d1e6      	bne.n	801180a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2220      	movs	r2, #32
 8011840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2200      	movs	r2, #0
 8011848:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f7ff fbd6 	bl	8010ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011850:	bf00      	nop
 8011852:	3720      	adds	r7, #32
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011860:	bf00      	nop
 8011862:	370c      	adds	r7, #12
 8011864:	46bd      	mov	sp, r7
 8011866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186a:	4770      	bx	lr

0801186c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801186c:	b480      	push	{r7}
 801186e:	b083      	sub	sp, #12
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011874:	bf00      	nop
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr

08011880 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011880:	b480      	push	{r7}
 8011882:	b085      	sub	sp, #20
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801188e:	2b01      	cmp	r3, #1
 8011890:	d101      	bne.n	8011896 <HAL_UARTEx_DisableFifoMode+0x16>
 8011892:	2302      	movs	r3, #2
 8011894:	e027      	b.n	80118e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2201      	movs	r2, #1
 801189a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2224      	movs	r2, #36	@ 0x24
 80118a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f022 0201 	bic.w	r2, r2, #1
 80118bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80118c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2200      	movs	r2, #0
 80118ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	68fa      	ldr	r2, [r7, #12]
 80118d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2220      	movs	r2, #32
 80118d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2200      	movs	r2, #0
 80118e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80118e4:	2300      	movs	r3, #0
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3714      	adds	r7, #20
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr

080118f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80118f2:	b580      	push	{r7, lr}
 80118f4:	b084      	sub	sp, #16
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
 80118fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011902:	2b01      	cmp	r3, #1
 8011904:	d101      	bne.n	801190a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011906:	2302      	movs	r3, #2
 8011908:	e02d      	b.n	8011966 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2201      	movs	r2, #1
 801190e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2224      	movs	r2, #36	@ 0x24
 8011916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	681a      	ldr	r2, [r3, #0]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f022 0201 	bic.w	r2, r2, #1
 8011930:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	689b      	ldr	r3, [r3, #8]
 8011938:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	683a      	ldr	r2, [r7, #0]
 8011942:	430a      	orrs	r2, r1
 8011944:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 f850 	bl	80119ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	68fa      	ldr	r2, [r7, #12]
 8011952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2220      	movs	r2, #32
 8011958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011964:	2300      	movs	r3, #0
}
 8011966:	4618      	mov	r0, r3
 8011968:	3710      	adds	r7, #16
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}

0801196e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801196e:	b580      	push	{r7, lr}
 8011970:	b084      	sub	sp, #16
 8011972:	af00      	add	r7, sp, #0
 8011974:	6078      	str	r0, [r7, #4]
 8011976:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801197e:	2b01      	cmp	r3, #1
 8011980:	d101      	bne.n	8011986 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011982:	2302      	movs	r3, #2
 8011984:	e02d      	b.n	80119e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2201      	movs	r2, #1
 801198a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2224      	movs	r2, #36	@ 0x24
 8011992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	681a      	ldr	r2, [r3, #0]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	f022 0201 	bic.w	r2, r2, #1
 80119ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	683a      	ldr	r2, [r7, #0]
 80119be:	430a      	orrs	r2, r1
 80119c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 f812 	bl	80119ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2220      	movs	r2, #32
 80119d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80119e0:	2300      	movs	r3, #0
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3710      	adds	r7, #16
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
	...

080119ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b085      	sub	sp, #20
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d108      	bne.n	8011a0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2201      	movs	r2, #1
 8011a00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2201      	movs	r2, #1
 8011a08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a0c:	e031      	b.n	8011a72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a0e:	2308      	movs	r3, #8
 8011a10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a12:	2308      	movs	r3, #8
 8011a14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	0e5b      	lsrs	r3, r3, #25
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	f003 0307 	and.w	r3, r3, #7
 8011a24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	689b      	ldr	r3, [r3, #8]
 8011a2c:	0f5b      	lsrs	r3, r3, #29
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	f003 0307 	and.w	r3, r3, #7
 8011a34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a36:	7bbb      	ldrb	r3, [r7, #14]
 8011a38:	7b3a      	ldrb	r2, [r7, #12]
 8011a3a:	4911      	ldr	r1, [pc, #68]	@ (8011a80 <UARTEx_SetNbDataToProcess+0x94>)
 8011a3c:	5c8a      	ldrb	r2, [r1, r2]
 8011a3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011a42:	7b3a      	ldrb	r2, [r7, #12]
 8011a44:	490f      	ldr	r1, [pc, #60]	@ (8011a84 <UARTEx_SetNbDataToProcess+0x98>)
 8011a46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a48:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a4c:	b29a      	uxth	r2, r3
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a54:	7bfb      	ldrb	r3, [r7, #15]
 8011a56:	7b7a      	ldrb	r2, [r7, #13]
 8011a58:	4909      	ldr	r1, [pc, #36]	@ (8011a80 <UARTEx_SetNbDataToProcess+0x94>)
 8011a5a:	5c8a      	ldrb	r2, [r1, r2]
 8011a5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011a60:	7b7a      	ldrb	r2, [r7, #13]
 8011a62:	4908      	ldr	r1, [pc, #32]	@ (8011a84 <UARTEx_SetNbDataToProcess+0x98>)
 8011a64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011a72:	bf00      	nop
 8011a74:	3714      	adds	r7, #20
 8011a76:	46bd      	mov	sp, r7
 8011a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	080124b8 	.word	0x080124b8
 8011a84:	080124c0 	.word	0x080124c0

08011a88 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b086      	sub	sp, #24
 8011a8c:	af02      	add	r7, sp, #8
 8011a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011a90:	2300      	movs	r3, #0
 8011a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011a94:	f7f1 fa94 	bl	8002fc0 <HAL_GetTick>
 8011a98:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d102      	bne.n	8011aa6 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	73fb      	strb	r3, [r7, #15]
 8011aa4:	e137      	b.n	8011d16 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	4a76      	ldr	r2, [pc, #472]	@ (8011c84 <HAL_XSPI_Init+0x1fc>)
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d008      	beq.n	8011ac2 <HAL_XSPI_Init+0x3a>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	4a74      	ldr	r2, [pc, #464]	@ (8011c88 <HAL_XSPI_Init+0x200>)
 8011ab6:	4293      	cmp	r3, r2
 8011ab8:	d003      	beq.n	8011ac2 <HAL_XSPI_Init+0x3a>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	4a73      	ldr	r2, [pc, #460]	@ (8011c8c <HAL_XSPI_Init+0x204>)
 8011ac0:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	4a72      	ldr	r2, [pc, #456]	@ (8011c90 <HAL_XSPI_Init+0x208>)
 8011ac8:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	4a6d      	ldr	r2, [pc, #436]	@ (8011c84 <HAL_XSPI_Init+0x1fc>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d008      	beq.n	8011ae6 <HAL_XSPI_Init+0x5e>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	4a6b      	ldr	r2, [pc, #428]	@ (8011c88 <HAL_XSPI_Init+0x200>)
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d003      	beq.n	8011ae6 <HAL_XSPI_Init+0x5e>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	4a6a      	ldr	r2, [pc, #424]	@ (8011c8c <HAL_XSPI_Init+0x204>)
 8011ae4:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	4a66      	ldr	r2, [pc, #408]	@ (8011c84 <HAL_XSPI_Init+0x1fc>)
 8011aec:	4293      	cmp	r3, r2
 8011aee:	d008      	beq.n	8011b02 <HAL_XSPI_Init+0x7a>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	4a64      	ldr	r2, [pc, #400]	@ (8011c88 <HAL_XSPI_Init+0x200>)
 8011af6:	4293      	cmp	r3, r2
 8011af8:	d003      	beq.n	8011b02 <HAL_XSPI_Init+0x7a>
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	4a63      	ldr	r2, [pc, #396]	@ (8011c8c <HAL_XSPI_Init+0x204>)
 8011b00:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2200      	movs	r2, #0
 8011b06:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f040 8102 	bne.w	8011d16 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f7f0 fa4c 	bl	8001fb0 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011b18:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f000 f8ff 	bl	8011d20 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	689a      	ldr	r2, [r3, #8]
 8011b28:	4b5a      	ldr	r3, [pc, #360]	@ (8011c94 <HAL_XSPI_Init+0x20c>)
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	68d1      	ldr	r1, [r2, #12]
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	6912      	ldr	r2, [r2, #16]
 8011b34:	0412      	lsls	r2, r2, #16
 8011b36:	4311      	orrs	r1, r2
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	6952      	ldr	r2, [r2, #20]
 8011b3c:	3a01      	subs	r2, #1
 8011b3e:	0212      	lsls	r2, r2, #8
 8011b40:	4311      	orrs	r1, r2
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	69d2      	ldr	r2, [r2, #28]
 8011b46:	4311      	orrs	r1, r2
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	6812      	ldr	r2, [r2, #0]
 8011b4c:	430b      	orrs	r3, r1
 8011b4e:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4a4b      	ldr	r2, [pc, #300]	@ (8011c84 <HAL_XSPI_Init+0x1fc>)
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d00e      	beq.n	8011b78 <HAL_XSPI_Init+0xf0>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8011c88 <HAL_XSPI_Init+0x200>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d009      	beq.n	8011b78 <HAL_XSPI_Init+0xf0>
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	4a48      	ldr	r2, [pc, #288]	@ (8011c8c <HAL_XSPI_Init+0x204>)
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d004      	beq.n	8011b78 <HAL_XSPI_Init+0xf0>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	4a49      	ldr	r2, [pc, #292]	@ (8011c98 <HAL_XSPI_Init+0x210>)
 8011b74:	4293      	cmp	r3, r2
 8011b76:	d10a      	bne.n	8011b8e <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	689b      	ldr	r3, [r3, #8]
 8011b7e:	f023 0108 	bic.w	r1, r3, #8
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	430a      	orrs	r2, r1
 8011b8c:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	68db      	ldr	r3, [r3, #12]
 8011b94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6a1a      	ldr	r2, [r3, #32]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	430a      	orrs	r2, r1
 8011ba2:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	691b      	ldr	r3, [r3, #16]
 8011baa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bb2:	041a      	lsls	r2, r3, #16
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	430a      	orrs	r2, r1
 8011bba:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4a30      	ldr	r2, [pc, #192]	@ (8011c84 <HAL_XSPI_Init+0x1fc>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d00e      	beq.n	8011be4 <HAL_XSPI_Init+0x15c>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4a2f      	ldr	r2, [pc, #188]	@ (8011c88 <HAL_XSPI_Init+0x200>)
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	d009      	beq.n	8011be4 <HAL_XSPI_Init+0x15c>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8011c8c <HAL_XSPI_Init+0x204>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d004      	beq.n	8011be4 <HAL_XSPI_Init+0x15c>
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4a2e      	ldr	r2, [pc, #184]	@ (8011c98 <HAL_XSPI_Init+0x210>)
 8011be0:	4293      	cmp	r3, r2
 8011be2:	d10a      	bne.n	8011bfa <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	691b      	ldr	r3, [r3, #16]
 8011bea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	430a      	orrs	r2, r1
 8011bf8:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011c02:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	3b01      	subs	r3, #1
 8011c14:	021a      	lsls	r2, r3, #8
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	430a      	orrs	r2, r1
 8011c1c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011c22:	9300      	str	r3, [sp, #0]
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	2200      	movs	r2, #0
 8011c28:	2120      	movs	r1, #32
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f000 f887 	bl	8011d3e <XSPI_WaitFlagStateUntilTimeout>
 8011c30:	4603      	mov	r3, r0
 8011c32:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011c34:	7bfb      	ldrb	r3, [r7, #15]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d16d      	bne.n	8011d16 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	68db      	ldr	r3, [r3, #12]
 8011c40:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	430a      	orrs	r2, r1
 8011c4e:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4a0e      	ldr	r2, [pc, #56]	@ (8011c90 <HAL_XSPI_Init+0x208>)
 8011c56:	4293      	cmp	r3, r2
 8011c58:	d004      	beq.n	8011c64 <HAL_XSPI_Init+0x1dc>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8011c9c <HAL_XSPI_Init+0x214>)
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d11d      	bne.n	8011ca0 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	2120      	movs	r1, #32
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f000 f864 	bl	8011d3e <XSPI_WaitFlagStateUntilTimeout>
 8011c76:	4603      	mov	r3, r0
 8011c78:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8011c7a:	7bfb      	ldrb	r3, [r7, #15]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d00f      	beq.n	8011ca0 <HAL_XSPI_Init+0x218>
          {
            return status;
 8011c80:	7bfb      	ldrb	r3, [r7, #15]
 8011c82:	e049      	b.n	8011d18 <HAL_XSPI_Init+0x290>
 8011c84:	420d1400 	.word	0x420d1400
 8011c88:	520d1400 	.word	0x520d1400
 8011c8c:	420d2400 	.word	0x420d2400
 8011c90:	420d3400 	.word	0x420d3400
 8011c94:	f8e0c0fc 	.word	0xf8e0c0fc
 8011c98:	520d2400 	.word	0x520d2400
 8011c9c:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	689a      	ldr	r2, [r3, #8]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	430a      	orrs	r2, r1
 8011cb4:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8011cbe:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cca:	431a      	orrs	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	430a      	orrs	r2, r1
 8011cd2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f042 0201 	orr.w	r2, r2, #1
 8011ce4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	699b      	ldr	r3, [r3, #24]
 8011cea:	2b02      	cmp	r3, #2
 8011cec:	d107      	bne.n	8011cfe <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	689a      	ldr	r2, [r3, #8]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f042 0202 	orr.w	r2, r2, #2
 8011cfc:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011d06:	d103      	bne.n	8011d10 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2201      	movs	r2, #1
 8011d0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8011d0e:	e002      	b.n	8011d16 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2202      	movs	r2, #2
 8011d14:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8011d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3710      	adds	r7, #16
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b083      	sub	sp, #12
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	683a      	ldr	r2, [r7, #0]
 8011d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr

08011d3e <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8011d3e:	b580      	push	{r7, lr}
 8011d40:	b084      	sub	sp, #16
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	60f8      	str	r0, [r7, #12]
 8011d46:	60b9      	str	r1, [r7, #8]
 8011d48:	603b      	str	r3, [r7, #0]
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8011d4e:	e01a      	b.n	8011d86 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d50:	69bb      	ldr	r3, [r7, #24]
 8011d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d56:	d016      	beq.n	8011d86 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d58:	f7f1 f932 	bl	8002fc0 <HAL_GetTick>
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	1ad3      	subs	r3, r2, r3
 8011d62:	69ba      	ldr	r2, [r7, #24]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d302      	bcc.n	8011d6e <XSPI_WaitFlagStateUntilTimeout+0x30>
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d10b      	bne.n	8011d86 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011d74:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d7a:	f043 0201 	orr.w	r2, r3, #1
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8011d82:	2303      	movs	r3, #3
 8011d84:	e00e      	b.n	8011da4 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	6a1a      	ldr	r2, [r3, #32]
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	4013      	ands	r3, r2
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	bf14      	ite	ne
 8011d94:	2301      	movne	r3, #1
 8011d96:	2300      	moveq	r3, #0
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	79fb      	ldrb	r3, [r7, #7]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d1d6      	bne.n	8011d50 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011da2:	2300      	movs	r3, #0
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011dac:	b084      	sub	sp, #16
 8011dae:	b580      	push	{r7, lr}
 8011db0:	b084      	sub	sp, #16
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
 8011db6:	f107 001c 	add.w	r0, r7, #28
 8011dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8011dbe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011dc2:	2b03      	cmp	r3, #3
 8011dc4:	d105      	bne.n	8011dd2 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f000 fa8e 	bl	80122f4 <USB_CoreReset>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8011ddc:	7fbb      	ldrb	r3, [r7, #30]
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	d10b      	bne.n	8011dfa <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	689b      	ldr	r3, [r3, #8]
 8011de6:	f043 0208 	orr.w	r2, r3, #8
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	689b      	ldr	r3, [r3, #8]
 8011df2:	f043 0220 	orr.w	r2, r3, #32
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8011dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3710      	adds	r7, #16
 8011e00:	46bd      	mov	sp, r7
 8011e02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011e06:	b004      	add	sp, #16
 8011e08:	4770      	bx	lr

08011e0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e0a:	b480      	push	{r7}
 8011e0c:	b083      	sub	sp, #12
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	689b      	ldr	r3, [r3, #8]
 8011e16:	f023 0201 	bic.w	r2, r3, #1
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e1e:	2300      	movs	r3, #0
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	370c      	adds	r7, #12
 8011e24:	46bd      	mov	sp, r7
 8011e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2a:	4770      	bx	lr

08011e2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	460b      	mov	r3, r1
 8011e36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011e48:	78fb      	ldrb	r3, [r7, #3]
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d115      	bne.n	8011e7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	68db      	ldr	r3, [r3, #12]
 8011e52:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011e5a:	200a      	movs	r0, #10
 8011e5c:	f7f1 f8bc 	bl	8002fd8 <HAL_Delay>
      ms += 10U;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	330a      	adds	r3, #10
 8011e64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f000 fa36 	bl	80122d8 <USB_GetMode>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d01e      	beq.n	8011eb0 <USB_SetCurrentMode+0x84>
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2bc7      	cmp	r3, #199	@ 0xc7
 8011e76:	d9f0      	bls.n	8011e5a <USB_SetCurrentMode+0x2e>
 8011e78:	e01a      	b.n	8011eb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011e7a:	78fb      	ldrb	r3, [r7, #3]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d115      	bne.n	8011eac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011e8c:	200a      	movs	r0, #10
 8011e8e:	f7f1 f8a3 	bl	8002fd8 <HAL_Delay>
      ms += 10U;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	330a      	adds	r3, #10
 8011e96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f000 fa1d 	bl	80122d8 <USB_GetMode>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d005      	beq.n	8011eb0 <USB_SetCurrentMode+0x84>
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2bc7      	cmp	r3, #199	@ 0xc7
 8011ea8:	d9f0      	bls.n	8011e8c <USB_SetCurrentMode+0x60>
 8011eaa:	e001      	b.n	8011eb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011eac:	2301      	movs	r3, #1
 8011eae:	e005      	b.n	8011ebc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2bc8      	cmp	r3, #200	@ 0xc8
 8011eb4:	d101      	bne.n	8011eba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	e000      	b.n	8011ebc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011eba:	2300      	movs	r3, #0
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3710      	adds	r7, #16
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011ec4:	b084      	sub	sp, #16
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b086      	sub	sp, #24
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
 8011ece:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011ede:	2300      	movs	r3, #0
 8011ee0:	613b      	str	r3, [r7, #16]
 8011ee2:	e009      	b.n	8011ef8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	3340      	adds	r3, #64	@ 0x40
 8011eea:	009b      	lsls	r3, r3, #2
 8011eec:	4413      	add	r3, r2
 8011eee:	2200      	movs	r2, #0
 8011ef0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	3301      	adds	r3, #1
 8011ef6:	613b      	str	r3, [r7, #16]
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	2b0e      	cmp	r3, #14
 8011efc:	d9f2      	bls.n	8011ee4 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f02:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011f0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d11c      	bne.n	8011f4c <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	68fa      	ldr	r2, [r7, #12]
 8011f1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011f20:	f043 0302 	orr.w	r3, r3, #2
 8011f24:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f2a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f36:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f42:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	639a      	str	r2, [r3, #56]	@ 0x38
 8011f4a:	e011      	b.n	8011f70 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f5c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f68:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011f76:	461a      	mov	r2, r3
 8011f78:	2300      	movs	r3, #0
 8011f7a:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8011f7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011f80:	2b03      	cmp	r3, #3
 8011f82:	d10d      	bne.n	8011fa0 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011f84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d104      	bne.n	8011f96 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f000 f968 	bl	8012264 <USB_SetDevSpeed>
 8011f94:	e008      	b.n	8011fa8 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011f96:	2101      	movs	r1, #1
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f000 f963 	bl	8012264 <USB_SetDevSpeed>
 8011f9e:	e003      	b.n	8011fa8 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011fa0:	2103      	movs	r1, #3
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f000 f95e 	bl	8012264 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011fa8:	2110      	movs	r1, #16
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f000 f8fa 	bl	80121a4 <USB_FlushTxFifo>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d001      	beq.n	8011fba <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 f924 	bl	8012208 <USB_FlushRxFifo>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d001      	beq.n	8011fca <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fdc:	461a      	mov	r2, r3
 8011fde:	2300      	movs	r3, #0
 8011fe0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fe8:	461a      	mov	r2, r3
 8011fea:	2300      	movs	r3, #0
 8011fec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011fee:	2300      	movs	r3, #0
 8011ff0:	613b      	str	r3, [r7, #16]
 8011ff2:	e043      	b.n	801207c <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	015a      	lsls	r2, r3, #5
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	4413      	add	r3, r2
 8011ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012006:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801200a:	d118      	bne.n	801203e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 801200c:	693b      	ldr	r3, [r7, #16]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d10a      	bne.n	8012028 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	015a      	lsls	r2, r3, #5
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	4413      	add	r3, r2
 801201a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801201e:	461a      	mov	r2, r3
 8012020:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012024:	6013      	str	r3, [r2, #0]
 8012026:	e013      	b.n	8012050 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	015a      	lsls	r2, r3, #5
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	4413      	add	r3, r2
 8012030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012034:	461a      	mov	r2, r3
 8012036:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801203a:	6013      	str	r3, [r2, #0]
 801203c:	e008      	b.n	8012050 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	015a      	lsls	r2, r3, #5
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	4413      	add	r3, r2
 8012046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801204a:	461a      	mov	r2, r3
 801204c:	2300      	movs	r3, #0
 801204e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	015a      	lsls	r2, r3, #5
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	4413      	add	r3, r2
 8012058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801205c:	461a      	mov	r2, r3
 801205e:	2300      	movs	r3, #0
 8012060:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	015a      	lsls	r2, r3, #5
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	4413      	add	r3, r2
 801206a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801206e:	461a      	mov	r2, r3
 8012070:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012074:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	3301      	adds	r3, #1
 801207a:	613b      	str	r3, [r7, #16]
 801207c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012080:	461a      	mov	r2, r3
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	4293      	cmp	r3, r2
 8012086:	d3b5      	bcc.n	8011ff4 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012088:	2300      	movs	r3, #0
 801208a:	613b      	str	r3, [r7, #16]
 801208c:	e043      	b.n	8012116 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801208e:	693b      	ldr	r3, [r7, #16]
 8012090:	015a      	lsls	r2, r3, #5
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	4413      	add	r3, r2
 8012096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80120a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80120a4:	d118      	bne.n	80120d8 <USB_DevInit+0x214>
    {
      if (i == 0U)
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10a      	bne.n	80120c2 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	015a      	lsls	r2, r3, #5
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	4413      	add	r3, r2
 80120b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120b8:	461a      	mov	r2, r3
 80120ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80120be:	6013      	str	r3, [r2, #0]
 80120c0:	e013      	b.n	80120ea <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	015a      	lsls	r2, r3, #5
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	4413      	add	r3, r2
 80120ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120ce:	461a      	mov	r2, r3
 80120d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80120d4:	6013      	str	r3, [r2, #0]
 80120d6:	e008      	b.n	80120ea <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	015a      	lsls	r2, r3, #5
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	4413      	add	r3, r2
 80120e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120e4:	461a      	mov	r2, r3
 80120e6:	2300      	movs	r3, #0
 80120e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	015a      	lsls	r2, r3, #5
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	4413      	add	r3, r2
 80120f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120f6:	461a      	mov	r2, r3
 80120f8:	2300      	movs	r3, #0
 80120fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	015a      	lsls	r2, r3, #5
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	4413      	add	r3, r2
 8012104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012108:	461a      	mov	r2, r3
 801210a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801210e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	3301      	adds	r3, #1
 8012114:	613b      	str	r3, [r7, #16]
 8012116:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801211a:	461a      	mov	r2, r3
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	4293      	cmp	r3, r2
 8012120:	d3b5      	bcc.n	801208e <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012128:	691b      	ldr	r3, [r3, #16]
 801212a:	68fa      	ldr	r2, [r7, #12]
 801212c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012134:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2200      	movs	r2, #0
 801213a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8012142:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012144:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012148:	2b00      	cmp	r3, #0
 801214a:	d105      	bne.n	8012158 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	699b      	ldr	r3, [r3, #24]
 8012150:	f043 0210 	orr.w	r2, r3, #16
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	699a      	ldr	r2, [r3, #24]
 801215c:	4b10      	ldr	r3, [pc, #64]	@ (80121a0 <USB_DevInit+0x2dc>)
 801215e:	4313      	orrs	r3, r2
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012164:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8012168:	2b00      	cmp	r3, #0
 801216a:	d005      	beq.n	8012178 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	699b      	ldr	r3, [r3, #24]
 8012170:	f043 0208 	orr.w	r2, r3, #8
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012178:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801217c:	2b01      	cmp	r3, #1
 801217e:	d107      	bne.n	8012190 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	699b      	ldr	r3, [r3, #24]
 8012184:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012188:	f043 0304 	orr.w	r3, r3, #4
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012190:	7dfb      	ldrb	r3, [r7, #23]
}
 8012192:	4618      	mov	r0, r3
 8012194:	3718      	adds	r7, #24
 8012196:	46bd      	mov	sp, r7
 8012198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801219c:	b004      	add	sp, #16
 801219e:	4770      	bx	lr
 80121a0:	803c3800 	.word	0x803c3800

080121a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80121a4:	b480      	push	{r7}
 80121a6:	b085      	sub	sp, #20
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80121ae:	2300      	movs	r3, #0
 80121b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	3301      	adds	r3, #1
 80121b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80121be:	d901      	bls.n	80121c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80121c0:	2303      	movs	r3, #3
 80121c2:	e01b      	b.n	80121fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	691b      	ldr	r3, [r3, #16]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	daf2      	bge.n	80121b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80121cc:	2300      	movs	r3, #0
 80121ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	019b      	lsls	r3, r3, #6
 80121d4:	f043 0220 	orr.w	r2, r3, #32
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	3301      	adds	r3, #1
 80121e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80121e8:	d901      	bls.n	80121ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80121ea:	2303      	movs	r3, #3
 80121ec:	e006      	b.n	80121fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	691b      	ldr	r3, [r3, #16]
 80121f2:	f003 0320 	and.w	r3, r3, #32
 80121f6:	2b20      	cmp	r3, #32
 80121f8:	d0f0      	beq.n	80121dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80121fa:	2300      	movs	r3, #0
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3714      	adds	r7, #20
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr

08012208 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012208:	b480      	push	{r7}
 801220a:	b085      	sub	sp, #20
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012210:	2300      	movs	r3, #0
 8012212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	3301      	adds	r3, #1
 8012218:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012220:	d901      	bls.n	8012226 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012222:	2303      	movs	r3, #3
 8012224:	e018      	b.n	8012258 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	691b      	ldr	r3, [r3, #16]
 801222a:	2b00      	cmp	r3, #0
 801222c:	daf2      	bge.n	8012214 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801222e:	2300      	movs	r3, #0
 8012230:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2210      	movs	r2, #16
 8012236:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	3301      	adds	r3, #1
 801223c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012244:	d901      	bls.n	801224a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012246:	2303      	movs	r3, #3
 8012248:	e006      	b.n	8012258 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	691b      	ldr	r3, [r3, #16]
 801224e:	f003 0310 	and.w	r3, r3, #16
 8012252:	2b10      	cmp	r3, #16
 8012254:	d0f0      	beq.n	8012238 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012256:	2300      	movs	r3, #0
}
 8012258:	4618      	mov	r0, r3
 801225a:	3714      	adds	r7, #20
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr

08012264 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012264:	b480      	push	{r7}
 8012266:	b085      	sub	sp, #20
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	460b      	mov	r3, r1
 801226e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	78fb      	ldrb	r3, [r7, #3]
 801227e:	68f9      	ldr	r1, [r7, #12]
 8012280:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012284:	4313      	orrs	r3, r2
 8012286:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012288:	2300      	movs	r3, #0
}
 801228a:	4618      	mov	r0, r3
 801228c:	3714      	adds	r7, #20
 801228e:	46bd      	mov	sp, r7
 8012290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012294:	4770      	bx	lr

08012296 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012296:	b480      	push	{r7}
 8012298:	b085      	sub	sp, #20
 801229a:	af00      	add	r7, sp, #0
 801229c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80122b0:	f023 0303 	bic.w	r3, r3, #3
 80122b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122bc:	685b      	ldr	r3, [r3, #4]
 80122be:	68fa      	ldr	r2, [r7, #12]
 80122c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80122c4:	f043 0302 	orr.w	r3, r3, #2
 80122c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80122ca:	2300      	movs	r3, #0
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3714      	adds	r7, #20
 80122d0:	46bd      	mov	sp, r7
 80122d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d6:	4770      	bx	lr

080122d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80122d8:	b480      	push	{r7}
 80122da:	b083      	sub	sp, #12
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	695b      	ldr	r3, [r3, #20]
 80122e4:	f003 0301 	and.w	r3, r3, #1
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	370c      	adds	r7, #12
 80122ec:	46bd      	mov	sp, r7
 80122ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f2:	4770      	bx	lr

080122f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80122f4:	b480      	push	{r7}
 80122f6:	b085      	sub	sp, #20
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80122fc:	2300      	movs	r3, #0
 80122fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	3301      	adds	r3, #1
 8012304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801230c:	d901      	bls.n	8012312 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801230e:	2303      	movs	r3, #3
 8012310:	e01b      	b.n	801234a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	691b      	ldr	r3, [r3, #16]
 8012316:	2b00      	cmp	r3, #0
 8012318:	daf2      	bge.n	8012300 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801231a:	2300      	movs	r3, #0
 801231c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	691b      	ldr	r3, [r3, #16]
 8012322:	f043 0201 	orr.w	r2, r3, #1
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	3301      	adds	r3, #1
 801232e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012336:	d901      	bls.n	801233c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012338:	2303      	movs	r3, #3
 801233a:	e006      	b.n	801234a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	691b      	ldr	r3, [r3, #16]
 8012340:	f003 0301 	and.w	r3, r3, #1
 8012344:	2b01      	cmp	r3, #1
 8012346:	d0f0      	beq.n	801232a <USB_CoreReset+0x36>

  return HAL_OK;
 8012348:	2300      	movs	r3, #0
}
 801234a:	4618      	mov	r0, r3
 801234c:	3714      	adds	r7, #20
 801234e:	46bd      	mov	sp, r7
 8012350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012354:	4770      	bx	lr

08012356 <memset>:
 8012356:	4402      	add	r2, r0
 8012358:	4603      	mov	r3, r0
 801235a:	4293      	cmp	r3, r2
 801235c:	d100      	bne.n	8012360 <memset+0xa>
 801235e:	4770      	bx	lr
 8012360:	f803 1b01 	strb.w	r1, [r3], #1
 8012364:	e7f9      	b.n	801235a <memset+0x4>
	...

08012368 <__libc_init_array>:
 8012368:	b570      	push	{r4, r5, r6, lr}
 801236a:	4d0d      	ldr	r5, [pc, #52]	@ (80123a0 <__libc_init_array+0x38>)
 801236c:	2600      	movs	r6, #0
 801236e:	4c0d      	ldr	r4, [pc, #52]	@ (80123a4 <__libc_init_array+0x3c>)
 8012370:	1b64      	subs	r4, r4, r5
 8012372:	10a4      	asrs	r4, r4, #2
 8012374:	42a6      	cmp	r6, r4
 8012376:	d109      	bne.n	801238c <__libc_init_array+0x24>
 8012378:	4d0b      	ldr	r5, [pc, #44]	@ (80123a8 <__libc_init_array+0x40>)
 801237a:	2600      	movs	r6, #0
 801237c:	4c0b      	ldr	r4, [pc, #44]	@ (80123ac <__libc_init_array+0x44>)
 801237e:	f000 f817 	bl	80123b0 <_init>
 8012382:	1b64      	subs	r4, r4, r5
 8012384:	10a4      	asrs	r4, r4, #2
 8012386:	42a6      	cmp	r6, r4
 8012388:	d105      	bne.n	8012396 <__libc_init_array+0x2e>
 801238a:	bd70      	pop	{r4, r5, r6, pc}
 801238c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012390:	3601      	adds	r6, #1
 8012392:	4798      	blx	r3
 8012394:	e7ee      	b.n	8012374 <__libc_init_array+0xc>
 8012396:	f855 3b04 	ldr.w	r3, [r5], #4
 801239a:	3601      	adds	r6, #1
 801239c:	4798      	blx	r3
 801239e:	e7f2      	b.n	8012386 <__libc_init_array+0x1e>
 80123a0:	080124d0 	.word	0x080124d0
 80123a4:	080124d0 	.word	0x080124d0
 80123a8:	080124d0 	.word	0x080124d0
 80123ac:	080124d4 	.word	0x080124d4

080123b0 <_init>:
 80123b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123b2:	bf00      	nop
 80123b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123b6:	bc08      	pop	{r3}
 80123b8:	469e      	mov	lr, r3
 80123ba:	4770      	bx	lr

080123bc <_fini>:
 80123bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123be:	bf00      	nop
 80123c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123c2:	bc08      	pop	{r3}
 80123c4:	469e      	mov	lr, r3
 80123c6:	4770      	bx	lr
