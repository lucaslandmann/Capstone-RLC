
RLCMixer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011920  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011b94  08011b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c94  08011c94  0001302c  2**0
                  CONTENTS
  4 .ARM          00000008  08011c94  08011c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c9c  08011c9c  0001302c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c9c  08011c9c  00012c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011ca0  08011ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08011ca4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046e4  2000002c  08011cd0  0001302c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20004710  08011cd0  00013710  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001302c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c64  00000000  00000000  00013062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d12  00000000  00000000  00044cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab0  00000000  00000000  000499d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000217b  00000000  00000000  0004c488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047326  00000000  00000000  0004e603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b5e  00000000  00000000  00095929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc9f2  00000000  00000000  000cb487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287e79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bdb8  00000000  00000000  00287ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00293c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000002c 	.word	0x2000002c
 8000290:	00000000 	.word	0x00000000
 8000294:	08011b7c 	.word	0x08011b7c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000030 	.word	0x20000030
 80002b0:	08011b7c 	.word	0x08011b7c

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 fa8f 	bl	8002af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f915 	bl	8000804 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f97f 	bl	80008dc <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f9b4 	bl	800094a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 ff25 	bl	8001430 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fbb3 	bl	8000d50 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb73 	bl	8000cd4 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fbe7 	bl	8000dc0 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc63 	bl	8000ebc <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fca1 	bl	8000f3c <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fcb3 	bl	8000f64 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fd31 	bl	8001064 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fde9 	bl	80011d8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f9af 	bl	8000968 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe97 	bl	800133c <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd77 	bl	8001100 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 fae3 	bl	8000bdc <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fc11 	bl	8000e3c <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 fedb 	bl	80013d4 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800061e:	f000 fe3d 	bl	800129c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //Begins DMA transfer for first ADC
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1));
 8000622:	220d      	movs	r2, #13
 8000624:	4964      	ldr	r1, [pc, #400]	@ (80007b8 <main+0x1ec>)
 8000626:	4865      	ldr	r0, [pc, #404]	@ (80007bc <main+0x1f0>)
 8000628:	f003 f9b0 	bl	800398c <HAL_ADC_Start_DMA>
  //begins DMA transfer for fourth ADC
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4));
 800062c:	2202      	movs	r2, #2
 800062e:	4964      	ldr	r1, [pc, #400]	@ (80007c0 <main+0x1f4>)
 8000630:	4864      	ldr	r0, [pc, #400]	@ (80007c4 <main+0x1f8>)
 8000632:	f003 f9ab 	bl	800398c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000636:	4864      	ldr	r0, [pc, #400]	@ (80007c8 <main+0x1fc>)
 8000638:	f00e fc2a 	bl	800ee90 <HAL_TIM_Base_Start>

  HAL_Delay(2000);
 800063c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000640:	f002 fb1e 	bl	8002c80 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000644:	2201      	movs	r2, #1
 8000646:	2104      	movs	r1, #4
 8000648:	4860      	ldr	r0, [pc, #384]	@ (80007cc <main+0x200>)
 800064a:	f007 f903 	bl	8007854 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800064e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000652:	f002 fb15 	bl	8002c80 <HAL_Delay>

  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	e010      	b.n	800067e <main+0xb2>
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4a5b      	ldr	r2, [pc, #364]	@ (80007d0 <main+0x204>)
 8000662:	441a      	add	r2, r3
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2302      	movs	r3, #2
 800066a:	2190      	movs	r1, #144	@ 0x90
 800066c:	4859      	ldr	r0, [pc, #356]	@ (80007d4 <main+0x208>)
 800066e:	f007 f9fb 	bl	8007a68 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	@ 0x64
 8000674:	f002 fb04 	bl	8002c80 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b1d      	cmp	r3, #29
 8000682:	d9eb      	bls.n	800065c <main+0x90>
  }

  HAL_Delay(100);
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f002 fafb 	bl	8002c80 <HAL_Delay>
  //Begins DMA transfer for PCM6260
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData));
 800068a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068e:	4952      	ldr	r1, [pc, #328]	@ (80007d8 <main+0x20c>)
 8000690:	4852      	ldr	r0, [pc, #328]	@ (80007dc <main+0x210>)
 8000692:	f00e f873 	bl	800e77c <HAL_SAI_Receive_DMA>
  //Begins DMA transfer for CS4334k-QZ
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacDataBuffer, DIM(dacDataBuffer));
 8000696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800069a:	4951      	ldr	r1, [pc, #324]	@ (80007e0 <main+0x214>)
 800069c:	4851      	ldr	r0, [pc, #324]	@ (80007e4 <main+0x218>)
 800069e:	f00d ff6b 	bl	800e578 <HAL_SAI_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t heartBeatTick = HAL_GetTick() + 1000;
 80006a2:	f002 fae1 	bl	8002c68 <HAL_GetTick>
 80006a6:	4603      	mov	r3, r0
 80006a8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006ac:	613b      	str	r3, [r7, #16]
  while (1)
  {
	  if(HAL_GetTick() >= heartBeatTick)
 80006ae:	f002 fadb 	bl	8002c68 <HAL_GetTick>
 80006b2:	4602      	mov	r2, r0
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d809      	bhi.n	80006ce <main+0x102>
	  {
		 heartBeatTick = HAL_GetTick() + 1000;
 80006ba:	f002 fad5 	bl	8002c68 <HAL_GetTick>
 80006be:	4603      	mov	r3, r0
 80006c0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80006c4:	613b      	str	r3, [r7, #16]
		 HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80006c6:	2104      	movs	r1, #4
 80006c8:	4847      	ldr	r0, [pc, #284]	@ (80007e8 <main+0x21c>)
 80006ca:	f007 f8db 	bl	8007884 <HAL_GPIO_TogglePin>
	  }


	  if(adcReady)
 80006ce:	4b47      	ldr	r3, [pc, #284]	@ (80007ec <main+0x220>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d02a      	beq.n	800072e <main+0x162>
	  {
		  //Loads sample data into Structs
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 80006d8:	2300      	movs	r3, #0
 80006da:	81fb      	strh	r3, [r7, #14]
 80006dc:	e021      	b.n	8000722 <main+0x156>
		  {
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 80006de:	2300      	movs	r3, #0
 80006e0:	81bb      	strh	r3, [r7, #12]
 80006e2:	e018      	b.n	8000716 <main+0x14a>
		        {
		        	//int32_t raw = adcData[channelCount*sample + channel] >> 1;
		        	//float convert = (float)raw / 16777216.0f;
		            channels[channel].channelData[sample] = signExtend24((uint32_t)(adcData[channelCount*sample + channel]));
 80006e4:	4b42      	ldr	r3, [pc, #264]	@ (80007f0 <main+0x224>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	89bb      	ldrh	r3, [r7, #12]
 80006ea:	00d9      	lsls	r1, r3, #3
 80006ec:	89fb      	ldrh	r3, [r7, #14]
 80006ee:	440b      	add	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	89fd      	ldrh	r5, [r7, #14]
 80006f8:	89bc      	ldrh	r4, [r7, #12]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ffce 	bl	800169c <signExtend24>
 8000700:	4602      	mov	r2, r0
 8000702:	493c      	ldr	r1, [pc, #240]	@ (80007f4 <main+0x228>)
 8000704:	238b      	movs	r3, #139	@ 0x8b
 8000706:	fb05 f303 	mul.w	r3, r5, r3
 800070a:	4423      	add	r3, r4
 800070c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 8000710:	89bb      	ldrh	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	81bb      	strh	r3, [r7, #12]
 8000716:	89bb      	ldrh	r3, [r7, #12]
 8000718:	2b7f      	cmp	r3, #127	@ 0x7f
 800071a:	d9e3      	bls.n	80006e4 <main+0x118>
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 800071c:	89fb      	ldrh	r3, [r7, #14]
 800071e:	3301      	adds	r3, #1
 8000720:	81fb      	strh	r3, [r7, #14]
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	2b07      	cmp	r3, #7
 8000726:	d9da      	bls.n	80006de <main+0x112>
		        }
		  }
		  //TODO: apply effects
		  //TODO: mix
		  adcReady = false;
 8000728:	4b30      	ldr	r3, [pc, #192]	@ (80007ec <main+0x220>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
	  }
	  if(dacReady)
 800072e:	4b32      	ldr	r3, [pc, #200]	@ (80007f8 <main+0x22c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d0ba      	beq.n	80006ae <main+0xe2>
	  {
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000738:	2300      	movs	r3, #0
 800073a:	817b      	strh	r3, [r7, #10]
 800073c:	e035      	b.n	80007aa <main+0x1de>
		  {
			  int32_t mixedSignal = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
			  for(uint16_t currChannel = 0; currChannel < channelCount - 2; currChannel ++)
 8000742:	2300      	movs	r3, #0
 8000744:	807b      	strh	r3, [r7, #2]
 8000746:	e00e      	b.n	8000766 <main+0x19a>
			  {
				  mixedSignal += channels[currChannel].channelData[sample];
 8000748:	887a      	ldrh	r2, [r7, #2]
 800074a:	897b      	ldrh	r3, [r7, #10]
 800074c:	4929      	ldr	r1, [pc, #164]	@ (80007f4 <main+0x228>)
 800074e:	208b      	movs	r0, #139	@ 0x8b
 8000750:	fb00 f202 	mul.w	r2, r0, r2
 8000754:	4413      	add	r3, r2
 8000756:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	607b      	str	r3, [r7, #4]
			  for(uint16_t currChannel = 0; currChannel < channelCount - 2; currChannel ++)
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	3301      	adds	r3, #1
 8000764:	807b      	strh	r3, [r7, #2]
 8000766:	887b      	ldrh	r3, [r7, #2]
 8000768:	2b05      	cmp	r3, #5
 800076a:	d9ed      	bls.n	8000748 <main+0x17c>
			  }
			  mixedSignal = mixedSignal / 6;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a23      	ldr	r2, [pc, #140]	@ (80007fc <main+0x230>)
 8000770:	fb82 1203 	smull	r1, r2, r2, r3
 8000774:	17db      	asrs	r3, r3, #31
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	607b      	str	r3, [r7, #4]
			  dacData[(sample * 2)] = channels[0].channelData[sample];//mixedSignal * gain;
 800077a:	897a      	ldrh	r2, [r7, #10]
 800077c:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <main+0x234>)
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	897b      	ldrh	r3, [r7, #10]
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	440b      	add	r3, r1
 8000786:	491b      	ldr	r1, [pc, #108]	@ (80007f4 <main+0x228>)
 8000788:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800078c:	601a      	str	r2, [r3, #0]
			  dacData[(sample * 2) + 1] = channels[0].channelData[sample];//mixedSignal * gain;
 800078e:	897a      	ldrh	r2, [r7, #10]
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <main+0x234>)
 8000792:	6819      	ldr	r1, [r3, #0]
 8000794:	897b      	ldrh	r3, [r7, #10]
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	3304      	adds	r3, #4
 800079a:	440b      	add	r3, r1
 800079c:	4915      	ldr	r1, [pc, #84]	@ (80007f4 <main+0x228>)
 800079e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007a2:	601a      	str	r2, [r3, #0]
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 80007a4:	897b      	ldrh	r3, [r7, #10]
 80007a6:	3301      	adds	r3, #1
 80007a8:	817b      	strh	r3, [r7, #10]
 80007aa:	897b      	ldrh	r3, [r7, #10]
 80007ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80007ae:	d9c6      	bls.n	800073e <main+0x172>
		  }
		  dacReady = false;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <main+0x22c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() >= heartBeatTick)
 80007b6:	e77a      	b.n	80006ae <main+0xe2>
 80007b8:	20000d7c 	.word	0x20000d7c
 80007bc:	20000048 	.word	0x20000048
 80007c0:	20000d98 	.word	0x20000d98
 80007c4:	200000d4 	.word	0x200000d4
 80007c8:	200007b8 	.word	0x200007b8
 80007cc:	42021000 	.word	0x42021000
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000354 	.word	0x20000354
 80007d8:	20000d9c 	.word	0x20000d9c
 80007dc:	2000056c 	.word	0x2000056c
 80007e0:	20002d9c 	.word	0x20002d9c
 80007e4:	200004d4 	.word	0x200004d4
 80007e8:	42020c00 	.word	0x42020c00
 80007ec:	200046fc 	.word	0x200046fc
 80007f0:	20004700 	.word	0x20004700
 80007f4:	2000359c 	.word	0x2000359c
 80007f8:	200046fd 	.word	0x200046fd
 80007fc:	2aaaaaab 	.word	0x2aaaaaab
 8000800:	20004704 	.word	0x20004704

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09e      	sub	sp, #120	@ 0x78
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2260      	movs	r2, #96	@ 0x60
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f011 f985 	bl	8011b22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
 8000826:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000828:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800082c:	f008 ff60 	bl	80096f0 <HAL_PWREx_ControlVoltageScaling>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000836:	f000 ff9f 	bl	8001778 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800083a:	f008 ff49 	bl	80096d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800083e:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <SystemClock_Config+0xd4>)
 8000840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000844:	4a24      	ldr	r2, [pc, #144]	@ (80008d8 <SystemClock_Config+0xd4>)
 8000846:	f023 0318 	bic.w	r3, r3, #24
 800084a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800084e:	2307      	movs	r3, #7
 8000850:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000856:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000858:	2381      	movs	r3, #129	@ 0x81
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000862:	2310      	movs	r3, #16
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	2303      	movs	r3, #3
 800086c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000872:	2301      	movs	r3, #1
 8000874:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000876:	2308      	movs	r3, #8
 8000878:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 800087a:	2308      	movs	r3, #8
 800087c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000882:	2301      	movs	r3, #1
 8000884:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000886:	230c      	movs	r3, #12
 8000888:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f009 f856 	bl	8009944 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800089e:	f000 ff6b 	bl	8001778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	231f      	movs	r3, #31
 80008a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2303      	movs	r3, #3
 80008a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	2103      	movs	r1, #3
 80008be:	4618      	mov	r0, r3
 80008c0:	f009 ff1c 	bl	800a6fc <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ca:	f000 ff55 	bl	8001778 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3778      	adds	r7, #120	@ 0x78
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	46020c00 	.word	0x46020c00

080008dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0b8      	sub	sp, #224	@ 0xe0
 80008e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	22e0      	movs	r2, #224	@ 0xe0
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f011 f91a 	bl	8011b22 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80008ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008f2:	f04f 0301 	mov.w	r3, #1
 80008f6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000900:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000904:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8000908:	2303      	movs	r3, #3
 800090a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8000910:	230c      	movs	r3, #12
 8000912:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000914:	2302      	movs	r3, #2
 8000916:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8000918:	2303      	movs	r3, #3
 800091a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 800091c:	2304      	movs	r3, #4
 800091e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000920:	230c      	movs	r3, #12
 8000922:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8000924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 800092a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4618      	mov	r0, r3
 8000934:	f00a fab2 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 800093e:	f000 ff1b 	bl	8001778 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	37e0      	adds	r7, #224	@ 0xe0
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800094e:	f008 ffbb 	bl	80098c8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000952:	2002      	movs	r0, #2
 8000954:	f008 ff58 	bl	8009808 <HAL_PWREx_ConfigSupply>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800095e:	f000 ff0b 	bl	8001778 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096e:	463b      	mov	r3, r7
 8000970:	2220      	movs	r2, #32
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f011 f8d4 	bl	8011b22 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800097a:	4b89      	ldr	r3, [pc, #548]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 800097c:	4a89      	ldr	r2, [pc, #548]	@ (8000ba4 <MX_ADC1_Init+0x23c>)
 800097e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000980:	4b87      	ldr	r3, [pc, #540]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000986:	4b86      	ldr	r3, [pc, #536]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000988:	2204      	movs	r2, #4
 800098a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800098c:	4b84      	ldr	r3, [pc, #528]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000992:	4b83      	ldr	r3, [pc, #524]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000998:	4b81      	ldr	r3, [pc, #516]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 800099a:	2201      	movs	r2, #1
 800099c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099e:	4b80      	ldr	r3, [pc, #512]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80009a4:	4b7e      	ldr	r3, [pc, #504]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009aa:	4b7d      	ldr	r3, [pc, #500]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 80009b2:	4b7b      	ldr	r3, [pc, #492]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009b4:	220d      	movs	r2, #13
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b8:	4b79      	ldr	r3, [pc, #484]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80009c0:	4b77      	ldr	r3, [pc, #476]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009c2:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80009c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009c8:	4b75      	ldr	r3, [pc, #468]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009d0:	4b73      	ldr	r3, [pc, #460]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009d8:	4b71      	ldr	r3, [pc, #452]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009da:	2200      	movs	r2, #0
 80009dc:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009de:	4b70      	ldr	r3, [pc, #448]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009e4:	4b6e      	ldr	r3, [pc, #440]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009ea:	4b6d      	ldr	r3, [pc, #436]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009ec:	2203      	movs	r2, #3
 80009ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009f0:	4b6b      	ldr	r3, [pc, #428]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f8:	4869      	ldr	r0, [pc, #420]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 80009fa:	f002 fcdf 	bl	80033bc <HAL_ADC_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000a04:	f000 feb8 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a08:	4b67      	ldr	r3, [pc, #412]	@ (8000ba8 <MX_ADC1_Init+0x240>)
 8000a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0c:	2306      	movs	r3, #6
 8000a0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	4619      	mov	r1, r3
 8000a26:	485e      	ldr	r0, [pc, #376]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000a28:	f003 fbf6 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000a32:	f000 fea1 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a36:	4b5d      	ldr	r3, [pc, #372]	@ (8000bac <MX_ADC1_Init+0x244>)
 8000a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4619      	mov	r1, r3
 8000a42:	4857      	ldr	r0, [pc, #348]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000a44:	f003 fbe8 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000a4e:	f000 fe93 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a52:	4b57      	ldr	r3, [pc, #348]	@ (8000bb0 <MX_ADC1_Init+0x248>)
 8000a54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a56:	2312      	movs	r3, #18
 8000a58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4850      	ldr	r0, [pc, #320]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000a60:	f003 fbda 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000a6a:	f000 fe85 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a6e:	4b51      	ldr	r3, [pc, #324]	@ (8000bb4 <MX_ADC1_Init+0x24c>)
 8000a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a72:	2318      	movs	r3, #24
 8000a74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4849      	ldr	r0, [pc, #292]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000a7c:	f003 fbcc 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a86:	f000 fe77 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8000bb8 <MX_ADC1_Init+0x250>)
 8000a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	4841      	ldr	r0, [pc, #260]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000a9a:	f003 fbbd 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000aa4:	f000 fe68 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000aa8:	4b44      	ldr	r3, [pc, #272]	@ (8000bbc <MX_ADC1_Init+0x254>)
 8000aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000aac:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000ab0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	483a      	ldr	r0, [pc, #232]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000ab8:	f003 fbae 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000ac2:	f000 fe59 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc0 <MX_ADC1_Init+0x258>)
 8000ac8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000aca:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000ace:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4832      	ldr	r0, [pc, #200]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000ad6:	f003 fb9f 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000ae0:	f000 fe4a 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ae4:	4b37      	ldr	r3, [pc, #220]	@ (8000bc4 <MX_ADC1_Init+0x25c>)
 8000ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000ae8:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000aec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aee:	463b      	mov	r3, r7
 8000af0:	4619      	mov	r1, r3
 8000af2:	482b      	ldr	r0, [pc, #172]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000af4:	f003 fb90 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000afe:	f000 fe3b 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b02:	4b31      	ldr	r3, [pc, #196]	@ (8000bc8 <MX_ADC1_Init+0x260>)
 8000b04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000b06:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000b0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4823      	ldr	r0, [pc, #140]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000b12:	f003 fb81 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000b1c:	f000 fe2c 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b20:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <MX_ADC1_Init+0x264>)
 8000b22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000b24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481c      	ldr	r0, [pc, #112]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000b30:	f003 fb72 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000b3a:	f000 fe1d 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <MX_ADC1_Init+0x268>)
 8000b40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000b42:	f240 2306 	movw	r3, #518	@ 0x206
 8000b46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4814      	ldr	r0, [pc, #80]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000b4e:	f003 fb63 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000b58:	f000 fe0e 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <MX_ADC1_Init+0x26c>)
 8000b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b60:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000b64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b66:	463b      	mov	r3, r7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000b6c:	f003 fb54 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000b76:	f000 fdff 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <MX_ADC1_Init+0x270>)
 8000b7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b7e:	f240 2312 	movw	r3, #530	@ 0x212
 8000b82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_ADC1_Init+0x238>)
 8000b8a:	f003 fb45 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000b94:	f000 fdf0 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000048 	.word	0x20000048
 8000ba4:	42028000 	.word	0x42028000
 8000ba8:	04000002 	.word	0x04000002
 8000bac:	08000004 	.word	0x08000004
 8000bb0:	0c000008 	.word	0x0c000008
 8000bb4:	10000010 	.word	0x10000010
 8000bb8:	14000020 	.word	0x14000020
 8000bbc:	1c000080 	.word	0x1c000080
 8000bc0:	20000100 	.word	0x20000100
 8000bc4:	2a000400 	.word	0x2a000400
 8000bc8:	2e000800 	.word	0x2e000800
 8000bcc:	32001000 	.word	0x32001000
 8000bd0:	3e008000 	.word	0x3e008000
 8000bd4:	42010000 	.word	0x42010000
 8000bd8:	ce080000 	.word	0xce080000

08000bdc <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2220      	movs	r2, #32
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f010 ff9a 	bl	8011b22 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000bee:	4b35      	ldr	r3, [pc, #212]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000bf0:	4a35      	ldr	r2, [pc, #212]	@ (8000cc8 <MX_ADC4_Init+0xec>)
 8000bf2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bf4:	4b33      	ldr	r3, [pc, #204]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000bfa:	4b32      	ldr	r3, [pc, #200]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c00:	4b30      	ldr	r3, [pc, #192]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000c06:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c08:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c0c:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c10:	2204      	movs	r2, #4
 8000c12:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000c14:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000c20:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000c28:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC4_EXTERNALTRIG_T15_TRGO;
 8000c2e:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c30:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8000c34:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c36:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c48:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c4c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000c60:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c68:	4816      	ldr	r0, [pc, #88]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c6a:	f002 fba7 	bl	80033bc <HAL_ADC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC4_Init+0x9c>
  {
    Error_Handler();
 8000c74:	f000 fd80 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_ADC4_Init+0xf0>)
 8000c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c84:	2304      	movs	r3, #4
 8000c86:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000c92:	f003 fac1 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC4_Init+0xc4>
  {
    Error_Handler();
 8000c9c:	f000 fd6c 	bl	8001778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_ADC4_Init+0xf4>)
 8000ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_ADC4_Init+0xe8>)
 8000cae:	f003 fab3 	bl	8004218 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC4_Init+0xe0>
  {
    Error_Handler();
 8000cb8:	f000 fd5e 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200000d4 	.word	0x200000d4
 8000cc8:	46021000 	.word	0x46021000
 8000ccc:	1c000080 	.word	0x1c000080
 8000cd0:	20000100 	.word	0x20000100

08000cd4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000cda:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <MX_DMA2D_Init+0x78>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000cea:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d20:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000d22:	f005 fa03 	bl	800612c <HAL_DMA2D_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000d2c:	f000 fd24 	bl	8001778 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d30:	2101      	movs	r1, #1
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_DMA2D_Init+0x74>)
 8000d34:	f005 fa5c 	bl	80061f0 <HAL_DMA2D_ConfigLayer>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f000 fd1b 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000028c 	.word	0x2000028c
 8000d4c:	4002b000 	.word	0x4002b000

08000d50 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d56:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <MX_GPDMA1_Init+0x6c>)
 8000d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5c:	4a17      	ldr	r2, [pc, #92]	@ (8000dbc <MX_GPDMA1_Init+0x6c>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_GPDMA1_Init+0x6c>)
 8000d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	201d      	movs	r0, #29
 8000d7a:	f004 fa79 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d7e:	201d      	movs	r0, #29
 8000d80:	f004 fa90 	bl	80052a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	201e      	movs	r0, #30
 8000d8a:	f004 fa71 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d8e:	201e      	movs	r0, #30
 8000d90:	f004 fa88 	bl	80052a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	201f      	movs	r0, #31
 8000d9a:	f004 fa69 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d9e:	201f      	movs	r0, #31
 8000da0:	f004 fa80 	bl	80052a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2020      	movs	r0, #32
 8000daa:	f004 fa61 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000dae:	2020      	movs	r0, #32
 8000db0:	f004 fa78 	bl	80052a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	46020c00 	.word	0x46020c00

08000dc0 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e38 <MX_HSPI1_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000dd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ddc:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000de0:	221a      	movs	r2, #26
 8000de2:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000de6:	2202      	movs	r2, #2
 8000de8:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000dea:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000df0:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <MX_HSPI1_Init+0x74>)
 8000e22:	f010 fa17 	bl	8011254 <HAL_XSPI_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000e2c:	f000 fca4 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200002f4 	.word	0x200002f4
 8000e38:	420d3400 	.word	0x420d3400

08000e3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e42:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb4 <MX_I2C1_Init+0x78>)
 8000e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e48:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <MX_I2C1_Init+0x7c>)
 8000e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e52:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e76:	480e      	ldr	r0, [pc, #56]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e78:	f006 fd5a 	bl	8007930 <HAL_I2C_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e82:	f000 fc79 	bl	8001778 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e86:	2100      	movs	r1, #0
 8000e88:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e8a:	f007 fee5 	bl	8008c58 <HAL_I2CEx_ConfigAnalogFilter>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e94:	f000 fc70 	bl	8001778 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e9c:	f007 ff27 	bl	8008cee <HAL_I2CEx_ConfigDigitalFilter>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ea6:	f000 fc67 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000354 	.word	0x20000354
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	20a0c4df 	.word	0x20a0c4df

08000ebc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f34 <MX_I2C2_Init+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f38 <MX_I2C2_Init+0x7c>)
 8000eca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ef6:	480e      	ldr	r0, [pc, #56]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000ef8:	f006 fd1a 	bl	8007930 <HAL_I2C_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f02:	f000 fc39 	bl	8001778 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000f0a:	f007 fea5 	bl	8008c58 <HAL_I2CEx_ConfigAnalogFilter>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f14:	f000 fc30 	bl	8001778 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_I2C2_Init+0x74>)
 8000f1c:	f007 fee7 	bl	8008cee <HAL_I2CEx_ConfigDigitalFilter>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 fc27 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200003a8 	.word	0x200003a8
 8000f34:	40005800 	.word	0x40005800
 8000f38:	20a0c4df 	.word	0x20a0c4df

08000f3c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000f40:	2000      	movs	r0, #0
 8000f42:	f007 ff21 	bl	8008d88 <HAL_ICACHE_ConfigAssociativityMode>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000f4c:	f000 fc14 	bl	8001778 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f50:	f007 ff3a 	bl	8008dc8 <HAL_ICACHE_Enable>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f5a:	f000 fc0d 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	@ 0x38
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2234      	movs	r2, #52	@ 0x34
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f010 fdd6 	bl	8011b22 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f76:	4b39      	ldr	r3, [pc, #228]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000f78:	4a39      	ldr	r2, [pc, #228]	@ (8001060 <MX_LTDC_Init+0xfc>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f7c:	4b37      	ldr	r3, [pc, #220]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f82:	4b36      	ldr	r3, [pc, #216]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f88:	4b34      	ldr	r3, [pc, #208]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f8e:	4b33      	ldr	r3, [pc, #204]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f94:	4b31      	ldr	r3, [pc, #196]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f9a:	4b30      	ldr	r3, [pc, #192]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000fa2:	220b      	movs	r2, #11
 8000fa4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000fa8:	220b      	movs	r2, #11
 8000faa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000fac:	4b2b      	ldr	r3, [pc, #172]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000fae:	f240 322b 	movw	r2, #811	@ 0x32b
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000fb6:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000fba:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000fbe:	f240 3233 	movw	r2, #819	@ 0x333
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000fc6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000fca:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fcc:	4b23      	ldr	r3, [pc, #140]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fd4:	4b21      	ldr	r3, [pc, #132]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fe4:	481d      	ldr	r0, [pc, #116]	@ (800105c <MX_LTDC_Init+0xf8>)
 8000fe6:	f007 feff 	bl	8008de8 <HAL_LTDC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ff0:	f000 fbc2 	bl	8001778 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000ff8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ffc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001002:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001006:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800100c:	23ff      	movs	r3, #255	@ 0xff
 800100e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001014:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001018:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800101a:	2307      	movs	r3, #7
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <MX_LTDC_Init+0xf8>)
 8001044:	f008 f862 	bl	800910c <HAL_LTDC_ConfigLayer>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800104e:	f000 fb93 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3738      	adds	r7, #56	@ 0x38
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200003fc 	.word	0x200003fc
 8001060:	40016800 	.word	0x40016800

08001064 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]
 800107a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800107c:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_RTC_Init+0x94>)
 800107e:	4a1f      	ldr	r2, [pc, #124]	@ (80010fc <MX_RTC_Init+0x98>)
 8001080:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001082:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_RTC_Init+0x94>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_RTC_Init+0x94>)
 800108a:	227f      	movs	r2, #127	@ 0x7f
 800108c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_RTC_Init+0x94>)
 8001090:	22ff      	movs	r2, #255	@ 0xff
 8001092:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_RTC_Init+0x94>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_RTC_Init+0x94>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_RTC_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_RTC_Init+0x94>)
 80010a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ac:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_RTC_Init+0x94>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80010b4:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_RTC_Init+0x94>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ba:	480f      	ldr	r0, [pc, #60]	@ (80010f8 <MX_RTC_Init+0x94>)
 80010bc:	f00c feea 	bl	800de94 <HAL_RTC_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80010c6:	f000 fb57 	bl	8001778 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <MX_RTC_Init+0x94>)
 80010e0:	f00d f806 	bl	800e0f0 <HAL_RTCEx_PrivilegeModeSet>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80010ea:	f000 fb45 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200004a4 	.word	0x200004a4
 80010fc:	46007800 	.word	0x46007800

08001100 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001104:	4b30      	ldr	r3, [pc, #192]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 8001106:	4a31      	ldr	r2, [pc, #196]	@ (80011cc <MX_SAI2_Init+0xcc>)
 8001108:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800110a:	4b2f      	ldr	r3, [pc, #188]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001116:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001122:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 800112a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800112e:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001130:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001136:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 8001138:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800113c:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800113e:	4b22      	ldr	r3, [pc, #136]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 8001140:	2200      	movs	r2, #0
 8001142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001144:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 8001146:	2200      	movs	r2, #0
 8001148:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 800114a:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 800114c:	2210      	movs	r2, #16
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001150:	2302      	movs	r3, #2
 8001152:	2202      	movs	r2, #2
 8001154:	2101      	movs	r1, #1
 8001156:	481c      	ldr	r0, [pc, #112]	@ (80011c8 <MX_SAI2_Init+0xc8>)
 8001158:	f00c fff8 	bl	800e14c <HAL_SAI_InitProtocol>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_SAI2_Init+0x66>
  {
    Error_Handler();
 8001162:	f000 fb09 	bl	8001778 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001166:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 8001168:	4a1a      	ldr	r2, [pc, #104]	@ (80011d4 <MX_SAI2_Init+0xd4>)
 800116a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 800116e:	2201      	movs	r2, #1
 8001170:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800117e:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 8001186:	2202      	movs	r2, #2
 8001188:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 800118c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001190:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001198:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 800119a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800119e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80011ac:	2308      	movs	r3, #8
 80011ae:	2202      	movs	r2, #2
 80011b0:	2100      	movs	r1, #0
 80011b2:	4807      	ldr	r0, [pc, #28]	@ (80011d0 <MX_SAI2_Init+0xd0>)
 80011b4:	f00c ffca 	bl	800e14c <HAL_SAI_InitProtocol>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_SAI2_Init+0xc2>
  {
    Error_Handler();
 80011be:	f000 fadb 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200004d4 	.word	0x200004d4
 80011cc:	40015804 	.word	0x40015804
 80011d0:	2000056c 	.word	0x2000056c
 80011d4:	40015824 	.word	0x40015824

080011d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011fc:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <MX_TIM3_Init+0xbc>)
 80011fe:	4a26      	ldr	r2, [pc, #152]	@ (8001298 <MX_TIM3_Init+0xc0>)
 8001200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8001202:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <MX_TIM3_Init+0xbc>)
 8001204:	22a0      	movs	r2, #160	@ 0xa0
 8001206:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <MX_TIM3_Init+0xbc>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <MX_TIM3_Init+0xbc>)
 8001210:	2264      	movs	r2, #100	@ 0x64
 8001212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <MX_TIM3_Init+0xbc>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <MX_TIM3_Init+0xbc>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001220:	481c      	ldr	r0, [pc, #112]	@ (8001294 <MX_TIM3_Init+0xbc>)
 8001222:	f00d fecd 	bl	800efc0 <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800122c:	f000 faa4 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4815      	ldr	r0, [pc, #84]	@ (8001294 <MX_TIM3_Init+0xbc>)
 8001240:	f00e fea4 	bl	800ff8c <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800124a:	f000 fa95 	bl	8001778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	@ 0x60
 8001250:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001252:	234b      	movs	r3, #75	@ 0x4b
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	220c      	movs	r2, #12
 8001262:	4619      	mov	r1, r3
 8001264:	480b      	ldr	r0, [pc, #44]	@ (8001294 <MX_TIM3_Init+0xbc>)
 8001266:	f00d ff03 	bl	800f070 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001270:	f000 fa82 	bl	8001778 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001274:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <MX_TIM3_Init+0xbc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	69da      	ldr	r2, [r3, #28]
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_TIM3_Init+0xbc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001282:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <MX_TIM3_Init+0xbc>)
 8001286:	f001 f825 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	@ 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000076c 	.word	0x2000076c
 8001298:	40000400 	.word	0x40000400

0800129c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <MX_TIM15_Init+0x98>)
 80012bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001338 <MX_TIM15_Init+0x9c>)
 80012be:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_TIM15_Init+0x98>)
 80012c2:	221a      	movs	r2, #26
 80012c4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <MX_TIM15_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 80012cc:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_TIM15_Init+0x98>)
 80012ce:	2231      	movs	r2, #49	@ 0x31
 80012d0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_TIM15_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_TIM15_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_TIM15_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80012e4:	4813      	ldr	r0, [pc, #76]	@ (8001334 <MX_TIM15_Init+0x98>)
 80012e6:	f00d fd7c 	bl	800ede2 <HAL_TIM_Base_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80012f0:	f000 fa42 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <MX_TIM15_Init+0x98>)
 8001302:	f00d ffc9 	bl	800f298 <HAL_TIM_ConfigClockSource>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 800130c:	f000 fa34 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001310:	2320      	movs	r3, #32
 8001312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_TIM15_Init+0x98>)
 800131e:	f00e fe35 	bl	800ff8c <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001328:	f000 fa26 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200007b8 	.word	0x200007b8
 8001338:	40014000 	.word	0x40014000

0800133c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001340:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 8001342:	4a23      	ldr	r2, [pc, #140]	@ (80013d0 <MX_USART1_UART_Init+0x94>)
 8001344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001384:	4811      	ldr	r0, [pc, #68]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 8001386:	f00e fec3 	bl	8010110 <HAL_UART_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 f9f2 	bl	8001778 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 8001398:	f00f fe91 	bl	80110be <HAL_UARTEx_SetTxFifoThreshold>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013a2:	f000 f9e9 	bl	8001778 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4808      	ldr	r0, [pc, #32]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 80013aa:	f00f fec6 	bl	801113a <HAL_UARTEx_SetRxFifoThreshold>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 f9e0 	bl	8001778 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_USART1_UART_Init+0x90>)
 80013ba:	f00f fe47 	bl	801104c <HAL_UARTEx_DisableFifoMode>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 f9d8 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000804 	.word	0x20000804
 80013d0:	40013800 	.word	0x40013800

080013d4 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013da:	4a14      	ldr	r2, [pc, #80]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x58>)
 80013dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80013de:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013e0:	2209      	movs	r2, #9
 80013e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013ec:	2203      	movs	r2, #3
 80013ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013fe:	2200      	movs	r2, #0
 8001400:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001404:	2200      	movs	r2, #0
 8001406:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800140a:	2200      	movs	r2, #0
 800140c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001410:	2200      	movs	r2, #0
 8001412:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001416:	f008 f82a 	bl	800946e <HAL_PCD_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8001420:	f000 f9aa 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000898 	.word	0x20000898
 800142c:	42040000 	.word	0x42040000

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	@ 0x38
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001446:	4b8c      	ldr	r3, [pc, #560]	@ (8001678 <MX_GPIO_Init+0x248>)
 8001448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800144c:	4a8a      	ldr	r2, [pc, #552]	@ (8001678 <MX_GPIO_Init+0x248>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001456:	4b88      	ldr	r3, [pc, #544]	@ (8001678 <MX_GPIO_Init+0x248>)
 8001458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	623b      	str	r3, [r7, #32]
 8001462:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001464:	4b84      	ldr	r3, [pc, #528]	@ (8001678 <MX_GPIO_Init+0x248>)
 8001466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800146a:	4a83      	ldr	r2, [pc, #524]	@ (8001678 <MX_GPIO_Init+0x248>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001474:	4b80      	ldr	r3, [pc, #512]	@ (8001678 <MX_GPIO_Init+0x248>)
 8001476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001482:	4b7d      	ldr	r3, [pc, #500]	@ (8001678 <MX_GPIO_Init+0x248>)
 8001484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001488:	4a7b      	ldr	r2, [pc, #492]	@ (8001678 <MX_GPIO_Init+0x248>)
 800148a:	f043 0320 	orr.w	r3, r3, #32
 800148e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001492:	4b79      	ldr	r3, [pc, #484]	@ (8001678 <MX_GPIO_Init+0x248>)
 8001494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a0:	4b75      	ldr	r3, [pc, #468]	@ (8001678 <MX_GPIO_Init+0x248>)
 80014a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a6:	4a74      	ldr	r2, [pc, #464]	@ (8001678 <MX_GPIO_Init+0x248>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b0:	4b71      	ldr	r3, [pc, #452]	@ (8001678 <MX_GPIO_Init+0x248>)
 80014b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b6e      	ldr	r3, [pc, #440]	@ (8001678 <MX_GPIO_Init+0x248>)
 80014c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c4:	4a6c      	ldr	r2, [pc, #432]	@ (8001678 <MX_GPIO_Init+0x248>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001678 <MX_GPIO_Init+0x248>)
 80014d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	4b66      	ldr	r3, [pc, #408]	@ (8001678 <MX_GPIO_Init+0x248>)
 80014de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e2:	4a65      	ldr	r2, [pc, #404]	@ (8001678 <MX_GPIO_Init+0x248>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ec:	4b62      	ldr	r3, [pc, #392]	@ (8001678 <MX_GPIO_Init+0x248>)
 80014ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001678 <MX_GPIO_Init+0x248>)
 80014fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001500:	4a5d      	ldr	r2, [pc, #372]	@ (8001678 <MX_GPIO_Init+0x248>)
 8001502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001506:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800150a:	4b5b      	ldr	r3, [pc, #364]	@ (8001678 <MX_GPIO_Init+0x248>)
 800150c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001518:	4b57      	ldr	r3, [pc, #348]	@ (8001678 <MX_GPIO_Init+0x248>)
 800151a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800151e:	4a56      	ldr	r2, [pc, #344]	@ (8001678 <MX_GPIO_Init+0x248>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001528:	4b53      	ldr	r3, [pc, #332]	@ (8001678 <MX_GPIO_Init+0x248>)
 800152a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001536:	4b50      	ldr	r3, [pc, #320]	@ (8001678 <MX_GPIO_Init+0x248>)
 8001538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800153c:	4a4e      	ldr	r2, [pc, #312]	@ (8001678 <MX_GPIO_Init+0x248>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001542:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001546:	4b4c      	ldr	r3, [pc, #304]	@ (8001678 <MX_GPIO_Init+0x248>)
 8001548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800154c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2104      	movs	r1, #4
 8001558:	4848      	ldr	r0, [pc, #288]	@ (800167c <MX_GPIO_Init+0x24c>)
 800155a:	f006 f97b 	bl	8007854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2110      	movs	r1, #16
 8001562:	4846      	ldr	r0, [pc, #280]	@ (800167c <MX_GPIO_Init+0x24c>)
 8001564:	f006 f976 	bl	8007854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2114      	movs	r1, #20
 800156c:	4844      	ldr	r0, [pc, #272]	@ (8001680 <MX_GPIO_Init+0x250>)
 800156e:	f006 f971 	bl	8007854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001572:	2314      	movs	r3, #20
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	483c      	ldr	r0, [pc, #240]	@ (800167c <MX_GPIO_Init+0x24c>)
 800158a:	f005 ff8b 	bl	80074a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800158e:	2320      	movs	r3, #32
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001592:	4b3c      	ldr	r3, [pc, #240]	@ (8001684 <MX_GPIO_Init+0x254>)
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	4836      	ldr	r0, [pc, #216]	@ (800167c <MX_GPIO_Init+0x24c>)
 80015a2:	f005 ff7f 	bl	80074a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 80015a6:	2302      	movs	r3, #2
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015aa:	4b37      	ldr	r3, [pc, #220]	@ (8001688 <MX_GPIO_Init+0x258>)
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	4834      	ldr	r0, [pc, #208]	@ (800168c <MX_GPIO_Init+0x25c>)
 80015ba:	f005 ff73 	bl	80074a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 80015be:	2310      	movs	r3, #16
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c2:	4b33      	ldr	r3, [pc, #204]	@ (8001690 <MX_GPIO_Init+0x260>)
 80015c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	482e      	ldr	r0, [pc, #184]	@ (800168c <MX_GPIO_Init+0x25c>)
 80015d2:	f005 ff67 	bl	80074a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 80015d6:	2314      	movs	r3, #20
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	4824      	ldr	r0, [pc, #144]	@ (8001680 <MX_GPIO_Init+0x250>)
 80015ee:	f005 ff59 	bl	80074a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	481e      	ldr	r0, [pc, #120]	@ (8001680 <MX_GPIO_Init+0x250>)
 8001606:	f005 ff4d 	bl	80074a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 800160a:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	481d      	ldr	r0, [pc, #116]	@ (8001694 <MX_GPIO_Init+0x264>)
 8001620:	f005 ff40 	bl	80074a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001624:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	4817      	ldr	r0, [pc, #92]	@ (8001698 <MX_GPIO_Init+0x268>)
 800163a:	f005 ff33 	bl	80074a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	200c      	movs	r0, #12
 8001644:	f003 fe14 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001648:	200c      	movs	r0, #12
 800164a:	f003 fe2b 	bl	80052a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	200f      	movs	r0, #15
 8001654:	f003 fe0c 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001658:	200f      	movs	r0, #15
 800165a:	f003 fe23 	bl	80052a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2010      	movs	r0, #16
 8001664:	f003 fe04 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001668:	2010      	movs	r0, #16
 800166a:	f003 fe1b 	bl	80052a4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800166e:	bf00      	nop
 8001670:	3738      	adds	r7, #56	@ 0x38
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	46020c00 	.word	0x46020c00
 800167c:	42021000 	.word	0x42021000
 8001680:	42020c00 	.word	0x42020c00
 8001684:	10110000 	.word	0x10110000
 8001688:	10310000 	.word	0x10310000
 800168c:	42020000 	.word	0x42020000
 8001690:	10210000 	.word	0x10210000
 8001694:	42021800 	.word	0x42021800
 8001698:	42020400 	.word	0x42020400

0800169c <signExtend24>:

/* USER CODE BEGIN 4 */

static inline int32_t signExtend24(uint32_t value)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    return (int32_t)((value & (1 << 23)) ? value | 0xFF000000 : value & 0x007FFFFF);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <signExtend24+0x1a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80016b4:	e002      	b.n	80016bc <signExtend24+0x20>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	adcReady = true;
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <HAL_SAI_RxHalfCpltCallback+0x20>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[0];
 80016d6:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_SAI_RxHalfCpltCallback+0x24>)
 80016d8:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	200046fc 	.word	0x200046fc
 80016ec:	20004700 	.word	0x20004700
 80016f0:	20000d9c 	.word	0x20000d9c

080016f4 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	adcReady = true;
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <HAL_SAI_RxCpltCallback+0x20>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
	adcData = &pcmData[sampleSize * (channelCount / 2)];
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_SAI_RxCpltCallback+0x24>)
 8001704:	4a05      	ldr	r2, [pc, #20]	@ (800171c <HAL_SAI_RxCpltCallback+0x28>)
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	200046fc 	.word	0x200046fc
 8001718:	20004700 	.word	0x20004700
 800171c:	20001d9c 	.word	0x20001d9c

08001720 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_SAI_TxHalfCpltCallback+0x20>)
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[0];
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_SAI_TxHalfCpltCallback+0x24>)
 8001730:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <HAL_SAI_TxHalfCpltCallback+0x28>)
 8001732:	601a      	str	r2, [r3, #0]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	200046fd 	.word	0x200046fd
 8001744:	20004704 	.word	0x20004704
 8001748:	20002d9c 	.word	0x20002d9c

0800174c <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	dacReady = true;
 8001754:	4b05      	ldr	r3, [pc, #20]	@ (800176c <HAL_SAI_TxCpltCallback+0x20>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
	dacData = &dacDataBuffer[sampleSize];
 800175a:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <HAL_SAI_TxCpltCallback+0x24>)
 800175c:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <HAL_SAI_TxCpltCallback+0x28>)
 800175e:	601a      	str	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200046fd 	.word	0x200046fd
 8001770:	20004704 	.word	0x20004704
 8001774:	2000319c 	.word	0x2000319c

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <Error_Handler+0x8>

08001784 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_MspInit+0x30>)
 800178c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001790:	4a08      	ldr	r2, [pc, #32]	@ (80017b4 <HAL_MspInit+0x30>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_MspInit+0x30>)
 800179c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80017a8:	f008 f89e 	bl	80098e8 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	46020c00 	.word	0x46020c00

080017b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0e0      	sub	sp, #384	@ 0x180
 80017bc:	af00      	add	r7, sp, #0
 80017be:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017c2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017c6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017dc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017e0:	4618      	mov	r0, r3
 80017e2:	23e0      	movs	r3, #224	@ 0xe0
 80017e4:	461a      	mov	r2, r3
 80017e6:	2100      	movs	r1, #0
 80017e8:	f010 f99b 	bl	8011b22 <memset>
  if(hadc->Instance==ADC1)
 80017ec:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017f0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4aa1      	ldr	r2, [pc, #644]	@ (8001a80 <HAL_ADC_MspInit+0x2c8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	f040 8152 	bne.w	8001aa4 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001800:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001804:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001808:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001814:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001818:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800181c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001820:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f009 fb37 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001834:	f7ff ffa0 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001838:	4b92      	ldr	r3, [pc, #584]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 800183a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800183e:	4a91      	ldr	r2, [pc, #580]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 8001840:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001844:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001848:	4b8e      	ldr	r3, [pc, #568]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 800184a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800184e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001852:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001856:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001860:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001864:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b87      	ldr	r3, [pc, #540]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 8001868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800186c:	4a85      	ldr	r2, [pc, #532]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001876:	4b83      	ldr	r3, [pc, #524]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 8001878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800187c:	f003 0204 	and.w	r2, r3, #4
 8001880:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001884:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800188e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001892:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b7b      	ldr	r3, [pc, #492]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 8001896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800189a:	4a7a      	ldr	r2, [pc, #488]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018a4:	4b77      	ldr	r3, [pc, #476]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 80018a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018b2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018bc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b70      	ldr	r3, [pc, #448]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 80018c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001a84 <HAL_ADC_MspInit+0x2cc>)
 80018d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d8:	f003 0202 	and.w	r2, r3, #2
 80018dc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018e0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018ea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018ee:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 80018f0:	230f      	movs	r3, #15
 80018f2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f6:	2303      	movs	r3, #3
 80018f8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001902:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001906:	4619      	mov	r1, r3
 8001908:	485f      	ldr	r0, [pc, #380]	@ (8001a88 <HAL_ADC_MspInit+0x2d0>)
 800190a:	f005 fdcb 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 800190e:	23ed      	movs	r3, #237	@ 0xed
 8001910:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001914:	2303      	movs	r3, #3
 8001916:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001924:	4619      	mov	r1, r3
 8001926:	4859      	ldr	r0, [pc, #356]	@ (8001a8c <HAL_ADC_MspInit+0x2d4>)
 8001928:	f005 fdbc 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 800192c:	2303      	movs	r3, #3
 800192e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001932:	2303      	movs	r3, #3
 8001934:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001942:	4619      	mov	r1, r3
 8001944:	4852      	ldr	r0, [pc, #328]	@ (8001a90 <HAL_ADC_MspInit+0x2d8>)
 8001946:	f005 fdad 	bl	80074a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800194a:	2321      	movs	r3, #33	@ 0x21
 800194c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001968:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800196c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001970:	2301      	movs	r3, #1
 8001972:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001976:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800197a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 800197e:	2301      	movs	r3, #1
 8001980:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8001984:	2301      	movs	r3, #1
 8001986:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800198a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800198e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80019a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019a8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80019ac:	232b      	movs	r3, #43	@ 0x2b
 80019ae:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80019be:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80019c2:	4934      	ldr	r1, [pc, #208]	@ (8001a94 <HAL_ADC_MspInit+0x2dc>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 fe81 	bl	80066cc <HAL_DMAEx_List_BuildNode>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 80019d0:	f7ff fed2 	bl	8001778 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80019d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001a94 <HAL_ADC_MspInit+0x2dc>)
 80019d6:	2100      	movs	r1, #0
 80019d8:	482f      	ldr	r0, [pc, #188]	@ (8001a98 <HAL_ADC_MspInit+0x2e0>)
 80019da:	f004 fea3 	bl	8006724 <HAL_DMAEx_List_InsertNode>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 80019e4:	f7ff fec8 	bl	8001778 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80019e8:	482b      	ldr	r0, [pc, #172]	@ (8001a98 <HAL_ADC_MspInit+0x2e0>)
 80019ea:	f004 ff64 	bl	80068b6 <HAL_DMAEx_List_SetCircularMode>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 80019f4:	f7ff fec0 	bl	8001778 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80019f8:	4b28      	ldr	r3, [pc, #160]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 80019fa:	4a29      	ldr	r2, [pc, #164]	@ (8001aa0 <HAL_ADC_MspInit+0x2e8>)
 80019fc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80019fe:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001a04:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001a0a:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a10:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001a16:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 8001a18:	2281      	movs	r2, #129	@ 0x81
 8001a1a:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001a1c:	481f      	ldr	r0, [pc, #124]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 8001a1e:	f004 fc95 	bl	800634c <HAL_DMAEx_List_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8001a28:	f7ff fea6 	bl	8001778 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001a2c:	491a      	ldr	r1, [pc, #104]	@ (8001a98 <HAL_ADC_MspInit+0x2e0>)
 8001a2e:	481b      	ldr	r0, [pc, #108]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 8001a30:	f004 ffa2 	bl	8006978 <HAL_DMAEx_List_LinkQ>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8001a3a:	f7ff fe9d 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001a3e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a42:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 8001a4a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a4c:	4a13      	ldr	r2, [pc, #76]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 8001a4e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a52:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	480f      	ldr	r0, [pc, #60]	@ (8001a9c <HAL_ADC_MspInit+0x2e4>)
 8001a5e:	f004 f883 	bl	8005b68 <HAL_DMA_ConfigChannelAttributes>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001a68:	f7ff fe86 	bl	8001778 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2025      	movs	r0, #37	@ 0x25
 8001a72:	f003 fbfd 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a76:	2025      	movs	r0, #37	@ 0x25
 8001a78:	f003 fc14 	bl	80052a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001a7c:	e0c0      	b.n	8001c00 <HAL_ADC_MspInit+0x448>
 8001a7e:	bf00      	nop
 8001a80:	42028000 	.word	0x42028000
 8001a84:	46020c00 	.word	0x46020c00
 8001a88:	42020800 	.word	0x42020800
 8001a8c:	42020000 	.word	0x42020000
 8001a90:	42020400 	.word	0x42020400
 8001a94:	20000160 	.word	0x20000160
 8001a98:	20000184 	.word	0x20000184
 8001a9c:	2000019c 	.word	0x2000019c
 8001aa0:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001aa4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001aa8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a56      	ldr	r2, [pc, #344]	@ (8001c0c <HAL_ADC_MspInit+0x454>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	f040 80a4 	bne.w	8001c00 <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001ab8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001abc:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001ac0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001acc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ad0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ad4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ad8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f009 f9db 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001aec:	f7ff fe44 	bl	8001778 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001af0:	4b47      	ldr	r3, [pc, #284]	@ (8001c10 <HAL_ADC_MspInit+0x458>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af6:	4a46      	ldr	r2, [pc, #280]	@ (8001c10 <HAL_ADC_MspInit+0x458>)
 8001af8:	f043 0320 	orr.w	r3, r3, #32
 8001afc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b00:	4b43      	ldr	r3, [pc, #268]	@ (8001c10 <HAL_ADC_MspInit+0x458>)
 8001b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b06:	f003 0220 	and.w	r2, r3, #32
 8001b0a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b0e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b18:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b1c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c10 <HAL_ADC_MspInit+0x458>)
 8001b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b24:	4a3a      	ldr	r2, [pc, #232]	@ (8001c10 <HAL_ADC_MspInit+0x458>)
 8001b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b2e:	4b38      	ldr	r3, [pc, #224]	@ (8001c10 <HAL_ADC_MspInit+0x458>)
 8001b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b34:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001b38:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b3c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b46:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b4a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b52:	2303      	movs	r3, #3
 8001b54:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b62:	4619      	mov	r1, r3
 8001b64:	482b      	ldr	r0, [pc, #172]	@ (8001c14 <HAL_ADC_MspInit+0x45c>)
 8001b66:	f005 fc9d 	bl	80074a4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c1c <HAL_ADC_MspInit+0x464>)
 8001b6e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001b70:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b76:	4b28      	ldr	r3, [pc, #160]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001b82:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001b88:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001b8a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b8e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001b90:	4b21      	ldr	r3, [pc, #132]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001b96:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001b98:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b9c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001bc2:	4815      	ldr	r0, [pc, #84]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001bc4:	f003 fc30 	bl	8005428 <HAL_DMA_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8001bce:	f7ff fdd3 	bl	8001778 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001bd2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001bd6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001bde:	671a      	str	r2, [r3, #112]	@ 0x70
 8001be0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001be2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001be6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001bee:	2110      	movs	r1, #16
 8001bf0:	4809      	ldr	r0, [pc, #36]	@ (8001c18 <HAL_ADC_MspInit+0x460>)
 8001bf2:	f003 ffb9 	bl	8005b68 <HAL_DMA_ConfigChannelAttributes>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_ADC_MspInit+0x448>
      Error_Handler();
 8001bfc:	f7ff fdbc 	bl	8001778 <Error_Handler>
}
 8001c00:	bf00      	nop
 8001c02:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	46021000 	.word	0x46021000
 8001c10:	46020c00 	.word	0x46020c00
 8001c14:	42021800 	.word	0x42021800
 8001c18:	20000214 	.word	0x20000214
 8001c1c:	40020150 	.word	0x40020150

08001c20 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <HAL_DMA2D_MspInit+0x3c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10e      	bne.n	8001c50 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c32:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_DMA2D_MspInit+0x40>)
 8001c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c38:	4a09      	ldr	r2, [pc, #36]	@ (8001c60 <HAL_DMA2D_MspInit+0x40>)
 8001c3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c42:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <HAL_DMA2D_MspInit+0x40>)
 8001c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	4002b000 	.word	0x4002b000
 8001c60:	46020c00 	.word	0x46020c00

08001c64 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2a      	ldr	r2, [pc, #168]	@ (8001d2c <HAL_XSPI_MspInit+0xc8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d14d      	bne.n	8001d22 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001c86:	4b2a      	ldr	r3, [pc, #168]	@ (8001d30 <HAL_XSPI_MspInit+0xcc>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8c:	4a28      	ldr	r2, [pc, #160]	@ (8001d30 <HAL_XSPI_MspInit+0xcc>)
 8001c8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c96:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <HAL_XSPI_MspInit+0xcc>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ca4:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <HAL_XSPI_MspInit+0xcc>)
 8001ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001caa:	4a21      	ldr	r2, [pc, #132]	@ (8001d30 <HAL_XSPI_MspInit+0xcc>)
 8001cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <HAL_XSPI_MspInit+0xcc>)
 8001cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_XSPI_MspInit+0xcc>)
 8001cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cc8:	4a19      	ldr	r2, [pc, #100]	@ (8001d30 <HAL_XSPI_MspInit+0xcc>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cd2:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <HAL_XSPI_MspInit+0xcc>)
 8001cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001ce0:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001ce4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480d      	ldr	r0, [pc, #52]	@ (8001d34 <HAL_XSPI_MspInit+0xd0>)
 8001cfe:	f005 fbd1 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d02:	230f      	movs	r3, #15
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d12:	2308      	movs	r3, #8
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4806      	ldr	r0, [pc, #24]	@ (8001d38 <HAL_XSPI_MspInit+0xd4>)
 8001d1e:	f005 fbc1 	bl	80074a4 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	@ 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	420d3400 	.word	0x420d3400
 8001d30:	46020c00 	.word	0x46020c00
 8001d34:	42021c00 	.word	0x42021c00
 8001d38:	42022000 	.word	0x42022000

08001d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0c4      	sub	sp, #272	@ 0x110
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d4a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d5c:	f107 0318 	add.w	r3, r7, #24
 8001d60:	22e0      	movs	r2, #224	@ 0xe0
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f00f fedc 	bl	8011b22 <memset>
  if(hi2c->Instance==I2C1)
 8001d6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a63      	ldr	r2, [pc, #396]	@ (8001f04 <HAL_I2C_MspInit+0x1c8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d14f      	bne.n	8001e1c <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d7c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d8e:	f107 0318 	add.w	r3, r7, #24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f009 f882 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001d9e:	f7ff fceb 	bl	8001778 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001da2:	4b59      	ldr	r3, [pc, #356]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da8:	4a57      	ldr	r2, [pc, #348]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001db2:	4b55      	ldr	r3, [pc, #340]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001dc0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001dc4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc8:	2312      	movs	r3, #18
 8001dca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001de4:	4619      	mov	r1, r3
 8001de6:	4849      	ldr	r0, [pc, #292]	@ (8001f0c <HAL_I2C_MspInit+0x1d0>)
 8001de8:	f005 fb5c 	bl	80074a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dec:	4b46      	ldr	r3, [pc, #280]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001df2:	4a45      	ldr	r2, [pc, #276]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001df4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001df8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001dfc:	4b42      	ldr	r3, [pc, #264]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e02:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001e06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e0a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e14:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e18:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e1a:	e06e      	b.n	8001efa <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001e1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a39      	ldr	r2, [pc, #228]	@ (8001f10 <HAL_I2C_MspInit+0x1d4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d165      	bne.n	8001efa <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e2e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e40:	f107 0318 	add.w	r3, r7, #24
 8001e44:	4618      	mov	r0, r3
 8001e46:	f009 f829 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001e50:	f7ff fc92 	bl	8001778 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e54:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001e5c:	f043 0320 	orr.w	r3, r3, #32
 8001e60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e64:	4b28      	ldr	r3, [pc, #160]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e6a:	f003 0220 	and.w	r2, r3, #32
 8001e6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e80:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e88:	2312      	movs	r3, #18
 8001e8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481b      	ldr	r0, [pc, #108]	@ (8001f14 <HAL_I2C_MspInit+0x1d8>)
 8001ea8:	f005 fafc 	bl	80074a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eac:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001eb2:	4a15      	ldr	r2, [pc, #84]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001eb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001eb8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_I2C_MspInit+0x1cc>)
 8001ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ec2:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ec6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ed8:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	2039      	movs	r0, #57	@ 0x39
 8001ee0:	f003 f9c6 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ee4:	2039      	movs	r0, #57	@ 0x39
 8001ee6:	f003 f9dd 	bl	80052a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	203a      	movs	r0, #58	@ 0x3a
 8001ef0:	f003 f9be 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ef4:	203a      	movs	r0, #58	@ 0x3a
 8001ef6:	f003 f9d5 	bl	80052a4 <HAL_NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40005400 	.word	0x40005400
 8001f08:	46020c00 	.word	0x46020c00
 8001f0c:	42021800 	.word	0x42021800
 8001f10:	40005800 	.word	0x40005800
 8001f14:	42021400 	.word	0x42021400

08001f18 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0c6      	sub	sp, #280	@ 0x118
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f26:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f38:	f107 0320 	add.w	r3, r7, #32
 8001f3c:	22e0      	movs	r2, #224	@ 0xe0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f00f fdee 	bl	8011b22 <memset>
  if(hltdc->Instance==LTDC)
 8001f46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a92      	ldr	r2, [pc, #584]	@ (800219c <HAL_LTDC_MspInit+0x284>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	f040 811b 	bne.w	8002190 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0302 	mov.w	r3, #2
 8001f62:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001f70:	2304      	movs	r3, #4
 8001f72:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001f74:	2332      	movs	r3, #50	@ 0x32
 8001f76:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001f80:	2308      	movs	r3, #8
 8001f82:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001f8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f90:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f92:	f107 0320 	add.w	r3, r7, #32
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 ff80 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001fa2:	f7ff fbe9 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fa6:	4b7e      	ldr	r3, [pc, #504]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8001fa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fac:	4a7c      	ldr	r2, [pc, #496]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8001fae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001fb2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8001fb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc4:	4b76      	ldr	r3, [pc, #472]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8001fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fca:	4a75      	ldr	r2, [pc, #468]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fd4:	4b72      	ldr	r3, [pc, #456]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8001fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fda:	f003 0202 	and.w	r2, r3, #2
 8001fde:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fe2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ff0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff2:	4b6b      	ldr	r3, [pc, #428]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8001ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff8:	4a69      	ldr	r2, [pc, #420]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8001ffa:	f043 0310 	orr.w	r3, r3, #16
 8001ffe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002002:	4b67      	ldr	r3, [pc, #412]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8002004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002008:	f003 0210 	and.w	r2, r3, #16
 800200c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002010:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800201a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800201e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002020:	4b5f      	ldr	r3, [pc, #380]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8002022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002026:	4a5e      	ldr	r2, [pc, #376]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002030:	4b5b      	ldr	r3, [pc, #364]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8002032:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002036:	f003 0208 	and.w	r2, r3, #8
 800203a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800203e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800204c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	4b54      	ldr	r3, [pc, #336]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8002050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002054:	4a52      	ldr	r2, [pc, #328]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800205e:	4b50      	ldr	r3, [pc, #320]	@ (80021a0 <HAL_LTDC_MspInit+0x288>)
 8002060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002064:	f003 0204 	and.w	r2, r3, #4
 8002068:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800206c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002076:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800207a:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800207c:	2304      	movs	r3, #4
 800207e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002094:	2308      	movs	r3, #8
 8002096:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800209e:	4619      	mov	r1, r3
 80020a0:	4840      	ldr	r0, [pc, #256]	@ (80021a4 <HAL_LTDC_MspInit+0x28c>)
 80020a2:	f005 f9ff 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80020a6:	f64f 7381 	movw	r3, #65409	@ 0xff81
 80020aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020c0:	2308      	movs	r3, #8
 80020c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020ca:	4619      	mov	r1, r3
 80020cc:	4836      	ldr	r0, [pc, #216]	@ (80021a8 <HAL_LTDC_MspInit+0x290>)
 80020ce:	f005 f9e9 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80020d2:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 80020d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020ec:	2308      	movs	r3, #8
 80020ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020f6:	4619      	mov	r1, r3
 80020f8:	482c      	ldr	r0, [pc, #176]	@ (80021ac <HAL_LTDC_MspInit+0x294>)
 80020fa:	f005 f9d3 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020fe:	23c0      	movs	r3, #192	@ 0xc0
 8002100:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002116:	2307      	movs	r3, #7
 8002118:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002120:	4619      	mov	r1, r3
 8002122:	4823      	ldr	r0, [pc, #140]	@ (80021b0 <HAL_LTDC_MspInit+0x298>)
 8002124:	f005 f9be 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002128:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800212c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002142:	2308      	movs	r3, #8
 8002144:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002148:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800214c:	4619      	mov	r1, r3
 800214e:	4818      	ldr	r0, [pc, #96]	@ (80021b0 <HAL_LTDC_MspInit+0x298>)
 8002150:	f005 f9a8 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002158:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 800216e:	2307      	movs	r3, #7
 8002170:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002178:	4619      	mov	r1, r3
 800217a:	480a      	ldr	r0, [pc, #40]	@ (80021a4 <HAL_LTDC_MspInit+0x28c>)
 800217c:	f005 f992 	bl	80074a4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	2087      	movs	r0, #135	@ 0x87
 8002186:	f003 f873 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800218a:	2087      	movs	r0, #135	@ 0x87
 800218c:	f003 f88a 	bl	80052a4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002190:	bf00      	nop
 8002192:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40016800 	.word	0x40016800
 80021a0:	46020c00 	.word	0x46020c00
 80021a4:	42020400 	.word	0x42020400
 80021a8:	42021000 	.word	0x42021000
 80021ac:	42020c00 	.word	0x42020c00
 80021b0:	42020800 	.word	0x42020800

080021b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0bc      	sub	sp, #240	@ 0xf0
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	22e0      	movs	r2, #224	@ 0xe0
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f00f fcac 	bl	8011b22 <memset>
  if(hrtc->Instance==RTC)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <HAL_RTC_MspInit+0x90>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d132      	bne.n	800223a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	4618      	mov	r0, r3
 80021ee:	f008 fe55 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80021f8:	f7ff fabe 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_RTC_MspInit+0x94>)
 80021fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002202:	4a11      	ldr	r2, [pc, #68]	@ (8002248 <HAL_RTC_MspInit+0x94>)
 8002204:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002208:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800220c:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <HAL_RTC_MspInit+0x94>)
 800220e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002212:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <HAL_RTC_MspInit+0x94>)
 8002214:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002218:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800221c:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <HAL_RTC_MspInit+0x94>)
 800221e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800222a:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <HAL_RTC_MspInit+0x94>)
 800222c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002230:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <HAL_RTC_MspInit+0x94>)
 8002232:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002236:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800223a:	bf00      	nop
 800223c:	37f0      	adds	r7, #240	@ 0xf0
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	46007800 	.word	0x46007800
 8002248:	46020c00 	.word	0x46020c00

0800224c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0b      	ldr	r2, [pc, #44]	@ (8002288 <HAL_TIM_PWM_MspInit+0x3c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10e      	bne.n	800227c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800225e:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <HAL_TIM_PWM_MspInit+0x40>)
 8002260:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002264:	4a09      	ldr	r2, [pc, #36]	@ (800228c <HAL_TIM_PWM_MspInit+0x40>)
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800226e:	4b07      	ldr	r3, [pc, #28]	@ (800228c <HAL_TIM_PWM_MspInit+0x40>)
 8002270:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40000400 	.word	0x40000400
 800228c:	46020c00 	.word	0x46020c00

08002290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0b      	ldr	r2, [pc, #44]	@ (80022cc <HAL_TIM_Base_MspInit+0x3c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022a2:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_TIM_Base_MspInit+0x40>)
 80022a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022a8:	4a09      	ldr	r2, [pc, #36]	@ (80022d0 <HAL_TIM_Base_MspInit+0x40>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ae:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <HAL_TIM_Base_MspInit+0x40>)
 80022b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40014000 	.word	0x40014000
 80022d0:	46020c00 	.word	0x46020c00

080022d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a12      	ldr	r2, [pc, #72]	@ (800233c <HAL_TIM_MspPostInit+0x68>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d11e      	bne.n	8002334 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_TIM_MspPostInit+0x6c>)
 80022f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022fc:	4a10      	ldr	r2, [pc, #64]	@ (8002340 <HAL_TIM_MspPostInit+0x6c>)
 80022fe:	f043 0310 	orr.w	r3, r3, #16
 8002302:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <HAL_TIM_MspPostInit+0x6c>)
 8002308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002314:	2340      	movs	r3, #64	@ 0x40
 8002316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002324:	2302      	movs	r3, #2
 8002326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	4619      	mov	r1, r3
 800232e:	4805      	ldr	r0, [pc, #20]	@ (8002344 <HAL_TIM_MspPostInit+0x70>)
 8002330:	f005 f8b8 	bl	80074a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002334:	bf00      	nop
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40000400 	.word	0x40000400
 8002340:	46020c00 	.word	0x46020c00
 8002344:	42021000 	.word	0x42021000

08002348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0c2      	sub	sp, #264	@ 0x108
 800234c:	af00      	add	r7, sp, #0
 800234e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002352:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002356:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	22e0      	movs	r2, #224	@ 0xe0
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f00f fbd6 	bl	8011b22 <memset>
  if(huart->Instance==USART1)
 8002376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800237a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2f      	ldr	r2, [pc, #188]	@ (8002440 <HAL_UART_MspInit+0xf8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d155      	bne.n	8002434 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002388:	f04f 0201 	mov.w	r2, #1
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002394:	2300      	movs	r3, #0
 8002396:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	4618      	mov	r0, r3
 800239e:	f008 fd7d 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80023a8:	f7ff f9e6 	bl	8001778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ac:	4b25      	ldr	r3, [pc, #148]	@ (8002444 <HAL_UART_MspInit+0xfc>)
 80023ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023b2:	4a24      	ldr	r2, [pc, #144]	@ (8002444 <HAL_UART_MspInit+0xfc>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80023bc:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <HAL_UART_MspInit+0xfc>)
 80023be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <HAL_UART_MspInit+0xfc>)
 80023cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <HAL_UART_MspInit+0xfc>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023da:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_UART_MspInit+0xfc>)
 80023dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e0:	f003 0201 	and.w	r2, r3, #1
 80023e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023f2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023f6:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002412:	2307      	movs	r3, #7
 8002414:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800241c:	4619      	mov	r1, r3
 800241e:	480a      	ldr	r0, [pc, #40]	@ (8002448 <HAL_UART_MspInit+0x100>)
 8002420:	f005 f840 	bl	80074a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	203d      	movs	r0, #61	@ 0x3d
 800242a:	f002 ff21 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800242e:	203d      	movs	r0, #61	@ 0x3d
 8002430:	f002 ff38 	bl	80052a4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002434:	bf00      	nop
 8002436:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40013800 	.word	0x40013800
 8002444:	46020c00 	.word	0x46020c00
 8002448:	42020000 	.word	0x42020000

0800244c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0be      	sub	sp, #248	@ 0xf8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002454:	f107 0318 	add.w	r3, r7, #24
 8002458:	22e0      	movs	r2, #224	@ 0xe0
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f00f fb60 	bl	8011b22 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a3a      	ldr	r2, [pc, #232]	@ (8002550 <HAL_PCD_MspInit+0x104>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d16d      	bne.n	8002548 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246c:	4b39      	ldr	r3, [pc, #228]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 800246e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002472:	4a38      	ldr	r2, [pc, #224]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800247c:	4b35      	ldr	r3, [pc, #212]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 800247e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0308 	mov.w	r3, #8
 8002492:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002496:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800249a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800249e:	f107 0318 	add.w	r3, r7, #24
 80024a2:	4618      	mov	r0, r3
 80024a4:	f008 fcfa 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80024ae:	f7ff f963 	bl	8001778 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80024b2:	200c      	movs	r0, #12
 80024b4:	f000 fc1c 	bl	8002cf0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80024b8:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 80024ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024be:	4a25      	ldr	r2, [pc, #148]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024c8:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 80024ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80024d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 80024d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 80024de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f4:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 80024f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d11b      	bne.n	800253a <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 8002504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002508:	4a12      	ldr	r2, [pc, #72]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 8002514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002520:	f007 f9c2 	bl	80098a8 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002524:	f007 f9f0 	bl	8009908 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252e:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <HAL_PCD_MspInit+0x108>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002538:	e003      	b.n	8002542 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800253a:	f007 f9b5 	bl	80098a8 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800253e:	f007 f9e3 	bl	8009908 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8002542:	2001      	movs	r0, #1
 8002544:	f000 fbc0 	bl	8002cc8 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002548:	bf00      	nop
 800254a:	37f8      	adds	r7, #248	@ 0xf8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	42040000 	.word	0x42040000
 8002554:	46020c00 	.word	0x46020c00

08002558 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b0a4      	sub	sp, #144	@ 0x90
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4abb      	ldr	r2, [pc, #748]	@ (8002854 <HAL_SAI_MspInit+0x2fc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	f040 80ca 	bne.w	8002700 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800256c:	4bba      	ldr	r3, [pc, #744]	@ (8002858 <HAL_SAI_MspInit+0x300>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10e      	bne.n	8002592 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002574:	4bb9      	ldr	r3, [pc, #740]	@ (800285c <HAL_SAI_MspInit+0x304>)
 8002576:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800257a:	4ab8      	ldr	r2, [pc, #736]	@ (800285c <HAL_SAI_MspInit+0x304>)
 800257c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002580:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002584:	4bb5      	ldr	r3, [pc, #724]	@ (800285c <HAL_SAI_MspInit+0x304>)
 8002586:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800258a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002592:	4bb1      	ldr	r3, [pc, #708]	@ (8002858 <HAL_SAI_MspInit+0x300>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	4aaf      	ldr	r2, [pc, #700]	@ (8002858 <HAL_SAI_MspInit+0x300>)
 800259a:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800259c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80025a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025b4:	230d      	movs	r3, #13
 80025b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025be:	4619      	mov	r1, r3
 80025c0:	48a7      	ldr	r0, [pc, #668]	@ (8002860 <HAL_SAI_MspInit+0x308>)
 80025c2:	f004 ff6f 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025de:	230d      	movs	r3, #13
 80025e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025e8:	4619      	mov	r1, r3
 80025ea:	489d      	ldr	r0, [pc, #628]	@ (8002860 <HAL_SAI_MspInit+0x308>)
 80025ec:	f004 ff5a 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002608:	230d      	movs	r3, #13
 800260a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800260e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002612:	4619      	mov	r1, r3
 8002614:	4893      	ldr	r0, [pc, #588]	@ (8002864 <HAL_SAI_MspInit+0x30c>)
 8002616:	f004 ff45 	bl	80074a4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800261a:	2321      	movs	r3, #33	@ 0x21
 800261c:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 800261e:	2326      	movs	r3, #38	@ 0x26
 8002620:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800262a:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 800262c:	2308      	movs	r3, #8
 800262e:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002634:	2302      	movs	r3, #2
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002638:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002642:	2301      	movs	r3, #1
 8002644:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002646:	2300      	movs	r3, #0
 8002648:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800264a:	2300      	movs	r3, #0
 800264c:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800264e:	2300      	movs	r3, #0
 8002650:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002652:	2300      	movs	r3, #0
 8002654:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002656:	2300      	movs	r3, #0
 8002658:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800265a:	2300      	movs	r3, #0
 800265c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 800265e:	f107 0310 	add.w	r3, r7, #16
 8002662:	4981      	ldr	r1, [pc, #516]	@ (8002868 <HAL_SAI_MspInit+0x310>)
 8002664:	4618      	mov	r0, r3
 8002666:	f004 f831 	bl	80066cc <HAL_DMAEx_List_BuildNode>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8002670:	f7ff f882 	bl	8001778 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8002674:	4a7c      	ldr	r2, [pc, #496]	@ (8002868 <HAL_SAI_MspInit+0x310>)
 8002676:	2100      	movs	r1, #0
 8002678:	487c      	ldr	r0, [pc, #496]	@ (800286c <HAL_SAI_MspInit+0x314>)
 800267a:	f004 f853 	bl	8006724 <HAL_DMAEx_List_InsertNode>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 8002684:	f7ff f878 	bl	8001778 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 8002688:	4878      	ldr	r0, [pc, #480]	@ (800286c <HAL_SAI_MspInit+0x314>)
 800268a:	f004 f914 	bl	80068b6 <HAL_DMAEx_List_SetCircularMode>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 8002694:	f7ff f870 	bl	8001778 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002698:	4b75      	ldr	r3, [pc, #468]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 800269a:	4a76      	ldr	r2, [pc, #472]	@ (8002874 <HAL_SAI_MspInit+0x31c>)
 800269c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800269e:	4b74      	ldr	r3, [pc, #464]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 80026a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026a4:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80026a6:	4b72      	ldr	r3, [pc, #456]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80026ac:	4b70      	ldr	r3, [pc, #448]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80026b8:	4b6d      	ldr	r3, [pc, #436]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 80026ba:	2281      	movs	r2, #129	@ 0x81
 80026bc:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80026be:	486c      	ldr	r0, [pc, #432]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 80026c0:	f003 fe44 	bl	800634c <HAL_DMAEx_List_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 80026ca:	f7ff f855 	bl	8001778 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 80026ce:	4967      	ldr	r1, [pc, #412]	@ (800286c <HAL_SAI_MspInit+0x314>)
 80026d0:	4867      	ldr	r0, [pc, #412]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 80026d2:	f004 f951 	bl	8006978 <HAL_DMAEx_List_LinkQ>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 80026dc:	f7ff f84c 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a63      	ldr	r2, [pc, #396]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 80026e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026e8:	4a61      	ldr	r2, [pc, #388]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80026ee:	2110      	movs	r1, #16
 80026f0:	485f      	ldr	r0, [pc, #380]	@ (8002870 <HAL_SAI_MspInit+0x318>)
 80026f2:	f003 fa39 	bl	8005b68 <HAL_DMA_ConfigChannelAttributes>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 80026fc:	f7ff f83c 	bl	8001778 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5c      	ldr	r2, [pc, #368]	@ (8002878 <HAL_SAI_MspInit+0x320>)
 8002706:	4293      	cmp	r3, r2
 8002708:	f040 80eb 	bne.w	80028e2 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800270c:	4b52      	ldr	r3, [pc, #328]	@ (8002858 <HAL_SAI_MspInit+0x300>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10e      	bne.n	8002732 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002714:	4b51      	ldr	r3, [pc, #324]	@ (800285c <HAL_SAI_MspInit+0x304>)
 8002716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800271a:	4a50      	ldr	r2, [pc, #320]	@ (800285c <HAL_SAI_MspInit+0x304>)
 800271c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002720:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002724:	4b4d      	ldr	r3, [pc, #308]	@ (800285c <HAL_SAI_MspInit+0x304>)
 8002726:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800272a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002732:	4b49      	ldr	r3, [pc, #292]	@ (8002858 <HAL_SAI_MspInit+0x300>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	4a47      	ldr	r2, [pc, #284]	@ (8002858 <HAL_SAI_MspInit+0x300>)
 800273a:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800273c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002740:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002754:	230d      	movs	r3, #13
 8002756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800275e:	4619      	mov	r1, r3
 8002760:	4846      	ldr	r0, [pc, #280]	@ (800287c <HAL_SAI_MspInit+0x324>)
 8002762:	f004 fe9f 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800276a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002778:	2303      	movs	r3, #3
 800277a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800277e:	230d      	movs	r3, #13
 8002780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002784:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002788:	4619      	mov	r1, r3
 800278a:	483d      	ldr	r0, [pc, #244]	@ (8002880 <HAL_SAI_MspInit+0x328>)
 800278c:	f004 fe8a 	bl	80074a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002790:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002794:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027a8:	230d      	movs	r3, #13
 80027aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ae:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80027b2:	4619      	mov	r1, r3
 80027b4:	4832      	ldr	r0, [pc, #200]	@ (8002880 <HAL_SAI_MspInit+0x328>)
 80027b6:	f004 fe75 	bl	80074a4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80027ba:	2321      	movs	r3, #33	@ 0x21
 80027bc:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80027be:	2327      	movs	r3, #39	@ 0x27
 80027c0:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80027ce:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80027d4:	2302      	movs	r3, #2
 80027d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80027d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80027de:	2301      	movs	r3, #1
 80027e0:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80027ea:	2300      	movs	r3, #0
 80027ec:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80027f2:	2300      	movs	r3, #0
 80027f4:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80027fa:	2300      	movs	r3, #0
 80027fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80027fe:	f107 0310 	add.w	r3, r7, #16
 8002802:	4920      	ldr	r1, [pc, #128]	@ (8002884 <HAL_SAI_MspInit+0x32c>)
 8002804:	4618      	mov	r0, r3
 8002806:	f003 ff61 	bl	80066cc <HAL_DMAEx_List_BuildNode>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8002810:	f7fe ffb2 	bl	8001778 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002814:	4a1b      	ldr	r2, [pc, #108]	@ (8002884 <HAL_SAI_MspInit+0x32c>)
 8002816:	2100      	movs	r1, #0
 8002818:	481b      	ldr	r0, [pc, #108]	@ (8002888 <HAL_SAI_MspInit+0x330>)
 800281a:	f003 ff83 	bl	8006724 <HAL_DMAEx_List_InsertNode>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8002824:	f7fe ffa8 	bl	8001778 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8002828:	4817      	ldr	r0, [pc, #92]	@ (8002888 <HAL_SAI_MspInit+0x330>)
 800282a:	f004 f844 	bl	80068b6 <HAL_DMAEx_List_SetCircularMode>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8002834:	f7fe ffa0 	bl	8001778 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002838:	4b14      	ldr	r3, [pc, #80]	@ (800288c <HAL_SAI_MspInit+0x334>)
 800283a:	4a15      	ldr	r2, [pc, #84]	@ (8002890 <HAL_SAI_MspInit+0x338>)
 800283c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 800283e:	4b13      	ldr	r3, [pc, #76]	@ (800288c <HAL_SAI_MspInit+0x334>)
 8002840:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002846:	4b11      	ldr	r3, [pc, #68]	@ (800288c <HAL_SAI_MspInit+0x334>)
 8002848:	2200      	movs	r2, #0
 800284a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800284c:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <HAL_SAI_MspInit+0x334>)
 800284e:	2200      	movs	r2, #0
 8002850:	641a      	str	r2, [r3, #64]	@ 0x40
 8002852:	e01f      	b.n	8002894 <HAL_SAI_MspInit+0x33c>
 8002854:	40015804 	.word	0x40015804
 8002858:	20004708 	.word	0x20004708
 800285c:	46020c00 	.word	0x46020c00
 8002860:	42020400 	.word	0x42020400
 8002864:	42021800 	.word	0x42021800
 8002868:	20000604 	.word	0x20000604
 800286c:	20000628 	.word	0x20000628
 8002870:	20000640 	.word	0x20000640
 8002874:	400201d0 	.word	0x400201d0
 8002878:	40015824 	.word	0x40015824
 800287c:	42020000 	.word	0x42020000
 8002880:	42020800 	.word	0x42020800
 8002884:	200006b8 	.word	0x200006b8
 8002888:	200006dc 	.word	0x200006dc
 800288c:	200006f4 	.word	0x200006f4
 8002890:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002894:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <HAL_SAI_MspInit+0x394>)
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800289a:	4b14      	ldr	r3, [pc, #80]	@ (80028ec <HAL_SAI_MspInit+0x394>)
 800289c:	2281      	movs	r2, #129	@ 0x81
 800289e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80028a0:	4812      	ldr	r0, [pc, #72]	@ (80028ec <HAL_SAI_MspInit+0x394>)
 80028a2:	f003 fd53 	bl	800634c <HAL_DMAEx_List_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 80028ac:	f7fe ff64 	bl	8001778 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80028b0:	490f      	ldr	r1, [pc, #60]	@ (80028f0 <HAL_SAI_MspInit+0x398>)
 80028b2:	480e      	ldr	r0, [pc, #56]	@ (80028ec <HAL_SAI_MspInit+0x394>)
 80028b4:	f004 f860 	bl	8006978 <HAL_DMAEx_List_LinkQ>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 80028be:	f7fe ff5b 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a09      	ldr	r2, [pc, #36]	@ (80028ec <HAL_SAI_MspInit+0x394>)
 80028c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80028ca:	4a08      	ldr	r2, [pc, #32]	@ (80028ec <HAL_SAI_MspInit+0x394>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80028d0:	2110      	movs	r1, #16
 80028d2:	4806      	ldr	r0, [pc, #24]	@ (80028ec <HAL_SAI_MspInit+0x394>)
 80028d4:	f003 f948 	bl	8005b68 <HAL_DMA_ConfigChannelAttributes>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 80028de:	f7fe ff4b 	bl	8001778 <Error_Handler>
    }

    }
}
 80028e2:	bf00      	nop
 80028e4:	3790      	adds	r7, #144	@ 0x90
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200006f4 	.word	0x200006f4
 80028f0:	200006dc 	.word	0x200006dc

080028f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <NMI_Handler+0x4>

080028fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <HardFault_Handler+0x4>

08002904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <MemManage_Handler+0x4>

0800290c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <BusFault_Handler+0x4>

08002914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <UsageFault_Handler+0x4>

0800291c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800294a:	f000 f979 	bl	8002c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}

08002952 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8002956:	2002      	movs	r0, #2
 8002958:	f004 ffae 	bl	80078b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}

08002960 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8002964:	2010      	movs	r0, #16
 8002966:	f004 ffa7 	bl	80078b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}

0800296e <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002972:	2020      	movs	r0, #32
 8002974:	f004 ffa0 	bl	80078b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}

0800297c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <GPDMA1_Channel0_IRQHandler+0x10>)
 8002982:	f002 ff82 	bl	800588a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000019c 	.word	0x2000019c

08002990 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002996:	f002 ff78 	bl	800588a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200006f4 	.word	0x200006f4

080029a4 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <GPDMA1_Channel2_IRQHandler+0x10>)
 80029aa:	f002 ff6e 	bl	800588a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000214 	.word	0x20000214

080029b8 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <GPDMA1_Channel3_IRQHandler+0x10>)
 80029be:	f002 ff64 	bl	800588a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000640 	.word	0x20000640

080029cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <ADC1_2_IRQHandler+0x10>)
 80029d2:	f001 f925 	bl	8003c20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000048 	.word	0x20000048

080029e0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <I2C2_EV_IRQHandler+0x10>)
 80029e6:	f005 f933 	bl	8007c50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200003a8 	.word	0x200003a8

080029f4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <I2C2_ER_IRQHandler+0x10>)
 80029fa:	f005 f943 	bl	8007c84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200003a8 	.word	0x200003a8

08002a08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <USART1_IRQHandler+0x10>)
 8002a0e:	f00d fbcf 	bl	80101b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000804 	.word	0x20000804

08002a1c <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <LTDC_IRQHandler+0x10>)
 8002a22:	f006 fab1 	bl	8008f88 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200003fc 	.word	0x200003fc

08002a30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a34:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <SystemInit+0x68>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	4a17      	ldr	r2, [pc, #92]	@ (8002a98 <SystemInit+0x68>)
 8002a3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002a44:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <SystemInit+0x6c>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002a4a:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <SystemInit+0x6c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002a50:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <SystemInit+0x6c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002a56:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <SystemInit+0x6c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <SystemInit+0x6c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0e      	ldr	r2, [pc, #56]	@ (8002a9c <SystemInit+0x6c>)
 8002a62:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002a66:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002a6a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <SystemInit+0x6c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002a72:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <SystemInit+0x6c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <SystemInit+0x6c>)
 8002a78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <SystemInit+0x6c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <SystemInit+0x68>)
 8002a86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a8a:	609a      	str	r2, [r3, #8]
  #endif
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00
 8002a9c:	46020c00 	.word	0x46020c00

08002aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ad8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002aa4:	f7ff ffc4 	bl	8002a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002aa8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002aaa:	e003      	b.n	8002ab4 <LoopCopyDataInit>

08002aac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002aae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ab0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ab2:	3104      	adds	r1, #4

08002ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ab4:	480a      	ldr	r0, [pc, #40]	@ (8002ae0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ab8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002aba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002abc:	d3f6      	bcc.n	8002aac <CopyDataInit>
	ldr	r2, =_sbss
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ac0:	e002      	b.n	8002ac8 <LoopFillZerobss>

08002ac2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ac2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ac4:	f842 3b04 	str.w	r3, [r2], #4

08002ac8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ac8:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <LoopForever+0x16>)
	cmp	r2, r3
 8002aca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002acc:	d3f9      	bcc.n	8002ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ace:	f00f f831 	bl	8011b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ad2:	f7fd fd7b 	bl	80005cc <main>

08002ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ad6:	e7fe      	b.n	8002ad6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002ad8:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002adc:	08011ca4 	.word	0x08011ca4
	ldr	r0, =_sdata
 8002ae0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ae4:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
 8002ae8:	2000002c 	.word	0x2000002c
	ldr	r3, = _ebss
 8002aec:	20004710 	.word	0x20004710

08002af0 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002af0:	e7fe      	b.n	8002af0 <ADC4_IRQHandler>
	...

08002af4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af8:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_Init+0x50>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a11      	ldr	r2, [pc, #68]	@ (8002b44 <HAL_Init+0x50>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b04:	2003      	movs	r0, #3
 8002b06:	f002 fba8 	bl	800525a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b0a:	f007 ffe9 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <HAL_Init+0x54>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	490c      	ldr	r1, [pc, #48]	@ (8002b4c <HAL_Init+0x58>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	4a0b      	ldr	r2, [pc, #44]	@ (8002b50 <HAL_Init+0x5c>)
 8002b22:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b24:	2004      	movs	r0, #4
 8002b26:	f002 fbed 	bl	8005304 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b2a:	200f      	movs	r0, #15
 8002b2c:	f000 f812 	bl	8002b54 <HAL_InitTick>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e002      	b.n	8002b40 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b3a:	f7fe fe23 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40022000 	.word	0x40022000
 8002b48:	46020c00 	.word	0x46020c00
 8002b4c:	08011b94 	.word	0x08011b94
 8002b50:	20000020 	.word	0x20000020

08002b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b60:	4b33      	ldr	r3, [pc, #204]	@ (8002c30 <HAL_InitTick+0xdc>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e05c      	b.n	8002c26 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b6c:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <HAL_InitTick+0xe0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d10c      	bne.n	8002b92 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b78:	4b2f      	ldr	r3, [pc, #188]	@ (8002c38 <HAL_InitTick+0xe4>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c30 <HAL_InitTick+0xdc>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e037      	b.n	8002c02 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002b92:	f002 fc0f 	bl	80053b4 <HAL_SYSTICK_GetCLKSourceConfig>
 8002b96:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d023      	beq.n	8002be6 <HAL_InitTick+0x92>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d82d      	bhi.n	8002c00 <HAL_InitTick+0xac>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_InitTick+0x5e>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d00d      	beq.n	8002bcc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002bb0:	e026      	b.n	8002c00 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002bb2:	4b21      	ldr	r3, [pc, #132]	@ (8002c38 <HAL_InitTick+0xe4>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c30 <HAL_InitTick+0xdc>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002bc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	60fb      	str	r3, [r7, #12]
        break;
 8002bca:	e01a      	b.n	8002c02 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bcc:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HAL_InitTick+0xdc>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bda:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	60fb      	str	r3, [r7, #12]
        break;
 8002be4:	e00d      	b.n	8002c02 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002be6:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_InitTick+0xdc>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bf4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	60fb      	str	r3, [r7, #12]
        break;
 8002bfe:	e000      	b.n	8002c02 <HAL_InitTick+0xae>
        break;
 8002c00:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f002 fb5c 	bl	80052c0 <HAL_SYSTICK_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e009      	b.n	8002c26 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c12:	2200      	movs	r2, #0
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1a:	f002 fb29 	bl	8005270 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c1e:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <HAL_InitTick+0xe8>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000028 	.word	0x20000028
 8002c34:	e000e010 	.word	0xe000e010
 8002c38:	20000020 	.word	0x20000020
 8002c3c:	20000024 	.word	0x20000024

08002c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <HAL_IncTick+0x20>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_IncTick+0x24>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <HAL_IncTick+0x24>)
 8002c52:	6013      	str	r3, [r2, #0]
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000028 	.word	0x20000028
 8002c64:	2000470c 	.word	0x2000470c

08002c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	@ (8002c7c <HAL_GetTick+0x14>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	2000470c 	.word	0x2000470c

08002c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff ffee 	bl	8002c68 <HAL_GetTick>
 8002c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d005      	beq.n	8002ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_Delay+0x44>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ca6:	bf00      	nop
 8002ca8:	f7ff ffde 	bl	8002c68 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d8f7      	bhi.n	8002ca8 <HAL_Delay+0x28>
  {
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000028 	.word	0x20000028

08002cc8 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002cd0:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd4:	f023 0201 	bic.w	r2, r3, #1
 8002cd8:	4904      	ldr	r1, [pc, #16]	@ (8002cec <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	46000400 	.word	0x46000400

08002cf0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002cf8:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cfc:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002d00:	4904      	ldr	r1, [pc, #16]	@ (8002d14 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	46000400 	.word	0x46000400

08002d18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	609a      	str	r2, [r3, #8]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	609a      	str	r2, [r3, #8]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <LL_ADC_SetResolution+0x3c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d104      	bne.n	8002da0 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f023 020c 	bic.w	r2, r3, #12
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	60da      	str	r2, [r3, #12]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	46021000 	.word	0x46021000

08002dc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3360      	adds	r3, #96	@ 0x60
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	430b      	orrs	r3, r1
 8002df0:	431a      	orrs	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3360      	adds	r3, #96	@ 0x60
 8002e10:	461a      	mov	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b087      	sub	sp, #28
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3360      	adds	r3, #96	@ 0x60
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3360      	adds	r3, #96	@ 0x60
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	601a      	str	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b087      	sub	sp, #28
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3360      	adds	r3, #96	@ 0x60
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	601a      	str	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ee2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	2a00      	cmp	r2, #0
 8002efa:	d002      	beq.n	8002f02 <LL_ADC_SetGainCompensation+0x32>
 8002efc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002f00:	e000      	b.n	8002f04 <LL_ADC_SetGainCompensation+0x34>
 8002f02:	2200      	movs	r2, #0
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2107      	movs	r1, #7
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	401a      	ands	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	431a      	orrs	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003038 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d020      	beq.n	8002fd2 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3330      	adds	r3, #48	@ 0x30
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	4413      	add	r3, r2
 8002fa2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	211f      	movs	r1, #31
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	0e9b      	lsrs	r3, r3, #26
 8002fbc:	f003 011f 	and.w	r1, r3, #31
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002fd0:	e02b      	b.n	800302a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	210f      	movs	r1, #15
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	401a      	ands	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	e010      	b.n	800301c <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	613b      	str	r3, [r7, #16]
  return result;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003010:	2320      	movs	r3, #32
 8003012:	e003      	b.n	800301c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	f001 011f 	and.w	r1, r1, #31
 8003022:	408b      	lsls	r3, r1
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800302a:	bf00      	nop
 800302c:	3724      	adds	r7, #36	@ 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	46021000 	.word	0x46021000

0800303c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d107      	bne.n	8003060 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2201      	movs	r2, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	e015      	b.n	800308c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	60fb      	str	r3, [r7, #12]
  return result;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8003076:	2320      	movs	r3, #32
 8003078:	e003      	b.n	8003082 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2201      	movs	r2, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	0e9b      	lsrs	r3, r3, #26
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	401a      	ands	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0303 	and.w	r3, r3, #3
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003114:	b480      	push	{r7}
 8003116:	b08b      	sub	sp, #44	@ 0x2c
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a2d      	ldr	r2, [pc, #180]	@ (80031d8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d042      	beq.n	80031ae <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d104      	bne.n	800313c <LL_ADC_SetChannelSamplingTime+0x28>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	f003 021f 	and.w	r2, r3, #31
 800313a:	e011      	b.n	8003160 <LL_ADC_SetChannelSamplingTime+0x4c>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	617b      	str	r3, [r7, #20]
  return result;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003152:	2320      	movs	r3, #32
 8003154:	e003      	b.n	800315e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	0e5b      	lsrs	r3, r3, #25
 8003164:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003168:	460b      	mov	r3, r1
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	1ad2      	subs	r2, r2, r3
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3314      	adds	r3, #20
 800317e:	461a      	mov	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	0e5b      	lsrs	r3, r3, #25
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	4413      	add	r3, r2
 800318c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2107      	movs	r1, #7
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	401a      	ands	r2, r3
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	431a      	orrs	r2, r3
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80031ac:	e00e      	b.n	80031cc <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	43db      	mvns	r3, r3
 80031b8:	401a      	ands	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	0219      	lsls	r1, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	400b      	ands	r3, r1
 80031c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031c6:	431a      	orrs	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	615a      	str	r2, [r3, #20]
}
 80031cc:	bf00      	nop
 80031ce:	372c      	adds	r7, #44	@ 0x2c
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	46021000 	.word	0x46021000

080031dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031f4:	43db      	mvns	r3, r3
 80031f6:	401a      	ands	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0318 	and.w	r3, r3, #24
 80031fe:	4908      	ldr	r1, [pc, #32]	@ (8003220 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003200:	40d9      	lsrs	r1, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	400b      	ands	r3, r1
 8003206:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800320a:	431a      	orrs	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	000fffff 	.word	0x000fffff

08003224 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 031f 	and.w	r3, r3, #31
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800326c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6093      	str	r3, [r2, #8]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003294:	d101      	bne.n	800329a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	609a      	str	r2, [r3, #8]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032e4:	d101      	bne.n	80032ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003308:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800330c:	f043 0201 	orr.w	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <LL_ADC_IsEnabled+0x18>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <LL_ADC_IsEnabled+0x1a>
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003356:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800335a:	f043 0204 	orr.w	r2, r3, #4
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	609a      	str	r2, [r3, #8]
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d101      	bne.n	8003386 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d101      	bne.n	80033ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b08b      	sub	sp, #44	@ 0x2c
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e2ce      	b.n	800397a <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a95      	ldr	r2, [pc, #596]	@ (8003640 <HAL_ADC_Init+0x284>)
 80033ea:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7fe f9df 	bl	80017b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff37 	bl	8003280 <LL_ADC_IsDeepPowerDownEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff1d 	bl	800325c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff52 	bl	80032d0 <LL_ADC_IsInternalRegulatorEnabled>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d115      	bne.n	800345e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ff36 	bl	80032a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800343c:	4b81      	ldr	r3, [pc, #516]	@ (8003644 <HAL_ADC_Init+0x288>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	099b      	lsrs	r3, r3, #6
 8003442:	4a81      	ldr	r2, [pc, #516]	@ (8003648 <HAL_ADC_Init+0x28c>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003450:	e002      	b.n	8003458 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3b01      	subs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f9      	bne.n	8003452 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ff34 	bl	80032d0 <LL_ADC_IsInternalRegulatorEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10e      	bne.n	800348c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff6c 	bl	800336e <LL_ADC_REG_IsConversionOngoing>
 8003496:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f040 825f 	bne.w	8003964 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 825b 	bne.w	8003964 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034b2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034b6:	f043 0202 	orr.w	r2, r3, #2
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff ff2c 	bl	8003320 <LL_ADC_IsEnabled>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d14f      	bne.n	800356e <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003640 <HAL_ADC_Init+0x284>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d037      	beq.n	8003548 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a5b      	ldr	r2, [pc, #364]	@ (800364c <HAL_ADC_Init+0x290>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_ADC_Init+0x130>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003650 <HAL_ADC_Init+0x294>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d10e      	bne.n	800350a <HAL_ADC_Init+0x14e>
 80034ec:	4857      	ldr	r0, [pc, #348]	@ (800364c <HAL_ADC_Init+0x290>)
 80034ee:	f7ff ff17 	bl	8003320 <LL_ADC_IsEnabled>
 80034f2:	4604      	mov	r4, r0
 80034f4:	4856      	ldr	r0, [pc, #344]	@ (8003650 <HAL_ADC_Init+0x294>)
 80034f6:	f7ff ff13 	bl	8003320 <LL_ADC_IsEnabled>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4323      	orrs	r3, r4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	e008      	b.n	800351c <HAL_ADC_Init+0x160>
 800350a:	484d      	ldr	r0, [pc, #308]	@ (8003640 <HAL_ADC_Init+0x284>)
 800350c:	f7ff ff08 	bl	8003320 <LL_ADC_IsEnabled>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d026      	beq.n	800356e <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a49      	ldr	r2, [pc, #292]	@ (800364c <HAL_ADC_Init+0x290>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_ADC_Init+0x178>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a48      	ldr	r2, [pc, #288]	@ (8003650 <HAL_ADC_Init+0x294>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_ADC_Init+0x17c>
 8003534:	4a47      	ldr	r2, [pc, #284]	@ (8003654 <HAL_ADC_Init+0x298>)
 8003536:	e000      	b.n	800353a <HAL_ADC_Init+0x17e>
 8003538:	4a47      	ldr	r2, [pc, #284]	@ (8003658 <HAL_ADC_Init+0x29c>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f7ff fbe9 	bl	8002d18 <LL_ADC_SetCommonClock>
 8003546:	e012      	b.n	800356e <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4619      	mov	r1, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f7ff fc14 	bl	8002d80 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003558:	4b3f      	ldr	r3, [pc, #252]	@ (8003658 <HAL_ADC_Init+0x29c>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003568:	493b      	ldr	r1, [pc, #236]	@ (8003658 <HAL_ADC_Init+0x29c>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a33      	ldr	r2, [pc, #204]	@ (8003640 <HAL_ADC_Init+0x284>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d010      	beq.n	800359a <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800357e:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003584:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800358a:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003592:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003594:	4313      	orrs	r3, r2
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	e035      	b.n	8003606 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7f1b      	ldrb	r3, [r3, #28]
 800359e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035a6:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035a8:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035ae:	2a00      	cmp	r2, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_ADC_Init+0x1fc>
 80035b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035b6:	e000      	b.n	80035ba <HAL_ADC_Init+0x1fe>
 80035b8:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035ba:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035c0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da04      	bge.n	80035d4 <HAL_ADC_Init+0x218>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035d2:	e001      	b.n	80035d8 <HAL_ADC_Init+0x21c>
 80035d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80035d8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	491b      	ldr	r1, [pc, #108]	@ (800364c <HAL_ADC_Init+0x290>)
 80035e0:	428b      	cmp	r3, r1
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_Init+0x232>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4919      	ldr	r1, [pc, #100]	@ (8003650 <HAL_ADC_Init+0x294>)
 80035ea:	428b      	cmp	r3, r1
 80035ec:	d103      	bne.n	80035f6 <HAL_ADC_Init+0x23a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035f4:	e003      	b.n	80035fe <HAL_ADC_Init+0x242>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035fc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035fe:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003600:	6a3a      	ldr	r2, [r7, #32]
 8003602:	4313      	orrs	r3, r2
 8003604:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d131      	bne.n	8003674 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <HAL_ADC_Init+0x284>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	3b01      	subs	r3, #1
 8003620:	045b      	lsls	r3, r3, #17
 8003622:	6a3a      	ldr	r2, [r7, #32]
 8003624:	4313      	orrs	r3, r2
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	e024      	b.n	8003674 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	d113      	bne.n	800365c <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363a:	623b      	str	r3, [r7, #32]
 800363c:	e01a      	b.n	8003674 <HAL_ADC_Init+0x2b8>
 800363e:	bf00      	nop
 8003640:	46021000 	.word	0x46021000
 8003644:	20000020 	.word	0x20000020
 8003648:	053e2d63 	.word	0x053e2d63
 800364c:	42028000 	.word	0x42028000
 8003650:	42028100 	.word	0x42028100
 8003654:	42028300 	.word	0x42028300
 8003658:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800366c:	f043 0201 	orr.w	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a75      	ldr	r2, [pc, #468]	@ (8003850 <HAL_ADC_Init+0x494>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003692:	4313      	orrs	r3, r2
 8003694:	6a3a      	ldr	r2, [r7, #32]
 8003696:	4313      	orrs	r3, r2
 8003698:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003854 <HAL_ADC_Init+0x498>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	6a39      	ldr	r1, [r7, #32]
 80036aa:	430b      	orrs	r3, r1
 80036ac:	60d3      	str	r3, [r2, #12]
 80036ae:	e031      	b.n	8003714 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036bc:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c4:	4313      	orrs	r3, r2
 80036c6:	6a3a      	ldr	r2, [r7, #32]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	4b61      	ldr	r3, [pc, #388]	@ (8003858 <HAL_ADC_Init+0x49c>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	6a39      	ldr	r1, [r7, #32]
 80036dc:	430b      	orrs	r3, r1
 80036de:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1a      	ldr	r2, [r3, #32]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a4d      	ldr	r2, [pc, #308]	@ (8003850 <HAL_ADC_Init+0x494>)
 800371a:	4293      	cmp	r3, r2
 800371c:	f000 80a4 	beq.w	8003868 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fe22 	bl	800336e <LL_ADC_REG_IsConversionOngoing>
 800372a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fe2f 	bl	8003394 <LL_ADC_INJ_IsConversionOngoing>
 8003736:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d166      	bne.n	800380c <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d163      	bne.n	800380c <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7f1b      	ldrb	r3, [r3, #28]
 8003748:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4943      	ldr	r1, [pc, #268]	@ (800385c <HAL_ADC_Init+0x4a0>)
 8003750:	428b      	cmp	r3, r1
 8003752:	d004      	beq.n	800375e <HAL_ADC_Init+0x3a2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4941      	ldr	r1, [pc, #260]	@ (8003860 <HAL_ADC_Init+0x4a4>)
 800375a:	428b      	cmp	r3, r1
 800375c:	d102      	bne.n	8003764 <HAL_ADC_Init+0x3a8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003762:	e002      	b.n	800376a <HAL_ADC_Init+0x3ae>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003768:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800376a:	4313      	orrs	r3, r2
 800376c:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003778:	f023 0303 	bic.w	r3, r3, #3
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	6a39      	ldr	r1, [r7, #32]
 8003782:	430b      	orrs	r3, r1
 8003784:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f7ff fb99 	bl	8002ed0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d11e      	bne.n	80037e6 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ac:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003864 <HAL_ADC_Init+0x4a8>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037bc:	0411      	lsls	r1, r2, #16
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80037c8:	4311      	orrs	r1, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80037ce:	4311      	orrs	r1, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037d4:	0892      	lsrs	r2, r2, #2
 80037d6:	430a      	orrs	r2, r1
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	611a      	str	r2, [r3, #16]
 80037e4:	e007      	b.n	80037f6 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10c      	bne.n	800382e <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	f023 010f 	bic.w	r1, r3, #15
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003822:	1e5a      	subs	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30
 800382c:	e007      	b.n	800383e <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 020f 	bic.w	r2, r2, #15
 800383c:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	f043 0201 	orr.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800384e:	e092      	b.n	8003976 <HAL_ADC_Init+0x5ba>
 8003850:	46021000 	.word	0x46021000
 8003854:	fff0c013 	.word	0xfff0c013
 8003858:	ffde800d 	.word	0xffde800d
 800385c:	42028000 	.word	0x42028000
 8003860:	42028100 	.word	0x42028100
 8003864:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800386e:	2b01      	cmp	r3, #1
 8003870:	d111      	bne.n	8003896 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800387a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003880:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003886:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	4313      	orrs	r3, r2
 800388c:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	4b39      	ldr	r3, [pc, #228]	@ (8003984 <HAL_ADC_Init+0x5c8>)
 800389e:	4013      	ands	r3, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	69f9      	ldr	r1, [r7, #28]
 80038a6:	430b      	orrs	r3, r1
 80038a8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b2:	461a      	mov	r2, r3
 80038b4:	2100      	movs	r1, #0
 80038b6:	f7ff fb2e 	bl	8002f16 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c2:	461a      	mov	r2, r3
 80038c4:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80038c8:	f7ff fb25 	bl	8002f16 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d108      	bne.n	80038e6 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f062 020f 	orn	r2, r2, #15
 80038e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80038e4:	e018      	b.n	8003918 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038ee:	d113      	bne.n	8003918 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	3b01      	subs	r3, #1
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	f003 031c 	and.w	r3, r3, #28
 8003902:	f06f 020f 	mvn.w	r2, #15
 8003906:	fa02 f103 	lsl.w	r1, r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	4b1a      	ldr	r3, [pc, #104]	@ (8003988 <HAL_ADC_Init+0x5cc>)
 8003920:	4013      	ands	r3, r2
 8003922:	6a3a      	ldr	r2, [r7, #32]
 8003924:	429a      	cmp	r2, r3
 8003926:	d10b      	bne.n	8003940 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	f043 0201 	orr.w	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800393e:	e01a      	b.n	8003976 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003944:	f023 0312 	bic.w	r3, r3, #18
 8003948:	f043 0210 	orr.w	r2, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003962:	e008      	b.n	8003976 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003968:	f043 0210 	orr.w	r2, r3, #16
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800397a:	4618      	mov	r0, r3
 800397c:	372c      	adds	r7, #44	@ 0x2c
 800397e:	46bd      	mov	sp, r7
 8003980:	bd90      	pop	{r4, r7, pc}
 8003982:	bf00      	nop
 8003984:	f7fffc02 	.word	0xf7fffc02
 8003988:	833ffff3 	.word	0x833ffff3

0800398c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b0a2      	sub	sp, #136	@ 0x88
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a98      	ldr	r2, [pc, #608]	@ (8003c00 <HAL_ADC_Start_DMA+0x274>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_ADC_Start_DMA+0x20>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a97      	ldr	r2, [pc, #604]	@ (8003c04 <HAL_ADC_Start_DMA+0x278>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <HAL_ADC_Start_DMA+0x24>
 80039ac:	4b96      	ldr	r3, [pc, #600]	@ (8003c08 <HAL_ADC_Start_DMA+0x27c>)
 80039ae:	e000      	b.n	80039b2 <HAL_ADC_Start_DMA+0x26>
 80039b0:	4b96      	ldr	r3, [pc, #600]	@ (8003c0c <HAL_ADC_Start_DMA+0x280>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fc36 	bl	8003224 <LL_ADC_GetMultimode>
 80039b8:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fcd5 	bl	800336e <LL_ADC_REG_IsConversionOngoing>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 8111 	bne.w	8003bee <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_ADC_Start_DMA+0x4e>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e10e      	b.n	8003bf8 <HAL_ADC_Start_DMA+0x26c>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d006      	beq.n	80039f6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d003      	beq.n	80039f6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039f0:	2b09      	cmp	r3, #9
 80039f2:	f040 80f4 	bne.w	8003bde <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f001 fa2c 	bl	8004e54 <ADC_Enable>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a02:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 80e4 	bne.w	8003bd4 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a7a      	ldr	r2, [pc, #488]	@ (8003c10 <HAL_ADC_Start_DMA+0x284>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d026      	beq.n	8003a78 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a75      	ldr	r2, [pc, #468]	@ (8003c04 <HAL_ADC_Start_DMA+0x278>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d002      	beq.n	8003a3a <HAL_ADC_Start_DMA+0xae>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	e000      	b.n	8003a3c <HAL_ADC_Start_DMA+0xb0>
 8003a3a:	4b71      	ldr	r3, [pc, #452]	@ (8003c00 <HAL_ADC_Start_DMA+0x274>)
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d002      	beq.n	8003a4a <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d105      	bne.n	8003a56 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a4e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a66:	f023 0206 	bic.w	r2, r3, #6
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a6e:	e006      	b.n	8003a7e <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a76:	e002      	b.n	8003a7e <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a82:	4a64      	ldr	r2, [pc, #400]	@ (8003c14 <HAL_ADC_Start_DMA+0x288>)
 8003a84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	4a63      	ldr	r2, [pc, #396]	@ (8003c18 <HAL_ADC_Start_DMA+0x28c>)
 8003a8c:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a92:	4a62      	ldr	r2, [pc, #392]	@ (8003c1c <HAL_ADC_Start_DMA+0x290>)
 8003a94:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	221c      	movs	r2, #28
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0210 	orr.w	r2, r2, #16
 8003ab4:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a55      	ldr	r2, [pc, #340]	@ (8003c10 <HAL_ADC_Start_DMA+0x284>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d107      	bne.n	8003ad0 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d04f      	beq.n	8003b7e <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d046      	beq.n	8003b76 <HAL_ADC_Start_DMA+0x1ea>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d040      	beq.n	8003b76 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	f107 0310 	add.w	r3, r7, #16
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f002 fdf8 	bl	80066f8 <HAL_DMAEx_List_GetNodeConfig>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e072      	b.n	8003bf8 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d104      	bne.n	8003b22 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b20:	e00a      	b.n	8003b38 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d104      	bne.n	8003b32 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b30:	e002      	b.n	8003b38 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b44:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f002 fd1b 	bl	80065a4 <HAL_DMAEx_List_Start_IT>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b74:	e028      	b.n	8003bc8 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b7c:	e024      	b.n	8003bc8 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d104      	bne.n	8003b92 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b90:	e00c      	b.n	8003bac <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d104      	bne.n	8003ba6 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ba4:	e002      	b.n	8003bac <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3340      	adds	r3, #64	@ 0x40
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bbe:	f001 fd5f 	bl	8005680 <HAL_DMA_Start_IT>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fbba 	bl	8003346 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003bd2:	e00f      	b.n	8003bf4 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003bec:	e002      	b.n	8003bf4 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003bf4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3788      	adds	r7, #136	@ 0x88
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	42028000 	.word	0x42028000
 8003c04:	42028100 	.word	0x42028100
 8003c08:	42028300 	.word	0x42028300
 8003c0c:	46021300 	.word	0x46021300
 8003c10:	46021000 	.word	0x46021000
 8003c14:	08004f89 	.word	0x08004f89
 8003c18:	08005061 	.word	0x08005061
 8003c1c:	0800507d 	.word	0x0800507d

08003c20 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	@ 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c28:	2300      	movs	r3, #0
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a77      	ldr	r2, [pc, #476]	@ (8003e20 <HAL_ADC_IRQHandler+0x200>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_ADC_IRQHandler+0x30>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a76      	ldr	r2, [pc, #472]	@ (8003e24 <HAL_ADC_IRQHandler+0x204>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_ADC_IRQHandler+0x34>
 8003c50:	4b75      	ldr	r3, [pc, #468]	@ (8003e28 <HAL_ADC_IRQHandler+0x208>)
 8003c52:	e000      	b.n	8003c56 <HAL_ADC_IRQHandler+0x36>
 8003c54:	4b75      	ldr	r3, [pc, #468]	@ (8003e2c <HAL_ADC_IRQHandler+0x20c>)
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fae4 	bl	8003224 <LL_ADC_GetMultimode>
 8003c5c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <HAL_ADC_IRQHandler+0x78>
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d105      	bne.n	8003c8a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c82:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f001 fa2e 	bl	80050ec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2202      	movs	r2, #2
 8003c96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_ADC_IRQHandler+0x8c>
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80d1 	beq.w	8003e5a <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 80cb 	beq.w	8003e5a <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d105      	bne.n	8003cdc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cd4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a53      	ldr	r2, [pc, #332]	@ (8003e30 <HAL_ADC_IRQHandler+0x210>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d06c      	beq.n	8003dc0 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff f932 	bl	8002f54 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80aa 	beq.w	8003e4c <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a49      	ldr	r2, [pc, #292]	@ (8003e24 <HAL_ADC_IRQHandler+0x204>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d002      	beq.n	8003d08 <HAL_ADC_IRQHandler+0xe8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	e000      	b.n	8003d0a <HAL_ADC_IRQHandler+0xea>
 8003d08:	4b45      	ldr	r3, [pc, #276]	@ (8003e20 <HAL_ADC_IRQHandler+0x200>)
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d008      	beq.n	8003d24 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d002      	beq.n	8003d24 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	d104      	bne.n	8003d2e <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	e00c      	b.n	8003d48 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a3c      	ldr	r2, [pc, #240]	@ (8003e24 <HAL_ADC_IRQHandler+0x204>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d002      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x11e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	e000      	b.n	8003d40 <HAL_ADC_IRQHandler+0x120>
 8003d3e:	4b38      	ldr	r3, [pc, #224]	@ (8003e20 <HAL_ADC_IRQHandler+0x200>)
 8003d40:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d17c      	bne.n	8003e4c <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d175      	bne.n	8003e4c <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fb02 	bl	800336e <LL_ADC_REG_IsConversionOngoing>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d11a      	bne.n	8003da6 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 020c 	bic.w	r2, r2, #12
 8003d7e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d159      	bne.n	8003e4c <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	679a      	str	r2, [r3, #120]	@ 0x78
 8003da4:	e052      	b.n	8003e4c <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003daa:	f043 0210 	orr.w	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003db6:	f043 0201 	orr.w	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003dbe:	e045      	b.n	8003e4c <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff f8c5 	bl	8002f54 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d03d      	beq.n	8003e4c <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d138      	bne.n	8003e4c <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d131      	bne.n	8003e4c <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fabe 	bl	800336e <LL_ADC_REG_IsConversionOngoing>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d11d      	bne.n	8003e34 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 020c 	bic.w	r2, r2, #12
 8003e06:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	679a      	str	r2, [r3, #120]	@ 0x78
 8003e1c:	e016      	b.n	8003e4c <HAL_ADC_IRQHandler+0x22c>
 8003e1e:	bf00      	nop
 8003e20:	42028000 	.word	0x42028000
 8003e24:	42028100 	.word	0x42028100
 8003e28:	42028300 	.word	0x42028300
 8003e2c:	46021300 	.word	0x46021300
 8003e30:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e44:	f043 0201 	orr.w	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f99d 	bl	800418c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	220c      	movs	r2, #12
 8003e58:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a8c      	ldr	r2, [pc, #560]	@ (8004090 <HAL_ADC_IRQHandler+0x470>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	f000 8095 	beq.w	8003f90 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_ADC_IRQHandler+0x25a>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8085 	beq.w	8003f90 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d07f      	beq.n	8003f90 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d105      	bne.n	8003ea8 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ea0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff f91e 	bl	80030ee <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003eb2:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff f84b 	bl	8002f54 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ebe:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a73      	ldr	r2, [pc, #460]	@ (8004094 <HAL_ADC_IRQHandler+0x474>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d002      	beq.n	8003ed0 <HAL_ADC_IRQHandler+0x2b0>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	e000      	b.n	8003ed2 <HAL_ADC_IRQHandler+0x2b2>
 8003ed0:	4b71      	ldr	r3, [pc, #452]	@ (8004098 <HAL_ADC_IRQHandler+0x478>)
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d008      	beq.n	8003eec <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d002      	beq.n	8003eec <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b07      	cmp	r3, #7
 8003eea:	d104      	bne.n	8003ef6 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	623b      	str	r3, [r7, #32]
 8003ef4:	e00c      	b.n	8003f10 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a66      	ldr	r2, [pc, #408]	@ (8004094 <HAL_ADC_IRQHandler+0x474>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d002      	beq.n	8003f06 <HAL_ADC_IRQHandler+0x2e6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	e000      	b.n	8003f08 <HAL_ADC_IRQHandler+0x2e8>
 8003f06:	4b64      	ldr	r3, [pc, #400]	@ (8004098 <HAL_ADC_IRQHandler+0x478>)
 8003f08:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d035      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x310>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02d      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d128      	bne.n	8003f82 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3a:	2b40      	cmp	r3, #64	@ 0x40
 8003f3c:	d121      	bne.n	8003f82 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fa26 	bl	8003394 <LL_ADC_INJ_IsConversionOngoing>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d119      	bne.n	8003f82 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f5c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d105      	bne.n	8003f82 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f001 f894 	bl	80050b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2260      	movs	r2, #96	@ 0x60
 8003f8e:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d011      	beq.n	8003fbe <HAL_ADC_IRQHandler+0x39e>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00c      	beq.n	8003fbe <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fa8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f8ff 	bl	80041b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2280      	movs	r2, #128	@ 0x80
 8003fbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d012      	beq.n	8003fee <HAL_ADC_IRQHandler+0x3ce>
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f001 f870 	bl	80050c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d012      	beq.n	800401e <HAL_ADC_IRQHandler+0x3fe>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004006:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f001 f862 	bl	80050d8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d05d      	beq.n	80040e4 <HAL_ADC_IRQHandler+0x4c4>
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b00      	cmp	r3, #0
 8004030:	d058      	beq.n	80040e4 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 800403a:	2301      	movs	r3, #1
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
 800403e:	e03b      	b.n	80040b8 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a12      	ldr	r2, [pc, #72]	@ (8004090 <HAL_ADC_IRQHandler+0x470>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02c      	beq.n	80040a4 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d015      	beq.n	800407c <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a10      	ldr	r2, [pc, #64]	@ (8004098 <HAL_ADC_IRQHandler+0x478>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d004      	beq.n	8004064 <HAL_ADC_IRQHandler+0x444>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a0d      	ldr	r2, [pc, #52]	@ (8004094 <HAL_ADC_IRQHandler+0x474>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <HAL_ADC_IRQHandler+0x448>
 8004064:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <HAL_ADC_IRQHandler+0x47c>)
 8004066:	e000      	b.n	800406a <HAL_ADC_IRQHandler+0x44a>
 8004068:	4b0d      	ldr	r3, [pc, #52]	@ (80040a0 <HAL_ADC_IRQHandler+0x480>)
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff f8e8 	bl	8003240 <LL_ADC_GetMultiDMATransfer>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d020      	beq.n	80040b8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004076:	2301      	movs	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
 800407a:	e01d      	b.n	80040b8 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800408a:	2301      	movs	r3, #1
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
 800408e:	e013      	b.n	80040b8 <HAL_ADC_IRQHandler+0x498>
 8004090:	46021000 	.word	0x46021000
 8004094:	42028100 	.word	0x42028100
 8004098:	42028000 	.word	0x42028000
 800409c:	42028300 	.word	0x42028300
 80040a0:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff f812 	bl	80030d2 <LL_ADC_REG_GetDMATransfer>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 80040b4:	2301      	movs	r3, #1
 80040b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d10e      	bne.n	80040dc <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040c2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ce:	f043 0202 	orr.w	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f876 	bl	80041c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01b      	beq.n	8004126 <HAL_ADC_IRQHandler+0x506>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d016      	beq.n	8004126 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004108:	f043 0201 	orr.w	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f877 	bl	8004204 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a17      	ldr	r2, [pc, #92]	@ (8004188 <HAL_ADC_IRQHandler+0x568>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d126      	bne.n	800417e <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_ADC_IRQHandler+0x534>
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f849 	bl	80041dc <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004152:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00f      	beq.n	800417e <HAL_ADC_IRQHandler+0x55e>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f841 	bl	80041f0 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800417c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800417e:	bf00      	nop
 8004180:	3728      	adds	r7, #40	@ 0x28
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	46021000 	.word	0x46021000

0800418c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b0b7      	sub	sp, #220	@ 0xdc
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4aa8      	ldr	r2, [pc, #672]	@ (80044d4 <HAL_ADC_ConfigChannel+0x2bc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d103      	bne.n	800423e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004244:	2b01      	cmp	r3, #1
 8004246:	d102      	bne.n	800424e <HAL_ADC_ConfigChannel+0x36>
 8004248:	2302      	movs	r3, #2
 800424a:	f000 bdfe 	b.w	8004e4a <HAL_ADC_ConfigChannel+0xc32>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff f887 	bl	800336e <LL_ADC_REG_IsConversionOngoing>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	f040 85c1 	bne.w	8004dea <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a99      	ldr	r2, [pc, #612]	@ (80044d4 <HAL_ADC_ConfigChannel+0x2bc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	f000 8409 	beq.w	8004a86 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d108      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x7a>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	0e9b      	lsrs	r3, r3, #26
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2201      	movs	r2, #1
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	e01d      	b.n	80042ce <HAL_ADC_ConfigChannel+0xb6>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80042a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80042ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80042b6:	2320      	movs	r3, #32
 80042b8:	e004      	b.n	80042c4 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80042ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	2201      	movs	r2, #1
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	69d1      	ldr	r1, [r2, #28]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	430b      	orrs	r3, r1
 80042da:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	f7fe fe47 	bl	8002f7c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff f83b 	bl	800336e <LL_ADC_REG_IsConversionOngoing>
 80042f8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff f847 	bl	8003394 <LL_ADC_INJ_IsConversionOngoing>
 8004306:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800430a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 81df 	bne.w	80046d2 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 81da 	bne.w	80046d2 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	461a      	mov	r2, r3
 800432c:	f7fe fef2 	bl	8003114 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	089b      	lsrs	r3, r3, #2
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d046      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6919      	ldr	r1, [r3, #16]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004362:	f7fe fd2d 	bl	8002dc0 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6919      	ldr	r1, [r3, #16]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	461a      	mov	r2, r3
 8004374:	f7fe fd5b 	bl	8002e2e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	7e9b      	ldrb	r3, [r3, #26]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d11e      	bne.n	80043be <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x17e>
 8004390:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004394:	e000      	b.n	8004398 <HAL_ADC_ConfigChannel+0x180>
 8004396:	2300      	movs	r3, #0
 8004398:	461a      	mov	r2, r3
 800439a:	f7fe fd7e 	bl	8002e9a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x19c>
 80043ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80043b2:	e000      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x19e>
 80043b4:	2300      	movs	r3, #0
 80043b6:	461a      	mov	r2, r3
 80043b8:	f7fe fd54 	bl	8002e64 <LL_ADC_SetOffsetSignedSaturation>
 80043bc:	e189      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2200      	movs	r2, #0
 80043c8:	4619      	mov	r1, r3
 80043ca:	f7fe fd66 	bl	8002e9a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2200      	movs	r2, #0
 80043d8:	4619      	mov	r1, r3
 80043da:	f7fe fd43 	bl	8002e64 <LL_ADC_SetOffsetSignedSaturation>
 80043de:	e178      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2100      	movs	r1, #0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fd0b 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <HAL_ADC_ConfigChannel+0x1f4>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe fd00 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 8004402:	4603      	mov	r3, r0
 8004404:	0e9b      	lsrs	r3, r3, #26
 8004406:	f003 021f 	and.w	r2, r3, #31
 800440a:	e01e      	b.n	800444a <HAL_ADC_ConfigChannel+0x232>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fcf5 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 8004418:	4603      	mov	r3, r0
 800441a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800442a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800442e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004432:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800443a:	2320      	movs	r3, #32
 800443c:	e004      	b.n	8004448 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800443e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x24a>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	0e9b      	lsrs	r3, r3, #26
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	e018      	b.n	8004494 <HAL_ADC_ConfigChannel+0x27c>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004476:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800447a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800447e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004486:	2320      	movs	r3, #32
 8004488:	e004      	b.n	8004494 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800448a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800448e:	fab3 f383 	clz	r3, r3
 8004492:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004494:	429a      	cmp	r2, r3
 8004496:	d107      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2300      	movs	r3, #0
 80044a2:	2100      	movs	r1, #0
 80044a4:	f7fe fc8c 	bl	8002dc0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe fca7 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10c      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x2c0>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2101      	movs	r1, #1
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe fc9c 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 80044ca:	4603      	mov	r3, r0
 80044cc:	0e9b      	lsrs	r3, r3, #26
 80044ce:	f003 021f 	and.w	r2, r3, #31
 80044d2:	e020      	b.n	8004516 <HAL_ADC_ConfigChannel+0x2fe>
 80044d4:	46021000 	.word	0x46021000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fc8f 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80044f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80044fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8004506:	2320      	movs	r3, #32
 8004508:	e004      	b.n	8004514 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800450a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <HAL_ADC_ConfigChannel+0x316>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	0e9b      	lsrs	r3, r3, #26
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	e018      	b.n	8004560 <HAL_ADC_ConfigChannel+0x348>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004542:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004546:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800454a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004552:	2320      	movs	r3, #32
 8004554:	e004      	b.n	8004560 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800455a:	fab3 f383 	clz	r3, r3
 800455e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004560:	429a      	cmp	r2, r3
 8004562:	d107      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2300      	movs	r3, #0
 800456e:	2101      	movs	r1, #1
 8004570:	f7fe fc26 	bl	8002dc0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2102      	movs	r1, #2
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe fc41 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 8004580:	4603      	mov	r3, r0
 8004582:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x388>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2102      	movs	r1, #2
 8004590:	4618      	mov	r0, r3
 8004592:	f7fe fc36 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 8004596:	4603      	mov	r3, r0
 8004598:	0e9b      	lsrs	r3, r3, #26
 800459a:	f003 021f 	and.w	r2, r3, #31
 800459e:	e01a      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x3be>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2102      	movs	r1, #2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fc2b 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 80045ac:	4603      	mov	r3, r0
 80045ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80045b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80045be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80045c6:	2320      	movs	r3, #32
 80045c8:	e004      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80045ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045ce:	fab3 f383 	clz	r3, r3
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d105      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x3d6>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	0e9b      	lsrs	r3, r3, #26
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	e011      	b.n	8004612 <HAL_ADC_ConfigChannel+0x3fa>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80045fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045fe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004600:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004606:	2320      	movs	r3, #32
 8004608:	e003      	b.n	8004612 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800460a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800460c:	fab3 f383 	clz	r3, r3
 8004610:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004612:	429a      	cmp	r2, r3
 8004614:	d107      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	2300      	movs	r3, #0
 8004620:	2102      	movs	r1, #2
 8004622:	f7fe fbcd 	bl	8002dc0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2103      	movs	r1, #3
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fbe8 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 8004632:	4603      	mov	r3, r0
 8004634:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x43a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2103      	movs	r1, #3
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fbdd 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 8004648:	4603      	mov	r3, r0
 800464a:	0e9b      	lsrs	r3, r3, #26
 800464c:	f003 021f 	and.w	r2, r3, #31
 8004650:	e017      	b.n	8004682 <HAL_ADC_ConfigChannel+0x46a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2103      	movs	r1, #3
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe fbd2 	bl	8002e02 <LL_ADC_GetOffsetChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800466a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800466c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800466e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004674:	2320      	movs	r3, #32
 8004676:	e003      	b.n	8004680 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d105      	bne.n	800469a <HAL_ADC_ConfigChannel+0x482>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	0e9b      	lsrs	r3, r3, #26
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	e011      	b.n	80046be <HAL_ADC_ConfigChannel+0x4a6>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80046a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80046ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80046b2:	2320      	movs	r3, #32
 80046b4:	e003      	b.n	80046be <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80046b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046b8:	fab3 f383 	clz	r3, r3
 80046bc:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046be:	429a      	cmp	r2, r3
 80046c0:	d107      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	2300      	movs	r3, #0
 80046cc:	2103      	movs	r1, #3
 80046ce:	f7fe fb77 	bl	8002dc0 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fe22 	bl	8003320 <LL_ADC_IsEnabled>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 83ad 	bne.w	8004e3e <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	461a      	mov	r2, r3
 80046f2:	f7fe fd73 	bl	80031dc <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046fe:	f040 80d6 	bne.w	80048ae <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x50e>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	0e9b      	lsrs	r3, r3, #26
 8004714:	3301      	adds	r3, #1
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2b09      	cmp	r3, #9
 800471c:	bf94      	ite	ls
 800471e:	2301      	movls	r3, #1
 8004720:	2300      	movhi	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	e019      	b.n	800475a <HAL_ADC_ConfigChannel+0x542>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004736:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800473e:	2320      	movs	r3, #32
 8004740:	e003      	b.n	800474a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004744:	fab3 f383 	clz	r3, r3
 8004748:	b2db      	uxtb	r3, r3
 800474a:	3301      	adds	r3, #1
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2b09      	cmp	r3, #9
 8004752:	bf94      	ite	ls
 8004754:	2301      	movls	r3, #1
 8004756:	2300      	movhi	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d04d      	beq.n	80047fa <HAL_ADC_ConfigChannel+0x5e2>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d107      	bne.n	800477a <HAL_ADC_ConfigChannel+0x562>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	0e9b      	lsrs	r3, r3, #26
 8004770:	3301      	adds	r3, #1
 8004772:	069b      	lsls	r3, r3, #26
 8004774:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004778:	e015      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x58e>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800478c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004792:	2320      	movs	r3, #32
 8004794:	e003      	b.n	800479e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004798:	fab3 f383 	clz	r3, r3
 800479c:	b2db      	uxtb	r3, r3
 800479e:	3301      	adds	r3, #1
 80047a0:	069b      	lsls	r3, r3, #26
 80047a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x5ae>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	0e9b      	lsrs	r3, r3, #26
 80047b8:	3301      	adds	r3, #1
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	2101      	movs	r1, #1
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	e017      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x5de>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80047d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80047d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80047de:	2320      	movs	r3, #32
 80047e0:	e003      	b.n	80047ea <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80047e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	4313      	orrs	r3, r2
 80047f8:	e04e      	b.n	8004898 <HAL_ADC_ConfigChannel+0x680>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d107      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x5fe>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	0e9b      	lsrs	r3, r3, #26
 800480c:	3301      	adds	r3, #1
 800480e:	069b      	lsls	r3, r3, #26
 8004810:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004814:	e015      	b.n	8004842 <HAL_ADC_ConfigChannel+0x62a>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800482e:	2320      	movs	r3, #32
 8004830:	e003      	b.n	800483a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004834:	fab3 f383 	clz	r3, r3
 8004838:	b2db      	uxtb	r3, r3
 800483a:	3301      	adds	r3, #1
 800483c:	069b      	lsls	r3, r3, #26
 800483e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x64a>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	0e9b      	lsrs	r3, r3, #26
 8004854:	3301      	adds	r3, #1
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	e017      	b.n	8004892 <HAL_ADC_ConfigChannel+0x67a>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	61bb      	str	r3, [r7, #24]
  return result;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 800487a:	2320      	movs	r3, #32
 800487c:	e003      	b.n	8004886 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	3301      	adds	r3, #1
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	2101      	movs	r1, #1
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	4313      	orrs	r3, r2
 8004894:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004898:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	461a      	mov	r2, r3
 80048a6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80048aa:	f7fe fc33 	bl	8003114 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f280 82c3 	bge.w	8004e3e <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a92      	ldr	r2, [pc, #584]	@ (8004b08 <HAL_ADC_ConfigChannel+0x8f0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_ADC_ConfigChannel+0x6b4>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a91      	ldr	r2, [pc, #580]	@ (8004b0c <HAL_ADC_ConfigChannel+0x8f4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d101      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x6b8>
 80048cc:	4b90      	ldr	r3, [pc, #576]	@ (8004b10 <HAL_ADC_ConfigChannel+0x8f8>)
 80048ce:	e000      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x6ba>
 80048d0:	4b90      	ldr	r3, [pc, #576]	@ (8004b14 <HAL_ADC_ConfigChannel+0x8fc>)
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fa46 	bl	8002d64 <LL_ADC_GetCommonPathInternalCh>
 80048d8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a89      	ldr	r2, [pc, #548]	@ (8004b08 <HAL_ADC_ConfigChannel+0x8f0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x6d8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a88      	ldr	r2, [pc, #544]	@ (8004b0c <HAL_ADC_ConfigChannel+0x8f4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10e      	bne.n	800490e <HAL_ADC_ConfigChannel+0x6f6>
 80048f0:	4885      	ldr	r0, [pc, #532]	@ (8004b08 <HAL_ADC_ConfigChannel+0x8f0>)
 80048f2:	f7fe fd15 	bl	8003320 <LL_ADC_IsEnabled>
 80048f6:	4604      	mov	r4, r0
 80048f8:	4884      	ldr	r0, [pc, #528]	@ (8004b0c <HAL_ADC_ConfigChannel+0x8f4>)
 80048fa:	f7fe fd11 	bl	8003320 <LL_ADC_IsEnabled>
 80048fe:	4603      	mov	r3, r0
 8004900:	4323      	orrs	r3, r4
 8004902:	2b00      	cmp	r3, #0
 8004904:	bf0c      	ite	eq
 8004906:	2301      	moveq	r3, #1
 8004908:	2300      	movne	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	e008      	b.n	8004920 <HAL_ADC_ConfigChannel+0x708>
 800490e:	4882      	ldr	r0, [pc, #520]	@ (8004b18 <HAL_ADC_ConfigChannel+0x900>)
 8004910:	f7fe fd06 	bl	8003320 <LL_ADC_IsEnabled>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80a6 	beq.w	8004a72 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b1c <HAL_ADC_ConfigChannel+0x904>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d13c      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004930:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d136      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a71      	ldr	r2, [pc, #452]	@ (8004b08 <HAL_ADC_ConfigChannel+0x8f0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00a      	beq.n	800495c <HAL_ADC_ConfigChannel+0x744>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a70      	ldr	r2, [pc, #448]	@ (8004b0c <HAL_ADC_ConfigChannel+0x8f4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d005      	beq.n	800495c <HAL_ADC_ConfigChannel+0x744>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a70      	ldr	r2, [pc, #448]	@ (8004b18 <HAL_ADC_ConfigChannel+0x900>)
 8004956:	4293      	cmp	r3, r2
 8004958:	f040 826e 	bne.w	8004e38 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a69      	ldr	r2, [pc, #420]	@ (8004b08 <HAL_ADC_ConfigChannel+0x8f0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d004      	beq.n	8004970 <HAL_ADC_ConfigChannel+0x758>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a68      	ldr	r2, [pc, #416]	@ (8004b0c <HAL_ADC_ConfigChannel+0x8f4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d101      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x75c>
 8004970:	4a67      	ldr	r2, [pc, #412]	@ (8004b10 <HAL_ADC_ConfigChannel+0x8f8>)
 8004972:	e000      	b.n	8004976 <HAL_ADC_ConfigChannel+0x75e>
 8004974:	4a67      	ldr	r2, [pc, #412]	@ (8004b14 <HAL_ADC_ConfigChannel+0x8fc>)
 8004976:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800497a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800497e:	4619      	mov	r1, r3
 8004980:	4610      	mov	r0, r2
 8004982:	f7fe f9dc 	bl	8002d3e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004986:	4b66      	ldr	r3, [pc, #408]	@ (8004b20 <HAL_ADC_ConfigChannel+0x908>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	099b      	lsrs	r3, r3, #6
 800498c:	4a65      	ldr	r2, [pc, #404]	@ (8004b24 <HAL_ADC_ConfigChannel+0x90c>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	099b      	lsrs	r3, r3, #6
 8004994:	3301      	adds	r3, #1
 8004996:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004998:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800499a:	e002      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	3b01      	subs	r3, #1
 80049a0:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f9      	bne.n	800499c <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049a8:	e246      	b.n	8004e38 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004b28 <HAL_ADC_ConfigChannel+0x910>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d12b      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d125      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a50      	ldr	r2, [pc, #320]	@ (8004b08 <HAL_ADC_ConfigChannel+0x8f0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00a      	beq.n	80049e0 <HAL_ADC_ConfigChannel+0x7c8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a4f      	ldr	r2, [pc, #316]	@ (8004b0c <HAL_ADC_ConfigChannel+0x8f4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d005      	beq.n	80049e0 <HAL_ADC_ConfigChannel+0x7c8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004b18 <HAL_ADC_ConfigChannel+0x900>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	f040 822e 	bne.w	8004e3c <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a48      	ldr	r2, [pc, #288]	@ (8004b08 <HAL_ADC_ConfigChannel+0x8f0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <HAL_ADC_ConfigChannel+0x7dc>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a47      	ldr	r2, [pc, #284]	@ (8004b0c <HAL_ADC_ConfigChannel+0x8f4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d101      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x7e0>
 80049f4:	4a46      	ldr	r2, [pc, #280]	@ (8004b10 <HAL_ADC_ConfigChannel+0x8f8>)
 80049f6:	e000      	b.n	80049fa <HAL_ADC_ConfigChannel+0x7e2>
 80049f8:	4a46      	ldr	r2, [pc, #280]	@ (8004b14 <HAL_ADC_ConfigChannel+0x8fc>)
 80049fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f7fe f99a 	bl	8002d3e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a0a:	e217      	b.n	8004e3c <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a46      	ldr	r2, [pc, #280]	@ (8004b2c <HAL_ADC_ConfigChannel+0x914>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	f040 8213 	bne.w	8004e3e <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f040 820c 	bne.w	8004e3e <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a37      	ldr	r2, [pc, #220]	@ (8004b08 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00a      	beq.n	8004a46 <HAL_ADC_ConfigChannel+0x82e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a35      	ldr	r2, [pc, #212]	@ (8004b0c <HAL_ADC_ConfigChannel+0x8f4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d005      	beq.n	8004a46 <HAL_ADC_ConfigChannel+0x82e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a36      	ldr	r2, [pc, #216]	@ (8004b18 <HAL_ADC_ConfigChannel+0x900>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	f040 81fc 	bne.w	8004e3e <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8004b08 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_ADC_ConfigChannel+0x842>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a2d      	ldr	r2, [pc, #180]	@ (8004b0c <HAL_ADC_ConfigChannel+0x8f4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d101      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x846>
 8004a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004b10 <HAL_ADC_ConfigChannel+0x8f8>)
 8004a5c:	e000      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x848>
 8004a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b14 <HAL_ADC_ConfigChannel+0x8fc>)
 8004a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f7fe f967 	bl	8002d3e <LL_ADC_SetCommonPathInternalCh>
 8004a70:	e1e5      	b.n	8004e3e <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a76:	f043 0220 	orr.w	r2, r3, #32
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004a84:	e1db      	b.n	8004e3e <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	f000 811b 	beq.w	8004cce <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aa0:	d004      	beq.n	8004aac <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004aa6:	4a22      	ldr	r2, [pc, #136]	@ (8004b30 <HAL_ADC_ConfigChannel+0x918>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d107      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe fac1 	bl	800303c <LL_ADC_REG_SetSequencerChAdd>
 8004aba:	e059      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	210f      	movs	r1, #15
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004ad8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x8d4>
 8004ae0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004ae4:	0e9b      	lsrs	r3, r3, #26
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	e027      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x924>
 8004aec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004af0:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	fa93 f3a3 	rbit	r3, r3
 8004af8:	60fb      	str	r3, [r7, #12]
  return result;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d117      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004b04:	2320      	movs	r3, #32
 8004b06:	e019      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x924>
 8004b08:	42028000 	.word	0x42028000
 8004b0c:	42028100 	.word	0x42028100
 8004b10:	42028300 	.word	0x42028300
 8004b14:	46021300 	.word	0x46021300
 8004b18:	46021000 	.word	0x46021000
 8004b1c:	ce080000 	.word	0xce080000
 8004b20:	20000020 	.word	0x20000020
 8004b24:	053e2d63 	.word	0x053e2d63
 8004b28:	ca040000 	.word	0xca040000
 8004b2c:	80000001 	.word	0x80000001
 8004b30:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	6839      	ldr	r1, [r7, #0]
 8004b3e:	6849      	ldr	r1, [r1, #4]
 8004b40:	f001 011f 	and.w	r1, r1, #31
 8004b44:	408b      	lsls	r3, r1
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d808      	bhi.n	8004b70 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f7fe fa06 	bl	8002f7c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004b7e:	f7fe fac9 	bl	8003114 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f280 8159 	bge.w	8004e3e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a9b      	ldr	r2, [pc, #620]	@ (8004e00 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_ADC_ConfigChannel+0x988>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a9a      	ldr	r2, [pc, #616]	@ (8004e04 <HAL_ADC_ConfigChannel+0xbec>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x98c>
 8004ba0:	4b99      	ldr	r3, [pc, #612]	@ (8004e08 <HAL_ADC_ConfigChannel+0xbf0>)
 8004ba2:	e000      	b.n	8004ba6 <HAL_ADC_ConfigChannel+0x98e>
 8004ba4:	4b99      	ldr	r3, [pc, #612]	@ (8004e0c <HAL_ADC_ConfigChannel+0xbf4>)
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe f8dc 	bl	8002d64 <LL_ADC_GetCommonPathInternalCh>
 8004bac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a96      	ldr	r2, [pc, #600]	@ (8004e10 <HAL_ADC_ConfigChannel+0xbf8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d12b      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d125      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a8d      	ldr	r2, [pc, #564]	@ (8004e00 <HAL_ADC_ConfigChannel+0xbe8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_ADC_ConfigChannel+0x9c2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a8b      	ldr	r2, [pc, #556]	@ (8004e04 <HAL_ADC_ConfigChannel+0xbec>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d101      	bne.n	8004bde <HAL_ADC_ConfigChannel+0x9c6>
 8004bda:	4a8b      	ldr	r2, [pc, #556]	@ (8004e08 <HAL_ADC_ConfigChannel+0xbf0>)
 8004bdc:	e000      	b.n	8004be0 <HAL_ADC_ConfigChannel+0x9c8>
 8004bde:	4a8b      	ldr	r2, [pc, #556]	@ (8004e0c <HAL_ADC_ConfigChannel+0xbf4>)
 8004be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004be4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f7fe f8a7 	bl	8002d3e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004bf0:	4b88      	ldr	r3, [pc, #544]	@ (8004e14 <HAL_ADC_ConfigChannel+0xbfc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	099b      	lsrs	r3, r3, #6
 8004bf6:	4a88      	ldr	r2, [pc, #544]	@ (8004e18 <HAL_ADC_ConfigChannel+0xc00>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	099b      	lsrs	r3, r3, #6
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004c02:	e002      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f9      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004c10:	e045      	b.n	8004c9e <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a81      	ldr	r2, [pc, #516]	@ (8004e1c <HAL_ADC_ConfigChannel+0xc04>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d11b      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d115      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a74      	ldr	r2, [pc, #464]	@ (8004e00 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d004      	beq.n	8004c3c <HAL_ADC_ConfigChannel+0xa24>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a73      	ldr	r2, [pc, #460]	@ (8004e04 <HAL_ADC_ConfigChannel+0xbec>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d101      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0xa28>
 8004c3c:	4a72      	ldr	r2, [pc, #456]	@ (8004e08 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c3e:	e000      	b.n	8004c42 <HAL_ADC_ConfigChannel+0xa2a>
 8004c40:	4a72      	ldr	r2, [pc, #456]	@ (8004e0c <HAL_ADC_ConfigChannel+0xbf4>)
 8004c42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7fe f876 	bl	8002d3e <LL_ADC_SetCommonPathInternalCh>
 8004c52:	e024      	b.n	8004c9e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a71      	ldr	r2, [pc, #452]	@ (8004e20 <HAL_ADC_ConfigChannel+0xc08>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d11f      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d115      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a64      	ldr	r2, [pc, #400]	@ (8004e00 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d004      	beq.n	8004c7e <HAL_ADC_ConfigChannel+0xa66>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a62      	ldr	r2, [pc, #392]	@ (8004e04 <HAL_ADC_ConfigChannel+0xbec>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d101      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0xa6a>
 8004c7e:	4a62      	ldr	r2, [pc, #392]	@ (8004e08 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c80:	e000      	b.n	8004c84 <HAL_ADC_ConfigChannel+0xa6c>
 8004c82:	4a62      	ldr	r2, [pc, #392]	@ (8004e0c <HAL_ADC_ConfigChannel+0xbf4>)
 8004c84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f7fe f855 	bl	8002d3e <LL_ADC_SetCommonPathInternalCh>
 8004c94:	e003      	b.n	8004c9e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a62      	ldr	r2, [pc, #392]	@ (8004e24 <HAL_ADC_ConfigChannel+0xc0c>)
 8004c9c:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a61      	ldr	r2, [pc, #388]	@ (8004e28 <HAL_ADC_ConfigChannel+0xc10>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	f040 80ca 	bne.w	8004e3e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004caa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f040 80c3 	bne.w	8004e3e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004ccc:	e0b7      	b.n	8004e3e <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cd6:	d004      	beq.n	8004ce2 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004cdc:	4a53      	ldr	r2, [pc, #332]	@ (8004e2c <HAL_ADC_ConfigChannel+0xc14>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d106      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe f9d9 	bl	80030a2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f280 80a2 	bge.w	8004e3e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a40      	ldr	r2, [pc, #256]	@ (8004e00 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d004      	beq.n	8004d0e <HAL_ADC_ConfigChannel+0xaf6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a3e      	ldr	r2, [pc, #248]	@ (8004e04 <HAL_ADC_ConfigChannel+0xbec>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d101      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0xafa>
 8004d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e08 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d10:	e000      	b.n	8004d14 <HAL_ADC_ConfigChannel+0xafc>
 8004d12:	4b3e      	ldr	r3, [pc, #248]	@ (8004e0c <HAL_ADC_ConfigChannel+0xbf4>)
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe f825 	bl	8002d64 <LL_ADC_GetCommonPathInternalCh>
 8004d1a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a43      	ldr	r2, [pc, #268]	@ (8004e30 <HAL_ADC_ConfigChannel+0xc18>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d115      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a34      	ldr	r2, [pc, #208]	@ (8004e00 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_ADC_ConfigChannel+0xb24>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a33      	ldr	r2, [pc, #204]	@ (8004e04 <HAL_ADC_ConfigChannel+0xbec>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d101      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0xb28>
 8004d3c:	4a32      	ldr	r2, [pc, #200]	@ (8004e08 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d3e:	e000      	b.n	8004d42 <HAL_ADC_ConfigChannel+0xb2a>
 8004d40:	4a32      	ldr	r2, [pc, #200]	@ (8004e0c <HAL_ADC_ConfigChannel+0xbf4>)
 8004d42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d46:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f7fd fff6 	bl	8002d3e <LL_ADC_SetCommonPathInternalCh>
 8004d52:	e034      	b.n	8004dbe <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a36      	ldr	r2, [pc, #216]	@ (8004e34 <HAL_ADC_ConfigChannel+0xc1c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d115      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a27      	ldr	r2, [pc, #156]	@ (8004e00 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <HAL_ADC_ConfigChannel+0xb5a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a25      	ldr	r2, [pc, #148]	@ (8004e04 <HAL_ADC_ConfigChannel+0xbec>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0xb5e>
 8004d72:	4a25      	ldr	r2, [pc, #148]	@ (8004e08 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d74:	e000      	b.n	8004d78 <HAL_ADC_ConfigChannel+0xb60>
 8004d76:	4a25      	ldr	r2, [pc, #148]	@ (8004e0c <HAL_ADC_ConfigChannel+0xbf4>)
 8004d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f7fd ffdb 	bl	8002d3e <LL_ADC_SetCommonPathInternalCh>
 8004d88:	e019      	b.n	8004dbe <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a24      	ldr	r2, [pc, #144]	@ (8004e20 <HAL_ADC_ConfigChannel+0xc08>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d114      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a19      	ldr	r2, [pc, #100]	@ (8004e00 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <HAL_ADC_ConfigChannel+0xb90>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a18      	ldr	r2, [pc, #96]	@ (8004e04 <HAL_ADC_ConfigChannel+0xbec>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d101      	bne.n	8004dac <HAL_ADC_ConfigChannel+0xb94>
 8004da8:	4a17      	ldr	r2, [pc, #92]	@ (8004e08 <HAL_ADC_ConfigChannel+0xbf0>)
 8004daa:	e000      	b.n	8004dae <HAL_ADC_ConfigChannel+0xb96>
 8004dac:	4a17      	ldr	r2, [pc, #92]	@ (8004e0c <HAL_ADC_ConfigChannel+0xbf4>)
 8004dae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f7fd ffc0 	bl	8002d3e <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a19      	ldr	r2, [pc, #100]	@ (8004e28 <HAL_ADC_ConfigChannel+0xc10>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d13a      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d134      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004de8:	e029      	b.n	8004e3e <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004dfc:	e01f      	b.n	8004e3e <HAL_ADC_ConfigChannel+0xc26>
 8004dfe:	bf00      	nop
 8004e00:	42028000 	.word	0x42028000
 8004e04:	42028100 	.word	0x42028100
 8004e08:	42028300 	.word	0x42028300
 8004e0c:	46021300 	.word	0x46021300
 8004e10:	b6002000 	.word	0xb6002000
 8004e14:	20000020 	.word	0x20000020
 8004e18:	053e2d63 	.word	0x053e2d63
 8004e1c:	ba004000 	.word	0xba004000
 8004e20:	80000001 	.word	0x80000001
 8004e24:	b2001000 	.word	0xb2001000
 8004e28:	d7200000 	.word	0xd7200000
 8004e2c:	80000010 	.word	0x80000010
 8004e30:	ce080000 	.word	0xce080000
 8004e34:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e38:	bf00      	nop
 8004e3a:	e000      	b.n	8004e3e <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e3c:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004e46:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	37dc      	adds	r7, #220	@ 0xdc
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd90      	pop	{r4, r7, pc}
 8004e52:	bf00      	nop

08004e54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fe fa5d 	bl	8003320 <LL_ADC_IsEnabled>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d17b      	bne.n	8004f64 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	4b3f      	ldr	r3, [pc, #252]	@ (8004f70 <ADC_Enable+0x11c>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e7e:	f043 0210 	orr.w	r2, r3, #16
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e8a:	f043 0201 	orr.w	r2, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e067      	b.n	8004f66 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe fa28 	bl	80032f8 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <ADC_Enable+0x66>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2f      	ldr	r2, [pc, #188]	@ (8004f74 <ADC_Enable+0x120>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d054      	beq.n	8004f64 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004eba:	f7fd fed5 	bl	8002c68 <HAL_GetTick>
 8004ebe:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f78 <ADC_Enable+0x124>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d004      	beq.n	8004ed4 <ADC_Enable+0x80>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2b      	ldr	r2, [pc, #172]	@ (8004f7c <ADC_Enable+0x128>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d101      	bne.n	8004ed8 <ADC_Enable+0x84>
 8004ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8004f80 <ADC_Enable+0x12c>)
 8004ed6:	e000      	b.n	8004eda <ADC_Enable+0x86>
 8004ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f84 <ADC_Enable+0x130>)
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe f9a2 	bl	8003224 <LL_ADC_GetMultimode>
 8004ee0:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a25      	ldr	r2, [pc, #148]	@ (8004f7c <ADC_Enable+0x128>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d002      	beq.n	8004ef2 <ADC_Enable+0x9e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	e000      	b.n	8004ef4 <ADC_Enable+0xa0>
 8004ef2:	4b21      	ldr	r3, [pc, #132]	@ (8004f78 <ADC_Enable+0x124>)
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d02c      	beq.n	8004f56 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d130      	bne.n	8004f64 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f02:	e028      	b.n	8004f56 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fe fa09 	bl	8003320 <LL_ADC_IsEnabled>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fe f9ed 	bl	80032f8 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f1e:	f7fd fea3 	bl	8002c68 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d914      	bls.n	8004f56 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d00d      	beq.n	8004f56 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f3e:	f043 0210 	orr.w	r2, r3, #16
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f4a:	f043 0201 	orr.w	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e007      	b.n	8004f66 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d1cf      	bne.n	8004f04 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	8000003f 	.word	0x8000003f
 8004f74:	46021000 	.word	0x46021000
 8004f78:	42028000 	.word	0x42028000
 8004f7c:	42028100 	.word	0x42028100
 8004f80:	42028300 	.word	0x42028300
 8004f84:	46021300 	.word	0x46021300

08004f88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f9a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d14b      	bne.n	800503a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fa6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d021      	beq.n	8005000 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fd ffc7 	bl	8002f54 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d032      	beq.n	8005032 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d12b      	bne.n	8005032 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fde:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d11f      	bne.n	8005032 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ff6:	f043 0201 	orr.w	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	679a      	str	r2, [r3, #120]	@ 0x78
 8004ffe:	e018      	b.n	8005032 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d111      	bne.n	8005032 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005012:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800501e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d105      	bne.n	8005032 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800502a:	f043 0201 	orr.w	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff f8aa 	bl	800418c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005038:	e00e      	b.n	8005058 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff f8be 	bl	80041c8 <HAL_ADC_ErrorCallback>
}
 800504c:	e004      	b.n	8005058 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff f896 	bl	80041a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005088:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800508e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800509a:	f043 0204 	orr.w	r2, r3, #4
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff f890 	bl	80041c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005110:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <__NVIC_SetPriorityGrouping+0x44>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800511c:	4013      	ands	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800512c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005132:	4a04      	ldr	r2, [pc, #16]	@ (8005144 <__NVIC_SetPriorityGrouping+0x44>)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	60d3      	str	r3, [r2, #12]
}
 8005138:	bf00      	nop
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	e000ed00 	.word	0xe000ed00

08005148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800514c:	4b04      	ldr	r3, [pc, #16]	@ (8005160 <__NVIC_GetPriorityGrouping+0x18>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	0a1b      	lsrs	r3, r3, #8
 8005152:	f003 0307 	and.w	r3, r3, #7
}
 8005156:	4618      	mov	r0, r3
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	e000ed00 	.word	0xe000ed00

08005164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800516e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005172:	2b00      	cmp	r3, #0
 8005174:	db0b      	blt.n	800518e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	f003 021f 	and.w	r2, r3, #31
 800517c:	4907      	ldr	r1, [pc, #28]	@ (800519c <__NVIC_EnableIRQ+0x38>)
 800517e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	2001      	movs	r0, #1
 8005186:	fa00 f202 	lsl.w	r2, r0, r2
 800518a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	e000e100 	.word	0xe000e100

080051a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	6039      	str	r1, [r7, #0]
 80051aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	db0a      	blt.n	80051ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	490c      	ldr	r1, [pc, #48]	@ (80051ec <__NVIC_SetPriority+0x4c>)
 80051ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051be:	0112      	lsls	r2, r2, #4
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	440b      	add	r3, r1
 80051c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051c8:	e00a      	b.n	80051e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	4908      	ldr	r1, [pc, #32]	@ (80051f0 <__NVIC_SetPriority+0x50>)
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	3b04      	subs	r3, #4
 80051d8:	0112      	lsls	r2, r2, #4
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	440b      	add	r3, r1
 80051de:	761a      	strb	r2, [r3, #24]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	e000e100 	.word	0xe000e100
 80051f0:	e000ed00 	.word	0xe000ed00

080051f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b089      	sub	sp, #36	@ 0x24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f1c3 0307 	rsb	r3, r3, #7
 800520e:	2b04      	cmp	r3, #4
 8005210:	bf28      	it	cs
 8005212:	2304      	movcs	r3, #4
 8005214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3304      	adds	r3, #4
 800521a:	2b06      	cmp	r3, #6
 800521c:	d902      	bls.n	8005224 <NVIC_EncodePriority+0x30>
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	3b03      	subs	r3, #3
 8005222:	e000      	b.n	8005226 <NVIC_EncodePriority+0x32>
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005228:	f04f 32ff 	mov.w	r2, #4294967295
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43da      	mvns	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	401a      	ands	r2, r3
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800523c:	f04f 31ff 	mov.w	r1, #4294967295
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	43d9      	mvns	r1, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800524c:	4313      	orrs	r3, r2
         );
}
 800524e:	4618      	mov	r0, r3
 8005250:	3724      	adds	r7, #36	@ 0x24
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff ff4c 	bl	8005100 <__NVIC_SetPriorityGrouping>
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800527e:	f7ff ff63 	bl	8005148 <__NVIC_GetPriorityGrouping>
 8005282:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	6978      	ldr	r0, [r7, #20]
 800528a:	f7ff ffb3 	bl	80051f4 <NVIC_EncodePriority>
 800528e:	4602      	mov	r2, r0
 8005290:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005294:	4611      	mov	r1, r2
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff ff82 	bl	80051a0 <__NVIC_SetPriority>
}
 800529c:	bf00      	nop
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff ff56 	bl	8005164 <__NVIC_EnableIRQ>
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052d0:	d301      	bcc.n	80052d6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80052d2:	2301      	movs	r3, #1
 80052d4:	e00d      	b.n	80052f2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80052d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005300 <HAL_SYSTICK_Config+0x40>)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3b01      	subs	r3, #1
 80052dc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80052de:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <HAL_SYSTICK_Config+0x40>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80052e4:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <HAL_SYSTICK_Config+0x40>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a05      	ldr	r2, [pc, #20]	@ (8005300 <HAL_SYSTICK_Config+0x40>)
 80052ea:	f043 0303 	orr.w	r3, r3, #3
 80052ee:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	e000e010 	.word	0xe000e010

08005304 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b04      	cmp	r3, #4
 8005310:	d844      	bhi.n	800539c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005312:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	0800533b 	.word	0x0800533b
 800531c:	08005359 	.word	0x08005359
 8005320:	0800537b 	.word	0x0800537b
 8005324:	0800539d 	.word	0x0800539d
 8005328:	0800532d 	.word	0x0800532d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800532c:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1e      	ldr	r2, [pc, #120]	@ (80053ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	6013      	str	r3, [r2, #0]
      break;
 8005338:	e031      	b.n	800539e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800533a:	4b1c      	ldr	r3, [pc, #112]	@ (80053ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1b      	ldr	r2, [pc, #108]	@ (80053ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005346:	4b1a      	ldr	r3, [pc, #104]	@ (80053b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800534c:	4a18      	ldr	r2, [pc, #96]	@ (80053b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800534e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005356:	e022      	b.n	800539e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005358:	4b14      	ldr	r3, [pc, #80]	@ (80053ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a13      	ldr	r2, [pc, #76]	@ (80053ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800535e:	f023 0304 	bic.w	r3, r3, #4
 8005362:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005364:	4b12      	ldr	r3, [pc, #72]	@ (80053b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800536a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800536e:	4a10      	ldr	r2, [pc, #64]	@ (80053b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005370:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005374:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005378:	e011      	b.n	800539e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800537a:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a0b      	ldr	r2, [pc, #44]	@ (80053ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005386:	4b0a      	ldr	r3, [pc, #40]	@ (80053b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800538c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005390:	4a07      	ldr	r2, [pc, #28]	@ (80053b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005392:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005396:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800539a:	e000      	b.n	800539e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800539c:	bf00      	nop
  }
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	e000e010 	.word	0xe000e010
 80053b0:	46020c00 	.word	0x46020c00

080053b4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80053ba:	4b19      	ldr	r3, [pc, #100]	@ (8005420 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80053c6:	2304      	movs	r3, #4
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	e021      	b.n	8005410 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80053cc:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80053ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053d2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80053d6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053de:	d011      	beq.n	8005404 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053e6:	d810      	bhi.n	800540a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053f4:	d003      	beq.n	80053fe <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80053f6:	e008      	b.n	800540a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80053f8:	2300      	movs	r3, #0
 80053fa:	607b      	str	r3, [r7, #4]
        break;
 80053fc:	e008      	b.n	8005410 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80053fe:	2301      	movs	r3, #1
 8005400:	607b      	str	r3, [r7, #4]
        break;
 8005402:	e005      	b.n	8005410 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005404:	2302      	movs	r3, #2
 8005406:	607b      	str	r3, [r7, #4]
        break;
 8005408:	e002      	b.n	8005410 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
        break;
 800540e:	bf00      	nop
    }
  }
  return systick_source;
 8005410:	687b      	ldr	r3, [r7, #4]
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	e000e010 	.word	0xe000e010
 8005424:	46020c00 	.word	0x46020c00

08005428 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005430:	f7fd fc1a 	bl	8002c68 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0db      	b.n	80055f8 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a6e      	ldr	r2, [pc, #440]	@ (8005600 <HAL_DMA_Init+0x1d8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	f000 809f 	beq.w	800558a <HAL_DMA_Init+0x162>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a6c      	ldr	r2, [pc, #432]	@ (8005604 <HAL_DMA_Init+0x1dc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	f000 8099 	beq.w	800558a <HAL_DMA_Init+0x162>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a6a      	ldr	r2, [pc, #424]	@ (8005608 <HAL_DMA_Init+0x1e0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	f000 8093 	beq.w	800558a <HAL_DMA_Init+0x162>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a68      	ldr	r2, [pc, #416]	@ (800560c <HAL_DMA_Init+0x1e4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	f000 808d 	beq.w	800558a <HAL_DMA_Init+0x162>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a66      	ldr	r2, [pc, #408]	@ (8005610 <HAL_DMA_Init+0x1e8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	f000 8087 	beq.w	800558a <HAL_DMA_Init+0x162>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a64      	ldr	r2, [pc, #400]	@ (8005614 <HAL_DMA_Init+0x1ec>)
 8005482:	4293      	cmp	r3, r2
 8005484:	f000 8081 	beq.w	800558a <HAL_DMA_Init+0x162>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a62      	ldr	r2, [pc, #392]	@ (8005618 <HAL_DMA_Init+0x1f0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d07b      	beq.n	800558a <HAL_DMA_Init+0x162>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a61      	ldr	r2, [pc, #388]	@ (800561c <HAL_DMA_Init+0x1f4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d076      	beq.n	800558a <HAL_DMA_Init+0x162>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a5f      	ldr	r2, [pc, #380]	@ (8005620 <HAL_DMA_Init+0x1f8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d071      	beq.n	800558a <HAL_DMA_Init+0x162>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005624 <HAL_DMA_Init+0x1fc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d06c      	beq.n	800558a <HAL_DMA_Init+0x162>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a5c      	ldr	r2, [pc, #368]	@ (8005628 <HAL_DMA_Init+0x200>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d067      	beq.n	800558a <HAL_DMA_Init+0x162>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5b      	ldr	r2, [pc, #364]	@ (800562c <HAL_DMA_Init+0x204>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d062      	beq.n	800558a <HAL_DMA_Init+0x162>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a59      	ldr	r2, [pc, #356]	@ (8005630 <HAL_DMA_Init+0x208>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d05d      	beq.n	800558a <HAL_DMA_Init+0x162>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a58      	ldr	r2, [pc, #352]	@ (8005634 <HAL_DMA_Init+0x20c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d058      	beq.n	800558a <HAL_DMA_Init+0x162>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a56      	ldr	r2, [pc, #344]	@ (8005638 <HAL_DMA_Init+0x210>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d053      	beq.n	800558a <HAL_DMA_Init+0x162>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a55      	ldr	r2, [pc, #340]	@ (800563c <HAL_DMA_Init+0x214>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d04e      	beq.n	800558a <HAL_DMA_Init+0x162>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a53      	ldr	r2, [pc, #332]	@ (8005640 <HAL_DMA_Init+0x218>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d049      	beq.n	800558a <HAL_DMA_Init+0x162>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a52      	ldr	r2, [pc, #328]	@ (8005644 <HAL_DMA_Init+0x21c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d044      	beq.n	800558a <HAL_DMA_Init+0x162>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a50      	ldr	r2, [pc, #320]	@ (8005648 <HAL_DMA_Init+0x220>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d03f      	beq.n	800558a <HAL_DMA_Init+0x162>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a4f      	ldr	r2, [pc, #316]	@ (800564c <HAL_DMA_Init+0x224>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d03a      	beq.n	800558a <HAL_DMA_Init+0x162>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a4d      	ldr	r2, [pc, #308]	@ (8005650 <HAL_DMA_Init+0x228>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d035      	beq.n	800558a <HAL_DMA_Init+0x162>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a4c      	ldr	r2, [pc, #304]	@ (8005654 <HAL_DMA_Init+0x22c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d030      	beq.n	800558a <HAL_DMA_Init+0x162>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a4a      	ldr	r2, [pc, #296]	@ (8005658 <HAL_DMA_Init+0x230>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d02b      	beq.n	800558a <HAL_DMA_Init+0x162>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a49      	ldr	r2, [pc, #292]	@ (800565c <HAL_DMA_Init+0x234>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d026      	beq.n	800558a <HAL_DMA_Init+0x162>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a47      	ldr	r2, [pc, #284]	@ (8005660 <HAL_DMA_Init+0x238>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d021      	beq.n	800558a <HAL_DMA_Init+0x162>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a46      	ldr	r2, [pc, #280]	@ (8005664 <HAL_DMA_Init+0x23c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d01c      	beq.n	800558a <HAL_DMA_Init+0x162>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a44      	ldr	r2, [pc, #272]	@ (8005668 <HAL_DMA_Init+0x240>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d017      	beq.n	800558a <HAL_DMA_Init+0x162>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a43      	ldr	r2, [pc, #268]	@ (800566c <HAL_DMA_Init+0x244>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d012      	beq.n	800558a <HAL_DMA_Init+0x162>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a41      	ldr	r2, [pc, #260]	@ (8005670 <HAL_DMA_Init+0x248>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00d      	beq.n	800558a <HAL_DMA_Init+0x162>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a40      	ldr	r2, [pc, #256]	@ (8005674 <HAL_DMA_Init+0x24c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d008      	beq.n	800558a <HAL_DMA_Init+0x162>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a3e      	ldr	r2, [pc, #248]	@ (8005678 <HAL_DMA_Init+0x250>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <HAL_DMA_Init+0x162>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3d      	ldr	r2, [pc, #244]	@ (800567c <HAL_DMA_Init+0x254>)
 8005588:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0206 	orr.w	r2, r2, #6
 80055a8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80055aa:	e00f      	b.n	80055cc <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80055ac:	f7fd fb5c 	bl	8002c68 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d908      	bls.n	80055cc <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2210      	movs	r2, #16
 80055be:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2203      	movs	r2, #3
 80055c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e015      	b.n	80055f8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e8      	bne.n	80055ac <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fb26 	bl	8005c2c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40020050 	.word	0x40020050
 8005604:	50020050 	.word	0x50020050
 8005608:	400200d0 	.word	0x400200d0
 800560c:	500200d0 	.word	0x500200d0
 8005610:	40020150 	.word	0x40020150
 8005614:	50020150 	.word	0x50020150
 8005618:	400201d0 	.word	0x400201d0
 800561c:	500201d0 	.word	0x500201d0
 8005620:	40020250 	.word	0x40020250
 8005624:	50020250 	.word	0x50020250
 8005628:	400202d0 	.word	0x400202d0
 800562c:	500202d0 	.word	0x500202d0
 8005630:	40020350 	.word	0x40020350
 8005634:	50020350 	.word	0x50020350
 8005638:	400203d0 	.word	0x400203d0
 800563c:	500203d0 	.word	0x500203d0
 8005640:	40020450 	.word	0x40020450
 8005644:	50020450 	.word	0x50020450
 8005648:	400204d0 	.word	0x400204d0
 800564c:	500204d0 	.word	0x500204d0
 8005650:	40020550 	.word	0x40020550
 8005654:	50020550 	.word	0x50020550
 8005658:	400205d0 	.word	0x400205d0
 800565c:	500205d0 	.word	0x500205d0
 8005660:	40020650 	.word	0x40020650
 8005664:	50020650 	.word	0x50020650
 8005668:	400206d0 	.word	0x400206d0
 800566c:	500206d0 	.word	0x500206d0
 8005670:	40020750 	.word	0x40020750
 8005674:	50020750 	.word	0x50020750
 8005678:	400207d0 	.word	0x400207d0
 800567c:	500207d0 	.word	0x500207d0

08005680 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e04f      	b.n	8005738 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_DMA_Start_IT+0x26>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e048      	b.n	8005738 <HAL_DMA_Start_IT+0xb8>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d136      	bne.n	8005728 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fa86 	bl	8005be0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80056e2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695a      	ldr	r2, [r3, #20]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056fa:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695a      	ldr	r2, [r3, #20]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005712:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	e007      	b.n	8005738 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2240      	movs	r2, #64	@ 0x40
 800572c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005748:	f7fd fa8e 	bl	8002c68 <HAL_GetTick>
 800574c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e06b      	b.n	8005830 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d008      	beq.n	8005776 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e05c      	b.n	8005830 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0204 	orr.w	r2, r2, #4
 8005784:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2205      	movs	r2, #5
 800578a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800578e:	e020      	b.n	80057d2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005790:	f7fd fa6a 	bl	8002c68 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b05      	cmp	r3, #5
 800579c:	d919      	bls.n	80057d2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a2:	f043 0210 	orr.w	r2, r3, #16
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2203      	movs	r2, #3
 80057ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c2:	2201      	movs	r2, #1
 80057c4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e02e      	b.n	8005830 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0d7      	beq.n	8005790 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0202 	orr.w	r2, r2, #2
 80057ee:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2204      	movs	r2, #4
 80057f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005800:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581a:	2201      	movs	r2, #1
 800581c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e019      	b.n	800587e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d004      	beq.n	8005860 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e00e      	b.n	800587e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2204      	movs	r2, #4
 8005864:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005876:	f043 0304 	orr.w	r3, r3, #4
 800587a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b086      	sub	sp, #24
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800589a:	f023 030f 	bic.w	r3, r3, #15
 800589e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a8:	3b50      	subs	r3, #80	@ 0x50
 80058aa:	09db      	lsrs	r3, r3, #7
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	2201      	movs	r2, #1
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4013      	ands	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 813b 	beq.w	8005b40 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d011      	beq.n	80058fc <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058ee:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f4:	f043 0201 	orr.w	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005906:	2b00      	cmp	r3, #0
 8005908:	d011      	beq.n	800592e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005920:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005926:	f043 0202 	orr.w	r2, r3, #2
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d011      	beq.n	8005960 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005952:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005958:	f043 0204 	orr.w	r2, r3, #4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d011      	beq.n	8005992 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005984:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598a:	f043 0208 	orr.w	r2, r3, #8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800599c:	2b00      	cmp	r3, #0
 800599e:	d013      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059b6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d04c      	beq.n	8005a70 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d045      	beq.n	8005a70 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80059ec:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d12e      	bne.n	8005a58 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a08:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695a      	ldr	r2, [r3, #20]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0202 	orr.w	r2, r2, #2
 8005a18:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a32:	2201      	movs	r2, #1
 8005a34:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d07a      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
        }

        return;
 8005a56:	e075      	b.n	8005b44 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2205      	movs	r2, #5
 8005a5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d039      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d032      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d012      	beq.n	8005abe <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d116      	bne.n	8005ad0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d111      	bne.n	8005ad0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ab8:	2201      	movs	r2, #1
 8005aba:	731a      	strb	r2, [r3, #12]
 8005abc:	e008      	b.n	8005ad0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d103      	bne.n	8005ad0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005ad8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d025      	beq.n	8005b46 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0202 	orr.w	r2, r2, #2
 8005b08:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b22:	2201      	movs	r2, #1
 8005b24:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	4798      	blx	r3
 8005b3e:	e002      	b.n	8005b46 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005b40:	bf00      	nop
 8005b42:	e000      	b.n	8005b46 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005b44:	bf00      	nop
    }
  }
}
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b5a:	b2db      	uxtb	r3, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e02b      	b.n	8005bd4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005b84:	f023 030f 	bic.w	r3, r3, #15
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b92:	3b50      	subs	r3, #80	@ 0x50
 8005b94:	09db      	lsrs	r3, r3, #7
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d012      	beq.n	8005bd2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f003 0311 	and.w	r3, r3, #17
 8005bb2:	2b11      	cmp	r3, #17
 8005bb4:	d106      	bne.n	8005bc4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	e006      	b.n	8005bd2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	401a      	ands	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf4:	0c1b      	lsrs	r3, r3, #16
 8005bf6:	041b      	lsls	r3, r3, #16
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	b291      	uxth	r1, r2
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005c0c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c1e:	bf00      	nop
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a53      	ldr	r2, [pc, #332]	@ (8005db8 <DMA_Init+0x18c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	f000 80a0 	beq.w	8005db2 <DMA_Init+0x186>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a51      	ldr	r2, [pc, #324]	@ (8005dbc <DMA_Init+0x190>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	f000 809a 	beq.w	8005db2 <DMA_Init+0x186>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a4f      	ldr	r2, [pc, #316]	@ (8005dc0 <DMA_Init+0x194>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	f000 8094 	beq.w	8005db2 <DMA_Init+0x186>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a4d      	ldr	r2, [pc, #308]	@ (8005dc4 <DMA_Init+0x198>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	f000 808e 	beq.w	8005db2 <DMA_Init+0x186>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a4b      	ldr	r2, [pc, #300]	@ (8005dc8 <DMA_Init+0x19c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	f000 8088 	beq.w	8005db2 <DMA_Init+0x186>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a49      	ldr	r2, [pc, #292]	@ (8005dcc <DMA_Init+0x1a0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	f000 8082 	beq.w	8005db2 <DMA_Init+0x186>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a47      	ldr	r2, [pc, #284]	@ (8005dd0 <DMA_Init+0x1a4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d07c      	beq.n	8005db2 <DMA_Init+0x186>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a45      	ldr	r2, [pc, #276]	@ (8005dd4 <DMA_Init+0x1a8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d077      	beq.n	8005db2 <DMA_Init+0x186>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a44      	ldr	r2, [pc, #272]	@ (8005dd8 <DMA_Init+0x1ac>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d072      	beq.n	8005db2 <DMA_Init+0x186>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a42      	ldr	r2, [pc, #264]	@ (8005ddc <DMA_Init+0x1b0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d06d      	beq.n	8005db2 <DMA_Init+0x186>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a41      	ldr	r2, [pc, #260]	@ (8005de0 <DMA_Init+0x1b4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d068      	beq.n	8005db2 <DMA_Init+0x186>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a3f      	ldr	r2, [pc, #252]	@ (8005de4 <DMA_Init+0x1b8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d063      	beq.n	8005db2 <DMA_Init+0x186>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a3e      	ldr	r2, [pc, #248]	@ (8005de8 <DMA_Init+0x1bc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d05e      	beq.n	8005db2 <DMA_Init+0x186>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8005dec <DMA_Init+0x1c0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d059      	beq.n	8005db2 <DMA_Init+0x186>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a3b      	ldr	r2, [pc, #236]	@ (8005df0 <DMA_Init+0x1c4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d054      	beq.n	8005db2 <DMA_Init+0x186>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a39      	ldr	r2, [pc, #228]	@ (8005df4 <DMA_Init+0x1c8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d04f      	beq.n	8005db2 <DMA_Init+0x186>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a38      	ldr	r2, [pc, #224]	@ (8005df8 <DMA_Init+0x1cc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d04a      	beq.n	8005db2 <DMA_Init+0x186>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a36      	ldr	r2, [pc, #216]	@ (8005dfc <DMA_Init+0x1d0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d045      	beq.n	8005db2 <DMA_Init+0x186>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a35      	ldr	r2, [pc, #212]	@ (8005e00 <DMA_Init+0x1d4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d040      	beq.n	8005db2 <DMA_Init+0x186>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a33      	ldr	r2, [pc, #204]	@ (8005e04 <DMA_Init+0x1d8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d03b      	beq.n	8005db2 <DMA_Init+0x186>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a32      	ldr	r2, [pc, #200]	@ (8005e08 <DMA_Init+0x1dc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d036      	beq.n	8005db2 <DMA_Init+0x186>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a30      	ldr	r2, [pc, #192]	@ (8005e0c <DMA_Init+0x1e0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d031      	beq.n	8005db2 <DMA_Init+0x186>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2f      	ldr	r2, [pc, #188]	@ (8005e10 <DMA_Init+0x1e4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d02c      	beq.n	8005db2 <DMA_Init+0x186>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e14 <DMA_Init+0x1e8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d027      	beq.n	8005db2 <DMA_Init+0x186>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2c      	ldr	r2, [pc, #176]	@ (8005e18 <DMA_Init+0x1ec>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <DMA_Init+0x186>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a2a      	ldr	r2, [pc, #168]	@ (8005e1c <DMA_Init+0x1f0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01d      	beq.n	8005db2 <DMA_Init+0x186>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a29      	ldr	r2, [pc, #164]	@ (8005e20 <DMA_Init+0x1f4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <DMA_Init+0x186>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a27      	ldr	r2, [pc, #156]	@ (8005e24 <DMA_Init+0x1f8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <DMA_Init+0x186>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a26      	ldr	r2, [pc, #152]	@ (8005e28 <DMA_Init+0x1fc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <DMA_Init+0x186>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a24      	ldr	r2, [pc, #144]	@ (8005e2c <DMA_Init+0x200>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <DMA_Init+0x186>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a23      	ldr	r2, [pc, #140]	@ (8005e30 <DMA_Init+0x204>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <DMA_Init+0x186>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a21      	ldr	r2, [pc, #132]	@ (8005e34 <DMA_Init+0x208>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d142      	bne.n	8005e38 <DMA_Init+0x20c>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e041      	b.n	8005e3a <DMA_Init+0x20e>
 8005db6:	bf00      	nop
 8005db8:	40020050 	.word	0x40020050
 8005dbc:	50020050 	.word	0x50020050
 8005dc0:	400200d0 	.word	0x400200d0
 8005dc4:	500200d0 	.word	0x500200d0
 8005dc8:	40020150 	.word	0x40020150
 8005dcc:	50020150 	.word	0x50020150
 8005dd0:	400201d0 	.word	0x400201d0
 8005dd4:	500201d0 	.word	0x500201d0
 8005dd8:	40020250 	.word	0x40020250
 8005ddc:	50020250 	.word	0x50020250
 8005de0:	400202d0 	.word	0x400202d0
 8005de4:	500202d0 	.word	0x500202d0
 8005de8:	40020350 	.word	0x40020350
 8005dec:	50020350 	.word	0x50020350
 8005df0:	400203d0 	.word	0x400203d0
 8005df4:	500203d0 	.word	0x500203d0
 8005df8:	40020450 	.word	0x40020450
 8005dfc:	50020450 	.word	0x50020450
 8005e00:	400204d0 	.word	0x400204d0
 8005e04:	500204d0 	.word	0x500204d0
 8005e08:	40020550 	.word	0x40020550
 8005e0c:	50020550 	.word	0x50020550
 8005e10:	400205d0 	.word	0x400205d0
 8005e14:	500205d0 	.word	0x500205d0
 8005e18:	40020650 	.word	0x40020650
 8005e1c:	50020650 	.word	0x50020650
 8005e20:	400206d0 	.word	0x400206d0
 8005e24:	500206d0 	.word	0x500206d0
 8005e28:	40020750 	.word	0x40020750
 8005e2c:	50020750 	.word	0x50020750
 8005e30:	400207d0 	.word	0x400207d0
 8005e34:	500207d0 	.word	0x500207d0
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d012      	beq.n	8005e64 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e46:	3b01      	subs	r3, #1
 8005e48:	051b      	lsls	r3, r3, #20
 8005e4a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e4e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e54:	3b01      	subs	r3, #1
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e5c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e96:	f040 80b0 	bne.w	8005ffa <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a82      	ldr	r2, [pc, #520]	@ (80060a8 <DMA_Init+0x47c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	f000 80a0 	beq.w	8005fe6 <DMA_Init+0x3ba>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a80      	ldr	r2, [pc, #512]	@ (80060ac <DMA_Init+0x480>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	f000 809a 	beq.w	8005fe6 <DMA_Init+0x3ba>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80060b0 <DMA_Init+0x484>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	f000 8094 	beq.w	8005fe6 <DMA_Init+0x3ba>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a7c      	ldr	r2, [pc, #496]	@ (80060b4 <DMA_Init+0x488>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	f000 808e 	beq.w	8005fe6 <DMA_Init+0x3ba>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a7a      	ldr	r2, [pc, #488]	@ (80060b8 <DMA_Init+0x48c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	f000 8088 	beq.w	8005fe6 <DMA_Init+0x3ba>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a78      	ldr	r2, [pc, #480]	@ (80060bc <DMA_Init+0x490>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	f000 8082 	beq.w	8005fe6 <DMA_Init+0x3ba>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a76      	ldr	r2, [pc, #472]	@ (80060c0 <DMA_Init+0x494>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d07c      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a74      	ldr	r2, [pc, #464]	@ (80060c4 <DMA_Init+0x498>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d077      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a73      	ldr	r2, [pc, #460]	@ (80060c8 <DMA_Init+0x49c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d072      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a71      	ldr	r2, [pc, #452]	@ (80060cc <DMA_Init+0x4a0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d06d      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a70      	ldr	r2, [pc, #448]	@ (80060d0 <DMA_Init+0x4a4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d068      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a6e      	ldr	r2, [pc, #440]	@ (80060d4 <DMA_Init+0x4a8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d063      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6d      	ldr	r2, [pc, #436]	@ (80060d8 <DMA_Init+0x4ac>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d05e      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a6b      	ldr	r2, [pc, #428]	@ (80060dc <DMA_Init+0x4b0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d059      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a6a      	ldr	r2, [pc, #424]	@ (80060e0 <DMA_Init+0x4b4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d054      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a68      	ldr	r2, [pc, #416]	@ (80060e4 <DMA_Init+0x4b8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d04f      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a67      	ldr	r2, [pc, #412]	@ (80060e8 <DMA_Init+0x4bc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d04a      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a65      	ldr	r2, [pc, #404]	@ (80060ec <DMA_Init+0x4c0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d045      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a64      	ldr	r2, [pc, #400]	@ (80060f0 <DMA_Init+0x4c4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d040      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a62      	ldr	r2, [pc, #392]	@ (80060f4 <DMA_Init+0x4c8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d03b      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a61      	ldr	r2, [pc, #388]	@ (80060f8 <DMA_Init+0x4cc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d036      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a5f      	ldr	r2, [pc, #380]	@ (80060fc <DMA_Init+0x4d0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d031      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a5e      	ldr	r2, [pc, #376]	@ (8006100 <DMA_Init+0x4d4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d02c      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a5c      	ldr	r2, [pc, #368]	@ (8006104 <DMA_Init+0x4d8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d027      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a5b      	ldr	r2, [pc, #364]	@ (8006108 <DMA_Init+0x4dc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d022      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a59      	ldr	r2, [pc, #356]	@ (800610c <DMA_Init+0x4e0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01d      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a58      	ldr	r2, [pc, #352]	@ (8006110 <DMA_Init+0x4e4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d018      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a56      	ldr	r2, [pc, #344]	@ (8006114 <DMA_Init+0x4e8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d013      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a55      	ldr	r2, [pc, #340]	@ (8006118 <DMA_Init+0x4ec>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00e      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a53      	ldr	r2, [pc, #332]	@ (800611c <DMA_Init+0x4f0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d009      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a52      	ldr	r2, [pc, #328]	@ (8006120 <DMA_Init+0x4f4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d004      	beq.n	8005fe6 <DMA_Init+0x3ba>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a50      	ldr	r2, [pc, #320]	@ (8006124 <DMA_Init+0x4f8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d101      	bne.n	8005fea <DMA_Init+0x3be>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <DMA_Init+0x3c0>
 8005fea:	2300      	movs	r3, #0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00d      	beq.n	800600c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e008      	b.n	800600c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006002:	d103      	bne.n	800600c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800600a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006012:	4b45      	ldr	r3, [pc, #276]	@ (8006128 <DMA_Init+0x4fc>)
 8006014:	4013      	ands	r3, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	430b      	orrs	r3, r1
 800601e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2200      	movs	r2, #0
 8006026:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a36      	ldr	r2, [pc, #216]	@ (8006108 <DMA_Init+0x4dc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d022      	beq.n	8006078 <DMA_Init+0x44c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a35      	ldr	r2, [pc, #212]	@ (800610c <DMA_Init+0x4e0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d01d      	beq.n	8006078 <DMA_Init+0x44c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a33      	ldr	r2, [pc, #204]	@ (8006110 <DMA_Init+0x4e4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <DMA_Init+0x44c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a32      	ldr	r2, [pc, #200]	@ (8006114 <DMA_Init+0x4e8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <DMA_Init+0x44c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a30      	ldr	r2, [pc, #192]	@ (8006118 <DMA_Init+0x4ec>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <DMA_Init+0x44c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a2f      	ldr	r2, [pc, #188]	@ (800611c <DMA_Init+0x4f0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <DMA_Init+0x44c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a2d      	ldr	r2, [pc, #180]	@ (8006120 <DMA_Init+0x4f4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <DMA_Init+0x44c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a2c      	ldr	r2, [pc, #176]	@ (8006124 <DMA_Init+0x4f8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d101      	bne.n	800607c <DMA_Init+0x450>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <DMA_Init+0x452>
 800607c:	2300      	movs	r3, #0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2200      	movs	r2, #0
 8006088:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2200      	movs	r2, #0
 8006098:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40020050 	.word	0x40020050
 80060ac:	50020050 	.word	0x50020050
 80060b0:	400200d0 	.word	0x400200d0
 80060b4:	500200d0 	.word	0x500200d0
 80060b8:	40020150 	.word	0x40020150
 80060bc:	50020150 	.word	0x50020150
 80060c0:	400201d0 	.word	0x400201d0
 80060c4:	500201d0 	.word	0x500201d0
 80060c8:	40020250 	.word	0x40020250
 80060cc:	50020250 	.word	0x50020250
 80060d0:	400202d0 	.word	0x400202d0
 80060d4:	500202d0 	.word	0x500202d0
 80060d8:	40020350 	.word	0x40020350
 80060dc:	50020350 	.word	0x50020350
 80060e0:	400203d0 	.word	0x400203d0
 80060e4:	500203d0 	.word	0x500203d0
 80060e8:	40020450 	.word	0x40020450
 80060ec:	50020450 	.word	0x50020450
 80060f0:	400204d0 	.word	0x400204d0
 80060f4:	500204d0 	.word	0x500204d0
 80060f8:	40020550 	.word	0x40020550
 80060fc:	50020550 	.word	0x50020550
 8006100:	400205d0 	.word	0x400205d0
 8006104:	500205d0 	.word	0x500205d0
 8006108:	40020650 	.word	0x40020650
 800610c:	50020650 	.word	0x50020650
 8006110:	400206d0 	.word	0x400206d0
 8006114:	500206d0 	.word	0x500206d0
 8006118:	40020750 	.word	0x40020750
 800611c:	50020750 	.word	0x50020750
 8006120:	400207d0 	.word	0x400207d0
 8006124:	500207d0 	.word	0x500207d0
 8006128:	3c803180 	.word	0x3c803180

0800612c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e053      	b.n	80061e6 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fb fd64 	bl	8001c20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800616a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6851      	ldr	r1, [r2, #4]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	69d2      	ldr	r2, [r2, #28]
 8006176:	4311      	orrs	r1, r2
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	430b      	orrs	r3, r1
 800617e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006186:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6891      	ldr	r1, [r2, #8]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6992      	ldr	r2, [r2, #24]
 8006196:	4311      	orrs	r1, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	430b      	orrs	r3, r1
 800619e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	041b      	lsls	r3, r3, #16
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	68d1      	ldr	r1, [r2, #12]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	430b      	orrs	r3, r1
 80061b4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061bc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	051a      	lsls	r2, r3, #20
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	055b      	lsls	r3, r3, #21
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_DMA2D_ConfigLayer+0x24>
 8006210:	2302      	movs	r3, #2
 8006212:	e092      	b.n	800633a <HAL_DMA2D_ConfigLayer+0x14a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	4613      	mov	r3, r2
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	3328      	adds	r3, #40	@ 0x28
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	4413      	add	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006248:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006254:	4b3c      	ldr	r3, [pc, #240]	@ (8006348 <HAL_DMA2D_ConfigLayer+0x158>)
 8006256:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b0a      	cmp	r3, #10
 800625e:	d003      	beq.n	8006268 <HAL_DMA2D_ConfigLayer+0x78>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b09      	cmp	r3, #9
 8006266:	d107      	bne.n	8006278 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	e005      	b.n	8006284 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	061b      	lsls	r3, r3, #24
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d120      	bne.n	80062cc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	43db      	mvns	r3, r3
 8006294:	ea02 0103 	and.w	r1, r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	430a      	orrs	r2, r1
 80062a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b0a      	cmp	r3, #10
 80062b2:	d003      	beq.n	80062bc <HAL_DMA2D_ConfigLayer+0xcc>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b09      	cmp	r3, #9
 80062ba:	d135      	bne.n	8006328 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80062c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80062ca:	e02d      	b.n	8006328 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b0b      	cmp	r3, #11
 80062d2:	d109      	bne.n	80062e8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	049b      	lsls	r3, r3, #18
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80062e6:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69da      	ldr	r2, [r3, #28]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	ea02 0103 	and.w	r1, r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b0a      	cmp	r3, #10
 8006310:	d003      	beq.n	800631a <HAL_DMA2D_ConfigLayer+0x12a>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b09      	cmp	r3, #9
 8006318:	d106      	bne.n	8006328 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006326:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	ff33000f 	.word	0xff33000f

0800634c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006354:	f7fc fc88 	bl	8002c68 <HAL_GetTick>
 8006358:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e0db      	b.n	800651c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a6e      	ldr	r2, [pc, #440]	@ (8006524 <HAL_DMAEx_List_Init+0x1d8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	f000 809f 	beq.w	80064ae <HAL_DMAEx_List_Init+0x162>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a6c      	ldr	r2, [pc, #432]	@ (8006528 <HAL_DMAEx_List_Init+0x1dc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	f000 8099 	beq.w	80064ae <HAL_DMAEx_List_Init+0x162>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a6a      	ldr	r2, [pc, #424]	@ (800652c <HAL_DMAEx_List_Init+0x1e0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	f000 8093 	beq.w	80064ae <HAL_DMAEx_List_Init+0x162>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a68      	ldr	r2, [pc, #416]	@ (8006530 <HAL_DMAEx_List_Init+0x1e4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	f000 808d 	beq.w	80064ae <HAL_DMAEx_List_Init+0x162>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a66      	ldr	r2, [pc, #408]	@ (8006534 <HAL_DMAEx_List_Init+0x1e8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	f000 8087 	beq.w	80064ae <HAL_DMAEx_List_Init+0x162>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a64      	ldr	r2, [pc, #400]	@ (8006538 <HAL_DMAEx_List_Init+0x1ec>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f000 8081 	beq.w	80064ae <HAL_DMAEx_List_Init+0x162>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a62      	ldr	r2, [pc, #392]	@ (800653c <HAL_DMAEx_List_Init+0x1f0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d07b      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a61      	ldr	r2, [pc, #388]	@ (8006540 <HAL_DMAEx_List_Init+0x1f4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d076      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a5f      	ldr	r2, [pc, #380]	@ (8006544 <HAL_DMAEx_List_Init+0x1f8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d071      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a5e      	ldr	r2, [pc, #376]	@ (8006548 <HAL_DMAEx_List_Init+0x1fc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d06c      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a5c      	ldr	r2, [pc, #368]	@ (800654c <HAL_DMAEx_List_Init+0x200>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d067      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a5b      	ldr	r2, [pc, #364]	@ (8006550 <HAL_DMAEx_List_Init+0x204>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d062      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a59      	ldr	r2, [pc, #356]	@ (8006554 <HAL_DMAEx_List_Init+0x208>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d05d      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a58      	ldr	r2, [pc, #352]	@ (8006558 <HAL_DMAEx_List_Init+0x20c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d058      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a56      	ldr	r2, [pc, #344]	@ (800655c <HAL_DMAEx_List_Init+0x210>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d053      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a55      	ldr	r2, [pc, #340]	@ (8006560 <HAL_DMAEx_List_Init+0x214>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d04e      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a53      	ldr	r2, [pc, #332]	@ (8006564 <HAL_DMAEx_List_Init+0x218>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d049      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a52      	ldr	r2, [pc, #328]	@ (8006568 <HAL_DMAEx_List_Init+0x21c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d044      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a50      	ldr	r2, [pc, #320]	@ (800656c <HAL_DMAEx_List_Init+0x220>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d03f      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a4f      	ldr	r2, [pc, #316]	@ (8006570 <HAL_DMAEx_List_Init+0x224>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d03a      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a4d      	ldr	r2, [pc, #308]	@ (8006574 <HAL_DMAEx_List_Init+0x228>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d035      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a4c      	ldr	r2, [pc, #304]	@ (8006578 <HAL_DMAEx_List_Init+0x22c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d030      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a4a      	ldr	r2, [pc, #296]	@ (800657c <HAL_DMAEx_List_Init+0x230>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d02b      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a49      	ldr	r2, [pc, #292]	@ (8006580 <HAL_DMAEx_List_Init+0x234>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d026      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a47      	ldr	r2, [pc, #284]	@ (8006584 <HAL_DMAEx_List_Init+0x238>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d021      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a46      	ldr	r2, [pc, #280]	@ (8006588 <HAL_DMAEx_List_Init+0x23c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d01c      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a44      	ldr	r2, [pc, #272]	@ (800658c <HAL_DMAEx_List_Init+0x240>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d017      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a43      	ldr	r2, [pc, #268]	@ (8006590 <HAL_DMAEx_List_Init+0x244>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d012      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a41      	ldr	r2, [pc, #260]	@ (8006594 <HAL_DMAEx_List_Init+0x248>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00d      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a40      	ldr	r2, [pc, #256]	@ (8006598 <HAL_DMAEx_List_Init+0x24c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d008      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a3e      	ldr	r2, [pc, #248]	@ (800659c <HAL_DMAEx_List_Init+0x250>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <HAL_DMAEx_List_Init+0x162>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a3d      	ldr	r2, [pc, #244]	@ (80065a0 <HAL_DMAEx_List_Init+0x254>)
 80064ac:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2202      	movs	r2, #2
 80064ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0206 	orr.w	r2, r2, #6
 80064cc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80064ce:	e00f      	b.n	80064f0 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80064d0:	f7fc fbca 	bl	8002c68 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b05      	cmp	r3, #5
 80064dc:	d908      	bls.n	80064f0 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2210      	movs	r2, #16
 80064e2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2203      	movs	r2, #3
 80064e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e015      	b.n	800651c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e8      	bne.n	80064d0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fae0 	bl	8006ac4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40020050 	.word	0x40020050
 8006528:	50020050 	.word	0x50020050
 800652c:	400200d0 	.word	0x400200d0
 8006530:	500200d0 	.word	0x500200d0
 8006534:	40020150 	.word	0x40020150
 8006538:	50020150 	.word	0x50020150
 800653c:	400201d0 	.word	0x400201d0
 8006540:	500201d0 	.word	0x500201d0
 8006544:	40020250 	.word	0x40020250
 8006548:	50020250 	.word	0x50020250
 800654c:	400202d0 	.word	0x400202d0
 8006550:	500202d0 	.word	0x500202d0
 8006554:	40020350 	.word	0x40020350
 8006558:	50020350 	.word	0x50020350
 800655c:	400203d0 	.word	0x400203d0
 8006560:	500203d0 	.word	0x500203d0
 8006564:	40020450 	.word	0x40020450
 8006568:	50020450 	.word	0x50020450
 800656c:	400204d0 	.word	0x400204d0
 8006570:	500204d0 	.word	0x500204d0
 8006574:	40020550 	.word	0x40020550
 8006578:	50020550 	.word	0x50020550
 800657c:	400205d0 	.word	0x400205d0
 8006580:	500205d0 	.word	0x500205d0
 8006584:	40020650 	.word	0x40020650
 8006588:	50020650 	.word	0x50020650
 800658c:	400206d0 	.word	0x400206d0
 8006590:	500206d0 	.word	0x500206d0
 8006594:	40020750 	.word	0x40020750
 8006598:	50020750 	.word	0x50020750
 800659c:	400207d0 	.word	0x400207d0
 80065a0:	500207d0 	.word	0x500207d0

080065a4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_DMAEx_List_Start_IT+0x16>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e082      	b.n	80066c4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80065c4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065d0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d005      	beq.n	80065e4 <HAL_DMAEx_List_Start_IT+0x40>
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d16a      	bne.n	80066b4 <HAL_DMAEx_List_Start_IT+0x110>
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d067      	beq.n	80066b4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d157      	bne.n	80066a0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_DMAEx_List_Start_IT+0x5a>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e062      	b.n	80066c4 <HAL_DMAEx_List_Start_IT+0x120>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006612:	2202      	movs	r2, #2
 8006614:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006620:	2200      	movs	r2, #0
 8006622:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006632:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	695a      	ldr	r2, [r3, #20]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800664a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695a      	ldr	r2, [r3, #20]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006662:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f107 010c 	add.w	r1, r7, #12
 800666e:	2200      	movs	r2, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fe47 	bl	8007304 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4619      	mov	r1, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	0c0b      	lsrs	r3, r1, #16
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006694:	4013      	ands	r3, r2
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	430b      	orrs	r3, r1
 800669e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e007      	b.n	80066c4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2240      	movs	r2, #64	@ 0x40
 80066b8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_DMAEx_List_BuildNode+0x16>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e004      	b.n	80066f0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fb43 	bl	8006d74 <DMA_List_BuildNode>

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e004      	b.n	800671c <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fc7f 	bl	8007018 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08c      	sub	sp, #48	@ 0x30
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_DMAEx_List_InsertNode+0x18>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e0b6      	b.n	80068ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d104      	bne.n	8006752 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2204      	movs	r2, #4
 800674c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e0ad      	b.n	80068ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fd66 	bl	800722c <DMA_List_CheckNodesBaseAddresses>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d004      	beq.n	8006770 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2205      	movs	r2, #5
 800676a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e09e      	b.n	80068ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	68b9      	ldr	r1, [r7, #8]
 8006778:	4618      	mov	r0, r3
 800677a:	f000 fd87 	bl	800728c <DMA_List_CheckNodesTypes>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d004      	beq.n	800678e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2204      	movs	r2, #4
 8006788:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e08f      	b.n	80068ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2202      	movs	r2, #2
 8006792:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800679a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800679e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fdad 	bl	8007304 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d11a      	bne.n	80067e8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2201      	movs	r2, #1
 80067c2:	609a      	str	r2, [r3, #8]
 80067c4:	e06c      	b.n	80068a0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067d2:	4013      	ands	r3, r2
 80067d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067d8:	4319      	orrs	r1, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2202      	movs	r2, #2
 80067e4:	609a      	str	r2, [r3, #8]
 80067e6:	e05b      	b.n	80068a0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10f      	bne.n	800680e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067f8:	4013      	ands	r3, r2
 80067fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067fe:	4319      	orrs	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e043      	b.n	8006896 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006812:	f107 0314 	add.w	r3, r7, #20
 8006816:	461a      	mov	r2, r3
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 fda2 	bl	8007364 <DMA_List_FindNode>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d132      	bne.n	800688c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	429a      	cmp	r2, r3
 800682e:	d11a      	bne.n	8006866 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	461a      	mov	r2, r3
 800683e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006842:	4013      	ands	r3, r2
 8006844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006848:	4319      	orrs	r1, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006856:	4013      	ands	r3, r2
 8006858:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800685a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800685c:	4319      	orrs	r1, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006864:	e017      	b.n	8006896 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800687c:	4013      	ands	r3, r2
 800687e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006882:	4319      	orrs	r1, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800688a:	e004      	b.n	8006896 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2206      	movs	r2, #6
 8006890:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e00b      	b.n	80068ae <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3730      	adds	r7, #48	@ 0x30
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b08a      	sub	sp, #40	@ 0x28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e052      	b.n	800696e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e049      	b.n	800696e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d101      	bne.n	80068f2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e03d      	b.n	800696e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2204      	movs	r2, #4
 80068f6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e038      	b.n	800696e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d104      	bne.n	800690e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2204      	movs	r2, #4
 8006908:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e02f      	b.n	800696e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f107 0220 	add.w	r2, r7, #32
 8006922:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fcec 	bl	8007304 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006930:	f107 030c 	add.w	r3, r7, #12
 8006934:	461a      	mov	r2, r3
 8006936:	2100      	movs	r1, #0
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fd13 	bl	8007364 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006948:	4013      	ands	r3, r2
 800694a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	4610      	mov	r0, r2
 8006950:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006952:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006954:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3728      	adds	r7, #40	@ 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_DMAEx_List_LinkQ+0x16>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e072      	b.n	8006a78 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006998:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d002      	beq.n	80069ac <HAL_DMAEx_List_LinkQ+0x34>
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2b05      	cmp	r3, #5
 80069aa:	d108      	bne.n	80069be <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2240      	movs	r2, #64	@ 0x40
 80069b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e05c      	b.n	8006a78 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	7b1b      	ldrb	r3, [r3, #12]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d104      	bne.n	80069d2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2201      	movs	r2, #1
 80069cc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e052      	b.n	8006a78 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006a84 <HAL_DMAEx_List_LinkQ+0x10c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d022      	beq.n	8006a22 <HAL_DMAEx_List_LinkQ+0xaa>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a29      	ldr	r2, [pc, #164]	@ (8006a88 <HAL_DMAEx_List_LinkQ+0x110>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01d      	beq.n	8006a22 <HAL_DMAEx_List_LinkQ+0xaa>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a28      	ldr	r2, [pc, #160]	@ (8006a8c <HAL_DMAEx_List_LinkQ+0x114>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d018      	beq.n	8006a22 <HAL_DMAEx_List_LinkQ+0xaa>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a26      	ldr	r2, [pc, #152]	@ (8006a90 <HAL_DMAEx_List_LinkQ+0x118>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_DMAEx_List_LinkQ+0xaa>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a25      	ldr	r2, [pc, #148]	@ (8006a94 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a23      	ldr	r2, [pc, #140]	@ (8006a98 <HAL_DMAEx_List_LinkQ+0x120>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a22      	ldr	r2, [pc, #136]	@ (8006a9c <HAL_DMAEx_List_LinkQ+0x124>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a20      	ldr	r2, [pc, #128]	@ (8006aa0 <HAL_DMAEx_List_LinkQ+0x128>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d101      	bne.n	8006a26 <HAL_DMAEx_List_LinkQ+0xae>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <HAL_DMAEx_List_LinkQ+0xb0>
 8006a26:	2300      	movs	r3, #0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d004      	beq.n	8006a44 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e019      	b.n	8006a78 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a48:	2b81      	cmp	r3, #129	@ 0x81
 8006a4a:	d108      	bne.n	8006a5e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10d      	bne.n	8006a70 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2204      	movs	r2, #4
 8006a58:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e00c      	b.n	8006a78 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d004      	beq.n	8006a70 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2204      	movs	r2, #4
 8006a6a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e003      	b.n	8006a78 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	40020650 	.word	0x40020650
 8006a88:	50020650 	.word	0x50020650
 8006a8c:	400206d0 	.word	0x400206d0
 8006a90:	500206d0 	.word	0x500206d0
 8006a94:	40020750 	.word	0x40020750
 8006a98:	50020750 	.word	0x50020750
 8006a9c:	400207d0 	.word	0x400207d0
 8006aa0:	500207d0 	.word	0x500207d0

08006aa4 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	0c1b      	lsrs	r3, r3, #16
 8006ab4:	b2db      	uxtb	r3, r3
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
	...

08006ac4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a85      	ldr	r2, [pc, #532]	@ (8006cf4 <DMA_List_Init+0x230>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	f000 80a0 	beq.w	8006c24 <DMA_List_Init+0x160>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a83      	ldr	r2, [pc, #524]	@ (8006cf8 <DMA_List_Init+0x234>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	f000 809a 	beq.w	8006c24 <DMA_List_Init+0x160>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a81      	ldr	r2, [pc, #516]	@ (8006cfc <DMA_List_Init+0x238>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	f000 8094 	beq.w	8006c24 <DMA_List_Init+0x160>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a7f      	ldr	r2, [pc, #508]	@ (8006d00 <DMA_List_Init+0x23c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	f000 808e 	beq.w	8006c24 <DMA_List_Init+0x160>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a7d      	ldr	r2, [pc, #500]	@ (8006d04 <DMA_List_Init+0x240>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	f000 8088 	beq.w	8006c24 <DMA_List_Init+0x160>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a7b      	ldr	r2, [pc, #492]	@ (8006d08 <DMA_List_Init+0x244>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	f000 8082 	beq.w	8006c24 <DMA_List_Init+0x160>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a79      	ldr	r2, [pc, #484]	@ (8006d0c <DMA_List_Init+0x248>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d07c      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a78      	ldr	r2, [pc, #480]	@ (8006d10 <DMA_List_Init+0x24c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d077      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a76      	ldr	r2, [pc, #472]	@ (8006d14 <DMA_List_Init+0x250>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d072      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a75      	ldr	r2, [pc, #468]	@ (8006d18 <DMA_List_Init+0x254>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d06d      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a73      	ldr	r2, [pc, #460]	@ (8006d1c <DMA_List_Init+0x258>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d068      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a72      	ldr	r2, [pc, #456]	@ (8006d20 <DMA_List_Init+0x25c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d063      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a70      	ldr	r2, [pc, #448]	@ (8006d24 <DMA_List_Init+0x260>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d05e      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a6f      	ldr	r2, [pc, #444]	@ (8006d28 <DMA_List_Init+0x264>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d059      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a6d      	ldr	r2, [pc, #436]	@ (8006d2c <DMA_List_Init+0x268>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d054      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a6c      	ldr	r2, [pc, #432]	@ (8006d30 <DMA_List_Init+0x26c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d04f      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a6a      	ldr	r2, [pc, #424]	@ (8006d34 <DMA_List_Init+0x270>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d04a      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a69      	ldr	r2, [pc, #420]	@ (8006d38 <DMA_List_Init+0x274>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d045      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a67      	ldr	r2, [pc, #412]	@ (8006d3c <DMA_List_Init+0x278>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d040      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a66      	ldr	r2, [pc, #408]	@ (8006d40 <DMA_List_Init+0x27c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d03b      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a64      	ldr	r2, [pc, #400]	@ (8006d44 <DMA_List_Init+0x280>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d036      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a63      	ldr	r2, [pc, #396]	@ (8006d48 <DMA_List_Init+0x284>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d031      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a61      	ldr	r2, [pc, #388]	@ (8006d4c <DMA_List_Init+0x288>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d02c      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a60      	ldr	r2, [pc, #384]	@ (8006d50 <DMA_List_Init+0x28c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d027      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a5e      	ldr	r2, [pc, #376]	@ (8006d54 <DMA_List_Init+0x290>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d022      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a5d      	ldr	r2, [pc, #372]	@ (8006d58 <DMA_List_Init+0x294>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d01d      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a5b      	ldr	r2, [pc, #364]	@ (8006d5c <DMA_List_Init+0x298>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d018      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a5a      	ldr	r2, [pc, #360]	@ (8006d60 <DMA_List_Init+0x29c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d013      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a58      	ldr	r2, [pc, #352]	@ (8006d64 <DMA_List_Init+0x2a0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00e      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a57      	ldr	r2, [pc, #348]	@ (8006d68 <DMA_List_Init+0x2a4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d009      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a55      	ldr	r2, [pc, #340]	@ (8006d6c <DMA_List_Init+0x2a8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d004      	beq.n	8006c24 <DMA_List_Init+0x160>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a54      	ldr	r2, [pc, #336]	@ (8006d70 <DMA_List_Init+0x2ac>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d101      	bne.n	8006c28 <DMA_List_Init+0x164>
 8006c24:	2301      	movs	r3, #1
 8006c26:	e000      	b.n	8006c2a <DMA_List_Init+0x166>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d004      	beq.n	8006c38 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2200      	movs	r2, #0
 8006c52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c5c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a36      	ldr	r2, [pc, #216]	@ (8006d54 <DMA_List_Init+0x290>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d022      	beq.n	8006cc6 <DMA_List_Init+0x202>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a34      	ldr	r2, [pc, #208]	@ (8006d58 <DMA_List_Init+0x294>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d01d      	beq.n	8006cc6 <DMA_List_Init+0x202>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a33      	ldr	r2, [pc, #204]	@ (8006d5c <DMA_List_Init+0x298>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d018      	beq.n	8006cc6 <DMA_List_Init+0x202>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a31      	ldr	r2, [pc, #196]	@ (8006d60 <DMA_List_Init+0x29c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <DMA_List_Init+0x202>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a30      	ldr	r2, [pc, #192]	@ (8006d64 <DMA_List_Init+0x2a0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00e      	beq.n	8006cc6 <DMA_List_Init+0x202>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2e      	ldr	r2, [pc, #184]	@ (8006d68 <DMA_List_Init+0x2a4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <DMA_List_Init+0x202>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8006d6c <DMA_List_Init+0x2a8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d004      	beq.n	8006cc6 <DMA_List_Init+0x202>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8006d70 <DMA_List_Init+0x2ac>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d101      	bne.n	8006cca <DMA_List_Init+0x206>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <DMA_List_Init+0x208>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d007      	beq.n	8006ce0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	40020050 	.word	0x40020050
 8006cf8:	50020050 	.word	0x50020050
 8006cfc:	400200d0 	.word	0x400200d0
 8006d00:	500200d0 	.word	0x500200d0
 8006d04:	40020150 	.word	0x40020150
 8006d08:	50020150 	.word	0x50020150
 8006d0c:	400201d0 	.word	0x400201d0
 8006d10:	500201d0 	.word	0x500201d0
 8006d14:	40020250 	.word	0x40020250
 8006d18:	50020250 	.word	0x50020250
 8006d1c:	400202d0 	.word	0x400202d0
 8006d20:	500202d0 	.word	0x500202d0
 8006d24:	40020350 	.word	0x40020350
 8006d28:	50020350 	.word	0x50020350
 8006d2c:	400203d0 	.word	0x400203d0
 8006d30:	500203d0 	.word	0x500203d0
 8006d34:	40020450 	.word	0x40020450
 8006d38:	50020450 	.word	0x50020450
 8006d3c:	400204d0 	.word	0x400204d0
 8006d40:	500204d0 	.word	0x500204d0
 8006d44:	40020550 	.word	0x40020550
 8006d48:	50020550 	.word	0x50020550
 8006d4c:	400205d0 	.word	0x400205d0
 8006d50:	500205d0 	.word	0x500205d0
 8006d54:	40020650 	.word	0x40020650
 8006d58:	50020650 	.word	0x50020650
 8006d5c:	400206d0 	.word	0x400206d0
 8006d60:	500206d0 	.word	0x500206d0
 8006d64:	40020750 	.word	0x40020750
 8006d68:	50020750 	.word	0x50020750
 8006d6c:	400207d0 	.word	0x400207d0
 8006d70:	500207d0 	.word	0x500207d0

08006d74 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d86:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d8c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d92:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006d98:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d017      	beq.n	8006dda <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	051b      	lsls	r3, r3, #20
 8006dc0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006dc4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006dd2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6859      	ldr	r1, [r3, #4]
 8006de2:	f240 237f 	movw	r3, #639	@ 0x27f
 8006de6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006de8:	431a      	orrs	r2, r3
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df6:	d10c      	bne.n	8006e12 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d011      	beq.n	8006e28 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	605a      	str	r2, [r3, #4]
 8006e10:	e00a      	b.n	8006e28 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e1a:	d105      	bne.n	8006e28 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00f      	beq.n	8006e50 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e42:	041b      	lsls	r3, r3, #16
 8006e44:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e48:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d04e      	beq.n	8006f04 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	0419      	lsls	r1, r3, #16
 8006e72:	4b67      	ldr	r3, [pc, #412]	@ (8007010 <DMA_List_BuildNode+0x29c>)
 8006e74:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e76:	431a      	orrs	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	da06      	bge.n	8006e92 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	609a      	str	r2, [r3, #8]
 8006e90:	e005      	b.n	8006e9e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	da06      	bge.n	8006eb4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	609a      	str	r2, [r3, #8]
 8006eb2:	e005      	b.n	8006ec0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	da06      	bge.n	8006ed6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	e005      	b.n	8006ee2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da06      	bge.n	8006ef8 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	609a      	str	r2, [r3, #8]
 8006ef6:	e005      	b.n	8006f04 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d059      	beq.n	8006fd4 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da09      	bge.n	8006f3c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f2c:	425b      	negs	r3, r3
 8006f2e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	615a      	str	r2, [r3, #20]
 8006f3a:	e005      	b.n	8006f48 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f40:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da0d      	bge.n	8006f6c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f54:	425b      	negs	r3, r3
 8006f56:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	695a      	ldr	r2, [r3, #20]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	0419      	lsls	r1, r3, #16
 8006f60:	4b2c      	ldr	r3, [pc, #176]	@ (8007014 <DMA_List_BuildNode+0x2a0>)
 8006f62:	400b      	ands	r3, r1
 8006f64:	431a      	orrs	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	615a      	str	r2, [r3, #20]
 8006f6a:	e009      	b.n	8006f80 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f74:	0419      	lsls	r1, r3, #16
 8006f76:	4b27      	ldr	r3, [pc, #156]	@ (8007014 <DMA_List_BuildNode+0x2a0>)
 8006f78:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	da08      	bge.n	8006f9a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f8c:	425b      	negs	r3, r3
 8006f8e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	619a      	str	r2, [r3, #24]
 8006f98:	e004      	b.n	8006fa4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f9e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	da0b      	bge.n	8006fc4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fb0:	425b      	negs	r3, r3
 8006fb2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	619a      	str	r2, [r3, #24]
 8006fc2:	e007      	b.n	8006fd4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fcc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d006      	beq.n	8006ff6 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006ff4:	e005      	b.n	8007002 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	621a      	str	r2, [r3, #32]
}
 8007002:	bf00      	nop
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	07ff0000 	.word	0x07ff0000
 8007014:	1fff0000 	.word	0x1fff0000

08007018 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	b2da      	uxtb	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0208 	and.w	r2, r3, #8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0203 	and.w	r2, r3, #3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8007060:	091b      	lsrs	r3, r3, #4
 8007062:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007066:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8007070:	0d1b      	lsrs	r3, r3, #20
 8007072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007076:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	4b66      	ldr	r3, [pc, #408]	@ (8007228 <DMA_List_GetNodeConfig+0x210>)
 800708e:	4013      	ands	r3, r2
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070b2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070ba:	60da      	str	r2, [r3, #12]
 80070bc:	e013      	b.n	80070e6 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	e002      	b.n	80070e6 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800710e:	0c1b      	lsrs	r3, r3, #16
 8007110:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	b29a      	uxth	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d008      	beq.n	800714c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	0c1b      	lsrs	r3, r3, #16
 8007140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007144:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	64da      	str	r2, [r3, #76]	@ 0x4c
 800714a:	e002      	b.n	8007152 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d04a      	beq.n	8007204 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007178:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800717a:	89fa      	ldrh	r2, [r7, #14]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	0c1b      	lsrs	r3, r3, #16
 8007186:	b29b      	uxth	r3, r3
 8007188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800718c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800718e:	89fa      	ldrh	r2, [r7, #14]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a4:	425a      	negs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d004      	beq.n	80071c0 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ba:	425a      	negs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80071c6:	89fa      	ldrh	r2, [r7, #14]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80071d4:	89fa      	ldrh	r2, [r7, #14]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d004      	beq.n	80071f0 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ea:	425a      	negs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	da11      	bge.n	800721c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071fc:	425a      	negs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8007202:	e00b      	b.n	800721c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800721c:	bf00      	nop
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	0c002000 	.word	0x0c002000

0800722c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4313      	orrs	r3, r2
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	041b      	lsls	r3, r3, #16
 8007246:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	617b      	str	r3, [r7, #20]
 8007256:	e00a      	b.n	800726e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	e004      	b.n	800726e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	0c1b      	lsrs	r3, r3, #16
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	429a      	cmp	r2, r3
 8007278:	d001      	beq.n	800727e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	371c      	adds	r7, #28
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e00e      	b.n	80072ca <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	e006      	b.n	80072ca <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d001      	beq.n	80072e0 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80072dc:	2302      	movs	r3, #2
 80072de:	e00b      	b.n	80072f8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d001      	beq.n	80072f6 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e000      	b.n	80072f8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4a0d      	ldr	r2, [pc, #52]	@ (800735c <DMA_List_GetCLLRNodeInfo+0x58>)
 8007326:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00f      	beq.n	800734e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2207      	movs	r2, #7
 8007332:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007334:	e00b      	b.n	800734e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4a08      	ldr	r2, [pc, #32]	@ (8007360 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007340:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2205      	movs	r2, #5
 800734c:	601a      	str	r2, [r3, #0]
}
 800734e:	bf00      	nop
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	fe010000 	.word	0xfe010000
 8007360:	f8010000 	.word	0xf8010000

08007364 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007364:	b480      	push	{r7}
 8007366:	b089      	sub	sp, #36	@ 0x24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d142      	bne.n	800740e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007388:	e01d      	b.n	80073c6 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d107      	bne.n	80073a0 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800739a:	4013      	ands	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
 800739e:	e00f      	b.n	80073c0 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	0c1b      	lsrs	r3, r3, #16
 80073aa:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	4413      	add	r3, r2
 80073b0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80073b8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073bc:	4013      	ands	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	3301      	adds	r3, #1
 80073c4:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d3dc      	bcc.n	800738a <DMA_List_FindNode+0x26>
 80073d0:	e029      	b.n	8007426 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d107      	bne.n	80073e8 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073e2:	4013      	ands	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	e00f      	b.n	8007408 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	4413      	add	r3, r2
 80073f8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007400:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007404:	4013      	ands	r3, r2
 8007406:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	3301      	adds	r3, #1
 800740c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	429a      	cmp	r2, r3
 8007416:	d206      	bcs.n	8007426 <DMA_List_FindNode+0xc2>
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800741e:	4013      	ands	r3, r2
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	429a      	cmp	r2, r3
 8007424:	d1d5      	bne.n	80073d2 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d008      	beq.n	800743e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007432:	4013      	ands	r3, r2
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	429a      	cmp	r2, r3
 8007438:	d001      	beq.n	800743e <DMA_List_FindNode+0xda>
    {
      return 1U;
 800743a:	2301      	movs	r3, #1
 800743c:	e02b      	b.n	8007496 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	0c1b      	lsrs	r3, r3, #16
 800745a:	041b      	lsls	r3, r3, #16
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	461a      	mov	r2, r3
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00f      	beq.n	8007494 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	461a      	mov	r2, r3
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007480:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007484:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	0c1b      	lsrs	r3, r3, #16
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3724      	adds	r7, #36	@ 0x24
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
	...

080074a4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b089      	sub	sp, #36	@ 0x24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80074b6:	e1ba      	b.n	800782e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	2101      	movs	r1, #1
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	fa01 f303 	lsl.w	r3, r1, r3
 80074c4:	4013      	ands	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 81aa 	beq.w	8007828 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a55      	ldr	r2, [pc, #340]	@ (800762c <HAL_GPIO_Init+0x188>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d15d      	bne.n	8007598 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80074e2:	2201      	movs	r2, #1
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	43db      	mvns	r3, r3
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	4013      	ands	r3, r2
 80074f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f003 0201 	and.w	r2, r3, #1
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	4313      	orrs	r3, r2
 8007504:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800750c:	4a48      	ldr	r2, [pc, #288]	@ (8007630 <HAL_GPIO_Init+0x18c>)
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007514:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007516:	4a46      	ldr	r2, [pc, #280]	@ (8007630 <HAL_GPIO_Init+0x18c>)
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	4413      	add	r3, r2
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	08da      	lsrs	r2, r3, #3
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3208      	adds	r2, #8
 800752a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	220f      	movs	r2, #15
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	43db      	mvns	r3, r3
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	4013      	ands	r3, r2
 8007544:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	f003 0307 	and.w	r3, r3, #7
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	220b      	movs	r2, #11
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	4313      	orrs	r3, r2
 8007558:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	08da      	lsrs	r2, r3, #3
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	3208      	adds	r2, #8
 8007562:	69f9      	ldr	r1, [r7, #28]
 8007564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	2203      	movs	r2, #3
 8007574:	fa02 f303 	lsl.w	r3, r2, r3
 8007578:	43db      	mvns	r3, r3
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	4013      	ands	r3, r2
 800757e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	2202      	movs	r2, #2
 8007586:	fa02 f303 	lsl.w	r3, r2, r3
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	4313      	orrs	r3, r2
 800758e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	e067      	b.n	8007668 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	2b02      	cmp	r3, #2
 800759e:	d003      	beq.n	80075a8 <HAL_GPIO_Init+0x104>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2b12      	cmp	r3, #18
 80075a6:	d145      	bne.n	8007634 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	08da      	lsrs	r2, r3, #3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3208      	adds	r2, #8
 80075b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	220f      	movs	r2, #15
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
 80075c4:	43db      	mvns	r3, r3
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	4013      	ands	r3, r2
 80075ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f003 020f 	and.w	r2, r3, #15
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	08da      	lsrs	r2, r3, #3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3208      	adds	r2, #8
 80075ee:	69f9      	ldr	r1, [r7, #28]
 80075f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	2203      	movs	r2, #3
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	43db      	mvns	r3, r3
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	4013      	ands	r3, r2
 800760a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f003 0203 	and.w	r2, r3, #3
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	4313      	orrs	r3, r2
 8007620:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	e01e      	b.n	8007668 <HAL_GPIO_Init+0x1c4>
 800762a:	bf00      	nop
 800762c:	46020000 	.word	0x46020000
 8007630:	08011bec 	.word	0x08011bec
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	2203      	movs	r2, #3
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	43db      	mvns	r3, r3
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	4013      	ands	r3, r2
 800764a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f003 0203 	and.w	r2, r3, #3
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	4313      	orrs	r3, r2
 8007660:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d00b      	beq.n	8007688 <HAL_GPIO_Init+0x1e4>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d007      	beq.n	8007688 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800767c:	2b11      	cmp	r3, #17
 800767e:	d003      	beq.n	8007688 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b12      	cmp	r3, #18
 8007686:	d130      	bne.n	80076ea <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	2203      	movs	r2, #3
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	43db      	mvns	r3, r3
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	4013      	ands	r3, r2
 800769e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	005b      	lsls	r3, r3, #1
 80076a8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80076be:	2201      	movs	r2, #1
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	43db      	mvns	r3, r3
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	4013      	ands	r3, r2
 80076cc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	091b      	lsrs	r3, r3, #4
 80076d4:	f003 0201 	and.w	r2, r3, #1
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d017      	beq.n	8007722 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	2203      	movs	r2, #3
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	43db      	mvns	r3, r3
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	4013      	ands	r3, r2
 8007708:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	4313      	orrs	r3, r2
 800771a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d07c      	beq.n	8007828 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800772e:	4a47      	ldr	r2, [pc, #284]	@ (800784c <HAL_GPIO_Init+0x3a8>)
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	089b      	lsrs	r3, r3, #2
 8007734:	3318      	adds	r3, #24
 8007736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	220f      	movs	r2, #15
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	43db      	mvns	r3, r3
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	4013      	ands	r3, r2
 8007750:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	0a9a      	lsrs	r2, r3, #10
 8007756:	4b3e      	ldr	r3, [pc, #248]	@ (8007850 <HAL_GPIO_Init+0x3ac>)
 8007758:	4013      	ands	r3, r2
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	f002 0203 	and.w	r2, r2, #3
 8007760:	00d2      	lsls	r2, r2, #3
 8007762:	4093      	lsls	r3, r2
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	4313      	orrs	r3, r2
 8007768:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800776a:	4938      	ldr	r1, [pc, #224]	@ (800784c <HAL_GPIO_Init+0x3a8>)
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	089b      	lsrs	r3, r3, #2
 8007770:	3318      	adds	r3, #24
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007778:	4b34      	ldr	r3, [pc, #208]	@ (800784c <HAL_GPIO_Init+0x3a8>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	43db      	mvns	r3, r3
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	4013      	ands	r3, r2
 8007786:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007794:	69fa      	ldr	r2, [r7, #28]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4313      	orrs	r3, r2
 800779a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800779c:	4a2b      	ldr	r2, [pc, #172]	@ (800784c <HAL_GPIO_Init+0x3a8>)
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80077a2:	4b2a      	ldr	r3, [pc, #168]	@ (800784c <HAL_GPIO_Init+0x3a8>)
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	43db      	mvns	r3, r3
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	4013      	ands	r3, r2
 80077b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80077c6:	4a21      	ldr	r2, [pc, #132]	@ (800784c <HAL_GPIO_Init+0x3a8>)
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80077cc:	4b1f      	ldr	r3, [pc, #124]	@ (800784c <HAL_GPIO_Init+0x3a8>)
 80077ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	43db      	mvns	r3, r3
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	4013      	ands	r3, r2
 80077dc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80077f2:	4a16      	ldr	r2, [pc, #88]	@ (800784c <HAL_GPIO_Init+0x3a8>)
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80077fa:	4b14      	ldr	r3, [pc, #80]	@ (800784c <HAL_GPIO_Init+0x3a8>)
 80077fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007800:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	43db      	mvns	r3, r3
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	4013      	ands	r3, r2
 800780a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007820:	4a0a      	ldr	r2, [pc, #40]	@ (800784c <HAL_GPIO_Init+0x3a8>)
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	3301      	adds	r3, #1
 800782c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	fa22 f303 	lsr.w	r3, r2, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	f47f ae3d 	bne.w	80074b8 <HAL_GPIO_Init+0x14>
  }
}
 800783e:	bf00      	nop
 8007840:	bf00      	nop
 8007842:	3724      	adds	r7, #36	@ 0x24
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	46022000 	.word	0x46022000
 8007850:	002f7f7f 	.word	0x002f7f7f

08007854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	807b      	strh	r3, [r7, #2]
 8007860:	4613      	mov	r3, r2
 8007862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007864:	787b      	ldrb	r3, [r7, #1]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800786a:	887a      	ldrh	r2, [r7, #2]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007870:	e002      	b.n	8007878 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007872:	887a      	ldrh	r2, [r7, #2]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007896:	887a      	ldrh	r2, [r7, #2]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4013      	ands	r3, r2
 800789c:	041a      	lsls	r2, r3, #16
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	43d9      	mvns	r1, r3
 80078a2:	887b      	ldrh	r3, [r7, #2]
 80078a4:	400b      	ands	r3, r1
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	619a      	str	r2, [r3, #24]
}
 80078ac:	bf00      	nop
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80078c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007900 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	88fb      	ldrh	r3, [r7, #6]
 80078c8:	4013      	ands	r3, r2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d006      	beq.n	80078dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80078ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007900 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078d0:	88fb      	ldrh	r3, [r7, #6]
 80078d2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f814 	bl	8007904 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80078dc:	4b08      	ldr	r3, [pc, #32]	@ (8007900 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	4013      	ands	r3, r2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d006      	beq.n	80078f6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80078e8:	4a05      	ldr	r2, [pc, #20]	@ (8007900 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 f812 	bl	800791a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80078f6:	bf00      	nop
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	46022000 	.word	0x46022000

08007904 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	4603      	mov	r3, r0
 800790c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	4603      	mov	r3, r0
 8007922:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e08d      	b.n	8007a5e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d106      	bne.n	800795c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fa f9f0 	bl	8001d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2224      	movs	r2, #36	@ 0x24
 8007960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0201 	bic.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007980:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007990:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d107      	bne.n	80079aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079a6:	609a      	str	r2, [r3, #8]
 80079a8:	e006      	b.n	80079b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80079b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d108      	bne.n	80079d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079ce:	605a      	str	r2, [r3, #4]
 80079d0:	e007      	b.n	80079e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6812      	ldr	r2, [r2, #0]
 80079ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80079f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	691a      	ldr	r2, [r3, #16]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	69d9      	ldr	r1, [r3, #28]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1a      	ldr	r2, [r3, #32]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0201 	orr.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	461a      	mov	r2, r3
 8007a74:	460b      	mov	r3, r1
 8007a76:	817b      	strh	r3, [r7, #10]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	f040 80da 	bne.w	8007c3e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_I2C_Master_Transmit+0x30>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e0d3      	b.n	8007c40 <HAL_I2C_Master_Transmit+0x1d8>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007aa0:	f7fb f8e2 	bl	8002c68 <HAL_GetTick>
 8007aa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	2319      	movs	r3, #25
 8007aac:	2201      	movs	r2, #1
 8007aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fe7d 	bl	80087b2 <I2C_WaitOnFlagUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e0be      	b.n	8007c40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2221      	movs	r2, #33	@ 0x21
 8007ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2210      	movs	r2, #16
 8007ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	893a      	ldrh	r2, [r7, #8]
 8007ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2bff      	cmp	r3, #255	@ 0xff
 8007af2:	d90e      	bls.n	8007b12 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	22ff      	movs	r2, #255	@ 0xff
 8007af8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	8979      	ldrh	r1, [r7, #10]
 8007b02:	4b51      	ldr	r3, [pc, #324]	@ (8007c48 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f001 f814 	bl	8008b38 <I2C_TransferConfig>
 8007b10:	e06c      	b.n	8007bec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	8979      	ldrh	r1, [r7, #10]
 8007b24:	4b48      	ldr	r3, [pc, #288]	@ (8007c48 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f001 f803 	bl	8008b38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007b32:	e05b      	b.n	8007bec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	6a39      	ldr	r1, [r7, #32]
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 fe93 	bl	8008864 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e07b      	b.n	8007c40 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4c:	781a      	ldrb	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d034      	beq.n	8007bec <HAL_I2C_Master_Transmit+0x184>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d130      	bne.n	8007bec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	2200      	movs	r2, #0
 8007b92:	2180      	movs	r1, #128	@ 0x80
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 fe0c 	bl	80087b2 <I2C_WaitOnFlagUntilTimeout>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e04d      	b.n	8007c40 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2bff      	cmp	r3, #255	@ 0xff
 8007bac:	d90e      	bls.n	8007bcc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	22ff      	movs	r2, #255	@ 0xff
 8007bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	8979      	ldrh	r1, [r7, #10]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 ffb7 	bl	8008b38 <I2C_TransferConfig>
 8007bca:	e00f      	b.n	8007bec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	8979      	ldrh	r1, [r7, #10]
 8007bde:	2300      	movs	r3, #0
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 ffa6 	bl	8008b38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d19e      	bne.n	8007b34 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	6a39      	ldr	r1, [r7, #32]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fe79 	bl	80088f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e01a      	b.n	8007c40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6859      	ldr	r1, [r3, #4]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c4c <HAL_I2C_Master_Transmit+0x1e4>)
 8007c1e:	400b      	ands	r3, r1
 8007c20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e000      	b.n	8007c40 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007c3e:	2302      	movs	r3, #2
  }
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	80002000 	.word	0x80002000
 8007c4c:	fe00e800 	.word	0xfe00e800

08007c50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d005      	beq.n	8007c7c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00f      	beq.n	8007cc6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00a      	beq.n	8007cc6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb4:	f043 0201 	orr.w	r2, r3, #1
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cc4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00f      	beq.n	8007cf0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cde:	f043 0208 	orr.w	r2, r3, #8
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007cee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00f      	beq.n	8007d1a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d08:	f043 0202 	orr.w	r2, r3, #2
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d18:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 030b 	and.w	r3, r3, #11
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fbe7 	bl	8008500 <I2C_ITError>
  }
}
 8007d32:	bf00      	nop
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b086      	sub	sp, #24
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dca:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <I2C_Slave_ISR_IT+0x24>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e0e2      	b.n	8007fa4 <I2C_Slave_ISR_IT+0x1ea>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007dfa:	6939      	ldr	r1, [r7, #16]
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 f9b5 	bl	800816c <I2C_ITSlaveCplt>
 8007e02:	e0ca      	b.n	8007f9a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	f003 0310 	and.w	r3, r3, #16
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d04b      	beq.n	8007ea6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d046      	beq.n	8007ea6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d128      	bne.n	8007e74 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b28      	cmp	r3, #40	@ 0x28
 8007e2c:	d108      	bne.n	8007e40 <I2C_Slave_ISR_IT+0x86>
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e34:	d104      	bne.n	8007e40 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e36:	6939      	ldr	r1, [r7, #16]
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f000 fb0d 	bl	8008458 <I2C_ITListenCplt>
 8007e3e:	e031      	b.n	8007ea4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b29      	cmp	r3, #41	@ 0x29
 8007e4a:	d10e      	bne.n	8007e6a <I2C_Slave_ISR_IT+0xb0>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e52:	d00a      	beq.n	8007e6a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2210      	movs	r2, #16
 8007e5a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fc66 	bl	800872e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 f926 	bl	80080b4 <I2C_ITSlaveSeqCplt>
 8007e68:	e01c      	b.n	8007ea4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2210      	movs	r2, #16
 8007e70:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007e72:	e08f      	b.n	8007f94 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2210      	movs	r2, #16
 8007e7a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e80:	f043 0204 	orr.w	r2, r3, #4
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <I2C_Slave_ISR_IT+0xdc>
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e94:	d17e      	bne.n	8007f94 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 fb2f 	bl	8008500 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007ea2:	e077      	b.n	8007f94 <I2C_Slave_ISR_IT+0x1da>
 8007ea4:	e076      	b.n	8007f94 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d02f      	beq.n	8007f10 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d02a      	beq.n	8007f10 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d018      	beq.n	8007ef6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d14b      	bne.n	8007f98 <I2C_Slave_ISR_IT+0x1de>
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f06:	d047      	beq.n	8007f98 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f8d3 	bl	80080b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007f0e:	e043      	b.n	8007f98 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f003 0308 	and.w	r3, r3, #8
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007f24:	6939      	ldr	r1, [r7, #16]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 f840 	bl	8007fac <I2C_ITAddrCplt>
 8007f2c:	e035      	b.n	8007f9a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d030      	beq.n	8007f9a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d02b      	beq.n	8007f9a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d018      	beq.n	8007f7e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007f7c:	e00d      	b.n	8007f9a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f84:	d002      	beq.n	8007f8c <I2C_Slave_ISR_IT+0x1d2>
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d106      	bne.n	8007f9a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f891 	bl	80080b4 <I2C_ITSlaveSeqCplt>
 8007f92:	e002      	b.n	8007f9a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007f94:	bf00      	nop
 8007f96:	e000      	b.n	8007f9a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007f98:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fc2:	2b28      	cmp	r3, #40	@ 0x28
 8007fc4:	d16a      	bne.n	800809c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	0c1b      	lsrs	r3, r3, #16
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	0c1b      	lsrs	r3, r3, #16
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007fe4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ff2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008000:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d138      	bne.n	800807c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800800a:	897b      	ldrh	r3, [r7, #10]
 800800c:	09db      	lsrs	r3, r3, #7
 800800e:	b29a      	uxth	r2, r3
 8008010:	89bb      	ldrh	r3, [r7, #12]
 8008012:	4053      	eors	r3, r2
 8008014:	b29b      	uxth	r3, r3
 8008016:	f003 0306 	and.w	r3, r3, #6
 800801a:	2b00      	cmp	r3, #0
 800801c:	d11c      	bne.n	8008058 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800801e:	897b      	ldrh	r3, [r7, #10]
 8008020:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008030:	2b02      	cmp	r3, #2
 8008032:	d13b      	bne.n	80080ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2208      	movs	r2, #8
 8008040:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800804a:	89ba      	ldrh	r2, [r7, #12]
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fe86 	bl	8007d62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008056:	e029      	b.n	80080ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008058:	893b      	ldrh	r3, [r7, #8]
 800805a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800805c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fd9b 	bl	8008b9c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800806e:	89ba      	ldrh	r2, [r7, #12]
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff fe74 	bl	8007d62 <HAL_I2C_AddrCallback>
}
 800807a:	e017      	b.n	80080ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800807c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fd8b 	bl	8008b9c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800808e:	89ba      	ldrh	r2, [r7, #12]
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff fe64 	bl	8007d62 <HAL_I2C_AddrCallback>
}
 800809a:	e007      	b.n	80080ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2208      	movs	r2, #8
 80080a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80080ac:	bf00      	nop
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	e00c      	b.n	8008102 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d007      	beq.n	8008102 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008100:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b29      	cmp	r3, #41	@ 0x29
 800810c:	d112      	bne.n	8008134 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2228      	movs	r2, #40	@ 0x28
 8008112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2221      	movs	r2, #33	@ 0x21
 800811a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800811c:	2101      	movs	r1, #1
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fd3c 	bl	8008b9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff fe04 	bl	8007d3a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008132:	e017      	b.n	8008164 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b2a      	cmp	r3, #42	@ 0x2a
 800813e:	d111      	bne.n	8008164 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2228      	movs	r2, #40	@ 0x28
 8008144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2222      	movs	r2, #34	@ 0x22
 800814c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800814e:	2102      	movs	r1, #2
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fd23 	bl	8008b9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff fdf5 	bl	8007d4e <HAL_I2C_SlaveRxCpltCallback>
}
 8008164:	bf00      	nop
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800816c:	b590      	push	{r4, r7, lr}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008186:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800818e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2220      	movs	r2, #32
 8008196:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008198:	7afb      	ldrb	r3, [r7, #11]
 800819a:	2b21      	cmp	r3, #33	@ 0x21
 800819c:	d002      	beq.n	80081a4 <I2C_ITSlaveCplt+0x38>
 800819e:	7afb      	ldrb	r3, [r7, #11]
 80081a0:	2b29      	cmp	r3, #41	@ 0x29
 80081a2:	d108      	bne.n	80081b6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80081a4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fcf7 	bl	8008b9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2221      	movs	r2, #33	@ 0x21
 80081b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80081b4:	e019      	b.n	80081ea <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	2b22      	cmp	r3, #34	@ 0x22
 80081ba:	d002      	beq.n	80081c2 <I2C_ITSlaveCplt+0x56>
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	2b2a      	cmp	r3, #42	@ 0x2a
 80081c0:	d108      	bne.n	80081d4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80081c2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fce8 	bl	8008b9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2222      	movs	r2, #34	@ 0x22
 80081d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80081d2:	e00a      	b.n	80081ea <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80081d4:	7afb      	ldrb	r3, [r7, #11]
 80081d6:	2b28      	cmp	r3, #40	@ 0x28
 80081d8:	d107      	bne.n	80081ea <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80081da:	f248 0103 	movw	r1, #32771	@ 0x8003
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fcdc 	bl	8008b9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081f8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6859      	ldr	r1, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	4b92      	ldr	r3, [pc, #584]	@ (8008450 <I2C_ITSlaveCplt+0x2e4>)
 8008206:	400b      	ands	r3, r1
 8008208:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa8f 	bl	800872e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01c      	beq.n	8008254 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008228:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800822e:	2b00      	cmp	r3, #0
 8008230:	d031      	beq.n	8008296 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800823a:	b29c      	uxth	r4, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fc2f 	bl	8006aa4 <HAL_DMAEx_GetFifoLevel>
 8008246:	4603      	mov	r3, r0
 8008248:	b29b      	uxth	r3, r3
 800824a:	4423      	add	r3, r4
 800824c:	b29a      	uxth	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008252:	e020      	b.n	8008296 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01b      	beq.n	8008296 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800826c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00f      	beq.n	8008296 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800827e:	b29c      	uxth	r4, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fc0d 	bl	8006aa4 <HAL_DMAEx_GetFifoLevel>
 800828a:	4603      	mov	r3, r0
 800828c:	b29b      	uxth	r3, r3
 800828e:	4423      	add	r3, r4
 8008290:	b29a      	uxth	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b00      	cmp	r3, #0
 800829e:	d020      	beq.n	80082e2 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f023 0304 	bic.w	r3, r3, #4
 80082a6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00c      	beq.n	80082e2 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082cc:	3b01      	subs	r3, #1
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	b29a      	uxth	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f0:	f043 0204 	orr.w	r2, r3, #4
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f003 0310 	and.w	r3, r3, #16
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d049      	beq.n	8008396 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008308:	2b00      	cmp	r3, #0
 800830a:	d044      	beq.n	8008396 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008310:	b29b      	uxth	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d128      	bne.n	8008368 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b28      	cmp	r3, #40	@ 0x28
 8008320:	d108      	bne.n	8008334 <I2C_ITSlaveCplt+0x1c8>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008328:	d104      	bne.n	8008334 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800832a:	6979      	ldr	r1, [r7, #20]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f893 	bl	8008458 <I2C_ITListenCplt>
 8008332:	e030      	b.n	8008396 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b29      	cmp	r3, #41	@ 0x29
 800833e:	d10e      	bne.n	800835e <I2C_ITSlaveCplt+0x1f2>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008346:	d00a      	beq.n	800835e <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2210      	movs	r2, #16
 800834e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f9ec 	bl	800872e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff feac 	bl	80080b4 <I2C_ITSlaveSeqCplt>
 800835c:	e01b      	b.n	8008396 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2210      	movs	r2, #16
 8008364:	61da      	str	r2, [r3, #28]
 8008366:	e016      	b.n	8008396 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2210      	movs	r2, #16
 800836e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008374:	f043 0204 	orr.w	r2, r3, #4
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <I2C_ITSlaveCplt+0x21e>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008388:	d105      	bne.n	8008396 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f8b5 	bl	8008500 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d010      	beq.n	80083ce <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8a4 	bl	8008500 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b28      	cmp	r3, #40	@ 0x28
 80083c2:	d141      	bne.n	8008448 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80083c4:	6979      	ldr	r1, [r7, #20]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f846 	bl	8008458 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083cc:	e03c      	b.n	8008448 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80083d6:	d014      	beq.n	8008402 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff fe6b 	bl	80080b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008454 <I2C_ITSlaveCplt+0x2e8>)
 80083e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff fcbf 	bl	8007d7e <HAL_I2C_ListenCpltCallback>
}
 8008400:	e022      	b.n	8008448 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b22      	cmp	r3, #34	@ 0x22
 800840c:	d10e      	bne.n	800842c <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2220      	movs	r2, #32
 8008412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7ff fc92 	bl	8007d4e <HAL_I2C_SlaveRxCpltCallback>
}
 800842a:	e00d      	b.n	8008448 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fc79 	bl	8007d3a <HAL_I2C_SlaveTxCpltCallback>
}
 8008448:	bf00      	nop
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	bd90      	pop	{r4, r7, pc}
 8008450:	fe00e800 	.word	0xfe00e800
 8008454:	ffff0000 	.word	0xffff0000

08008458 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a25      	ldr	r2, [pc, #148]	@ (80084fc <I2C_ITListenCplt+0xa4>)
 8008466:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	f003 0304 	and.w	r3, r3, #4
 800848a:	2b00      	cmp	r3, #0
 800848c:	d022      	beq.n	80084d4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d012      	beq.n	80084d4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084b2:	3b01      	subs	r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084cc:	f043 0204 	orr.w	r2, r3, #4
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80084d4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fb5f 	bl	8008b9c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2210      	movs	r2, #16
 80084e4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff fc45 	bl	8007d7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	ffff0000 	.word	0xffff0000

08008500 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008510:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a6d      	ldr	r2, [pc, #436]	@ (80086d4 <I2C_ITError+0x1d4>)
 800851e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	2b28      	cmp	r3, #40	@ 0x28
 8008536:	d005      	beq.n	8008544 <I2C_ITError+0x44>
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	2b29      	cmp	r3, #41	@ 0x29
 800853c:	d002      	beq.n	8008544 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	2b2a      	cmp	r3, #42	@ 0x2a
 8008542:	d10b      	bne.n	800855c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008544:	2103      	movs	r1, #3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fb28 	bl	8008b9c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2228      	movs	r2, #40	@ 0x28
 8008550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a60      	ldr	r2, [pc, #384]	@ (80086d8 <I2C_ITError+0x1d8>)
 8008558:	635a      	str	r2, [r3, #52]	@ 0x34
 800855a:	e030      	b.n	80085be <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800855c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fb1b 	bl	8008b9c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f8e1 	bl	800872e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b60      	cmp	r3, #96	@ 0x60
 8008576:	d01f      	beq.n	80085b8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2220      	movs	r2, #32
 800857c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b20      	cmp	r3, #32
 800858c:	d114      	bne.n	80085b8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	f003 0310 	and.w	r3, r3, #16
 8008598:	2b10      	cmp	r3, #16
 800859a:	d109      	bne.n	80085b0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2210      	movs	r2, #16
 80085a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a8:	f043 0204 	orr.w	r2, r3, #4
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2220      	movs	r2, #32
 80085b6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d039      	beq.n	8008640 <I2C_ITError+0x140>
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b11      	cmp	r3, #17
 80085d0:	d002      	beq.n	80085d8 <I2C_ITError+0xd8>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b21      	cmp	r3, #33	@ 0x21
 80085d6:	d133      	bne.n	8008640 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085e6:	d107      	bne.n	80085f8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80085f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fd faa5 	bl	8005b4c <HAL_DMA_GetState>
 8008602:	4603      	mov	r3, r0
 8008604:	2b01      	cmp	r3, #1
 8008606:	d017      	beq.n	8008638 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	4a33      	ldr	r2, [pc, #204]	@ (80086dc <I2C_ITError+0x1dc>)
 800860e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861c:	4618      	mov	r0, r3
 800861e:	f7fd f90b 	bl	8005838 <HAL_DMA_Abort_IT>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d04d      	beq.n	80086c4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008632:	4610      	mov	r0, r2
 8008634:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008636:	e045      	b.n	80086c4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f851 	bl	80086e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800863e:	e041      	b.n	80086c4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d039      	beq.n	80086bc <I2C_ITError+0x1bc>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2b12      	cmp	r3, #18
 800864c:	d002      	beq.n	8008654 <I2C_ITError+0x154>
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b22      	cmp	r3, #34	@ 0x22
 8008652:	d133      	bne.n	80086bc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800865e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008662:	d107      	bne.n	8008674 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008672:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008678:	4618      	mov	r0, r3
 800867a:	f7fd fa67 	bl	8005b4c <HAL_DMA_GetState>
 800867e:	4603      	mov	r3, r0
 8008680:	2b01      	cmp	r3, #1
 8008682:	d017      	beq.n	80086b4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008688:	4a14      	ldr	r2, [pc, #80]	@ (80086dc <I2C_ITError+0x1dc>)
 800868a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008698:	4618      	mov	r0, r3
 800869a:	f7fd f8cd 	bl	8005838 <HAL_DMA_Abort_IT>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d011      	beq.n	80086c8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086ae:	4610      	mov	r0, r2
 80086b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086b2:	e009      	b.n	80086c8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f813 	bl	80086e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086ba:	e005      	b.n	80086c8 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f80f 	bl	80086e0 <I2C_TreatErrorCallback>
  }
}
 80086c2:	e002      	b.n	80086ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086c4:	bf00      	nop
 80086c6:	e000      	b.n	80086ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086c8:	bf00      	nop
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	ffff0000 	.word	0xffff0000
 80086d8:	08007dbb 	.word	0x08007dbb
 80086dc:	08008777 	.word	0x08008777

080086e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b60      	cmp	r3, #96	@ 0x60
 80086f2:	d10e      	bne.n	8008712 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2220      	movs	r2, #32
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff fb4b 	bl	8007da6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008710:	e009      	b.n	8008726 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff fb36 	bl	8007d92 <HAL_I2C_ErrorCallback>
}
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b02      	cmp	r3, #2
 8008742:	d103      	bne.n	800874c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2200      	movs	r2, #0
 800874a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b01      	cmp	r3, #1
 8008758:	d007      	beq.n	800876a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699a      	ldr	r2, [r3, #24]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f042 0201 	orr.w	r2, r2, #1
 8008768:	619a      	str	r2, [r3, #24]
  }
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008782:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008790:	2200      	movs	r2, #0
 8008792:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a0:	2200      	movs	r2, #0
 80087a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7ff ff9b 	bl	80086e0 <I2C_TreatErrorCallback>
}
 80087aa:	bf00      	nop
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	4613      	mov	r3, r2
 80087c0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087c2:	e03b      	b.n	800883c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 f8d5 	bl	8008978 <I2C_IsErrorOccurred>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e041      	b.n	800885c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087de:	d02d      	beq.n	800883c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e0:	f7fa fa42 	bl	8002c68 <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d302      	bcc.n	80087f6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d122      	bne.n	800883c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4013      	ands	r3, r2
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	429a      	cmp	r2, r3
 8008804:	bf0c      	ite	eq
 8008806:	2301      	moveq	r3, #1
 8008808:	2300      	movne	r3, #0
 800880a:	b2db      	uxtb	r3, r3
 800880c:	461a      	mov	r2, r3
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	429a      	cmp	r2, r3
 8008812:	d113      	bne.n	800883c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008818:	f043 0220 	orr.w	r2, r3, #32
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2220      	movs	r2, #32
 8008824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e00f      	b.n	800885c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699a      	ldr	r2, [r3, #24]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	4013      	ands	r3, r2
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	429a      	cmp	r2, r3
 800884a:	bf0c      	ite	eq
 800884c:	2301      	moveq	r3, #1
 800884e:	2300      	movne	r3, #0
 8008850:	b2db      	uxtb	r3, r3
 8008852:	461a      	mov	r2, r3
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	429a      	cmp	r2, r3
 8008858:	d0b4      	beq.n	80087c4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008870:	e033      	b.n	80088da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f87e 	bl	8008978 <I2C_IsErrorOccurred>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e031      	b.n	80088ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888c:	d025      	beq.n	80088da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800888e:	f7fa f9eb 	bl	8002c68 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	429a      	cmp	r2, r3
 800889c:	d302      	bcc.n	80088a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d11a      	bne.n	80088da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d013      	beq.n	80088da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088b6:	f043 0220 	orr.w	r2, r3, #32
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2220      	movs	r2, #32
 80088c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e007      	b.n	80088ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d1c4      	bne.n	8008872 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088fe:	e02f      	b.n	8008960 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f837 	bl	8008978 <I2C_IsErrorOccurred>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e02d      	b.n	8008970 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008914:	f7fa f9a8 	bl	8002c68 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	429a      	cmp	r2, r3
 8008922:	d302      	bcc.n	800892a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d11a      	bne.n	8008960 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b20      	cmp	r3, #32
 8008936:	d013      	beq.n	8008960 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893c:	f043 0220 	orr.w	r2, r3, #32
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2220      	movs	r2, #32
 8008948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e007      	b.n	8008970 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	f003 0320 	and.w	r3, r3, #32
 800896a:	2b20      	cmp	r3, #32
 800896c:	d1c8      	bne.n	8008900 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	@ 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	f003 0310 	and.w	r3, r3, #16
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d068      	beq.n	8008a76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2210      	movs	r2, #16
 80089aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089ac:	e049      	b.n	8008a42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b4:	d045      	beq.n	8008a42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80089b6:	f7fa f957 	bl	8002c68 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d302      	bcc.n	80089cc <I2C_IsErrorOccurred+0x54>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d13a      	bne.n	8008a42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089ee:	d121      	bne.n	8008a34 <I2C_IsErrorOccurred+0xbc>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089f6:	d01d      	beq.n	8008a34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80089f8:	7cfb      	ldrb	r3, [r7, #19]
 80089fa:	2b20      	cmp	r3, #32
 80089fc:	d01a      	beq.n	8008a34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008a0e:	f7fa f92b 	bl	8002c68 <HAL_GetTick>
 8008a12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a14:	e00e      	b.n	8008a34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008a16:	f7fa f927 	bl	8002c68 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	2b19      	cmp	r3, #25
 8008a22:	d907      	bls.n	8008a34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	f043 0320 	orr.w	r3, r3, #32
 8008a2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008a32:	e006      	b.n	8008a42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d1e9      	bne.n	8008a16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f003 0320 	and.w	r3, r3, #32
 8008a4c:	2b20      	cmp	r3, #32
 8008a4e:	d003      	beq.n	8008a58 <I2C_IsErrorOccurred+0xe0>
 8008a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0aa      	beq.n	80089ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d103      	bne.n	8008a68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2220      	movs	r2, #32
 8008a66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	f043 0304 	orr.w	r3, r3, #4
 8008a6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00b      	beq.n	8008aa0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	f043 0301 	orr.w	r3, r3, #1
 8008a8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00b      	beq.n	8008ac2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	f043 0308 	orr.w	r3, r3, #8
 8008ab0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008aba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00b      	beq.n	8008ae4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	f043 0302 	orr.w	r3, r3, #2
 8008ad2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008adc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01c      	beq.n	8008b26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f7ff fe1e 	bl	800872e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6859      	ldr	r1, [r3, #4]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <I2C_IsErrorOccurred+0x1bc>)
 8008afe:	400b      	ands	r3, r1
 8008b00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008b26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3728      	adds	r7, #40	@ 0x28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	fe00e800 	.word	0xfe00e800

08008b38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	607b      	str	r3, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	817b      	strh	r3, [r7, #10]
 8008b46:	4613      	mov	r3, r2
 8008b48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b4a:	897b      	ldrh	r3, [r7, #10]
 8008b4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b50:	7a7b      	ldrb	r3, [r7, #9]
 8008b52:	041b      	lsls	r3, r3, #16
 8008b54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	0d5b      	lsrs	r3, r3, #21
 8008b72:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008b76:	4b08      	ldr	r3, [pc, #32]	@ (8008b98 <I2C_TransferConfig+0x60>)
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	43db      	mvns	r3, r3
 8008b7c:	ea02 0103 	and.w	r1, r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	430a      	orrs	r2, r1
 8008b88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b8a:	bf00      	nop
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	03ff63ff 	.word	0x03ff63ff

08008b9c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008bac:	887b      	ldrh	r3, [r7, #2]
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00f      	beq.n	8008bd6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008bbc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008bca:	2b28      	cmp	r3, #40	@ 0x28
 8008bcc:	d003      	beq.n	8008bd6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008bd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008bd6:	887b      	ldrh	r3, [r7, #2]
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00f      	beq.n	8008c00 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008be6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008bf4:	2b28      	cmp	r3, #40	@ 0x28
 8008bf6:	d003      	beq.n	8008c00 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008bfe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008c00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da03      	bge.n	8008c10 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008c0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c10:	887b      	ldrh	r3, [r7, #2]
 8008c12:	2b10      	cmp	r3, #16
 8008c14:	d103      	bne.n	8008c1e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008c1c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c1e:	887b      	ldrh	r3, [r7, #2]
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	d103      	bne.n	8008c2c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f043 0320 	orr.w	r3, r3, #32
 8008c2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008c2c:	887b      	ldrh	r3, [r7, #2]
 8008c2e:	2b40      	cmp	r3, #64	@ 0x40
 8008c30:	d103      	bne.n	8008c3a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c38:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6819      	ldr	r1, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	43da      	mvns	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	400a      	ands	r2, r1
 8008c4a:	601a      	str	r2, [r3, #0]
}
 8008c4c:	bf00      	nop
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d138      	bne.n	8008ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e032      	b.n	8008ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2224      	movs	r2, #36	@ 0x24
 8008c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6819      	ldr	r1, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0201 	orr.w	r2, r2, #1
 8008cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	e000      	b.n	8008ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ce0:	2302      	movs	r3, #2
  }
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d139      	bne.n	8008d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d101      	bne.n	8008d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e033      	b.n	8008d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2224      	movs	r2, #36	@ 0x24
 8008d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0201 	bic.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	021b      	lsls	r3, r3, #8
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0201 	orr.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e000      	b.n	8008d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d78:	2302      	movs	r3, #2
  }
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
	...

08008d88 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008d94:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	73fb      	strb	r3, [r7, #15]
 8008da4:	e007      	b.n	8008db6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008da6:	4b07      	ldr	r3, [pc, #28]	@ (8008dc4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f023 0204 	bic.w	r2, r3, #4
 8008dae:	4905      	ldr	r1, [pc, #20]	@ (8008dc4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	40030400 	.word	0x40030400

08008dc8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008dcc:	4b05      	ldr	r3, [pc, #20]	@ (8008de4 <HAL_ICACHE_Enable+0x1c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a04      	ldr	r2, [pc, #16]	@ (8008de4 <HAL_ICACHE_Enable+0x1c>)
 8008dd2:	f043 0301 	orr.w	r3, r3, #1
 8008dd6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	40030400 	.word	0x40030400

08008de8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e0bf      	b.n	8008f7a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d106      	bne.n	8008e14 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7f9 f882 	bl	8001f18 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699a      	ldr	r2, [r3, #24]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008e2a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6999      	ldr	r1, [r3, #24]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e40:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6899      	ldr	r1, [r3, #8]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8008f84 <HAL_LTDC_Init+0x19c>)
 8008e5c:	400b      	ands	r3, r1
 8008e5e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	041b      	lsls	r3, r3, #16
 8008e66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6899      	ldr	r1, [r3, #8]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	699a      	ldr	r2, [r3, #24]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	431a      	orrs	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68d9      	ldr	r1, [r3, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	4b3e      	ldr	r3, [pc, #248]	@ (8008f84 <HAL_LTDC_Init+0x19c>)
 8008e8a:	400b      	ands	r3, r1
 8008e8c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	041b      	lsls	r3, r3, #16
 8008e94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68d9      	ldr	r1, [r3, #12]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a1a      	ldr	r2, [r3, #32]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6919      	ldr	r1, [r3, #16]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	4b33      	ldr	r3, [pc, #204]	@ (8008f84 <HAL_LTDC_Init+0x19c>)
 8008eb8:	400b      	ands	r3, r1
 8008eba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec0:	041b      	lsls	r3, r3, #16
 8008ec2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6919      	ldr	r1, [r3, #16]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6959      	ldr	r1, [r3, #20]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	4b27      	ldr	r3, [pc, #156]	@ (8008f84 <HAL_LTDC_Init+0x19c>)
 8008ee6:	400b      	ands	r3, r1
 8008ee8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6959      	ldr	r1, [r3, #20]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	431a      	orrs	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f0e:	021b      	lsls	r3, r3, #8
 8008f10:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008f18:	041b      	lsls	r3, r3, #16
 8008f1a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0206 	orr.w	r2, r2, #6
 8008f56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	699a      	ldr	r2, [r3, #24]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	f000f800 	.word	0xf000f800

08008f88 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f9e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d023      	beq.n	8008ff2 <HAL_LTDC_IRQHandler+0x6a>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d01e      	beq.n	8008ff2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 0204 	bic.w	r2, r2, #4
 8008fc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2204      	movs	r2, #4
 8008fca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fd2:	f043 0201 	orr.w	r2, r3, #1
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2204      	movs	r2, #4
 8008fe0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f86f 	bl	80090d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f003 0302 	and.w	r3, r3, #2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d023      	beq.n	8009044 <HAL_LTDC_IRQHandler+0xbc>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d01e      	beq.n	8009044 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 0202 	bic.w	r2, r2, #2
 8009014:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2202      	movs	r2, #2
 800901c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009024:	f043 0202 	orr.w	r2, r3, #2
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2204      	movs	r2, #4
 8009032:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f846 	bl	80090d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01b      	beq.n	8009086 <HAL_LTDC_IRQHandler+0xfe>
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d016      	beq.n	8009086 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0201 	bic.w	r2, r2, #1
 8009066:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2201      	movs	r2, #1
 800906e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f82f 	bl	80090e4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f003 0308 	and.w	r3, r3, #8
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01b      	beq.n	80090c8 <HAL_LTDC_IRQHandler+0x140>
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f003 0308 	and.w	r3, r3, #8
 8009096:	2b00      	cmp	r3, #0
 8009098:	d016      	beq.n	80090c8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 0208 	bic.w	r2, r2, #8
 80090a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2208      	movs	r2, #8
 80090b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f818 	bl	80090f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80090c8:	bf00      	nop
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800910c:	b5b0      	push	{r4, r5, r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <HAL_LTDC_ConfigLayer+0x1a>
 8009122:	2302      	movs	r3, #2
 8009124:	e02c      	b.n	8009180 <HAL_LTDC_ConfigLayer+0x74>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2202      	movs	r2, #2
 8009132:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2134      	movs	r1, #52	@ 0x34
 800913c:	fb01 f303 	mul.w	r3, r1, r3
 8009140:	4413      	add	r3, r2
 8009142:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4614      	mov	r4, r2
 800914a:	461d      	mov	r5, r3
 800914c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800914e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	68b9      	ldr	r1, [r7, #8]
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 f811 	bl	8009188 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2201      	movs	r2, #1
 800916c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bdb0      	pop	{r4, r5, r7, pc}

08009188 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009188:	b480      	push	{r7}
 800918a:	b089      	sub	sp, #36	@ 0x24
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	0c1b      	lsrs	r3, r3, #16
 80091a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091a4:	4413      	add	r3, r2
 80091a6:	041b      	lsls	r3, r3, #16
 80091a8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	01db      	lsls	r3, r3, #7
 80091b4:	4413      	add	r3, r2
 80091b6:	3384      	adds	r3, #132	@ 0x84
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	6812      	ldr	r2, [r2, #0]
 80091be:	4611      	mov	r1, r2
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	01d2      	lsls	r2, r2, #7
 80091c4:	440a      	add	r2, r1
 80091c6:	3284      	adds	r2, #132	@ 0x84
 80091c8:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80091cc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	0c1b      	lsrs	r3, r3, #16
 80091da:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091de:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80091e0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4619      	mov	r1, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	01db      	lsls	r3, r3, #7
 80091ec:	440b      	add	r3, r1
 80091ee:	3384      	adds	r3, #132	@ 0x84
 80091f0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091f6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	68da      	ldr	r2, [r3, #12]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009206:	4413      	add	r3, r2
 8009208:	041b      	lsls	r3, r3, #16
 800920a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	461a      	mov	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	01db      	lsls	r3, r3, #7
 8009216:	4413      	add	r3, r2
 8009218:	3384      	adds	r3, #132	@ 0x84
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	6812      	ldr	r2, [r2, #0]
 8009220:	4611      	mov	r1, r2
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	01d2      	lsls	r2, r2, #7
 8009226:	440a      	add	r2, r1
 8009228:	3284      	adds	r2, #132	@ 0x84
 800922a:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800922e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800923e:	4413      	add	r3, r2
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4619      	mov	r1, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	01db      	lsls	r3, r3, #7
 800924c:	440b      	add	r3, r1
 800924e:	3384      	adds	r3, #132	@ 0x84
 8009250:	4619      	mov	r1, r3
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4313      	orrs	r3, r2
 8009256:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	01db      	lsls	r3, r3, #7
 8009262:	4413      	add	r3, r2
 8009264:	3384      	adds	r3, #132	@ 0x84
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	6812      	ldr	r2, [r2, #0]
 800926c:	4611      	mov	r1, r2
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	01d2      	lsls	r2, r2, #7
 8009272:	440a      	add	r2, r1
 8009274:	3284      	adds	r2, #132	@ 0x84
 8009276:	f023 0307 	bic.w	r3, r3, #7
 800927a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	01db      	lsls	r3, r3, #7
 8009286:	4413      	add	r3, r2
 8009288:	3384      	adds	r3, #132	@ 0x84
 800928a:	461a      	mov	r2, r3
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009298:	021b      	lsls	r3, r3, #8
 800929a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80092a2:	041b      	lsls	r3, r3, #16
 80092a4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	061b      	lsls	r3, r3, #24
 80092ac:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092b4:	461a      	mov	r2, r3
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	431a      	orrs	r2, r3
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	431a      	orrs	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4619      	mov	r1, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	01db      	lsls	r3, r3, #7
 80092c8:	440b      	add	r3, r1
 80092ca:	3384      	adds	r3, #132	@ 0x84
 80092cc:	4619      	mov	r1, r3
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	01db      	lsls	r3, r3, #7
 80092de:	4413      	add	r3, r2
 80092e0:	3384      	adds	r3, #132	@ 0x84
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	6812      	ldr	r2, [r2, #0]
 80092e8:	4611      	mov	r1, r2
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	01d2      	lsls	r2, r2, #7
 80092ee:	440a      	add	r2, r1
 80092f0:	3284      	adds	r2, #132	@ 0x84
 80092f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80092f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	461a      	mov	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	01db      	lsls	r3, r3, #7
 8009302:	4413      	add	r3, r2
 8009304:	3384      	adds	r3, #132	@ 0x84
 8009306:	461a      	mov	r2, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	695b      	ldr	r3, [r3, #20]
 800930c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	01db      	lsls	r3, r3, #7
 8009318:	4413      	add	r3, r2
 800931a:	3384      	adds	r3, #132	@ 0x84
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	6812      	ldr	r2, [r2, #0]
 8009322:	4611      	mov	r1, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	01d2      	lsls	r2, r2, #7
 8009328:	440a      	add	r2, r1
 800932a:	3284      	adds	r2, #132	@ 0x84
 800932c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009330:	f023 0307 	bic.w	r3, r3, #7
 8009334:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	69da      	ldr	r2, [r3, #28]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	68f9      	ldr	r1, [r7, #12]
 8009340:	6809      	ldr	r1, [r1, #0]
 8009342:	4608      	mov	r0, r1
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	01c9      	lsls	r1, r1, #7
 8009348:	4401      	add	r1, r0
 800934a:	3184      	adds	r1, #132	@ 0x84
 800934c:	4313      	orrs	r3, r2
 800934e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	461a      	mov	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	01db      	lsls	r3, r3, #7
 800935a:	4413      	add	r3, r2
 800935c:	3384      	adds	r3, #132	@ 0x84
 800935e:	461a      	mov	r2, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009364:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800936e:	2304      	movs	r3, #4
 8009370:	61fb      	str	r3, [r7, #28]
 8009372:	e01b      	b.n	80093ac <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d102      	bne.n	8009382 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800937c:	2303      	movs	r3, #3
 800937e:	61fb      	str	r3, [r7, #28]
 8009380:	e014      	b.n	80093ac <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b04      	cmp	r3, #4
 8009388:	d00b      	beq.n	80093a2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800938e:	2b02      	cmp	r3, #2
 8009390:	d007      	beq.n	80093a2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009396:	2b03      	cmp	r3, #3
 8009398:	d003      	beq.n	80093a2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800939e:	2b07      	cmp	r3, #7
 80093a0:	d102      	bne.n	80093a8 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 80093a2:	2302      	movs	r3, #2
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	e001      	b.n	80093ac <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 80093a8:	2301      	movs	r3, #1
 80093aa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	01db      	lsls	r3, r3, #7
 80093b6:	4413      	add	r3, r2
 80093b8:	3384      	adds	r3, #132	@ 0x84
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	6812      	ldr	r2, [r2, #0]
 80093c0:	4611      	mov	r1, r2
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	01d2      	lsls	r2, r2, #7
 80093c6:	440a      	add	r2, r1
 80093c8:	3284      	adds	r2, #132	@ 0x84
 80093ca:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80093ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	fb02 f303 	mul.w	r3, r2, r3
 80093da:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	6859      	ldr	r1, [r3, #4]
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	1acb      	subs	r3, r1, r3
 80093e6:	69f9      	ldr	r1, [r7, #28]
 80093e8:	fb01 f303 	mul.w	r3, r1, r3
 80093ec:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	6809      	ldr	r1, [r1, #0]
 80093f2:	4608      	mov	r0, r1
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	01c9      	lsls	r1, r1, #7
 80093f8:	4401      	add	r1, r0
 80093fa:	3184      	adds	r1, #132	@ 0x84
 80093fc:	4313      	orrs	r3, r2
 80093fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	01db      	lsls	r3, r3, #7
 800940a:	4413      	add	r3, r2
 800940c:	3384      	adds	r3, #132	@ 0x84
 800940e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	6812      	ldr	r2, [r2, #0]
 8009414:	4611      	mov	r1, r2
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	01d2      	lsls	r2, r2, #7
 800941a:	440a      	add	r2, r1
 800941c:	3284      	adds	r2, #132	@ 0x84
 800941e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009422:	f023 0307 	bic.w	r3, r3, #7
 8009426:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	01db      	lsls	r3, r3, #7
 8009432:	4413      	add	r3, r2
 8009434:	3384      	adds	r3, #132	@ 0x84
 8009436:	461a      	mov	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	01db      	lsls	r3, r3, #7
 8009448:	4413      	add	r3, r2
 800944a:	3384      	adds	r3, #132	@ 0x84
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	4611      	mov	r1, r2
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	01d2      	lsls	r2, r2, #7
 8009458:	440a      	add	r2, r1
 800945a:	3284      	adds	r2, #132	@ 0x84
 800945c:	f043 0301 	orr.w	r3, r3, #1
 8009460:	6013      	str	r3, [r2, #0]
}
 8009462:	bf00      	nop
 8009464:	3724      	adds	r7, #36	@ 0x24
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b086      	sub	sp, #24
 8009472:	af02      	add	r7, sp, #8
 8009474:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e0fe      	b.n	800967e <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7f8 ffd9 	bl	800244c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2203      	movs	r2, #3
 800949e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f008 f895 	bl	80115d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	7c1a      	ldrb	r2, [r3, #16]
 80094b4:	f88d 2000 	strb.w	r2, [sp]
 80094b8:	3304      	adds	r3, #4
 80094ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094bc:	f008 f85c 	bl	8011578 <USB_CoreInit>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2202      	movs	r2, #2
 80094ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e0d5      	b.n	800967e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2100      	movs	r1, #0
 80094d8:	4618      	mov	r0, r3
 80094da:	f008 f88d 	bl	80115f8 <USB_SetCurrentMode>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d005      	beq.n	80094f0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2202      	movs	r2, #2
 80094e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e0c6      	b.n	800967e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]
 80094f4:	e04a      	b.n	800958c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80094f6:	7bfa      	ldrb	r2, [r7, #15]
 80094f8:	6879      	ldr	r1, [r7, #4]
 80094fa:	4613      	mov	r3, r2
 80094fc:	00db      	lsls	r3, r3, #3
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	440b      	add	r3, r1
 8009504:	3315      	adds	r3, #21
 8009506:	2201      	movs	r2, #1
 8009508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800950a:	7bfa      	ldrb	r2, [r7, #15]
 800950c:	6879      	ldr	r1, [r7, #4]
 800950e:	4613      	mov	r3, r2
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	440b      	add	r3, r1
 8009518:	3314      	adds	r3, #20
 800951a:	7bfa      	ldrb	r2, [r7, #15]
 800951c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800951e:	7bfa      	ldrb	r2, [r7, #15]
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	b298      	uxth	r0, r3
 8009524:	6879      	ldr	r1, [r7, #4]
 8009526:	4613      	mov	r3, r2
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	440b      	add	r3, r1
 8009530:	332e      	adds	r3, #46	@ 0x2e
 8009532:	4602      	mov	r2, r0
 8009534:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009536:	7bfa      	ldrb	r2, [r7, #15]
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	4613      	mov	r3, r2
 800953c:	00db      	lsls	r3, r3, #3
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	440b      	add	r3, r1
 8009544:	3318      	adds	r3, #24
 8009546:	2200      	movs	r2, #0
 8009548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800954a:	7bfa      	ldrb	r2, [r7, #15]
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	4613      	mov	r3, r2
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	440b      	add	r3, r1
 8009558:	331c      	adds	r3, #28
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800955e:	7bfa      	ldrb	r2, [r7, #15]
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	4613      	mov	r3, r2
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	440b      	add	r3, r1
 800956c:	3320      	adds	r3, #32
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009572:	7bfa      	ldrb	r2, [r7, #15]
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	4613      	mov	r3, r2
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	440b      	add	r3, r1
 8009580:	3324      	adds	r3, #36	@ 0x24
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009586:	7bfb      	ldrb	r3, [r7, #15]
 8009588:	3301      	adds	r3, #1
 800958a:	73fb      	strb	r3, [r7, #15]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	791b      	ldrb	r3, [r3, #4]
 8009590:	7bfa      	ldrb	r2, [r7, #15]
 8009592:	429a      	cmp	r2, r3
 8009594:	d3af      	bcc.n	80094f6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]
 800959a:	e044      	b.n	8009626 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800959c:	7bfa      	ldrb	r2, [r7, #15]
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	4613      	mov	r3, r2
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	440b      	add	r3, r1
 80095aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80095ae:	2200      	movs	r2, #0
 80095b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80095b2:	7bfa      	ldrb	r2, [r7, #15]
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	00db      	lsls	r3, r3, #3
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80095c4:	7bfa      	ldrb	r2, [r7, #15]
 80095c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095c8:	7bfa      	ldrb	r2, [r7, #15]
 80095ca:	6879      	ldr	r1, [r7, #4]
 80095cc:	4613      	mov	r3, r2
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	440b      	add	r3, r1
 80095d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095de:	7bfa      	ldrb	r2, [r7, #15]
 80095e0:	6879      	ldr	r1, [r7, #4]
 80095e2:	4613      	mov	r3, r2
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80095f0:	2200      	movs	r2, #0
 80095f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095f4:	7bfa      	ldrb	r2, [r7, #15]
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	4613      	mov	r3, r2
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	440b      	add	r3, r1
 8009602:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800960a:	7bfa      	ldrb	r2, [r7, #15]
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	4613      	mov	r3, r2
 8009610:	00db      	lsls	r3, r3, #3
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	440b      	add	r3, r1
 8009618:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	3301      	adds	r3, #1
 8009624:	73fb      	strb	r3, [r7, #15]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	791b      	ldrb	r3, [r3, #4]
 800962a:	7bfa      	ldrb	r2, [r7, #15]
 800962c:	429a      	cmp	r2, r3
 800962e:	d3b5      	bcc.n	800959c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6818      	ldr	r0, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7c1a      	ldrb	r2, [r3, #16]
 8009638:	f88d 2000 	strb.w	r2, [sp]
 800963c:	3304      	adds	r3, #4
 800963e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009640:	f008 f826 	bl	8011690 <USB_DevInit>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d005      	beq.n	8009656 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2202      	movs	r2, #2
 800964e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e013      	b.n	800967e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	7b1b      	ldrb	r3, [r3, #12]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d102      	bne.n	8009672 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f80a 	bl	8009686 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4618      	mov	r0, r3
 8009678:	f008 f9f3 	bl	8011a62 <USB_DevDisconnect>

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009686:	b480      	push	{r7}
 8009688:	b085      	sub	sp, #20
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096b8:	f043 0303 	orr.w	r3, r3, #3
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
	...

080096d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80096d4:	4b05      	ldr	r3, [pc, #20]	@ (80096ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80096d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d8:	4a04      	ldr	r2, [pc, #16]	@ (80096ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80096da:	f043 0301 	orr.w	r3, r3, #1
 80096de:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80096e0:	bf00      	nop
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	46020800 	.word	0x46020800

080096f0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80096f8:	4b39      	ldr	r3, [pc, #228]	@ (80097e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009700:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	429a      	cmp	r2, r3
 8009708:	d10b      	bne.n	8009722 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009710:	d905      	bls.n	800971e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009712:	4b33      	ldr	r3, [pc, #204]	@ (80097e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	4a32      	ldr	r2, [pc, #200]	@ (80097e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800971c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	e057      	b.n	80097d2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009728:	d90a      	bls.n	8009740 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800972a:	4b2d      	ldr	r3, [pc, #180]	@ (80097e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4313      	orrs	r3, r2
 8009736:	4a2a      	ldr	r2, [pc, #168]	@ (80097e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800973c:	60d3      	str	r3, [r2, #12]
 800973e:	e007      	b.n	8009750 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009740:	4b27      	ldr	r3, [pc, #156]	@ (80097e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009748:	4925      	ldr	r1, [pc, #148]	@ (80097e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4313      	orrs	r3, r2
 800974e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009750:	4b24      	ldr	r3, [pc, #144]	@ (80097e4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a24      	ldr	r2, [pc, #144]	@ (80097e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009756:	fba2 2303 	umull	r2, r3, r2, r3
 800975a:	099b      	lsrs	r3, r3, #6
 800975c:	2232      	movs	r2, #50	@ 0x32
 800975e:	fb02 f303 	mul.w	r3, r2, r3
 8009762:	4a21      	ldr	r2, [pc, #132]	@ (80097e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009764:	fba2 2303 	umull	r2, r3, r2, r3
 8009768:	099b      	lsrs	r3, r3, #6
 800976a:	3301      	adds	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800976e:	e002      	b.n	8009776 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3b01      	subs	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009776:	4b1a      	ldr	r3, [pc, #104]	@ (80097e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <HAL_PWREx_ControlVoltageScaling+0x98>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1f3      	bne.n	8009770 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d01b      	beq.n	80097c6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800978e:	4b15      	ldr	r3, [pc, #84]	@ (80097e4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a15      	ldr	r2, [pc, #84]	@ (80097e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009794:	fba2 2303 	umull	r2, r3, r2, r3
 8009798:	099b      	lsrs	r3, r3, #6
 800979a:	2232      	movs	r2, #50	@ 0x32
 800979c:	fb02 f303 	mul.w	r3, r2, r3
 80097a0:	4a11      	ldr	r2, [pc, #68]	@ (80097e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80097a2:	fba2 2303 	umull	r2, r3, r2, r3
 80097a6:	099b      	lsrs	r3, r3, #6
 80097a8:	3301      	adds	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80097ac:	e002      	b.n	80097b4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80097b4:	4b0a      	ldr	r3, [pc, #40]	@ (80097e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80097b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d102      	bne.n	80097c6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1f3      	bne.n	80097ae <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e000      	b.n	80097d2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	46020800 	.word	0x46020800
 80097e4:	20000020 	.word	0x20000020
 80097e8:	10624dd3 	.word	0x10624dd3

080097ec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80097f0:	4b04      	ldr	r3, [pc, #16]	@ (8009804 <HAL_PWREx_GetVoltageRange+0x18>)
 80097f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	46020800 	.word	0x46020800

08009808 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009810:	4b22      	ldr	r3, [pc, #136]	@ (800989c <HAL_PWREx_ConfigSupply+0x94>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a22      	ldr	r2, [pc, #136]	@ (80098a0 <HAL_PWREx_ConfigSupply+0x98>)
 8009816:	fba2 2303 	umull	r2, r3, r2, r3
 800981a:	099b      	lsrs	r3, r3, #6
 800981c:	2232      	movs	r2, #50	@ 0x32
 800981e:	fb02 f303 	mul.w	r3, r2, r3
 8009822:	4a1f      	ldr	r2, [pc, #124]	@ (80098a0 <HAL_PWREx_ConfigSupply+0x98>)
 8009824:	fba2 2303 	umull	r2, r3, r2, r3
 8009828:	099b      	lsrs	r3, r3, #6
 800982a:	3301      	adds	r3, #1
 800982c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d113      	bne.n	800985c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009834:	4b1b      	ldr	r3, [pc, #108]	@ (80098a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	4a1a      	ldr	r2, [pc, #104]	@ (80098a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800983a:	f023 0302 	bic.w	r3, r3, #2
 800983e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009840:	e002      	b.n	8009848 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3b01      	subs	r3, #1
 8009846:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009848:	4b16      	ldr	r3, [pc, #88]	@ (80098a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800984a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b02      	cmp	r3, #2
 8009852:	d116      	bne.n	8009882 <HAL_PWREx_ConfigSupply+0x7a>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1f3      	bne.n	8009842 <HAL_PWREx_ConfigSupply+0x3a>
 800985a:	e012      	b.n	8009882 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800985c:	4b11      	ldr	r3, [pc, #68]	@ (80098a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	4a10      	ldr	r2, [pc, #64]	@ (80098a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8009862:	f043 0302 	orr.w	r3, r3, #2
 8009866:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009868:	e002      	b.n	8009870 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3b01      	subs	r3, #1
 800986e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009870:	4b0c      	ldr	r3, [pc, #48]	@ (80098a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8009872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d102      	bne.n	8009882 <HAL_PWREx_ConfigSupply+0x7a>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1f3      	bne.n	800986a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e000      	b.n	800988e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	20000020 	.word	0x20000020
 80098a0:	10624dd3 	.word	0x10624dd3
 80098a4:	46020800 	.word	0x46020800

080098a8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80098a8:	b480      	push	{r7}
 80098aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80098ac:	4b05      	ldr	r3, [pc, #20]	@ (80098c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	4a04      	ldr	r2, [pc, #16]	@ (80098c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098b6:	6113      	str	r3, [r2, #16]
}
 80098b8:	bf00      	nop
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	46020800 	.word	0x46020800

080098c8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80098c8:	b480      	push	{r7}
 80098ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80098cc:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	4a04      	ldr	r2, [pc, #16]	@ (80098e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80098d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80098d6:	6113      	str	r3, [r2, #16]
}
 80098d8:	bf00      	nop
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	46020800 	.word	0x46020800

080098e8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80098e8:	b480      	push	{r7}
 80098ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80098ec:	4b05      	ldr	r3, [pc, #20]	@ (8009904 <HAL_PWREx_EnableVddA+0x1c>)
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	4a04      	ldr	r2, [pc, #16]	@ (8009904 <HAL_PWREx_EnableVddA+0x1c>)
 80098f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098f6:	6113      	str	r3, [r2, #16]
}
 80098f8:	bf00      	nop
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	46020800 	.word	0x46020800

08009908 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800990e:	f7ff ff6d 	bl	80097ec <HAL_PWREx_GetVoltageRange>
 8009912:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800991a:	d003      	beq.n	8009924 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009922:	d107      	bne.n	8009934 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8009924:	4b06      	ldr	r3, [pc, #24]	@ (8009940 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	4a05      	ldr	r2, [pc, #20]	@ (8009940 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800992a:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800992e:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	e000      	b.n	8009936 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	46020800 	.word	0x46020800

08009944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08e      	sub	sp, #56	@ 0x38
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800994c:	2300      	movs	r3, #0
 800994e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d102      	bne.n	800995e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	f000 bec8 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800995e:	4b99      	ldr	r3, [pc, #612]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	f003 030c 	and.w	r3, r3, #12
 8009966:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009968:	4b96      	ldr	r3, [pc, #600]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 800996a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800996c:	f003 0303 	and.w	r3, r3, #3
 8009970:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0310 	and.w	r3, r3, #16
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 816c 	beq.w	8009c58 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	2b00      	cmp	r3, #0
 8009984:	d007      	beq.n	8009996 <HAL_RCC_OscConfig+0x52>
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	2b0c      	cmp	r3, #12
 800998a:	f040 80de 	bne.w	8009b4a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800998e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009990:	2b01      	cmp	r3, #1
 8009992:	f040 80da 	bne.w	8009b4a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	69db      	ldr	r3, [r3, #28]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	f000 bea5 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099a8:	4b86      	ldr	r3, [pc, #536]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d004      	beq.n	80099be <HAL_RCC_OscConfig+0x7a>
 80099b4:	4b83      	ldr	r3, [pc, #524]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80099bc:	e005      	b.n	80099ca <HAL_RCC_OscConfig+0x86>
 80099be:	4b81      	ldr	r3, [pc, #516]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 80099c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099c4:	041b      	lsls	r3, r3, #16
 80099c6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d255      	bcs.n	8009a7a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80099ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10a      	bne.n	80099ea <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 f9d9 	bl	800ad90 <RCC_SetFlashLatencyFromMSIRange>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f000 be82 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80099ea:	4b76      	ldr	r3, [pc, #472]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	4a75      	ldr	r2, [pc, #468]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 80099f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80099f4:	6093      	str	r3, [r2, #8]
 80099f6:	4b73      	ldr	r3, [pc, #460]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a02:	4970      	ldr	r1, [pc, #448]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009a10:	d309      	bcc.n	8009a26 <HAL_RCC_OscConfig+0xe2>
 8009a12:	4b6c      	ldr	r3, [pc, #432]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	f023 021f 	bic.w	r2, r3, #31
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	4969      	ldr	r1, [pc, #420]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60cb      	str	r3, [r1, #12]
 8009a24:	e07e      	b.n	8009b24 <HAL_RCC_OscConfig+0x1e0>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	da0a      	bge.n	8009a44 <HAL_RCC_OscConfig+0x100>
 8009a2e:	4b65      	ldr	r3, [pc, #404]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	015b      	lsls	r3, r3, #5
 8009a3c:	4961      	ldr	r1, [pc, #388]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	60cb      	str	r3, [r1, #12]
 8009a42:	e06f      	b.n	8009b24 <HAL_RCC_OscConfig+0x1e0>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4c:	d30a      	bcc.n	8009a64 <HAL_RCC_OscConfig+0x120>
 8009a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	029b      	lsls	r3, r3, #10
 8009a5c:	4959      	ldr	r1, [pc, #356]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60cb      	str	r3, [r1, #12]
 8009a62:	e05f      	b.n	8009b24 <HAL_RCC_OscConfig+0x1e0>
 8009a64:	4b57      	ldr	r3, [pc, #348]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	03db      	lsls	r3, r3, #15
 8009a72:	4954      	ldr	r1, [pc, #336]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	60cb      	str	r3, [r1, #12]
 8009a78:	e054      	b.n	8009b24 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009a7a:	4b52      	ldr	r3, [pc, #328]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	4a51      	ldr	r2, [pc, #324]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a84:	6093      	str	r3, [r2, #8]
 8009a86:	4b4f      	ldr	r3, [pc, #316]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a92:	494c      	ldr	r1, [pc, #304]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009aa0:	d309      	bcc.n	8009ab6 <HAL_RCC_OscConfig+0x172>
 8009aa2:	4b48      	ldr	r3, [pc, #288]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f023 021f 	bic.w	r2, r3, #31
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	4945      	ldr	r1, [pc, #276]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60cb      	str	r3, [r1, #12]
 8009ab4:	e028      	b.n	8009b08 <HAL_RCC_OscConfig+0x1c4>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	da0a      	bge.n	8009ad4 <HAL_RCC_OscConfig+0x190>
 8009abe:	4b41      	ldr	r3, [pc, #260]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	015b      	lsls	r3, r3, #5
 8009acc:	493d      	ldr	r1, [pc, #244]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	60cb      	str	r3, [r1, #12]
 8009ad2:	e019      	b.n	8009b08 <HAL_RCC_OscConfig+0x1c4>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009adc:	d30a      	bcc.n	8009af4 <HAL_RCC_OscConfig+0x1b0>
 8009ade:	4b39      	ldr	r3, [pc, #228]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	029b      	lsls	r3, r3, #10
 8009aec:	4935      	ldr	r1, [pc, #212]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60cb      	str	r3, [r1, #12]
 8009af2:	e009      	b.n	8009b08 <HAL_RCC_OscConfig+0x1c4>
 8009af4:	4b33      	ldr	r3, [pc, #204]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	03db      	lsls	r3, r3, #15
 8009b02:	4930      	ldr	r1, [pc, #192]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b12:	4618      	mov	r0, r3
 8009b14:	f001 f93c 	bl	800ad90 <RCC_SetFlashLatencyFromMSIRange>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d002      	beq.n	8009b24 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f000 bde5 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009b24:	f001 f8de 	bl	800ace4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009b28:	4b27      	ldr	r3, [pc, #156]	@ (8009bc8 <HAL_RCC_OscConfig+0x284>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7f9 f811 	bl	8002b54 <HAL_InitTick>
 8009b32:	4603      	mov	r3, r0
 8009b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 808a 	beq.w	8009c56 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009b42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b46:	f000 bdd2 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	69db      	ldr	r3, [r3, #28]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d066      	beq.n	8009c20 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009b52:	4b1c      	ldr	r3, [pc, #112]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a1b      	ldr	r2, [pc, #108]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009b58:	f043 0301 	orr.w	r3, r3, #1
 8009b5c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009b5e:	f7f9 f883 	bl	8002c68 <HAL_GetTick>
 8009b62:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009b64:	e009      	b.n	8009b7a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b66:	f7f9 f87f 	bl	8002c68 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d902      	bls.n	8009b7a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	f000 bdba 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009b7a:	4b12      	ldr	r3, [pc, #72]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0ef      	beq.n	8009b66 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009b86:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009b8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b90:	6093      	str	r3, [r2, #8]
 8009b92:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b9e:	4909      	ldr	r1, [pc, #36]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009bac:	d30e      	bcc.n	8009bcc <HAL_RCC_OscConfig+0x288>
 8009bae:	4b05      	ldr	r3, [pc, #20]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	f023 021f 	bic.w	r2, r3, #31
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	4902      	ldr	r1, [pc, #8]	@ (8009bc4 <HAL_RCC_OscConfig+0x280>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	60cb      	str	r3, [r1, #12]
 8009bc0:	e04a      	b.n	8009c58 <HAL_RCC_OscConfig+0x314>
 8009bc2:	bf00      	nop
 8009bc4:	46020c00 	.word	0x46020c00
 8009bc8:	20000024 	.word	0x20000024
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da0a      	bge.n	8009bea <HAL_RCC_OscConfig+0x2a6>
 8009bd4:	4b98      	ldr	r3, [pc, #608]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	015b      	lsls	r3, r3, #5
 8009be2:	4995      	ldr	r1, [pc, #596]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	60cb      	str	r3, [r1, #12]
 8009be8:	e036      	b.n	8009c58 <HAL_RCC_OscConfig+0x314>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bf2:	d30a      	bcc.n	8009c0a <HAL_RCC_OscConfig+0x2c6>
 8009bf4:	4b90      	ldr	r3, [pc, #576]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	029b      	lsls	r3, r3, #10
 8009c02:	498d      	ldr	r1, [pc, #564]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60cb      	str	r3, [r1, #12]
 8009c08:	e026      	b.n	8009c58 <HAL_RCC_OscConfig+0x314>
 8009c0a:	4b8b      	ldr	r3, [pc, #556]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	03db      	lsls	r3, r3, #15
 8009c18:	4987      	ldr	r1, [pc, #540]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	60cb      	str	r3, [r1, #12]
 8009c1e:	e01b      	b.n	8009c58 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009c20:	4b85      	ldr	r3, [pc, #532]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a84      	ldr	r2, [pc, #528]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009c26:	f023 0301 	bic.w	r3, r3, #1
 8009c2a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009c2c:	f7f9 f81c 	bl	8002c68 <HAL_GetTick>
 8009c30:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009c32:	e009      	b.n	8009c48 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009c34:	f7f9 f818 	bl	8002c68 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d902      	bls.n	8009c48 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	f000 bd53 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009c48:	4b7b      	ldr	r3, [pc, #492]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1ef      	bne.n	8009c34 <HAL_RCC_OscConfig+0x2f0>
 8009c54:	e000      	b.n	8009c58 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009c56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0301 	and.w	r3, r3, #1
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 808b 	beq.w	8009d7c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c68:	2b08      	cmp	r3, #8
 8009c6a:	d005      	beq.n	8009c78 <HAL_RCC_OscConfig+0x334>
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	2b0c      	cmp	r3, #12
 8009c70:	d109      	bne.n	8009c86 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d106      	bne.n	8009c86 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d17d      	bne.n	8009d7c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	f000 bd34 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c8e:	d106      	bne.n	8009c9e <HAL_RCC_OscConfig+0x35a>
 8009c90:	4b69      	ldr	r3, [pc, #420]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a68      	ldr	r2, [pc, #416]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	e041      	b.n	8009d22 <HAL_RCC_OscConfig+0x3de>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009ca6:	d112      	bne.n	8009cce <HAL_RCC_OscConfig+0x38a>
 8009ca8:	4b63      	ldr	r3, [pc, #396]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a62      	ldr	r2, [pc, #392]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009cae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	4b60      	ldr	r3, [pc, #384]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a5f      	ldr	r2, [pc, #380]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009cba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009cbe:	6013      	str	r3, [r2, #0]
 8009cc0:	4b5d      	ldr	r3, [pc, #372]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a5c      	ldr	r2, [pc, #368]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	e029      	b.n	8009d22 <HAL_RCC_OscConfig+0x3de>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009cd6:	d112      	bne.n	8009cfe <HAL_RCC_OscConfig+0x3ba>
 8009cd8:	4b57      	ldr	r3, [pc, #348]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a56      	ldr	r2, [pc, #344]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009cde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ce2:	6013      	str	r3, [r2, #0]
 8009ce4:	4b54      	ldr	r3, [pc, #336]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a53      	ldr	r2, [pc, #332]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	4b51      	ldr	r3, [pc, #324]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a50      	ldr	r2, [pc, #320]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	e011      	b.n	8009d22 <HAL_RCC_OscConfig+0x3de>
 8009cfe:	4b4e      	ldr	r3, [pc, #312]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a4d      	ldr	r2, [pc, #308]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009d10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	4b48      	ldr	r3, [pc, #288]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a47      	ldr	r2, [pc, #284]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009d1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d014      	beq.n	8009d54 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009d2a:	f7f8 ff9d 	bl	8002c68 <HAL_GetTick>
 8009d2e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d30:	e009      	b.n	8009d46 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d32:	f7f8 ff99 	bl	8002c68 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	2b64      	cmp	r3, #100	@ 0x64
 8009d3e:	d902      	bls.n	8009d46 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	f000 bcd4 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d46:	4b3c      	ldr	r3, [pc, #240]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0ef      	beq.n	8009d32 <HAL_RCC_OscConfig+0x3ee>
 8009d52:	e013      	b.n	8009d7c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009d54:	f7f8 ff88 	bl	8002c68 <HAL_GetTick>
 8009d58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d5a:	e009      	b.n	8009d70 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d5c:	f7f8 ff84 	bl	8002c68 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	2b64      	cmp	r3, #100	@ 0x64
 8009d68:	d902      	bls.n	8009d70 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	f000 bcbf 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d70:	4b31      	ldr	r3, [pc, #196]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1ef      	bne.n	8009d5c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 0302 	and.w	r3, r3, #2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d05f      	beq.n	8009e48 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8a:	2b04      	cmp	r3, #4
 8009d8c:	d005      	beq.n	8009d9a <HAL_RCC_OscConfig+0x456>
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d90:	2b0c      	cmp	r3, #12
 8009d92:	d114      	bne.n	8009dbe <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d111      	bne.n	8009dbe <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	f000 bca3 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009da8:	4b23      	ldr	r3, [pc, #140]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	041b      	lsls	r3, r3, #16
 8009db6:	4920      	ldr	r1, [pc, #128]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009dbc:	e044      	b.n	8009e48 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d024      	beq.n	8009e10 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a1b      	ldr	r2, [pc, #108]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dd0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009dd2:	f7f8 ff49 	bl	8002c68 <HAL_GetTick>
 8009dd6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009dd8:	e009      	b.n	8009dee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009dda:	f7f8 ff45 	bl	8002c68 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d902      	bls.n	8009dee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	f000 bc80 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009dee:	4b12      	ldr	r3, [pc, #72]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0ef      	beq.n	8009dda <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	041b      	lsls	r3, r3, #16
 8009e08:	490b      	ldr	r1, [pc, #44]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	610b      	str	r3, [r1, #16]
 8009e0e:	e01b      	b.n	8009e48 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009e10:	4b09      	ldr	r3, [pc, #36]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a08      	ldr	r2, [pc, #32]	@ (8009e38 <HAL_RCC_OscConfig+0x4f4>)
 8009e16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e1c:	f7f8 ff24 	bl	8002c68 <HAL_GetTick>
 8009e20:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e22:	e00b      	b.n	8009e3c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e24:	f7f8 ff20 	bl	8002c68 <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d904      	bls.n	8009e3c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	f000 bc5b 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
 8009e38:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e3c:	4baf      	ldr	r3, [pc, #700]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1ed      	bne.n	8009e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0308 	and.w	r3, r3, #8
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f000 80c8 	beq.w	8009fe6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009e56:	2300      	movs	r3, #0
 8009e58:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e5c:	4ba7      	ldr	r3, [pc, #668]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e62:	f003 0304 	and.w	r3, r3, #4
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d111      	bne.n	8009e8e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e6a:	4ba4      	ldr	r3, [pc, #656]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e70:	4aa2      	ldr	r2, [pc, #648]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009e72:	f043 0304 	orr.w	r3, r3, #4
 8009e76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009e7a:	4ba0      	ldr	r3, [pc, #640]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e80:	f003 0304 	and.w	r3, r3, #4
 8009e84:	617b      	str	r3, [r7, #20]
 8009e86:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e8e:	4b9c      	ldr	r3, [pc, #624]	@ (800a100 <HAL_RCC_OscConfig+0x7bc>)
 8009e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d119      	bne.n	8009ece <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009e9a:	4b99      	ldr	r3, [pc, #612]	@ (800a100 <HAL_RCC_OscConfig+0x7bc>)
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9e:	4a98      	ldr	r2, [pc, #608]	@ (800a100 <HAL_RCC_OscConfig+0x7bc>)
 8009ea0:	f043 0301 	orr.w	r3, r3, #1
 8009ea4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ea6:	f7f8 fedf 	bl	8002c68 <HAL_GetTick>
 8009eaa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009eac:	e009      	b.n	8009ec2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009eae:	f7f8 fedb 	bl	8002c68 <HAL_GetTick>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d902      	bls.n	8009ec2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	f000 bc16 	b.w	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ec2:	4b8f      	ldr	r3, [pc, #572]	@ (800a100 <HAL_RCC_OscConfig+0x7bc>)
 8009ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d0ef      	beq.n	8009eae <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d05f      	beq.n	8009f96 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009ed6:	4b89      	ldr	r3, [pc, #548]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009edc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	699a      	ldr	r2, [r3, #24]
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d037      	beq.n	8009f5c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d006      	beq.n	8009f04 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e3f4      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d01b      	beq.n	8009f46 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009f0e:	4b7b      	ldr	r3, [pc, #492]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f14:	4a79      	ldr	r2, [pc, #484]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009f16:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009f1e:	f7f8 fea3 	bl	8002c68 <HAL_GetTick>
 8009f22:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f24:	e008      	b.n	8009f38 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f26:	f7f8 fe9f 	bl	8002c68 <HAL_GetTick>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	2b05      	cmp	r3, #5
 8009f32:	d901      	bls.n	8009f38 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e3da      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f38:	4b70      	ldr	r3, [pc, #448]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1ef      	bne.n	8009f26 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009f46:	4b6d      	ldr	r3, [pc, #436]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f4c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	4969      	ldr	r1, [pc, #420]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009f5c:	4b67      	ldr	r3, [pc, #412]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f62:	4a66      	ldr	r2, [pc, #408]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009f64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009f6c:	f7f8 fe7c 	bl	8002c68 <HAL_GetTick>
 8009f70:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009f72:	e008      	b.n	8009f86 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f74:	f7f8 fe78 	bl	8002c68 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	2b05      	cmp	r3, #5
 8009f80:	d901      	bls.n	8009f86 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e3b3      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009f86:	4b5d      	ldr	r3, [pc, #372]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d0ef      	beq.n	8009f74 <HAL_RCC_OscConfig+0x630>
 8009f94:	e01b      	b.n	8009fce <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009f96:	4b59      	ldr	r3, [pc, #356]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f9c:	4a57      	ldr	r2, [pc, #348]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009f9e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009fa6:	f7f8 fe5f 	bl	8002c68 <HAL_GetTick>
 8009faa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009fac:	e008      	b.n	8009fc0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fae:	f7f8 fe5b 	bl	8002c68 <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	2b05      	cmp	r3, #5
 8009fba:	d901      	bls.n	8009fc0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e396      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009fc0:	4b4e      	ldr	r3, [pc, #312]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1ef      	bne.n	8009fae <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009fce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d107      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fd6:	4b49      	ldr	r3, [pc, #292]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fdc:	4a47      	ldr	r2, [pc, #284]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009fde:	f023 0304 	bic.w	r3, r3, #4
 8009fe2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 8111 	beq.w	800a216 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ffa:	4b40      	ldr	r3, [pc, #256]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 8009ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a000:	f003 0304 	and.w	r3, r3, #4
 800a004:	2b00      	cmp	r3, #0
 800a006:	d111      	bne.n	800a02c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a008:	4b3c      	ldr	r3, [pc, #240]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a00a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a00e:	4a3b      	ldr	r2, [pc, #236]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a010:	f043 0304 	orr.w	r3, r3, #4
 800a014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a018:	4b38      	ldr	r3, [pc, #224]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a01a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a01e:	f003 0304 	and.w	r3, r3, #4
 800a022:	613b      	str	r3, [r7, #16]
 800a024:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a026:	2301      	movs	r3, #1
 800a028:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a02c:	4b34      	ldr	r3, [pc, #208]	@ (800a100 <HAL_RCC_OscConfig+0x7bc>)
 800a02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	d118      	bne.n	800a06a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a038:	4b31      	ldr	r3, [pc, #196]	@ (800a100 <HAL_RCC_OscConfig+0x7bc>)
 800a03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03c:	4a30      	ldr	r2, [pc, #192]	@ (800a100 <HAL_RCC_OscConfig+0x7bc>)
 800a03e:	f043 0301 	orr.w	r3, r3, #1
 800a042:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a044:	f7f8 fe10 	bl	8002c68 <HAL_GetTick>
 800a048:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a04a:	e008      	b.n	800a05e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a04c:	f7f8 fe0c 	bl	8002c68 <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	2b02      	cmp	r3, #2
 800a058:	d901      	bls.n	800a05e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e347      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a05e:	4b28      	ldr	r3, [pc, #160]	@ (800a100 <HAL_RCC_OscConfig+0x7bc>)
 800a060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0f0      	beq.n	800a04c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d01f      	beq.n	800a0b6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 0304 	and.w	r3, r3, #4
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d010      	beq.n	800a0a4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a082:	4b1e      	ldr	r3, [pc, #120]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a088:	4a1c      	ldr	r2, [pc, #112]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a08a:	f043 0304 	orr.w	r3, r3, #4
 800a08e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a092:	4b1a      	ldr	r3, [pc, #104]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a098:	4a18      	ldr	r2, [pc, #96]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a09a:	f043 0301 	orr.w	r3, r3, #1
 800a09e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a0a2:	e018      	b.n	800a0d6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0a4:	4b15      	ldr	r3, [pc, #84]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a0a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0aa:	4a14      	ldr	r2, [pc, #80]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a0ac:	f043 0301 	orr.w	r3, r3, #1
 800a0b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a0b4:	e00f      	b.n	800a0d6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0b6:	4b11      	ldr	r3, [pc, #68]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a0b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0bc:	4a0f      	ldr	r2, [pc, #60]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a0be:	f023 0301 	bic.w	r3, r3, #1
 800a0c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a0c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0cc:	4a0b      	ldr	r2, [pc, #44]	@ (800a0fc <HAL_RCC_OscConfig+0x7b8>)
 800a0ce:	f023 0304 	bic.w	r3, r3, #4
 800a0d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d057      	beq.n	800a18e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a0de:	f7f8 fdc3 	bl	8002c68 <HAL_GetTick>
 800a0e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0e4:	e00e      	b.n	800a104 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0e6:	f7f8 fdbf 	bl	8002c68 <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d905      	bls.n	800a104 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e2f8      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
 800a0fc:	46020c00 	.word	0x46020c00
 800a100:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a104:	4b9c      	ldr	r3, [pc, #624]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a10a:	f003 0302 	and.w	r3, r3, #2
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0e9      	beq.n	800a0e6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d01b      	beq.n	800a156 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a11e:	4b96      	ldr	r3, [pc, #600]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a124:	4a94      	ldr	r2, [pc, #592]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a12a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a12e:	e00a      	b.n	800a146 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a130:	f7f8 fd9a 	bl	8002c68 <HAL_GetTick>
 800a134:	4602      	mov	r2, r0
 800a136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a13e:	4293      	cmp	r3, r2
 800a140:	d901      	bls.n	800a146 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	e2d3      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a146:	4b8c      	ldr	r3, [pc, #560]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a14c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a150:	2b00      	cmp	r3, #0
 800a152:	d0ed      	beq.n	800a130 <HAL_RCC_OscConfig+0x7ec>
 800a154:	e053      	b.n	800a1fe <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a156:	4b88      	ldr	r3, [pc, #544]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a15c:	4a86      	ldr	r2, [pc, #536]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a15e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a162:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a166:	e00a      	b.n	800a17e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a168:	f7f8 fd7e 	bl	8002c68 <HAL_GetTick>
 800a16c:	4602      	mov	r2, r0
 800a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a176:	4293      	cmp	r3, r2
 800a178:	d901      	bls.n	800a17e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e2b7      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a17e:	4b7e      	ldr	r3, [pc, #504]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1ed      	bne.n	800a168 <HAL_RCC_OscConfig+0x824>
 800a18c:	e037      	b.n	800a1fe <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a18e:	f7f8 fd6b 	bl	8002c68 <HAL_GetTick>
 800a192:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a194:	e00a      	b.n	800a1ac <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a196:	f7f8 fd67 	bl	8002c68 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d901      	bls.n	800a1ac <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e2a0      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1ac:	4b72      	ldr	r3, [pc, #456]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a1ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1b2:	f003 0302 	and.w	r3, r3, #2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1ed      	bne.n	800a196 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a1ba:	4b6f      	ldr	r3, [pc, #444]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a1bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d01a      	beq.n	800a1fe <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a1c8:	4b6b      	ldr	r3, [pc, #428]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a1ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1ce:	4a6a      	ldr	r2, [pc, #424]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a1d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1d8:	e00a      	b.n	800a1f0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1da:	f7f8 fd45 	bl	8002c68 <HAL_GetTick>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d901      	bls.n	800a1f0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e27e      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1f0:	4b61      	ldr	r3, [pc, #388]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a1f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1ed      	bne.n	800a1da <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a1fe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a202:	2b01      	cmp	r3, #1
 800a204:	d107      	bne.n	800a216 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a206:	4b5c      	ldr	r3, [pc, #368]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a20c:	4a5a      	ldr	r2, [pc, #360]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a20e:	f023 0304 	bic.w	r3, r3, #4
 800a212:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0320 	and.w	r3, r3, #32
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d036      	beq.n	800a290 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a226:	2b00      	cmp	r3, #0
 800a228:	d019      	beq.n	800a25e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a22a:	4b53      	ldr	r3, [pc, #332]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a52      	ldr	r2, [pc, #328]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a230:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a234:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a236:	f7f8 fd17 	bl	8002c68 <HAL_GetTick>
 800a23a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a23c:	e008      	b.n	800a250 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a23e:	f7f8 fd13 	bl	8002c68 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d901      	bls.n	800a250 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e24e      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a250:	4b49      	ldr	r3, [pc, #292]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0f0      	beq.n	800a23e <HAL_RCC_OscConfig+0x8fa>
 800a25c:	e018      	b.n	800a290 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a25e:	4b46      	ldr	r3, [pc, #280]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a45      	ldr	r2, [pc, #276]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a264:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a268:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a26a:	f7f8 fcfd 	bl	8002c68 <HAL_GetTick>
 800a26e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a270:	e008      	b.n	800a284 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a272:	f7f8 fcf9 	bl	8002c68 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d901      	bls.n	800a284 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e234      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a284:	4b3c      	ldr	r3, [pc, #240]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1f0      	bne.n	800a272 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d036      	beq.n	800a30a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d019      	beq.n	800a2d8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a2a4:	4b34      	ldr	r3, [pc, #208]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a33      	ldr	r2, [pc, #204]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a2aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a2b0:	f7f8 fcda 	bl	8002c68 <HAL_GetTick>
 800a2b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a2b6:	e008      	b.n	800a2ca <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a2b8:	f7f8 fcd6 	bl	8002c68 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d901      	bls.n	800a2ca <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e211      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a2ca:	4b2b      	ldr	r3, [pc, #172]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0f0      	beq.n	800a2b8 <HAL_RCC_OscConfig+0x974>
 800a2d6:	e018      	b.n	800a30a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a2d8:	4b27      	ldr	r3, [pc, #156]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a26      	ldr	r2, [pc, #152]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a2de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a2e4:	f7f8 fcc0 	bl	8002c68 <HAL_GetTick>
 800a2e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a2ea:	e008      	b.n	800a2fe <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a2ec:	f7f8 fcbc 	bl	8002c68 <HAL_GetTick>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d901      	bls.n	800a2fe <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e1f7      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a2fe:	4b1e      	ldr	r3, [pc, #120]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1f0      	bne.n	800a2ec <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a312:	2b00      	cmp	r3, #0
 800a314:	d07f      	beq.n	800a416 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d062      	beq.n	800a3e4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a31e:	4b16      	ldr	r3, [pc, #88]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	4a15      	ldr	r2, [pc, #84]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a324:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a328:	6093      	str	r3, [r2, #8]
 800a32a:	4b13      	ldr	r3, [pc, #76]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a336:	4910      	ldr	r1, [pc, #64]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a340:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a344:	d309      	bcc.n	800a35a <HAL_RCC_OscConfig+0xa16>
 800a346:	4b0c      	ldr	r3, [pc, #48]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f023 021f 	bic.w	r2, r3, #31
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	4909      	ldr	r1, [pc, #36]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a354:	4313      	orrs	r3, r2
 800a356:	60cb      	str	r3, [r1, #12]
 800a358:	e02a      	b.n	800a3b0 <HAL_RCC_OscConfig+0xa6c>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35e:	2b00      	cmp	r3, #0
 800a360:	da0c      	bge.n	800a37c <HAL_RCC_OscConfig+0xa38>
 800a362:	4b05      	ldr	r3, [pc, #20]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	015b      	lsls	r3, r3, #5
 800a370:	4901      	ldr	r1, [pc, #4]	@ (800a378 <HAL_RCC_OscConfig+0xa34>)
 800a372:	4313      	orrs	r3, r2
 800a374:	60cb      	str	r3, [r1, #12]
 800a376:	e01b      	b.n	800a3b0 <HAL_RCC_OscConfig+0xa6c>
 800a378:	46020c00 	.word	0x46020c00
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a384:	d30a      	bcc.n	800a39c <HAL_RCC_OscConfig+0xa58>
 800a386:	4ba1      	ldr	r3, [pc, #644]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	029b      	lsls	r3, r3, #10
 800a394:	499d      	ldr	r1, [pc, #628]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a396:	4313      	orrs	r3, r2
 800a398:	60cb      	str	r3, [r1, #12]
 800a39a:	e009      	b.n	800a3b0 <HAL_RCC_OscConfig+0xa6c>
 800a39c:	4b9b      	ldr	r3, [pc, #620]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	03db      	lsls	r3, r3, #15
 800a3aa:	4998      	ldr	r1, [pc, #608]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a3b0:	4b96      	ldr	r3, [pc, #600]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a95      	ldr	r2, [pc, #596]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a3b6:	f043 0310 	orr.w	r3, r3, #16
 800a3ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a3bc:	f7f8 fc54 	bl	8002c68 <HAL_GetTick>
 800a3c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a3c2:	e008      	b.n	800a3d6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a3c4:	f7f8 fc50 	bl	8002c68 <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d901      	bls.n	800a3d6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e18b      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a3d6:	4b8d      	ldr	r3, [pc, #564]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0320 	and.w	r3, r3, #32
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0f0      	beq.n	800a3c4 <HAL_RCC_OscConfig+0xa80>
 800a3e2:	e018      	b.n	800a416 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a3e4:	4b89      	ldr	r3, [pc, #548]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a88      	ldr	r2, [pc, #544]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a3ea:	f023 0310 	bic.w	r3, r3, #16
 800a3ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a3f0:	f7f8 fc3a 	bl	8002c68 <HAL_GetTick>
 800a3f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a3f6:	e008      	b.n	800a40a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a3f8:	f7f8 fc36 	bl	8002c68 <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	2b02      	cmp	r3, #2
 800a404:	d901      	bls.n	800a40a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a406:	2303      	movs	r3, #3
 800a408:	e171      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a40a:	4b80      	ldr	r3, [pc, #512]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0320 	and.w	r3, r3, #32
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1f0      	bne.n	800a3f8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f000 8166 	beq.w	800a6ec <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a420:	2300      	movs	r3, #0
 800a422:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a426:	4b79      	ldr	r3, [pc, #484]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	f003 030c 	and.w	r3, r3, #12
 800a42e:	2b0c      	cmp	r3, #12
 800a430:	f000 80f2 	beq.w	800a618 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a438:	2b02      	cmp	r3, #2
 800a43a:	f040 80c5 	bne.w	800a5c8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a43e:	4b73      	ldr	r3, [pc, #460]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a72      	ldr	r2, [pc, #456]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a448:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a44a:	f7f8 fc0d 	bl	8002c68 <HAL_GetTick>
 800a44e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a450:	e008      	b.n	800a464 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a452:	f7f8 fc09 	bl	8002c68 <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d901      	bls.n	800a464 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e144      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a464:	4b69      	ldr	r3, [pc, #420]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1f0      	bne.n	800a452 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a470:	4b66      	ldr	r3, [pc, #408]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a476:	f003 0304 	and.w	r3, r3, #4
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d111      	bne.n	800a4a2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a47e:	4b63      	ldr	r3, [pc, #396]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a484:	4a61      	ldr	r2, [pc, #388]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a486:	f043 0304 	orr.w	r3, r3, #4
 800a48a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a48e:	4b5f      	ldr	r3, [pc, #380]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a494:	f003 0304 	and.w	r3, r3, #4
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a4a2:	4b5b      	ldr	r3, [pc, #364]	@ (800a610 <HAL_RCC_OscConfig+0xccc>)
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a4aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4ae:	d102      	bne.n	800a4b6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a4b6:	4b56      	ldr	r3, [pc, #344]	@ (800a610 <HAL_RCC_OscConfig+0xccc>)
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	4a55      	ldr	r2, [pc, #340]	@ (800a610 <HAL_RCC_OscConfig+0xccc>)
 800a4bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a4c0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a4c2:	4b52      	ldr	r3, [pc, #328]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4ca:	f023 0303 	bic.w	r3, r3, #3
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a4d6:	3a01      	subs	r2, #1
 800a4d8:	0212      	lsls	r2, r2, #8
 800a4da:	4311      	orrs	r1, r2
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	494a      	ldr	r1, [pc, #296]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a4e8:	4b48      	ldr	r3, [pc, #288]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a4ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4ec:	4b49      	ldr	r3, [pc, #292]	@ (800a614 <HAL_RCC_OscConfig+0xcd0>)
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a4f4:	3a01      	subs	r2, #1
 800a4f6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a4fe:	3a01      	subs	r2, #1
 800a500:	0252      	lsls	r2, r2, #9
 800a502:	b292      	uxth	r2, r2
 800a504:	4311      	orrs	r1, r2
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a50a:	3a01      	subs	r2, #1
 800a50c:	0412      	lsls	r2, r2, #16
 800a50e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a512:	4311      	orrs	r1, r2
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a518:	3a01      	subs	r2, #1
 800a51a:	0612      	lsls	r2, r2, #24
 800a51c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a520:	430a      	orrs	r2, r1
 800a522:	493a      	ldr	r1, [pc, #232]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a524:	4313      	orrs	r3, r2
 800a526:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a528:	4b38      	ldr	r3, [pc, #224]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52c:	4a37      	ldr	r2, [pc, #220]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a52e:	f023 0310 	bic.w	r3, r3, #16
 800a532:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a538:	4a34      	ldr	r2, [pc, #208]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a53e:	4b33      	ldr	r3, [pc, #204]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a542:	4a32      	ldr	r2, [pc, #200]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a544:	f043 0310 	orr.w	r3, r3, #16
 800a548:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a54a:	4b30      	ldr	r3, [pc, #192]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54e:	f023 020c 	bic.w	r2, r3, #12
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a556:	492d      	ldr	r1, [pc, #180]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a558:	4313      	orrs	r3, r2
 800a55a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a55c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a560:	2b01      	cmp	r3, #1
 800a562:	d105      	bne.n	800a570 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a564:	4b2a      	ldr	r3, [pc, #168]	@ (800a610 <HAL_RCC_OscConfig+0xccc>)
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	4a29      	ldr	r2, [pc, #164]	@ (800a610 <HAL_RCC_OscConfig+0xccc>)
 800a56a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a56e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a570:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a574:	2b01      	cmp	r3, #1
 800a576:	d107      	bne.n	800a588 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a578:	4b24      	ldr	r3, [pc, #144]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a57a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a57e:	4a23      	ldr	r2, [pc, #140]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a580:	f023 0304 	bic.w	r3, r3, #4
 800a584:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a588:	4b20      	ldr	r3, [pc, #128]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a1f      	ldr	r2, [pc, #124]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a58e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a592:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a594:	f7f8 fb68 	bl	8002c68 <HAL_GetTick>
 800a598:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a59a:	e008      	b.n	800a5ae <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a59c:	f7f8 fb64 	bl	8002c68 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d901      	bls.n	800a5ae <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e09f      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a5ae:	4b17      	ldr	r3, [pc, #92]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d0f0      	beq.n	800a59c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a5ba:	4b14      	ldr	r3, [pc, #80]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5be:	4a13      	ldr	r2, [pc, #76]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a5c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a5c4:	6293      	str	r3, [r2, #40]	@ 0x28
 800a5c6:	e091      	b.n	800a6ec <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a5c8:	4b10      	ldr	r3, [pc, #64]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a0f      	ldr	r2, [pc, #60]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a5ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a5d4:	f7f8 fb48 	bl	8002c68 <HAL_GetTick>
 800a5d8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a5da:	e008      	b.n	800a5ee <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5dc:	f7f8 fb44 	bl	8002c68 <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d901      	bls.n	800a5ee <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e07f      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a5ee:	4b07      	ldr	r3, [pc, #28]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1f0      	bne.n	800a5dc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a5fa:	4b04      	ldr	r3, [pc, #16]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fe:	4a03      	ldr	r2, [pc, #12]	@ (800a60c <HAL_RCC_OscConfig+0xcc8>)
 800a600:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a604:	f023 0303 	bic.w	r3, r3, #3
 800a608:	6293      	str	r3, [r2, #40]	@ 0x28
 800a60a:	e06f      	b.n	800a6ec <HAL_RCC_OscConfig+0xda8>
 800a60c:	46020c00 	.word	0x46020c00
 800a610:	46020800 	.word	0x46020800
 800a614:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a618:	4b37      	ldr	r3, [pc, #220]	@ (800a6f8 <HAL_RCC_OscConfig+0xdb4>)
 800a61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a61e:	4b36      	ldr	r3, [pc, #216]	@ (800a6f8 <HAL_RCC_OscConfig+0xdb4>)
 800a620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a622:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d039      	beq.n	800a6a0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	f003 0203 	and.w	r2, r3, #3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a636:	429a      	cmp	r2, r3
 800a638:	d132      	bne.n	800a6a0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	0a1b      	lsrs	r3, r3, #8
 800a63e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a646:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a648:	429a      	cmp	r2, r3
 800a64a:	d129      	bne.n	800a6a0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a656:	429a      	cmp	r2, r3
 800a658:	d122      	bne.n	800a6a0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a664:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a666:	429a      	cmp	r2, r3
 800a668:	d11a      	bne.n	800a6a0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	0a5b      	lsrs	r3, r3, #9
 800a66e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a676:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a678:	429a      	cmp	r2, r3
 800a67a:	d111      	bne.n	800a6a0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	0c1b      	lsrs	r3, r3, #16
 800a680:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a688:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d108      	bne.n	800a6a0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	0e1b      	lsrs	r3, r3, #24
 800a692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a69a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d001      	beq.n	800a6a4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e024      	b.n	800a6ee <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6a4:	4b14      	ldr	r3, [pc, #80]	@ (800a6f8 <HAL_RCC_OscConfig+0xdb4>)
 800a6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a8:	08db      	lsrs	r3, r3, #3
 800a6aa:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d01a      	beq.n	800a6ec <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a6b6:	4b10      	ldr	r3, [pc, #64]	@ (800a6f8 <HAL_RCC_OscConfig+0xdb4>)
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ba:	4a0f      	ldr	r2, [pc, #60]	@ (800a6f8 <HAL_RCC_OscConfig+0xdb4>)
 800a6bc:	f023 0310 	bic.w	r3, r3, #16
 800a6c0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c2:	f7f8 fad1 	bl	8002c68 <HAL_GetTick>
 800a6c6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a6c8:	bf00      	nop
 800a6ca:	f7f8 facd 	bl	8002c68 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d0f9      	beq.n	800a6ca <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6da:	4a07      	ldr	r2, [pc, #28]	@ (800a6f8 <HAL_RCC_OscConfig+0xdb4>)
 800a6dc:	00db      	lsls	r3, r3, #3
 800a6de:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a6e0:	4b05      	ldr	r3, [pc, #20]	@ (800a6f8 <HAL_RCC_OscConfig+0xdb4>)
 800a6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e4:	4a04      	ldr	r2, [pc, #16]	@ (800a6f8 <HAL_RCC_OscConfig+0xdb4>)
 800a6e6:	f043 0310 	orr.w	r3, r3, #16
 800a6ea:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3738      	adds	r7, #56	@ 0x38
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	46020c00 	.word	0x46020c00

0800a6fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d101      	bne.n	800a710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e1d9      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a710:	4b9b      	ldr	r3, [pc, #620]	@ (800a980 <HAL_RCC_ClockConfig+0x284>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 030f 	and.w	r3, r3, #15
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d910      	bls.n	800a740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a71e:	4b98      	ldr	r3, [pc, #608]	@ (800a980 <HAL_RCC_ClockConfig+0x284>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f023 020f 	bic.w	r2, r3, #15
 800a726:	4996      	ldr	r1, [pc, #600]	@ (800a980 <HAL_RCC_ClockConfig+0x284>)
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a72e:	4b94      	ldr	r3, [pc, #592]	@ (800a980 <HAL_RCC_ClockConfig+0x284>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 030f 	and.w	r3, r3, #15
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d001      	beq.n	800a740 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	e1c1      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0310 	and.w	r3, r3, #16
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d010      	beq.n	800a76e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	695a      	ldr	r2, [r3, #20]
 800a750:	4b8c      	ldr	r3, [pc, #560]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a754:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a758:	429a      	cmp	r2, r3
 800a75a:	d908      	bls.n	800a76e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a75c:	4b89      	ldr	r3, [pc, #548]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a760:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	4986      	ldr	r1, [pc, #536]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0308 	and.w	r3, r3, #8
 800a776:	2b00      	cmp	r3, #0
 800a778:	d012      	beq.n	800a7a0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	691a      	ldr	r2, [r3, #16]
 800a77e:	4b81      	ldr	r3, [pc, #516]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	091b      	lsrs	r3, r3, #4
 800a784:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a788:	429a      	cmp	r2, r3
 800a78a:	d909      	bls.n	800a7a0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a78c:	4b7d      	ldr	r3, [pc, #500]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	497a      	ldr	r1, [pc, #488]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a79c:	4313      	orrs	r3, r2
 800a79e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d010      	beq.n	800a7ce <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68da      	ldr	r2, [r3, #12]
 800a7b0:	4b74      	ldr	r3, [pc, #464]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d908      	bls.n	800a7ce <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a7bc:	4b71      	ldr	r3, [pc, #452]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	496e      	ldr	r1, [pc, #440]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d010      	beq.n	800a7fc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	4b69      	ldr	r3, [pc, #420]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	f003 030f 	and.w	r3, r3, #15
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d908      	bls.n	800a7fc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a7ea:	4b66      	ldr	r3, [pc, #408]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	f023 020f 	bic.w	r2, r3, #15
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	4963      	ldr	r1, [pc, #396]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 0301 	and.w	r3, r3, #1
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 80d2 	beq.w	800a9ae <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a80a:	2300      	movs	r3, #0
 800a80c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	2b03      	cmp	r3, #3
 800a814:	d143      	bne.n	800a89e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a816:	4b5b      	ldr	r3, [pc, #364]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a81c:	f003 0304 	and.w	r3, r3, #4
 800a820:	2b00      	cmp	r3, #0
 800a822:	d110      	bne.n	800a846 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a824:	4b57      	ldr	r3, [pc, #348]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a82a:	4a56      	ldr	r2, [pc, #344]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a82c:	f043 0304 	orr.w	r3, r3, #4
 800a830:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a834:	4b53      	ldr	r3, [pc, #332]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a83a:	f003 0304 	and.w	r3, r3, #4
 800a83e:	60bb      	str	r3, [r7, #8]
 800a840:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a842:	2301      	movs	r3, #1
 800a844:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a846:	f7f8 fa0f 	bl	8002c68 <HAL_GetTick>
 800a84a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a84c:	4b4e      	ldr	r3, [pc, #312]	@ (800a988 <HAL_RCC_ClockConfig+0x28c>)
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00f      	beq.n	800a878 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a858:	e008      	b.n	800a86c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a85a:	f7f8 fa05 	bl	8002c68 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	2b02      	cmp	r3, #2
 800a866:	d901      	bls.n	800a86c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e12b      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a86c:	4b46      	ldr	r3, [pc, #280]	@ (800a988 <HAL_RCC_ClockConfig+0x28c>)
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d0f0      	beq.n	800a85a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a878:	7dfb      	ldrb	r3, [r7, #23]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d107      	bne.n	800a88e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a87e:	4b41      	ldr	r3, [pc, #260]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a884:	4a3f      	ldr	r2, [pc, #252]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a886:	f023 0304 	bic.w	r3, r3, #4
 800a88a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a88e:	4b3d      	ldr	r3, [pc, #244]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d121      	bne.n	800a8de <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e112      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d107      	bne.n	800a8b6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8a6:	4b37      	ldr	r3, [pc, #220]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d115      	bne.n	800a8de <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e106      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d107      	bne.n	800a8ce <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a8be:	4b31      	ldr	r3, [pc, #196]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0304 	and.w	r3, r3, #4
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d109      	bne.n	800a8de <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e0fa      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8ce:	4b2d      	ldr	r3, [pc, #180]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e0f2      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a8de:	4b29      	ldr	r3, [pc, #164]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a8e0:	69db      	ldr	r3, [r3, #28]
 800a8e2:	f023 0203 	bic.w	r2, r3, #3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	4926      	ldr	r1, [pc, #152]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a8f0:	f7f8 f9ba 	bl	8002c68 <HAL_GetTick>
 800a8f4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d112      	bne.n	800a924 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8fe:	e00a      	b.n	800a916 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a900:	f7f8 f9b2 	bl	8002c68 <HAL_GetTick>
 800a904:	4602      	mov	r2, r0
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a90e:	4293      	cmp	r3, r2
 800a910:	d901      	bls.n	800a916 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e0d6      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a916:	4b1b      	ldr	r3, [pc, #108]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	f003 030c 	and.w	r3, r3, #12
 800a91e:	2b0c      	cmp	r3, #12
 800a920:	d1ee      	bne.n	800a900 <HAL_RCC_ClockConfig+0x204>
 800a922:	e044      	b.n	800a9ae <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d112      	bne.n	800a952 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a92c:	e00a      	b.n	800a944 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a92e:	f7f8 f99b 	bl	8002c68 <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d901      	bls.n	800a944 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e0bf      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a944:	4b0f      	ldr	r3, [pc, #60]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a946:	69db      	ldr	r3, [r3, #28]
 800a948:	f003 030c 	and.w	r3, r3, #12
 800a94c:	2b08      	cmp	r3, #8
 800a94e:	d1ee      	bne.n	800a92e <HAL_RCC_ClockConfig+0x232>
 800a950:	e02d      	b.n	800a9ae <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d123      	bne.n	800a9a2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a95a:	e00a      	b.n	800a972 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a95c:	f7f8 f984 	bl	8002c68 <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d901      	bls.n	800a972 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e0a8      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a972:	4b04      	ldr	r3, [pc, #16]	@ (800a984 <HAL_RCC_ClockConfig+0x288>)
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	f003 030c 	and.w	r3, r3, #12
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1ee      	bne.n	800a95c <HAL_RCC_ClockConfig+0x260>
 800a97e:	e016      	b.n	800a9ae <HAL_RCC_ClockConfig+0x2b2>
 800a980:	40022000 	.word	0x40022000
 800a984:	46020c00 	.word	0x46020c00
 800a988:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a98c:	f7f8 f96c 	bl	8002c68 <HAL_GetTick>
 800a990:	4602      	mov	r2, r0
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e090      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9a2:	4b4a      	ldr	r3, [pc, #296]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	f003 030c 	and.w	r3, r3, #12
 800a9aa:	2b04      	cmp	r3, #4
 800a9ac:	d1ee      	bne.n	800a98c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0302 	and.w	r3, r3, #2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d010      	beq.n	800a9dc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689a      	ldr	r2, [r3, #8]
 800a9be:	4b43      	ldr	r3, [pc, #268]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d208      	bcs.n	800a9dc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a9ca:	4b40      	ldr	r3, [pc, #256]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	f023 020f 	bic.w	r2, r3, #15
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	493d      	ldr	r1, [pc, #244]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9dc:	4b3c      	ldr	r3, [pc, #240]	@ (800aad0 <HAL_RCC_ClockConfig+0x3d4>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 030f 	and.w	r3, r3, #15
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d210      	bcs.n	800aa0c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9ea:	4b39      	ldr	r3, [pc, #228]	@ (800aad0 <HAL_RCC_ClockConfig+0x3d4>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f023 020f 	bic.w	r2, r3, #15
 800a9f2:	4937      	ldr	r1, [pc, #220]	@ (800aad0 <HAL_RCC_ClockConfig+0x3d4>)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9fa:	4b35      	ldr	r3, [pc, #212]	@ (800aad0 <HAL_RCC_ClockConfig+0x3d4>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 030f 	and.w	r3, r3, #15
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d001      	beq.n	800aa0c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e05b      	b.n	800aac4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0304 	and.w	r3, r3, #4
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d010      	beq.n	800aa3a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	4b2b      	ldr	r3, [pc, #172]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d208      	bcs.n	800aa3a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800aa28:	4b28      	ldr	r3, [pc, #160]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	4925      	ldr	r1, [pc, #148]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800aa36:	4313      	orrs	r3, r2
 800aa38:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0308 	and.w	r3, r3, #8
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d012      	beq.n	800aa6c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	691a      	ldr	r2, [r3, #16]
 800aa4a:	4b20      	ldr	r3, [pc, #128]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	091b      	lsrs	r3, r3, #4
 800aa50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d209      	bcs.n	800aa6c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800aa58:	4b1c      	ldr	r3, [pc, #112]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	011b      	lsls	r3, r3, #4
 800aa66:	4919      	ldr	r1, [pc, #100]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0310 	and.w	r3, r3, #16
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d010      	beq.n	800aa9a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	695a      	ldr	r2, [r3, #20]
 800aa7c:	4b13      	ldr	r3, [pc, #76]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d208      	bcs.n	800aa9a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800aa88:	4b10      	ldr	r3, [pc, #64]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	490d      	ldr	r1, [pc, #52]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800aa96:	4313      	orrs	r3, r2
 800aa98:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800aa9a:	f000 f821 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	4b0a      	ldr	r3, [pc, #40]	@ (800aacc <HAL_RCC_ClockConfig+0x3d0>)
 800aaa2:	6a1b      	ldr	r3, [r3, #32]
 800aaa4:	f003 030f 	and.w	r3, r3, #15
 800aaa8:	490a      	ldr	r1, [pc, #40]	@ (800aad4 <HAL_RCC_ClockConfig+0x3d8>)
 800aaaa:	5ccb      	ldrb	r3, [r1, r3]
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	4a09      	ldr	r2, [pc, #36]	@ (800aad8 <HAL_RCC_ClockConfig+0x3dc>)
 800aab2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aab4:	4b09      	ldr	r3, [pc, #36]	@ (800aadc <HAL_RCC_ClockConfig+0x3e0>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7f8 f84b 	bl	8002b54 <HAL_InitTick>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73fb      	strb	r3, [r7, #15]

  return status;
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	46020c00 	.word	0x46020c00
 800aad0:	40022000 	.word	0x40022000
 800aad4:	08011b94 	.word	0x08011b94
 800aad8:	20000020 	.word	0x20000020
 800aadc:	20000024 	.word	0x20000024

0800aae0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b08b      	sub	sp, #44	@ 0x2c
 800aae4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aaee:	4b78      	ldr	r3, [pc, #480]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	f003 030c 	and.w	r3, r3, #12
 800aaf6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aaf8:	4b75      	ldr	r3, [pc, #468]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafc:	f003 0303 	and.w	r3, r3, #3
 800ab00:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d005      	beq.n	800ab14 <HAL_RCC_GetSysClockFreq+0x34>
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	2b0c      	cmp	r3, #12
 800ab0c:	d121      	bne.n	800ab52 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d11e      	bne.n	800ab52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800ab14:	4b6e      	ldr	r3, [pc, #440]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d107      	bne.n	800ab30 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800ab20:	4b6b      	ldr	r3, [pc, #428]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab26:	0b1b      	lsrs	r3, r3, #12
 800ab28:	f003 030f 	and.w	r3, r3, #15
 800ab2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab2e:	e005      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800ab30:	4b67      	ldr	r3, [pc, #412]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	0f1b      	lsrs	r3, r3, #28
 800ab36:	f003 030f 	and.w	r3, r3, #15
 800ab3a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ab3c:	4a65      	ldr	r2, [pc, #404]	@ (800acd4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab44:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d110      	bne.n	800ab6e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab50:	e00d      	b.n	800ab6e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab52:	4b5f      	ldr	r3, [pc, #380]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	f003 030c 	and.w	r3, r3, #12
 800ab5a:	2b04      	cmp	r3, #4
 800ab5c:	d102      	bne.n	800ab64 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ab5e:	4b5e      	ldr	r3, [pc, #376]	@ (800acd8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ab60:	623b      	str	r3, [r7, #32]
 800ab62:	e004      	b.n	800ab6e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	2b08      	cmp	r3, #8
 800ab68:	d101      	bne.n	800ab6e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab6a:	4b5b      	ldr	r3, [pc, #364]	@ (800acd8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ab6c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	2b0c      	cmp	r3, #12
 800ab72:	f040 80a5 	bne.w	800acc0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ab76:	4b56      	ldr	r3, [pc, #344]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7a:	f003 0303 	and.w	r3, r3, #3
 800ab7e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ab80:	4b53      	ldr	r3, [pc, #332]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab84:	0a1b      	lsrs	r3, r3, #8
 800ab86:	f003 030f 	and.w	r3, r3, #15
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ab8e:	4b50      	ldr	r3, [pc, #320]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab92:	091b      	lsrs	r3, r3, #4
 800ab94:	f003 0301 	and.w	r3, r3, #1
 800ab98:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ab9a:	4b4d      	ldr	r3, [pc, #308]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9e:	08db      	lsrs	r3, r3, #3
 800aba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	fb02 f303 	mul.w	r3, r2, r3
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d003      	beq.n	800abc4 <HAL_RCC_GetSysClockFreq+0xe4>
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d022      	beq.n	800ac08 <HAL_RCC_GetSysClockFreq+0x128>
 800abc2:	e043      	b.n	800ac4c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	ee07 3a90 	vmov	s15, r3
 800abca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abce:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800acdc <HAL_RCC_GetSysClockFreq+0x1fc>
 800abd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abd6:	4b3e      	ldr	r3, [pc, #248]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800abe6:	ed97 6a01 	vldr	s12, [r7, #4]
 800abea:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800ace0 <HAL_RCC_GetSysClockFreq+0x200>
 800abee:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800abf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac06:	e046      	b.n	800ac96 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	ee07 3a90 	vmov	s15, r3
 800ac0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac12:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800acdc <HAL_RCC_GetSysClockFreq+0x1fc>
 800ac16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac1a:	4b2d      	ldr	r3, [pc, #180]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac22:	ee07 3a90 	vmov	s15, r3
 800ac26:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac2a:	ed97 6a01 	vldr	s12, [r7, #4]
 800ac2e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800ace0 <HAL_RCC_GetSysClockFreq+0x200>
 800ac32:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac36:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac4a:	e024      	b.n	800ac96 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	ee07 3a90 	vmov	s15, r3
 800ac5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac64:	4b1a      	ldr	r3, [pc, #104]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6c:	ee07 3a90 	vmov	s15, r3
 800ac70:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac74:	ed97 6a01 	vldr	s12, [r7, #4]
 800ac78:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800ace0 <HAL_RCC_GetSysClockFreq+0x200>
 800ac7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac80:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac88:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac94:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800ac96:	4b0e      	ldr	r3, [pc, #56]	@ (800acd0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac9a:	0e1b      	lsrs	r3, r3, #24
 800ac9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aca0:	3301      	adds	r3, #1
 800aca2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acae:	edd7 6a07 	vldr	s13, [r7, #28]
 800acb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acba:	ee17 3a90 	vmov	r3, s15
 800acbe:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800acc0:	6a3b      	ldr	r3, [r7, #32]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	372c      	adds	r7, #44	@ 0x2c
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	46020c00 	.word	0x46020c00
 800acd4:	08011bac 	.word	0x08011bac
 800acd8:	00f42400 	.word	0x00f42400
 800acdc:	4b742400 	.word	0x4b742400
 800ace0:	46000000 	.word	0x46000000

0800ace4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ace8:	f7ff fefa 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800acec:	4602      	mov	r2, r0
 800acee:	4b07      	ldr	r3, [pc, #28]	@ (800ad0c <HAL_RCC_GetHCLKFreq+0x28>)
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	f003 030f 	and.w	r3, r3, #15
 800acf6:	4906      	ldr	r1, [pc, #24]	@ (800ad10 <HAL_RCC_GetHCLKFreq+0x2c>)
 800acf8:	5ccb      	ldrb	r3, [r1, r3]
 800acfa:	fa22 f303 	lsr.w	r3, r2, r3
 800acfe:	4a05      	ldr	r2, [pc, #20]	@ (800ad14 <HAL_RCC_GetHCLKFreq+0x30>)
 800ad00:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800ad02:	4b04      	ldr	r3, [pc, #16]	@ (800ad14 <HAL_RCC_GetHCLKFreq+0x30>)
 800ad04:	681b      	ldr	r3, [r3, #0]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	46020c00 	.word	0x46020c00
 800ad10:	08011b94 	.word	0x08011b94
 800ad14:	20000020 	.word	0x20000020

0800ad18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ad1c:	f7ff ffe2 	bl	800ace4 <HAL_RCC_GetHCLKFreq>
 800ad20:	4602      	mov	r2, r0
 800ad22:	4b05      	ldr	r3, [pc, #20]	@ (800ad38 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	091b      	lsrs	r3, r3, #4
 800ad28:	f003 0307 	and.w	r3, r3, #7
 800ad2c:	4903      	ldr	r1, [pc, #12]	@ (800ad3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad2e:	5ccb      	ldrb	r3, [r1, r3]
 800ad30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	46020c00 	.word	0x46020c00
 800ad3c:	08011ba4 	.word	0x08011ba4

0800ad40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800ad44:	f7ff ffce 	bl	800ace4 <HAL_RCC_GetHCLKFreq>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	4b05      	ldr	r3, [pc, #20]	@ (800ad60 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	0a1b      	lsrs	r3, r3, #8
 800ad50:	f003 0307 	and.w	r3, r3, #7
 800ad54:	4903      	ldr	r1, [pc, #12]	@ (800ad64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad56:	5ccb      	ldrb	r3, [r1, r3]
 800ad58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	46020c00 	.word	0x46020c00
 800ad64:	08011ba4 	.word	0x08011ba4

0800ad68 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800ad6c:	f7ff ffba 	bl	800ace4 <HAL_RCC_GetHCLKFreq>
 800ad70:	4602      	mov	r2, r0
 800ad72:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <HAL_RCC_GetPCLK3Freq+0x20>)
 800ad74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad76:	091b      	lsrs	r3, r3, #4
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	4903      	ldr	r1, [pc, #12]	@ (800ad8c <HAL_RCC_GetPCLK3Freq+0x24>)
 800ad7e:	5ccb      	ldrb	r3, [r1, r3]
 800ad80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	46020c00 	.word	0x46020c00
 800ad8c:	08011ba4 	.word	0x08011ba4

0800ad90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ad98:	4b3e      	ldr	r3, [pc, #248]	@ (800ae94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad9e:	f003 0304 	and.w	r3, r3, #4
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d003      	beq.n	800adae <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ada6:	f7fe fd21 	bl	80097ec <HAL_PWREx_GetVoltageRange>
 800adaa:	6178      	str	r0, [r7, #20]
 800adac:	e019      	b.n	800ade2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800adae:	4b39      	ldr	r3, [pc, #228]	@ (800ae94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adb4:	4a37      	ldr	r2, [pc, #220]	@ (800ae94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adb6:	f043 0304 	orr.w	r3, r3, #4
 800adba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800adbe:	4b35      	ldr	r3, [pc, #212]	@ (800ae94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800adcc:	f7fe fd0e 	bl	80097ec <HAL_PWREx_GetVoltageRange>
 800add0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800add2:	4b30      	ldr	r3, [pc, #192]	@ (800ae94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800add4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800add8:	4a2e      	ldr	r2, [pc, #184]	@ (800ae94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adda:	f023 0304 	bic.w	r3, r3, #4
 800adde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ade8:	d003      	beq.n	800adf2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adf0:	d109      	bne.n	800ae06 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adf8:	d202      	bcs.n	800ae00 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800adfa:	2301      	movs	r3, #1
 800adfc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800adfe:	e033      	b.n	800ae68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800ae00:	2300      	movs	r3, #0
 800ae02:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ae04:	e030      	b.n	800ae68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae0c:	d208      	bcs.n	800ae20 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae14:	d102      	bne.n	800ae1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800ae16:	2303      	movs	r3, #3
 800ae18:	613b      	str	r3, [r7, #16]
 800ae1a:	e025      	b.n	800ae68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e035      	b.n	800ae8c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae26:	d90f      	bls.n	800ae48 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d109      	bne.n	800ae42 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae34:	d902      	bls.n	800ae3c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800ae36:	2300      	movs	r3, #0
 800ae38:	613b      	str	r3, [r7, #16]
 800ae3a:	e015      	b.n	800ae68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	613b      	str	r3, [r7, #16]
 800ae40:	e012      	b.n	800ae68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800ae42:	2300      	movs	r3, #0
 800ae44:	613b      	str	r3, [r7, #16]
 800ae46:	e00f      	b.n	800ae68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae4e:	d109      	bne.n	800ae64 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae56:	d102      	bne.n	800ae5e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800ae58:	2301      	movs	r3, #1
 800ae5a:	613b      	str	r3, [r7, #16]
 800ae5c:	e004      	b.n	800ae68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800ae5e:	2302      	movs	r3, #2
 800ae60:	613b      	str	r3, [r7, #16]
 800ae62:	e001      	b.n	800ae68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800ae64:	2301      	movs	r3, #1
 800ae66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ae68:	4b0b      	ldr	r3, [pc, #44]	@ (800ae98 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f023 020f 	bic.w	r2, r3, #15
 800ae70:	4909      	ldr	r1, [pc, #36]	@ (800ae98 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800ae78:	4b07      	ldr	r3, [pc, #28]	@ (800ae98 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 030f 	and.w	r3, r3, #15
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d001      	beq.n	800ae8a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e000      	b.n	800ae8c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	46020c00 	.word	0x46020c00
 800ae98:	40022000 	.word	0x40022000

0800ae9c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800ae9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aea0:	b0c8      	sub	sp, #288	@ 0x120
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aeb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f002 0401 	and.w	r4, r2, #1
 800aec0:	2500      	movs	r5, #0
 800aec2:	ea54 0305 	orrs.w	r3, r4, r5
 800aec6:	d00b      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800aec8:	4bd5      	ldr	r3, [pc, #852]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aeca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aece:	f023 0103 	bic.w	r1, r3, #3
 800aed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aed8:	4ad1      	ldr	r2, [pc, #836]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aeda:	430b      	orrs	r3, r1
 800aedc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f002 0802 	and.w	r8, r2, #2
 800aeec:	f04f 0900 	mov.w	r9, #0
 800aef0:	ea58 0309 	orrs.w	r3, r8, r9
 800aef4:	d00b      	beq.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800aef6:	4bca      	ldr	r3, [pc, #808]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aefc:	f023 010c 	bic.w	r1, r3, #12
 800af00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af06:	4ac6      	ldr	r2, [pc, #792]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af08:	430b      	orrs	r3, r1
 800af0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	f002 0a04 	and.w	sl, r2, #4
 800af1a:	f04f 0b00 	mov.w	fp, #0
 800af1e:	ea5a 030b 	orrs.w	r3, sl, fp
 800af22:	d00b      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800af24:	4bbe      	ldr	r3, [pc, #760]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af2a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800af2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af34:	4aba      	ldr	r2, [pc, #744]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af36:	430b      	orrs	r3, r1
 800af38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800af3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f002 0308 	and.w	r3, r2, #8
 800af48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800af4c:	2300      	movs	r3, #0
 800af4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800af52:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800af56:	460b      	mov	r3, r1
 800af58:	4313      	orrs	r3, r2
 800af5a:	d00b      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800af5c:	4bb0      	ldr	r3, [pc, #704]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800af66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af6c:	4aac      	ldr	r2, [pc, #688]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af6e:	430b      	orrs	r3, r1
 800af70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800af74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	f002 0310 	and.w	r3, r2, #16
 800af80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af84:	2300      	movs	r3, #0
 800af86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800af8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800af8e:	460b      	mov	r3, r1
 800af90:	4313      	orrs	r3, r2
 800af92:	d00b      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800af94:	4ba2      	ldr	r3, [pc, #648]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800af9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afa4:	4a9e      	ldr	r2, [pc, #632]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afa6:	430b      	orrs	r3, r1
 800afa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800afac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800afb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800afbc:	2300      	movs	r3, #0
 800afbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800afc2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4313      	orrs	r3, r2
 800afca:	d00b      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800afcc:	4b94      	ldr	r3, [pc, #592]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800afd2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800afd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afdc:	4a90      	ldr	r2, [pc, #576]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afde:	430b      	orrs	r3, r1
 800afe0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800afe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	f002 0320 	and.w	r3, r2, #32
 800aff0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aff4:	2300      	movs	r3, #0
 800aff6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800affa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800affe:	460b      	mov	r3, r1
 800b000:	4313      	orrs	r3, r2
 800b002:	d00b      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b004:	4b86      	ldr	r3, [pc, #536]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b00a:	f023 0107 	bic.w	r1, r3, #7
 800b00e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b012:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b014:	4a82      	ldr	r2, [pc, #520]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b016:	430b      	orrs	r3, r1
 800b018:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b01c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b02c:	2300      	movs	r3, #0
 800b02e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b032:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b036:	460b      	mov	r3, r1
 800b038:	4313      	orrs	r3, r2
 800b03a:	d00b      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b03c:	4b78      	ldr	r3, [pc, #480]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b03e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b042:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b04a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b04c:	4a74      	ldr	r2, [pc, #464]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b04e:	430b      	orrs	r3, r1
 800b050:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b060:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b064:	2300      	movs	r3, #0
 800b066:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b06a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b06e:	460b      	mov	r3, r1
 800b070:	4313      	orrs	r3, r2
 800b072:	d00b      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b074:	4b6a      	ldr	r3, [pc, #424]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b07a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b07e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b084:	4a66      	ldr	r2, [pc, #408]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b086:	430b      	orrs	r3, r1
 800b088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b08c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b09c:	2300      	movs	r3, #0
 800b09e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b0a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	d00b      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b0ac:	4b5c      	ldr	r3, [pc, #368]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b0b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b0b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0bc:	4a58      	ldr	r2, [pc, #352]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0be:	430b      	orrs	r3, r1
 800b0c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b0c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b0d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b0da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	d00b      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b0e4:	4b4e      	ldr	r3, [pc, #312]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0ea:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b0ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0f4:	4a4a      	ldr	r2, [pc, #296]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0f6:	430b      	orrs	r3, r1
 800b0f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b0fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b104:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b10c:	2300      	movs	r3, #0
 800b10e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b112:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b116:	460b      	mov	r3, r1
 800b118:	4313      	orrs	r3, r2
 800b11a:	d00b      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b11c:	4b40      	ldr	r3, [pc, #256]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b11e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b122:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b12a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b12c:	4a3c      	ldr	r2, [pc, #240]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b12e:	430b      	orrs	r3, r1
 800b130:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b134:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b144:	2300      	movs	r3, #0
 800b146:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b14a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b14e:	460b      	mov	r3, r1
 800b150:	4313      	orrs	r3, r2
 800b152:	d00c      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b154:	4b32      	ldr	r3, [pc, #200]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b156:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b15a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b15e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b166:	4a2e      	ldr	r2, [pc, #184]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b168:	430b      	orrs	r3, r1
 800b16a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b16e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b17a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b17e:	2300      	movs	r3, #0
 800b180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b184:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b188:	460b      	mov	r3, r1
 800b18a:	4313      	orrs	r3, r2
 800b18c:	d00c      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b18e:	4b24      	ldr	r3, [pc, #144]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b194:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1a0:	4a1f      	ldr	r2, [pc, #124]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1a2:	430b      	orrs	r3, r1
 800b1a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b1a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b1b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	d00c      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b1c8:	4b15      	ldr	r3, [pc, #84]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1ce:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1da:	4a11      	ldr	r2, [pc, #68]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1dc:	430b      	orrs	r3, r1
 800b1de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b1e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b1ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b1f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4313      	orrs	r3, r2
 800b200:	d010      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b202:	4b07      	ldr	r3, [pc, #28]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b208:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b20c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b214:	4a02      	ldr	r2, [pc, #8]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b216:	430b      	orrs	r3, r1
 800b218:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b21c:	e002      	b.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b21e:	bf00      	nop
 800b220:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b234:	2300      	movs	r3, #0
 800b236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b23a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b23e:	460b      	mov	r3, r1
 800b240:	4313      	orrs	r3, r2
 800b242:	d04c      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b248:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b24c:	2b80      	cmp	r3, #128	@ 0x80
 800b24e:	d02d      	beq.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b250:	2b80      	cmp	r3, #128	@ 0x80
 800b252:	d827      	bhi.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b254:	2b60      	cmp	r3, #96	@ 0x60
 800b256:	d02b      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b258:	2b60      	cmp	r3, #96	@ 0x60
 800b25a:	d823      	bhi.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b25c:	2b40      	cmp	r3, #64	@ 0x40
 800b25e:	d006      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b260:	2b40      	cmp	r3, #64	@ 0x40
 800b262:	d81f      	bhi.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b264:	2b00      	cmp	r3, #0
 800b266:	d009      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b268:	2b20      	cmp	r3, #32
 800b26a:	d011      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b26c:	e01a      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b26e:	4bc0      	ldr	r3, [pc, #768]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b272:	4abf      	ldr	r2, [pc, #764]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b278:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b27a:	e01a      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b27c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b280:	3308      	adds	r3, #8
 800b282:	4618      	mov	r0, r3
 800b284:	f002 fcd6 	bl	800dc34 <RCCEx_PLL2_Config>
 800b288:	4603      	mov	r3, r0
 800b28a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b28e:	e010      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b294:	332c      	adds	r3, #44	@ 0x2c
 800b296:	4618      	mov	r0, r3
 800b298:	f002 fd64 	bl	800dd64 <RCCEx_PLL3_Config>
 800b29c:	4603      	mov	r3, r0
 800b29e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b2a2:	e006      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b2aa:	e002      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b2ac:	bf00      	nop
 800b2ae:	e000      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b2b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2b2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10d      	bne.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b2ba:	4bad      	ldr	r3, [pc, #692]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b2c0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b2c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b2cc:	4aa8      	ldr	r2, [pc, #672]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2ce:	430b      	orrs	r3, r1
 800b2d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b2d4:	e003      	b.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2d6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2da:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b2ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b2f4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	d053      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b302:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b30a:	d033      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b30c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b310:	d82c      	bhi.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b316:	d02f      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b318:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b31c:	d826      	bhi.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b31e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b322:	d008      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b328:	d820      	bhi.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00a      	beq.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b32e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b332:	d011      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b334:	e01a      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b336:	4b8e      	ldr	r3, [pc, #568]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b33a:	4a8d      	ldr	r2, [pc, #564]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b33c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b340:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b342:	e01a      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b348:	3308      	adds	r3, #8
 800b34a:	4618      	mov	r0, r3
 800b34c:	f002 fc72 	bl	800dc34 <RCCEx_PLL2_Config>
 800b350:	4603      	mov	r3, r0
 800b352:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b356:	e010      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b35c:	332c      	adds	r3, #44	@ 0x2c
 800b35e:	4618      	mov	r0, r3
 800b360:	f002 fd00 	bl	800dd64 <RCCEx_PLL3_Config>
 800b364:	4603      	mov	r3, r0
 800b366:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b36a:	e006      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b372:	e002      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b374:	bf00      	nop
 800b376:	e000      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b37a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10d      	bne.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b382:	4b7b      	ldr	r3, [pc, #492]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b384:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b388:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b38c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b394:	4a76      	ldr	r2, [pc, #472]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b396:	430b      	orrs	r3, r1
 800b398:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b39c:	e003      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b39e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3a2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b3a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b3b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b3bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	d046      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b3c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b3ce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3d2:	d028      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3d4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3d8:	d821      	bhi.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3de:	d022      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3e4:	d81b      	bhi.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3ea:	d01c      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3f0:	d815      	bhi.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3f6:	d008      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b3f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3fc:	d80f      	bhi.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d011      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b406:	d00e      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b408:	e009      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b40a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b40e:	3308      	adds	r3, #8
 800b410:	4618      	mov	r0, r3
 800b412:	f002 fc0f 	bl	800dc34 <RCCEx_PLL2_Config>
 800b416:	4603      	mov	r3, r0
 800b418:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b41c:	e004      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b424:	e000      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b426:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b428:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10d      	bne.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b430:	4b4f      	ldr	r3, [pc, #316]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b436:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b43a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b43e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b442:	4a4b      	ldr	r2, [pc, #300]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b444:	430b      	orrs	r3, r1
 800b446:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b44a:	e003      	b.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b44c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b450:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b464:	2300      	movs	r3, #0
 800b466:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b46a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b46e:	460b      	mov	r3, r1
 800b470:	4313      	orrs	r3, r2
 800b472:	d03f      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b47c:	2b04      	cmp	r3, #4
 800b47e:	d81e      	bhi.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b480:	a201      	add	r2, pc, #4	@ (adr r2, 800b488 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b486:	bf00      	nop
 800b488:	0800b4c7 	.word	0x0800b4c7
 800b48c:	0800b49d 	.word	0x0800b49d
 800b490:	0800b4ab 	.word	0x0800b4ab
 800b494:	0800b4c7 	.word	0x0800b4c7
 800b498:	0800b4c7 	.word	0x0800b4c7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b49c:	4b34      	ldr	r3, [pc, #208]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a0:	4a33      	ldr	r2, [pc, #204]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4a6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b4a8:	e00e      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b4aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ae:	332c      	adds	r3, #44	@ 0x2c
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f002 fc57 	bl	800dd64 <RCCEx_PLL3_Config>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4bc:	e004      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4c4:	e000      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b4c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b4c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10d      	bne.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b4d0:	4b27      	ldr	r3, [pc, #156]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b4d6:	f023 0107 	bic.w	r1, r3, #7
 800b4da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4e2:	4a23      	ldr	r2, [pc, #140]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b4ea:	e003      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4f0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b4f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b500:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b502:	2300      	movs	r3, #0
 800b504:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b506:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b50a:	460b      	mov	r3, r1
 800b50c:	4313      	orrs	r3, r2
 800b50e:	d04c      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b514:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b518:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b51c:	d02a      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b51e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b522:	d821      	bhi.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b524:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b528:	d026      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b52a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b52e:	d81b      	bhi.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b534:	d00e      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b53a:	d815      	bhi.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01d      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b544:	d110      	bne.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b546:	4b0a      	ldr	r3, [pc, #40]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b54a:	4a09      	ldr	r2, [pc, #36]	@ (800b570 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b54c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b550:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b552:	e014      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b558:	332c      	adds	r3, #44	@ 0x2c
 800b55a:	4618      	mov	r0, r3
 800b55c:	f002 fc02 	bl	800dd64 <RCCEx_PLL3_Config>
 800b560:	4603      	mov	r3, r0
 800b562:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b566:	e00a      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b56e:	e006      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b570:	46020c00 	.word	0x46020c00
        break;
 800b574:	bf00      	nop
 800b576:	e002      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b578:	bf00      	nop
 800b57a:	e000      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b57c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b57e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10d      	bne.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b586:	4baf      	ldr	r3, [pc, #700]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b58c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b598:	4aaa      	ldr	r2, [pc, #680]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b59a:	430b      	orrs	r3, r1
 800b59c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b5a0:	e003      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5a6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b5b6:	673b      	str	r3, [r7, #112]	@ 0x70
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	677b      	str	r3, [r7, #116]	@ 0x74
 800b5bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	f000 80b5 	beq.w	800b732 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5ce:	4b9d      	ldr	r3, [pc, #628]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5d4:	f003 0304 	and.w	r3, r3, #4
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d113      	bne.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5dc:	4b99      	ldr	r3, [pc, #612]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5e2:	4a98      	ldr	r2, [pc, #608]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5e4:	f043 0304 	orr.w	r3, r3, #4
 800b5e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b5ec:	4b95      	ldr	r3, [pc, #596]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5f2:	f003 0304 	and.w	r3, r3, #4
 800b5f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b5fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b5fe:	2301      	movs	r3, #1
 800b600:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b604:	4b90      	ldr	r3, [pc, #576]	@ (800b848 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b608:	4a8f      	ldr	r2, [pc, #572]	@ (800b848 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b60a:	f043 0301 	orr.w	r3, r3, #1
 800b60e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b610:	f7f7 fb2a 	bl	8002c68 <HAL_GetTick>
 800b614:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b618:	e00b      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b61a:	f7f7 fb25 	bl	8002c68 <HAL_GetTick>
 800b61e:	4602      	mov	r2, r0
 800b620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b624:	1ad3      	subs	r3, r2, r3
 800b626:	2b02      	cmp	r3, #2
 800b628:	d903      	bls.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b62a:	2303      	movs	r3, #3
 800b62c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b630:	e005      	b.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b632:	4b85      	ldr	r3, [pc, #532]	@ (800b848 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d0ed      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b63e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b642:	2b00      	cmp	r3, #0
 800b644:	d165      	bne.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b646:	4b7f      	ldr	r3, [pc, #508]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b64c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b650:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b654:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d023      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b65c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b660:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b664:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b668:	4293      	cmp	r3, r2
 800b66a:	d01b      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b66c:	4b75      	ldr	r3, [pc, #468]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b66e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b676:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b67a:	4b72      	ldr	r3, [pc, #456]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b67c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b680:	4a70      	ldr	r2, [pc, #448]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b686:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b68a:	4b6e      	ldr	r3, [pc, #440]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b68c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b690:	4a6c      	ldr	r2, [pc, #432]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b696:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b69a:	4a6a      	ldr	r2, [pc, #424]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b69c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b6a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b6a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d019      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6b0:	f7f7 fada 	bl	8002c68 <HAL_GetTick>
 800b6b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6b8:	e00d      	b.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6ba:	f7f7 fad5 	bl	8002c68 <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6c4:	1ad2      	subs	r2, r2, r3
 800b6c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d903      	bls.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b6d4:	e006      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6d6:	4b5b      	ldr	r3, [pc, #364]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6dc:	f003 0302 	and.w	r3, r3, #2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d0ea      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b6e4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10d      	bne.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b6ec:	4b55      	ldr	r3, [pc, #340]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b6f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6fa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b6fe:	4a51      	ldr	r2, [pc, #324]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b700:	430b      	orrs	r3, r1
 800b702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b706:	e008      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b708:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b70c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b710:	e003      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b712:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b716:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b71a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d107      	bne.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b722:	4b48      	ldr	r3, [pc, #288]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b728:	4a46      	ldr	r2, [pc, #280]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b72a:	f023 0304 	bic.w	r3, r3, #4
 800b72e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b73e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b740:	2300      	movs	r3, #0
 800b742:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b744:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b748:	460b      	mov	r3, r1
 800b74a:	4313      	orrs	r3, r2
 800b74c:	d042      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b74e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b756:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b75a:	d022      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b75c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b760:	d81b      	bhi.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b766:	d011      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b76c:	d815      	bhi.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d019      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b772:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b776:	d110      	bne.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b77c:	3308      	adds	r3, #8
 800b77e:	4618      	mov	r0, r3
 800b780:	f002 fa58 	bl	800dc34 <RCCEx_PLL2_Config>
 800b784:	4603      	mov	r3, r0
 800b786:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b78a:	e00d      	b.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b78c:	4b2d      	ldr	r3, [pc, #180]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b790:	4a2c      	ldr	r2, [pc, #176]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b796:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b798:	e006      	b.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b7a0:	e002      	b.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b7a2:	bf00      	nop
 800b7a4:	e000      	b.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b7a6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b7a8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10d      	bne.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b7b0:	4b24      	ldr	r3, [pc, #144]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7b6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b7ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b7c2:	4a20      	ldr	r2, [pc, #128]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7c4:	430b      	orrs	r3, r1
 800b7c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b7ca:	e003      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7cc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7d0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b7d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b7e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b7e6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	d031      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b7f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7fc:	d00b      	beq.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b7fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b802:	d804      	bhi.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d008      	beq.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b80c:	d007      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b814:	e004      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b816:	bf00      	nop
 800b818:	e002      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b81a:	bf00      	nop
 800b81c:	e000      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b81e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b820:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b824:	2b00      	cmp	r3, #0
 800b826:	d111      	bne.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b828:	4b06      	ldr	r3, [pc, #24]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b82a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b82e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b836:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b83a:	4a02      	ldr	r2, [pc, #8]	@ (800b844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b83c:	430b      	orrs	r3, r1
 800b83e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b842:	e007      	b.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b844:	46020c00 	.word	0x46020c00
 800b848:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b84c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b850:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b860:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b862:	2300      	movs	r3, #0
 800b864:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b866:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b86a:	460b      	mov	r3, r1
 800b86c:	4313      	orrs	r3, r2
 800b86e:	d00c      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b870:	4bb2      	ldr	r3, [pc, #712]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b876:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b87a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b87e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b882:	4aae      	ldr	r2, [pc, #696]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b884:	430b      	orrs	r3, r1
 800b886:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b88a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b896:	653b      	str	r3, [r7, #80]	@ 0x50
 800b898:	2300      	movs	r3, #0
 800b89a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b89c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	d019      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b8a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b8ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8b2:	d105      	bne.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b8b4:	4ba1      	ldr	r3, [pc, #644]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8b8:	4aa0      	ldr	r2, [pc, #640]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8be:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b8c0:	4b9e      	ldr	r3, [pc, #632]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b8c6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b8ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b8d2:	4a9a      	ldr	r2, [pc, #616]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8d4:	430b      	orrs	r3, r1
 800b8d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b8da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b8e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	d00c      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b8f6:	4b91      	ldr	r3, [pc, #580]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8fc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b904:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b908:	4a8c      	ldr	r2, [pc, #560]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b90a:	430b      	orrs	r3, r1
 800b90c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b91c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b91e:	2300      	movs	r3, #0
 800b920:	647b      	str	r3, [r7, #68]	@ 0x44
 800b922:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b926:	460b      	mov	r3, r1
 800b928:	4313      	orrs	r3, r2
 800b92a:	d00c      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b92c:	4b83      	ldr	r3, [pc, #524]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b92e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b932:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b93a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b93e:	4a7f      	ldr	r2, [pc, #508]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b940:	430b      	orrs	r3, r1
 800b942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b952:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b954:	2300      	movs	r3, #0
 800b956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b958:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b95c:	460b      	mov	r3, r1
 800b95e:	4313      	orrs	r3, r2
 800b960:	d00c      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b962:	4b76      	ldr	r3, [pc, #472]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b968:	f023 0118 	bic.w	r1, r3, #24
 800b96c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b970:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b974:	4a71      	ldr	r2, [pc, #452]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b976:	430b      	orrs	r3, r1
 800b978:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b97c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b988:	633b      	str	r3, [r7, #48]	@ 0x30
 800b98a:	2300      	movs	r3, #0
 800b98c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b98e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b992:	460b      	mov	r3, r1
 800b994:	4313      	orrs	r3, r2
 800b996:	d032      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b998:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b99c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9a4:	d105      	bne.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9a6:	4b65      	ldr	r3, [pc, #404]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9aa:	4a64      	ldr	r2, [pc, #400]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9b0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b9b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9be:	d108      	bne.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f002 f934 	bl	800dc34 <RCCEx_PLL2_Config>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b9d2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10d      	bne.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b9da:	4b58      	ldr	r3, [pc, #352]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b9e0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b9e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9ec:	4a53      	ldr	r2, [pc, #332]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9ee:	430b      	orrs	r3, r1
 800b9f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b9f4:	e003      	b.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9fa:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b9fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	2100      	movs	r1, #0
 800ba08:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ba14:	460b      	mov	r3, r1
 800ba16:	4313      	orrs	r3, r2
 800ba18:	d04a      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800ba1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ba22:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ba26:	d01e      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800ba28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ba2c:	d825      	bhi.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800ba2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba32:	d00e      	beq.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800ba34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba38:	d81f      	bhi.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d021      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800ba3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba42:	d11a      	bne.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba44:	4b3d      	ldr	r3, [pc, #244]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba48:	4a3c      	ldr	r2, [pc, #240]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba4e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba50:	e018      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba56:	3308      	adds	r3, #8
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f002 f8eb 	bl	800dc34 <RCCEx_PLL2_Config>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba64:	e00e      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba6a:	332c      	adds	r3, #44	@ 0x2c
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f002 f979 	bl	800dd64 <RCCEx_PLL3_Config>
 800ba72:	4603      	mov	r3, r0
 800ba74:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba78:	e004      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ba80:	e000      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800ba82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba84:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10d      	bne.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800ba8c:	4b2b      	ldr	r3, [pc, #172]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ba96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ba9e:	4927      	ldr	r1, [pc, #156]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baa0:	4313      	orrs	r3, r2
 800baa2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800baa6:	e003      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800baac:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800bab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800babc:	623b      	str	r3, [r7, #32]
 800babe:	2300      	movs	r3, #0
 800bac0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bac2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bac6:	460b      	mov	r3, r1
 800bac8:	4313      	orrs	r3, r2
 800baca:	d03d      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800bacc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bad4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bad8:	d00e      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800bada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bade:	d815      	bhi.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d017      	beq.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bae8:	d110      	bne.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baea:	4b14      	ldr	r3, [pc, #80]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baee:	4a13      	ldr	r2, [pc, #76]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800baf4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800baf6:	e00e      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800baf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bafc:	3308      	adds	r3, #8
 800bafe:	4618      	mov	r0, r3
 800bb00:	f002 f898 	bl	800dc34 <RCCEx_PLL2_Config>
 800bb04:	4603      	mov	r3, r0
 800bb06:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bb0a:	e004      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb12:	e000      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bb14:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bb16:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d110      	bne.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800bb1e:	4b07      	ldr	r3, [pc, #28]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb24:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bb28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb30:	4902      	ldr	r1, [pc, #8]	@ (800bb3c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb32:	4313      	orrs	r3, r2
 800bb34:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bb38:	e006      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bb3a:	bf00      	nop
 800bb3c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb40:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb44:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800bb48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bb54:	61bb      	str	r3, [r7, #24]
 800bb56:	2300      	movs	r3, #0
 800bb58:	61fb      	str	r3, [r7, #28]
 800bb5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb5e:	460b      	mov	r3, r1
 800bb60:	4313      	orrs	r3, r2
 800bb62:	d00c      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bb64:	4b68      	ldr	r3, [pc, #416]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb6a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bb6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bb76:	4964      	ldr	r1, [pc, #400]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	2100      	movs	r1, #0
 800bb88:	6139      	str	r1, [r7, #16]
 800bb8a:	f003 0302 	and.w	r3, r3, #2
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb94:	460b      	mov	r3, r1
 800bb96:	4313      	orrs	r3, r2
 800bb98:	d036      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800bb9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00c      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bba6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bbaa:	d113      	bne.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bbac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb0:	3308      	adds	r3, #8
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f002 f83e 	bl	800dc34 <RCCEx_PLL2_Config>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bbbe:	e00d      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bbc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbc4:	332c      	adds	r3, #44	@ 0x2c
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f002 f8cc 	bl	800dd64 <RCCEx_PLL3_Config>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bbd2:	e003      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bbda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbdc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10d      	bne.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800bbe4:	4b48      	ldr	r3, [pc, #288]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bbe6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800bbee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbf2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bbf6:	4944      	ldr	r1, [pc, #272]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bbfe:	e003      	b.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc00:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc04:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bc08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	2100      	movs	r1, #0
 800bc12:	60b9      	str	r1, [r7, #8]
 800bc14:	f003 0304 	and.w	r3, r3, #4
 800bc18:	60fb      	str	r3, [r7, #12]
 800bc1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bc1e:	460b      	mov	r3, r1
 800bc20:	4313      	orrs	r3, r2
 800bc22:	d024      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bc24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d108      	bne.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc34:	332c      	adds	r3, #44	@ 0x2c
 800bc36:	4618      	mov	r0, r3
 800bc38:	f002 f894 	bl	800dd64 <RCCEx_PLL3_Config>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800bc42:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10d      	bne.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800bc4a:	4b2f      	ldr	r3, [pc, #188]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc50:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bc54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc5c:	492a      	ldr	r1, [pc, #168]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc64:	e003      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc66:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc6a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800bc6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	2100      	movs	r1, #0
 800bc78:	6039      	str	r1, [r7, #0]
 800bc7a:	f003 0308 	and.w	r3, r3, #8
 800bc7e:	607b      	str	r3, [r7, #4]
 800bc80:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bc84:	460b      	mov	r3, r1
 800bc86:	4313      	orrs	r3, r2
 800bc88:	d036      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800bc8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bc92:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bc96:	d00d      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800bc98:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bc9c:	d811      	bhi.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bc9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bca2:	d012      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bca4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bca8:	d80b      	bhi.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00d      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bcae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcb2:	d106      	bne.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bcb4:	4b14      	ldr	r3, [pc, #80]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb8:	4a13      	ldr	r2, [pc, #76]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bcbe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800bcc0:	e004      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bcc8:	e000      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800bcca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bccc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10d      	bne.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800bcd4:	4b0c      	ldr	r3, [pc, #48]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bcda:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bcde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bce2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bce6:	4908      	ldr	r1, [pc, #32]	@ (800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bce8:	4313      	orrs	r3, r2
 800bcea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bcee:	e003      	b.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcf0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bcf4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800bcf8:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bd02:	46bd      	mov	sp, r7
 800bd04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd08:	46020c00 	.word	0x46020c00

0800bd0c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b089      	sub	sp, #36	@ 0x24
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bd14:	4ba6      	ldr	r3, [pc, #664]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd1c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bd1e:	4ba4      	ldr	r3, [pc, #656]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd22:	f003 0303 	and.w	r3, r3, #3
 800bd26:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800bd28:	4ba1      	ldr	r3, [pc, #644]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd2c:	0a1b      	lsrs	r3, r3, #8
 800bd2e:	f003 030f 	and.w	r3, r3, #15
 800bd32:	3301      	adds	r3, #1
 800bd34:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bd36:	4b9e      	ldr	r3, [pc, #632]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3a:	091b      	lsrs	r3, r3, #4
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bd42:	4b9b      	ldr	r3, [pc, #620]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd46:	08db      	lsrs	r3, r3, #3
 800bd48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	fb02 f303 	mul.w	r3, r2, r3
 800bd52:	ee07 3a90 	vmov	s15, r3
 800bd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd5a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d062      	beq.n	800be2a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	f200 8081 	bhi.w	800be6e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d024      	beq.n	800bdbc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	d17a      	bne.n	800be6e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	ee07 3a90 	vmov	s15, r3
 800bd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd82:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bd86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd8a:	4b89      	ldr	r3, [pc, #548]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd9e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bfb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdba:	e08f      	b.n	800bedc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bdbc:	4b7c      	ldr	r3, [pc, #496]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d005      	beq.n	800bdd4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800bdc8:	4b79      	ldr	r3, [pc, #484]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	0f1b      	lsrs	r3, r3, #28
 800bdce:	f003 030f 	and.w	r3, r3, #15
 800bdd2:	e006      	b.n	800bde2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800bdd4:	4b76      	ldr	r3, [pc, #472]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bdda:	041b      	lsls	r3, r3, #16
 800bddc:	0f1b      	lsrs	r3, r3, #28
 800bdde:	f003 030f 	and.w	r3, r3, #15
 800bde2:	4a76      	ldr	r2, [pc, #472]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bde8:	ee07 3a90 	vmov	s15, r3
 800bdec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	ee07 3a90 	vmov	s15, r3
 800bdf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	ee07 3a90 	vmov	s15, r3
 800be04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be08:	ed97 6a02 	vldr	s12, [r7, #8]
 800be0c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bfb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be28:	e058      	b.n	800bedc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	ee07 3a90 	vmov	s15, r3
 800be30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be34:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800be38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be3c:	4b5c      	ldr	r3, [pc, #368]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be44:	ee07 3a90 	vmov	s15, r3
 800be48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800be4c:	ed97 6a02 	vldr	s12, [r7, #8]
 800be50:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bfb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be54:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800be5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be60:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be6c:	e036      	b.n	800bedc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be6e:	4b50      	ldr	r3, [pc, #320]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d005      	beq.n	800be86 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800be7a:	4b4d      	ldr	r3, [pc, #308]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	0f1b      	lsrs	r3, r3, #28
 800be80:	f003 030f 	and.w	r3, r3, #15
 800be84:	e006      	b.n	800be94 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800be86:	4b4a      	ldr	r3, [pc, #296]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be8c:	041b      	lsls	r3, r3, #16
 800be8e:	0f1b      	lsrs	r3, r3, #28
 800be90:	f003 030f 	and.w	r3, r3, #15
 800be94:	4a49      	ldr	r2, [pc, #292]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800be96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be9a:	ee07 3a90 	vmov	s15, r3
 800be9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	ee07 3a90 	vmov	s15, r3
 800bea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	ee07 3a90 	vmov	s15, r3
 800beb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beba:	ed97 6a02 	vldr	s12, [r7, #8]
 800bebe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bfb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bece:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800beda:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800bedc:	4b34      	ldr	r3, [pc, #208]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d017      	beq.n	800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bee8:	4b31      	ldr	r3, [pc, #196]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800beea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beec:	0a5b      	lsrs	r3, r3, #9
 800beee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bef2:	ee07 3a90 	vmov	s15, r3
 800bef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800befa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800befe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf02:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf0e:	ee17 2a90 	vmov	r2, s15
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	601a      	str	r2, [r3, #0]
 800bf16:	e002      	b.n	800bf1e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800bf1e:	4b24      	ldr	r3, [pc, #144]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d017      	beq.n	800bf5a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf2a:	4b21      	ldr	r3, [pc, #132]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf2e:	0c1b      	lsrs	r3, r3, #16
 800bf30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf34:	ee07 3a90 	vmov	s15, r3
 800bf38:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800bf3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf40:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf44:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf50:	ee17 2a90 	vmov	r2, s15
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	605a      	str	r2, [r3, #4]
 800bf58:	e002      	b.n	800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800bf60:	4b13      	ldr	r3, [pc, #76]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d017      	beq.n	800bf9c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf6c:	4b10      	ldr	r3, [pc, #64]	@ (800bfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf70:	0e1b      	lsrs	r3, r3, #24
 800bf72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800bf7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf82:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf86:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf92:	ee17 2a90 	vmov	r2, s15
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bf9a:	e002      	b.n	800bfa2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	609a      	str	r2, [r3, #8]
}
 800bfa2:	bf00      	nop
 800bfa4:	3724      	adds	r7, #36	@ 0x24
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	46020c00 	.word	0x46020c00
 800bfb4:	4b742400 	.word	0x4b742400
 800bfb8:	46000000 	.word	0x46000000
 800bfbc:	08011bac 	.word	0x08011bac

0800bfc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b089      	sub	sp, #36	@ 0x24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800bfc8:	4ba6      	ldr	r3, [pc, #664]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfd0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800bfd2:	4ba4      	ldr	r3, [pc, #656]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd6:	f003 0303 	and.w	r3, r3, #3
 800bfda:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800bfdc:	4ba1      	ldr	r3, [pc, #644]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe0:	0a1b      	lsrs	r3, r3, #8
 800bfe2:	f003 030f 	and.w	r3, r3, #15
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800bfea:	4b9e      	ldr	r3, [pc, #632]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfee:	091b      	lsrs	r3, r3, #4
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800bff6:	4b9b      	ldr	r3, [pc, #620]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bffa:	08db      	lsrs	r3, r3, #3
 800bffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	fb02 f303 	mul.w	r3, r2, r3
 800c006:	ee07 3a90 	vmov	s15, r3
 800c00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	2b03      	cmp	r3, #3
 800c016:	d062      	beq.n	800c0de <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	f200 8081 	bhi.w	800c122 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d024      	beq.n	800c070 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d17a      	bne.n	800c122 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	ee07 3a90 	vmov	s15, r3
 800c032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c036:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c03e:	4b89      	ldr	r3, [pc, #548]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c046:	ee07 3a90 	vmov	s15, r3
 800c04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c04e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c052:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c26c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c056:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c05e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c062:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c06a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c06e:	e08f      	b.n	800c190 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c070:	4b7c      	ldr	r3, [pc, #496]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d005      	beq.n	800c088 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c07c:	4b79      	ldr	r3, [pc, #484]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	0f1b      	lsrs	r3, r3, #28
 800c082:	f003 030f 	and.w	r3, r3, #15
 800c086:	e006      	b.n	800c096 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c088:	4b76      	ldr	r3, [pc, #472]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c08a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c08e:	041b      	lsls	r3, r3, #16
 800c090:	0f1b      	lsrs	r3, r3, #28
 800c092:	f003 030f 	and.w	r3, r3, #15
 800c096:	4a76      	ldr	r2, [pc, #472]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c09c:	ee07 3a90 	vmov	s15, r3
 800c0a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	ee07 3a90 	vmov	s15, r3
 800c0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	ee07 3a90 	vmov	s15, r3
 800c0b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0bc:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0c0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c26c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c0c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0dc:	e058      	b.n	800c190 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	ee07 3a90 	vmov	s15, r3
 800c0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c0ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0f0:	4b5c      	ldr	r3, [pc, #368]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f8:	ee07 3a90 	vmov	s15, r3
 800c0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c100:	ed97 6a02 	vldr	s12, [r7, #8]
 800c104:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c26c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c108:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c10c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c114:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c11c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c120:	e036      	b.n	800c190 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c122:	4b50      	ldr	r3, [pc, #320]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d005      	beq.n	800c13a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c12e:	4b4d      	ldr	r3, [pc, #308]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	0f1b      	lsrs	r3, r3, #28
 800c134:	f003 030f 	and.w	r3, r3, #15
 800c138:	e006      	b.n	800c148 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c13a:	4b4a      	ldr	r3, [pc, #296]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c13c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c140:	041b      	lsls	r3, r3, #16
 800c142:	0f1b      	lsrs	r3, r3, #28
 800c144:	f003 030f 	and.w	r3, r3, #15
 800c148:	4a49      	ldr	r2, [pc, #292]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c14e:	ee07 3a90 	vmov	s15, r3
 800c152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	ee07 3a90 	vmov	s15, r3
 800c15c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	ee07 3a90 	vmov	s15, r3
 800c16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c16e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c172:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c26c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c17e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c182:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c18a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c18e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c190:	4b34      	ldr	r3, [pc, #208]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d017      	beq.n	800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c19c:	4b31      	ldr	r3, [pc, #196]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c19e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a0:	0a5b      	lsrs	r3, r3, #9
 800c1a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1a6:	ee07 3a90 	vmov	s15, r3
 800c1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c1ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1c2:	ee17 2a90 	vmov	r2, s15
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	e002      	b.n	800c1d2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c1d2:	4b24      	ldr	r3, [pc, #144]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d017      	beq.n	800c20e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1de:	4b21      	ldr	r3, [pc, #132]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1e2:	0c1b      	lsrs	r3, r3, #16
 800c1e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1e8:	ee07 3a90 	vmov	s15, r3
 800c1ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c1f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1f4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c204:	ee17 2a90 	vmov	r2, s15
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	605a      	str	r2, [r3, #4]
 800c20c:	e002      	b.n	800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c214:	4b13      	ldr	r3, [pc, #76]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c218:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d017      	beq.n	800c250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c220:	4b10      	ldr	r3, [pc, #64]	@ (800c264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c224:	0e1b      	lsrs	r3, r3, #24
 800c226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c22a:	ee07 3a90 	vmov	s15, r3
 800c22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c236:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c23a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c23e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c246:	ee17 2a90 	vmov	r2, s15
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c24e:	e002      	b.n	800c256 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	609a      	str	r2, [r3, #8]
}
 800c256:	bf00      	nop
 800c258:	3724      	adds	r7, #36	@ 0x24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	46020c00 	.word	0x46020c00
 800c268:	4b742400 	.word	0x4b742400
 800c26c:	46000000 	.word	0x46000000
 800c270:	08011bac 	.word	0x08011bac

0800c274 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c274:	b480      	push	{r7}
 800c276:	b089      	sub	sp, #36	@ 0x24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c27c:	4ba6      	ldr	r3, [pc, #664]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c27e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c284:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c286:	4ba4      	ldr	r3, [pc, #656]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c28a:	f003 0303 	and.w	r3, r3, #3
 800c28e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c290:	4ba1      	ldr	r3, [pc, #644]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c294:	0a1b      	lsrs	r3, r3, #8
 800c296:	f003 030f 	and.w	r3, r3, #15
 800c29a:	3301      	adds	r3, #1
 800c29c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c29e:	4b9e      	ldr	r3, [pc, #632]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a2:	091b      	lsrs	r3, r3, #4
 800c2a4:	f003 0301 	and.w	r3, r3, #1
 800c2a8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c2aa:	4b9b      	ldr	r3, [pc, #620]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2ae:	08db      	lsrs	r3, r3, #3
 800c2b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	fb02 f303 	mul.w	r3, r2, r3
 800c2ba:	ee07 3a90 	vmov	s15, r3
 800c2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2b03      	cmp	r3, #3
 800c2ca:	d062      	beq.n	800c392 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	f200 8081 	bhi.w	800c3d6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d024      	beq.n	800c324 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d17a      	bne.n	800c3d6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	ee07 3a90 	vmov	s15, r3
 800c2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ea:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2f2:	4b89      	ldr	r3, [pc, #548]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2fa:	ee07 3a90 	vmov	s15, r3
 800c2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c302:	ed97 6a02 	vldr	s12, [r7, #8]
 800c306:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c520 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c316:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c31e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c322:	e08f      	b.n	800c444 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c324:	4b7c      	ldr	r3, [pc, #496]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d005      	beq.n	800c33c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c330:	4b79      	ldr	r3, [pc, #484]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	0f1b      	lsrs	r3, r3, #28
 800c336:	f003 030f 	and.w	r3, r3, #15
 800c33a:	e006      	b.n	800c34a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c33c:	4b76      	ldr	r3, [pc, #472]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c33e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c342:	041b      	lsls	r3, r3, #16
 800c344:	0f1b      	lsrs	r3, r3, #28
 800c346:	f003 030f 	and.w	r3, r3, #15
 800c34a:	4a76      	ldr	r2, [pc, #472]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c350:	ee07 3a90 	vmov	s15, r3
 800c354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	ee07 3a90 	vmov	s15, r3
 800c35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	ee07 3a90 	vmov	s15, r3
 800c36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c370:	ed97 6a02 	vldr	s12, [r7, #8]
 800c374:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c520 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c37c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c380:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c384:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c38c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c390:	e058      	b.n	800c444 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	ee07 3a90 	vmov	s15, r3
 800c398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c51c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c3a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3a4:	4b5c      	ldr	r3, [pc, #368]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ac:	ee07 3a90 	vmov	s15, r3
 800c3b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3b4:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3b8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c520 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c3bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c3c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c3cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3d4:	e036      	b.n	800c444 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c3d6:	4b50      	ldr	r3, [pc, #320]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d005      	beq.n	800c3ee <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c3e2:	4b4d      	ldr	r3, [pc, #308]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	0f1b      	lsrs	r3, r3, #28
 800c3e8:	f003 030f 	and.w	r3, r3, #15
 800c3ec:	e006      	b.n	800c3fc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c3ee:	4b4a      	ldr	r3, [pc, #296]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c3f4:	041b      	lsls	r3, r3, #16
 800c3f6:	0f1b      	lsrs	r3, r3, #28
 800c3f8:	f003 030f 	and.w	r3, r3, #15
 800c3fc:	4a49      	ldr	r2, [pc, #292]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c402:	ee07 3a90 	vmov	s15, r3
 800c406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	ee07 3a90 	vmov	s15, r3
 800c410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	ee07 3a90 	vmov	s15, r3
 800c41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c422:	ed97 6a02 	vldr	s12, [r7, #8]
 800c426:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c520 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c436:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c43e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c442:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c444:	4b34      	ldr	r3, [pc, #208]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d017      	beq.n	800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c450:	4b31      	ldr	r3, [pc, #196]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c454:	0a5b      	lsrs	r3, r3, #9
 800c456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c45a:	ee07 3a90 	vmov	s15, r3
 800c45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c466:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c46a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c46e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c476:	ee17 2a90 	vmov	r2, s15
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	601a      	str	r2, [r3, #0]
 800c47e:	e002      	b.n	800c486 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c486:	4b24      	ldr	r3, [pc, #144]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c48a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d017      	beq.n	800c4c2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c492:	4b21      	ldr	r3, [pc, #132]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c496:	0c1b      	lsrs	r3, r3, #16
 800c498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c49c:	ee07 3a90 	vmov	s15, r3
 800c4a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c4a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4a8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4b8:	ee17 2a90 	vmov	r2, s15
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	605a      	str	r2, [r3, #4]
 800c4c0:	e002      	b.n	800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c4c8:	4b13      	ldr	r3, [pc, #76]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d017      	beq.n	800c504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4d4:	4b10      	ldr	r3, [pc, #64]	@ (800c518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4d8:	0e1b      	lsrs	r3, r3, #24
 800c4da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4de:	ee07 3a90 	vmov	s15, r3
 800c4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c4e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4fa:	ee17 2a90 	vmov	r2, s15
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c502:	e002      	b.n	800c50a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	609a      	str	r2, [r3, #8]
}
 800c50a:	bf00      	nop
 800c50c:	3724      	adds	r7, #36	@ 0x24
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	46020c00 	.word	0x46020c00
 800c51c:	4b742400 	.word	0x4b742400
 800c520:	46000000 	.word	0x46000000
 800c524:	08011bac 	.word	0x08011bac

0800c528 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b08e      	sub	sp, #56	@ 0x38
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c532:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c536:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c53a:	430b      	orrs	r3, r1
 800c53c:	d145      	bne.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c53e:	4ba7      	ldr	r3, [pc, #668]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c548:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c54a:	4ba4      	ldr	r3, [pc, #656]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c54c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c550:	f003 0302 	and.w	r3, r3, #2
 800c554:	2b02      	cmp	r3, #2
 800c556:	d108      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c55e:	d104      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c560:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c564:	637b      	str	r3, [r7, #52]	@ 0x34
 800c566:	f001 bb5a 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c56a:	4b9c      	ldr	r3, [pc, #624]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c56c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c578:	d114      	bne.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c580:	d110      	bne.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c582:	4b96      	ldr	r3, [pc, #600]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c58c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c590:	d103      	bne.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c592:	23fa      	movs	r3, #250	@ 0xfa
 800c594:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c596:	f001 bb42 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c59a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c59e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5a0:	f001 bb3d 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c5a4:	4b8d      	ldr	r3, [pc, #564]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5b0:	d107      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5b8:	d103      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c5ba:	4b89      	ldr	r3, [pc, #548]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c5bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5be:	f001 bb2e 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5c6:	f001 bb2a 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c5ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ce:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c5d2:	430b      	orrs	r3, r1
 800c5d4:	d151      	bne.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c5d6:	4b81      	ldr	r3, [pc, #516]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c5dc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c5e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e4:	2b80      	cmp	r3, #128	@ 0x80
 800c5e6:	d035      	beq.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ea:	2b80      	cmp	r3, #128	@ 0x80
 800c5ec:	d841      	bhi.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f0:	2b60      	cmp	r3, #96	@ 0x60
 800c5f2:	d02a      	beq.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f6:	2b60      	cmp	r3, #96	@ 0x60
 800c5f8:	d83b      	bhi.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fc:	2b40      	cmp	r3, #64	@ 0x40
 800c5fe:	d009      	beq.n	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c602:	2b40      	cmp	r3, #64	@ 0x40
 800c604:	d835      	bhi.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00c      	beq.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60e:	2b20      	cmp	r3, #32
 800c610:	d012      	beq.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c612:	e02e      	b.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fb77 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c620:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c622:	f001 bafc 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c626:	f107 0318 	add.w	r3, r7, #24
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7ff fcc8 	bl	800bfc0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c634:	f001 baf3 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c638:	f107 030c 	add.w	r3, r7, #12
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7ff fe19 	bl	800c274 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c646:	f001 baea 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c64a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c64e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c650:	f001 bae5 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c654:	4b61      	ldr	r3, [pc, #388]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c65c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c660:	d103      	bne.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c662:	4b60      	ldr	r3, [pc, #384]	@ (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c664:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c666:	f001 bada 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c66a:	2300      	movs	r3, #0
 800c66c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c66e:	f001 bad6 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c672:	2300      	movs	r3, #0
 800c674:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c676:	f001 bad2 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c67a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c67e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c682:	430b      	orrs	r3, r1
 800c684:	d158      	bne.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c686:	4b55      	ldr	r3, [pc, #340]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c688:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c68c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c690:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c698:	d03b      	beq.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6a0:	d846      	bhi.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6a8:	d02e      	beq.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6b0:	d83e      	bhi.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6b8:	d00b      	beq.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6c0:	d836      	bhi.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00d      	beq.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6ce:	d012      	beq.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c6d0:	e02e      	b.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7ff fb18 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6e0:	f001 ba9d 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6e4:	f107 0318 	add.w	r3, r7, #24
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7ff fc69 	bl	800bfc0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6f2:	f001 ba94 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6f6:	f107 030c 	add.w	r3, r7, #12
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7ff fdba 	bl	800c274 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c704:	f001 ba8b 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c708:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c70c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c70e:	f001 ba86 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c712:	4b32      	ldr	r3, [pc, #200]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c71a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c71e:	d103      	bne.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c720:	4b30      	ldr	r3, [pc, #192]	@ (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c722:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c724:	f001 ba7b 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c728:	2300      	movs	r3, #0
 800c72a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c72c:	f001 ba77 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c730:	2300      	movs	r3, #0
 800c732:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c734:	f001 ba73 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c73c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c740:	430b      	orrs	r3, r1
 800c742:	d126      	bne.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c744:	4b25      	ldr	r3, [pc, #148]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c746:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c74a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c74e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c750:	4b22      	ldr	r3, [pc, #136]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c75c:	d106      	bne.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c760:	2b00      	cmp	r3, #0
 800c762:	d103      	bne.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c764:	4b1f      	ldr	r3, [pc, #124]	@ (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c766:	637b      	str	r3, [r7, #52]	@ 0x34
 800c768:	f001 ba59 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c76c:	4b1b      	ldr	r3, [pc, #108]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c778:	d107      	bne.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c77c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c780:	d103      	bne.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c782:	4b19      	ldr	r3, [pc, #100]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c784:	637b      	str	r3, [r7, #52]	@ 0x34
 800c786:	f001 ba4a 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c78a:	2300      	movs	r3, #0
 800c78c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c78e:	f001 ba46 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c792:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c796:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c79a:	430b      	orrs	r3, r1
 800c79c:	d16e      	bne.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c79e:	4b0f      	ldr	r3, [pc, #60]	@ (800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c7a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7a4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c7a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c7b0:	d03d      	beq.n	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c7b8:	d85c      	bhi.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7c0:	d014      	beq.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7c8:	d854      	bhi.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d01f      	beq.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c7d6:	d012      	beq.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c7d8:	e04c      	b.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c7da:	bf00      	nop
 800c7dc:	46020c00 	.word	0x46020c00
 800c7e0:	0007a120 	.word	0x0007a120
 800c7e4:	00f42400 	.word	0x00f42400
 800c7e8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7ff fa8b 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7fa:	f001 ba10 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7fe:	f107 0318 	add.w	r3, r7, #24
 800c802:	4618      	mov	r0, r3
 800c804:	f7ff fbdc 	bl	800bfc0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c80c:	f001 ba07 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c810:	4ba7      	ldr	r3, [pc, #668]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c81c:	d103      	bne.n	800c826 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c81e:	4ba5      	ldr	r3, [pc, #660]	@ (800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c820:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c822:	f001 b9fc 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c826:	2300      	movs	r3, #0
 800c828:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c82a:	f001 b9f8 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c82e:	4ba0      	ldr	r3, [pc, #640]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 0320 	and.w	r3, r3, #32
 800c836:	2b20      	cmp	r3, #32
 800c838:	d118      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c83a:	4b9d      	ldr	r3, [pc, #628]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c842:	2b00      	cmp	r3, #0
 800c844:	d005      	beq.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c846:	4b9a      	ldr	r3, [pc, #616]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	0e1b      	lsrs	r3, r3, #24
 800c84c:	f003 030f 	and.w	r3, r3, #15
 800c850:	e006      	b.n	800c860 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c852:	4b97      	ldr	r3, [pc, #604]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c858:	041b      	lsls	r3, r3, #16
 800c85a:	0e1b      	lsrs	r3, r3, #24
 800c85c:	f003 030f 	and.w	r3, r3, #15
 800c860:	4a95      	ldr	r2, [pc, #596]	@ (800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c866:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c868:	f001 b9d9 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c86c:	2300      	movs	r3, #0
 800c86e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c870:	f001 b9d5 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c874:	2300      	movs	r3, #0
 800c876:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c878:	f001 b9d1 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c87c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c880:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c884:	430b      	orrs	r3, r1
 800c886:	d17f      	bne.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c888:	4b89      	ldr	r3, [pc, #548]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c88a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c88e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c892:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c896:	2b00      	cmp	r3, #0
 800c898:	d165      	bne.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c89a:	4b85      	ldr	r3, [pc, #532]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c89c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c8a0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c8a4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8ac:	d034      	beq.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8b4:	d853      	bhi.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8bc:	d00b      	beq.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8c4:	d84b      	bhi.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d016      	beq.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c8d2:	d009      	beq.n	800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c8d4:	e043      	b.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff fa16 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c8e4:	f001 b99b 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8e8:	f107 0318 	add.w	r3, r7, #24
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7ff fb67 	bl	800bfc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c8f6:	f001 b992 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c8fa:	4b6d      	ldr	r3, [pc, #436]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c906:	d103      	bne.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c908:	4b6a      	ldr	r3, [pc, #424]	@ (800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c90a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c90c:	f001 b987 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c910:	2300      	movs	r3, #0
 800c912:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c914:	f001 b983 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c918:	4b65      	ldr	r3, [pc, #404]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f003 0320 	and.w	r3, r3, #32
 800c920:	2b20      	cmp	r3, #32
 800c922:	d118      	bne.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c924:	4b62      	ldr	r3, [pc, #392]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d005      	beq.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c930:	4b5f      	ldr	r3, [pc, #380]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	0e1b      	lsrs	r3, r3, #24
 800c936:	f003 030f 	and.w	r3, r3, #15
 800c93a:	e006      	b.n	800c94a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c93c:	4b5c      	ldr	r3, [pc, #368]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c93e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c942:	041b      	lsls	r3, r3, #16
 800c944:	0e1b      	lsrs	r3, r3, #24
 800c946:	f003 030f 	and.w	r3, r3, #15
 800c94a:	4a5b      	ldr	r2, [pc, #364]	@ (800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c950:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c952:	f001 b964 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c956:	2300      	movs	r3, #0
 800c958:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c95a:	f001 b960 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c95e:	2300      	movs	r3, #0
 800c960:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c962:	f001 b95c 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c968:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c96c:	d108      	bne.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c96e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff f9ca 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c97c:	f001 b94f 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c980:	2300      	movs	r3, #0
 800c982:	637b      	str	r3, [r7, #52]	@ 0x34
 800c984:	f001 b94b 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c98c:	1e51      	subs	r1, r2, #1
 800c98e:	430b      	orrs	r3, r1
 800c990:	d136      	bne.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c992:	4b47      	ldr	r3, [pc, #284]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c998:	f003 0303 	and.w	r3, r3, #3
 800c99c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d104      	bne.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c9a4:	f7fe f9cc 	bl	800ad40 <HAL_RCC_GetPCLK2Freq>
 800c9a8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9aa:	f001 b938 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d104      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c9b4:	f7fe f894 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800c9b8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9ba:	f001 b930 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c9be:	4b3c      	ldr	r3, [pc, #240]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9ca:	d106      	bne.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d103      	bne.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c9d2:	4b3a      	ldr	r3, [pc, #232]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c9d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9d6:	f001 b922 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c9da:	4b35      	ldr	r3, [pc, #212]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c9e0:	f003 0302 	and.w	r3, r3, #2
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d107      	bne.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ea:	2b03      	cmp	r3, #3
 800c9ec:	d104      	bne.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c9ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9f4:	f001 b913 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9fc:	f001 b90f 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800ca00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca04:	1e91      	subs	r1, r2, #2
 800ca06:	430b      	orrs	r3, r1
 800ca08:	d136      	bne.n	800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ca0a:	4b29      	ldr	r3, [pc, #164]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca10:	f003 030c 	and.w	r3, r3, #12
 800ca14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ca16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d104      	bne.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca1c:	f7fe f97c 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800ca20:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca22:	f001 b8fc 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ca26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca28:	2b04      	cmp	r3, #4
 800ca2a:	d104      	bne.n	800ca36 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca2c:	f7fe f858 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800ca30:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca32:	f001 b8f4 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ca36:	4b1e      	ldr	r3, [pc, #120]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca42:	d106      	bne.n	800ca52 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ca44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca46:	2b08      	cmp	r3, #8
 800ca48:	d103      	bne.n	800ca52 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ca4a:	4b1c      	ldr	r3, [pc, #112]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ca4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca4e:	f001 b8e6 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ca52:	4b17      	ldr	r3, [pc, #92]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca58:	f003 0302 	and.w	r3, r3, #2
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d107      	bne.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ca60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca62:	2b0c      	cmp	r3, #12
 800ca64:	d104      	bne.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ca66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca6c:	f001 b8d7 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ca70:	2300      	movs	r3, #0
 800ca72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca74:	f001 b8d3 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800ca78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca7c:	1f11      	subs	r1, r2, #4
 800ca7e:	430b      	orrs	r3, r1
 800ca80:	d13f      	bne.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ca82:	4b0b      	ldr	r3, [pc, #44]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ca8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d104      	bne.n	800ca9e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca94:	f7fe f940 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800ca98:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca9a:	f001 b8c0 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa0:	2b10      	cmp	r3, #16
 800caa2:	d10d      	bne.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800caa4:	f7fe f81c 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800caa8:	6378      	str	r0, [r7, #52]	@ 0x34
 800caaa:	f001 b8b8 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800caae:	bf00      	nop
 800cab0:	46020c00 	.word	0x46020c00
 800cab4:	02dc6c00 	.word	0x02dc6c00
 800cab8:	08011bac 	.word	0x08011bac
 800cabc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800cac0:	4ba8      	ldr	r3, [pc, #672]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cacc:	d106      	bne.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800cace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad0:	2b20      	cmp	r3, #32
 800cad2:	d103      	bne.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800cad4:	4ba4      	ldr	r3, [pc, #656]	@ (800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cad6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cad8:	f001 b8a1 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800cadc:	4ba1      	ldr	r3, [pc, #644]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cae2:	f003 0302 	and.w	r3, r3, #2
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d107      	bne.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800caea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caec:	2b30      	cmp	r3, #48	@ 0x30
 800caee:	d104      	bne.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800caf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800caf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800caf6:	f001 b892 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800cafa:	2300      	movs	r3, #0
 800cafc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cafe:	f001 b88e 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800cb02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb06:	f1a2 0108 	sub.w	r1, r2, #8
 800cb0a:	430b      	orrs	r3, r1
 800cb0c:	d136      	bne.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800cb0e:	4b95      	ldr	r3, [pc, #596]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb14:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cb18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800cb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d104      	bne.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb20:	f7fe f8fa 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800cb24:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb26:	f001 b87a 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2c:	2b40      	cmp	r3, #64	@ 0x40
 800cb2e:	d104      	bne.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb30:	f7fd ffd6 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800cb34:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb36:	f001 b872 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800cb3a:	4b8a      	ldr	r3, [pc, #552]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb46:	d106      	bne.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800cb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4a:	2b80      	cmp	r3, #128	@ 0x80
 800cb4c:	d103      	bne.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800cb4e:	4b86      	ldr	r3, [pc, #536]	@ (800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cb50:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb52:	f001 b864 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cb56:	4b83      	ldr	r3, [pc, #524]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb5c:	f003 0302 	and.w	r3, r3, #2
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d107      	bne.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb66:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb68:	d104      	bne.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800cb6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb70:	f001 b855 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cb74:	2300      	movs	r3, #0
 800cb76:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb78:	f001 b851 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cb7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb80:	f1a2 0110 	sub.w	r1, r2, #16
 800cb84:	430b      	orrs	r3, r1
 800cb86:	d139      	bne.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800cb88:	4b76      	ldr	r3, [pc, #472]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb92:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d104      	bne.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb9a:	f7fe f8bd 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800cb9e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cba0:	f001 b83d 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbaa:	d104      	bne.n	800cbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cbac:	f7fd ff98 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800cbb0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbb2:	f001 b834 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800cbb6:	4b6b      	ldr	r3, [pc, #428]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbc2:	d107      	bne.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbca:	d103      	bne.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800cbcc:	4b66      	ldr	r3, [pc, #408]	@ (800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cbce:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbd0:	f001 b825 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800cbd4:	4b63      	ldr	r3, [pc, #396]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cbda:	f003 0302 	and.w	r3, r3, #2
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d108      	bne.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cbe8:	d104      	bne.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800cbea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbee:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbf0:	f001 b815 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbf8:	f001 b811 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800cbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc00:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cc04:	430b      	orrs	r3, r1
 800cc06:	d139      	bne.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800cc08:	4b56      	ldr	r3, [pc, #344]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cc0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cc12:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d104      	bne.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc1a:	f7fe f87d 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800cc1e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc20:	f000 bffd 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc2a:	d104      	bne.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc2c:	f7fd ff58 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800cc30:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc32:	f000 bff4 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800cc36:	4b4b      	ldr	r3, [pc, #300]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc42:	d107      	bne.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc4a:	d103      	bne.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800cc4c:	4b46      	ldr	r3, [pc, #280]	@ (800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc50:	f000 bfe5 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800cc54:	4b43      	ldr	r3, [pc, #268]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc5a:	f003 0302 	and.w	r3, r3, #2
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d108      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800cc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cc68:	d104      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800cc6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc70:	f000 bfd5 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cc74:	2300      	movs	r3, #0
 800cc76:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc78:	f000 bfd1 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800cc7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc80:	f1a2 0120 	sub.w	r1, r2, #32
 800cc84:	430b      	orrs	r3, r1
 800cc86:	d158      	bne.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800cc88:	4b36      	ldr	r3, [pc, #216]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cc8e:	f003 0307 	and.w	r3, r3, #7
 800cc92:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800cc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d104      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800cc9a:	f7fe f865 	bl	800ad68 <HAL_RCC_GetPCLK3Freq>
 800cc9e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cca0:	f000 bfbd 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800cca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d104      	bne.n	800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccaa:	f7fd ff19 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800ccae:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccb0:	f000 bfb5 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ccb4:	4b2b      	ldr	r3, [pc, #172]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccc0:	d106      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d103      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800ccc8:	4b27      	ldr	r3, [pc, #156]	@ (800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ccca:	637b      	str	r3, [r7, #52]	@ 0x34
 800cccc:	f000 bfa7 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ccd0:	4b24      	ldr	r3, [pc, #144]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ccd6:	f003 0302 	and.w	r3, r3, #2
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d107      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800ccde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce0:	2b03      	cmp	r3, #3
 800cce2:	d104      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800cce4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cce8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccea:	f000 bf98 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ccee:	4b1d      	ldr	r3, [pc, #116]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 0320 	and.w	r3, r3, #32
 800ccf6:	2b20      	cmp	r3, #32
 800ccf8:	d11b      	bne.n	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfc:	2b04      	cmp	r3, #4
 800ccfe:	d118      	bne.n	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd00:	4b18      	ldr	r3, [pc, #96]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d005      	beq.n	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800cd0c:	4b15      	ldr	r3, [pc, #84]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	0e1b      	lsrs	r3, r3, #24
 800cd12:	f003 030f 	and.w	r3, r3, #15
 800cd16:	e006      	b.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800cd18:	4b12      	ldr	r3, [pc, #72]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd1e:	041b      	lsls	r3, r3, #16
 800cd20:	0e1b      	lsrs	r3, r3, #24
 800cd22:	f003 030f 	and.w	r3, r3, #15
 800cd26:	4a11      	ldr	r2, [pc, #68]	@ (800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800cd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd2e:	f000 bf76 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800cd32:	2300      	movs	r3, #0
 800cd34:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd36:	f000 bf72 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800cd3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd3e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800cd42:	430b      	orrs	r3, r1
 800cd44:	d172      	bne.n	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800cd46:	4b07      	ldr	r3, [pc, #28]	@ (800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cd4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cd50:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800cd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd58:	d10a      	bne.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd5a:	f7fd fec1 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800cd5e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd60:	f000 bf5d 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cd64:	46020c00 	.word	0x46020c00
 800cd68:	00f42400 	.word	0x00f42400
 800cd6c:	08011bac 	.word	0x08011bac
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800cd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd76:	d108      	bne.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd78:	f107 0318 	add.w	r3, r7, #24
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7ff f91f 	bl	800bfc0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd86:	f000 bf4a 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d104      	bne.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800cd90:	f7fd ffa8 	bl	800ace4 <HAL_RCC_GetHCLKFreq>
 800cd94:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd96:	f000 bf42 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cda0:	d122      	bne.n	800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cda2:	4bb0      	ldr	r3, [pc, #704]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f003 0320 	and.w	r3, r3, #32
 800cdaa:	2b20      	cmp	r3, #32
 800cdac:	d118      	bne.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cdae:	4bad      	ldr	r3, [pc, #692]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d005      	beq.n	800cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800cdba:	4baa      	ldr	r3, [pc, #680]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	0e1b      	lsrs	r3, r3, #24
 800cdc0:	f003 030f 	and.w	r3, r3, #15
 800cdc4:	e006      	b.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800cdc6:	4ba7      	ldr	r3, [pc, #668]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cdcc:	041b      	lsls	r3, r3, #16
 800cdce:	0e1b      	lsrs	r3, r3, #24
 800cdd0:	f003 030f 	and.w	r3, r3, #15
 800cdd4:	4aa4      	ldr	r2, [pc, #656]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cdd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdda:	637b      	str	r3, [r7, #52]	@ 0x34
 800cddc:	f000 bf1f 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cde0:	2300      	movs	r3, #0
 800cde2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cde4:	f000 bf1b 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800cde8:	4b9e      	ldr	r3, [pc, #632]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdf4:	d107      	bne.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cdfc:	d103      	bne.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800cdfe:	4b9b      	ldr	r3, [pc, #620]	@ (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ce00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce02:	f000 bf0c 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ce06:	4b97      	ldr	r3, [pc, #604]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce12:	d107      	bne.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ce14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce1a:	d103      	bne.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ce1c:	4b93      	ldr	r3, [pc, #588]	@ (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ce1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce20:	f000 befd 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ce24:	2300      	movs	r3, #0
 800ce26:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce28:	f000 bef9 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ce2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce30:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ce34:	430b      	orrs	r3, r1
 800ce36:	d158      	bne.n	800ceea <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ce38:	4b8a      	ldr	r3, [pc, #552]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ce3e:	f003 0307 	and.w	r3, r3, #7
 800ce42:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ce44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce46:	2b04      	cmp	r3, #4
 800ce48:	d84b      	bhi.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800ce4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800ce4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce50:	0800ce89 	.word	0x0800ce89
 800ce54:	0800ce65 	.word	0x0800ce65
 800ce58:	0800ce77 	.word	0x0800ce77
 800ce5c:	0800ce93 	.word	0x0800ce93
 800ce60:	0800ce9d 	.word	0x0800ce9d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fe ff4f 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce72:	f000 bed4 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce76:	f107 030c 	add.w	r3, r7, #12
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff f9fa 	bl	800c274 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce84:	f000 becb 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ce88:	f7fd ff2c 	bl	800ace4 <HAL_RCC_GetHCLKFreq>
 800ce8c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ce8e:	f000 bec6 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ce92:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ce96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce98:	f000 bec1 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ce9c:	4b71      	ldr	r3, [pc, #452]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f003 0320 	and.w	r3, r3, #32
 800cea4:	2b20      	cmp	r3, #32
 800cea6:	d118      	bne.n	800ceda <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cea8:	4b6e      	ldr	r3, [pc, #440]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d005      	beq.n	800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800ceb4:	4b6b      	ldr	r3, [pc, #428]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	0e1b      	lsrs	r3, r3, #24
 800ceba:	f003 030f 	and.w	r3, r3, #15
 800cebe:	e006      	b.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800cec0:	4b68      	ldr	r3, [pc, #416]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cec6:	041b      	lsls	r3, r3, #16
 800cec8:	0e1b      	lsrs	r3, r3, #24
 800ceca:	f003 030f 	and.w	r3, r3, #15
 800cece:	4a66      	ldr	r2, [pc, #408]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ced0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ced4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ced6:	f000 bea2 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ceda:	2300      	movs	r3, #0
 800cedc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cede:	f000 be9e 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cee6:	f000 be9a 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ceea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceee:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800cef2:	430b      	orrs	r3, r1
 800cef4:	d167      	bne.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800cef6:	4b5b      	ldr	r3, [pc, #364]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cefc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cf00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cf02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf08:	d036      	beq.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800cf0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf10:	d855      	bhi.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cf18:	d029      	beq.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cf20:	d84d      	bhi.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf28:	d013      	beq.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf30:	d845      	bhi.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d015      	beq.n	800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800cf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf3e:	d13e      	bne.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7fe fee1 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf4e:	f000 be66 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf52:	f107 030c 	add.w	r3, r7, #12
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff f98c 	bl	800c274 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf60:	f000 be5d 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cf64:	f7fd febe 	bl	800ace4 <HAL_RCC_GetHCLKFreq>
 800cf68:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cf6a:	f000 be58 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cf6e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cf72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf74:	f000 be53 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cf78:	4b3a      	ldr	r3, [pc, #232]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 0320 	and.w	r3, r3, #32
 800cf80:	2b20      	cmp	r3, #32
 800cf82:	d118      	bne.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf84:	4b37      	ldr	r3, [pc, #220]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d005      	beq.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800cf90:	4b34      	ldr	r3, [pc, #208]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	0e1b      	lsrs	r3, r3, #24
 800cf96:	f003 030f 	and.w	r3, r3, #15
 800cf9a:	e006      	b.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cf9c:	4b31      	ldr	r3, [pc, #196]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfa2:	041b      	lsls	r3, r3, #16
 800cfa4:	0e1b      	lsrs	r3, r3, #24
 800cfa6:	f003 030f 	and.w	r3, r3, #15
 800cfaa:	4a2f      	ldr	r2, [pc, #188]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cfac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfb0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cfb2:	f000 be34 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfba:	f000 be30 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfc2:	f000 be2c 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800cfc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfca:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800cfce:	430b      	orrs	r3, r1
 800cfd0:	d152      	bne.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800cfd2:	4b24      	ldr	r3, [pc, #144]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cfd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cfdc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800cfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d104      	bne.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cfe4:	f7fd fe98 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800cfe8:	6378      	str	r0, [r7, #52]	@ 0x34
 800cfea:	f000 be18 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800cfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cff4:	d104      	bne.n	800d000 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cff6:	f7fd fd73 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800cffa:	6378      	str	r0, [r7, #52]	@ 0x34
 800cffc:	f000 be0f 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d000:	4b18      	ldr	r3, [pc, #96]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d00c:	d107      	bne.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800d00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d014:	d103      	bne.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800d016:	4b15      	ldr	r3, [pc, #84]	@ (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d018:	637b      	str	r3, [r7, #52]	@ 0x34
 800d01a:	f000 be00 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d01e:	4b11      	ldr	r3, [pc, #68]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f003 0320 	and.w	r3, r3, #32
 800d026:	2b20      	cmp	r3, #32
 800d028:	d122      	bne.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800d02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d030:	d11e      	bne.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d032:	4b0c      	ldr	r3, [pc, #48]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d005      	beq.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800d03e:	4b09      	ldr	r3, [pc, #36]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	0e1b      	lsrs	r3, r3, #24
 800d044:	f003 030f 	and.w	r3, r3, #15
 800d048:	e006      	b.n	800d058 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800d04a:	4b06      	ldr	r3, [pc, #24]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d04c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d050:	041b      	lsls	r3, r3, #16
 800d052:	0e1b      	lsrs	r3, r3, #24
 800d054:	f003 030f 	and.w	r3, r3, #15
 800d058:	4a03      	ldr	r2, [pc, #12]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d05e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d060:	f000 bddd 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d064:	46020c00 	.word	0x46020c00
 800d068:	08011bac 	.word	0x08011bac
 800d06c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d070:	2300      	movs	r3, #0
 800d072:	637b      	str	r3, [r7, #52]	@ 0x34
 800d074:	f000 bdd3 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d07c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d080:	430b      	orrs	r3, r1
 800d082:	d14c      	bne.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d084:	4ba8      	ldr	r3, [pc, #672]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d08a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d08e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d092:	2b00      	cmp	r3, #0
 800d094:	d104      	bne.n	800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d096:	f7fd fe3f 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800d09a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d09c:	f000 bdbf 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0a6:	d104      	bne.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d0a8:	f7fd fd1a 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800d0ac:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0ae:	f000 bdb6 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d0b2:	4b9d      	ldr	r3, [pc, #628]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0be:	d107      	bne.n	800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0c6:	d103      	bne.n	800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d0c8:	4b98      	ldr	r3, [pc, #608]	@ (800d32c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d0ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0cc:	f000 bda7 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d0d0:	4b95      	ldr	r3, [pc, #596]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f003 0320 	and.w	r3, r3, #32
 800d0d8:	2b20      	cmp	r3, #32
 800d0da:	d11c      	bne.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d0e2:	d118      	bne.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d0e4:	4b90      	ldr	r3, [pc, #576]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d005      	beq.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d0f0:	4b8d      	ldr	r3, [pc, #564]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	0e1b      	lsrs	r3, r3, #24
 800d0f6:	f003 030f 	and.w	r3, r3, #15
 800d0fa:	e006      	b.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d0fc:	4b8a      	ldr	r3, [pc, #552]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d102:	041b      	lsls	r3, r3, #16
 800d104:	0e1b      	lsrs	r3, r3, #24
 800d106:	f003 030f 	and.w	r3, r3, #15
 800d10a:	4a89      	ldr	r2, [pc, #548]	@ (800d330 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d110:	637b      	str	r3, [r7, #52]	@ 0x34
 800d112:	f000 bd84 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d116:	2300      	movs	r3, #0
 800d118:	637b      	str	r3, [r7, #52]	@ 0x34
 800d11a:	f000 bd80 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d11e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d122:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d126:	430b      	orrs	r3, r1
 800d128:	d158      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d12a:	4b7f      	ldr	r3, [pc, #508]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d12c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d130:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d134:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d138:	2bc0      	cmp	r3, #192	@ 0xc0
 800d13a:	d028      	beq.n	800d18e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d13e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d140:	d848      	bhi.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d144:	2b80      	cmp	r3, #128	@ 0x80
 800d146:	d00e      	beq.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14a:	2b80      	cmp	r3, #128	@ 0x80
 800d14c:	d842      	bhi.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d150:	2b00      	cmp	r3, #0
 800d152:	d003      	beq.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d156:	2b40      	cmp	r3, #64	@ 0x40
 800d158:	d014      	beq.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d15a:	e03b      	b.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d15c:	f7fd fe04 	bl	800ad68 <HAL_RCC_GetPCLK3Freq>
 800d160:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d162:	f000 bd5c 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d166:	4b70      	ldr	r3, [pc, #448]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d16e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d172:	d103      	bne.n	800d17c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d174:	4b6d      	ldr	r3, [pc, #436]	@ (800d32c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d176:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d178:	f000 bd51 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d17c:	2300      	movs	r3, #0
 800d17e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d180:	f000 bd4d 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d184:	f7fd fcac 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800d188:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d18a:	f000 bd48 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d18e:	4b66      	ldr	r3, [pc, #408]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f003 0320 	and.w	r3, r3, #32
 800d196:	2b20      	cmp	r3, #32
 800d198:	d118      	bne.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d19a:	4b63      	ldr	r3, [pc, #396]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d005      	beq.n	800d1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d1a6:	4b60      	ldr	r3, [pc, #384]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	0e1b      	lsrs	r3, r3, #24
 800d1ac:	f003 030f 	and.w	r3, r3, #15
 800d1b0:	e006      	b.n	800d1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d1b2:	4b5d      	ldr	r3, [pc, #372]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d1b8:	041b      	lsls	r3, r3, #16
 800d1ba:	0e1b      	lsrs	r3, r3, #24
 800d1bc:	f003 030f 	and.w	r3, r3, #15
 800d1c0:	4a5b      	ldr	r2, [pc, #364]	@ (800d330 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d1c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1c8:	f000 bd29 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1d0:	f000 bd25 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1d8:	f000 bd21 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d1dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1e0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d1e4:	430b      	orrs	r3, r1
 800d1e6:	d14c      	bne.n	800d282 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d1e8:	4b4f      	ldr	r3, [pc, #316]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d1ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d1f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d104      	bne.n	800d204 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d1fa:	f7fd fd8d 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800d1fe:	6378      	str	r0, [r7, #52]	@ 0x34
 800d200:	f000 bd0d 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d206:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d20a:	d104      	bne.n	800d216 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d20c:	f7fd fc68 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800d210:	6378      	str	r0, [r7, #52]	@ 0x34
 800d212:	f000 bd04 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d216:	4b44      	ldr	r3, [pc, #272]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d21e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d222:	d107      	bne.n	800d234 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d22a:	d103      	bne.n	800d234 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d22c:	4b3f      	ldr	r3, [pc, #252]	@ (800d32c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d22e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d230:	f000 bcf5 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d234:	4b3c      	ldr	r3, [pc, #240]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 0320 	and.w	r3, r3, #32
 800d23c:	2b20      	cmp	r3, #32
 800d23e:	d11c      	bne.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d242:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d246:	d118      	bne.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d248:	4b37      	ldr	r3, [pc, #220]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d250:	2b00      	cmp	r3, #0
 800d252:	d005      	beq.n	800d260 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d254:	4b34      	ldr	r3, [pc, #208]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	0e1b      	lsrs	r3, r3, #24
 800d25a:	f003 030f 	and.w	r3, r3, #15
 800d25e:	e006      	b.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d260:	4b31      	ldr	r3, [pc, #196]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d266:	041b      	lsls	r3, r3, #16
 800d268:	0e1b      	lsrs	r3, r3, #24
 800d26a:	f003 030f 	and.w	r3, r3, #15
 800d26e:	4a30      	ldr	r2, [pc, #192]	@ (800d330 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d274:	637b      	str	r3, [r7, #52]	@ 0x34
 800d276:	f000 bcd2 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d27a:	2300      	movs	r3, #0
 800d27c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d27e:	f000 bcce 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d282:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d286:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d28a:	430b      	orrs	r3, r1
 800d28c:	d152      	bne.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d28e:	4b26      	ldr	r3, [pc, #152]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d290:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d294:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d298:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d104      	bne.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d2a0:	f7fd fd3a 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800d2a4:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2a6:	f000 bcba 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2b0:	d104      	bne.n	800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d2b2:	f7fd fc15 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800d2b6:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2b8:	f000 bcb1 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d2bc:	4b1a      	ldr	r3, [pc, #104]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2c8:	d107      	bne.n	800d2da <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d2d0:	d103      	bne.n	800d2da <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d2d2:	4b16      	ldr	r3, [pc, #88]	@ (800d32c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d2d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2d6:	f000 bca2 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d2da:	4b13      	ldr	r3, [pc, #76]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f003 0320 	and.w	r3, r3, #32
 800d2e2:	2b20      	cmp	r3, #32
 800d2e4:	d11c      	bne.n	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d2ec:	d118      	bne.n	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d2ee:	4b0e      	ldr	r3, [pc, #56]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d005      	beq.n	800d306 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d2fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	0e1b      	lsrs	r3, r3, #24
 800d300:	f003 030f 	and.w	r3, r3, #15
 800d304:	e006      	b.n	800d314 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d306:	4b08      	ldr	r3, [pc, #32]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d30c:	041b      	lsls	r3, r3, #16
 800d30e:	0e1b      	lsrs	r3, r3, #24
 800d310:	f003 030f 	and.w	r3, r3, #15
 800d314:	4a06      	ldr	r2, [pc, #24]	@ (800d330 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d31a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d31c:	f000 bc7f 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d320:	2300      	movs	r3, #0
 800d322:	637b      	str	r3, [r7, #52]	@ 0x34
 800d324:	f000 bc7b 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d328:	46020c00 	.word	0x46020c00
 800d32c:	00f42400 	.word	0x00f42400
 800d330:	08011bac 	.word	0x08011bac
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d334:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d338:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d33c:	430b      	orrs	r3, r1
 800d33e:	d14c      	bne.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d340:	4ba6      	ldr	r3, [pc, #664]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d342:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d346:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d34a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d104      	bne.n	800d35c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d352:	f7fd fce1 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800d356:	6378      	str	r0, [r7, #52]	@ 0x34
 800d358:	f000 bc61 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d362:	d104      	bne.n	800d36e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d364:	f7fd fbbc 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800d368:	6378      	str	r0, [r7, #52]	@ 0x34
 800d36a:	f000 bc58 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d36e:	4b9b      	ldr	r3, [pc, #620]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d37a:	d107      	bne.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d382:	d103      	bne.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d384:	4b96      	ldr	r3, [pc, #600]	@ (800d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d386:	637b      	str	r3, [r7, #52]	@ 0x34
 800d388:	f000 bc49 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d38c:	4b93      	ldr	r3, [pc, #588]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f003 0320 	and.w	r3, r3, #32
 800d394:	2b20      	cmp	r3, #32
 800d396:	d11c      	bne.n	800d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d39e:	d118      	bne.n	800d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3a0:	4b8e      	ldr	r3, [pc, #568]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d005      	beq.n	800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d3ac:	4b8b      	ldr	r3, [pc, #556]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	0e1b      	lsrs	r3, r3, #24
 800d3b2:	f003 030f 	and.w	r3, r3, #15
 800d3b6:	e006      	b.n	800d3c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d3b8:	4b88      	ldr	r3, [pc, #544]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3be:	041b      	lsls	r3, r3, #16
 800d3c0:	0e1b      	lsrs	r3, r3, #24
 800d3c2:	f003 030f 	and.w	r3, r3, #15
 800d3c6:	4a87      	ldr	r2, [pc, #540]	@ (800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3ce:	f000 bc26 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3d6:	f000 bc22 	b.w	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d3da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3de:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d3e2:	430b      	orrs	r3, r1
 800d3e4:	d164      	bne.n	800d4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d3e6:	4b7d      	ldr	r3, [pc, #500]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d3ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d120      	bne.n	800d43a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d3f8:	4b78      	ldr	r3, [pc, #480]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f003 0320 	and.w	r3, r3, #32
 800d400:	2b20      	cmp	r3, #32
 800d402:	d117      	bne.n	800d434 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d404:	4b75      	ldr	r3, [pc, #468]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d005      	beq.n	800d41c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d410:	4b72      	ldr	r3, [pc, #456]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	0e1b      	lsrs	r3, r3, #24
 800d416:	f003 030f 	and.w	r3, r3, #15
 800d41a:	e006      	b.n	800d42a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d41c:	4b6f      	ldr	r3, [pc, #444]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d41e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d422:	041b      	lsls	r3, r3, #16
 800d424:	0e1b      	lsrs	r3, r3, #24
 800d426:	f003 030f 	and.w	r3, r3, #15
 800d42a:	4a6e      	ldr	r2, [pc, #440]	@ (800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d430:	637b      	str	r3, [r7, #52]	@ 0x34
 800d432:	e3f4      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d434:	2300      	movs	r3, #0
 800d436:	637b      	str	r3, [r7, #52]	@ 0x34
 800d438:	e3f1      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d43a:	4b68      	ldr	r3, [pc, #416]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d43c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d448:	d112      	bne.n	800d470 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d44c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d450:	d10e      	bne.n	800d470 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d452:	4b62      	ldr	r3, [pc, #392]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d45c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d460:	d102      	bne.n	800d468 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d462:	23fa      	movs	r3, #250	@ 0xfa
 800d464:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d466:	e3da      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d468:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d46c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d46e:	e3d6      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d470:	4b5a      	ldr	r3, [pc, #360]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d47c:	d106      	bne.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d484:	d102      	bne.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d486:	4b56      	ldr	r3, [pc, #344]	@ (800d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d488:	637b      	str	r3, [r7, #52]	@ 0x34
 800d48a:	e3c8      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d48c:	4b53      	ldr	r3, [pc, #332]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d48e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d492:	f003 0302 	and.w	r3, r3, #2
 800d496:	2b02      	cmp	r3, #2
 800d498:	d107      	bne.n	800d4aa <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4a0:	d103      	bne.n	800d4aa <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d4a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4a8:	e3b9      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4ae:	e3b6      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d4b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4b4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d4b8:	430b      	orrs	r3, r1
 800d4ba:	d164      	bne.n	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d4bc:	4b47      	ldr	r3, [pc, #284]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d4c2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d4c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d120      	bne.n	800d510 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d4ce:	4b43      	ldr	r3, [pc, #268]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f003 0320 	and.w	r3, r3, #32
 800d4d6:	2b20      	cmp	r3, #32
 800d4d8:	d117      	bne.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d4da:	4b40      	ldr	r3, [pc, #256]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d005      	beq.n	800d4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d4e6:	4b3d      	ldr	r3, [pc, #244]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	0e1b      	lsrs	r3, r3, #24
 800d4ec:	f003 030f 	and.w	r3, r3, #15
 800d4f0:	e006      	b.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d4f2:	4b3a      	ldr	r3, [pc, #232]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d4f8:	041b      	lsls	r3, r3, #16
 800d4fa:	0e1b      	lsrs	r3, r3, #24
 800d4fc:	f003 030f 	and.w	r3, r3, #15
 800d500:	4a38      	ldr	r2, [pc, #224]	@ (800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d506:	637b      	str	r3, [r7, #52]	@ 0x34
 800d508:	e389      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d50a:	2300      	movs	r3, #0
 800d50c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d50e:	e386      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d510:	4b32      	ldr	r3, [pc, #200]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d51a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d51e:	d112      	bne.n	800d546 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d526:	d10e      	bne.n	800d546 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d528:	4b2c      	ldr	r3, [pc, #176]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d52a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d52e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d536:	d102      	bne.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d538:	23fa      	movs	r3, #250	@ 0xfa
 800d53a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d53c:	e36f      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d53e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d542:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d544:	e36b      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d546:	4b25      	ldr	r3, [pc, #148]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d54e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d552:	d106      	bne.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d55a:	d102      	bne.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d55c:	4b20      	ldr	r3, [pc, #128]	@ (800d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d55e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d560:	e35d      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d562:	4b1e      	ldr	r3, [pc, #120]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d568:	f003 0302 	and.w	r3, r3, #2
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d107      	bne.n	800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d572:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d576:	d103      	bne.n	800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d57c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d57e:	e34e      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d580:	2300      	movs	r3, #0
 800d582:	637b      	str	r3, [r7, #52]	@ 0x34
 800d584:	e34b      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d58a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d58e:	430b      	orrs	r3, r1
 800d590:	d14e      	bne.n	800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d592:	4b12      	ldr	r3, [pc, #72]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d598:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d59c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d103      	bne.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d5a4:	f7fd fbb8 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800d5a8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d5aa:	e338      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d5ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d5b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5ba:	d119      	bne.n	800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d5c2:	d115      	bne.n	800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d5c4:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d5ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5d2:	d109      	bne.n	800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d5d4:	23fa      	movs	r3, #250	@ 0xfa
 800d5d6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d5d8:	e321      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d5da:	bf00      	nop
 800d5dc:	46020c00 	.word	0x46020c00
 800d5e0:	00f42400 	.word	0x00f42400
 800d5e4:	08011bac 	.word	0x08011bac
      }
      else
      {
        frequency = LSI_VALUE;
 800d5e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d5ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d5ee:	e316      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d5f0:	4ba8      	ldr	r3, [pc, #672]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5fc:	d106      	bne.n	800d60c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d600:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d604:	d102      	bne.n	800d60c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d606:	4ba4      	ldr	r3, [pc, #656]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d608:	637b      	str	r3, [r7, #52]	@ 0x34
 800d60a:	e308      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d60c:	4ba1      	ldr	r3, [pc, #644]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d60e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d612:	f003 0302 	and.w	r3, r3, #2
 800d616:	2b02      	cmp	r3, #2
 800d618:	d107      	bne.n	800d62a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d620:	d103      	bne.n	800d62a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d626:	637b      	str	r3, [r7, #52]	@ 0x34
 800d628:	e2f9      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d62a:	2300      	movs	r3, #0
 800d62c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d62e:	e2f6      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d630:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d634:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d638:	430b      	orrs	r3, r1
 800d63a:	d12d      	bne.n	800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d63c:	4b95      	ldr	r3, [pc, #596]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d63e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d642:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d646:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d648:	4b92      	ldr	r3, [pc, #584]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d650:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d654:	d105      	bne.n	800d662 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d102      	bne.n	800d662 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d65c:	4b8e      	ldr	r3, [pc, #568]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d65e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d660:	e2dd      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d668:	d107      	bne.n	800d67a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d66a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fe fb4c 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d676:	637b      	str	r3, [r7, #52]	@ 0x34
 800d678:	e2d1      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d680:	d107      	bne.n	800d692 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d682:	f107 0318 	add.w	r3, r7, #24
 800d686:	4618      	mov	r0, r3
 800d688:	f7fe fc9a 	bl	800bfc0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d690:	e2c5      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d692:	2300      	movs	r3, #0
 800d694:	637b      	str	r3, [r7, #52]	@ 0x34
 800d696:	e2c2      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d69c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d6a0:	430b      	orrs	r3, r1
 800d6a2:	d156      	bne.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d6a4:	4b7b      	ldr	r3, [pc, #492]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6aa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d6ae:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d6b6:	d028      	beq.n	800d70a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d6be:	d845      	bhi.n	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d6c6:	d013      	beq.n	800d6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d6ce:	d83d      	bhi.n	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d004      	beq.n	800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6dc:	d004      	beq.n	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d6de:	e035      	b.n	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d6e0:	f7fd fb2e 	bl	800ad40 <HAL_RCC_GetPCLK2Freq>
 800d6e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d6e6:	e29a      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d6e8:	f7fd f9fa 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800d6ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d6ee:	e296      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d6f0:	4b68      	ldr	r3, [pc, #416]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6fc:	d102      	bne.n	800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d6fe:	4b66      	ldr	r3, [pc, #408]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d700:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d702:	e28c      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d704:	2300      	movs	r3, #0
 800d706:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d708:	e289      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d70a:	4b62      	ldr	r3, [pc, #392]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f003 0320 	and.w	r3, r3, #32
 800d712:	2b20      	cmp	r3, #32
 800d714:	d117      	bne.n	800d746 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d716:	4b5f      	ldr	r3, [pc, #380]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d718:	689b      	ldr	r3, [r3, #8]
 800d71a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d005      	beq.n	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d722:	4b5c      	ldr	r3, [pc, #368]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	0e1b      	lsrs	r3, r3, #24
 800d728:	f003 030f 	and.w	r3, r3, #15
 800d72c:	e006      	b.n	800d73c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d72e:	4b59      	ldr	r3, [pc, #356]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d730:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d734:	041b      	lsls	r3, r3, #16
 800d736:	0e1b      	lsrs	r3, r3, #24
 800d738:	f003 030f 	and.w	r3, r3, #15
 800d73c:	4a57      	ldr	r2, [pc, #348]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d73e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d742:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d744:	e26b      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d746:	2300      	movs	r3, #0
 800d748:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d74a:	e268      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d74c:	2300      	movs	r3, #0
 800d74e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d750:	e265      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d752:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d756:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d75a:	430b      	orrs	r3, r1
 800d75c:	d156      	bne.n	800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d75e:	4b4d      	ldr	r3, [pc, #308]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d764:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d768:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d770:	d028      	beq.n	800d7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d774:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d778:	d845      	bhi.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d780:	d013      	beq.n	800d7aa <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d788:	d83d      	bhi.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d004      	beq.n	800d79a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d796:	d004      	beq.n	800d7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d798:	e035      	b.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d79a:	f7fd fabd 	bl	800ad18 <HAL_RCC_GetPCLK1Freq>
 800d79e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7a0:	e23d      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d7a2:	f7fd f99d 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800d7a6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7a8:	e239      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d7aa:	4b3a      	ldr	r3, [pc, #232]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7b6:	d102      	bne.n	800d7be <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d7b8:	4b37      	ldr	r3, [pc, #220]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d7ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d7bc:	e22f      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7c2:	e22c      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d7c4:	4b33      	ldr	r3, [pc, #204]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f003 0320 	and.w	r3, r3, #32
 800d7cc:	2b20      	cmp	r3, #32
 800d7ce:	d117      	bne.n	800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d7d0:	4b30      	ldr	r3, [pc, #192]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d005      	beq.n	800d7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d7dc:	4b2d      	ldr	r3, [pc, #180]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	0e1b      	lsrs	r3, r3, #24
 800d7e2:	f003 030f 	and.w	r3, r3, #15
 800d7e6:	e006      	b.n	800d7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d7e8:	4b2a      	ldr	r3, [pc, #168]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d7ee:	041b      	lsls	r3, r3, #16
 800d7f0:	0e1b      	lsrs	r3, r3, #24
 800d7f2:	f003 030f 	and.w	r3, r3, #15
 800d7f6:	4a29      	ldr	r2, [pc, #164]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d7fe:	e20e      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d800:	2300      	movs	r3, #0
 800d802:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d804:	e20b      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d806:	2300      	movs	r3, #0
 800d808:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d80a:	e208      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d80c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d810:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d814:	430b      	orrs	r3, r1
 800d816:	d17c      	bne.n	800d912 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d818:	4b1e      	ldr	r3, [pc, #120]	@ (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d81a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d81e:	f003 0318 	and.w	r3, r3, #24
 800d822:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d826:	2b18      	cmp	r3, #24
 800d828:	d870      	bhi.n	800d90c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d82a:	a201      	add	r2, pc, #4	@ (adr r2, 800d830 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d830:	0800d8a1 	.word	0x0800d8a1
 800d834:	0800d90d 	.word	0x0800d90d
 800d838:	0800d90d 	.word	0x0800d90d
 800d83c:	0800d90d 	.word	0x0800d90d
 800d840:	0800d90d 	.word	0x0800d90d
 800d844:	0800d90d 	.word	0x0800d90d
 800d848:	0800d90d 	.word	0x0800d90d
 800d84c:	0800d90d 	.word	0x0800d90d
 800d850:	0800d8a9 	.word	0x0800d8a9
 800d854:	0800d90d 	.word	0x0800d90d
 800d858:	0800d90d 	.word	0x0800d90d
 800d85c:	0800d90d 	.word	0x0800d90d
 800d860:	0800d90d 	.word	0x0800d90d
 800d864:	0800d90d 	.word	0x0800d90d
 800d868:	0800d90d 	.word	0x0800d90d
 800d86c:	0800d90d 	.word	0x0800d90d
 800d870:	0800d8b1 	.word	0x0800d8b1
 800d874:	0800d90d 	.word	0x0800d90d
 800d878:	0800d90d 	.word	0x0800d90d
 800d87c:	0800d90d 	.word	0x0800d90d
 800d880:	0800d90d 	.word	0x0800d90d
 800d884:	0800d90d 	.word	0x0800d90d
 800d888:	0800d90d 	.word	0x0800d90d
 800d88c:	0800d90d 	.word	0x0800d90d
 800d890:	0800d8cb 	.word	0x0800d8cb
 800d894:	46020c00 	.word	0x46020c00
 800d898:	00f42400 	.word	0x00f42400
 800d89c:	08011bac 	.word	0x08011bac
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d8a0:	f7fd fa62 	bl	800ad68 <HAL_RCC_GetPCLK3Freq>
 800d8a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8a6:	e1ba      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d8a8:	f7fd f91a 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800d8ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8ae:	e1b6      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d8b0:	4b9f      	ldr	r3, [pc, #636]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8bc:	d102      	bne.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d8be:	4b9d      	ldr	r3, [pc, #628]	@ (800db34 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d8c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8c2:	e1ac      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8c8:	e1a9      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d8ca:	4b99      	ldr	r3, [pc, #612]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f003 0320 	and.w	r3, r3, #32
 800d8d2:	2b20      	cmp	r3, #32
 800d8d4:	d117      	bne.n	800d906 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d8d6:	4b96      	ldr	r3, [pc, #600]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d005      	beq.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d8e2:	4b93      	ldr	r3, [pc, #588]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	0e1b      	lsrs	r3, r3, #24
 800d8e8:	f003 030f 	and.w	r3, r3, #15
 800d8ec:	e006      	b.n	800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d8ee:	4b90      	ldr	r3, [pc, #576]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d8f4:	041b      	lsls	r3, r3, #16
 800d8f6:	0e1b      	lsrs	r3, r3, #24
 800d8f8:	f003 030f 	and.w	r3, r3, #15
 800d8fc:	4a8e      	ldr	r2, [pc, #568]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d902:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d904:	e18b      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d906:	2300      	movs	r3, #0
 800d908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d90a:	e188      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d90c:	2300      	movs	r3, #0
 800d90e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d910:	e185      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d912:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d916:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d91a:	430b      	orrs	r3, r1
 800d91c:	d155      	bne.n	800d9ca <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d91e:	4b84      	ldr	r3, [pc, #528]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d920:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d924:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d928:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d92c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d930:	d013      	beq.n	800d95a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d934:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d938:	d844      	bhi.n	800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d940:	d013      	beq.n	800d96a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d944:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d948:	d83c      	bhi.n	800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d014      	beq.n	800d97a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d956:	d014      	beq.n	800d982 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d958:	e034      	b.n	800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d95a:	f107 0318 	add.w	r3, r7, #24
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fe fb2e 	bl	800bfc0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d968:	e159      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d96a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fe f9cc 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d976:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d978:	e151      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d97a:	f7fd f8b1 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800d97e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d980:	e14d      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d982:	4b6b      	ldr	r3, [pc, #428]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f003 0320 	and.w	r3, r3, #32
 800d98a:	2b20      	cmp	r3, #32
 800d98c:	d117      	bne.n	800d9be <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d98e:	4b68      	ldr	r3, [pc, #416]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d996:	2b00      	cmp	r3, #0
 800d998:	d005      	beq.n	800d9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d99a:	4b65      	ldr	r3, [pc, #404]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	0e1b      	lsrs	r3, r3, #24
 800d9a0:	f003 030f 	and.w	r3, r3, #15
 800d9a4:	e006      	b.n	800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d9a6:	4b62      	ldr	r3, [pc, #392]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9ac:	041b      	lsls	r3, r3, #16
 800d9ae:	0e1b      	lsrs	r3, r3, #24
 800d9b0:	f003 030f 	and.w	r3, r3, #15
 800d9b4:	4a60      	ldr	r2, [pc, #384]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d9bc:	e12f      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9c2:	e12c      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9c8:	e129      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d9ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9ce:	1e59      	subs	r1, r3, #1
 800d9d0:	ea52 0301 	orrs.w	r3, r2, r1
 800d9d4:	d13c      	bne.n	800da50 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d9d6:	4b56      	ldr	r3, [pc, #344]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d9dc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d9e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d9e8:	d027      	beq.n	800da3a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d9f0:	d82b      	bhi.n	800da4a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d9f8:	d017      	beq.n	800da2a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da00:	d823      	bhi.n	800da4a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800da02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da04:	2b00      	cmp	r3, #0
 800da06:	d004      	beq.n	800da12 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800da08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da0e:	d004      	beq.n	800da1a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800da10:	e01b      	b.n	800da4a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800da12:	f7fd f865 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800da16:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da18:	e101      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da1e:	4618      	mov	r0, r3
 800da20:	f7fe f974 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800da24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da28:	e0f9      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da2a:	f107 0318 	add.w	r3, r7, #24
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe fac6 	bl	800bfc0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da38:	e0f1      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da3a:	f107 030c 	add.w	r3, r7, #12
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fe fc18 	bl	800c274 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da48:	e0e9      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800da4a:	2300      	movs	r3, #0
 800da4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da4e:	e0e6      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800da50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da54:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800da58:	430b      	orrs	r3, r1
 800da5a:	d131      	bne.n	800dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800da5c:	4b34      	ldr	r3, [pc, #208]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da66:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800da68:	4b31      	ldr	r3, [pc, #196]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da6e:	f003 0302 	and.w	r3, r3, #2
 800da72:	2b02      	cmp	r3, #2
 800da74:	d106      	bne.n	800da84 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800da76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d103      	bne.n	800da84 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800da7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da80:	637b      	str	r3, [r7, #52]	@ 0x34
 800da82:	e0cc      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800da84:	4b2a      	ldr	r3, [pc, #168]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da92:	d112      	bne.n	800daba <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800da94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da9a:	d10e      	bne.n	800daba <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800da9c:	4b24      	ldr	r3, [pc, #144]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800daa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800daa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800daaa:	d102      	bne.n	800dab2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800daac:	23fa      	movs	r3, #250	@ 0xfa
 800daae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dab0:	e0b5      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800dab2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dab6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dab8:	e0b1      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800daba:	2300      	movs	r3, #0
 800dabc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dabe:	e0ae      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800dac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dac4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800dac8:	430b      	orrs	r3, r1
 800daca:	d13b      	bne.n	800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800dacc:	4b18      	ldr	r3, [pc, #96]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dace:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dad2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800dad6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800dad8:	4b15      	ldr	r3, [pc, #84]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dae4:	d105      	bne.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800dae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800daec:	4b13      	ldr	r3, [pc, #76]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800daee:	637b      	str	r3, [r7, #52]	@ 0x34
 800daf0:	e095      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800daf2:	4b0f      	ldr	r3, [pc, #60]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dafa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dafe:	d106      	bne.n	800db0e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800db00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db06:	d102      	bne.n	800db0e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800db08:	4b0d      	ldr	r3, [pc, #52]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800db0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800db0c:	e087      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800db0e:	4b08      	ldr	r3, [pc, #32]	@ (800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db1a:	d106      	bne.n	800db2a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800db1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db22:	d102      	bne.n	800db2a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800db24:	4b03      	ldr	r3, [pc, #12]	@ (800db34 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800db26:	637b      	str	r3, [r7, #52]	@ 0x34
 800db28:	e079      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800db2a:	2300      	movs	r3, #0
 800db2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800db2e:	e076      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800db30:	46020c00 	.word	0x46020c00
 800db34:	00f42400 	.word	0x00f42400
 800db38:	08011bac 	.word	0x08011bac
 800db3c:	02dc6c00 	.word	0x02dc6c00
 800db40:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800db44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db48:	1e99      	subs	r1, r3, #2
 800db4a:	ea52 0301 	orrs.w	r3, r2, r1
 800db4e:	d120      	bne.n	800db92 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800db50:	4b35      	ldr	r3, [pc, #212]	@ (800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800db5a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800db5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d004      	beq.n	800db6c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800db62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800db68:	d008      	beq.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800db6a:	e00f      	b.n	800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db6c:	f107 030c 	add.w	r3, r7, #12
 800db70:	4618      	mov	r0, r3
 800db72:	f7fe fb7f 	bl	800c274 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db7a:	e050      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db7c:	f107 0318 	add.w	r3, r7, #24
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe fa1d 	bl	800bfc0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800db86:	6a3b      	ldr	r3, [r7, #32]
 800db88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db8a:	e048      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800db8c:	2300      	movs	r3, #0
 800db8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db90:	e045      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800db92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db96:	f1a3 0108 	sub.w	r1, r3, #8
 800db9a:	ea52 0301 	orrs.w	r3, r2, r1
 800db9e:	d13c      	bne.n	800dc1a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800dba0:	4b21      	ldr	r3, [pc, #132]	@ (800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dba2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dba6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800dbaa:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800dbac:	4b1e      	ldr	r3, [pc, #120]	@ (800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbb8:	d105      	bne.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800dbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d102      	bne.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800dbc0:	4b1a      	ldr	r3, [pc, #104]	@ (800dc2c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800dbc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbc4:	e02b      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800dbc6:	4b18      	ldr	r3, [pc, #96]	@ (800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbd2:	d106      	bne.n	800dbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dbda:	d102      	bne.n	800dbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800dbdc:	4b14      	ldr	r3, [pc, #80]	@ (800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800dbde:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbe0:	e01d      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbe8:	d107      	bne.n	800dbfa <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fe f88c 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbf8:	e011      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800dc00:	d108      	bne.n	800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe f880 	bl	800bd0c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800dc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0e:	085b      	lsrs	r3, r3, #1
 800dc10:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc12:	e004      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800dc14:	2300      	movs	r3, #0
 800dc16:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc18:	e001      	b.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800dc1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3738      	adds	r7, #56	@ 0x38
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	46020c00 	.word	0x46020c00
 800dc2c:	00f42400 	.word	0x00f42400
 800dc30:	007a1200 	.word	0x007a1200

0800dc34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800dc3c:	4b47      	ldr	r3, [pc, #284]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a46      	ldr	r2, [pc, #280]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dc42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dc46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dc48:	f7f5 f80e 	bl	8002c68 <HAL_GetTick>
 800dc4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc4e:	e008      	b.n	800dc62 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc50:	f7f5 f80a 	bl	8002c68 <HAL_GetTick>
 800dc54:	4602      	mov	r2, r0
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	2b02      	cmp	r3, #2
 800dc5c:	d901      	bls.n	800dc62 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dc5e:	2303      	movs	r3, #3
 800dc60:	e077      	b.n	800dd52 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc62:	4b3e      	ldr	r3, [pc, #248]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1f0      	bne.n	800dc50 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800dc6e:	4b3b      	ldr	r3, [pc, #236]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dc76:	f023 0303 	bic.w	r3, r3, #3
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	6811      	ldr	r1, [r2, #0]
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	6852      	ldr	r2, [r2, #4]
 800dc82:	3a01      	subs	r2, #1
 800dc84:	0212      	lsls	r2, r2, #8
 800dc86:	430a      	orrs	r2, r1
 800dc88:	4934      	ldr	r1, [pc, #208]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800dc8e:	4b33      	ldr	r3, [pc, #204]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dc90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc92:	4b33      	ldr	r3, [pc, #204]	@ (800dd60 <RCCEx_PLL2_Config+0x12c>)
 800dc94:	4013      	ands	r3, r2
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	6892      	ldr	r2, [r2, #8]
 800dc9a:	3a01      	subs	r2, #1
 800dc9c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	68d2      	ldr	r2, [r2, #12]
 800dca4:	3a01      	subs	r2, #1
 800dca6:	0252      	lsls	r2, r2, #9
 800dca8:	b292      	uxth	r2, r2
 800dcaa:	4311      	orrs	r1, r2
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	6912      	ldr	r2, [r2, #16]
 800dcb0:	3a01      	subs	r2, #1
 800dcb2:	0412      	lsls	r2, r2, #16
 800dcb4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dcb8:	4311      	orrs	r1, r2
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	6952      	ldr	r2, [r2, #20]
 800dcbe:	3a01      	subs	r2, #1
 800dcc0:	0612      	lsls	r2, r2, #24
 800dcc2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dcc6:	430a      	orrs	r2, r1
 800dcc8:	4924      	ldr	r1, [pc, #144]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dcca:	4313      	orrs	r3, r2
 800dccc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800dcce:	4b23      	ldr	r3, [pc, #140]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd2:	f023 020c 	bic.w	r2, r3, #12
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	699b      	ldr	r3, [r3, #24]
 800dcda:	4920      	ldr	r1, [pc, #128]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800dce0:	4b1e      	ldr	r3, [pc, #120]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6a1b      	ldr	r3, [r3, #32]
 800dce8:	491c      	ldr	r1, [pc, #112]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dcea:	4313      	orrs	r3, r2
 800dcec:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800dcee:	4b1b      	ldr	r3, [pc, #108]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dcf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf2:	4a1a      	ldr	r2, [pc, #104]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dcf4:	f023 0310 	bic.w	r3, r3, #16
 800dcf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dcfa:	4b18      	ldr	r3, [pc, #96]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dcfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd02:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	69d2      	ldr	r2, [r2, #28]
 800dd0a:	00d2      	lsls	r2, r2, #3
 800dd0c:	4913      	ldr	r1, [pc, #76]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800dd12:	4b12      	ldr	r3, [pc, #72]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd16:	4a11      	ldr	r2, [pc, #68]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dd18:	f043 0310 	orr.w	r3, r3, #16
 800dd1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800dd1e:	4b0f      	ldr	r3, [pc, #60]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a0e      	ldr	r2, [pc, #56]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dd24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd28:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd2a:	f7f4 ff9d 	bl	8002c68 <HAL_GetTick>
 800dd2e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd30:	e008      	b.n	800dd44 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd32:	f7f4 ff99 	bl	8002c68 <HAL_GetTick>
 800dd36:	4602      	mov	r2, r0
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	1ad3      	subs	r3, r2, r3
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	d901      	bls.n	800dd44 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800dd40:	2303      	movs	r3, #3
 800dd42:	e006      	b.n	800dd52 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd44:	4b05      	ldr	r3, [pc, #20]	@ (800dd5c <RCCEx_PLL2_Config+0x128>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0f0      	beq.n	800dd32 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800dd50:	2300      	movs	r3, #0

}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	46020c00 	.word	0x46020c00
 800dd60:	80800000 	.word	0x80800000

0800dd64 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800dd6c:	4b47      	ldr	r3, [pc, #284]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a46      	ldr	r2, [pc, #280]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800dd72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd78:	f7f4 ff76 	bl	8002c68 <HAL_GetTick>
 800dd7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd7e:	e008      	b.n	800dd92 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd80:	f7f4 ff72 	bl	8002c68 <HAL_GetTick>
 800dd84:	4602      	mov	r2, r0
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	1ad3      	subs	r3, r2, r3
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d901      	bls.n	800dd92 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dd8e:	2303      	movs	r3, #3
 800dd90:	e077      	b.n	800de82 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd92:	4b3e      	ldr	r3, [pc, #248]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1f0      	bne.n	800dd80 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800dd9e:	4b3b      	ldr	r3, [pc, #236]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800dda0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dda2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dda6:	f023 0303 	bic.w	r3, r3, #3
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	6811      	ldr	r1, [r2, #0]
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	6852      	ldr	r2, [r2, #4]
 800ddb2:	3a01      	subs	r2, #1
 800ddb4:	0212      	lsls	r2, r2, #8
 800ddb6:	430a      	orrs	r2, r1
 800ddb8:	4934      	ldr	r1, [pc, #208]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	630b      	str	r3, [r1, #48]	@ 0x30
 800ddbe:	4b33      	ldr	r3, [pc, #204]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800ddc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ddc2:	4b33      	ldr	r3, [pc, #204]	@ (800de90 <RCCEx_PLL3_Config+0x12c>)
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	6892      	ldr	r2, [r2, #8]
 800ddca:	3a01      	subs	r2, #1
 800ddcc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	68d2      	ldr	r2, [r2, #12]
 800ddd4:	3a01      	subs	r2, #1
 800ddd6:	0252      	lsls	r2, r2, #9
 800ddd8:	b292      	uxth	r2, r2
 800ddda:	4311      	orrs	r1, r2
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	6912      	ldr	r2, [r2, #16]
 800dde0:	3a01      	subs	r2, #1
 800dde2:	0412      	lsls	r2, r2, #16
 800dde4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dde8:	4311      	orrs	r1, r2
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	6952      	ldr	r2, [r2, #20]
 800ddee:	3a01      	subs	r2, #1
 800ddf0:	0612      	lsls	r2, r2, #24
 800ddf2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ddf6:	430a      	orrs	r2, r1
 800ddf8:	4924      	ldr	r1, [pc, #144]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800ddfe:	4b23      	ldr	r3, [pc, #140]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de02:	f023 020c 	bic.w	r2, r3, #12
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	699b      	ldr	r3, [r3, #24]
 800de0a:	4920      	ldr	r1, [pc, #128]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de0c:	4313      	orrs	r3, r2
 800de0e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800de10:	4b1e      	ldr	r3, [pc, #120]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a1b      	ldr	r3, [r3, #32]
 800de18:	491c      	ldr	r1, [pc, #112]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de1a:	4313      	orrs	r3, r2
 800de1c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800de1e:	4b1b      	ldr	r3, [pc, #108]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de22:	4a1a      	ldr	r2, [pc, #104]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de24:	f023 0310 	bic.w	r3, r3, #16
 800de28:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800de2a:	4b18      	ldr	r3, [pc, #96]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de32:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	69d2      	ldr	r2, [r2, #28]
 800de3a:	00d2      	lsls	r2, r2, #3
 800de3c:	4913      	ldr	r1, [pc, #76]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de3e:	4313      	orrs	r3, r2
 800de40:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800de42:	4b12      	ldr	r3, [pc, #72]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de46:	4a11      	ldr	r2, [pc, #68]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de48:	f043 0310 	orr.w	r3, r3, #16
 800de4c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800de4e:	4b0f      	ldr	r3, [pc, #60]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	4a0e      	ldr	r2, [pc, #56]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de58:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de5a:	f7f4 ff05 	bl	8002c68 <HAL_GetTick>
 800de5e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de60:	e008      	b.n	800de74 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de62:	f7f4 ff01 	bl	8002c68 <HAL_GetTick>
 800de66:	4602      	mov	r2, r0
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	1ad3      	subs	r3, r2, r3
 800de6c:	2b02      	cmp	r3, #2
 800de6e:	d901      	bls.n	800de74 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800de70:	2303      	movs	r3, #3
 800de72:	e006      	b.n	800de82 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de74:	4b05      	ldr	r3, [pc, #20]	@ (800de8c <RCCEx_PLL3_Config+0x128>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d0f0      	beq.n	800de62 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	46020c00 	.word	0x46020c00
 800de90:	80800000 	.word	0x80800000

0800de94 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d071      	beq.n	800df8a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800deac:	b2db      	uxtb	r3, r3
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d106      	bne.n	800dec0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7f4 f97a 	bl	80021b4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2202      	movs	r2, #2
 800dec4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dec8:	4b32      	ldr	r3, [pc, #200]	@ (800df94 <HAL_RTC_Init+0x100>)
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	f003 0310 	and.w	r3, r3, #16
 800ded0:	2b10      	cmp	r3, #16
 800ded2:	d051      	beq.n	800df78 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ded4:	4b2f      	ldr	r3, [pc, #188]	@ (800df94 <HAL_RTC_Init+0x100>)
 800ded6:	22ca      	movs	r2, #202	@ 0xca
 800ded8:	625a      	str	r2, [r3, #36]	@ 0x24
 800deda:	4b2e      	ldr	r3, [pc, #184]	@ (800df94 <HAL_RTC_Init+0x100>)
 800dedc:	2253      	movs	r2, #83	@ 0x53
 800dede:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 f88b 	bl	800dffc <RTC_EnterInitMode>
 800dee6:	4603      	mov	r3, r0
 800dee8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800deea:	7bfb      	ldrb	r3, [r7, #15]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d13f      	bne.n	800df70 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800def0:	4b28      	ldr	r3, [pc, #160]	@ (800df94 <HAL_RTC_Init+0x100>)
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	4a27      	ldr	r2, [pc, #156]	@ (800df94 <HAL_RTC_Init+0x100>)
 800def6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800defa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800defe:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800df00:	4b24      	ldr	r3, [pc, #144]	@ (800df94 <HAL_RTC_Init+0x100>)
 800df02:	699a      	ldr	r2, [r3, #24]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6859      	ldr	r1, [r3, #4]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	691b      	ldr	r3, [r3, #16]
 800df0c:	4319      	orrs	r1, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	699b      	ldr	r3, [r3, #24]
 800df12:	430b      	orrs	r3, r1
 800df14:	491f      	ldr	r1, [pc, #124]	@ (800df94 <HAL_RTC_Init+0x100>)
 800df16:	4313      	orrs	r3, r2
 800df18:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	68da      	ldr	r2, [r3, #12]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	041b      	lsls	r3, r3, #16
 800df24:	491b      	ldr	r1, [pc, #108]	@ (800df94 <HAL_RTC_Init+0x100>)
 800df26:	4313      	orrs	r3, r2
 800df28:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800df2a:	4b1a      	ldr	r3, [pc, #104]	@ (800df94 <HAL_RTC_Init+0x100>)
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df3a:	430b      	orrs	r3, r1
 800df3c:	4915      	ldr	r1, [pc, #84]	@ (800df94 <HAL_RTC_Init+0x100>)
 800df3e:	4313      	orrs	r3, r2
 800df40:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f896 	bl	800e074 <RTC_ExitInitMode>
 800df48:	4603      	mov	r3, r0
 800df4a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800df4c:	7bfb      	ldrb	r3, [r7, #15]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10e      	bne.n	800df70 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800df52:	4b10      	ldr	r3, [pc, #64]	@ (800df94 <HAL_RTC_Init+0x100>)
 800df54:	699b      	ldr	r3, [r3, #24]
 800df56:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a19      	ldr	r1, [r3, #32]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	69db      	ldr	r3, [r3, #28]
 800df62:	4319      	orrs	r1, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	695b      	ldr	r3, [r3, #20]
 800df68:	430b      	orrs	r3, r1
 800df6a:	490a      	ldr	r1, [pc, #40]	@ (800df94 <HAL_RTC_Init+0x100>)
 800df6c:	4313      	orrs	r3, r2
 800df6e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df70:	4b08      	ldr	r3, [pc, #32]	@ (800df94 <HAL_RTC_Init+0x100>)
 800df72:	22ff      	movs	r2, #255	@ 0xff
 800df74:	625a      	str	r2, [r3, #36]	@ 0x24
 800df76:	e001      	b.n	800df7c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d103      	bne.n	800df8a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2201      	movs	r2, #1
 800df86:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800df8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	46007800 	.word	0x46007800

0800df98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800dfa0:	4b15      	ldr	r3, [pc, #84]	@ (800dff8 <HAL_RTC_WaitForSynchro+0x60>)
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	4a14      	ldr	r2, [pc, #80]	@ (800dff8 <HAL_RTC_WaitForSynchro+0x60>)
 800dfa6:	f023 0320 	bic.w	r3, r3, #32
 800dfaa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800dfac:	f7f4 fe5c 	bl	8002c68 <HAL_GetTick>
 800dfb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dfb2:	e013      	b.n	800dfdc <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dfb4:	f7f4 fe58 	bl	8002c68 <HAL_GetTick>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dfc2:	d90b      	bls.n	800dfdc <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dfc4:	4b0c      	ldr	r3, [pc, #48]	@ (800dff8 <HAL_RTC_WaitForSynchro+0x60>)
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	f003 0320 	and.w	r3, r3, #32
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10c      	bne.n	800dfea <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2203      	movs	r2, #3
 800dfd4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800dfd8:	2303      	movs	r3, #3
 800dfda:	e008      	b.n	800dfee <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dfdc:	4b06      	ldr	r3, [pc, #24]	@ (800dff8 <HAL_RTC_WaitForSynchro+0x60>)
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	f003 0320 	and.w	r3, r3, #32
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d0e5      	beq.n	800dfb4 <HAL_RTC_WaitForSynchro+0x1c>
 800dfe8:	e000      	b.n	800dfec <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800dfea:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800dfec:	2300      	movs	r3, #0
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	46007800 	.word	0x46007800

0800dffc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e008:	4b19      	ldr	r3, [pc, #100]	@ (800e070 <RTC_EnterInitMode+0x74>)
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e010:	2b00      	cmp	r3, #0
 800e012:	d128      	bne.n	800e066 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e014:	4b16      	ldr	r3, [pc, #88]	@ (800e070 <RTC_EnterInitMode+0x74>)
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	4a15      	ldr	r2, [pc, #84]	@ (800e070 <RTC_EnterInitMode+0x74>)
 800e01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e01e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e020:	f7f4 fe22 	bl	8002c68 <HAL_GetTick>
 800e024:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e026:	e013      	b.n	800e050 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e028:	f7f4 fe1e 	bl	8002c68 <HAL_GetTick>
 800e02c:	4602      	mov	r2, r0
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e036:	d90b      	bls.n	800e050 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e038:	4b0d      	ldr	r3, [pc, #52]	@ (800e070 <RTC_EnterInitMode+0x74>)
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10f      	bne.n	800e064 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e044:	2303      	movs	r3, #3
 800e046:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2203      	movs	r2, #3
 800e04c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e050:	4b07      	ldr	r3, [pc, #28]	@ (800e070 <RTC_EnterInitMode+0x74>)
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d104      	bne.n	800e066 <RTC_EnterInitMode+0x6a>
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	2b03      	cmp	r3, #3
 800e060:	d1e2      	bne.n	800e028 <RTC_EnterInitMode+0x2c>
 800e062:	e000      	b.n	800e066 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e064:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e066:	7bfb      	ldrb	r3, [r7, #15]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3710      	adds	r7, #16
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	46007800 	.word	0x46007800

0800e074 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e080:	4b1a      	ldr	r3, [pc, #104]	@ (800e0ec <RTC_ExitInitMode+0x78>)
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	4a19      	ldr	r2, [pc, #100]	@ (800e0ec <RTC_ExitInitMode+0x78>)
 800e086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e08a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e08c:	4b17      	ldr	r3, [pc, #92]	@ (800e0ec <RTC_ExitInitMode+0x78>)
 800e08e:	699b      	ldr	r3, [r3, #24]
 800e090:	f003 0320 	and.w	r3, r3, #32
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10c      	bne.n	800e0b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7ff ff7d 	bl	800df98 <HAL_RTC_WaitForSynchro>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d01e      	beq.n	800e0e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2203      	movs	r2, #3
 800e0a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	73fb      	strb	r3, [r7, #15]
 800e0b0:	e017      	b.n	800e0e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0b2:	4b0e      	ldr	r3, [pc, #56]	@ (800e0ec <RTC_ExitInitMode+0x78>)
 800e0b4:	699b      	ldr	r3, [r3, #24]
 800e0b6:	4a0d      	ldr	r2, [pc, #52]	@ (800e0ec <RTC_ExitInitMode+0x78>)
 800e0b8:	f023 0320 	bic.w	r3, r3, #32
 800e0bc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f7ff ff6a 	bl	800df98 <HAL_RTC_WaitForSynchro>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d005      	beq.n	800e0d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2203      	movs	r2, #3
 800e0ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0d6:	4b05      	ldr	r3, [pc, #20]	@ (800e0ec <RTC_ExitInitMode+0x78>)
 800e0d8:	699b      	ldr	r3, [r3, #24]
 800e0da:	4a04      	ldr	r2, [pc, #16]	@ (800e0ec <RTC_ExitInitMode+0x78>)
 800e0dc:	f043 0320 	orr.w	r3, r3, #32
 800e0e0:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	46007800 	.word	0x46007800

0800e0f0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	4910      	ldr	r1, [pc, #64]	@ (800e144 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e104:	4313      	orrs	r3, r2
 800e106:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	689a      	ldr	r2, [r3, #8]
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	431a      	orrs	r2, r3
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	699b      	ldr	r3, [r3, #24]
 800e116:	490c      	ldr	r1, [pc, #48]	@ (800e148 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e118:	4313      	orrs	r3, r2
 800e11a:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e11c:	4b0a      	ldr	r3, [pc, #40]	@ (800e148 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e11e:	6a1b      	ldr	r3, [r3, #32]
 800e120:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	6919      	ldr	r1, [r3, #16]
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	695b      	ldr	r3, [r3, #20]
 800e12c:	041b      	lsls	r3, r3, #16
 800e12e:	430b      	orrs	r3, r1
 800e130:	4905      	ldr	r1, [pc, #20]	@ (800e148 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e132:	4313      	orrs	r3, r2
 800e134:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	46007800 	.word	0x46007800
 800e148:	46007c00 	.word	0x46007c00

0800e14c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
 800e158:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d904      	bls.n	800e16a <HAL_SAI_InitProtocol+0x1e>
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	3b03      	subs	r3, #3
 800e164:	2b01      	cmp	r3, #1
 800e166:	d812      	bhi.n	800e18e <HAL_SAI_InitProtocol+0x42>
 800e168:	e008      	b.n	800e17c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	68b9      	ldr	r1, [r7, #8]
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 fbed 	bl	800e950 <SAI_InitI2S>
 800e176:	4603      	mov	r3, r0
 800e178:	75fb      	strb	r3, [r7, #23]
      break;
 800e17a:	e00b      	b.n	800e194 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	68b9      	ldr	r1, [r7, #8]
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f000 fc96 	bl	800eab4 <SAI_InitPCM>
 800e188:	4603      	mov	r3, r0
 800e18a:	75fb      	strb	r3, [r7, #23]
      break;
 800e18c:	e002      	b.n	800e194 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e18e:	2301      	movs	r3, #1
 800e190:	75fb      	strb	r3, [r7, #23]
      break;
 800e192:	bf00      	nop
  }

  if (status == HAL_OK)
 800e194:	7dfb      	ldrb	r3, [r7, #23]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d104      	bne.n	800e1a4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f000 f808 	bl	800e1b0 <HAL_SAI_Init>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3718      	adds	r7, #24
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
	...

0800e1b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b08a      	sub	sp, #40	@ 0x28
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d101      	bne.n	800e1c2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e1ce      	b.n	800e560 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d10e      	bne.n	800e1ea <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a83      	ldr	r2, [pc, #524]	@ (800e3e0 <HAL_SAI_Init+0x230>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d107      	bne.n	800e1e6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d103      	bne.n	800e1e6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e1ba      	b.n	800e560 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7f4 f9aa 	bl	8002558 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f000 fd0f 	bl	800ec28 <SAI_Disable>
 800e20a:	4603      	mov	r3, r0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d001      	beq.n	800e214 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e210:	2301      	movs	r3, #1
 800e212:	e1a5      	b.n	800e560 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2202      	movs	r2, #2
 800e218:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	2b02      	cmp	r3, #2
 800e222:	d00c      	beq.n	800e23e <HAL_SAI_Init+0x8e>
 800e224:	2b02      	cmp	r3, #2
 800e226:	d80d      	bhi.n	800e244 <HAL_SAI_Init+0x94>
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d002      	beq.n	800e232 <HAL_SAI_Init+0x82>
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d003      	beq.n	800e238 <HAL_SAI_Init+0x88>
 800e230:	e008      	b.n	800e244 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e232:	2300      	movs	r3, #0
 800e234:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e236:	e008      	b.n	800e24a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e238:	2310      	movs	r3, #16
 800e23a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e23c:	e005      	b.n	800e24a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e23e:	2320      	movs	r3, #32
 800e240:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e242:	e002      	b.n	800e24a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e244:	2300      	movs	r3, #0
 800e246:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e248:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	689b      	ldr	r3, [r3, #8]
 800e24e:	2b03      	cmp	r3, #3
 800e250:	d81d      	bhi.n	800e28e <HAL_SAI_Init+0xde>
 800e252:	a201      	add	r2, pc, #4	@ (adr r2, 800e258 <HAL_SAI_Init+0xa8>)
 800e254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e258:	0800e269 	.word	0x0800e269
 800e25c:	0800e26f 	.word	0x0800e26f
 800e260:	0800e277 	.word	0x0800e277
 800e264:	0800e27f 	.word	0x0800e27f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e268:	2300      	movs	r3, #0
 800e26a:	61fb      	str	r3, [r7, #28]
      break;
 800e26c:	e012      	b.n	800e294 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e26e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e272:	61fb      	str	r3, [r7, #28]
      break;
 800e274:	e00e      	b.n	800e294 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e276:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e27a:	61fb      	str	r3, [r7, #28]
      break;
 800e27c:	e00a      	b.n	800e294 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e27e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e282:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e286:	f043 0301 	orr.w	r3, r3, #1
 800e28a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e28c:	e002      	b.n	800e294 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	61fb      	str	r3, [r7, #28]
      break;
 800e292:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a51      	ldr	r2, [pc, #324]	@ (800e3e0 <HAL_SAI_Init+0x230>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d004      	beq.n	800e2a8 <HAL_SAI_Init+0xf8>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a50      	ldr	r2, [pc, #320]	@ (800e3e4 <HAL_SAI_Init+0x234>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d103      	bne.n	800e2b0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e2a8:	4a4f      	ldr	r2, [pc, #316]	@ (800e3e8 <HAL_SAI_Init+0x238>)
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ac:	6013      	str	r3, [r2, #0]
 800e2ae:	e002      	b.n	800e2b6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e2b0:	4a4e      	ldr	r2, [pc, #312]	@ (800e3ec <HAL_SAI_Init+0x23c>)
 800e2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b4:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d077      	beq.n	800e3ae <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a47      	ldr	r2, [pc, #284]	@ (800e3e0 <HAL_SAI_Init+0x230>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d004      	beq.n	800e2d2 <HAL_SAI_Init+0x122>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a45      	ldr	r2, [pc, #276]	@ (800e3e4 <HAL_SAI_Init+0x234>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d107      	bne.n	800e2e2 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e2d2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e2d6:	f04f 0100 	mov.w	r1, #0
 800e2da:	f7fe f925 	bl	800c528 <HAL_RCCEx_GetPeriphCLKFreq>
 800e2de:	61b8      	str	r0, [r7, #24]
 800e2e0:	e006      	b.n	800e2f0 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e2e2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e2e6:	f04f 0100 	mov.w	r1, #0
 800e2ea:	f7fe f91d 	bl	800c528 <HAL_RCCEx_GetPeriphCLKFreq>
 800e2ee:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e2f8:	d120      	bne.n	800e33c <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2fe:	2b04      	cmp	r3, #4
 800e300:	d102      	bne.n	800e308 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e302:	2340      	movs	r3, #64	@ 0x40
 800e304:	613b      	str	r3, [r7, #16]
 800e306:	e00a      	b.n	800e31e <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e30c:	2b08      	cmp	r3, #8
 800e30e:	d103      	bne.n	800e318 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e314:	613b      	str	r3, [r7, #16]
 800e316:	e002      	b.n	800e31e <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e31c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e31e:	69ba      	ldr	r2, [r7, #24]
 800e320:	4613      	mov	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4413      	add	r3, r2
 800e326:	005b      	lsls	r3, r3, #1
 800e328:	4619      	mov	r1, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6a1b      	ldr	r3, [r3, #32]
 800e32e:	693a      	ldr	r2, [r7, #16]
 800e330:	fb02 f303 	mul.w	r3, r2, r3
 800e334:	fbb1 f3f3 	udiv	r3, r1, r3
 800e338:	617b      	str	r3, [r7, #20]
 800e33a:	e017      	b.n	800e36c <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e340:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e344:	d101      	bne.n	800e34a <HAL_SAI_Init+0x19a>
 800e346:	2302      	movs	r3, #2
 800e348:	e000      	b.n	800e34c <HAL_SAI_Init+0x19c>
 800e34a:	2301      	movs	r3, #1
 800e34c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e34e:	69ba      	ldr	r2, [r7, #24]
 800e350:	4613      	mov	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4413      	add	r3, r2
 800e356:	005b      	lsls	r3, r3, #1
 800e358:	4619      	mov	r1, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	fb02 f303 	mul.w	r3, r2, r3
 800e364:	021b      	lsls	r3, r3, #8
 800e366:	fbb1 f3f3 	udiv	r3, r1, r3
 800e36a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	4a20      	ldr	r2, [pc, #128]	@ (800e3f0 <HAL_SAI_Init+0x240>)
 800e370:	fba2 2303 	umull	r2, r3, r2, r3
 800e374:	08da      	lsrs	r2, r3, #3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e37a:	6979      	ldr	r1, [r7, #20]
 800e37c:	4b1c      	ldr	r3, [pc, #112]	@ (800e3f0 <HAL_SAI_Init+0x240>)
 800e37e:	fba3 2301 	umull	r2, r3, r3, r1
 800e382:	08da      	lsrs	r2, r3, #3
 800e384:	4613      	mov	r3, r2
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	4413      	add	r3, r2
 800e38a:	005b      	lsls	r3, r3, #1
 800e38c:	1aca      	subs	r2, r1, r3
 800e38e:	2a08      	cmp	r2, #8
 800e390:	d904      	bls.n	800e39c <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e396:	1c5a      	adds	r2, r3, #1
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3a0:	2b04      	cmp	r3, #4
 800e3a2:	d104      	bne.n	800e3ae <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3a8:	085a      	lsrs	r2, r3, #1
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d003      	beq.n	800e3be <HAL_SAI_Init+0x20e>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d109      	bne.n	800e3d2 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d101      	bne.n	800e3ca <HAL_SAI_Init+0x21a>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	e001      	b.n	800e3ce <HAL_SAI_Init+0x21e>
 800e3ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3ce:	623b      	str	r3, [r7, #32]
 800e3d0:	e012      	b.n	800e3f8 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d10c      	bne.n	800e3f4 <HAL_SAI_Init+0x244>
 800e3da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3de:	e00a      	b.n	800e3f6 <HAL_SAI_Init+0x246>
 800e3e0:	40015404 	.word	0x40015404
 800e3e4:	40015424 	.word	0x40015424
 800e3e8:	40015400 	.word	0x40015400
 800e3ec:	40015800 	.word	0x40015800
 800e3f0:	cccccccd 	.word	0xcccccccd
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	6819      	ldr	r1, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	4b59      	ldr	r3, [pc, #356]	@ (800e568 <HAL_SAI_Init+0x3b8>)
 800e404:	400b      	ands	r3, r1
 800e406:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	6819      	ldr	r1, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	685a      	ldr	r2, [r3, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e416:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e41c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e422:	431a      	orrs	r2, r3
 800e424:	6a3b      	ldr	r3, [r7, #32]
 800e426:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e430:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	695b      	ldr	r3, [r3, #20]
 800e436:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e43c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e442:	051b      	lsls	r3, r3, #20
 800e444:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e44a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	691b      	ldr	r3, [r3, #16]
 800e450:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	430a      	orrs	r2, r1
 800e458:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	6812      	ldr	r2, [r2, #0]
 800e464:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e468:	f023 030f 	bic.w	r3, r3, #15
 800e46c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	6859      	ldr	r1, [r3, #4]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	69da      	ldr	r2, [r3, #28]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e47c:	431a      	orrs	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e482:	431a      	orrs	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	430a      	orrs	r2, r1
 800e48a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6899      	ldr	r1, [r3, #8]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	4b35      	ldr	r3, [pc, #212]	@ (800e56c <HAL_SAI_Init+0x3bc>)
 800e498:	400b      	ands	r3, r1
 800e49a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6899      	ldr	r1, [r3, #8]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4a6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e4ac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e4b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e4b8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e4c2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	430a      	orrs	r2, r1
 800e4ca:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	68d9      	ldr	r1, [r3, #12]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e4da:	400b      	ands	r3, r1
 800e4dc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68d9      	ldr	r1, [r3, #12]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4ec:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4f2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e4f4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	021b      	lsls	r3, r3, #8
 800e4fe:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	430a      	orrs	r2, r1
 800e506:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a18      	ldr	r2, [pc, #96]	@ (800e570 <HAL_SAI_Init+0x3c0>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d119      	bne.n	800e546 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e512:	4b18      	ldr	r3, [pc, #96]	@ (800e574 <HAL_SAI_Init+0x3c4>)
 800e514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e516:	4a17      	ldr	r2, [pc, #92]	@ (800e574 <HAL_SAI_Init+0x3c4>)
 800e518:	f023 0301 	bic.w	r3, r3, #1
 800e51c:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e524:	2b01      	cmp	r3, #1
 800e526:	d10e      	bne.n	800e546 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e530:	3b01      	subs	r3, #1
 800e532:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e534:	490f      	ldr	r1, [pc, #60]	@ (800e574 <HAL_SAI_Init+0x3c4>)
 800e536:	4313      	orrs	r3, r2
 800e538:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e53a:	4b0e      	ldr	r3, [pc, #56]	@ (800e574 <HAL_SAI_Init+0x3c4>)
 800e53c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e53e:	4a0d      	ldr	r2, [pc, #52]	@ (800e574 <HAL_SAI_Init+0x3c4>)
 800e540:	f043 0301 	orr.w	r3, r3, #1
 800e544:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2201      	movs	r2, #1
 800e552:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3728      	adds	r7, #40	@ 0x28
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	f005c010 	.word	0xf005c010
 800e56c:	fff88000 	.word	0xfff88000
 800e570:	40015404 	.word	0x40015404
 800e574:	40015400 	.word	0x40015400

0800e578 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b088      	sub	sp, #32
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	4613      	mov	r3, r2
 800e584:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e586:	f7f4 fb6f 	bl	8002c68 <HAL_GetTick>
 800e58a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d002      	beq.n	800e598 <HAL_SAI_Transmit_DMA+0x20>
 800e592:	88fb      	ldrh	r3, [r7, #6]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d101      	bne.n	800e59c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800e598:	2301      	movs	r3, #1
 800e59a:	e0e4      	b.n	800e766 <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	f040 80dd 	bne.w	800e764 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d101      	bne.n	800e5b8 <HAL_SAI_Transmit_DMA+0x40>
 800e5b4:	2302      	movs	r3, #2
 800e5b6:	e0d6      	b.n	800e766 <HAL_SAI_Transmit_DMA+0x1ee>
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	88fa      	ldrh	r2, [r7, #6]
 800e5ca:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	88fa      	ldrh	r2, [r7, #6]
 800e5d2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2212      	movs	r2, #18
 800e5e2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5ec:	4a60      	ldr	r2, [pc, #384]	@ (800e770 <HAL_SAI_Transmit_DMA+0x1f8>)
 800e5ee:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5f6:	4a5f      	ldr	r2, [pc, #380]	@ (800e774 <HAL_SAI_Transmit_DMA+0x1fc>)
 800e5f8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e600:	4a5d      	ldr	r2, [pc, #372]	@ (800e778 <HAL_SAI_Transmit_DMA+0x200>)
 800e602:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e60a:	2200      	movs	r2, #0
 800e60c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e612:	2b40      	cmp	r3, #64	@ 0x40
 800e614:	d106      	bne.n	800e624 <HAL_SAI_Transmit_DMA+0xac>
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d102      	bne.n	800e624 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800e61e:	88fb      	ldrh	r3, [r7, #6]
 800e620:	61bb      	str	r3, [r7, #24]
 800e622:	e00a      	b.n	800e63a <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e628:	2b80      	cmp	r3, #128	@ 0x80
 800e62a:	d803      	bhi.n	800e634 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e62c:	88fb      	ldrh	r3, [r7, #6]
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	61bb      	str	r3, [r7, #24]
 800e632:	e002      	b.n	800e63a <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e634:	88fb      	ldrh	r3, [r7, #6]
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e646:	2b00      	cmp	r3, #0
 800e648:	d02d      	beq.n	800e6a6 <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e652:	2b00      	cmp	r3, #0
 800e654:	d021      	beq.n	800e69a <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e65c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	69ba      	ldr	r2, [r7, #24]
 800e662:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e66e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f103 021c 	add.w	r2, r3, #28
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e68e:	4618      	mov	r0, r3
 800e690:	f7f7 ff88 	bl	80065a4 <HAL_DMAEx_List_Start_IT>
 800e694:	4603      	mov	r3, r0
 800e696:	77fb      	strb	r3, [r7, #31]
 800e698:	e014      	b.n	800e6c4 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e05f      	b.n	800e766 <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	331c      	adds	r3, #28
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	f7f6 ffe0 	bl	8005680 <HAL_DMA_Start_IT>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800e6c4:	7ffb      	ldrb	r3, [r7, #31]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d005      	beq.n	800e6d6 <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e047      	b.n	800e766 <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	68f8      	ldr	r0, [r7, #12]
 800e6da:	f000 fa6d 	bl	800ebb8 <SAI_InterruptFlag>
 800e6de:	4601      	mov	r1, r0
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	691a      	ldr	r2, [r3, #16]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	430a      	orrs	r2, r1
 800e6ec:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e6fc:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e6fe:	e015      	b.n	800e72c <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e700:	f7f4 fab2 	bl	8002c68 <HAL_GetTick>
 800e704:	4602      	mov	r2, r0
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e70e:	d90d      	bls.n	800e72c <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e716:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800e728:	2303      	movs	r3, #3
 800e72a:	e01c      	b.n	800e766 <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	695b      	ldr	r3, [r3, #20]
 800e732:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e736:	2b00      	cmp	r3, #0
 800e738:	d0e2      	beq.n	800e700 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e744:	2b00      	cmp	r3, #0
 800e746:	d107      	bne.n	800e758 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e756:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	e000      	b.n	800e766 <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800e764:	2302      	movs	r3, #2
  }
}
 800e766:	4618      	mov	r0, r3
 800e768:	3720      	adds	r7, #32
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	0800ecfb 	.word	0x0800ecfb
 800e774:	0800ec9d 	.word	0x0800ec9d
 800e778:	0800ed91 	.word	0x0800ed91

0800e77c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b086      	sub	sp, #24
 800e780:	af00      	add	r7, sp, #0
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	4613      	mov	r3, r2
 800e788:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d002      	beq.n	800e796 <HAL_SAI_Receive_DMA+0x1a>
 800e790:	88fb      	ldrh	r3, [r7, #6]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d101      	bne.n	800e79a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e796:	2301      	movs	r3, #1
 800e798:	e0c6      	b.n	800e928 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	f040 80bf 	bne.w	800e926 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d101      	bne.n	800e7b6 <HAL_SAI_Receive_DMA+0x3a>
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	e0b8      	b.n	800e928 <HAL_SAI_Receive_DMA+0x1ac>
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	88fa      	ldrh	r2, [r7, #6]
 800e7c8:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	88fa      	ldrh	r2, [r7, #6]
 800e7d0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2222      	movs	r2, #34	@ 0x22
 800e7e0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7ea:	4a51      	ldr	r2, [pc, #324]	@ (800e930 <HAL_SAI_Receive_DMA+0x1b4>)
 800e7ec:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7f4:	4a4f      	ldr	r2, [pc, #316]	@ (800e934 <HAL_SAI_Receive_DMA+0x1b8>)
 800e7f6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7fe:	4a4e      	ldr	r2, [pc, #312]	@ (800e938 <HAL_SAI_Receive_DMA+0x1bc>)
 800e800:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e808:	2200      	movs	r2, #0
 800e80a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e810:	2b40      	cmp	r3, #64	@ 0x40
 800e812:	d106      	bne.n	800e822 <HAL_SAI_Receive_DMA+0xa6>
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d102      	bne.n	800e822 <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e81c:	88fb      	ldrh	r3, [r7, #6]
 800e81e:	613b      	str	r3, [r7, #16]
 800e820:	e00a      	b.n	800e838 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e826:	2b80      	cmp	r3, #128	@ 0x80
 800e828:	d803      	bhi.n	800e832 <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e82a:	88fb      	ldrh	r3, [r7, #6]
 800e82c:	005b      	lsls	r3, r3, #1
 800e82e:	613b      	str	r3, [r7, #16]
 800e830:	e002      	b.n	800e838 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e832:	88fb      	ldrh	r3, [r7, #6]
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e83e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e844:	2b00      	cmp	r3, #0
 800e846:	d02d      	beq.n	800e8a4 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e84e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e850:	2b00      	cmp	r3, #0
 800e852:	d021      	beq.n	800e898 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e85a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	693a      	ldr	r2, [r7, #16]
 800e860:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f103 021c 	add.w	r2, r3, #28
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7f7 fe89 	bl	80065a4 <HAL_DMAEx_List_Start_IT>
 800e892:	4603      	mov	r3, r0
 800e894:	75fb      	strb	r3, [r7, #23]
 800e896:	e014      	b.n	800e8c2 <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e041      	b.n	800e928 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	331c      	adds	r3, #28
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	f7f6 fee1 	bl	8005680 <HAL_DMA_Start_IT>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e8c2:	7dfb      	ldrb	r3, [r7, #23]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d005      	beq.n	800e8d4 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	e029      	b.n	800e928 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f000 f96e 	bl	800ebb8 <SAI_InterruptFlag>
 800e8dc:	4601      	mov	r1, r0
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	691a      	ldr	r2, [r3, #16]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	430a      	orrs	r2, r1
 800e8ea:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e8fa:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e906:	2b00      	cmp	r3, #0
 800e908:	d107      	bne.n	800e91a <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e918:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e922:	2300      	movs	r3, #0
 800e924:	e000      	b.n	800e928 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e926:	2302      	movs	r3, #2
  }
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3718      	adds	r7, #24
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	0800ed75 	.word	0x0800ed75
 800e934:	0800ed17 	.word	0x0800ed17
 800e938:	0800ed91 	.word	0x0800ed91

0800e93c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b083      	sub	sp, #12
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e944:	bf00      	nop
 800e946:	370c      	adds	r7, #12
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e950:	b480      	push	{r7}
 800e952:	b087      	sub	sp, #28
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
 800e95c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e95e:	2300      	movs	r3, #0
 800e960:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2200      	movs	r2, #0
 800e966:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2200      	movs	r2, #0
 800e96c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d003      	beq.n	800e97e <SAI_InitI2S+0x2e>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	2b02      	cmp	r3, #2
 800e97c:	d103      	bne.n	800e986 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2200      	movs	r2, #0
 800e982:	651a      	str	r2, [r3, #80]	@ 0x50
 800e984:	e002      	b.n	800e98c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2201      	movs	r2, #1
 800e98a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e992:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e99a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	683a      	ldr	r2, [r7, #0]
 800e9a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	f003 0301 	and.w	r3, r3, #1
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e077      	b.n	800eaa6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d107      	bne.n	800e9cc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e9c8:	665a      	str	r2, [r3, #100]	@ 0x64
 800e9ca:	e006      	b.n	800e9da <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e9d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2b03      	cmp	r3, #3
 800e9de:	d84f      	bhi.n	800ea80 <SAI_InitI2S+0x130>
 800e9e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e9e8 <SAI_InitI2S+0x98>)
 800e9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e6:	bf00      	nop
 800e9e8:	0800e9f9 	.word	0x0800e9f9
 800e9ec:	0800ea1b 	.word	0x0800ea1b
 800e9f0:	0800ea3d 	.word	0x0800ea3d
 800e9f4:	0800ea5f 	.word	0x0800ea5f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2280      	movs	r2, #128	@ 0x80
 800e9fc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	085b      	lsrs	r3, r3, #1
 800ea02:	015a      	lsls	r2, r3, #5
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	085b      	lsrs	r3, r3, #1
 800ea0c:	011a      	lsls	r2, r3, #4
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2240      	movs	r2, #64	@ 0x40
 800ea16:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea18:	e035      	b.n	800ea86 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2280      	movs	r2, #128	@ 0x80
 800ea1e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	085b      	lsrs	r3, r3, #1
 800ea24:	019a      	lsls	r2, r3, #6
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	085b      	lsrs	r3, r3, #1
 800ea2e:	015a      	lsls	r2, r3, #5
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2280      	movs	r2, #128	@ 0x80
 800ea38:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea3a:	e024      	b.n	800ea86 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	22c0      	movs	r2, #192	@ 0xc0
 800ea40:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	085b      	lsrs	r3, r3, #1
 800ea46:	019a      	lsls	r2, r3, #6
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	085b      	lsrs	r3, r3, #1
 800ea50:	015a      	lsls	r2, r3, #5
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2280      	movs	r2, #128	@ 0x80
 800ea5a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea5c:	e013      	b.n	800ea86 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	22e0      	movs	r2, #224	@ 0xe0
 800ea62:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	085b      	lsrs	r3, r3, #1
 800ea68:	019a      	lsls	r2, r3, #6
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	085b      	lsrs	r3, r3, #1
 800ea72:	015a      	lsls	r2, r3, #5
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2280      	movs	r2, #128	@ 0x80
 800ea7c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea7e:	e002      	b.n	800ea86 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800ea80:	2301      	movs	r3, #1
 800ea82:	75fb      	strb	r3, [r7, #23]
      break;
 800ea84:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	2b02      	cmp	r3, #2
 800ea8a:	d10b      	bne.n	800eaa4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d102      	bne.n	800ea98 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2210      	movs	r2, #16
 800ea96:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b02      	cmp	r3, #2
 800ea9c:	d102      	bne.n	800eaa4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2208      	movs	r2, #8
 800eaa2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800eaa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	371c      	adds	r7, #28
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr
 800eab2:	bf00      	nop

0800eab4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b087      	sub	sp, #28
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eac2:	2300      	movs	r3, #0
 800eac4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2200      	movs	r2, #0
 800ead0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d003      	beq.n	800eae2 <SAI_InitPCM+0x2e>
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	2b02      	cmp	r3, #2
 800eae0:	d103      	bne.n	800eaea <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2201      	movs	r2, #1
 800eae6:	651a      	str	r2, [r3, #80]	@ 0x50
 800eae8:	e002      	b.n	800eaf0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800eafc:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800eb04:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	683a      	ldr	r2, [r7, #0]
 800eb10:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eb18:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	2b04      	cmp	r3, #4
 800eb1e:	d103      	bne.n	800eb28 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2201      	movs	r2, #1
 800eb24:	659a      	str	r2, [r3, #88]	@ 0x58
 800eb26:	e002      	b.n	800eb2e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	220d      	movs	r2, #13
 800eb2c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2b03      	cmp	r3, #3
 800eb32:	d837      	bhi.n	800eba4 <SAI_InitPCM+0xf0>
 800eb34:	a201      	add	r2, pc, #4	@ (adr r2, 800eb3c <SAI_InitPCM+0x88>)
 800eb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb3a:	bf00      	nop
 800eb3c:	0800eb4d 	.word	0x0800eb4d
 800eb40:	0800eb63 	.word	0x0800eb63
 800eb44:	0800eb79 	.word	0x0800eb79
 800eb48:	0800eb8f 	.word	0x0800eb8f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2280      	movs	r2, #128	@ 0x80
 800eb50:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	011a      	lsls	r2, r3, #4
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2240      	movs	r2, #64	@ 0x40
 800eb5e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb60:	e023      	b.n	800ebaa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2280      	movs	r2, #128	@ 0x80
 800eb66:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	015a      	lsls	r2, r3, #5
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2280      	movs	r2, #128	@ 0x80
 800eb74:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb76:	e018      	b.n	800ebaa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	22c0      	movs	r2, #192	@ 0xc0
 800eb7c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	015a      	lsls	r2, r3, #5
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2280      	movs	r2, #128	@ 0x80
 800eb8a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb8c:	e00d      	b.n	800ebaa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	22e0      	movs	r2, #224	@ 0xe0
 800eb92:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	015a      	lsls	r2, r3, #5
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2280      	movs	r2, #128	@ 0x80
 800eba0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eba2:	e002      	b.n	800ebaa <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800eba4:	2301      	movs	r3, #1
 800eba6:	75fb      	strb	r3, [r7, #23]
      break;
 800eba8:	bf00      	nop
  }

  return status;
 800ebaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	371c      	adds	r7, #28
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ebc8:	78fb      	ldrb	r3, [r7, #3]
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d103      	bne.n	800ebd6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f043 0308 	orr.w	r3, r3, #8
 800ebd4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebda:	2b08      	cmp	r3, #8
 800ebdc:	d10b      	bne.n	800ebf6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ebe2:	2b03      	cmp	r3, #3
 800ebe4:	d003      	beq.n	800ebee <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d103      	bne.n	800ebf6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f043 0310 	orr.w	r3, r3, #16
 800ebf4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	d003      	beq.n	800ec06 <SAI_InterruptFlag+0x4e>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	2b02      	cmp	r3, #2
 800ec04:	d104      	bne.n	800ec10 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ec0c:	60fb      	str	r3, [r7, #12]
 800ec0e:	e003      	b.n	800ec18 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f043 0304 	orr.w	r3, r3, #4
 800ec16:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ec18:	68fb      	ldr	r3, [r7, #12]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3714      	adds	r7, #20
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
	...

0800ec28 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b085      	sub	sp, #20
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ec30:	4b18      	ldr	r3, [pc, #96]	@ (800ec94 <SAI_Disable+0x6c>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a18      	ldr	r2, [pc, #96]	@ (800ec98 <SAI_Disable+0x70>)
 800ec36:	fba2 2303 	umull	r2, r3, r2, r3
 800ec3a:	0b1b      	lsrs	r3, r3, #12
 800ec3c:	009b      	lsls	r3, r3, #2
 800ec3e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ec40:	2300      	movs	r3, #0
 800ec42:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ec52:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10a      	bne.n	800ec70 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	72fb      	strb	r3, [r7, #11]
      break;
 800ec6e:	e009      	b.n	800ec84 <SAI_Disable+0x5c>
    }
    count--;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	3b01      	subs	r3, #1
 800ec74:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d1e7      	bne.n	800ec54 <SAI_Disable+0x2c>

  return status;
 800ec84:	7afb      	ldrb	r3, [r7, #11]
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3714      	adds	r7, #20
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	20000020 	.word	0x20000020
 800ec98:	95cbec1b 	.word	0x95cbec1b

0800ec9c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eca8:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecae:	2b81      	cmp	r3, #129	@ 0x81
 800ecb0:	d01c      	beq.n	800ecec <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ecc8:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ecca:	2100      	movs	r1, #0
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f7ff ff73 	bl	800ebb8 <SAI_InterruptFlag>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	43d9      	mvns	r1, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	691a      	ldr	r2, [r3, #16]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	400a      	ands	r2, r1
 800ece2:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2201      	movs	r2, #1
 800ece8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f7f2 fd2d 	bl	800174c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ecf2:	bf00      	nop
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b084      	sub	sp, #16
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed06:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f7f2 fd09 	bl	8001720 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed0e:	bf00      	nop
 800ed10:	3710      	adds	r7, #16
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}

0800ed16 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ed16:	b580      	push	{r7, lr}
 800ed18:	b084      	sub	sp, #16
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed22:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed28:	2b81      	cmp	r3, #129	@ 0x81
 800ed2a:	d01c      	beq.n	800ed66 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ed3a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ed44:	2100      	movs	r1, #0
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f7ff ff36 	bl	800ebb8 <SAI_InterruptFlag>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	43d9      	mvns	r1, r3
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	691a      	ldr	r2, [r3, #16]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	400a      	ands	r2, r1
 800ed5c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2201      	movs	r2, #1
 800ed62:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f7f2 fcc4 	bl	80016f4 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed6c:	bf00      	nop
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed80:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f7f2 fca0 	bl	80016c8 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed88:	bf00      	nop
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed9c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eda4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800edbc:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800edbe:	68f8      	ldr	r0, [r7, #12]
 800edc0:	f7ff ff32 	bl	800ec28 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2200      	movs	r2, #0
 800edd0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f7ff fdb1 	bl	800e93c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800edda:	bf00      	nop
 800eddc:	3710      	adds	r7, #16
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b082      	sub	sp, #8
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d101      	bne.n	800edf4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	e049      	b.n	800ee88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d106      	bne.n	800ee0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7f3 fa41 	bl	8002290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2202      	movs	r2, #2
 800ee12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	3304      	adds	r3, #4
 800ee1e:	4619      	mov	r1, r3
 800ee20:	4610      	mov	r0, r2
 800ee22:	f000 fb3b 	bl	800f49c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2201      	movs	r2, #1
 800ee42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2201      	movs	r2, #1
 800ee4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2201      	movs	r2, #1
 800ee52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2201      	movs	r2, #1
 800ee62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2201      	movs	r2, #1
 800ee6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2201      	movs	r2, #1
 800ee72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2201      	movs	r2, #1
 800ee7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee9e:	b2db      	uxtb	r3, r3
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d001      	beq.n	800eea8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eea4:	2301      	movs	r3, #1
 800eea6:	e06a      	b.n	800ef7e <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2202      	movs	r2, #2
 800eeac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a35      	ldr	r2, [pc, #212]	@ (800ef8c <HAL_TIM_Base_Start+0xfc>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d040      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a34      	ldr	r2, [pc, #208]	@ (800ef90 <HAL_TIM_Base_Start+0x100>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d03b      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eecc:	d036      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eed6:	d031      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a2d      	ldr	r2, [pc, #180]	@ (800ef94 <HAL_TIM_Base_Start+0x104>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d02c      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a2c      	ldr	r2, [pc, #176]	@ (800ef98 <HAL_TIM_Base_Start+0x108>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d027      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a2a      	ldr	r2, [pc, #168]	@ (800ef9c <HAL_TIM_Base_Start+0x10c>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d022      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a29      	ldr	r2, [pc, #164]	@ (800efa0 <HAL_TIM_Base_Start+0x110>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d01d      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a27      	ldr	r2, [pc, #156]	@ (800efa4 <HAL_TIM_Base_Start+0x114>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d018      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a26      	ldr	r2, [pc, #152]	@ (800efa8 <HAL_TIM_Base_Start+0x118>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d013      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4a24      	ldr	r2, [pc, #144]	@ (800efac <HAL_TIM_Base_Start+0x11c>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d00e      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a23      	ldr	r2, [pc, #140]	@ (800efb0 <HAL_TIM_Base_Start+0x120>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d009      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a21      	ldr	r2, [pc, #132]	@ (800efb4 <HAL_TIM_Base_Start+0x124>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d004      	beq.n	800ef3c <HAL_TIM_Base_Start+0xac>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a20      	ldr	r2, [pc, #128]	@ (800efb8 <HAL_TIM_Base_Start+0x128>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d115      	bne.n	800ef68 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	689a      	ldr	r2, [r3, #8]
 800ef42:	4b1e      	ldr	r3, [pc, #120]	@ (800efbc <HAL_TIM_Base_Start+0x12c>)
 800ef44:	4013      	ands	r3, r2
 800ef46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2b06      	cmp	r3, #6
 800ef4c:	d015      	beq.n	800ef7a <HAL_TIM_Base_Start+0xea>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef54:	d011      	beq.n	800ef7a <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f042 0201 	orr.w	r2, r2, #1
 800ef64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef66:	e008      	b.n	800ef7a <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f042 0201 	orr.w	r2, r2, #1
 800ef76:	601a      	str	r2, [r3, #0]
 800ef78:	e000      	b.n	800ef7c <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3714      	adds	r7, #20
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop
 800ef8c:	40012c00 	.word	0x40012c00
 800ef90:	50012c00 	.word	0x50012c00
 800ef94:	40000400 	.word	0x40000400
 800ef98:	50000400 	.word	0x50000400
 800ef9c:	40000800 	.word	0x40000800
 800efa0:	50000800 	.word	0x50000800
 800efa4:	40000c00 	.word	0x40000c00
 800efa8:	50000c00 	.word	0x50000c00
 800efac:	40013400 	.word	0x40013400
 800efb0:	50013400 	.word	0x50013400
 800efb4:	40014000 	.word	0x40014000
 800efb8:	50014000 	.word	0x50014000
 800efbc:	00010007 	.word	0x00010007

0800efc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d101      	bne.n	800efd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800efce:	2301      	movs	r3, #1
 800efd0:	e049      	b.n	800f066 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d106      	bne.n	800efec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7f3 f930 	bl	800224c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2202      	movs	r2, #2
 800eff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	3304      	adds	r3, #4
 800effc:	4619      	mov	r1, r3
 800effe:	4610      	mov	r0, r2
 800f000:	f000 fa4c 	bl	800f49c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2201      	movs	r2, #1
 800f010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2201      	movs	r2, #1
 800f018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2201      	movs	r2, #1
 800f028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2201      	movs	r2, #1
 800f030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2201      	movs	r2, #1
 800f048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2201      	movs	r2, #1
 800f060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f064:	2300      	movs	r3, #0
}
 800f066:	4618      	mov	r0, r3
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
	...

0800f070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f07c:	2300      	movs	r3, #0
 800f07e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f086:	2b01      	cmp	r3, #1
 800f088:	d101      	bne.n	800f08e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f08a:	2302      	movs	r3, #2
 800f08c:	e0ff      	b.n	800f28e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2201      	movs	r2, #1
 800f092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b14      	cmp	r3, #20
 800f09a:	f200 80f0 	bhi.w	800f27e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f09e:	a201      	add	r2, pc, #4	@ (adr r2, 800f0a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a4:	0800f0f9 	.word	0x0800f0f9
 800f0a8:	0800f27f 	.word	0x0800f27f
 800f0ac:	0800f27f 	.word	0x0800f27f
 800f0b0:	0800f27f 	.word	0x0800f27f
 800f0b4:	0800f139 	.word	0x0800f139
 800f0b8:	0800f27f 	.word	0x0800f27f
 800f0bc:	0800f27f 	.word	0x0800f27f
 800f0c0:	0800f27f 	.word	0x0800f27f
 800f0c4:	0800f17b 	.word	0x0800f17b
 800f0c8:	0800f27f 	.word	0x0800f27f
 800f0cc:	0800f27f 	.word	0x0800f27f
 800f0d0:	0800f27f 	.word	0x0800f27f
 800f0d4:	0800f1bb 	.word	0x0800f1bb
 800f0d8:	0800f27f 	.word	0x0800f27f
 800f0dc:	0800f27f 	.word	0x0800f27f
 800f0e0:	0800f27f 	.word	0x0800f27f
 800f0e4:	0800f1fd 	.word	0x0800f1fd
 800f0e8:	0800f27f 	.word	0x0800f27f
 800f0ec:	0800f27f 	.word	0x0800f27f
 800f0f0:	0800f27f 	.word	0x0800f27f
 800f0f4:	0800f23d 	.word	0x0800f23d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	68b9      	ldr	r1, [r7, #8]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f000 fad2 	bl	800f6a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	699a      	ldr	r2, [r3, #24]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f042 0208 	orr.w	r2, r2, #8
 800f112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	699a      	ldr	r2, [r3, #24]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f022 0204 	bic.w	r2, r2, #4
 800f122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	6999      	ldr	r1, [r3, #24]
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	691a      	ldr	r2, [r3, #16]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	430a      	orrs	r2, r1
 800f134:	619a      	str	r2, [r3, #24]
      break;
 800f136:	e0a5      	b.n	800f284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	68b9      	ldr	r1, [r7, #8]
 800f13e:	4618      	mov	r0, r3
 800f140:	f000 fb74 	bl	800f82c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	699a      	ldr	r2, [r3, #24]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	699a      	ldr	r2, [r3, #24]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6999      	ldr	r1, [r3, #24]
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	691b      	ldr	r3, [r3, #16]
 800f16e:	021a      	lsls	r2, r3, #8
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	430a      	orrs	r2, r1
 800f176:	619a      	str	r2, [r3, #24]
      break;
 800f178:	e084      	b.n	800f284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	68b9      	ldr	r1, [r7, #8]
 800f180:	4618      	mov	r0, r3
 800f182:	f000 fc03 	bl	800f98c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	69da      	ldr	r2, [r3, #28]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f042 0208 	orr.w	r2, r2, #8
 800f194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	69da      	ldr	r2, [r3, #28]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f022 0204 	bic.w	r2, r2, #4
 800f1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	69d9      	ldr	r1, [r3, #28]
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	691a      	ldr	r2, [r3, #16]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	430a      	orrs	r2, r1
 800f1b6:	61da      	str	r2, [r3, #28]
      break;
 800f1b8:	e064      	b.n	800f284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	68b9      	ldr	r1, [r7, #8]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 fc91 	bl	800fae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	69da      	ldr	r2, [r3, #28]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	69da      	ldr	r2, [r3, #28]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	69d9      	ldr	r1, [r3, #28]
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	691b      	ldr	r3, [r3, #16]
 800f1f0:	021a      	lsls	r2, r3, #8
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	430a      	orrs	r2, r1
 800f1f8:	61da      	str	r2, [r3, #28]
      break;
 800f1fa:	e043      	b.n	800f284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	68b9      	ldr	r1, [r7, #8]
 800f202:	4618      	mov	r0, r3
 800f204:	f000 fd20 	bl	800fc48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f042 0208 	orr.w	r2, r2, #8
 800f216:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f022 0204 	bic.w	r2, r2, #4
 800f226:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	691a      	ldr	r2, [r3, #16]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	430a      	orrs	r2, r1
 800f238:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f23a:	e023      	b.n	800f284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	68b9      	ldr	r1, [r7, #8]
 800f242:	4618      	mov	r0, r3
 800f244:	f000 fd82 	bl	800fd4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f256:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f266:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	691b      	ldr	r3, [r3, #16]
 800f272:	021a      	lsls	r2, r3, #8
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	430a      	orrs	r2, r1
 800f27a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f27c:	e002      	b.n	800f284 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f27e:	2301      	movs	r3, #1
 800f280:	75fb      	strb	r3, [r7, #23]
      break;
 800f282:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2200      	movs	r2, #0
 800f288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop

0800f298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d101      	bne.n	800f2b4 <HAL_TIM_ConfigClockSource+0x1c>
 800f2b0:	2302      	movs	r3, #2
 800f2b2:	e0e6      	b.n	800f482 <HAL_TIM_ConfigClockSource+0x1ea>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2202      	movs	r2, #2
 800f2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	689b      	ldr	r3, [r3, #8]
 800f2ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f2d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f2d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f2de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	68ba      	ldr	r2, [r7, #8]
 800f2e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4a67      	ldr	r2, [pc, #412]	@ (800f48c <HAL_TIM_ConfigClockSource+0x1f4>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	f000 80b1 	beq.w	800f456 <HAL_TIM_ConfigClockSource+0x1be>
 800f2f4:	4a65      	ldr	r2, [pc, #404]	@ (800f48c <HAL_TIM_ConfigClockSource+0x1f4>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	f200 80b6 	bhi.w	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2fc:	4a64      	ldr	r2, [pc, #400]	@ (800f490 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	f000 80a9 	beq.w	800f456 <HAL_TIM_ConfigClockSource+0x1be>
 800f304:	4a62      	ldr	r2, [pc, #392]	@ (800f490 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f306:	4293      	cmp	r3, r2
 800f308:	f200 80ae 	bhi.w	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f30c:	4a61      	ldr	r2, [pc, #388]	@ (800f494 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	f000 80a1 	beq.w	800f456 <HAL_TIM_ConfigClockSource+0x1be>
 800f314:	4a5f      	ldr	r2, [pc, #380]	@ (800f494 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f316:	4293      	cmp	r3, r2
 800f318:	f200 80a6 	bhi.w	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f31c:	4a5e      	ldr	r2, [pc, #376]	@ (800f498 <HAL_TIM_ConfigClockSource+0x200>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	f000 8099 	beq.w	800f456 <HAL_TIM_ConfigClockSource+0x1be>
 800f324:	4a5c      	ldr	r2, [pc, #368]	@ (800f498 <HAL_TIM_ConfigClockSource+0x200>)
 800f326:	4293      	cmp	r3, r2
 800f328:	f200 809e 	bhi.w	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f32c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f330:	f000 8091 	beq.w	800f456 <HAL_TIM_ConfigClockSource+0x1be>
 800f334:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f338:	f200 8096 	bhi.w	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f33c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f340:	f000 8089 	beq.w	800f456 <HAL_TIM_ConfigClockSource+0x1be>
 800f344:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f348:	f200 808e 	bhi.w	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f34c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f350:	d03e      	beq.n	800f3d0 <HAL_TIM_ConfigClockSource+0x138>
 800f352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f356:	f200 8087 	bhi.w	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f35a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f35e:	f000 8086 	beq.w	800f46e <HAL_TIM_ConfigClockSource+0x1d6>
 800f362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f366:	d87f      	bhi.n	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f368:	2b70      	cmp	r3, #112	@ 0x70
 800f36a:	d01a      	beq.n	800f3a2 <HAL_TIM_ConfigClockSource+0x10a>
 800f36c:	2b70      	cmp	r3, #112	@ 0x70
 800f36e:	d87b      	bhi.n	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f370:	2b60      	cmp	r3, #96	@ 0x60
 800f372:	d050      	beq.n	800f416 <HAL_TIM_ConfigClockSource+0x17e>
 800f374:	2b60      	cmp	r3, #96	@ 0x60
 800f376:	d877      	bhi.n	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f378:	2b50      	cmp	r3, #80	@ 0x50
 800f37a:	d03c      	beq.n	800f3f6 <HAL_TIM_ConfigClockSource+0x15e>
 800f37c:	2b50      	cmp	r3, #80	@ 0x50
 800f37e:	d873      	bhi.n	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f380:	2b40      	cmp	r3, #64	@ 0x40
 800f382:	d058      	beq.n	800f436 <HAL_TIM_ConfigClockSource+0x19e>
 800f384:	2b40      	cmp	r3, #64	@ 0x40
 800f386:	d86f      	bhi.n	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f388:	2b30      	cmp	r3, #48	@ 0x30
 800f38a:	d064      	beq.n	800f456 <HAL_TIM_ConfigClockSource+0x1be>
 800f38c:	2b30      	cmp	r3, #48	@ 0x30
 800f38e:	d86b      	bhi.n	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f390:	2b20      	cmp	r3, #32
 800f392:	d060      	beq.n	800f456 <HAL_TIM_ConfigClockSource+0x1be>
 800f394:	2b20      	cmp	r3, #32
 800f396:	d867      	bhi.n	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d05c      	beq.n	800f456 <HAL_TIM_ConfigClockSource+0x1be>
 800f39c:	2b10      	cmp	r3, #16
 800f39e:	d05a      	beq.n	800f456 <HAL_TIM_ConfigClockSource+0x1be>
 800f3a0:	e062      	b.n	800f468 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f3b2:	f000 fdcb 	bl	800ff4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f3c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	609a      	str	r2, [r3, #8]
      break;
 800f3ce:	e04f      	b.n	800f470 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f3e0:	f000 fdb4 	bl	800ff4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	689a      	ldr	r2, [r3, #8]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f3f2:	609a      	str	r2, [r3, #8]
      break;
 800f3f4:	e03c      	b.n	800f470 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f402:	461a      	mov	r2, r3
 800f404:	f000 fd26 	bl	800fe54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2150      	movs	r1, #80	@ 0x50
 800f40e:	4618      	mov	r0, r3
 800f410:	f000 fd7f 	bl	800ff12 <TIM_ITRx_SetConfig>
      break;
 800f414:	e02c      	b.n	800f470 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f422:	461a      	mov	r2, r3
 800f424:	f000 fd45 	bl	800feb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2160      	movs	r1, #96	@ 0x60
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 fd6f 	bl	800ff12 <TIM_ITRx_SetConfig>
      break;
 800f434:	e01c      	b.n	800f470 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f442:	461a      	mov	r2, r3
 800f444:	f000 fd06 	bl	800fe54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2140      	movs	r1, #64	@ 0x40
 800f44e:	4618      	mov	r0, r3
 800f450:	f000 fd5f 	bl	800ff12 <TIM_ITRx_SetConfig>
      break;
 800f454:	e00c      	b.n	800f470 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4619      	mov	r1, r3
 800f460:	4610      	mov	r0, r2
 800f462:	f000 fd56 	bl	800ff12 <TIM_ITRx_SetConfig>
      break;
 800f466:	e003      	b.n	800f470 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800f468:	2301      	movs	r3, #1
 800f46a:	73fb      	strb	r3, [r7, #15]
      break;
 800f46c:	e000      	b.n	800f470 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800f46e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2201      	movs	r2, #1
 800f474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f480:	7bfb      	ldrb	r3, [r7, #15]
}
 800f482:	4618      	mov	r0, r3
 800f484:	3710      	adds	r7, #16
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
 800f48a:	bf00      	nop
 800f48c:	00100070 	.word	0x00100070
 800f490:	00100040 	.word	0x00100040
 800f494:	00100030 	.word	0x00100030
 800f498:	00100020 	.word	0x00100020

0800f49c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b085      	sub	sp, #20
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4a6e      	ldr	r2, [pc, #440]	@ (800f668 <TIM_Base_SetConfig+0x1cc>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d02b      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a6d      	ldr	r2, [pc, #436]	@ (800f66c <TIM_Base_SetConfig+0x1d0>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d027      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4c2:	d023      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4ca:	d01f      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	4a68      	ldr	r2, [pc, #416]	@ (800f670 <TIM_Base_SetConfig+0x1d4>)
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d01b      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	4a67      	ldr	r2, [pc, #412]	@ (800f674 <TIM_Base_SetConfig+0x1d8>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d017      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4a66      	ldr	r2, [pc, #408]	@ (800f678 <TIM_Base_SetConfig+0x1dc>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d013      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	4a65      	ldr	r2, [pc, #404]	@ (800f67c <TIM_Base_SetConfig+0x1e0>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d00f      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a64      	ldr	r2, [pc, #400]	@ (800f680 <TIM_Base_SetConfig+0x1e4>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d00b      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4a63      	ldr	r2, [pc, #396]	@ (800f684 <TIM_Base_SetConfig+0x1e8>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d007      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a62      	ldr	r2, [pc, #392]	@ (800f688 <TIM_Base_SetConfig+0x1ec>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d003      	beq.n	800f50c <TIM_Base_SetConfig+0x70>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a61      	ldr	r2, [pc, #388]	@ (800f68c <TIM_Base_SetConfig+0x1f0>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d108      	bne.n	800f51e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	68fa      	ldr	r2, [r7, #12]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4a51      	ldr	r2, [pc, #324]	@ (800f668 <TIM_Base_SetConfig+0x1cc>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d043      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a50      	ldr	r2, [pc, #320]	@ (800f66c <TIM_Base_SetConfig+0x1d0>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d03f      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f534:	d03b      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f53c:	d037      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a4b      	ldr	r2, [pc, #300]	@ (800f670 <TIM_Base_SetConfig+0x1d4>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d033      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a4a      	ldr	r2, [pc, #296]	@ (800f674 <TIM_Base_SetConfig+0x1d8>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d02f      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a49      	ldr	r2, [pc, #292]	@ (800f678 <TIM_Base_SetConfig+0x1dc>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d02b      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a48      	ldr	r2, [pc, #288]	@ (800f67c <TIM_Base_SetConfig+0x1e0>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d027      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a47      	ldr	r2, [pc, #284]	@ (800f680 <TIM_Base_SetConfig+0x1e4>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d023      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a46      	ldr	r2, [pc, #280]	@ (800f684 <TIM_Base_SetConfig+0x1e8>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d01f      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4a45      	ldr	r2, [pc, #276]	@ (800f688 <TIM_Base_SetConfig+0x1ec>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d01b      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4a44      	ldr	r2, [pc, #272]	@ (800f68c <TIM_Base_SetConfig+0x1f0>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d017      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4a43      	ldr	r2, [pc, #268]	@ (800f690 <TIM_Base_SetConfig+0x1f4>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d013      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4a42      	ldr	r2, [pc, #264]	@ (800f694 <TIM_Base_SetConfig+0x1f8>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d00f      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4a41      	ldr	r2, [pc, #260]	@ (800f698 <TIM_Base_SetConfig+0x1fc>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d00b      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4a40      	ldr	r2, [pc, #256]	@ (800f69c <TIM_Base_SetConfig+0x200>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d007      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4a3f      	ldr	r2, [pc, #252]	@ (800f6a0 <TIM_Base_SetConfig+0x204>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d003      	beq.n	800f5ae <TIM_Base_SetConfig+0x112>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4a3e      	ldr	r2, [pc, #248]	@ (800f6a4 <TIM_Base_SetConfig+0x208>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d108      	bne.n	800f5c0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f5b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	695b      	ldr	r3, [r3, #20]
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	689a      	ldr	r2, [r3, #8]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4a20      	ldr	r2, [pc, #128]	@ (800f668 <TIM_Base_SetConfig+0x1cc>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d023      	beq.n	800f634 <TIM_Base_SetConfig+0x198>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4a1f      	ldr	r2, [pc, #124]	@ (800f66c <TIM_Base_SetConfig+0x1d0>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d01f      	beq.n	800f634 <TIM_Base_SetConfig+0x198>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4a24      	ldr	r2, [pc, #144]	@ (800f688 <TIM_Base_SetConfig+0x1ec>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d01b      	beq.n	800f634 <TIM_Base_SetConfig+0x198>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4a23      	ldr	r2, [pc, #140]	@ (800f68c <TIM_Base_SetConfig+0x1f0>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d017      	beq.n	800f634 <TIM_Base_SetConfig+0x198>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4a22      	ldr	r2, [pc, #136]	@ (800f690 <TIM_Base_SetConfig+0x1f4>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d013      	beq.n	800f634 <TIM_Base_SetConfig+0x198>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	4a21      	ldr	r2, [pc, #132]	@ (800f694 <TIM_Base_SetConfig+0x1f8>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d00f      	beq.n	800f634 <TIM_Base_SetConfig+0x198>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	4a20      	ldr	r2, [pc, #128]	@ (800f698 <TIM_Base_SetConfig+0x1fc>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d00b      	beq.n	800f634 <TIM_Base_SetConfig+0x198>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4a1f      	ldr	r2, [pc, #124]	@ (800f69c <TIM_Base_SetConfig+0x200>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d007      	beq.n	800f634 <TIM_Base_SetConfig+0x198>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4a1e      	ldr	r2, [pc, #120]	@ (800f6a0 <TIM_Base_SetConfig+0x204>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d003      	beq.n	800f634 <TIM_Base_SetConfig+0x198>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4a1d      	ldr	r2, [pc, #116]	@ (800f6a4 <TIM_Base_SetConfig+0x208>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d103      	bne.n	800f63c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	691a      	ldr	r2, [r3, #16]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2201      	movs	r2, #1
 800f640:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	f003 0301 	and.w	r3, r3, #1
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d105      	bne.n	800f65a <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	691b      	ldr	r3, [r3, #16]
 800f652:	f023 0201 	bic.w	r2, r3, #1
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	611a      	str	r2, [r3, #16]
  }
}
 800f65a:	bf00      	nop
 800f65c:	3714      	adds	r7, #20
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr
 800f666:	bf00      	nop
 800f668:	40012c00 	.word	0x40012c00
 800f66c:	50012c00 	.word	0x50012c00
 800f670:	40000400 	.word	0x40000400
 800f674:	50000400 	.word	0x50000400
 800f678:	40000800 	.word	0x40000800
 800f67c:	50000800 	.word	0x50000800
 800f680:	40000c00 	.word	0x40000c00
 800f684:	50000c00 	.word	0x50000c00
 800f688:	40013400 	.word	0x40013400
 800f68c:	50013400 	.word	0x50013400
 800f690:	40014000 	.word	0x40014000
 800f694:	50014000 	.word	0x50014000
 800f698:	40014400 	.word	0x40014400
 800f69c:	50014400 	.word	0x50014400
 800f6a0:	40014800 	.word	0x40014800
 800f6a4:	50014800 	.word	0x50014800

0800f6a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b087      	sub	sp, #28
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a1b      	ldr	r3, [r3, #32]
 800f6b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6a1b      	ldr	r3, [r3, #32]
 800f6bc:	f023 0201 	bic.w	r2, r3, #1
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	699b      	ldr	r3, [r3, #24]
 800f6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f6d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f023 0303 	bic.w	r3, r3, #3
 800f6e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	68fa      	ldr	r2, [r7, #12]
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	f023 0302 	bic.w	r3, r3, #2
 800f6f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	697a      	ldr	r2, [r7, #20]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4a40      	ldr	r2, [pc, #256]	@ (800f804 <TIM_OC1_SetConfig+0x15c>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d023      	beq.n	800f750 <TIM_OC1_SetConfig+0xa8>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4a3f      	ldr	r2, [pc, #252]	@ (800f808 <TIM_OC1_SetConfig+0x160>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d01f      	beq.n	800f750 <TIM_OC1_SetConfig+0xa8>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4a3e      	ldr	r2, [pc, #248]	@ (800f80c <TIM_OC1_SetConfig+0x164>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d01b      	beq.n	800f750 <TIM_OC1_SetConfig+0xa8>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4a3d      	ldr	r2, [pc, #244]	@ (800f810 <TIM_OC1_SetConfig+0x168>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d017      	beq.n	800f750 <TIM_OC1_SetConfig+0xa8>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a3c      	ldr	r2, [pc, #240]	@ (800f814 <TIM_OC1_SetConfig+0x16c>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d013      	beq.n	800f750 <TIM_OC1_SetConfig+0xa8>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4a3b      	ldr	r2, [pc, #236]	@ (800f818 <TIM_OC1_SetConfig+0x170>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d00f      	beq.n	800f750 <TIM_OC1_SetConfig+0xa8>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	4a3a      	ldr	r2, [pc, #232]	@ (800f81c <TIM_OC1_SetConfig+0x174>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d00b      	beq.n	800f750 <TIM_OC1_SetConfig+0xa8>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4a39      	ldr	r2, [pc, #228]	@ (800f820 <TIM_OC1_SetConfig+0x178>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d007      	beq.n	800f750 <TIM_OC1_SetConfig+0xa8>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4a38      	ldr	r2, [pc, #224]	@ (800f824 <TIM_OC1_SetConfig+0x17c>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d003      	beq.n	800f750 <TIM_OC1_SetConfig+0xa8>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4a37      	ldr	r2, [pc, #220]	@ (800f828 <TIM_OC1_SetConfig+0x180>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d10c      	bne.n	800f76a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	f023 0308 	bic.w	r3, r3, #8
 800f756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	68db      	ldr	r3, [r3, #12]
 800f75c:	697a      	ldr	r2, [r7, #20]
 800f75e:	4313      	orrs	r3, r2
 800f760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	f023 0304 	bic.w	r3, r3, #4
 800f768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	4a25      	ldr	r2, [pc, #148]	@ (800f804 <TIM_OC1_SetConfig+0x15c>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d023      	beq.n	800f7ba <TIM_OC1_SetConfig+0x112>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4a24      	ldr	r2, [pc, #144]	@ (800f808 <TIM_OC1_SetConfig+0x160>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d01f      	beq.n	800f7ba <TIM_OC1_SetConfig+0x112>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4a23      	ldr	r2, [pc, #140]	@ (800f80c <TIM_OC1_SetConfig+0x164>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d01b      	beq.n	800f7ba <TIM_OC1_SetConfig+0x112>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4a22      	ldr	r2, [pc, #136]	@ (800f810 <TIM_OC1_SetConfig+0x168>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d017      	beq.n	800f7ba <TIM_OC1_SetConfig+0x112>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4a21      	ldr	r2, [pc, #132]	@ (800f814 <TIM_OC1_SetConfig+0x16c>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d013      	beq.n	800f7ba <TIM_OC1_SetConfig+0x112>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4a20      	ldr	r2, [pc, #128]	@ (800f818 <TIM_OC1_SetConfig+0x170>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d00f      	beq.n	800f7ba <TIM_OC1_SetConfig+0x112>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	4a1f      	ldr	r2, [pc, #124]	@ (800f81c <TIM_OC1_SetConfig+0x174>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d00b      	beq.n	800f7ba <TIM_OC1_SetConfig+0x112>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	4a1e      	ldr	r2, [pc, #120]	@ (800f820 <TIM_OC1_SetConfig+0x178>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d007      	beq.n	800f7ba <TIM_OC1_SetConfig+0x112>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4a1d      	ldr	r2, [pc, #116]	@ (800f824 <TIM_OC1_SetConfig+0x17c>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d003      	beq.n	800f7ba <TIM_OC1_SetConfig+0x112>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	4a1c      	ldr	r2, [pc, #112]	@ (800f828 <TIM_OC1_SetConfig+0x180>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d111      	bne.n	800f7de <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f7c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f7c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	695b      	ldr	r3, [r3, #20]
 800f7ce:	693a      	ldr	r2, [r7, #16]
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	699b      	ldr	r3, [r3, #24]
 800f7d8:	693a      	ldr	r2, [r7, #16]
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	693a      	ldr	r2, [r7, #16]
 800f7e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	68fa      	ldr	r2, [r7, #12]
 800f7e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	685a      	ldr	r2, [r3, #4]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	697a      	ldr	r2, [r7, #20]
 800f7f6:	621a      	str	r2, [r3, #32]
}
 800f7f8:	bf00      	nop
 800f7fa:	371c      	adds	r7, #28
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr
 800f804:	40012c00 	.word	0x40012c00
 800f808:	50012c00 	.word	0x50012c00
 800f80c:	40013400 	.word	0x40013400
 800f810:	50013400 	.word	0x50013400
 800f814:	40014000 	.word	0x40014000
 800f818:	50014000 	.word	0x50014000
 800f81c:	40014400 	.word	0x40014400
 800f820:	50014400 	.word	0x50014400
 800f824:	40014800 	.word	0x40014800
 800f828:	50014800 	.word	0x50014800

0800f82c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b087      	sub	sp, #28
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a1b      	ldr	r3, [r3, #32]
 800f83a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6a1b      	ldr	r3, [r3, #32]
 800f840:	f023 0210 	bic.w	r2, r3, #16
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f85a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	021b      	lsls	r3, r3, #8
 800f86e:	68fa      	ldr	r2, [r7, #12]
 800f870:	4313      	orrs	r3, r2
 800f872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	f023 0320 	bic.w	r3, r3, #32
 800f87a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	011b      	lsls	r3, r3, #4
 800f882:	697a      	ldr	r2, [r7, #20]
 800f884:	4313      	orrs	r3, r2
 800f886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4a36      	ldr	r2, [pc, #216]	@ (800f964 <TIM_OC2_SetConfig+0x138>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d00b      	beq.n	800f8a8 <TIM_OC2_SetConfig+0x7c>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4a35      	ldr	r2, [pc, #212]	@ (800f968 <TIM_OC2_SetConfig+0x13c>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d007      	beq.n	800f8a8 <TIM_OC2_SetConfig+0x7c>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a34      	ldr	r2, [pc, #208]	@ (800f96c <TIM_OC2_SetConfig+0x140>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d003      	beq.n	800f8a8 <TIM_OC2_SetConfig+0x7c>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4a33      	ldr	r2, [pc, #204]	@ (800f970 <TIM_OC2_SetConfig+0x144>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d10d      	bne.n	800f8c4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f8ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	011b      	lsls	r3, r3, #4
 800f8b6:	697a      	ldr	r2, [r7, #20]
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4a27      	ldr	r2, [pc, #156]	@ (800f964 <TIM_OC2_SetConfig+0x138>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d023      	beq.n	800f914 <TIM_OC2_SetConfig+0xe8>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4a26      	ldr	r2, [pc, #152]	@ (800f968 <TIM_OC2_SetConfig+0x13c>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d01f      	beq.n	800f914 <TIM_OC2_SetConfig+0xe8>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4a25      	ldr	r2, [pc, #148]	@ (800f96c <TIM_OC2_SetConfig+0x140>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d01b      	beq.n	800f914 <TIM_OC2_SetConfig+0xe8>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4a24      	ldr	r2, [pc, #144]	@ (800f970 <TIM_OC2_SetConfig+0x144>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d017      	beq.n	800f914 <TIM_OC2_SetConfig+0xe8>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	4a23      	ldr	r2, [pc, #140]	@ (800f974 <TIM_OC2_SetConfig+0x148>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d013      	beq.n	800f914 <TIM_OC2_SetConfig+0xe8>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	4a22      	ldr	r2, [pc, #136]	@ (800f978 <TIM_OC2_SetConfig+0x14c>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d00f      	beq.n	800f914 <TIM_OC2_SetConfig+0xe8>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4a21      	ldr	r2, [pc, #132]	@ (800f97c <TIM_OC2_SetConfig+0x150>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d00b      	beq.n	800f914 <TIM_OC2_SetConfig+0xe8>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	4a20      	ldr	r2, [pc, #128]	@ (800f980 <TIM_OC2_SetConfig+0x154>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d007      	beq.n	800f914 <TIM_OC2_SetConfig+0xe8>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4a1f      	ldr	r2, [pc, #124]	@ (800f984 <TIM_OC2_SetConfig+0x158>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d003      	beq.n	800f914 <TIM_OC2_SetConfig+0xe8>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4a1e      	ldr	r2, [pc, #120]	@ (800f988 <TIM_OC2_SetConfig+0x15c>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d113      	bne.n	800f93c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f91a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	695b      	ldr	r3, [r3, #20]
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	693a      	ldr	r2, [r7, #16]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	699b      	ldr	r3, [r3, #24]
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	693a      	ldr	r2, [r7, #16]
 800f938:	4313      	orrs	r3, r2
 800f93a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	68fa      	ldr	r2, [r7, #12]
 800f946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	685a      	ldr	r2, [r3, #4]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	697a      	ldr	r2, [r7, #20]
 800f954:	621a      	str	r2, [r3, #32]
}
 800f956:	bf00      	nop
 800f958:	371c      	adds	r7, #28
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop
 800f964:	40012c00 	.word	0x40012c00
 800f968:	50012c00 	.word	0x50012c00
 800f96c:	40013400 	.word	0x40013400
 800f970:	50013400 	.word	0x50013400
 800f974:	40014000 	.word	0x40014000
 800f978:	50014000 	.word	0x50014000
 800f97c:	40014400 	.word	0x40014400
 800f980:	50014400 	.word	0x50014400
 800f984:	40014800 	.word	0x40014800
 800f988:	50014800 	.word	0x50014800

0800f98c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b087      	sub	sp, #28
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6a1b      	ldr	r3, [r3, #32]
 800f99a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6a1b      	ldr	r3, [r3, #32]
 800f9a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	69db      	ldr	r3, [r3, #28]
 800f9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f9ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f9be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f023 0303 	bic.w	r3, r3, #3
 800f9c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	68fa      	ldr	r2, [r7, #12]
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f9d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	689b      	ldr	r3, [r3, #8]
 800f9de:	021b      	lsls	r3, r3, #8
 800f9e0:	697a      	ldr	r2, [r7, #20]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4a35      	ldr	r2, [pc, #212]	@ (800fac0 <TIM_OC3_SetConfig+0x134>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d00b      	beq.n	800fa06 <TIM_OC3_SetConfig+0x7a>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	4a34      	ldr	r2, [pc, #208]	@ (800fac4 <TIM_OC3_SetConfig+0x138>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d007      	beq.n	800fa06 <TIM_OC3_SetConfig+0x7a>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	4a33      	ldr	r2, [pc, #204]	@ (800fac8 <TIM_OC3_SetConfig+0x13c>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d003      	beq.n	800fa06 <TIM_OC3_SetConfig+0x7a>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	4a32      	ldr	r2, [pc, #200]	@ (800facc <TIM_OC3_SetConfig+0x140>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d10d      	bne.n	800fa22 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fa0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	021b      	lsls	r3, r3, #8
 800fa14:	697a      	ldr	r2, [r7, #20]
 800fa16:	4313      	orrs	r3, r2
 800fa18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fa20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a26      	ldr	r2, [pc, #152]	@ (800fac0 <TIM_OC3_SetConfig+0x134>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d023      	beq.n	800fa72 <TIM_OC3_SetConfig+0xe6>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4a25      	ldr	r2, [pc, #148]	@ (800fac4 <TIM_OC3_SetConfig+0x138>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d01f      	beq.n	800fa72 <TIM_OC3_SetConfig+0xe6>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4a24      	ldr	r2, [pc, #144]	@ (800fac8 <TIM_OC3_SetConfig+0x13c>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d01b      	beq.n	800fa72 <TIM_OC3_SetConfig+0xe6>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a23      	ldr	r2, [pc, #140]	@ (800facc <TIM_OC3_SetConfig+0x140>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d017      	beq.n	800fa72 <TIM_OC3_SetConfig+0xe6>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4a22      	ldr	r2, [pc, #136]	@ (800fad0 <TIM_OC3_SetConfig+0x144>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d013      	beq.n	800fa72 <TIM_OC3_SetConfig+0xe6>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4a21      	ldr	r2, [pc, #132]	@ (800fad4 <TIM_OC3_SetConfig+0x148>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d00f      	beq.n	800fa72 <TIM_OC3_SetConfig+0xe6>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4a20      	ldr	r2, [pc, #128]	@ (800fad8 <TIM_OC3_SetConfig+0x14c>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d00b      	beq.n	800fa72 <TIM_OC3_SetConfig+0xe6>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4a1f      	ldr	r2, [pc, #124]	@ (800fadc <TIM_OC3_SetConfig+0x150>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d007      	beq.n	800fa72 <TIM_OC3_SetConfig+0xe6>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a1e      	ldr	r2, [pc, #120]	@ (800fae0 <TIM_OC3_SetConfig+0x154>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d003      	beq.n	800fa72 <TIM_OC3_SetConfig+0xe6>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4a1d      	ldr	r2, [pc, #116]	@ (800fae4 <TIM_OC3_SetConfig+0x158>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d113      	bne.n	800fa9a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fa80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	011b      	lsls	r3, r3, #4
 800fa88:	693a      	ldr	r2, [r7, #16]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	699b      	ldr	r3, [r3, #24]
 800fa92:	011b      	lsls	r3, r3, #4
 800fa94:	693a      	ldr	r2, [r7, #16]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	693a      	ldr	r2, [r7, #16]
 800fa9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	68fa      	ldr	r2, [r7, #12]
 800faa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	685a      	ldr	r2, [r3, #4]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	697a      	ldr	r2, [r7, #20]
 800fab2:	621a      	str	r2, [r3, #32]
}
 800fab4:	bf00      	nop
 800fab6:	371c      	adds	r7, #28
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	40012c00 	.word	0x40012c00
 800fac4:	50012c00 	.word	0x50012c00
 800fac8:	40013400 	.word	0x40013400
 800facc:	50013400 	.word	0x50013400
 800fad0:	40014000 	.word	0x40014000
 800fad4:	50014000 	.word	0x50014000
 800fad8:	40014400 	.word	0x40014400
 800fadc:	50014400 	.word	0x50014400
 800fae0:	40014800 	.word	0x40014800
 800fae4:	50014800 	.word	0x50014800

0800fae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fae8:	b480      	push	{r7}
 800faea:	b087      	sub	sp, #28
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a1b      	ldr	r3, [r3, #32]
 800faf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6a1b      	ldr	r3, [r3, #32]
 800fafc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	69db      	ldr	r3, [r3, #28]
 800fb0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fb16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fb22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	021b      	lsls	r3, r3, #8
 800fb2a:	68fa      	ldr	r2, [r7, #12]
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fb36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	689b      	ldr	r3, [r3, #8]
 800fb3c:	031b      	lsls	r3, r3, #12
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a36      	ldr	r2, [pc, #216]	@ (800fc20 <TIM_OC4_SetConfig+0x138>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d00b      	beq.n	800fb64 <TIM_OC4_SetConfig+0x7c>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a35      	ldr	r2, [pc, #212]	@ (800fc24 <TIM_OC4_SetConfig+0x13c>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d007      	beq.n	800fb64 <TIM_OC4_SetConfig+0x7c>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a34      	ldr	r2, [pc, #208]	@ (800fc28 <TIM_OC4_SetConfig+0x140>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d003      	beq.n	800fb64 <TIM_OC4_SetConfig+0x7c>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a33      	ldr	r2, [pc, #204]	@ (800fc2c <TIM_OC4_SetConfig+0x144>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d10d      	bne.n	800fb80 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fb6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	031b      	lsls	r3, r3, #12
 800fb72:	697a      	ldr	r2, [r7, #20]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fb7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	4a27      	ldr	r2, [pc, #156]	@ (800fc20 <TIM_OC4_SetConfig+0x138>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d023      	beq.n	800fbd0 <TIM_OC4_SetConfig+0xe8>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	4a26      	ldr	r2, [pc, #152]	@ (800fc24 <TIM_OC4_SetConfig+0x13c>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d01f      	beq.n	800fbd0 <TIM_OC4_SetConfig+0xe8>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4a25      	ldr	r2, [pc, #148]	@ (800fc28 <TIM_OC4_SetConfig+0x140>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d01b      	beq.n	800fbd0 <TIM_OC4_SetConfig+0xe8>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	4a24      	ldr	r2, [pc, #144]	@ (800fc2c <TIM_OC4_SetConfig+0x144>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d017      	beq.n	800fbd0 <TIM_OC4_SetConfig+0xe8>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	4a23      	ldr	r2, [pc, #140]	@ (800fc30 <TIM_OC4_SetConfig+0x148>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d013      	beq.n	800fbd0 <TIM_OC4_SetConfig+0xe8>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a22      	ldr	r2, [pc, #136]	@ (800fc34 <TIM_OC4_SetConfig+0x14c>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d00f      	beq.n	800fbd0 <TIM_OC4_SetConfig+0xe8>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4a21      	ldr	r2, [pc, #132]	@ (800fc38 <TIM_OC4_SetConfig+0x150>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d00b      	beq.n	800fbd0 <TIM_OC4_SetConfig+0xe8>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a20      	ldr	r2, [pc, #128]	@ (800fc3c <TIM_OC4_SetConfig+0x154>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d007      	beq.n	800fbd0 <TIM_OC4_SetConfig+0xe8>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a1f      	ldr	r2, [pc, #124]	@ (800fc40 <TIM_OC4_SetConfig+0x158>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d003      	beq.n	800fbd0 <TIM_OC4_SetConfig+0xe8>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4a1e      	ldr	r2, [pc, #120]	@ (800fc44 <TIM_OC4_SetConfig+0x15c>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d113      	bne.n	800fbf8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fbd6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fbde:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	695b      	ldr	r3, [r3, #20]
 800fbe4:	019b      	lsls	r3, r3, #6
 800fbe6:	693a      	ldr	r2, [r7, #16]
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	699b      	ldr	r3, [r3, #24]
 800fbf0:	019b      	lsls	r3, r3, #6
 800fbf2:	693a      	ldr	r2, [r7, #16]
 800fbf4:	4313      	orrs	r3, r2
 800fbf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	693a      	ldr	r2, [r7, #16]
 800fbfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	68fa      	ldr	r2, [r7, #12]
 800fc02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	685a      	ldr	r2, [r3, #4]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	697a      	ldr	r2, [r7, #20]
 800fc10:	621a      	str	r2, [r3, #32]
}
 800fc12:	bf00      	nop
 800fc14:	371c      	adds	r7, #28
 800fc16:	46bd      	mov	sp, r7
 800fc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1c:	4770      	bx	lr
 800fc1e:	bf00      	nop
 800fc20:	40012c00 	.word	0x40012c00
 800fc24:	50012c00 	.word	0x50012c00
 800fc28:	40013400 	.word	0x40013400
 800fc2c:	50013400 	.word	0x50013400
 800fc30:	40014000 	.word	0x40014000
 800fc34:	50014000 	.word	0x50014000
 800fc38:	40014400 	.word	0x40014400
 800fc3c:	50014400 	.word	0x50014400
 800fc40:	40014800 	.word	0x40014800
 800fc44:	50014800 	.word	0x50014800

0800fc48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b087      	sub	sp, #28
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6a1b      	ldr	r3, [r3, #32]
 800fc56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6a1b      	ldr	r3, [r3, #32]
 800fc5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fc76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	68fa      	ldr	r2, [r7, #12]
 800fc82:	4313      	orrs	r3, r2
 800fc84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fc8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	041b      	lsls	r3, r3, #16
 800fc94:	693a      	ldr	r2, [r7, #16]
 800fc96:	4313      	orrs	r3, r2
 800fc98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4a21      	ldr	r2, [pc, #132]	@ (800fd24 <TIM_OC5_SetConfig+0xdc>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d023      	beq.n	800fcea <TIM_OC5_SetConfig+0xa2>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	4a20      	ldr	r2, [pc, #128]	@ (800fd28 <TIM_OC5_SetConfig+0xe0>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d01f      	beq.n	800fcea <TIM_OC5_SetConfig+0xa2>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4a1f      	ldr	r2, [pc, #124]	@ (800fd2c <TIM_OC5_SetConfig+0xe4>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d01b      	beq.n	800fcea <TIM_OC5_SetConfig+0xa2>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4a1e      	ldr	r2, [pc, #120]	@ (800fd30 <TIM_OC5_SetConfig+0xe8>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d017      	beq.n	800fcea <TIM_OC5_SetConfig+0xa2>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4a1d      	ldr	r2, [pc, #116]	@ (800fd34 <TIM_OC5_SetConfig+0xec>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d013      	beq.n	800fcea <TIM_OC5_SetConfig+0xa2>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	4a1c      	ldr	r2, [pc, #112]	@ (800fd38 <TIM_OC5_SetConfig+0xf0>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d00f      	beq.n	800fcea <TIM_OC5_SetConfig+0xa2>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4a1b      	ldr	r2, [pc, #108]	@ (800fd3c <TIM_OC5_SetConfig+0xf4>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d00b      	beq.n	800fcea <TIM_OC5_SetConfig+0xa2>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4a1a      	ldr	r2, [pc, #104]	@ (800fd40 <TIM_OC5_SetConfig+0xf8>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d007      	beq.n	800fcea <TIM_OC5_SetConfig+0xa2>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4a19      	ldr	r2, [pc, #100]	@ (800fd44 <TIM_OC5_SetConfig+0xfc>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d003      	beq.n	800fcea <TIM_OC5_SetConfig+0xa2>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	4a18      	ldr	r2, [pc, #96]	@ (800fd48 <TIM_OC5_SetConfig+0x100>)
 800fce6:	4293      	cmp	r3, r2
 800fce8:	d109      	bne.n	800fcfe <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fcf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	695b      	ldr	r3, [r3, #20]
 800fcf6:	021b      	lsls	r3, r3, #8
 800fcf8:	697a      	ldr	r2, [r7, #20]
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	697a      	ldr	r2, [r7, #20]
 800fd02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	68fa      	ldr	r2, [r7, #12]
 800fd08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	685a      	ldr	r2, [r3, #4]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	693a      	ldr	r2, [r7, #16]
 800fd16:	621a      	str	r2, [r3, #32]
}
 800fd18:	bf00      	nop
 800fd1a:	371c      	adds	r7, #28
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	40012c00 	.word	0x40012c00
 800fd28:	50012c00 	.word	0x50012c00
 800fd2c:	40013400 	.word	0x40013400
 800fd30:	50013400 	.word	0x50013400
 800fd34:	40014000 	.word	0x40014000
 800fd38:	50014000 	.word	0x50014000
 800fd3c:	40014400 	.word	0x40014400
 800fd40:	50014400 	.word	0x50014400
 800fd44:	40014800 	.word	0x40014800
 800fd48:	50014800 	.word	0x50014800

0800fd4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b087      	sub	sp, #28
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6a1b      	ldr	r3, [r3, #32]
 800fd5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a1b      	ldr	r3, [r3, #32]
 800fd60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fd7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	021b      	lsls	r3, r3, #8
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	4313      	orrs	r3, r2
 800fd8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fd92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	051b      	lsls	r3, r3, #20
 800fd9a:	693a      	ldr	r2, [r7, #16]
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	4a22      	ldr	r2, [pc, #136]	@ (800fe2c <TIM_OC6_SetConfig+0xe0>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d023      	beq.n	800fdf0 <TIM_OC6_SetConfig+0xa4>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	4a21      	ldr	r2, [pc, #132]	@ (800fe30 <TIM_OC6_SetConfig+0xe4>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d01f      	beq.n	800fdf0 <TIM_OC6_SetConfig+0xa4>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	4a20      	ldr	r2, [pc, #128]	@ (800fe34 <TIM_OC6_SetConfig+0xe8>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d01b      	beq.n	800fdf0 <TIM_OC6_SetConfig+0xa4>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	4a1f      	ldr	r2, [pc, #124]	@ (800fe38 <TIM_OC6_SetConfig+0xec>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d017      	beq.n	800fdf0 <TIM_OC6_SetConfig+0xa4>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4a1e      	ldr	r2, [pc, #120]	@ (800fe3c <TIM_OC6_SetConfig+0xf0>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d013      	beq.n	800fdf0 <TIM_OC6_SetConfig+0xa4>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4a1d      	ldr	r2, [pc, #116]	@ (800fe40 <TIM_OC6_SetConfig+0xf4>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d00f      	beq.n	800fdf0 <TIM_OC6_SetConfig+0xa4>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4a1c      	ldr	r2, [pc, #112]	@ (800fe44 <TIM_OC6_SetConfig+0xf8>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d00b      	beq.n	800fdf0 <TIM_OC6_SetConfig+0xa4>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	4a1b      	ldr	r2, [pc, #108]	@ (800fe48 <TIM_OC6_SetConfig+0xfc>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d007      	beq.n	800fdf0 <TIM_OC6_SetConfig+0xa4>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	4a1a      	ldr	r2, [pc, #104]	@ (800fe4c <TIM_OC6_SetConfig+0x100>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d003      	beq.n	800fdf0 <TIM_OC6_SetConfig+0xa4>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	4a19      	ldr	r2, [pc, #100]	@ (800fe50 <TIM_OC6_SetConfig+0x104>)
 800fdec:	4293      	cmp	r3, r2
 800fdee:	d109      	bne.n	800fe04 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fdf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	695b      	ldr	r3, [r3, #20]
 800fdfc:	029b      	lsls	r3, r3, #10
 800fdfe:	697a      	ldr	r2, [r7, #20]
 800fe00:	4313      	orrs	r3, r2
 800fe02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	68fa      	ldr	r2, [r7, #12]
 800fe0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	685a      	ldr	r2, [r3, #4]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	693a      	ldr	r2, [r7, #16]
 800fe1c:	621a      	str	r2, [r3, #32]
}
 800fe1e:	bf00      	nop
 800fe20:	371c      	adds	r7, #28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	40012c00 	.word	0x40012c00
 800fe30:	50012c00 	.word	0x50012c00
 800fe34:	40013400 	.word	0x40013400
 800fe38:	50013400 	.word	0x50013400
 800fe3c:	40014000 	.word	0x40014000
 800fe40:	50014000 	.word	0x50014000
 800fe44:	40014400 	.word	0x40014400
 800fe48:	50014400 	.word	0x50014400
 800fe4c:	40014800 	.word	0x40014800
 800fe50:	50014800 	.word	0x50014800

0800fe54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b087      	sub	sp, #28
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	6a1b      	ldr	r3, [r3, #32]
 800fe64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6a1b      	ldr	r3, [r3, #32]
 800fe6a:	f023 0201 	bic.w	r2, r3, #1
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	699b      	ldr	r3, [r3, #24]
 800fe76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fe7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	011b      	lsls	r3, r3, #4
 800fe84:	693a      	ldr	r2, [r7, #16]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	f023 030a 	bic.w	r3, r3, #10
 800fe90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe92:	697a      	ldr	r2, [r7, #20]
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	4313      	orrs	r3, r2
 800fe98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	693a      	ldr	r2, [r7, #16]
 800fe9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	697a      	ldr	r2, [r7, #20]
 800fea4:	621a      	str	r2, [r3, #32]
}
 800fea6:	bf00      	nop
 800fea8:	371c      	adds	r7, #28
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr

0800feb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800feb2:	b480      	push	{r7}
 800feb4:	b087      	sub	sp, #28
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	60f8      	str	r0, [r7, #12]
 800feba:	60b9      	str	r1, [r7, #8]
 800febc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	6a1b      	ldr	r3, [r3, #32]
 800fec2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6a1b      	ldr	r3, [r3, #32]
 800fec8:	f023 0210 	bic.w	r2, r3, #16
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	699b      	ldr	r3, [r3, #24]
 800fed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fedc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	031b      	lsls	r3, r3, #12
 800fee2:	693a      	ldr	r2, [r7, #16]
 800fee4:	4313      	orrs	r3, r2
 800fee6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800feee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	011b      	lsls	r3, r3, #4
 800fef4:	697a      	ldr	r2, [r7, #20]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	693a      	ldr	r2, [r7, #16]
 800fefe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	697a      	ldr	r2, [r7, #20]
 800ff04:	621a      	str	r2, [r3, #32]
}
 800ff06:	bf00      	nop
 800ff08:	371c      	adds	r7, #28
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff10:	4770      	bx	lr

0800ff12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ff12:	b480      	push	{r7}
 800ff14:	b085      	sub	sp, #20
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ff28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff2e:	683a      	ldr	r2, [r7, #0]
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	4313      	orrs	r3, r2
 800ff34:	f043 0307 	orr.w	r3, r3, #7
 800ff38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	68fa      	ldr	r2, [r7, #12]
 800ff3e:	609a      	str	r2, [r3, #8]
}
 800ff40:	bf00      	nop
 800ff42:	3714      	adds	r7, #20
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b087      	sub	sp, #28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
 800ff58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ff66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	021a      	lsls	r2, r3, #8
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	431a      	orrs	r2, r3
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	4313      	orrs	r3, r2
 800ff74:	697a      	ldr	r2, [r7, #20]
 800ff76:	4313      	orrs	r3, r2
 800ff78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	697a      	ldr	r2, [r7, #20]
 800ff7e:	609a      	str	r2, [r3, #8]
}
 800ff80:	bf00      	nop
 800ff82:	371c      	adds	r7, #28
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b085      	sub	sp, #20
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d101      	bne.n	800ffa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ffa0:	2302      	movs	r3, #2
 800ffa2:	e097      	b.n	80100d4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2202      	movs	r2, #2
 800ffb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4a45      	ldr	r2, [pc, #276]	@ (80100e0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d00e      	beq.n	800ffec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	4a44      	ldr	r2, [pc, #272]	@ (80100e4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d009      	beq.n	800ffec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a42      	ldr	r2, [pc, #264]	@ (80100e8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d004      	beq.n	800ffec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4a41      	ldr	r2, [pc, #260]	@ (80100ec <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d108      	bne.n	800fffe <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fff2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	4313      	orrs	r3, r2
 800fffc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010008:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	68fa      	ldr	r2, [r7, #12]
 8010010:	4313      	orrs	r3, r2
 8010012:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	68fa      	ldr	r2, [r7, #12]
 801001a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4a2f      	ldr	r2, [pc, #188]	@ (80100e0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d040      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a2e      	ldr	r2, [pc, #184]	@ (80100e4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d03b      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010038:	d036      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010042:	d031      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a29      	ldr	r2, [pc, #164]	@ (80100f0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d02c      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4a28      	ldr	r2, [pc, #160]	@ (80100f4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d027      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a26      	ldr	r2, [pc, #152]	@ (80100f8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 801005e:	4293      	cmp	r3, r2
 8010060:	d022      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	4a25      	ldr	r2, [pc, #148]	@ (80100fc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010068:	4293      	cmp	r3, r2
 801006a:	d01d      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4a23      	ldr	r2, [pc, #140]	@ (8010100 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d018      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a22      	ldr	r2, [pc, #136]	@ (8010104 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d013      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	4a18      	ldr	r2, [pc, #96]	@ (80100e8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d00e      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	4a17      	ldr	r2, [pc, #92]	@ (80100ec <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d009      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4a1b      	ldr	r2, [pc, #108]	@ (8010108 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d004      	beq.n	80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	4a1a      	ldr	r2, [pc, #104]	@ (801010c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80100a4:	4293      	cmp	r3, r2
 80100a6:	d10c      	bne.n	80100c2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80100ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	689b      	ldr	r3, [r3, #8]
 80100b4:	68ba      	ldr	r2, [r7, #8]
 80100b6:	4313      	orrs	r3, r2
 80100b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	68ba      	ldr	r2, [r7, #8]
 80100c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2201      	movs	r2, #1
 80100c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2200      	movs	r2, #0
 80100ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80100d2:	2300      	movs	r3, #0
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3714      	adds	r7, #20
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr
 80100e0:	40012c00 	.word	0x40012c00
 80100e4:	50012c00 	.word	0x50012c00
 80100e8:	40013400 	.word	0x40013400
 80100ec:	50013400 	.word	0x50013400
 80100f0:	40000400 	.word	0x40000400
 80100f4:	50000400 	.word	0x50000400
 80100f8:	40000800 	.word	0x40000800
 80100fc:	50000800 	.word	0x50000800
 8010100:	40000c00 	.word	0x40000c00
 8010104:	50000c00 	.word	0x50000c00
 8010108:	40014000 	.word	0x40014000
 801010c:	50014000 	.word	0x50014000

08010110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b082      	sub	sp, #8
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d101      	bne.n	8010122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801011e:	2301      	movs	r3, #1
 8010120:	e042      	b.n	80101a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010128:	2b00      	cmp	r3, #0
 801012a:	d106      	bne.n	801013a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2200      	movs	r2, #0
 8010130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7f2 f907 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2224      	movs	r2, #36	@ 0x24
 801013e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f022 0201 	bic.w	r2, r2, #1
 8010150:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010156:	2b00      	cmp	r3, #0
 8010158:	d002      	beq.n	8010160 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f000 fd02 	bl	8010b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f000 fb51 	bl	8010808 <UART_SetConfig>
 8010166:	4603      	mov	r3, r0
 8010168:	2b01      	cmp	r3, #1
 801016a:	d101      	bne.n	8010170 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801016c:	2301      	movs	r3, #1
 801016e:	e01b      	b.n	80101a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	685a      	ldr	r2, [r3, #4]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801017e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	689a      	ldr	r2, [r3, #8]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801018e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f042 0201 	orr.w	r2, r2, #1
 801019e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 fd81 	bl	8010ca8 <UART_CheckIdleState>
 80101a6:	4603      	mov	r3, r0
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3708      	adds	r7, #8
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b0ba      	sub	sp, #232	@ 0xe8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	69db      	ldr	r3, [r3, #28]
 80101be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80101d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80101da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80101de:	4013      	ands	r3, r2
 80101e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80101e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d11b      	bne.n	8010224 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80101ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101f0:	f003 0320 	and.w	r3, r3, #32
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d015      	beq.n	8010224 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80101f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101fc:	f003 0320 	and.w	r3, r3, #32
 8010200:	2b00      	cmp	r3, #0
 8010202:	d105      	bne.n	8010210 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801020c:	2b00      	cmp	r3, #0
 801020e:	d009      	beq.n	8010224 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010214:	2b00      	cmp	r3, #0
 8010216:	f000 82cb 	beq.w	80107b0 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	4798      	blx	r3
      }
      return;
 8010222:	e2c5      	b.n	80107b0 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010228:	2b00      	cmp	r3, #0
 801022a:	f000 8123 	beq.w	8010474 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801022e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010232:	4b8d      	ldr	r3, [pc, #564]	@ (8010468 <HAL_UART_IRQHandler+0x2b8>)
 8010234:	4013      	ands	r3, r2
 8010236:	2b00      	cmp	r3, #0
 8010238:	d106      	bne.n	8010248 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801023a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801023e:	4b8b      	ldr	r3, [pc, #556]	@ (801046c <HAL_UART_IRQHandler+0x2bc>)
 8010240:	4013      	ands	r3, r2
 8010242:	2b00      	cmp	r3, #0
 8010244:	f000 8116 	beq.w	8010474 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801024c:	f003 0301 	and.w	r3, r3, #1
 8010250:	2b00      	cmp	r3, #0
 8010252:	d011      	beq.n	8010278 <HAL_UART_IRQHandler+0xc8>
 8010254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00b      	beq.n	8010278 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2201      	movs	r2, #1
 8010266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801026e:	f043 0201 	orr.w	r2, r3, #1
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801027c:	f003 0302 	and.w	r3, r3, #2
 8010280:	2b00      	cmp	r3, #0
 8010282:	d011      	beq.n	80102a8 <HAL_UART_IRQHandler+0xf8>
 8010284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010288:	f003 0301 	and.w	r3, r3, #1
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00b      	beq.n	80102a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	2202      	movs	r2, #2
 8010296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801029e:	f043 0204 	orr.w	r2, r3, #4
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102ac:	f003 0304 	and.w	r3, r3, #4
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d011      	beq.n	80102d8 <HAL_UART_IRQHandler+0x128>
 80102b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80102b8:	f003 0301 	and.w	r3, r3, #1
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d00b      	beq.n	80102d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2204      	movs	r2, #4
 80102c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102ce:	f043 0202 	orr.w	r2, r3, #2
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80102d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102dc:	f003 0308 	and.w	r3, r3, #8
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d017      	beq.n	8010314 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80102e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102e8:	f003 0320 	and.w	r3, r3, #32
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d105      	bne.n	80102fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80102f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80102f4:	4b5c      	ldr	r3, [pc, #368]	@ (8010468 <HAL_UART_IRQHandler+0x2b8>)
 80102f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00b      	beq.n	8010314 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	2208      	movs	r2, #8
 8010302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801030a:	f043 0208 	orr.w	r2, r3, #8
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801031c:	2b00      	cmp	r3, #0
 801031e:	d012      	beq.n	8010346 <HAL_UART_IRQHandler+0x196>
 8010320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010324:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010328:	2b00      	cmp	r3, #0
 801032a:	d00c      	beq.n	8010346 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801033c:	f043 0220 	orr.w	r2, r3, #32
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801034c:	2b00      	cmp	r3, #0
 801034e:	f000 8231 	beq.w	80107b4 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010356:	f003 0320 	and.w	r3, r3, #32
 801035a:	2b00      	cmp	r3, #0
 801035c:	d013      	beq.n	8010386 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801035e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010362:	f003 0320 	and.w	r3, r3, #32
 8010366:	2b00      	cmp	r3, #0
 8010368:	d105      	bne.n	8010376 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801036a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801036e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010372:	2b00      	cmp	r3, #0
 8010374:	d007      	beq.n	8010386 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801037a:	2b00      	cmp	r3, #0
 801037c:	d003      	beq.n	8010386 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801038c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	689b      	ldr	r3, [r3, #8]
 8010396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801039a:	2b40      	cmp	r3, #64	@ 0x40
 801039c:	d005      	beq.n	80103aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801039e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80103a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d054      	beq.n	8010454 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 fd93 	bl	8010ed6 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	689b      	ldr	r3, [r3, #8]
 80103b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103ba:	2b40      	cmp	r3, #64	@ 0x40
 80103bc:	d146      	bne.n	801044c <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	3308      	adds	r3, #8
 80103c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80103cc:	e853 3f00 	ldrex	r3, [r3]
 80103d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80103d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80103d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	3308      	adds	r3, #8
 80103e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80103ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80103ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80103f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80103fa:	e841 2300 	strex	r3, r2, [r1]
 80103fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d1d9      	bne.n	80103be <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010410:	2b00      	cmp	r3, #0
 8010412:	d017      	beq.n	8010444 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801041a:	4a15      	ldr	r2, [pc, #84]	@ (8010470 <HAL_UART_IRQHandler+0x2c0>)
 801041c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010424:	4618      	mov	r0, r3
 8010426:	f7f5 fa07 	bl	8005838 <HAL_DMA_Abort_IT>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d019      	beq.n	8010464 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801043e:	4610      	mov	r0, r2
 8010440:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010442:	e00f      	b.n	8010464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 f9c9 	bl	80107dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801044a:	e00b      	b.n	8010464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f000 f9c5 	bl	80107dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010452:	e007      	b.n	8010464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 f9c1 	bl	80107dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2200      	movs	r2, #0
 801045e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010462:	e1a7      	b.n	80107b4 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010464:	bf00      	nop
    return;
 8010466:	e1a5      	b.n	80107b4 <HAL_UART_IRQHandler+0x604>
 8010468:	10000001 	.word	0x10000001
 801046c:	04000120 	.word	0x04000120
 8010470:	08010fa3 	.word	0x08010fa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010478:	2b01      	cmp	r3, #1
 801047a:	f040 8150 	bne.w	801071e <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801047e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010482:	f003 0310 	and.w	r3, r3, #16
 8010486:	2b00      	cmp	r3, #0
 8010488:	f000 8149 	beq.w	801071e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801048c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010490:	f003 0310 	and.w	r3, r3, #16
 8010494:	2b00      	cmp	r3, #0
 8010496:	f000 8142 	beq.w	801071e <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	2210      	movs	r2, #16
 80104a0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	689b      	ldr	r3, [r3, #8]
 80104a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104ac:	2b40      	cmp	r3, #64	@ 0x40
 80104ae:	f040 80b8 	bne.w	8010622 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80104bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80104c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f000 8177 	beq.w	80107b8 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80104d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80104d4:	429a      	cmp	r2, r3
 80104d6:	f080 816f 	bcs.w	80107b8 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80104e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104ec:	2b81      	cmp	r3, #129	@ 0x81
 80104ee:	f000 8087 	beq.w	8010600 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80104fe:	e853 3f00 	ldrex	r3, [r3]
 8010502:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010506:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801050a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801050e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	461a      	mov	r2, r3
 8010518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801051c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010520:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010524:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010528:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801052c:	e841 2300 	strex	r3, r2, [r1]
 8010530:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1da      	bne.n	80104f2 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	3308      	adds	r3, #8
 8010542:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010546:	e853 3f00 	ldrex	r3, [r3]
 801054a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801054c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801054e:	f023 0301 	bic.w	r3, r3, #1
 8010552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	3308      	adds	r3, #8
 801055c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010560:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010564:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010566:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010568:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801056c:	e841 2300 	strex	r3, r2, [r1]
 8010570:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010574:	2b00      	cmp	r3, #0
 8010576:	d1e1      	bne.n	801053c <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	3308      	adds	r3, #8
 801057e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010580:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010582:	e853 3f00 	ldrex	r3, [r3]
 8010586:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801058a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801058e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	3308      	adds	r3, #8
 8010598:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801059c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801059e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80105a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80105a4:	e841 2300 	strex	r3, r2, [r1]
 80105a8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80105aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1e3      	bne.n	8010578 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2220      	movs	r2, #32
 80105b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105c6:	e853 3f00 	ldrex	r3, [r3]
 80105ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80105cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80105ce:	f023 0310 	bic.w	r3, r3, #16
 80105d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	461a      	mov	r2, r3
 80105dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80105e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80105e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80105e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80105e8:	e841 2300 	strex	r3, r2, [r1]
 80105ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80105ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1e4      	bne.n	80105be <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7f5 f8a0 	bl	8005740 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2202      	movs	r2, #2
 8010604:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010612:	b29b      	uxth	r3, r3
 8010614:	1ad3      	subs	r3, r2, r3
 8010616:	b29b      	uxth	r3, r3
 8010618:	4619      	mov	r1, r3
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 f8e8 	bl	80107f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010620:	e0ca      	b.n	80107b8 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801062e:	b29b      	uxth	r3, r3
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801063c:	b29b      	uxth	r3, r3
 801063e:	2b00      	cmp	r3, #0
 8010640:	f000 80bc 	beq.w	80107bc <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8010644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010648:	2b00      	cmp	r3, #0
 801064a:	f000 80b7 	beq.w	80107bc <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010656:	e853 3f00 	ldrex	r3, [r3]
 801065a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801065c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801065e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010662:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	461a      	mov	r2, r3
 801066c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010670:	647b      	str	r3, [r7, #68]	@ 0x44
 8010672:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010678:	e841 2300 	strex	r3, r2, [r1]
 801067c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801067e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010680:	2b00      	cmp	r3, #0
 8010682:	d1e4      	bne.n	801064e <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	3308      	adds	r3, #8
 801068a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801068c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801068e:	e853 3f00 	ldrex	r3, [r3]
 8010692:	623b      	str	r3, [r7, #32]
   return(result);
 8010694:	6a3b      	ldr	r3, [r7, #32]
 8010696:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801069a:	f023 0301 	bic.w	r3, r3, #1
 801069e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	3308      	adds	r3, #8
 80106a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80106ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80106ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106b4:	e841 2300 	strex	r3, r2, [r1]
 80106b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80106ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d1e1      	bne.n	8010684 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2220      	movs	r2, #32
 80106c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	e853 3f00 	ldrex	r3, [r3]
 80106e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f023 0310 	bic.w	r3, r3, #16
 80106e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	461a      	mov	r2, r3
 80106f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80106f6:	61fb      	str	r3, [r7, #28]
 80106f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106fa:	69b9      	ldr	r1, [r7, #24]
 80106fc:	69fa      	ldr	r2, [r7, #28]
 80106fe:	e841 2300 	strex	r3, r2, [r1]
 8010702:	617b      	str	r3, [r7, #20]
   return(result);
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d1e4      	bne.n	80106d4 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2202      	movs	r2, #2
 801070e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010714:	4619      	mov	r1, r3
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 f86a 	bl	80107f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801071c:	e04e      	b.n	80107bc <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801071e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010726:	2b00      	cmp	r3, #0
 8010728:	d014      	beq.n	8010754 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801072a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801072e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010732:	2b00      	cmp	r3, #0
 8010734:	d105      	bne.n	8010742 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801073a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801073e:	2b00      	cmp	r3, #0
 8010740:	d008      	beq.n	8010754 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010746:	2b00      	cmp	r3, #0
 8010748:	d03a      	beq.n	80107c0 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	4798      	blx	r3
    }
    return;
 8010752:	e035      	b.n	80107c0 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801075c:	2b00      	cmp	r3, #0
 801075e:	d009      	beq.n	8010774 <HAL_UART_IRQHandler+0x5c4>
 8010760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010768:	2b00      	cmp	r3, #0
 801076a:	d003      	beq.n	8010774 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f000 fc2e 	bl	8010fce <UART_EndTransmit_IT>
    return;
 8010772:	e026      	b.n	80107c2 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010778:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801077c:	2b00      	cmp	r3, #0
 801077e:	d009      	beq.n	8010794 <HAL_UART_IRQHandler+0x5e4>
 8010780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010784:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010788:	2b00      	cmp	r3, #0
 801078a:	d003      	beq.n	8010794 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f000 fc53 	bl	8011038 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010792:	e016      	b.n	80107c2 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010798:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801079c:	2b00      	cmp	r3, #0
 801079e:	d010      	beq.n	80107c2 <HAL_UART_IRQHandler+0x612>
 80107a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	da0c      	bge.n	80107c2 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f000 fc3b 	bl	8011024 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80107ae:	e008      	b.n	80107c2 <HAL_UART_IRQHandler+0x612>
      return;
 80107b0:	bf00      	nop
 80107b2:	e006      	b.n	80107c2 <HAL_UART_IRQHandler+0x612>
    return;
 80107b4:	bf00      	nop
 80107b6:	e004      	b.n	80107c2 <HAL_UART_IRQHandler+0x612>
      return;
 80107b8:	bf00      	nop
 80107ba:	e002      	b.n	80107c2 <HAL_UART_IRQHandler+0x612>
      return;
 80107bc:	bf00      	nop
 80107be:	e000      	b.n	80107c2 <HAL_UART_IRQHandler+0x612>
    return;
 80107c0:	bf00      	nop
  }
}
 80107c2:	37e8      	adds	r7, #232	@ 0xe8
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}

080107c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80107d0:	bf00      	nop
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80107e4:	bf00      	nop
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	460b      	mov	r3, r1
 80107fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80107fc:	bf00      	nop
 80107fe:	370c      	adds	r7, #12
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	4770      	bx	lr

08010808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801080c:	b094      	sub	sp, #80	@ 0x50
 801080e:	af00      	add	r7, sp, #0
 8010810:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010812:	2300      	movs	r3, #0
 8010814:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	4b83      	ldr	r3, [pc, #524]	@ (8010a2c <UART_SetConfig+0x224>)
 801081e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010822:	689a      	ldr	r2, [r3, #8]
 8010824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010826:	691b      	ldr	r3, [r3, #16]
 8010828:	431a      	orrs	r2, r3
 801082a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801082c:	695b      	ldr	r3, [r3, #20]
 801082e:	431a      	orrs	r2, r3
 8010830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010832:	69db      	ldr	r3, [r3, #28]
 8010834:	4313      	orrs	r3, r2
 8010836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	497c      	ldr	r1, [pc, #496]	@ (8010a30 <UART_SetConfig+0x228>)
 8010840:	4019      	ands	r1, r3
 8010842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010848:	430b      	orrs	r3, r1
 801084a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801084c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010858:	68d9      	ldr	r1, [r3, #12]
 801085a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	ea40 0301 	orr.w	r3, r0, r1
 8010862:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010866:	699b      	ldr	r3, [r3, #24]
 8010868:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801086a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801086c:	681a      	ldr	r2, [r3, #0]
 801086e:	4b6f      	ldr	r3, [pc, #444]	@ (8010a2c <UART_SetConfig+0x224>)
 8010870:	429a      	cmp	r2, r3
 8010872:	d009      	beq.n	8010888 <UART_SetConfig+0x80>
 8010874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	4b6e      	ldr	r3, [pc, #440]	@ (8010a34 <UART_SetConfig+0x22c>)
 801087a:	429a      	cmp	r2, r3
 801087c:	d004      	beq.n	8010888 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801087e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010880:	6a1a      	ldr	r2, [r3, #32]
 8010882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010884:	4313      	orrs	r3, r2
 8010886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	689b      	ldr	r3, [r3, #8]
 801088e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8010892:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8010896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801089c:	430b      	orrs	r3, r1
 801089e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80108a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108a6:	f023 000f 	bic.w	r0, r3, #15
 80108aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80108ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b0:	681a      	ldr	r2, [r3, #0]
 80108b2:	ea40 0301 	orr.w	r3, r0, r1
 80108b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80108b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	4b5e      	ldr	r3, [pc, #376]	@ (8010a38 <UART_SetConfig+0x230>)
 80108be:	429a      	cmp	r2, r3
 80108c0:	d102      	bne.n	80108c8 <UART_SetConfig+0xc0>
 80108c2:	2301      	movs	r3, #1
 80108c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108c6:	e032      	b.n	801092e <UART_SetConfig+0x126>
 80108c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	4b5b      	ldr	r3, [pc, #364]	@ (8010a3c <UART_SetConfig+0x234>)
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d102      	bne.n	80108d8 <UART_SetConfig+0xd0>
 80108d2:	2302      	movs	r3, #2
 80108d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108d6:	e02a      	b.n	801092e <UART_SetConfig+0x126>
 80108d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	4b58      	ldr	r3, [pc, #352]	@ (8010a40 <UART_SetConfig+0x238>)
 80108de:	429a      	cmp	r2, r3
 80108e0:	d102      	bne.n	80108e8 <UART_SetConfig+0xe0>
 80108e2:	2304      	movs	r3, #4
 80108e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108e6:	e022      	b.n	801092e <UART_SetConfig+0x126>
 80108e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	4b55      	ldr	r3, [pc, #340]	@ (8010a44 <UART_SetConfig+0x23c>)
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d102      	bne.n	80108f8 <UART_SetConfig+0xf0>
 80108f2:	2308      	movs	r3, #8
 80108f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108f6:	e01a      	b.n	801092e <UART_SetConfig+0x126>
 80108f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	4b52      	ldr	r3, [pc, #328]	@ (8010a48 <UART_SetConfig+0x240>)
 80108fe:	429a      	cmp	r2, r3
 8010900:	d102      	bne.n	8010908 <UART_SetConfig+0x100>
 8010902:	2310      	movs	r3, #16
 8010904:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010906:	e012      	b.n	801092e <UART_SetConfig+0x126>
 8010908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	4b4f      	ldr	r3, [pc, #316]	@ (8010a4c <UART_SetConfig+0x244>)
 801090e:	429a      	cmp	r2, r3
 8010910:	d103      	bne.n	801091a <UART_SetConfig+0x112>
 8010912:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8010916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010918:	e009      	b.n	801092e <UART_SetConfig+0x126>
 801091a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	4b43      	ldr	r3, [pc, #268]	@ (8010a2c <UART_SetConfig+0x224>)
 8010920:	429a      	cmp	r2, r3
 8010922:	d102      	bne.n	801092a <UART_SetConfig+0x122>
 8010924:	2320      	movs	r3, #32
 8010926:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010928:	e001      	b.n	801092e <UART_SetConfig+0x126>
 801092a:	2300      	movs	r3, #0
 801092c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801092e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010930:	681a      	ldr	r2, [r3, #0]
 8010932:	4b3e      	ldr	r3, [pc, #248]	@ (8010a2c <UART_SetConfig+0x224>)
 8010934:	429a      	cmp	r2, r3
 8010936:	d005      	beq.n	8010944 <UART_SetConfig+0x13c>
 8010938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	4b3d      	ldr	r3, [pc, #244]	@ (8010a34 <UART_SetConfig+0x22c>)
 801093e:	429a      	cmp	r2, r3
 8010940:	f040 8088 	bne.w	8010a54 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010946:	2200      	movs	r2, #0
 8010948:	623b      	str	r3, [r7, #32]
 801094a:	627a      	str	r2, [r7, #36]	@ 0x24
 801094c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010950:	f7fb fdea 	bl	800c528 <HAL_RCCEx_GetPeriphCLKFreq>
 8010954:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8010956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010958:	2b00      	cmp	r3, #0
 801095a:	f000 80eb 	beq.w	8010b34 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801095e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010962:	4a3b      	ldr	r2, [pc, #236]	@ (8010a50 <UART_SetConfig+0x248>)
 8010964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010968:	461a      	mov	r2, r3
 801096a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801096c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010970:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010974:	685a      	ldr	r2, [r3, #4]
 8010976:	4613      	mov	r3, r2
 8010978:	005b      	lsls	r3, r3, #1
 801097a:	4413      	add	r3, r2
 801097c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801097e:	429a      	cmp	r2, r3
 8010980:	d305      	bcc.n	801098e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010988:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801098a:	429a      	cmp	r2, r3
 801098c:	d903      	bls.n	8010996 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 801098e:	2301      	movs	r3, #1
 8010990:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010994:	e048      	b.n	8010a28 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010998:	2200      	movs	r2, #0
 801099a:	61bb      	str	r3, [r7, #24]
 801099c:	61fa      	str	r2, [r7, #28]
 801099e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109a2:	4a2b      	ldr	r2, [pc, #172]	@ (8010a50 <UART_SetConfig+0x248>)
 80109a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	2200      	movs	r2, #0
 80109ac:	613b      	str	r3, [r7, #16]
 80109ae:	617a      	str	r2, [r7, #20]
 80109b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80109b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80109b8:	f7ef fc7c 	bl	80002b4 <__aeabi_uldivmod>
 80109bc:	4602      	mov	r2, r0
 80109be:	460b      	mov	r3, r1
 80109c0:	4610      	mov	r0, r2
 80109c2:	4619      	mov	r1, r3
 80109c4:	f04f 0200 	mov.w	r2, #0
 80109c8:	f04f 0300 	mov.w	r3, #0
 80109cc:	020b      	lsls	r3, r1, #8
 80109ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80109d2:	0202      	lsls	r2, r0, #8
 80109d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109d6:	6849      	ldr	r1, [r1, #4]
 80109d8:	0849      	lsrs	r1, r1, #1
 80109da:	2000      	movs	r0, #0
 80109dc:	460c      	mov	r4, r1
 80109de:	4605      	mov	r5, r0
 80109e0:	eb12 0804 	adds.w	r8, r2, r4
 80109e4:	eb43 0905 	adc.w	r9, r3, r5
 80109e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	2200      	movs	r2, #0
 80109ee:	60bb      	str	r3, [r7, #8]
 80109f0:	60fa      	str	r2, [r7, #12]
 80109f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80109f6:	4640      	mov	r0, r8
 80109f8:	4649      	mov	r1, r9
 80109fa:	f7ef fc5b 	bl	80002b4 <__aeabi_uldivmod>
 80109fe:	4602      	mov	r2, r0
 8010a00:	460b      	mov	r3, r1
 8010a02:	4613      	mov	r3, r2
 8010a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010a0c:	d308      	bcc.n	8010a20 <UART_SetConfig+0x218>
 8010a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010a14:	d204      	bcs.n	8010a20 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8010a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010a1c:	60da      	str	r2, [r3, #12]
 8010a1e:	e003      	b.n	8010a28 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8010a20:	2301      	movs	r3, #1
 8010a22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8010a26:	e085      	b.n	8010b34 <UART_SetConfig+0x32c>
 8010a28:	e084      	b.n	8010b34 <UART_SetConfig+0x32c>
 8010a2a:	bf00      	nop
 8010a2c:	46002400 	.word	0x46002400
 8010a30:	cfff69f3 	.word	0xcfff69f3
 8010a34:	56002400 	.word	0x56002400
 8010a38:	40013800 	.word	0x40013800
 8010a3c:	40004400 	.word	0x40004400
 8010a40:	40004800 	.word	0x40004800
 8010a44:	40004c00 	.word	0x40004c00
 8010a48:	40005000 	.word	0x40005000
 8010a4c:	40006400 	.word	0x40006400
 8010a50:	08011c6c 	.word	0x08011c6c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a56:	69db      	ldr	r3, [r3, #28]
 8010a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010a5c:	d13c      	bne.n	8010ad8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a60:	2200      	movs	r2, #0
 8010a62:	603b      	str	r3, [r7, #0]
 8010a64:	607a      	str	r2, [r7, #4]
 8010a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010a6a:	f7fb fd5d 	bl	800c528 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a6e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d05e      	beq.n	8010b34 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a7a:	4a39      	ldr	r2, [pc, #228]	@ (8010b60 <UART_SetConfig+0x358>)
 8010a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a80:	461a      	mov	r2, r3
 8010a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a88:	005a      	lsls	r2, r3, #1
 8010a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	085b      	lsrs	r3, r3, #1
 8010a90:	441a      	add	r2, r3
 8010a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a9e:	2b0f      	cmp	r3, #15
 8010aa0:	d916      	bls.n	8010ad0 <UART_SetConfig+0x2c8>
 8010aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010aa8:	d212      	bcs.n	8010ad0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aac:	b29b      	uxth	r3, r3
 8010aae:	f023 030f 	bic.w	r3, r3, #15
 8010ab2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ab6:	085b      	lsrs	r3, r3, #1
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	f003 0307 	and.w	r3, r3, #7
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010ac2:	4313      	orrs	r3, r2
 8010ac4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8010ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010acc:	60da      	str	r2, [r3, #12]
 8010ace:	e031      	b.n	8010b34 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010ad6:	e02d      	b.n	8010b34 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ada:	2200      	movs	r2, #0
 8010adc:	469a      	mov	sl, r3
 8010ade:	4693      	mov	fp, r2
 8010ae0:	4650      	mov	r0, sl
 8010ae2:	4659      	mov	r1, fp
 8010ae4:	f7fb fd20 	bl	800c528 <HAL_RCCEx_GetPeriphCLKFreq>
 8010ae8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d021      	beq.n	8010b34 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010af4:	4a1a      	ldr	r2, [pc, #104]	@ (8010b60 <UART_SetConfig+0x358>)
 8010af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010afa:	461a      	mov	r2, r3
 8010afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010afe:	fbb3 f2f2 	udiv	r2, r3, r2
 8010b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	085b      	lsrs	r3, r3, #1
 8010b08:	441a      	add	r2, r3
 8010b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b16:	2b0f      	cmp	r3, #15
 8010b18:	d909      	bls.n	8010b2e <UART_SetConfig+0x326>
 8010b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b20:	d205      	bcs.n	8010b2e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	60da      	str	r2, [r3, #12]
 8010b2c:	e002      	b.n	8010b34 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010b2e:	2301      	movs	r3, #1
 8010b30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b36:	2201      	movs	r2, #1
 8010b38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3e:	2201      	movs	r2, #1
 8010b40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b46:	2200      	movs	r2, #0
 8010b48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010b50:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3750      	adds	r7, #80	@ 0x50
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010b5e:	bf00      	nop
 8010b60:	08011c6c 	.word	0x08011c6c

08010b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b70:	f003 0308 	and.w	r3, r3, #8
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d00a      	beq.n	8010b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	430a      	orrs	r2, r1
 8010b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b92:	f003 0301 	and.w	r3, r3, #1
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d00a      	beq.n	8010bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	430a      	orrs	r2, r1
 8010bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bb4:	f003 0302 	and.w	r3, r3, #2
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d00a      	beq.n	8010bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	430a      	orrs	r2, r1
 8010bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bd6:	f003 0304 	and.w	r3, r3, #4
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d00a      	beq.n	8010bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	430a      	orrs	r2, r1
 8010bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bf8:	f003 0310 	and.w	r3, r3, #16
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d00a      	beq.n	8010c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	689b      	ldr	r3, [r3, #8]
 8010c06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	430a      	orrs	r2, r1
 8010c14:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c1a:	f003 0320 	and.w	r3, r3, #32
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d00a      	beq.n	8010c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	689b      	ldr	r3, [r3, #8]
 8010c28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	430a      	orrs	r2, r1
 8010c36:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d01a      	beq.n	8010c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	430a      	orrs	r2, r1
 8010c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c62:	d10a      	bne.n	8010c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	430a      	orrs	r2, r1
 8010c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d00a      	beq.n	8010c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	430a      	orrs	r2, r1
 8010c9a:	605a      	str	r2, [r3, #4]
  }
}
 8010c9c:	bf00      	nop
 8010c9e:	370c      	adds	r7, #12
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b098      	sub	sp, #96	@ 0x60
 8010cac:	af02      	add	r7, sp, #8
 8010cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010cb8:	f7f1 ffd6 	bl	8002c68 <HAL_GetTick>
 8010cbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	f003 0308 	and.w	r3, r3, #8
 8010cc8:	2b08      	cmp	r3, #8
 8010cca:	d12f      	bne.n	8010d2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 f88e 	bl	8010dfc <UART_WaitOnFlagUntilTimeout>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d022      	beq.n	8010d2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cee:	e853 3f00 	ldrex	r3, [r3]
 8010cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	461a      	mov	r2, r3
 8010d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010d0c:	e841 2300 	strex	r3, r2, [r1]
 8010d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d1e6      	bne.n	8010ce6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2220      	movs	r2, #32
 8010d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2200      	movs	r2, #0
 8010d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010d28:	2303      	movs	r3, #3
 8010d2a:	e063      	b.n	8010df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	f003 0304 	and.w	r3, r3, #4
 8010d36:	2b04      	cmp	r3, #4
 8010d38:	d149      	bne.n	8010dce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010d3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010d3e:	9300      	str	r3, [sp, #0]
 8010d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d42:	2200      	movs	r2, #0
 8010d44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f000 f857 	bl	8010dfc <UART_WaitOnFlagUntilTimeout>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d03c      	beq.n	8010dce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d5c:	e853 3f00 	ldrex	r3, [r3]
 8010d60:	623b      	str	r3, [r7, #32]
   return(result);
 8010d62:	6a3b      	ldr	r3, [r7, #32]
 8010d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	461a      	mov	r2, r3
 8010d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d7a:	e841 2300 	strex	r3, r2, [r1]
 8010d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d1e6      	bne.n	8010d54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	3308      	adds	r3, #8
 8010d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	e853 3f00 	ldrex	r3, [r3]
 8010d94:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f023 0301 	bic.w	r3, r3, #1
 8010d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	3308      	adds	r3, #8
 8010da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010da6:	61fa      	str	r2, [r7, #28]
 8010da8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010daa:	69b9      	ldr	r1, [r7, #24]
 8010dac:	69fa      	ldr	r2, [r7, #28]
 8010dae:	e841 2300 	strex	r3, r2, [r1]
 8010db2:	617b      	str	r3, [r7, #20]
   return(result);
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d1e5      	bne.n	8010d86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2220      	movs	r2, #32
 8010dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010dca:	2303      	movs	r3, #3
 8010dcc:	e012      	b.n	8010df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2220      	movs	r2, #32
 8010dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2220      	movs	r2, #32
 8010dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2200      	movs	r2, #0
 8010de2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2200      	movs	r2, #0
 8010de8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2200      	movs	r2, #0
 8010dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010df2:	2300      	movs	r3, #0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3758      	adds	r7, #88	@ 0x58
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	603b      	str	r3, [r7, #0]
 8010e08:	4613      	mov	r3, r2
 8010e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e0c:	e04f      	b.n	8010eae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010e0e:	69bb      	ldr	r3, [r7, #24]
 8010e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e14:	d04b      	beq.n	8010eae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e16:	f7f1 ff27 	bl	8002c68 <HAL_GetTick>
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	1ad3      	subs	r3, r2, r3
 8010e20:	69ba      	ldr	r2, [r7, #24]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d302      	bcc.n	8010e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8010e26:	69bb      	ldr	r3, [r7, #24]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d101      	bne.n	8010e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010e2c:	2303      	movs	r3, #3
 8010e2e:	e04e      	b.n	8010ece <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f003 0304 	and.w	r3, r3, #4
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d037      	beq.n	8010eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	2b80      	cmp	r3, #128	@ 0x80
 8010e42:	d034      	beq.n	8010eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	2b40      	cmp	r3, #64	@ 0x40
 8010e48:	d031      	beq.n	8010eae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	69db      	ldr	r3, [r3, #28]
 8010e50:	f003 0308 	and.w	r3, r3, #8
 8010e54:	2b08      	cmp	r3, #8
 8010e56:	d110      	bne.n	8010e7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2208      	movs	r2, #8
 8010e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010e60:	68f8      	ldr	r0, [r7, #12]
 8010e62:	f000 f838 	bl	8010ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	2208      	movs	r2, #8
 8010e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	2200      	movs	r2, #0
 8010e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010e76:	2301      	movs	r3, #1
 8010e78:	e029      	b.n	8010ece <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	69db      	ldr	r3, [r3, #28]
 8010e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010e88:	d111      	bne.n	8010eae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	f000 f81e 	bl	8010ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2220      	movs	r2, #32
 8010e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010eaa:	2303      	movs	r3, #3
 8010eac:	e00f      	b.n	8010ece <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	69da      	ldr	r2, [r3, #28]
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	4013      	ands	r3, r2
 8010eb8:	68ba      	ldr	r2, [r7, #8]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	bf0c      	ite	eq
 8010ebe:	2301      	moveq	r3, #1
 8010ec0:	2300      	movne	r3, #0
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	79fb      	ldrb	r3, [r7, #7]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d0a0      	beq.n	8010e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010ed6:	b480      	push	{r7}
 8010ed8:	b095      	sub	sp, #84	@ 0x54
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ee6:	e853 3f00 	ldrex	r3, [r3]
 8010eea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	461a      	mov	r2, r3
 8010efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8010efe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f04:	e841 2300 	strex	r3, r2, [r1]
 8010f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d1e6      	bne.n	8010ede <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	3308      	adds	r3, #8
 8010f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f18:	6a3b      	ldr	r3, [r7, #32]
 8010f1a:	e853 3f00 	ldrex	r3, [r3]
 8010f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010f26:	f023 0301 	bic.w	r3, r3, #1
 8010f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	3308      	adds	r3, #8
 8010f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f3c:	e841 2300 	strex	r3, r2, [r1]
 8010f40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d1e3      	bne.n	8010f10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d118      	bne.n	8010f82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	e853 3f00 	ldrex	r3, [r3]
 8010f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	f023 0310 	bic.w	r3, r3, #16
 8010f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f6e:	61bb      	str	r3, [r7, #24]
 8010f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f72:	6979      	ldr	r1, [r7, #20]
 8010f74:	69ba      	ldr	r2, [r7, #24]
 8010f76:	e841 2300 	strex	r3, r2, [r1]
 8010f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d1e6      	bne.n	8010f50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2220      	movs	r2, #32
 8010f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2200      	movs	r2, #0
 8010f94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010f96:	bf00      	nop
 8010f98:	3754      	adds	r7, #84	@ 0x54
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr

08010fa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010fa2:	b580      	push	{r7, lr}
 8010fa4:	b084      	sub	sp, #16
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010fae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f7ff fc0b 	bl	80107dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fc6:	bf00      	nop
 8010fc8:	3710      	adds	r7, #16
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}

08010fce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b088      	sub	sp, #32
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	e853 3f00 	ldrex	r3, [r3]
 8010fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010fea:	61fb      	str	r3, [r7, #28]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	69fb      	ldr	r3, [r7, #28]
 8010ff4:	61bb      	str	r3, [r7, #24]
 8010ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ff8:	6979      	ldr	r1, [r7, #20]
 8010ffa:	69ba      	ldr	r2, [r7, #24]
 8010ffc:	e841 2300 	strex	r3, r2, [r1]
 8011000:	613b      	str	r3, [r7, #16]
   return(result);
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d1e6      	bne.n	8010fd6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2220      	movs	r2, #32
 801100c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2200      	movs	r2, #0
 8011014:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ff fbd6 	bl	80107c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801101c:	bf00      	nop
 801101e:	3720      	adds	r7, #32
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801102c:	bf00      	nop
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011040:	bf00      	nop
 8011042:	370c      	adds	r7, #12
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr

0801104c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801104c:	b480      	push	{r7}
 801104e:	b085      	sub	sp, #20
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801105a:	2b01      	cmp	r3, #1
 801105c:	d101      	bne.n	8011062 <HAL_UARTEx_DisableFifoMode+0x16>
 801105e:	2302      	movs	r3, #2
 8011060:	e027      	b.n	80110b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2201      	movs	r2, #1
 8011066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2224      	movs	r2, #36	@ 0x24
 801106e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f022 0201 	bic.w	r2, r2, #1
 8011088:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011090:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2200      	movs	r2, #0
 8011096:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	68fa      	ldr	r2, [r7, #12]
 801109e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2220      	movs	r2, #32
 80110a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2200      	movs	r2, #0
 80110ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80110b0:	2300      	movs	r3, #0
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3714      	adds	r7, #20
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr

080110be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b084      	sub	sp, #16
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
 80110c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d101      	bne.n	80110d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80110d2:	2302      	movs	r3, #2
 80110d4:	e02d      	b.n	8011132 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2201      	movs	r2, #1
 80110da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2224      	movs	r2, #36	@ 0x24
 80110e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	f022 0201 	bic.w	r2, r2, #1
 80110fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	689b      	ldr	r3, [r3, #8]
 8011104:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	683a      	ldr	r2, [r7, #0]
 801110e:	430a      	orrs	r2, r1
 8011110:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 f850 	bl	80111b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	68fa      	ldr	r2, [r7, #12]
 801111e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2220      	movs	r2, #32
 8011124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011130:	2300      	movs	r3, #0
}
 8011132:	4618      	mov	r0, r3
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}

0801113a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801113a:	b580      	push	{r7, lr}
 801113c:	b084      	sub	sp, #16
 801113e:	af00      	add	r7, sp, #0
 8011140:	6078      	str	r0, [r7, #4]
 8011142:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801114a:	2b01      	cmp	r3, #1
 801114c:	d101      	bne.n	8011152 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801114e:	2302      	movs	r3, #2
 8011150:	e02d      	b.n	80111ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2201      	movs	r2, #1
 8011156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2224      	movs	r2, #36	@ 0x24
 801115e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	681a      	ldr	r2, [r3, #0]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f022 0201 	bic.w	r2, r2, #1
 8011178:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	689b      	ldr	r3, [r3, #8]
 8011180:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	683a      	ldr	r2, [r7, #0]
 801118a:	430a      	orrs	r2, r1
 801118c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 f812 	bl	80111b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2220      	movs	r2, #32
 80111a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2200      	movs	r2, #0
 80111a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80111ac:	2300      	movs	r3, #0
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3710      	adds	r7, #16
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
	...

080111b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b085      	sub	sp, #20
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d108      	bne.n	80111da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2201      	movs	r2, #1
 80111cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2201      	movs	r2, #1
 80111d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80111d8:	e031      	b.n	801123e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80111da:	2308      	movs	r3, #8
 80111dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80111de:	2308      	movs	r3, #8
 80111e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	689b      	ldr	r3, [r3, #8]
 80111e8:	0e5b      	lsrs	r3, r3, #25
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	f003 0307 	and.w	r3, r3, #7
 80111f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	689b      	ldr	r3, [r3, #8]
 80111f8:	0f5b      	lsrs	r3, r3, #29
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	f003 0307 	and.w	r3, r3, #7
 8011200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011202:	7bbb      	ldrb	r3, [r7, #14]
 8011204:	7b3a      	ldrb	r2, [r7, #12]
 8011206:	4911      	ldr	r1, [pc, #68]	@ (801124c <UARTEx_SetNbDataToProcess+0x94>)
 8011208:	5c8a      	ldrb	r2, [r1, r2]
 801120a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801120e:	7b3a      	ldrb	r2, [r7, #12]
 8011210:	490f      	ldr	r1, [pc, #60]	@ (8011250 <UARTEx_SetNbDataToProcess+0x98>)
 8011212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011214:	fb93 f3f2 	sdiv	r3, r3, r2
 8011218:	b29a      	uxth	r2, r3
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011220:	7bfb      	ldrb	r3, [r7, #15]
 8011222:	7b7a      	ldrb	r2, [r7, #13]
 8011224:	4909      	ldr	r1, [pc, #36]	@ (801124c <UARTEx_SetNbDataToProcess+0x94>)
 8011226:	5c8a      	ldrb	r2, [r1, r2]
 8011228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801122c:	7b7a      	ldrb	r2, [r7, #13]
 801122e:	4908      	ldr	r1, [pc, #32]	@ (8011250 <UARTEx_SetNbDataToProcess+0x98>)
 8011230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011232:	fb93 f3f2 	sdiv	r3, r3, r2
 8011236:	b29a      	uxth	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801123e:	bf00      	nop
 8011240:	3714      	adds	r7, #20
 8011242:	46bd      	mov	sp, r7
 8011244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop
 801124c:	08011c84 	.word	0x08011c84
 8011250:	08011c8c 	.word	0x08011c8c

08011254 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b086      	sub	sp, #24
 8011258:	af02      	add	r7, sp, #8
 801125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801125c:	2300      	movs	r3, #0
 801125e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011260:	f7f1 fd02 	bl	8002c68 <HAL_GetTick>
 8011264:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d102      	bne.n	8011272 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 801126c:	2301      	movs	r3, #1
 801126e:	73fb      	strb	r3, [r7, #15]
 8011270:	e137      	b.n	80114e2 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	4a76      	ldr	r2, [pc, #472]	@ (8011450 <HAL_XSPI_Init+0x1fc>)
 8011278:	4293      	cmp	r3, r2
 801127a:	d008      	beq.n	801128e <HAL_XSPI_Init+0x3a>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4a74      	ldr	r2, [pc, #464]	@ (8011454 <HAL_XSPI_Init+0x200>)
 8011282:	4293      	cmp	r3, r2
 8011284:	d003      	beq.n	801128e <HAL_XSPI_Init+0x3a>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	4a73      	ldr	r2, [pc, #460]	@ (8011458 <HAL_XSPI_Init+0x204>)
 801128c:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	4a72      	ldr	r2, [pc, #456]	@ (801145c <HAL_XSPI_Init+0x208>)
 8011294:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	4a6d      	ldr	r2, [pc, #436]	@ (8011450 <HAL_XSPI_Init+0x1fc>)
 801129c:	4293      	cmp	r3, r2
 801129e:	d008      	beq.n	80112b2 <HAL_XSPI_Init+0x5e>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	4a6b      	ldr	r2, [pc, #428]	@ (8011454 <HAL_XSPI_Init+0x200>)
 80112a6:	4293      	cmp	r3, r2
 80112a8:	d003      	beq.n	80112b2 <HAL_XSPI_Init+0x5e>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	4a6a      	ldr	r2, [pc, #424]	@ (8011458 <HAL_XSPI_Init+0x204>)
 80112b0:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	4a66      	ldr	r2, [pc, #408]	@ (8011450 <HAL_XSPI_Init+0x1fc>)
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d008      	beq.n	80112ce <HAL_XSPI_Init+0x7a>
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4a64      	ldr	r2, [pc, #400]	@ (8011454 <HAL_XSPI_Init+0x200>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d003      	beq.n	80112ce <HAL_XSPI_Init+0x7a>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4a63      	ldr	r2, [pc, #396]	@ (8011458 <HAL_XSPI_Init+0x204>)
 80112cc:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2200      	movs	r2, #0
 80112d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112d8:	2b00      	cmp	r3, #0
 80112da:	f040 8102 	bne.w	80114e2 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f7f0 fcc0 	bl	8001c64 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80112e4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f000 f8ff 	bl	80114ec <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	689a      	ldr	r2, [r3, #8]
 80112f4:	4b5a      	ldr	r3, [pc, #360]	@ (8011460 <HAL_XSPI_Init+0x20c>)
 80112f6:	4013      	ands	r3, r2
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	68d1      	ldr	r1, [r2, #12]
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	6912      	ldr	r2, [r2, #16]
 8011300:	0412      	lsls	r2, r2, #16
 8011302:	4311      	orrs	r1, r2
 8011304:	687a      	ldr	r2, [r7, #4]
 8011306:	6952      	ldr	r2, [r2, #20]
 8011308:	3a01      	subs	r2, #1
 801130a:	0212      	lsls	r2, r2, #8
 801130c:	4311      	orrs	r1, r2
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	69d2      	ldr	r2, [r2, #28]
 8011312:	4311      	orrs	r1, r2
 8011314:	687a      	ldr	r2, [r7, #4]
 8011316:	6812      	ldr	r2, [r2, #0]
 8011318:	430b      	orrs	r3, r1
 801131a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4a4b      	ldr	r2, [pc, #300]	@ (8011450 <HAL_XSPI_Init+0x1fc>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d00e      	beq.n	8011344 <HAL_XSPI_Init+0xf0>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	4a4a      	ldr	r2, [pc, #296]	@ (8011454 <HAL_XSPI_Init+0x200>)
 801132c:	4293      	cmp	r3, r2
 801132e:	d009      	beq.n	8011344 <HAL_XSPI_Init+0xf0>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4a48      	ldr	r2, [pc, #288]	@ (8011458 <HAL_XSPI_Init+0x204>)
 8011336:	4293      	cmp	r3, r2
 8011338:	d004      	beq.n	8011344 <HAL_XSPI_Init+0xf0>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4a49      	ldr	r2, [pc, #292]	@ (8011464 <HAL_XSPI_Init+0x210>)
 8011340:	4293      	cmp	r3, r2
 8011342:	d10a      	bne.n	801135a <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	689b      	ldr	r3, [r3, #8]
 801134a:	f023 0108 	bic.w	r1, r3, #8
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	430a      	orrs	r2, r1
 8011358:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6a1a      	ldr	r2, [r3, #32]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	430a      	orrs	r2, r1
 801136e:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801137e:	041a      	lsls	r2, r3, #16
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	430a      	orrs	r2, r1
 8011386:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4a30      	ldr	r2, [pc, #192]	@ (8011450 <HAL_XSPI_Init+0x1fc>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d00e      	beq.n	80113b0 <HAL_XSPI_Init+0x15c>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	4a2f      	ldr	r2, [pc, #188]	@ (8011454 <HAL_XSPI_Init+0x200>)
 8011398:	4293      	cmp	r3, r2
 801139a:	d009      	beq.n	80113b0 <HAL_XSPI_Init+0x15c>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	4a2d      	ldr	r2, [pc, #180]	@ (8011458 <HAL_XSPI_Init+0x204>)
 80113a2:	4293      	cmp	r3, r2
 80113a4:	d004      	beq.n	80113b0 <HAL_XSPI_Init+0x15c>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	4a2e      	ldr	r2, [pc, #184]	@ (8011464 <HAL_XSPI_Init+0x210>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d10a      	bne.n	80113c6 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	691b      	ldr	r3, [r3, #16]
 80113b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	430a      	orrs	r2, r1
 80113c4:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	687a      	ldr	r2, [r7, #4]
 80113cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80113ce:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	3b01      	subs	r3, #1
 80113e0:	021a      	lsls	r2, r3, #8
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	430a      	orrs	r2, r1
 80113e8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80113ee:	9300      	str	r3, [sp, #0]
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	2200      	movs	r2, #0
 80113f4:	2120      	movs	r1, #32
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f000 f887 	bl	801150a <XSPI_WaitFlagStateUntilTimeout>
 80113fc:	4603      	mov	r3, r0
 80113fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011400:	7bfb      	ldrb	r3, [r7, #15]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d16d      	bne.n	80114e2 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	430a      	orrs	r2, r1
 801141a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	4a0e      	ldr	r2, [pc, #56]	@ (801145c <HAL_XSPI_Init+0x208>)
 8011422:	4293      	cmp	r3, r2
 8011424:	d004      	beq.n	8011430 <HAL_XSPI_Init+0x1dc>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4a0f      	ldr	r2, [pc, #60]	@ (8011468 <HAL_XSPI_Init+0x214>)
 801142c:	4293      	cmp	r3, r2
 801142e:	d11d      	bne.n	801146c <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011434:	9300      	str	r3, [sp, #0]
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	2200      	movs	r2, #0
 801143a:	2120      	movs	r1, #32
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f000 f864 	bl	801150a <XSPI_WaitFlagStateUntilTimeout>
 8011442:	4603      	mov	r3, r0
 8011444:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8011446:	7bfb      	ldrb	r3, [r7, #15]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00f      	beq.n	801146c <HAL_XSPI_Init+0x218>
          {
            return status;
 801144c:	7bfb      	ldrb	r3, [r7, #15]
 801144e:	e049      	b.n	80114e4 <HAL_XSPI_Init+0x290>
 8011450:	420d1400 	.word	0x420d1400
 8011454:	520d1400 	.word	0x520d1400
 8011458:	420d2400 	.word	0x420d2400
 801145c:	420d3400 	.word	0x420d3400
 8011460:	f8e0c0fc 	.word	0xf8e0c0fc
 8011464:	520d2400 	.word	0x520d2400
 8011468:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	689a      	ldr	r2, [r3, #8]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	430a      	orrs	r2, r1
 8011480:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801148a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011496:	431a      	orrs	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	430a      	orrs	r2, r1
 801149e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f042 0201 	orr.w	r2, r2, #1
 80114b0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	699b      	ldr	r3, [r3, #24]
 80114b6:	2b02      	cmp	r3, #2
 80114b8:	d107      	bne.n	80114ca <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	689a      	ldr	r2, [r3, #8]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f042 0202 	orr.w	r2, r2, #2
 80114c8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80114d2:	d103      	bne.n	80114dc <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2201      	movs	r2, #1
 80114d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80114da:	e002      	b.n	80114e2 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2202      	movs	r2, #2
 80114e0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 80114e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3710      	adds	r7, #16
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	683a      	ldr	r2, [r7, #0]
 80114fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 80114fc:	2300      	movs	r3, #0
}
 80114fe:	4618      	mov	r0, r3
 8011500:	370c      	adds	r7, #12
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr

0801150a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801150a:	b580      	push	{r7, lr}
 801150c:	b084      	sub	sp, #16
 801150e:	af00      	add	r7, sp, #0
 8011510:	60f8      	str	r0, [r7, #12]
 8011512:	60b9      	str	r1, [r7, #8]
 8011514:	603b      	str	r3, [r7, #0]
 8011516:	4613      	mov	r3, r2
 8011518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 801151a:	e01a      	b.n	8011552 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801151c:	69bb      	ldr	r3, [r7, #24]
 801151e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011522:	d016      	beq.n	8011552 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011524:	f7f1 fba0 	bl	8002c68 <HAL_GetTick>
 8011528:	4602      	mov	r2, r0
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	1ad3      	subs	r3, r2, r3
 801152e:	69ba      	ldr	r2, [r7, #24]
 8011530:	429a      	cmp	r2, r3
 8011532:	d302      	bcc.n	801153a <XSPI_WaitFlagStateUntilTimeout+0x30>
 8011534:	69bb      	ldr	r3, [r7, #24]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d10b      	bne.n	8011552 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011540:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011546:	f043 0201 	orr.w	r2, r3, #1
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 801154e:	2303      	movs	r3, #3
 8011550:	e00e      	b.n	8011570 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	6a1a      	ldr	r2, [r3, #32]
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	4013      	ands	r3, r2
 801155c:	2b00      	cmp	r3, #0
 801155e:	bf14      	ite	ne
 8011560:	2301      	movne	r3, #1
 8011562:	2300      	moveq	r3, #0
 8011564:	b2db      	uxtb	r3, r3
 8011566:	461a      	mov	r2, r3
 8011568:	79fb      	ldrb	r3, [r7, #7]
 801156a:	429a      	cmp	r2, r3
 801156c:	d1d6      	bne.n	801151c <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801156e:	2300      	movs	r3, #0
}
 8011570:	4618      	mov	r0, r3
 8011572:	3710      	adds	r7, #16
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}

08011578 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011578:	b084      	sub	sp, #16
 801157a:	b580      	push	{r7, lr}
 801157c:	b084      	sub	sp, #16
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
 8011582:	f107 001c 	add.w	r0, r7, #28
 8011586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 801158a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801158e:	2b03      	cmp	r3, #3
 8011590:	d105      	bne.n	801159e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	68db      	ldr	r3, [r3, #12]
 8011596:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f000 fa8e 	bl	8011ac0 <USB_CoreReset>
 80115a4:	4603      	mov	r3, r0
 80115a6:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 80115a8:	7fbb      	ldrb	r3, [r7, #30]
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d10b      	bne.n	80115c6 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	689b      	ldr	r3, [r3, #8]
 80115b2:	f043 0208 	orr.w	r2, r3, #8
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	689b      	ldr	r3, [r3, #8]
 80115be:	f043 0220 	orr.w	r2, r3, #32
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 80115c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3710      	adds	r7, #16
 80115cc:	46bd      	mov	sp, r7
 80115ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80115d2:	b004      	add	sp, #16
 80115d4:	4770      	bx	lr

080115d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80115d6:	b480      	push	{r7}
 80115d8:	b083      	sub	sp, #12
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	f023 0201 	bic.w	r2, r3, #1
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80115ea:	2300      	movs	r3, #0
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	370c      	adds	r7, #12
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr

080115f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	460b      	mov	r3, r1
 8011602:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011604:	2300      	movs	r3, #0
 8011606:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011614:	78fb      	ldrb	r3, [r7, #3]
 8011616:	2b01      	cmp	r3, #1
 8011618:	d115      	bne.n	8011646 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011626:	200a      	movs	r0, #10
 8011628:	f7f1 fb2a 	bl	8002c80 <HAL_Delay>
      ms += 10U;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	330a      	adds	r3, #10
 8011630:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f000 fa36 	bl	8011aa4 <USB_GetMode>
 8011638:	4603      	mov	r3, r0
 801163a:	2b01      	cmp	r3, #1
 801163c:	d01e      	beq.n	801167c <USB_SetCurrentMode+0x84>
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2bc7      	cmp	r3, #199	@ 0xc7
 8011642:	d9f0      	bls.n	8011626 <USB_SetCurrentMode+0x2e>
 8011644:	e01a      	b.n	801167c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011646:	78fb      	ldrb	r3, [r7, #3]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d115      	bne.n	8011678 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011658:	200a      	movs	r0, #10
 801165a:	f7f1 fb11 	bl	8002c80 <HAL_Delay>
      ms += 10U;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	330a      	adds	r3, #10
 8011662:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f000 fa1d 	bl	8011aa4 <USB_GetMode>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d005      	beq.n	801167c <USB_SetCurrentMode+0x84>
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2bc7      	cmp	r3, #199	@ 0xc7
 8011674:	d9f0      	bls.n	8011658 <USB_SetCurrentMode+0x60>
 8011676:	e001      	b.n	801167c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011678:	2301      	movs	r3, #1
 801167a:	e005      	b.n	8011688 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2bc8      	cmp	r3, #200	@ 0xc8
 8011680:	d101      	bne.n	8011686 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011682:	2301      	movs	r3, #1
 8011684:	e000      	b.n	8011688 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011690:	b084      	sub	sp, #16
 8011692:	b580      	push	{r7, lr}
 8011694:	b086      	sub	sp, #24
 8011696:	af00      	add	r7, sp, #0
 8011698:	6078      	str	r0, [r7, #4]
 801169a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801169e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80116a2:	2300      	movs	r3, #0
 80116a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80116aa:	2300      	movs	r3, #0
 80116ac:	613b      	str	r3, [r7, #16]
 80116ae:	e009      	b.n	80116c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80116b0:	687a      	ldr	r2, [r7, #4]
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	3340      	adds	r3, #64	@ 0x40
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	4413      	add	r3, r2
 80116ba:	2200      	movs	r2, #0
 80116bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	3301      	adds	r3, #1
 80116c2:	613b      	str	r3, [r7, #16]
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	2b0e      	cmp	r3, #14
 80116c8:	d9f2      	bls.n	80116b0 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80116d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d11c      	bne.n	8011718 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	68fa      	ldr	r2, [r7, #12]
 80116e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80116ec:	f043 0302 	orr.w	r3, r3, #2
 80116f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011702:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801170e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	639a      	str	r2, [r3, #56]	@ 0x38
 8011716:	e011      	b.n	801173c <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801171c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011728:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011734:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011742:	461a      	mov	r2, r3
 8011744:	2300      	movs	r3, #0
 8011746:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8011748:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801174c:	2b03      	cmp	r3, #3
 801174e:	d10d      	bne.n	801176c <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011754:	2b00      	cmp	r3, #0
 8011756:	d104      	bne.n	8011762 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011758:	2100      	movs	r1, #0
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f000 f968 	bl	8011a30 <USB_SetDevSpeed>
 8011760:	e008      	b.n	8011774 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011762:	2101      	movs	r1, #1
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f000 f963 	bl	8011a30 <USB_SetDevSpeed>
 801176a:	e003      	b.n	8011774 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801176c:	2103      	movs	r1, #3
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 f95e 	bl	8011a30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011774:	2110      	movs	r1, #16
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 f8fa 	bl	8011970 <USB_FlushTxFifo>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d001      	beq.n	8011786 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8011782:	2301      	movs	r3, #1
 8011784:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f000 f924 	bl	80119d4 <USB_FlushRxFifo>
 801178c:	4603      	mov	r3, r0
 801178e:	2b00      	cmp	r3, #0
 8011790:	d001      	beq.n	8011796 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8011792:	2301      	movs	r3, #1
 8011794:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801179c:	461a      	mov	r2, r3
 801179e:	2300      	movs	r3, #0
 80117a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117a8:	461a      	mov	r2, r3
 80117aa:	2300      	movs	r3, #0
 80117ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117b4:	461a      	mov	r2, r3
 80117b6:	2300      	movs	r3, #0
 80117b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80117ba:	2300      	movs	r3, #0
 80117bc:	613b      	str	r3, [r7, #16]
 80117be:	e043      	b.n	8011848 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	015a      	lsls	r2, r3, #5
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	4413      	add	r3, r2
 80117c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80117d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80117d6:	d118      	bne.n	801180a <USB_DevInit+0x17a>
    {
      if (i == 0U)
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d10a      	bne.n	80117f4 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	015a      	lsls	r2, r3, #5
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	4413      	add	r3, r2
 80117e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117ea:	461a      	mov	r2, r3
 80117ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80117f0:	6013      	str	r3, [r2, #0]
 80117f2:	e013      	b.n	801181c <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	015a      	lsls	r2, r3, #5
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	4413      	add	r3, r2
 80117fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011800:	461a      	mov	r2, r3
 8011802:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011806:	6013      	str	r3, [r2, #0]
 8011808:	e008      	b.n	801181c <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	015a      	lsls	r2, r3, #5
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	4413      	add	r3, r2
 8011812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011816:	461a      	mov	r2, r3
 8011818:	2300      	movs	r3, #0
 801181a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	015a      	lsls	r2, r3, #5
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	4413      	add	r3, r2
 8011824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011828:	461a      	mov	r2, r3
 801182a:	2300      	movs	r3, #0
 801182c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	015a      	lsls	r2, r3, #5
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	4413      	add	r3, r2
 8011836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801183a:	461a      	mov	r2, r3
 801183c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011840:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	3301      	adds	r3, #1
 8011846:	613b      	str	r3, [r7, #16]
 8011848:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801184c:	461a      	mov	r2, r3
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	4293      	cmp	r3, r2
 8011852:	d3b5      	bcc.n	80117c0 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011854:	2300      	movs	r3, #0
 8011856:	613b      	str	r3, [r7, #16]
 8011858:	e043      	b.n	80118e2 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	015a      	lsls	r2, r3, #5
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	4413      	add	r3, r2
 8011862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801186c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011870:	d118      	bne.n	80118a4 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d10a      	bne.n	801188e <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	015a      	lsls	r2, r3, #5
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	4413      	add	r3, r2
 8011880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011884:	461a      	mov	r2, r3
 8011886:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801188a:	6013      	str	r3, [r2, #0]
 801188c:	e013      	b.n	80118b6 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	015a      	lsls	r2, r3, #5
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	4413      	add	r3, r2
 8011896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801189a:	461a      	mov	r2, r3
 801189c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80118a0:	6013      	str	r3, [r2, #0]
 80118a2:	e008      	b.n	80118b6 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	015a      	lsls	r2, r3, #5
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	4413      	add	r3, r2
 80118ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118b0:	461a      	mov	r2, r3
 80118b2:	2300      	movs	r3, #0
 80118b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	015a      	lsls	r2, r3, #5
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	4413      	add	r3, r2
 80118be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118c2:	461a      	mov	r2, r3
 80118c4:	2300      	movs	r3, #0
 80118c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	015a      	lsls	r2, r3, #5
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	4413      	add	r3, r2
 80118d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118d4:	461a      	mov	r2, r3
 80118d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80118da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	3301      	adds	r3, #1
 80118e0:	613b      	str	r3, [r7, #16]
 80118e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80118e6:	461a      	mov	r2, r3
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d3b5      	bcc.n	801185a <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118f4:	691b      	ldr	r3, [r3, #16]
 80118f6:	68fa      	ldr	r2, [r7, #12]
 80118f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80118fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011900:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2200      	movs	r2, #0
 8011906:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801190e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011910:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011914:	2b00      	cmp	r3, #0
 8011916:	d105      	bne.n	8011924 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	699b      	ldr	r3, [r3, #24]
 801191c:	f043 0210 	orr.w	r2, r3, #16
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	699a      	ldr	r2, [r3, #24]
 8011928:	4b10      	ldr	r3, [pc, #64]	@ (801196c <USB_DevInit+0x2dc>)
 801192a:	4313      	orrs	r3, r2
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011930:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011934:	2b00      	cmp	r3, #0
 8011936:	d005      	beq.n	8011944 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	699b      	ldr	r3, [r3, #24]
 801193c:	f043 0208 	orr.w	r2, r3, #8
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011944:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011948:	2b01      	cmp	r3, #1
 801194a:	d107      	bne.n	801195c <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	699b      	ldr	r3, [r3, #24]
 8011950:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011954:	f043 0304 	orr.w	r3, r3, #4
 8011958:	687a      	ldr	r2, [r7, #4]
 801195a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801195c:	7dfb      	ldrb	r3, [r7, #23]
}
 801195e:	4618      	mov	r0, r3
 8011960:	3718      	adds	r7, #24
 8011962:	46bd      	mov	sp, r7
 8011964:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011968:	b004      	add	sp, #16
 801196a:	4770      	bx	lr
 801196c:	803c3800 	.word	0x803c3800

08011970 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011970:	b480      	push	{r7}
 8011972:	b085      	sub	sp, #20
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801197a:	2300      	movs	r3, #0
 801197c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	3301      	adds	r3, #1
 8011982:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801198a:	d901      	bls.n	8011990 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801198c:	2303      	movs	r3, #3
 801198e:	e01b      	b.n	80119c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	691b      	ldr	r3, [r3, #16]
 8011994:	2b00      	cmp	r3, #0
 8011996:	daf2      	bge.n	801197e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011998:	2300      	movs	r3, #0
 801199a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	019b      	lsls	r3, r3, #6
 80119a0:	f043 0220 	orr.w	r2, r3, #32
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	3301      	adds	r3, #1
 80119ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80119b4:	d901      	bls.n	80119ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80119b6:	2303      	movs	r3, #3
 80119b8:	e006      	b.n	80119c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	691b      	ldr	r3, [r3, #16]
 80119be:	f003 0320 	and.w	r3, r3, #32
 80119c2:	2b20      	cmp	r3, #32
 80119c4:	d0f0      	beq.n	80119a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80119c6:	2300      	movs	r3, #0
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3714      	adds	r7, #20
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr

080119d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80119d4:	b480      	push	{r7}
 80119d6:	b085      	sub	sp, #20
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80119dc:	2300      	movs	r3, #0
 80119de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	3301      	adds	r3, #1
 80119e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80119ec:	d901      	bls.n	80119f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80119ee:	2303      	movs	r3, #3
 80119f0:	e018      	b.n	8011a24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	691b      	ldr	r3, [r3, #16]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	daf2      	bge.n	80119e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80119fa:	2300      	movs	r3, #0
 80119fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2210      	movs	r2, #16
 8011a02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	3301      	adds	r3, #1
 8011a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a10:	d901      	bls.n	8011a16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011a12:	2303      	movs	r3, #3
 8011a14:	e006      	b.n	8011a24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	691b      	ldr	r3, [r3, #16]
 8011a1a:	f003 0310 	and.w	r3, r3, #16
 8011a1e:	2b10      	cmp	r3, #16
 8011a20:	d0f0      	beq.n	8011a04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011a22:	2300      	movs	r3, #0
}
 8011a24:	4618      	mov	r0, r3
 8011a26:	3714      	adds	r7, #20
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr

08011a30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011a30:	b480      	push	{r7}
 8011a32:	b085      	sub	sp, #20
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	460b      	mov	r3, r1
 8011a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	78fb      	ldrb	r3, [r7, #3]
 8011a4a:	68f9      	ldr	r1, [r7, #12]
 8011a4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011a50:	4313      	orrs	r3, r2
 8011a52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011a54:	2300      	movs	r3, #0
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3714      	adds	r7, #20
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a60:	4770      	bx	lr

08011a62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011a62:	b480      	push	{r7}
 8011a64:	b085      	sub	sp, #20
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	68fa      	ldr	r2, [r7, #12]
 8011a78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011a7c:	f023 0303 	bic.w	r3, r3, #3
 8011a80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	68fa      	ldr	r2, [r7, #12]
 8011a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011a90:	f043 0302 	orr.w	r3, r3, #2
 8011a94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011a96:	2300      	movs	r3, #0
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3714      	adds	r7, #20
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa2:	4770      	bx	lr

08011aa4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b083      	sub	sp, #12
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	695b      	ldr	r3, [r3, #20]
 8011ab0:	f003 0301 	and.w	r3, r3, #1
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	370c      	adds	r7, #12
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr

08011ac0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b085      	sub	sp, #20
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	3301      	adds	r3, #1
 8011ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011ad8:	d901      	bls.n	8011ade <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011ada:	2303      	movs	r3, #3
 8011adc:	e01b      	b.n	8011b16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	691b      	ldr	r3, [r3, #16]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	daf2      	bge.n	8011acc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	691b      	ldr	r3, [r3, #16]
 8011aee:	f043 0201 	orr.w	r2, r3, #1
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	3301      	adds	r3, #1
 8011afa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b02:	d901      	bls.n	8011b08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011b04:	2303      	movs	r3, #3
 8011b06:	e006      	b.n	8011b16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	691b      	ldr	r3, [r3, #16]
 8011b0c:	f003 0301 	and.w	r3, r3, #1
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d0f0      	beq.n	8011af6 <USB_CoreReset+0x36>

  return HAL_OK;
 8011b14:	2300      	movs	r3, #0
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3714      	adds	r7, #20
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b20:	4770      	bx	lr

08011b22 <memset>:
 8011b22:	4402      	add	r2, r0
 8011b24:	4603      	mov	r3, r0
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d100      	bne.n	8011b2c <memset+0xa>
 8011b2a:	4770      	bx	lr
 8011b2c:	f803 1b01 	strb.w	r1, [r3], #1
 8011b30:	e7f9      	b.n	8011b26 <memset+0x4>
	...

08011b34 <__libc_init_array>:
 8011b34:	b570      	push	{r4, r5, r6, lr}
 8011b36:	4d0d      	ldr	r5, [pc, #52]	@ (8011b6c <__libc_init_array+0x38>)
 8011b38:	2600      	movs	r6, #0
 8011b3a:	4c0d      	ldr	r4, [pc, #52]	@ (8011b70 <__libc_init_array+0x3c>)
 8011b3c:	1b64      	subs	r4, r4, r5
 8011b3e:	10a4      	asrs	r4, r4, #2
 8011b40:	42a6      	cmp	r6, r4
 8011b42:	d109      	bne.n	8011b58 <__libc_init_array+0x24>
 8011b44:	4d0b      	ldr	r5, [pc, #44]	@ (8011b74 <__libc_init_array+0x40>)
 8011b46:	2600      	movs	r6, #0
 8011b48:	4c0b      	ldr	r4, [pc, #44]	@ (8011b78 <__libc_init_array+0x44>)
 8011b4a:	f000 f817 	bl	8011b7c <_init>
 8011b4e:	1b64      	subs	r4, r4, r5
 8011b50:	10a4      	asrs	r4, r4, #2
 8011b52:	42a6      	cmp	r6, r4
 8011b54:	d105      	bne.n	8011b62 <__libc_init_array+0x2e>
 8011b56:	bd70      	pop	{r4, r5, r6, pc}
 8011b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b5c:	3601      	adds	r6, #1
 8011b5e:	4798      	blx	r3
 8011b60:	e7ee      	b.n	8011b40 <__libc_init_array+0xc>
 8011b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b66:	3601      	adds	r6, #1
 8011b68:	4798      	blx	r3
 8011b6a:	e7f2      	b.n	8011b52 <__libc_init_array+0x1e>
 8011b6c:	08011c9c 	.word	0x08011c9c
 8011b70:	08011c9c 	.word	0x08011c9c
 8011b74:	08011c9c 	.word	0x08011c9c
 8011b78:	08011ca0 	.word	0x08011ca0

08011b7c <_init>:
 8011b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b7e:	bf00      	nop
 8011b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b82:	bc08      	pop	{r3}
 8011b84:	469e      	mov	lr, r3
 8011b86:	4770      	bx	lr

08011b88 <_fini>:
 8011b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b8a:	bf00      	nop
 8011b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b8e:	bc08      	pop	{r3}
 8011b90:	469e      	mov	lr, r3
 8011b92:	4770      	bx	lr
