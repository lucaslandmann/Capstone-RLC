
RLCMixer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112fc  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011570  08011570  00012570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011670  08011670  0001300c  2**0
                  CONTENTS
  4 .ARM          00000008  08011670  08011670  00012670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011678  08011678  0001300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011678  08011678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801167c  0801167c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08011680  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002044  2000000c  0801168c  0001300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002050  0801168c  00013050  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c90  00000000  00000000  00013042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d1c  00000000  00000000  00044cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab8  00000000  00000000  000499f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002182  00000000  00000000  0004c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047326  00000000  00000000  0004e62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035d16  00000000  00000000  00095950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bca25  00000000  00000000  000cb666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0028808b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bde0  00000000  00000000  002880d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00293eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	08011558 	.word	0x08011558

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	08011558 	.word	0x08011558

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 fcf7 	bl	8002fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8d7 	bl	8000788 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f941 	bl	8000860 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f976 	bl	80008ce <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fee7 	bl	80013b4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fb75 	bl	8000cd4 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb35 	bl	8000c58 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fba9 	bl	8000d44 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc25 	bl	8000e40 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc63 	bl	8000ec0 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fc75 	bl	8000ee8 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fcf3 	bl	8000fe8 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fdab 	bl	800115c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f971 	bl	80008ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe59 	bl	80012c0 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd39 	bl	8001084 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 faa5 	bl	8000b60 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fbd3 	bl	8000dc0 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 fe9d 	bl	8001358 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800061e:	f000 fdff 	bl	8001220 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  //Begins DMA transfer for first ADC
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1));
 8000622:	220d      	movs	r2, #13
 8000624:	494c      	ldr	r1, [pc, #304]	@ (8000758 <main+0x18c>)
 8000626:	484d      	ldr	r0, [pc, #308]	@ (800075c <main+0x190>)
 8000628:	f003 fc18 	bl	8003e5c <HAL_ADC_Start_DMA>
  //begins DMA transfer for fourth ADC
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4));
 800062c:	2202      	movs	r2, #2
 800062e:	494c      	ldr	r1, [pc, #304]	@ (8000760 <main+0x194>)
 8000630:	484c      	ldr	r0, [pc, #304]	@ (8000764 <main+0x198>)
 8000632:	f003 fc13 	bl	8003e5c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000636:	484c      	ldr	r0, [pc, #304]	@ (8000768 <main+0x19c>)
 8000638:	f00e f918 	bl	800e86c <HAL_TIM_Base_Start>
  */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t heartBeatTick = HAL_GetTick() + 1000;
 800063c:	f002 fd7c 	bl	8003138 <HAL_GetTick>
 8000640:	4603      	mov	r3, r0
 8000642:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000646:	617b      	str	r3, [r7, #20]
  uint16_t index = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	827b      	strh	r3, [r7, #18]
  while (1)
  {
	  if(HAL_GetTick() >= heartBeatTick)
 800064c:	f002 fd74 	bl	8003138 <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	4293      	cmp	r3, r2
 8000656:	d809      	bhi.n	800066c <main+0xa0>
	  {
		 heartBeatTick = HAL_GetTick() + 1000;
 8000658:	f002 fd6e 	bl	8003138 <HAL_GetTick>
 800065c:	4603      	mov	r3, r0
 800065e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000662:	617b      	str	r3, [r7, #20]
		 HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000664:	2104      	movs	r1, #4
 8000666:	4841      	ldr	r0, [pc, #260]	@ (800076c <main+0x1a0>)
 8000668:	f007 fbaa 	bl	8007dc0 <HAL_GPIO_TogglePin>
	  }

	  //Slider/Pot Processing
	  volumeLRPoll(index);
 800066c:	8a7b      	ldrh	r3, [r7, #18]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ffec 	bl	800164c <volumeLRPoll>
	  index++;
 8000674:	8a7b      	ldrh	r3, [r7, #18]
 8000676:	3301      	adds	r3, #1
 8000678:	827b      	strh	r3, [r7, #18]


	  if(adcReady)
 800067a:	4b3d      	ldr	r3, [pc, #244]	@ (8000770 <main+0x1a4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d02a      	beq.n	80006da <main+0x10e>
	  {
		  //Loads sample data into Structs
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 8000684:	2300      	movs	r3, #0
 8000686:	823b      	strh	r3, [r7, #16]
 8000688:	e021      	b.n	80006ce <main+0x102>
		  {
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 800068a:	2300      	movs	r3, #0
 800068c:	81fb      	strh	r3, [r7, #14]
 800068e:	e018      	b.n	80006c2 <main+0xf6>
		        {
		        	//int32_t raw = adcData[channelCount*sample + channel] >> 1;
		        	//float convert = (float)raw / 16777216.0f;
		            channels[channel].channelData[sample] = signExtend24((uint32_t)(adcData[channelCount*sample + channel]));
 8000690:	4b38      	ldr	r3, [pc, #224]	@ (8000774 <main+0x1a8>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	89fb      	ldrh	r3, [r7, #14]
 8000696:	00d9      	lsls	r1, r3, #3
 8000698:	8a3b      	ldrh	r3, [r7, #16]
 800069a:	440b      	add	r3, r1
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	8a3d      	ldrh	r5, [r7, #16]
 80006a4:	89fc      	ldrh	r4, [r7, #14]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 ffba 	bl	8001620 <signExtend24>
 80006ac:	4602      	mov	r2, r0
 80006ae:	4932      	ldr	r1, [pc, #200]	@ (8000778 <main+0x1ac>)
 80006b0:	2396      	movs	r3, #150	@ 0x96
 80006b2:	fb05 f303 	mul.w	r3, r5, r3
 80006b6:	4423      	add	r3, r4
 80006b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		        for (uint16_t sample = 0; sample < (sampleSize / 2); sample++)
 80006bc:	89fb      	ldrh	r3, [r7, #14]
 80006be:	3301      	adds	r3, #1
 80006c0:	81fb      	strh	r3, [r7, #14]
 80006c2:	89fb      	ldrh	r3, [r7, #14]
 80006c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80006c6:	d9e3      	bls.n	8000690 <main+0xc4>
		  for (uint16_t channel = 0; channel < channelCount; channel++)
 80006c8:	8a3b      	ldrh	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	823b      	strh	r3, [r7, #16]
 80006ce:	8a3b      	ldrh	r3, [r7, #16]
 80006d0:	2b07      	cmp	r3, #7
 80006d2:	d9da      	bls.n	800068a <main+0xbe>
		        }
		  }
		  //TODO: apply effects
		  //TODO: mix
		  adcReady = false;
 80006d4:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0x1a4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
	  }
	  if(dacReady)
 80006da:	4b28      	ldr	r3, [pc, #160]	@ (800077c <main+0x1b0>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0b3      	beq.n	800064c <main+0x80>
	  {
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 80006e4:	2300      	movs	r3, #0
 80006e6:	81bb      	strh	r3, [r7, #12]
 80006e8:	e02f      	b.n	800074a <main+0x17e>
		  {
			  int32_t mixedSignal = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	80fb      	strh	r3, [r7, #6]
 80006f2:	e00e      	b.n	8000712 <main+0x146>
			  {
				  mixedSignal += channels[currChannel].channelData[sample];
 80006f4:	88fa      	ldrh	r2, [r7, #6]
 80006f6:	89bb      	ldrh	r3, [r7, #12]
 80006f8:	491f      	ldr	r1, [pc, #124]	@ (8000778 <main+0x1ac>)
 80006fa:	2096      	movs	r0, #150	@ 0x96
 80006fc:	fb00 f202 	mul.w	r2, r0, r2
 8000700:	4413      	add	r3, r2
 8000702:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	4413      	add	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
			  for(uint16_t currChannel = 0; currChannel < 6; currChannel ++)
 800070c:	88fb      	ldrh	r3, [r7, #6]
 800070e:	3301      	adds	r3, #1
 8000710:	80fb      	strh	r3, [r7, #6]
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	2b05      	cmp	r3, #5
 8000716:	d9ed      	bls.n	80006f4 <main+0x128>
			  }
			  mixedSignal = mixedSignal / 6;
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	4a19      	ldr	r2, [pc, #100]	@ (8000780 <main+0x1b4>)
 800071c:	fb82 1203 	smull	r1, r2, r2, r3
 8000720:	17db      	asrs	r3, r3, #31
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	60bb      	str	r3, [r7, #8]
			  dacData[(sample * 2)] =  mixedSignal;//channels[0].channelData[sample];
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <main+0x1b8>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	89bb      	ldrh	r3, [r7, #12]
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	4413      	add	r3, r2
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	601a      	str	r2, [r3, #0]
			  dacData[(sample * 2) + 1] = mixedSignal;//channels[0].channelData[sample];
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <main+0x1b8>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	89bb      	ldrh	r3, [r7, #12]
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	3304      	adds	r3, #4
 800073e:	4413      	add	r3, r2
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	601a      	str	r2, [r3, #0]
		  for(uint16_t sample = 0; sample < sampleSize / 2; sample++)
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	3301      	adds	r3, #1
 8000748:	81bb      	strh	r3, [r7, #12]
 800074a:	89bb      	ldrh	r3, [r7, #12]
 800074c:	2b7f      	cmp	r3, #127	@ 0x7f
 800074e:	d9cc      	bls.n	80006ea <main+0x11e>
		  }
		  dacReady = false;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <main+0x1b0>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() >= heartBeatTick)
 8000756:	e779      	b.n	800064c <main+0x80>
 8000758:	20000d5c 	.word	0x20000d5c
 800075c:	20000028 	.word	0x20000028
 8000760:	20000d78 	.word	0x20000d78
 8000764:	200000b4 	.word	0x200000b4
 8000768:	20000798 	.word	0x20000798
 800076c:	42020c00 	.word	0x42020c00
 8000770:	2000203c 	.word	0x2000203c
 8000774:	20002040 	.word	0x20002040
 8000778:	20000d7c 	.word	0x20000d7c
 800077c:	2000203d 	.word	0x2000203d
 8000780:	2aaaaaab 	.word	0x2aaaaaab
 8000784:	20002044 	.word	0x20002044

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b09e      	sub	sp, #120	@ 0x78
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	2260      	movs	r2, #96	@ 0x60
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f010 feb1 	bl	80114fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ac:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007b0:	f008 ff52 	bl	8009658 <HAL_PWREx_ControlVoltageScaling>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007ba:	f001 fa31 	bl	8001c20 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007be:	f008 ff3b 	bl	8009638 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007c2:	4b26      	ldr	r3, [pc, #152]	@ (800085c <SystemClock_Config+0xd4>)
 80007c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80007c8:	4a24      	ldr	r2, [pc, #144]	@ (800085c <SystemClock_Config+0xd4>)
 80007ca:	f023 0318 	bic.w	r3, r3, #24
 80007ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007d2:	2307      	movs	r3, #7
 80007d4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007dc:	2381      	movs	r3, #129	@ 0x81
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e6:	2310      	movs	r3, #16
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	2303      	movs	r3, #3
 80007f0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007fa:	2308      	movs	r3, #8
 80007fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 80007fe:	2308      	movs	r3, #8
 8000800:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800080a:	230c      	movs	r3, #12
 800080c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0318 	add.w	r3, r7, #24
 8000816:	4618      	mov	r0, r3
 8000818:	f009 f848 	bl	80098ac <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000822:	f001 f9fd 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	231f      	movs	r3, #31
 8000828:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2303      	movs	r3, #3
 800082c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	2103      	movs	r1, #3
 8000842:	4618      	mov	r0, r3
 8000844:	f009 ff0e 	bl	800a664 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800084e:	f001 f9e7 	bl	8001c20 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3778      	adds	r7, #120	@ 0x78
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	46020c00 	.word	0x46020c00

08000860 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b0b8      	sub	sp, #224	@ 0xe0
 8000864:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	22e0      	movs	r2, #224	@ 0xe0
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f010 fe46 	bl	80114fe <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8000872:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000876:	f04f 0301 	mov.w	r3, #1
 800087a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000884:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 800088c:	2303      	movs	r3, #3
 800088e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8000894:	230c      	movs	r3, #12
 8000896:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 800089c:	2303      	movs	r3, #3
 800089e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80008a4:	230c      	movs	r3, #12
 80008a6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 80008a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 80008ae:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4618      	mov	r0, r3
 80008b8:	f00a faa4 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 80008c2:	f001 f9ad 	bl	8001c20 <Error_Handler>
  }
}
 80008c6:	bf00      	nop
 80008c8:	37e0      	adds	r7, #224	@ 0xe0
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008d2:	f008 ffad 	bl	8009830 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008d6:	2002      	movs	r0, #2
 80008d8:	f008 ff4a 	bl	8009770 <HAL_PWREx_ConfigSupply>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80008e2:	f001 f99d 	bl	8001c20 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2220      	movs	r2, #32
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f010 fe00 	bl	80114fe <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fe:	4b89      	ldr	r3, [pc, #548]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000900:	4a89      	ldr	r2, [pc, #548]	@ (8000b28 <MX_ADC1_Init+0x23c>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000904:	4b87      	ldr	r3, [pc, #540]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090a:	4b86      	ldr	r3, [pc, #536]	@ (8000b24 <MX_ADC1_Init+0x238>)
 800090c:	2204      	movs	r2, #4
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000910:	4b84      	ldr	r3, [pc, #528]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000916:	4b83      	ldr	r3, [pc, #524]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800091c:	4b81      	ldr	r3, [pc, #516]	@ (8000b24 <MX_ADC1_Init+0x238>)
 800091e:	2201      	movs	r2, #1
 8000920:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000922:	4b80      	ldr	r3, [pc, #512]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000924:	2204      	movs	r2, #4
 8000926:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000928:	4b7e      	ldr	r3, [pc, #504]	@ (8000b24 <MX_ADC1_Init+0x238>)
 800092a:	2201      	movs	r2, #1
 800092c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800092e:	4b7d      	ldr	r3, [pc, #500]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000930:	2201      	movs	r2, #1
 8000932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000936:	4b7b      	ldr	r3, [pc, #492]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000938:	220d      	movs	r2, #13
 800093a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800093c:	4b79      	ldr	r3, [pc, #484]	@ (8000b24 <MX_ADC1_Init+0x238>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000944:	4b77      	ldr	r3, [pc, #476]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000946:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 800094a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800094c:	4b75      	ldr	r3, [pc, #468]	@ (8000b24 <MX_ADC1_Init+0x238>)
 800094e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000952:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000954:	4b73      	ldr	r3, [pc, #460]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000956:	2201      	movs	r2, #1
 8000958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800095c:	4b71      	ldr	r3, [pc, #452]	@ (8000b24 <MX_ADC1_Init+0x238>)
 800095e:	2200      	movs	r2, #0
 8000960:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000962:	4b70      	ldr	r3, [pc, #448]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000964:	2200      	movs	r2, #0
 8000966:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000968:	4b6e      	ldr	r3, [pc, #440]	@ (8000b24 <MX_ADC1_Init+0x238>)
 800096a:	2200      	movs	r2, #0
 800096c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800096e:	4b6d      	ldr	r3, [pc, #436]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000970:	2203      	movs	r2, #3
 8000972:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000974:	4b6b      	ldr	r3, [pc, #428]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097c:	4869      	ldr	r0, [pc, #420]	@ (8000b24 <MX_ADC1_Init+0x238>)
 800097e:	f002 ff85 	bl	800388c <HAL_ADC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000988:	f001 f94a 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800098c:	4b67      	ldr	r3, [pc, #412]	@ (8000b2c <MX_ADC1_Init+0x240>)
 800098e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000990:	2306      	movs	r3, #6
 8000992:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800099c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800099e:	2304      	movs	r3, #4
 80009a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	485e      	ldr	r0, [pc, #376]	@ (8000b24 <MX_ADC1_Init+0x238>)
 80009ac:	f003 fe9c 	bl	80046e8 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80009b6:	f001 f933 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000b30 <MX_ADC1_Init+0x244>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009be:	230c      	movs	r3, #12
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4857      	ldr	r0, [pc, #348]	@ (8000b24 <MX_ADC1_Init+0x238>)
 80009c8:	f003 fe8e 	bl	80046e8 <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80009d2:	f001 f925 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009d6:	4b57      	ldr	r3, [pc, #348]	@ (8000b34 <MX_ADC1_Init+0x248>)
 80009d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009da:	2312      	movs	r3, #18
 80009dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4850      	ldr	r0, [pc, #320]	@ (8000b24 <MX_ADC1_Init+0x238>)
 80009e4:	f003 fe80 	bl	80046e8 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80009ee:	f001 f917 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009f2:	4b51      	ldr	r3, [pc, #324]	@ (8000b38 <MX_ADC1_Init+0x24c>)
 80009f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009f6:	2318      	movs	r3, #24
 80009f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	4849      	ldr	r0, [pc, #292]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000a00:	f003 fe72 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a0a:	f001 f909 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b3c <MX_ADC1_Init+0x250>)
 8000a10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4841      	ldr	r0, [pc, #260]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000a1e:	f003 fe63 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000a28:	f001 f8fa 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a2c:	4b44      	ldr	r3, [pc, #272]	@ (8000b40 <MX_ADC1_Init+0x254>)
 8000a2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a30:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	483a      	ldr	r0, [pc, #232]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000a3c:	f003 fe54 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000a46:	f001 f8eb 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b44 <MX_ADC1_Init+0x258>)
 8000a4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a4e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000a52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4832      	ldr	r0, [pc, #200]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000a5a:	f003 fe45 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000a64:	f001 f8dc 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a68:	4b37      	ldr	r3, [pc, #220]	@ (8000b48 <MX_ADC1_Init+0x25c>)
 8000a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a6c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000a70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	4619      	mov	r1, r3
 8000a76:	482b      	ldr	r0, [pc, #172]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000a78:	f003 fe36 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000a82:	f001 f8cd 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a86:	4b31      	ldr	r3, [pc, #196]	@ (8000b4c <MX_ADC1_Init+0x260>)
 8000a88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000a8a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000a8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	4823      	ldr	r0, [pc, #140]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000a96:	f003 fe27 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000aa0:	f001 f8be 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b50 <MX_ADC1_Init+0x264>)
 8000aa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000aa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481c      	ldr	r0, [pc, #112]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000ab4:	f003 fe18 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000abe:	f001 f8af 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ac2:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <MX_ADC1_Init+0x268>)
 8000ac4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000ac6:	f240 2306 	movw	r3, #518	@ 0x206
 8000aca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4814      	ldr	r0, [pc, #80]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000ad2:	f003 fe09 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000adc:	f001 f8a0 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_ADC1_Init+0x26c>)
 8000ae2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000ae4:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000ae8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	4619      	mov	r1, r3
 8000aee:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000af0:	f003 fdfa 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000afa:	f001 f891 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_ADC1_Init+0x270>)
 8000b00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b02:	f240 2312 	movw	r3, #530	@ 0x212
 8000b06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000b0e:	f003 fdeb 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000b18:	f001 f882 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000028 	.word	0x20000028
 8000b28:	42028000 	.word	0x42028000
 8000b2c:	04000002 	.word	0x04000002
 8000b30:	08000004 	.word	0x08000004
 8000b34:	0c000008 	.word	0x0c000008
 8000b38:	10000010 	.word	0x10000010
 8000b3c:	14000020 	.word	0x14000020
 8000b40:	1c000080 	.word	0x1c000080
 8000b44:	20000100 	.word	0x20000100
 8000b48:	2a000400 	.word	0x2a000400
 8000b4c:	2e000800 	.word	0x2e000800
 8000b50:	32001000 	.word	0x32001000
 8000b54:	3e008000 	.word	0x3e008000
 8000b58:	42010000 	.word	0x42010000
 8000b5c:	ce080000 	.word	0xce080000

08000b60 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2220      	movs	r2, #32
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f010 fcc6 	bl	80114fe <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b72:	4b35      	ldr	r3, [pc, #212]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000b74:	4a35      	ldr	r2, [pc, #212]	@ (8000c4c <MX_ADC4_Init+0xec>)
 8000b76:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b78:	4b33      	ldr	r3, [pc, #204]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7e:	4b32      	ldr	r3, [pc, #200]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000b80:	2204      	movs	r2, #4
 8000b82:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b84:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000b8c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b90:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000b94:	2204      	movs	r2, #4
 8000b96:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000b98:	4b2b      	ldr	r3, [pc, #172]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000bac:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000bae:	2202      	movs	r2, #2
 8000bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC4_EXTERNALTRIG_T15_TRGO;
 8000bb2:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000bb4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8000bb8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bba:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000bbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000bca:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000bcc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000bd0:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000bec:	4816      	ldr	r0, [pc, #88]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000bee:	f002 fe4d 	bl	800388c <HAL_ADC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC4_Init+0x9c>
  {
    Error_Handler();
 8000bf8:	f001 f812 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_ADC4_Init+0xf0>)
 8000bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000c16:	f003 fd67 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC4_Init+0xc4>
  {
    Error_Handler();
 8000c20:	f000 fffe 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <MX_ADC4_Init+0xf4>)
 8000c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_ADC4_Init+0xe8>)
 8000c32:	f003 fd59 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC4_Init+0xe0>
  {
    Error_Handler();
 8000c3c:	f000 fff0 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200000b4 	.word	0x200000b4
 8000c4c:	46021000 	.word	0x46021000
 8000c50:	1c000080 	.word	0x1c000080
 8000c54:	20000100 	.word	0x20000100

08000c58 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd0 <MX_DMA2D_Init+0x78>)
 8000c60:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ca4:	4809      	ldr	r0, [pc, #36]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000ca6:	f005 fca9 	bl	80065fc <HAL_DMA2D_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000cb0:	f000 ffb6 	bl	8001c20 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_DMA2D_Init+0x74>)
 8000cb8:	f005 fd02 	bl	80066c0 <HAL_DMA2D_ConfigLayer>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000cc2:	f000 ffad 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000026c 	.word	0x2000026c
 8000cd0:	4002b000 	.word	0x4002b000

08000cd4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000cda:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <MX_GPDMA1_Init+0x6c>)
 8000cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce0:	4a17      	ldr	r2, [pc, #92]	@ (8000d40 <MX_GPDMA1_Init+0x6c>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <MX_GPDMA1_Init+0x6c>)
 8000cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	201d      	movs	r0, #29
 8000cfe:	f004 fd1f 	bl	8005740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d02:	201d      	movs	r0, #29
 8000d04:	f004 fd36 	bl	8005774 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	201e      	movs	r0, #30
 8000d0e:	f004 fd17 	bl	8005740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d12:	201e      	movs	r0, #30
 8000d14:	f004 fd2e 	bl	8005774 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	201f      	movs	r0, #31
 8000d1e:	f004 fd0f 	bl	8005740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d22:	201f      	movs	r0, #31
 8000d24:	f004 fd26 	bl	8005774 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2020      	movs	r0, #32
 8000d2e:	f004 fd07 	bl	8005740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d32:	2020      	movs	r0, #32
 8000d34:	f004 fd1e 	bl	8005774 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	46020c00 	.word	0x46020c00

08000d44 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dbc <MX_HSPI1_Init+0x78>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d50:	2204      	movs	r2, #4
 8000d52:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000d54:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d60:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d64:	221a      	movs	r2, #26
 8000d66:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000d74:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000d98:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <MX_HSPI1_Init+0x74>)
 8000da6:	f00f ff43 	bl	8010c30 <HAL_XSPI_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000db0:	f000 ff36 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200002d4 	.word	0x200002d4
 8000dbc:	420d3400 	.word	0x420d3400

08000dc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e38 <MX_I2C1_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e3c <MX_I2C1_Init+0x7c>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000de2:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dfa:	480e      	ldr	r0, [pc, #56]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000dfc:	f007 f836 	bl	8007e6c <HAL_I2C_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e06:	f000 ff0b 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4809      	ldr	r0, [pc, #36]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000e0e:	f007 fed8 	bl	8008bc2 <HAL_I2CEx_ConfigAnalogFilter>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e18:	f000 ff02 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <MX_I2C1_Init+0x74>)
 8000e20:	f007 ff1a 	bl	8008c58 <HAL_I2CEx_ConfigDigitalFilter>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 fef9 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000334 	.word	0x20000334
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	20a0c4df 	.word	0x20a0c4df

08000e40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb8 <MX_I2C2_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <MX_I2C2_Init+0x7c>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e50:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e7a:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e7c:	f006 fff6 	bl	8007e6c <HAL_I2C_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e86:	f000 fecb 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000e8e:	f007 fe98 	bl	8008bc2 <HAL_I2CEx_ConfigAnalogFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e98:	f000 fec2 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_I2C2_Init+0x74>)
 8000ea0:	f007 feda 	bl	8008c58 <HAL_I2CEx_ConfigDigitalFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f000 feb9 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000388 	.word	0x20000388
 8000eb8:	40005800 	.word	0x40005800
 8000ebc:	20a0c4df 	.word	0x20a0c4df

08000ec0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f007 ff13 	bl	8008cf0 <HAL_ICACHE_ConfigAssociativityMode>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ed0:	f000 fea6 	bl	8001c20 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ed4:	f007 ff2c 	bl	8008d30 <HAL_ICACHE_Enable>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000ede:	f000 fe9f 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	@ 0x38
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2234      	movs	r2, #52	@ 0x34
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f010 fb02 	bl	80114fe <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000efa:	4b39      	ldr	r3, [pc, #228]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000efc:	4a39      	ldr	r2, [pc, #228]	@ (8000fe4 <MX_LTDC_Init+0xfc>)
 8000efe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f00:	4b37      	ldr	r3, [pc, #220]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f06:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f0c:	4b34      	ldr	r3, [pc, #208]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f12:	4b33      	ldr	r3, [pc, #204]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f18:	4b31      	ldr	r3, [pc, #196]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f1e:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f20:	2203      	movs	r2, #3
 8000f22:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000f24:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f26:	220b      	movs	r2, #11
 8000f28:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f2c:	220b      	movs	r2, #11
 8000f2e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f32:	f240 322b 	movw	r2, #811	@ 0x32b
 8000f36:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000f38:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f3a:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000f40:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f42:	f240 3233 	movw	r2, #819	@ 0x333
 8000f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f4a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f50:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f58:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f68:	481d      	ldr	r0, [pc, #116]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000f6a:	f007 fef1 	bl	8008d50 <HAL_LTDC_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f74:	f000 fe54 	bl	8001c20 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000f7c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f80:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000f86:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000f8a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f90:	23ff      	movs	r3, #255	@ 0xff
 8000f92:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f98:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f9c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <MX_LTDC_Init+0xf8>)
 8000fc8:	f008 f854 	bl	8009074 <HAL_LTDC_ConfigLayer>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000fd2:	f000 fe25 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3738      	adds	r7, #56	@ 0x38
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200003dc 	.word	0x200003dc
 8000fe4:	40016800 	.word	0x40016800

08000fe8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001000:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <MX_RTC_Init+0x94>)
 8001002:	4a1f      	ldr	r2, [pc, #124]	@ (8001080 <MX_RTC_Init+0x98>)
 8001004:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <MX_RTC_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <MX_RTC_Init+0x94>)
 800100e:	227f      	movs	r2, #127	@ 0x7f
 8001010:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_RTC_Init+0x94>)
 8001014:	22ff      	movs	r2, #255	@ 0xff
 8001016:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <MX_RTC_Init+0x94>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <MX_RTC_Init+0x94>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <MX_RTC_Init+0x94>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <MX_RTC_Init+0x94>)
 800102c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001030:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <MX_RTC_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001038:	4b10      	ldr	r3, [pc, #64]	@ (800107c <MX_RTC_Init+0x94>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800103e:	480f      	ldr	r0, [pc, #60]	@ (800107c <MX_RTC_Init+0x94>)
 8001040:	f00c fedc 	bl	800ddfc <HAL_RTC_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800104a:	f000 fde9 	bl	8001c20 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	@ (800107c <MX_RTC_Init+0x94>)
 8001064:	f00c fff8 	bl	800e058 <HAL_RTCEx_PrivilegeModeSet>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800106e:	f000 fdd7 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000484 	.word	0x20000484
 8001080:	46007800 	.word	0x46007800

08001084 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001088:	4b30      	ldr	r3, [pc, #192]	@ (800114c <MX_SAI2_Init+0xc8>)
 800108a:	4a31      	ldr	r2, [pc, #196]	@ (8001150 <MX_SAI2_Init+0xcc>)
 800108c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800108e:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <MX_SAI2_Init+0xc8>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001094:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <MX_SAI2_Init+0xc8>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800109a:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <MX_SAI2_Init+0xc8>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010a0:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <MX_SAI2_Init+0xc8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010a6:	4b29      	ldr	r3, [pc, #164]	@ (800114c <MX_SAI2_Init+0xc8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <MX_SAI2_Init+0xc8>)
 80010ae:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80010b2:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <MX_SAI2_Init+0xc8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80010ba:	4b24      	ldr	r3, [pc, #144]	@ (800114c <MX_SAI2_Init+0xc8>)
 80010bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010c0:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <MX_SAI2_Init+0xc8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010c8:	4b20      	ldr	r3, [pc, #128]	@ (800114c <MX_SAI2_Init+0xc8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <MX_SAI2_Init+0xc8>)
 80010d0:	2210      	movs	r2, #16
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80010d4:	2302      	movs	r3, #2
 80010d6:	2202      	movs	r2, #2
 80010d8:	2101      	movs	r1, #1
 80010da:	481c      	ldr	r0, [pc, #112]	@ (800114c <MX_SAI2_Init+0xc8>)
 80010dc:	f00c ffea 	bl	800e0b4 <HAL_SAI_InitProtocol>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_SAI2_Init+0x66>
  {
    Error_Handler();
 80010e6:	f000 fd9b 	bl	8001c20 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <MX_SAI2_Init+0xd0>)
 80010ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001158 <MX_SAI2_Init+0xd4>)
 80010ee:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_SAI2_Init+0xd0>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_SAI2_Init+0xd0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <MX_SAI2_Init+0xd0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_SAI2_Init+0xd0>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_SAI2_Init+0xd0>)
 800110a:	2202      	movs	r2, #2
 800110c:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_SAI2_Init+0xd0>)
 8001110:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001114:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_SAI2_Init+0xd0>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_SAI2_Init+0xd0>)
 800111e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001122:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_SAI2_Init+0xd0>)
 8001126:	2200      	movs	r2, #0
 8001128:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_SAI2_Init+0xd0>)
 800112c:	2200      	movs	r2, #0
 800112e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001130:	2308      	movs	r3, #8
 8001132:	2202      	movs	r2, #2
 8001134:	2100      	movs	r1, #0
 8001136:	4807      	ldr	r0, [pc, #28]	@ (8001154 <MX_SAI2_Init+0xd0>)
 8001138:	f00c ffbc 	bl	800e0b4 <HAL_SAI_InitProtocol>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_SAI2_Init+0xc2>
  {
    Error_Handler();
 8001142:	f000 fd6d 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200004b4 	.word	0x200004b4
 8001150:	40015804 	.word	0x40015804
 8001154:	2000054c 	.word	0x2000054c
 8001158:	40015824 	.word	0x40015824

0800115c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001180:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <MX_TIM3_Init+0xbc>)
 8001182:	4a26      	ldr	r2, [pc, #152]	@ (800121c <MX_TIM3_Init+0xc0>)
 8001184:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8001186:	4b24      	ldr	r3, [pc, #144]	@ (8001218 <MX_TIM3_Init+0xbc>)
 8001188:	22a0      	movs	r2, #160	@ 0xa0
 800118a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <MX_TIM3_Init+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001192:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <MX_TIM3_Init+0xbc>)
 8001194:	2264      	movs	r2, #100	@ 0x64
 8001196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <MX_TIM3_Init+0xbc>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <MX_TIM3_Init+0xbc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011a4:	481c      	ldr	r0, [pc, #112]	@ (8001218 <MX_TIM3_Init+0xbc>)
 80011a6:	f00d fbf9 	bl	800e99c <HAL_TIM_PWM_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011b0:	f000 fd36 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4815      	ldr	r0, [pc, #84]	@ (8001218 <MX_TIM3_Init+0xbc>)
 80011c4:	f00e fbd0 	bl	800f968 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011ce:	f000 fd27 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d2:	2360      	movs	r3, #96	@ 0x60
 80011d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 80011d6:	234b      	movs	r3, #75	@ 0x4b
 80011d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	220c      	movs	r2, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	480b      	ldr	r0, [pc, #44]	@ (8001218 <MX_TIM3_Init+0xbc>)
 80011ea:	f00d fc2f 	bl	800ea4c <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80011f4:	f000 fd14 	bl	8001c20 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <MX_TIM3_Init+0xbc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	69da      	ldr	r2, [r3, #28]
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_TIM3_Init+0xbc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001206:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001208:	4803      	ldr	r0, [pc, #12]	@ (8001218 <MX_TIM3_Init+0xbc>)
 800120a:	f001 facb 	bl	80027a4 <HAL_TIM_MspPostInit>

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	@ 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000074c 	.word	0x2000074c
 800121c:	40000400 	.word	0x40000400

08001220 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <MX_TIM15_Init+0x98>)
 8001240:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <MX_TIM15_Init+0x9c>)
 8001242:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001244:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <MX_TIM15_Init+0x98>)
 8001246:	221a      	movs	r2, #26
 8001248:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <MX_TIM15_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_TIM15_Init+0x98>)
 8001252:	2231      	movs	r2, #49	@ 0x31
 8001254:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_TIM15_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <MX_TIM15_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_TIM15_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <MX_TIM15_Init+0x98>)
 800126a:	f00d faa7 	bl	800e7bc <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001274:	f000 fcd4 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <MX_TIM15_Init+0x98>)
 8001286:	f00d fcf5 	bl	800ec74 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001290:	f000 fcc6 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001294:	2320      	movs	r3, #32
 8001296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_TIM15_Init+0x98>)
 80012a2:	f00e fb61 	bl	800f968 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80012ac:	f000 fcb8 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000798 	.word	0x20000798
 80012bc:	40014000 	.word	0x40014000

080012c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012c6:	4a23      	ldr	r2, [pc, #140]	@ (8001354 <MX_USART1_UART_Init+0x94>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001308:	4811      	ldr	r0, [pc, #68]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800130a:	f00e fbef 	bl	800faec <HAL_UART_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001314:	f000 fc84 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800131c:	f00f fbbd 	bl	8010a9a <HAL_UARTEx_SetTxFifoThreshold>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001326:	f000 fc7b 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800132e:	f00f fbf2 	bl	8010b16 <HAL_UARTEx_SetRxFifoThreshold>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001338:	f000 fc72 	bl	8001c20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800133e:	f00f fb73 	bl	8010a28 <HAL_UARTEx_DisableFifoMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 fc6a 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200007e4 	.word	0x200007e4
 8001354:	40013800 	.word	0x40013800

08001358 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 800135e:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001360:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001364:	2209      	movs	r2, #9
 8001366:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 800136a:	2200      	movs	r2, #0
 800136c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001370:	2203      	movs	r2, #3
 8001372:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001376:	2200      	movs	r2, #0
 8001378:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 800137c:	2200      	movs	r2, #0
 800137e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001382:	2200      	movs	r2, #0
 8001384:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001388:	2200      	movs	r2, #0
 800138a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 800138e:	2200      	movs	r2, #0
 8001390:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001394:	2200      	movs	r2, #0
 8001396:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	@ (80013ac <MX_USB_OTG_HS_PCD_Init+0x54>)
 800139a:	f008 f81c 	bl	80093d6 <HAL_PCD_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80013a4:	f000 fc3c 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000878 	.word	0x20000878
 80013b0:	42040000 	.word	0x42040000

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	@ 0x38
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ca:	4b8c      	ldr	r3, [pc, #560]	@ (80015fc <MX_GPIO_Init+0x248>)
 80013cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d0:	4a8a      	ldr	r2, [pc, #552]	@ (80015fc <MX_GPIO_Init+0x248>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013da:	4b88      	ldr	r3, [pc, #544]	@ (80015fc <MX_GPIO_Init+0x248>)
 80013dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	623b      	str	r3, [r7, #32]
 80013e6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e8:	4b84      	ldr	r3, [pc, #528]	@ (80015fc <MX_GPIO_Init+0x248>)
 80013ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ee:	4a83      	ldr	r2, [pc, #524]	@ (80015fc <MX_GPIO_Init+0x248>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f8:	4b80      	ldr	r3, [pc, #512]	@ (80015fc <MX_GPIO_Init+0x248>)
 80013fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001406:	4b7d      	ldr	r3, [pc, #500]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140c:	4a7b      	ldr	r2, [pc, #492]	@ (80015fc <MX_GPIO_Init+0x248>)
 800140e:	f043 0320 	orr.w	r3, r3, #32
 8001412:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001416:	4b79      	ldr	r3, [pc, #484]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141c:	f003 0320 	and.w	r3, r3, #32
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001424:	4b75      	ldr	r3, [pc, #468]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142a:	4a74      	ldr	r2, [pc, #464]	@ (80015fc <MX_GPIO_Init+0x248>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001430:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001434:	4b71      	ldr	r3, [pc, #452]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001436:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800143a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b6e      	ldr	r3, [pc, #440]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001448:	4a6c      	ldr	r2, [pc, #432]	@ (80015fc <MX_GPIO_Init+0x248>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001452:	4b6a      	ldr	r3, [pc, #424]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b66      	ldr	r3, [pc, #408]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001466:	4a65      	ldr	r2, [pc, #404]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001470:	4b62      	ldr	r3, [pc, #392]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147e:	4b5f      	ldr	r3, [pc, #380]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001484:	4a5d      	ldr	r2, [pc, #372]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800148a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800148e:	4b5b      	ldr	r3, [pc, #364]	@ (80015fc <MX_GPIO_Init+0x248>)
 8001490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149c:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <MX_GPIO_Init+0x248>)
 800149e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a2:	4a56      	ldr	r2, [pc, #344]	@ (80015fc <MX_GPIO_Init+0x248>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ac:	4b53      	ldr	r3, [pc, #332]	@ (80015fc <MX_GPIO_Init+0x248>)
 80014ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014ba:	4b50      	ldr	r3, [pc, #320]	@ (80015fc <MX_GPIO_Init+0x248>)
 80014bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c0:	4a4e      	ldr	r2, [pc, #312]	@ (80015fc <MX_GPIO_Init+0x248>)
 80014c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ca:	4b4c      	ldr	r3, [pc, #304]	@ (80015fc <MX_GPIO_Init+0x248>)
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2104      	movs	r1, #4
 80014dc:	4848      	ldr	r0, [pc, #288]	@ (8001600 <MX_GPIO_Init+0x24c>)
 80014de:	f006 fc57 	bl	8007d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2110      	movs	r1, #16
 80014e6:	4846      	ldr	r0, [pc, #280]	@ (8001600 <MX_GPIO_Init+0x24c>)
 80014e8:	f006 fc52 	bl	8007d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2114      	movs	r1, #20
 80014f0:	4844      	ldr	r0, [pc, #272]	@ (8001604 <MX_GPIO_Init+0x250>)
 80014f2:	f006 fc4d 	bl	8007d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 80014f6:	2314      	movs	r3, #20
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	483c      	ldr	r0, [pc, #240]	@ (8001600 <MX_GPIO_Init+0x24c>)
 800150e:	f006 fa67 	bl	80079e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001512:	2320      	movs	r3, #32
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001516:	4b3c      	ldr	r3, [pc, #240]	@ (8001608 <MX_GPIO_Init+0x254>)
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	4836      	ldr	r0, [pc, #216]	@ (8001600 <MX_GPIO_Init+0x24c>)
 8001526:	f006 fa5b 	bl	80079e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800152a:	2302      	movs	r3, #2
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800152e:	4b37      	ldr	r3, [pc, #220]	@ (800160c <MX_GPIO_Init+0x258>)
 8001530:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	4834      	ldr	r0, [pc, #208]	@ (8001610 <MX_GPIO_Init+0x25c>)
 800153e:	f006 fa4f 	bl	80079e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001542:	2310      	movs	r3, #16
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001546:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <MX_GPIO_Init+0x260>)
 8001548:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154a:	2301      	movs	r3, #1
 800154c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001552:	4619      	mov	r1, r3
 8001554:	482e      	ldr	r0, [pc, #184]	@ (8001610 <MX_GPIO_Init+0x25c>)
 8001556:	f006 fa43 	bl	80079e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 800155a:	2314      	movs	r3, #20
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	4824      	ldr	r0, [pc, #144]	@ (8001604 <MX_GPIO_Init+0x250>)
 8001572:	f006 fa35 	bl	80079e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	481e      	ldr	r0, [pc, #120]	@ (8001604 <MX_GPIO_Init+0x250>)
 800158a:	f006 fa29 	bl	80079e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 800158e:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	481d      	ldr	r0, [pc, #116]	@ (8001618 <MX_GPIO_Init+0x264>)
 80015a4:	f006 fa1c 	bl	80079e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80015a8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	4817      	ldr	r0, [pc, #92]	@ (800161c <MX_GPIO_Init+0x268>)
 80015be:	f006 fa0f 	bl	80079e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	200c      	movs	r0, #12
 80015c8:	f004 f8ba 	bl	8005740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015cc:	200c      	movs	r0, #12
 80015ce:	f004 f8d1 	bl	8005774 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	200f      	movs	r0, #15
 80015d8:	f004 f8b2 	bl	8005740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015dc:	200f      	movs	r0, #15
 80015de:	f004 f8c9 	bl	8005774 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2010      	movs	r0, #16
 80015e8:	f004 f8aa 	bl	8005740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80015ec:	2010      	movs	r0, #16
 80015ee:	f004 f8c1 	bl	8005774 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f2:	bf00      	nop
 80015f4:	3738      	adds	r7, #56	@ 0x38
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	46020c00 	.word	0x46020c00
 8001600:	42021000 	.word	0x42021000
 8001604:	42020c00 	.word	0x42020c00
 8001608:	10110000 	.word	0x10110000
 800160c:	10310000 	.word	0x10310000
 8001610:	42020000 	.word	0x42020000
 8001614:	10210000 	.word	0x10210000
 8001618:	42021800 	.word	0x42021800
 800161c:	42020400 	.word	0x42020400

08001620 <signExtend24>:

/* USER CODE BEGIN 4 */

static inline int32_t signExtend24(uint32_t value)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    return (int32_t)((value & (1 << 23)) ? value | 0xFF000000 : value & 0x007FFFFF);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <signExtend24+0x1a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001638:	e002      	b.n	8001640 <signExtend24+0x20>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <volumeLRPoll>:

static void volumeLRPoll(uint16_t index)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]
	  //Channel 1 Volume
	  channels[0].volumeBuffer[index % (sizeof(channels[0].volumeBuffer) / 2)] = adcGroup1[c1Vol];
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	4ac0      	ldr	r2, [pc, #768]	@ (8001960 <volumeLRPoll+0x314>)
 800165e:	8811      	ldrh	r1, [r2, #0]
 8001660:	4ac0      	ldr	r2, [pc, #768]	@ (8001964 <volumeLRPoll+0x318>)
 8001662:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	460a      	mov	r2, r1
 800166c:	805a      	strh	r2, [r3, #2]
	  channels[0].volumeRunner += channels[0].volumeBuffer[index % (sizeof(channels[0].volumeBuffer) / 2)];
 800166e:	4bbd      	ldr	r3, [pc, #756]	@ (8001964 <volumeLRPoll+0x318>)
 8001670:	f8b3 2212 	ldrh.w	r2, [r3, #530]	@ 0x212
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	49ba      	ldr	r1, [pc, #744]	@ (8001964 <volumeLRPoll+0x318>)
 800167c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	440b      	add	r3, r1
 8001684:	885b      	ldrh	r3, [r3, #2]
 8001686:	4413      	add	r3, r2
 8001688:	b29a      	uxth	r2, r3
 800168a:	4bb6      	ldr	r3, [pc, #728]	@ (8001964 <volumeLRPoll+0x318>)
 800168c:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
	  channels[0].volumeRunner -= channels[0].volumeBuffer[(index + 1) % (sizeof(channels[0].volumeBuffer) / 2)];
 8001690:	4bb4      	ldr	r3, [pc, #720]	@ (8001964 <volumeLRPoll+0x318>)
 8001692:	f8b3 2212 	ldrh.w	r2, [r3, #530]	@ 0x212
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	3301      	adds	r3, #1
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	49b1      	ldr	r1, [pc, #708]	@ (8001964 <volumeLRPoll+0x318>)
 80016a0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	440b      	add	r3, r1
 80016a8:	885b      	ldrh	r3, [r3, #2]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	4bad      	ldr	r3, [pc, #692]	@ (8001964 <volumeLRPoll+0x318>)
 80016b0:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212

	  //Channel 2 Volume
	  channels[1].volumeBuffer[index % (sizeof(channels[1].volumeBuffer) / 2)] = adcGroup1[c2Vol];
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	4aa9      	ldr	r2, [pc, #676]	@ (8001960 <volumeLRPoll+0x314>)
 80016bc:	8851      	ldrh	r1, [r2, #2]
 80016be:	4aa9      	ldr	r2, [pc, #676]	@ (8001964 <volumeLRPoll+0x318>)
 80016c0:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	460a      	mov	r2, r1
 80016ca:	805a      	strh	r2, [r3, #2]
	  channels[1].volumeRunner += channels[1].volumeBuffer[index % (sizeof(channels[1].volumeBuffer) / 2)];
 80016cc:	4ba5      	ldr	r3, [pc, #660]	@ (8001964 <volumeLRPoll+0x318>)
 80016ce:	f8b3 246a 	ldrh.w	r2, [r3, #1130]	@ 0x46a
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	49a2      	ldr	r1, [pc, #648]	@ (8001964 <volumeLRPoll+0x318>)
 80016da:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	440b      	add	r3, r1
 80016e2:	885b      	ldrh	r3, [r3, #2]
 80016e4:	4413      	add	r3, r2
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4b9e      	ldr	r3, [pc, #632]	@ (8001964 <volumeLRPoll+0x318>)
 80016ea:	f8a3 246a 	strh.w	r2, [r3, #1130]	@ 0x46a
	  channels[1].volumeRunner -= channels[1].volumeBuffer[(index + 1) % (sizeof(channels[1].volumeBuffer) / 2)];
 80016ee:	4b9d      	ldr	r3, [pc, #628]	@ (8001964 <volumeLRPoll+0x318>)
 80016f0:	f8b3 246a 	ldrh.w	r2, [r3, #1130]	@ 0x46a
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	3301      	adds	r3, #1
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4999      	ldr	r1, [pc, #612]	@ (8001964 <volumeLRPoll+0x318>)
 80016fe:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	440b      	add	r3, r1
 8001706:	885b      	ldrh	r3, [r3, #2]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b95      	ldr	r3, [pc, #596]	@ (8001964 <volumeLRPoll+0x318>)
 800170e:	f8a3 246a 	strh.w	r2, [r3, #1130]	@ 0x46a

	  //Channel 3 Volume
	  channels[2].volumeBuffer[index % (sizeof(channels[2].volumeBuffer) / 2)] = adcGroup1[c3Vol];
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	4a91      	ldr	r2, [pc, #580]	@ (8001960 <volumeLRPoll+0x314>)
 800171a:	8891      	ldrh	r1, [r2, #4]
 800171c:	4a91      	ldr	r2, [pc, #580]	@ (8001964 <volumeLRPoll+0x318>)
 800171e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	460a      	mov	r2, r1
 8001728:	805a      	strh	r2, [r3, #2]
	  channels[2].volumeRunner += channels[2].volumeBuffer[index % (sizeof(channels[2].volumeBuffer) / 2)];
 800172a:	4b8e      	ldr	r3, [pc, #568]	@ (8001964 <volumeLRPoll+0x318>)
 800172c:	f8b3 26c2 	ldrh.w	r2, [r3, #1730]	@ 0x6c2
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	498b      	ldr	r1, [pc, #556]	@ (8001964 <volumeLRPoll+0x318>)
 8001738:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	440b      	add	r3, r1
 8001740:	885b      	ldrh	r3, [r3, #2]
 8001742:	4413      	add	r3, r2
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b87      	ldr	r3, [pc, #540]	@ (8001964 <volumeLRPoll+0x318>)
 8001748:	f8a3 26c2 	strh.w	r2, [r3, #1730]	@ 0x6c2
	  channels[2].volumeRunner -= channels[2].volumeBuffer[(index + 1) % (sizeof(channels[2].volumeBuffer) / 2)];
 800174c:	4b85      	ldr	r3, [pc, #532]	@ (8001964 <volumeLRPoll+0x318>)
 800174e:	f8b3 26c2 	ldrh.w	r2, [r3, #1730]	@ 0x6c2
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	3301      	adds	r3, #1
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	4982      	ldr	r1, [pc, #520]	@ (8001964 <volumeLRPoll+0x318>)
 800175c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	440b      	add	r3, r1
 8001764:	885b      	ldrh	r3, [r3, #2]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b7e      	ldr	r3, [pc, #504]	@ (8001964 <volumeLRPoll+0x318>)
 800176c:	f8a3 26c2 	strh.w	r2, [r3, #1730]	@ 0x6c2

	  //Channel 4 Volume
	  channels[3].volumeBuffer[index % (sizeof(channels[3].volumeBuffer) / 2)] = adcGroup1[c4Vol];
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	4a7a      	ldr	r2, [pc, #488]	@ (8001960 <volumeLRPoll+0x314>)
 8001778:	88d1      	ldrh	r1, [r2, #6]
 800177a:	4a7a      	ldr	r2, [pc, #488]	@ (8001964 <volumeLRPoll+0x318>)
 800177c:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	460a      	mov	r2, r1
 8001786:	805a      	strh	r2, [r3, #2]
	  channels[3].volumeRunner += channels[3].volumeBuffer[index % (sizeof(channels[3].volumeBuffer) / 2)];
 8001788:	4b76      	ldr	r3, [pc, #472]	@ (8001964 <volumeLRPoll+0x318>)
 800178a:	f8b3 291a 	ldrh.w	r2, [r3, #2330]	@ 0x91a
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	4973      	ldr	r1, [pc, #460]	@ (8001964 <volumeLRPoll+0x318>)
 8001796:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	440b      	add	r3, r1
 800179e:	885b      	ldrh	r3, [r3, #2]
 80017a0:	4413      	add	r3, r2
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001964 <volumeLRPoll+0x318>)
 80017a6:	f8a3 291a 	strh.w	r2, [r3, #2330]	@ 0x91a
	  channels[3].volumeRunner -= channels[3].volumeBuffer[(index + 1) % (sizeof(channels[3].volumeBuffer) / 2)];
 80017aa:	4b6e      	ldr	r3, [pc, #440]	@ (8001964 <volumeLRPoll+0x318>)
 80017ac:	f8b3 291a 	ldrh.w	r2, [r3, #2330]	@ 0x91a
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	3301      	adds	r3, #1
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	496a      	ldr	r1, [pc, #424]	@ (8001964 <volumeLRPoll+0x318>)
 80017ba:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	440b      	add	r3, r1
 80017c2:	885b      	ldrh	r3, [r3, #2]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b66      	ldr	r3, [pc, #408]	@ (8001964 <volumeLRPoll+0x318>)
 80017ca:	f8a3 291a 	strh.w	r2, [r3, #2330]	@ 0x91a

	  //Channel 5 Volume
	  channels[4].volumeBuffer[index % (sizeof(channels[4].volumeBuffer) / 2)] = adcGroup1[c5Vol];
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	4a62      	ldr	r2, [pc, #392]	@ (8001960 <volumeLRPoll+0x314>)
 80017d6:	8911      	ldrh	r1, [r2, #8]
 80017d8:	4a62      	ldr	r2, [pc, #392]	@ (8001964 <volumeLRPoll+0x318>)
 80017da:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	460a      	mov	r2, r1
 80017e4:	805a      	strh	r2, [r3, #2]
	  channels[4].volumeRunner += channels[4].volumeBuffer[index % (sizeof(channels[4].volumeBuffer) / 2)];
 80017e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001964 <volumeLRPoll+0x318>)
 80017e8:	f8b3 2b72 	ldrh.w	r2, [r3, #2930]	@ 0xb72
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	495c      	ldr	r1, [pc, #368]	@ (8001964 <volumeLRPoll+0x318>)
 80017f4:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	440b      	add	r3, r1
 80017fc:	885b      	ldrh	r3, [r3, #2]
 80017fe:	4413      	add	r3, r2
 8001800:	b29a      	uxth	r2, r3
 8001802:	4b58      	ldr	r3, [pc, #352]	@ (8001964 <volumeLRPoll+0x318>)
 8001804:	f8a3 2b72 	strh.w	r2, [r3, #2930]	@ 0xb72
	  channels[4].volumeRunner -= channels[4].volumeBuffer[(index + 1) % (sizeof(channels[4].volumeBuffer) / 2)];
 8001808:	4b56      	ldr	r3, [pc, #344]	@ (8001964 <volumeLRPoll+0x318>)
 800180a:	f8b3 2b72 	ldrh.w	r2, [r3, #2930]	@ 0xb72
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	3301      	adds	r3, #1
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	4953      	ldr	r1, [pc, #332]	@ (8001964 <volumeLRPoll+0x318>)
 8001818:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	440b      	add	r3, r1
 8001820:	885b      	ldrh	r3, [r3, #2]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b4f      	ldr	r3, [pc, #316]	@ (8001964 <volumeLRPoll+0x318>)
 8001828:	f8a3 2b72 	strh.w	r2, [r3, #2930]	@ 0xb72

	  //Channel 6 Volume
	  channels[5].volumeBuffer[index % (sizeof(channels[5].volumeBuffer) / 2)] = adcGroup1[c6Vol];
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	4a4b      	ldr	r2, [pc, #300]	@ (8001960 <volumeLRPoll+0x314>)
 8001834:	8951      	ldrh	r1, [r2, #10]
 8001836:	4a4b      	ldr	r2, [pc, #300]	@ (8001964 <volumeLRPoll+0x318>)
 8001838:	f203 63dc 	addw	r3, r3, #1756	@ 0x6dc
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	460a      	mov	r2, r1
 8001842:	805a      	strh	r2, [r3, #2]
	  channels[5].volumeRunner += channels[5].volumeBuffer[index % (sizeof(channels[5].volumeBuffer) / 2)];
 8001844:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <volumeLRPoll+0x318>)
 8001846:	f8b3 2dca 	ldrh.w	r2, [r3, #3530]	@ 0xdca
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	4944      	ldr	r1, [pc, #272]	@ (8001964 <volumeLRPoll+0x318>)
 8001852:	f203 63dc 	addw	r3, r3, #1756	@ 0x6dc
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	440b      	add	r3, r1
 800185a:	885b      	ldrh	r3, [r3, #2]
 800185c:	4413      	add	r3, r2
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b40      	ldr	r3, [pc, #256]	@ (8001964 <volumeLRPoll+0x318>)
 8001862:	f8a3 2dca 	strh.w	r2, [r3, #3530]	@ 0xdca
	  channels[5].volumeRunner -= channels[5].volumeBuffer[(index + 1) % (sizeof(channels[5].volumeBuffer) / 2)];
 8001866:	4b3f      	ldr	r3, [pc, #252]	@ (8001964 <volumeLRPoll+0x318>)
 8001868:	f8b3 2dca 	ldrh.w	r2, [r3, #3530]	@ 0xdca
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	3301      	adds	r3, #1
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	493b      	ldr	r1, [pc, #236]	@ (8001964 <volumeLRPoll+0x318>)
 8001876:	f203 63dc 	addw	r3, r3, #1756	@ 0x6dc
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	440b      	add	r3, r1
 800187e:	885b      	ldrh	r3, [r3, #2]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <volumeLRPoll+0x318>)
 8001886:	f8a3 2dca 	strh.w	r2, [r3, #3530]	@ 0xdca

	  //Channel 1 LR
	  channels[0].lrBuffer[index % (sizeof(channels[0].lrBuffer) / 2)] = adcGroup1[c1LR];
 800188a:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <volumeLRPoll+0x314>)
 800188c:	8a1a      	ldrh	r2, [r3, #16]
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	ee07 2a90 	vmov	s15, r2
 8001898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189c:	4a31      	ldr	r2, [pc, #196]	@ (8001964 <volumeLRPoll+0x318>)
 800189e:	3384      	adds	r3, #132	@ 0x84
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3304      	adds	r3, #4
 80018a6:	edc3 7a00 	vstr	s15, [r3]
	  channels[0].lrRunner += channels[0].lrBuffer[index % (sizeof(channels[0].lrBuffer) / 2)];
 80018aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <volumeLRPoll+0x318>)
 80018ac:	f8b3 3234 	ldrh.w	r3, [r3, #564]	@ 0x234
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	4a29      	ldr	r2, [pc, #164]	@ (8001964 <volumeLRPoll+0x318>)
 80018c0:	3384      	adds	r3, #132	@ 0x84
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	3304      	adds	r3, #4
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d4:	ee17 3a90 	vmov	r3, s15
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <volumeLRPoll+0x318>)
 80018dc:	f8a3 2234 	strh.w	r2, [r3, #564]	@ 0x234
	  channels[0].lrRunner -= channels[0].lrBuffer[(index + 1) % (sizeof(channels[0].lrBuffer) / 2)];
 80018e0:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <volumeLRPoll+0x318>)
 80018e2:	f8b3 3234 	ldrh.w	r3, [r3, #564]	@ 0x234
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	3301      	adds	r3, #1
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001964 <volumeLRPoll+0x318>)
 80018f8:	3384      	adds	r3, #132	@ 0x84
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3304      	adds	r3, #4
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190c:	ee17 3a90 	vmov	r3, s15
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <volumeLRPoll+0x318>)
 8001914:	f8a3 2234 	strh.w	r2, [r3, #564]	@ 0x234

	  //Channel 2 LR
	  channels[1].lrBuffer[index % (sizeof(channels[1].lrBuffer) / 2)] = adcGroup1[c2LR];
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <volumeLRPoll+0x314>)
 800191a:	8a5a      	ldrh	r2, [r3, #18]
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	ee07 2a90 	vmov	s15, r2
 8001926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192a:	4a0e      	ldr	r2, [pc, #56]	@ (8001964 <volumeLRPoll+0x318>)
 800192c:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	3304      	adds	r3, #4
 8001936:	edc3 7a00 	vstr	s15, [r3]
	  channels[1].lrRunner += channels[1].lrBuffer[index % (sizeof(channels[1].lrBuffer) / 2)];
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <volumeLRPoll+0x318>)
 800193c:	f8b3 348c 	ldrh.w	r3, [r3, #1164]	@ 0x48c
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <volumeLRPoll+0x318>)
 8001950:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	3304      	adds	r3, #4
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	e003      	b.n	8001968 <volumeLRPoll+0x31c>
 8001960:	20000d5c 	.word	0x20000d5c
 8001964:	20000d7c 	.word	0x20000d7c
 8001968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001970:	ee17 3a90 	vmov	r3, s15
 8001974:	b29a      	uxth	r2, r3
 8001976:	4ba7      	ldr	r3, [pc, #668]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001978:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
	  channels[1].lrRunner -= channels[1].lrBuffer[(index + 1) % (sizeof(channels[1].lrBuffer) / 2)];
 800197c:	4ba5      	ldr	r3, [pc, #660]	@ (8001c14 <volumeLRPoll+0x5c8>)
 800197e:	f8b3 348c 	ldrh.w	r3, [r3, #1164]	@ 0x48c
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	3301      	adds	r3, #1
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	4aa0      	ldr	r2, [pc, #640]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001994:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	3304      	adds	r3, #4
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019aa:	ee17 3a90 	vmov	r3, s15
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b98      	ldr	r3, [pc, #608]	@ (8001c14 <volumeLRPoll+0x5c8>)
 80019b2:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c

	  //Channel 3 LR
	  channels[2].lrBuffer[index % (sizeof(channels[2].lrBuffer) / 2)] = adcGroup1[c3LR];
 80019b6:	4b98      	ldr	r3, [pc, #608]	@ (8001c18 <volumeLRPoll+0x5cc>)
 80019b8:	8a9a      	ldrh	r2, [r3, #20]
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	ee07 2a90 	vmov	s15, r2
 80019c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c8:	4a92      	ldr	r2, [pc, #584]	@ (8001c14 <volumeLRPoll+0x5c8>)
 80019ca:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	3304      	adds	r3, #4
 80019d4:	edc3 7a00 	vstr	s15, [r3]
	  channels[2].lrRunner += channels[2].lrBuffer[index % (sizeof(channels[2].lrBuffer) / 2)];
 80019d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001c14 <volumeLRPoll+0x5c8>)
 80019da:	f8b3 36e4 	ldrh.w	r3, [r3, #1764]	@ 0x6e4
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	4a89      	ldr	r2, [pc, #548]	@ (8001c14 <volumeLRPoll+0x5c8>)
 80019ee:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3304      	adds	r3, #4
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a04:	ee17 3a90 	vmov	r3, s15
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b82      	ldr	r3, [pc, #520]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001a0c:	f8a3 26e4 	strh.w	r2, [r3, #1764]	@ 0x6e4
	  channels[2].lrRunner -= channels[2].lrBuffer[(index + 1) % (sizeof(channels[2].lrBuffer) / 2)];
 8001a10:	4b80      	ldr	r3, [pc, #512]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001a12:	f8b3 36e4 	ldrh.w	r3, [r3, #1764]	@ 0x6e4
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	3301      	adds	r3, #1
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	4a7b      	ldr	r2, [pc, #492]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001a28:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3304      	adds	r3, #4
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a3e:	ee17 3a90 	vmov	r3, s15
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	4b73      	ldr	r3, [pc, #460]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001a46:	f8a3 26e4 	strh.w	r2, [r3, #1764]	@ 0x6e4

	  //Channel 4 LR
	  channels[3].lrBuffer[index % (sizeof(channels[3].lrBuffer) / 2)] = adcGroup1[c4LR];
 8001a4a:	4b73      	ldr	r3, [pc, #460]	@ (8001c18 <volumeLRPoll+0x5cc>)
 8001a4c:	8ada      	ldrh	r2, [r3, #22]
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	ee07 2a90 	vmov	s15, r2
 8001a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5c:	4a6d      	ldr	r2, [pc, #436]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001a5e:	f203 2346 	addw	r3, r3, #582	@ 0x246
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	3304      	adds	r3, #4
 8001a68:	edc3 7a00 	vstr	s15, [r3]
	  channels[3].lrRunner += channels[3].lrBuffer[index % (sizeof(channels[3].lrBuffer) / 2)];
 8001a6c:	4b69      	ldr	r3, [pc, #420]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001a6e:	f8b3 393c 	ldrh.w	r3, [r3, #2364]	@ 0x93c
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	4a64      	ldr	r2, [pc, #400]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001a82:	f203 2346 	addw	r3, r3, #582	@ 0x246
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a98:	ee17 3a90 	vmov	r3, s15
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001aa0:	f8a3 293c 	strh.w	r2, [r3, #2364]	@ 0x93c
	  channels[3].lrRunner -= channels[3].lrBuffer[(index + 1) % (sizeof(channels[3].lrBuffer) / 2)];
 8001aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001aa6:	f8b3 393c 	ldrh.w	r3, [r3, #2364]	@ 0x93c
 8001aaa:	ee07 3a90 	vmov	s15, r3
 8001aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	4a56      	ldr	r2, [pc, #344]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001abc:	f203 2346 	addw	r3, r3, #582	@ 0x246
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad2:	ee17 3a90 	vmov	r3, s15
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001ada:	f8a3 293c 	strh.w	r2, [r3, #2364]	@ 0x93c

	  //Channel 5 LR
	  channels[4].lrBuffer[index % (sizeof(channels[4].lrBuffer) / 2)] = adcGroup4[c5LR];
 8001ade:	4b4f      	ldr	r3, [pc, #316]	@ (8001c1c <volumeLRPoll+0x5d0>)
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	ee07 2a90 	vmov	s15, r2
 8001aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af0:	4a48      	ldr	r2, [pc, #288]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001af2:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3304      	adds	r3, #4
 8001afc:	edc3 7a00 	vstr	s15, [r3]
	  channels[4].volumeRunner += channels[4].lrBuffer[index % (sizeof(channels[4].lrBuffer) / 2)];
 8001b00:	4b44      	ldr	r3, [pc, #272]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001b02:	f8b3 3b72 	ldrh.w	r3, [r3, #2930]	@ 0xb72
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	4a3f      	ldr	r2, [pc, #252]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001b16:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3304      	adds	r3, #4
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b2c:	ee17 3a90 	vmov	r3, s15
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	4b38      	ldr	r3, [pc, #224]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001b34:	f8a3 2b72 	strh.w	r2, [r3, #2930]	@ 0xb72
	  channels[4].volumeRunner -= channels[4].lrBuffer[(index + 1) % (sizeof(channels[4].lrBuffer) / 2)];
 8001b38:	4b36      	ldr	r3, [pc, #216]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001b3a:	f8b3 3b72 	ldrh.w	r3, [r3, #2930]	@ 0xb72
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	4a31      	ldr	r2, [pc, #196]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001b50:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3304      	adds	r3, #4
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b66:	ee17 3a90 	vmov	r3, s15
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001b6e:	f8a3 2b72 	strh.w	r2, [r3, #2930]	@ 0xb72

	  //Channel 6 LR
	  channels[5].lrBuffer[index % (sizeof(channels[5].lrBuffer) / 2)] = adcGroup4[c6LR];
 8001b72:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <volumeLRPoll+0x5d0>)
 8001b74:	885a      	ldrh	r2, [r3, #2]
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	ee07 2a90 	vmov	s15, r2
 8001b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b84:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001b86:	f203 3372 	addw	r3, r3, #882	@ 0x372
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	edc3 7a00 	vstr	s15, [r3]
	  channels[5].volumeRunner += channels[5].lrBuffer[index % (sizeof(channels[5].lrBuffer) / 2)];
 8001b94:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001b96:	f8b3 3dca 	ldrh.w	r3, [r3, #3530]	@ 0xdca
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001baa:	f203 3372 	addw	r3, r3, #882	@ 0x372
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc0:	ee17 3a90 	vmov	r3, s15
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001bc8:	f8a3 2dca 	strh.w	r2, [r3, #3530]	@ 0xdca
	  channels[5].volumeRunner -= channels[5].lrBuffer[(index + 1) % (sizeof(channels[5].lrBuffer) / 2)];
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001bce:	f8b3 3dca 	ldrh.w	r3, [r3, #3530]	@ 0xdca
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001be4:	f203 3372 	addw	r3, r3, #882	@ 0x372
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	3304      	adds	r3, #4
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfa:	ee17 3a90 	vmov	r3, s15
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <volumeLRPoll+0x5c8>)
 8001c02:	f8a3 2dca 	strh.w	r2, [r3, #3530]	@ 0xdca
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000d7c 	.word	0x20000d7c
 8001c18:	20000d5c 	.word	0x20000d5c
 8001c1c:	20000d78 	.word	0x20000d78

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <Error_Handler+0x8>

08001c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_MspInit+0x30>)
 8001c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c38:	4a08      	ldr	r2, [pc, #32]	@ (8001c5c <HAL_MspInit+0x30>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_MspInit+0x30>)
 8001c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001c50:	f007 fdfe 	bl	8009850 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	46020c00 	.word	0x46020c00

08001c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b0e4      	sub	sp, #400	@ 0x190
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001c6a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c6e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  DMA_TriggerConfTypeDef TriggerConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c80:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001c84:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c88:	4618      	mov	r0, r3
 8001c8a:	23e0      	movs	r3, #224	@ 0xe0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2100      	movs	r1, #0
 8001c90:	f00f fc35 	bl	80114fe <memset>
  if(hadc->Instance==ADC1)
 8001c94:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001c98:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4aa1      	ldr	r2, [pc, #644]	@ (8001f28 <HAL_ADC_MspInit+0x2c8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	f040 8152 	bne.w	8001f4c <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001ca8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001cac:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8001cb0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001cbc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001cc0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001cc4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cc8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ccc:	f107 0320 	add.w	r3, r7, #32
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f009 f897 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001cdc:	f7ff ffa0 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ce0:	4b92      	ldr	r3, [pc, #584]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce6:	4a91      	ldr	r2, [pc, #580]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001ce8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cf0:	4b8e      	ldr	r3, [pc, #568]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf6:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001cfa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001cfe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d08:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d0c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	4b87      	ldr	r3, [pc, #540]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d14:	4a85      	ldr	r2, [pc, #532]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d1e:	4b83      	ldr	r3, [pc, #524]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d24:	f003 0204 	and.w	r2, r3, #4
 8001d28:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d2c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d36:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001d3a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b7b      	ldr	r3, [pc, #492]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d42:	4a7a      	ldr	r2, [pc, #488]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d4c:	4b77      	ldr	r3, [pc, #476]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d52:	f003 0201 	and.w	r2, r3, #1
 8001d56:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d5a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d64:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001d68:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	4b70      	ldr	r3, [pc, #448]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d70:	4a6e      	ldr	r2, [pc, #440]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f2c <HAL_ADC_MspInit+0x2cc>)
 8001d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d80:	f003 0202 	and.w	r2, r3, #2
 8001d84:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d88:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d92:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d96:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8001d98:	230f      	movs	r3, #15
 8001d9a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001daa:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001dae:	4619      	mov	r1, r3
 8001db0:	485f      	ldr	r0, [pc, #380]	@ (8001f30 <HAL_ADC_MspInit+0x2d0>)
 8001db2:	f005 fe15 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8001db6:	23ed      	movs	r3, #237	@ 0xed
 8001db8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4859      	ldr	r0, [pc, #356]	@ (8001f34 <HAL_ADC_MspInit+0x2d4>)
 8001dd0:	f005 fe06 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001dea:	4619      	mov	r1, r3
 8001dec:	4852      	ldr	r0, [pc, #328]	@ (8001f38 <HAL_ADC_MspInit+0x2d8>)
 8001dee:	f005 fdf7 	bl	80079e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001df2:	2321      	movs	r3, #33	@ 0x21
 8001df4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001e10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001e14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001e1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.SrcBurstLength = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.DestBurstLength = 1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001e32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e36:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8001e4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e50:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8001e54:	232b      	movs	r3, #43	@ 0x2b
 8001e56:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001e66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e6a:	4934      	ldr	r1, [pc, #208]	@ (8001f3c <HAL_ADC_MspInit+0x2dc>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 fe95 	bl	8006b9c <HAL_DMAEx_List_BuildNode>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 8001e78:	f7ff fed2 	bl	8001c20 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f3c <HAL_ADC_MspInit+0x2dc>)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	482f      	ldr	r0, [pc, #188]	@ (8001f40 <HAL_ADC_MspInit+0x2e0>)
 8001e82:	f004 feb7 	bl	8006bf4 <HAL_DMAEx_List_InsertNode>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 8001e8c:	f7ff fec8 	bl	8001c20 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001e90:	482b      	ldr	r0, [pc, #172]	@ (8001f40 <HAL_ADC_MspInit+0x2e0>)
 8001e92:	f004 ff78 	bl	8006d86 <HAL_DMAEx_List_SetCircularMode>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 8001e9c:	f7ff fec0 	bl	8001c20 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001ea0:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001ea2:	4a29      	ldr	r2, [pc, #164]	@ (8001f48 <HAL_ADC_MspInit+0x2e8>)
 8001ea4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001ea6:	4b27      	ldr	r3, [pc, #156]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001eb8:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001ebe:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001ec0:	2281      	movs	r2, #129	@ 0x81
 8001ec2:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001ec4:	481f      	ldr	r0, [pc, #124]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001ec6:	f004 fca9 	bl	800681c <HAL_DMAEx_List_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8001ed0:	f7ff fea6 	bl	8001c20 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001ed4:	491a      	ldr	r1, [pc, #104]	@ (8001f40 <HAL_ADC_MspInit+0x2e0>)
 8001ed6:	481b      	ldr	r0, [pc, #108]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001ed8:	f004 ffb6 	bl	8006e48 <HAL_DMAEx_List_LinkQ>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8001ee2:	f7ff fe9d 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001ee6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001eea:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001ef2:	671a      	str	r2, [r3, #112]	@ 0x70
 8001ef4:	4a13      	ldr	r2, [pc, #76]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001ef6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001efa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001f02:	2110      	movs	r1, #16
 8001f04:	480f      	ldr	r0, [pc, #60]	@ (8001f44 <HAL_ADC_MspInit+0x2e4>)
 8001f06:	f004 f897 	bl	8006038 <HAL_DMA_ConfigChannelAttributes>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001f10:	f7ff fe86 	bl	8001c20 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	2025      	movs	r0, #37	@ 0x25
 8001f1a:	f003 fc11 	bl	8005740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f1e:	2025      	movs	r0, #37	@ 0x25
 8001f20:	f003 fc28 	bl	8005774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001f24:	e0d5      	b.n	80020d2 <HAL_ADC_MspInit+0x472>
 8001f26:	bf00      	nop
 8001f28:	42028000 	.word	0x42028000
 8001f2c:	46020c00 	.word	0x46020c00
 8001f30:	42020800 	.word	0x42020800
 8001f34:	42020000 	.word	0x42020000
 8001f38:	42020400 	.word	0x42020400
 8001f3c:	20000140 	.word	0x20000140
 8001f40:	20000164 	.word	0x20000164
 8001f44:	2000017c 	.word	0x2000017c
 8001f48:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001f4c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f50:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a60      	ldr	r2, [pc, #384]	@ (80020dc <HAL_ADC_MspInit+0x47c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	f040 80b9 	bne.w	80020d2 <HAL_ADC_MspInit+0x472>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001f60:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f64:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8001f68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001f74:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001f78:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f80:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f84:	f107 0320 	add.w	r3, r7, #32
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f008 ff3b 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001f94:	f7ff fe44 	bl	8001c20 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001f98:	4b51      	ldr	r3, [pc, #324]	@ (80020e0 <HAL_ADC_MspInit+0x480>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9e:	4a50      	ldr	r2, [pc, #320]	@ (80020e0 <HAL_ADC_MspInit+0x480>)
 8001fa0:	f043 0320 	orr.w	r3, r3, #32
 8001fa4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80020e0 <HAL_ADC_MspInit+0x480>)
 8001faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fae:	f003 0220 	and.w	r2, r3, #32
 8001fb2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001fb6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001fc0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001fc4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fc6:	4b46      	ldr	r3, [pc, #280]	@ (80020e0 <HAL_ADC_MspInit+0x480>)
 8001fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fcc:	4a44      	ldr	r2, [pc, #272]	@ (80020e0 <HAL_ADC_MspInit+0x480>)
 8001fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fd6:	4b42      	ldr	r3, [pc, #264]	@ (80020e0 <HAL_ADC_MspInit+0x480>)
 8001fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fdc:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001fe0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001fe4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001fee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ff2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002006:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800200a:	4619      	mov	r1, r3
 800200c:	4835      	ldr	r0, [pc, #212]	@ (80020e4 <HAL_ADC_MspInit+0x484>)
 800200e:	f005 fce7 	bl	80079e0 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8002012:	4b35      	ldr	r3, [pc, #212]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 8002014:	4a35      	ldr	r2, [pc, #212]	@ (80020ec <HAL_ADC_MspInit+0x48c>)
 8002016:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8002018:	4b33      	ldr	r3, [pc, #204]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 800201a:	2201      	movs	r2, #1
 800201c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800201e:	4b32      	ldr	r3, [pc, #200]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002024:	4b30      	ldr	r3, [pc, #192]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800202a:	4b2f      	ldr	r3, [pc, #188]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8002030:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 8002032:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002036:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002038:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 800203a:	2201      	movs	r2, #1
 800203c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800203e:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 8002040:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002044:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002046:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 8002048:	2200      	movs	r2, #0
 800204a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 800204c:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 800204e:	2201      	movs	r2, #1
 8002050:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8002052:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 8002054:	2201      	movs	r2, #1
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002058:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 800205a:	2200      	movs	r2, #0
 800205c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800205e:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8002064:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 8002066:	2200      	movs	r2, #0
 8002068:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 800206a:	481f      	ldr	r0, [pc, #124]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 800206c:	f003 fc44 	bl	80058f8 <HAL_DMA_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8002076:	f7ff fdd3 	bl	8001c20 <Error_Handler>
    TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8002080:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002084:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8002088:	232b      	movs	r3, #43	@ 0x2b
 800208a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (HAL_DMAEx_ConfigTrigger(&handle_GPDMA1_Channel2, &TriggerConfig) != HAL_OK)
 800208e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002092:	4619      	mov	r1, r3
 8002094:	4814      	ldr	r0, [pc, #80]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 8002096:	f004 ff6d 	bl	8006f74 <HAL_DMAEx_ConfigTrigger>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_ADC_MspInit+0x444>
      Error_Handler();
 80020a0:	f7ff fdbe 	bl	8001c20 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 80020a4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80020a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 80020b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80020b2:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 80020b4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80020b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80020c0:	2110      	movs	r1, #16
 80020c2:	4809      	ldr	r0, [pc, #36]	@ (80020e8 <HAL_ADC_MspInit+0x488>)
 80020c4:	f003 ffb8 	bl	8006038 <HAL_DMA_ConfigChannelAttributes>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_ADC_MspInit+0x472>
      Error_Handler();
 80020ce:	f7ff fda7 	bl	8001c20 <Error_Handler>
}
 80020d2:	bf00      	nop
 80020d4:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	46021000 	.word	0x46021000
 80020e0:	46020c00 	.word	0x46020c00
 80020e4:	42021800 	.word	0x42021800
 80020e8:	200001f4 	.word	0x200001f4
 80020ec:	40020150 	.word	0x40020150

080020f0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <HAL_DMA2D_MspInit+0x3c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10e      	bne.n	8002120 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_DMA2D_MspInit+0x40>)
 8002104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002108:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <HAL_DMA2D_MspInit+0x40>)
 800210a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800210e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002112:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <HAL_DMA2D_MspInit+0x40>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	4002b000 	.word	0x4002b000
 8002130:	46020c00 	.word	0x46020c00

08002134 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a2a      	ldr	r2, [pc, #168]	@ (80021fc <HAL_XSPI_MspInit+0xc8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d14d      	bne.n	80021f2 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8002156:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <HAL_XSPI_MspInit+0xcc>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215c:	4a28      	ldr	r2, [pc, #160]	@ (8002200 <HAL_XSPI_MspInit+0xcc>)
 800215e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002166:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <HAL_XSPI_MspInit+0xcc>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002174:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_XSPI_MspInit+0xcc>)
 8002176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800217a:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <HAL_XSPI_MspInit+0xcc>)
 800217c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002180:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002184:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <HAL_XSPI_MspInit+0xcc>)
 8002186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002192:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_XSPI_MspInit+0xcc>)
 8002194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002198:	4a19      	ldr	r2, [pc, #100]	@ (8002200 <HAL_XSPI_MspInit+0xcc>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021a2:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <HAL_XSPI_MspInit+0xcc>)
 80021a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80021b0:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 80021b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80021c2:	2308      	movs	r3, #8
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	480d      	ldr	r0, [pc, #52]	@ (8002204 <HAL_XSPI_MspInit+0xd0>)
 80021ce:	f005 fc07 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80021d2:	230f      	movs	r3, #15
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80021e2:	2308      	movs	r3, #8
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	4806      	ldr	r0, [pc, #24]	@ (8002208 <HAL_XSPI_MspInit+0xd4>)
 80021ee:	f005 fbf7 	bl	80079e0 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	@ 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	420d3400 	.word	0x420d3400
 8002200:	46020c00 	.word	0x46020c00
 8002204:	42021c00 	.word	0x42021c00
 8002208:	42022000 	.word	0x42022000

0800220c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0c4      	sub	sp, #272	@ 0x110
 8002210:	af00      	add	r7, sp, #0
 8002212:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002216:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800221a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800222c:	f107 0318 	add.w	r3, r7, #24
 8002230:	22e0      	movs	r2, #224	@ 0xe0
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f00f f962 	bl	80114fe <memset>
  if(hi2c->Instance==I2C1)
 800223a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800223e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a63      	ldr	r2, [pc, #396]	@ (80023d4 <HAL_I2C_MspInit+0x1c8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d14f      	bne.n	80022ec <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800224c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800225e:	f107 0318 	add.w	r3, r7, #24
 8002262:	4618      	mov	r0, r3
 8002264:	f008 fdce 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 800226e:	f7ff fcd7 	bl	8001c20 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002272:	4b59      	ldr	r3, [pc, #356]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 8002274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002278:	4a57      	ldr	r2, [pc, #348]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 800227a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800227e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002282:	4b55      	ldr	r3, [pc, #340]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 8002284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002290:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002294:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002298:	2312      	movs	r3, #18
 800229a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022aa:	2304      	movs	r3, #4
 80022ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022b0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80022b4:	4619      	mov	r1, r3
 80022b6:	4849      	ldr	r0, [pc, #292]	@ (80023dc <HAL_I2C_MspInit+0x1d0>)
 80022b8:	f005 fb92 	bl	80079e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022bc:	4b46      	ldr	r3, [pc, #280]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 80022be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022c2:	4a45      	ldr	r2, [pc, #276]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 80022c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022c8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022cc:	4b42      	ldr	r3, [pc, #264]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 80022ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022d2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80022d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022e8:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022ea:	e06e      	b.n	80023ca <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 80022ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a39      	ldr	r2, [pc, #228]	@ (80023e0 <HAL_I2C_MspInit+0x1d4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d165      	bne.n	80023ca <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80022fe:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002310:	f107 0318 	add.w	r3, r7, #24
 8002314:	4618      	mov	r0, r3
 8002316:	f008 fd75 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002320:	f7ff fc7e 	bl	8001c20 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002324:	4b2c      	ldr	r3, [pc, #176]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 8002326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800232a:	4a2b      	ldr	r2, [pc, #172]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 800232c:	f043 0320 	orr.w	r3, r3, #32
 8002330:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002334:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 8002336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800233a:	f003 0220 	and.w	r2, r3, #32
 800233e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800234c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002350:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002352:	2303      	movs	r3, #3
 8002354:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002358:	2312      	movs	r3, #18
 800235a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800236a:	2304      	movs	r3, #4
 800236c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002370:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002374:	4619      	mov	r1, r3
 8002376:	481b      	ldr	r0, [pc, #108]	@ (80023e4 <HAL_I2C_MspInit+0x1d8>)
 8002378:	f005 fb32 	bl	80079e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800237c:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 800237e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002382:	4a15      	ldr	r2, [pc, #84]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 8002384:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002388:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <HAL_I2C_MspInit+0x1cc>)
 800238e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002392:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002396:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800239a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023a8:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2039      	movs	r0, #57	@ 0x39
 80023b0:	f003 f9c6 	bl	8005740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80023b4:	2039      	movs	r0, #57	@ 0x39
 80023b6:	f003 f9dd 	bl	8005774 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	203a      	movs	r0, #58	@ 0x3a
 80023c0:	f003 f9be 	bl	8005740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80023c4:	203a      	movs	r0, #58	@ 0x3a
 80023c6:	f003 f9d5 	bl	8005774 <HAL_NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40005400 	.word	0x40005400
 80023d8:	46020c00 	.word	0x46020c00
 80023dc:	42021800 	.word	0x42021800
 80023e0:	40005800 	.word	0x40005800
 80023e4:	42021400 	.word	0x42021400

080023e8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0c6      	sub	sp, #280	@ 0x118
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023f6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002408:	f107 0320 	add.w	r3, r7, #32
 800240c:	22e0      	movs	r2, #224	@ 0xe0
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f00f f874 	bl	80114fe <memset>
  if(hltdc->Instance==LTDC)
 8002416:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800241a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a92      	ldr	r2, [pc, #584]	@ (800266c <HAL_LTDC_MspInit+0x284>)
 8002424:	4293      	cmp	r3, r2
 8002426:	f040 811b 	bne.w	8002660 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0302 	mov.w	r3, #2
 8002432:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 800243c:	2303      	movs	r3, #3
 800243e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8002440:	2304      	movs	r3, #4
 8002442:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8002444:	2332      	movs	r3, #50	@ 0x32
 8002446:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8002448:	2302      	movs	r3, #2
 800244a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 800244c:	2302      	movs	r3, #2
 800244e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8002450:	2308      	movs	r3, #8
 8002452:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8002454:	2300      	movs	r3, #0
 8002456:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 800245c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002460:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002462:	f107 0320 	add.w	r3, r7, #32
 8002466:	4618      	mov	r0, r3
 8002468:	f008 fccc 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8002472:	f7ff fbd5 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002476:	4b7e      	ldr	r3, [pc, #504]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 8002478:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800247c:	4a7c      	ldr	r2, [pc, #496]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 800247e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002482:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002486:	4b7a      	ldr	r3, [pc, #488]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 8002488:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800248c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002494:	4b76      	ldr	r3, [pc, #472]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 8002496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800249a:	4a75      	ldr	r2, [pc, #468]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024a4:	4b72      	ldr	r3, [pc, #456]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 80024a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024aa:	f003 0202 	and.w	r2, r3, #2
 80024ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024b2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 80024c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c8:	4a69      	ldr	r2, [pc, #420]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024d2:	4b67      	ldr	r3, [pc, #412]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 80024d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d8:	f003 0210 	and.w	r2, r3, #16
 80024dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024ee:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f0:	4b5f      	ldr	r3, [pc, #380]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 80024f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 80024f8:	f043 0308 	orr.w	r3, r3, #8
 80024fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002500:	4b5b      	ldr	r3, [pc, #364]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 8002502:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002506:	f003 0208 	and.w	r2, r3, #8
 800250a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800250e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800251c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	4b54      	ldr	r3, [pc, #336]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 8002520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002524:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800252e:	4b50      	ldr	r3, [pc, #320]	@ (8002670 <HAL_LTDC_MspInit+0x288>)
 8002530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002534:	f003 0204 	and.w	r2, r3, #4
 8002538:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800253c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002546:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800254a:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800254c:	2304      	movs	r3, #4
 800254e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002564:	2308      	movs	r3, #8
 8002566:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800256e:	4619      	mov	r1, r3
 8002570:	4840      	ldr	r0, [pc, #256]	@ (8002674 <HAL_LTDC_MspInit+0x28c>)
 8002572:	f005 fa35 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002576:	f64f 7381 	movw	r3, #65409	@ 0xff81
 800257a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002590:	2308      	movs	r3, #8
 8002592:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002596:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800259a:	4619      	mov	r1, r3
 800259c:	4836      	ldr	r0, [pc, #216]	@ (8002678 <HAL_LTDC_MspInit+0x290>)
 800259e:	f005 fa1f 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80025a2:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 80025a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80025bc:	2308      	movs	r3, #8
 80025be:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80025c6:	4619      	mov	r1, r3
 80025c8:	482c      	ldr	r0, [pc, #176]	@ (800267c <HAL_LTDC_MspInit+0x294>)
 80025ca:	f005 fa09 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025ce:	23c0      	movs	r3, #192	@ 0xc0
 80025d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80025e6:	2307      	movs	r3, #7
 80025e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ec:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80025f0:	4619      	mov	r1, r3
 80025f2:	4823      	ldr	r0, [pc, #140]	@ (8002680 <HAL_LTDC_MspInit+0x298>)
 80025f4:	f005 f9f4 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002612:	2308      	movs	r3, #8
 8002614:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002618:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800261c:	4619      	mov	r1, r3
 800261e:	4818      	ldr	r0, [pc, #96]	@ (8002680 <HAL_LTDC_MspInit+0x298>)
 8002620:	f005 f9de 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002628:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 800263e:	2307      	movs	r3, #7
 8002640:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002648:	4619      	mov	r1, r3
 800264a:	480a      	ldr	r0, [pc, #40]	@ (8002674 <HAL_LTDC_MspInit+0x28c>)
 800264c:	f005 f9c8 	bl	80079e0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2100      	movs	r1, #0
 8002654:	2087      	movs	r0, #135	@ 0x87
 8002656:	f003 f873 	bl	8005740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800265a:	2087      	movs	r0, #135	@ 0x87
 800265c:	f003 f88a 	bl	8005774 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002660:	bf00      	nop
 8002662:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40016800 	.word	0x40016800
 8002670:	46020c00 	.word	0x46020c00
 8002674:	42020400 	.word	0x42020400
 8002678:	42021000 	.word	0x42021000
 800267c:	42020c00 	.word	0x42020c00
 8002680:	42020800 	.word	0x42020800

08002684 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b0bc      	sub	sp, #240	@ 0xf0
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	22e0      	movs	r2, #224	@ 0xe0
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f00e ff32 	bl	80114fe <memset>
  if(hrtc->Instance==RTC)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <HAL_RTC_MspInit+0x90>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d132      	bne.n	800270a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	4618      	mov	r0, r3
 80026be:	f008 fba1 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80026c8:	f7ff faaa 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026cc:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_RTC_MspInit+0x94>)
 80026ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026d2:	4a11      	ldr	r2, [pc, #68]	@ (8002718 <HAL_RTC_MspInit+0x94>)
 80026d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80026dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <HAL_RTC_MspInit+0x94>)
 80026de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80026e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <HAL_RTC_MspInit+0x94>)
 80026e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026e8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80026ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_RTC_MspInit+0x94>)
 80026ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80026f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 80026fa:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <HAL_RTC_MspInit+0x94>)
 80026fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002700:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <HAL_RTC_MspInit+0x94>)
 8002702:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002706:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800270a:	bf00      	nop
 800270c:	37f0      	adds	r7, #240	@ 0xf0
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	46007800 	.word	0x46007800
 8002718:	46020c00 	.word	0x46020c00

0800271c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0b      	ldr	r2, [pc, #44]	@ (8002758 <HAL_TIM_PWM_MspInit+0x3c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_TIM_PWM_MspInit+0x40>)
 8002730:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002734:	4a09      	ldr	r2, [pc, #36]	@ (800275c <HAL_TIM_PWM_MspInit+0x40>)
 8002736:	f043 0302 	orr.w	r3, r3, #2
 800273a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <HAL_TIM_PWM_MspInit+0x40>)
 8002740:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40000400 	.word	0x40000400
 800275c:	46020c00 	.word	0x46020c00

08002760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0b      	ldr	r2, [pc, #44]	@ (800279c <HAL_TIM_Base_MspInit+0x3c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002772:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <HAL_TIM_Base_MspInit+0x40>)
 8002774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002778:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_TIM_Base_MspInit+0x40>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_TIM_Base_MspInit+0x40>)
 8002784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40014000 	.word	0x40014000
 80027a0:	46020c00 	.word	0x46020c00

080027a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 030c 	add.w	r3, r7, #12
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a12      	ldr	r2, [pc, #72]	@ (800280c <HAL_TIM_MspPostInit+0x68>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d11e      	bne.n	8002804 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027c6:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <HAL_TIM_MspPostInit+0x6c>)
 80027c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027cc:	4a10      	ldr	r2, [pc, #64]	@ (8002810 <HAL_TIM_MspPostInit+0x6c>)
 80027ce:	f043 0310 	orr.w	r3, r3, #16
 80027d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <HAL_TIM_MspPostInit+0x6c>)
 80027d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 80027e4:	2340      	movs	r3, #64	@ 0x40
 80027e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027f4:	2302      	movs	r3, #2
 80027f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 030c 	add.w	r3, r7, #12
 80027fc:	4619      	mov	r1, r3
 80027fe:	4805      	ldr	r0, [pc, #20]	@ (8002814 <HAL_TIM_MspPostInit+0x70>)
 8002800:	f005 f8ee 	bl	80079e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002804:	bf00      	nop
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40000400 	.word	0x40000400
 8002810:	46020c00 	.word	0x46020c00
 8002814:	42021000 	.word	0x42021000

08002818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0c2      	sub	sp, #264	@ 0x108
 800281c:	af00      	add	r7, sp, #0
 800281e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002826:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	22e0      	movs	r2, #224	@ 0xe0
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f00e fe5c 	bl	80114fe <memset>
  if(huart->Instance==USART1)
 8002846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800284a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2f      	ldr	r2, [pc, #188]	@ (8002910 <HAL_UART_MspInit+0xf8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d155      	bne.n	8002904 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002858:	f04f 0201 	mov.w	r2, #1
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002864:	2300      	movs	r3, #0
 8002866:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	4618      	mov	r0, r3
 800286e:	f008 fac9 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002878:	f7ff f9d2 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800287c:	4b25      	ldr	r3, [pc, #148]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 800287e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002882:	4a24      	ldr	r2, [pc, #144]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 8002884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002888:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800288c:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 800288e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	4b1e      	ldr	r3, [pc, #120]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 800289c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <HAL_UART_MspInit+0xfc>)
 80028ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028b0:	f003 0201 	and.w	r2, r3, #1
 80028b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80028b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80028c2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028c6:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028c8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028e2:	2307      	movs	r3, #7
 80028e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80028ec:	4619      	mov	r1, r3
 80028ee:	480a      	ldr	r0, [pc, #40]	@ (8002918 <HAL_UART_MspInit+0x100>)
 80028f0:	f005 f876 	bl	80079e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2100      	movs	r1, #0
 80028f8:	203d      	movs	r0, #61	@ 0x3d
 80028fa:	f002 ff21 	bl	8005740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028fe:	203d      	movs	r0, #61	@ 0x3d
 8002900:	f002 ff38 	bl	8005774 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002904:	bf00      	nop
 8002906:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40013800 	.word	0x40013800
 8002914:	46020c00 	.word	0x46020c00
 8002918:	42020000 	.word	0x42020000

0800291c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b0be      	sub	sp, #248	@ 0xf8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002924:	f107 0318 	add.w	r3, r7, #24
 8002928:	22e0      	movs	r2, #224	@ 0xe0
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f00e fde6 	bl	80114fe <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3a      	ldr	r2, [pc, #232]	@ (8002a20 <HAL_PCD_MspInit+0x104>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d16d      	bne.n	8002a18 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293c:	4b39      	ldr	r3, [pc, #228]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 800293e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002942:	4a38      	ldr	r2, [pc, #224]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800294c:	4b35      	ldr	r3, [pc, #212]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 800294e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0308 	mov.w	r3, #8
 8002962:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002966:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800296a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800296e:	f107 0318 	add.w	r3, r7, #24
 8002972:	4618      	mov	r0, r3
 8002974:	f008 fa46 	bl	800ae04 <HAL_RCCEx_PeriphCLKConfig>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 800297e:	f7ff f94f 	bl	8001c20 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002982:	200c      	movs	r0, #12
 8002984:	f000 fc1c 	bl	80031c0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002988:	4b26      	ldr	r3, [pc, #152]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800298e:	4a25      	ldr	r2, [pc, #148]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 8002990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002994:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002998:	4b22      	ldr	r3, [pc, #136]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 800299a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80029a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 80029a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 80029ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 80029b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c4:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11b      	bne.n	8002a0a <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 80029d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d8:	4a12      	ldr	r2, [pc, #72]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80029e2:	4b10      	ldr	r3, [pc, #64]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 80029e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80029f0:	f006 ff0e 	bl	8009810 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80029f4:	f006 ff3c 	bl	8009870 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 80029fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fe:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <HAL_PCD_MspInit+0x108>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002a08:	e003      	b.n	8002a12 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002a0a:	f006 ff01 	bl	8009810 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002a0e:	f006 ff2f 	bl	8009870 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f000 fbc0 	bl	8003198 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002a18:	bf00      	nop
 8002a1a:	37f8      	adds	r7, #248	@ 0xf8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	42040000 	.word	0x42040000
 8002a24:	46020c00 	.word	0x46020c00

08002a28 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b0a4      	sub	sp, #144	@ 0x90
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4abb      	ldr	r2, [pc, #748]	@ (8002d24 <HAL_SAI_MspInit+0x2fc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	f040 80ca 	bne.w	8002bd0 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002a3c:	4bba      	ldr	r3, [pc, #744]	@ (8002d28 <HAL_SAI_MspInit+0x300>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10e      	bne.n	8002a62 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002a44:	4bb9      	ldr	r3, [pc, #740]	@ (8002d2c <HAL_SAI_MspInit+0x304>)
 8002a46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a4a:	4ab8      	ldr	r2, [pc, #736]	@ (8002d2c <HAL_SAI_MspInit+0x304>)
 8002a4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a50:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002a54:	4bb5      	ldr	r3, [pc, #724]	@ (8002d2c <HAL_SAI_MspInit+0x304>)
 8002a56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002a62:	4bb1      	ldr	r3, [pc, #708]	@ (8002d28 <HAL_SAI_MspInit+0x300>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	4aaf      	ldr	r2, [pc, #700]	@ (8002d28 <HAL_SAI_MspInit+0x300>)
 8002a6a:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002a6c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002a70:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002a84:	230d      	movs	r3, #13
 8002a86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002a8e:	4619      	mov	r1, r3
 8002a90:	48a7      	ldr	r0, [pc, #668]	@ (8002d30 <HAL_SAI_MspInit+0x308>)
 8002a92:	f004 ffa5 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002aae:	230d      	movs	r3, #13
 8002ab0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ab8:	4619      	mov	r1, r3
 8002aba:	489d      	ldr	r0, [pc, #628]	@ (8002d30 <HAL_SAI_MspInit+0x308>)
 8002abc:	f004 ff90 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002ad8:	230d      	movs	r3, #13
 8002ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ade:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4893      	ldr	r0, [pc, #588]	@ (8002d34 <HAL_SAI_MspInit+0x30c>)
 8002ae6:	f004 ff7b 	bl	80079e0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002aea:	2321      	movs	r3, #33	@ 0x21
 8002aec:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8002aee:	2326      	movs	r3, #38	@ 0x26
 8002af0:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002afa:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002afc:	2308      	movs	r3, #8
 8002afe:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002b04:	2302      	movs	r3, #2
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002b08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002b12:	2301      	movs	r3, #1
 8002b14:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002b22:	2300      	movs	r3, #0
 8002b24:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8002b2e:	f107 0310 	add.w	r3, r7, #16
 8002b32:	4981      	ldr	r1, [pc, #516]	@ (8002d38 <HAL_SAI_MspInit+0x310>)
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 f831 	bl	8006b9c <HAL_DMAEx_List_BuildNode>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8002b40:	f7ff f86e 	bl	8001c20 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8002b44:	4a7c      	ldr	r2, [pc, #496]	@ (8002d38 <HAL_SAI_MspInit+0x310>)
 8002b46:	2100      	movs	r1, #0
 8002b48:	487c      	ldr	r0, [pc, #496]	@ (8002d3c <HAL_SAI_MspInit+0x314>)
 8002b4a:	f004 f853 	bl	8006bf4 <HAL_DMAEx_List_InsertNode>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 8002b54:	f7ff f864 	bl	8001c20 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 8002b58:	4878      	ldr	r0, [pc, #480]	@ (8002d3c <HAL_SAI_MspInit+0x314>)
 8002b5a:	f004 f914 	bl	8006d86 <HAL_DMAEx_List_SetCircularMode>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 8002b64:	f7ff f85c 	bl	8001c20 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002b68:	4b75      	ldr	r3, [pc, #468]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002b6a:	4a76      	ldr	r2, [pc, #472]	@ (8002d44 <HAL_SAI_MspInit+0x31c>)
 8002b6c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8002b6e:	4b74      	ldr	r3, [pc, #464]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002b70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002b76:	4b72      	ldr	r3, [pc, #456]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002b7c:	4b70      	ldr	r3, [pc, #448]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002b82:	4b6f      	ldr	r3, [pc, #444]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002b88:	4b6d      	ldr	r3, [pc, #436]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002b8a:	2281      	movs	r2, #129	@ 0x81
 8002b8c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002b8e:	486c      	ldr	r0, [pc, #432]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002b90:	f003 fe44 	bl	800681c <HAL_DMAEx_List_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 8002b9a:	f7ff f841 	bl	8001c20 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 8002b9e:	4967      	ldr	r1, [pc, #412]	@ (8002d3c <HAL_SAI_MspInit+0x314>)
 8002ba0:	4867      	ldr	r0, [pc, #412]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002ba2:	f004 f951 	bl	8006e48 <HAL_DMAEx_List_LinkQ>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 8002bac:	f7ff f838 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a63      	ldr	r2, [pc, #396]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002bb8:	4a61      	ldr	r2, [pc, #388]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	485f      	ldr	r0, [pc, #380]	@ (8002d40 <HAL_SAI_MspInit+0x318>)
 8002bc2:	f003 fa39 	bl	8006038 <HAL_DMA_ConfigChannelAttributes>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8002bcc:	f7ff f828 	bl	8001c20 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d48 <HAL_SAI_MspInit+0x320>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	f040 80eb 	bne.w	8002db2 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002bdc:	4b52      	ldr	r3, [pc, #328]	@ (8002d28 <HAL_SAI_MspInit+0x300>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10e      	bne.n	8002c02 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002be4:	4b51      	ldr	r3, [pc, #324]	@ (8002d2c <HAL_SAI_MspInit+0x304>)
 8002be6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002bea:	4a50      	ldr	r2, [pc, #320]	@ (8002d2c <HAL_SAI_MspInit+0x304>)
 8002bec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bf0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8002d2c <HAL_SAI_MspInit+0x304>)
 8002bf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002c02:	4b49      	ldr	r3, [pc, #292]	@ (8002d28 <HAL_SAI_MspInit+0x300>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a47      	ldr	r2, [pc, #284]	@ (8002d28 <HAL_SAI_MspInit+0x300>)
 8002c0a:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c10:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c24:	230d      	movs	r3, #13
 8002c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4846      	ldr	r0, [pc, #280]	@ (8002d4c <HAL_SAI_MspInit+0x324>)
 8002c32:	f004 fed5 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c4e:	230d      	movs	r3, #13
 8002c50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c54:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002c58:	4619      	mov	r1, r3
 8002c5a:	483d      	ldr	r0, [pc, #244]	@ (8002d50 <HAL_SAI_MspInit+0x328>)
 8002c5c:	f004 fec0 	bl	80079e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c60:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c64:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c78:	230d      	movs	r3, #13
 8002c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002c82:	4619      	mov	r1, r3
 8002c84:	4832      	ldr	r0, [pc, #200]	@ (8002d50 <HAL_SAI_MspInit+0x328>)
 8002c86:	f004 feab 	bl	80079e0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002c8a:	2321      	movs	r3, #33	@ 0x21
 8002c8c:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8002c8e:	2327      	movs	r3, #39	@ 0x27
 8002c90:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002c9e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002ca8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002cce:	f107 0310 	add.w	r3, r7, #16
 8002cd2:	4920      	ldr	r1, [pc, #128]	@ (8002d54 <HAL_SAI_MspInit+0x32c>)
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 ff61 	bl	8006b9c <HAL_DMAEx_List_BuildNode>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8002ce0:	f7fe ff9e 	bl	8001c20 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d54 <HAL_SAI_MspInit+0x32c>)
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	481b      	ldr	r0, [pc, #108]	@ (8002d58 <HAL_SAI_MspInit+0x330>)
 8002cea:	f003 ff83 	bl	8006bf4 <HAL_DMAEx_List_InsertNode>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8002cf4:	f7fe ff94 	bl	8001c20 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8002cf8:	4817      	ldr	r0, [pc, #92]	@ (8002d58 <HAL_SAI_MspInit+0x330>)
 8002cfa:	f004 f844 	bl	8006d86 <HAL_DMAEx_List_SetCircularMode>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8002d04:	f7fe ff8c 	bl	8001c20 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <HAL_SAI_MspInit+0x334>)
 8002d0a:	4a15      	ldr	r2, [pc, #84]	@ (8002d60 <HAL_SAI_MspInit+0x338>)
 8002d0c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <HAL_SAI_MspInit+0x334>)
 8002d10:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d14:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002d16:	4b11      	ldr	r3, [pc, #68]	@ (8002d5c <HAL_SAI_MspInit+0x334>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <HAL_SAI_MspInit+0x334>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d22:	e01f      	b.n	8002d64 <HAL_SAI_MspInit+0x33c>
 8002d24:	40015804 	.word	0x40015804
 8002d28:	20002048 	.word	0x20002048
 8002d2c:	46020c00 	.word	0x46020c00
 8002d30:	42020400 	.word	0x42020400
 8002d34:	42021800 	.word	0x42021800
 8002d38:	200005e4 	.word	0x200005e4
 8002d3c:	20000608 	.word	0x20000608
 8002d40:	20000620 	.word	0x20000620
 8002d44:	400201d0 	.word	0x400201d0
 8002d48:	40015824 	.word	0x40015824
 8002d4c:	42020000 	.word	0x42020000
 8002d50:	42020800 	.word	0x42020800
 8002d54:	20000698 	.word	0x20000698
 8002d58:	200006bc 	.word	0x200006bc
 8002d5c:	200006d4 	.word	0x200006d4
 8002d60:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002d64:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <HAL_SAI_MspInit+0x394>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002d6a:	4b14      	ldr	r3, [pc, #80]	@ (8002dbc <HAL_SAI_MspInit+0x394>)
 8002d6c:	2281      	movs	r2, #129	@ 0x81
 8002d6e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002d70:	4812      	ldr	r0, [pc, #72]	@ (8002dbc <HAL_SAI_MspInit+0x394>)
 8002d72:	f003 fd53 	bl	800681c <HAL_DMAEx_List_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 8002d7c:	f7fe ff50 	bl	8001c20 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002d80:	490f      	ldr	r1, [pc, #60]	@ (8002dc0 <HAL_SAI_MspInit+0x398>)
 8002d82:	480e      	ldr	r0, [pc, #56]	@ (8002dbc <HAL_SAI_MspInit+0x394>)
 8002d84:	f004 f860 	bl	8006e48 <HAL_DMAEx_List_LinkQ>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 8002d8e:	f7fe ff47 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a09      	ldr	r2, [pc, #36]	@ (8002dbc <HAL_SAI_MspInit+0x394>)
 8002d96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002d9a:	4a08      	ldr	r2, [pc, #32]	@ (8002dbc <HAL_SAI_MspInit+0x394>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002da0:	2110      	movs	r1, #16
 8002da2:	4806      	ldr	r0, [pc, #24]	@ (8002dbc <HAL_SAI_MspInit+0x394>)
 8002da4:	f003 f948 	bl	8006038 <HAL_DMA_ConfigChannelAttributes>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 8002dae:	f7fe ff37 	bl	8001c20 <Error_Handler>
    }

    }
}
 8002db2:	bf00      	nop
 8002db4:	3790      	adds	r7, #144	@ 0x90
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200006d4 	.word	0x200006d4
 8002dc0:	200006bc 	.word	0x200006bc

08002dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <NMI_Handler+0x4>

08002dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <HardFault_Handler+0x4>

08002dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd8:	bf00      	nop
 8002dda:	e7fd      	b.n	8002dd8 <MemManage_Handler+0x4>

08002ddc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de0:	bf00      	nop
 8002de2:	e7fd      	b.n	8002de0 <BusFault_Handler+0x4>

08002de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de8:	bf00      	nop
 8002dea:	e7fd      	b.n	8002de8 <UsageFault_Handler+0x4>

08002dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1a:	f000 f979 	bl	8003110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8002e26:	2002      	movs	r0, #2
 8002e28:	f004 ffe4 	bl	8007df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8002e34:	2010      	movs	r0, #16
 8002e36:	f004 ffdd 	bl	8007df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002e42:	2020      	movs	r0, #32
 8002e44:	f004 ffd6 	bl	8007df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002e50:	4802      	ldr	r0, [pc, #8]	@ (8002e5c <GPDMA1_Channel0_IRQHandler+0x10>)
 8002e52:	f002 ff82 	bl	8005d5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000017c 	.word	0x2000017c

08002e60 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002e64:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002e66:	f002 ff78 	bl	8005d5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200006d4 	.word	0x200006d4

08002e74 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002e78:	4802      	ldr	r0, [pc, #8]	@ (8002e84 <GPDMA1_Channel2_IRQHandler+0x10>)
 8002e7a:	f002 ff6e 	bl	8005d5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200001f4 	.word	0x200001f4

08002e88 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8002e8c:	4802      	ldr	r0, [pc, #8]	@ (8002e98 <GPDMA1_Channel3_IRQHandler+0x10>)
 8002e8e:	f002 ff64 	bl	8005d5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000620 	.word	0x20000620

08002e9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ea0:	4802      	ldr	r0, [pc, #8]	@ (8002eac <ADC1_2_IRQHandler+0x10>)
 8002ea2:	f001 f925 	bl	80040f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000028 	.word	0x20000028

08002eb0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002eb4:	4802      	ldr	r0, [pc, #8]	@ (8002ec0 <I2C2_EV_IRQHandler+0x10>)
 8002eb6:	f005 f874 	bl	8007fa2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000388 	.word	0x20000388

08002ec4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002ec8:	4802      	ldr	r0, [pc, #8]	@ (8002ed4 <I2C2_ER_IRQHandler+0x10>)
 8002eca:	f005 f884 	bl	8007fd6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000388 	.word	0x20000388

08002ed8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002edc:	4802      	ldr	r0, [pc, #8]	@ (8002ee8 <USART1_IRQHandler+0x10>)
 8002ede:	f00c fe55 	bl	800fb8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200007e4 	.word	0x200007e4

08002eec <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002ef0:	4802      	ldr	r0, [pc, #8]	@ (8002efc <LTDC_IRQHandler+0x10>)
 8002ef2:	f005 fffd 	bl	8008ef0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200003dc 	.word	0x200003dc

08002f00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f04:	4b18      	ldr	r3, [pc, #96]	@ (8002f68 <SystemInit+0x68>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	4a17      	ldr	r2, [pc, #92]	@ (8002f68 <SystemInit+0x68>)
 8002f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002f14:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <SystemInit+0x6c>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002f1a:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <SystemInit+0x6c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <SystemInit+0x6c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002f26:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <SystemInit+0x6c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <SystemInit+0x6c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0e      	ldr	r2, [pc, #56]	@ (8002f6c <SystemInit+0x6c>)
 8002f32:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002f36:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002f3a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <SystemInit+0x6c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002f42:	4b0a      	ldr	r3, [pc, #40]	@ (8002f6c <SystemInit+0x6c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a09      	ldr	r2, [pc, #36]	@ (8002f6c <SystemInit+0x6c>)
 8002f48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002f4e:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <SystemInit+0x6c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f54:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <SystemInit+0x68>)
 8002f56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002f5a:	609a      	str	r2, [r3, #8]
  #endif
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000ed00 	.word	0xe000ed00
 8002f6c:	46020c00 	.word	0x46020c00

08002f70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fa8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f74:	f7ff ffc4 	bl	8002f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f7a:	e003      	b.n	8002f84 <LoopCopyDataInit>

08002f7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f82:	3104      	adds	r1, #4

08002f84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f84:	480a      	ldr	r0, [pc, #40]	@ (8002fb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f86:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f8c:	d3f6      	bcc.n	8002f7c <CopyDataInit>
	ldr	r2, =_sbss
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f90:	e002      	b.n	8002f98 <LoopFillZerobss>

08002f92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f94:	f842 3b04 	str.w	r3, [r2], #4

08002f98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <LoopForever+0x16>)
	cmp	r2, r3
 8002f9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f9c:	d3f9      	bcc.n	8002f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f9e:	f00e fab7 	bl	8011510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fa2:	f7fd fb13 	bl	80005cc <main>

08002fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fa6:	e7fe      	b.n	8002fa6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002fa8:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002fac:	08011680 	.word	0x08011680
	ldr	r0, =_sdata
 8002fb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fb4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002fb8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002fbc:	20002050 	.word	0x20002050

08002fc0 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fc0:	e7fe      	b.n	8002fc0 <ADC4_IRQHandler>
	...

08002fc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc8:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <HAL_Init+0x50>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a11      	ldr	r2, [pc, #68]	@ (8003014 <HAL_Init+0x50>)
 8002fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f002 fba8 	bl	800572a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002fda:	f007 fd35 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <HAL_Init+0x54>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	490c      	ldr	r1, [pc, #48]	@ (800301c <HAL_Init+0x58>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8003020 <HAL_Init+0x5c>)
 8002ff2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ff4:	2004      	movs	r0, #4
 8002ff6:	f002 fbed 	bl	80057d4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ffa:	200f      	movs	r0, #15
 8002ffc:	f000 f812 	bl	8003024 <HAL_InitTick>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e002      	b.n	8003010 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800300a:	f7fe fe0f 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40022000 	.word	0x40022000
 8003018:	46020c00 	.word	0x46020c00
 800301c:	08011570 	.word	0x08011570
 8003020:	20000000 	.word	0x20000000

08003024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003030:	4b33      	ldr	r3, [pc, #204]	@ (8003100 <HAL_InitTick+0xdc>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e05c      	b.n	80030f6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800303c:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <HAL_InitTick+0xe0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b04      	cmp	r3, #4
 8003046:	d10c      	bne.n	8003062 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003048:	4b2f      	ldr	r3, [pc, #188]	@ (8003108 <HAL_InitTick+0xe4>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b2c      	ldr	r3, [pc, #176]	@ (8003100 <HAL_InitTick+0xdc>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003056:	fbb3 f3f1 	udiv	r3, r3, r1
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e037      	b.n	80030d2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003062:	f002 fc0f 	bl	8005884 <HAL_SYSTICK_GetCLKSourceConfig>
 8003066:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d023      	beq.n	80030b6 <HAL_InitTick+0x92>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d82d      	bhi.n	80030d0 <HAL_InitTick+0xac>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_InitTick+0x5e>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d00d      	beq.n	800309c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003080:	e026      	b.n	80030d0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003082:	4b21      	ldr	r3, [pc, #132]	@ (8003108 <HAL_InitTick+0xe4>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b1e      	ldr	r3, [pc, #120]	@ (8003100 <HAL_InitTick+0xdc>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003090:	fbb3 f3f1 	udiv	r3, r3, r1
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	60fb      	str	r3, [r7, #12]
        break;
 800309a:	e01a      	b.n	80030d2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800309c:	4b18      	ldr	r3, [pc, #96]	@ (8003100 <HAL_InitTick+0xdc>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030aa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	60fb      	str	r3, [r7, #12]
        break;
 80030b4:	e00d      	b.n	80030d2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80030b6:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <HAL_InitTick+0xdc>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	60fb      	str	r3, [r7, #12]
        break;
 80030ce:	e000      	b.n	80030d2 <HAL_InitTick+0xae>
        break;
 80030d0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f002 fb5c 	bl	8005790 <HAL_SYSTICK_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e009      	b.n	80030f6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e2:	2200      	movs	r2, #0
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ea:	f002 fb29 	bl	8005740 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80030ee:	4a07      	ldr	r2, [pc, #28]	@ (800310c <HAL_InitTick+0xe8>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000008 	.word	0x20000008
 8003104:	e000e010 	.word	0xe000e010
 8003108:	20000000 	.word	0x20000000
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003114:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_IncTick+0x20>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <HAL_IncTick+0x24>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4413      	add	r3, r2
 8003120:	4a04      	ldr	r2, [pc, #16]	@ (8003134 <HAL_IncTick+0x24>)
 8003122:	6013      	str	r3, [r2, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000008 	.word	0x20000008
 8003134:	2000204c 	.word	0x2000204c

08003138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return uwTick;
 800313c:	4b03      	ldr	r3, [pc, #12]	@ (800314c <HAL_GetTick+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	2000204c 	.word	0x2000204c

08003150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff ffee 	bl	8003138 <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d005      	beq.n	8003176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_Delay+0x44>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003176:	bf00      	nop
 8003178:	f7ff ffde 	bl	8003138 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d8f7      	bhi.n	8003178 <HAL_Delay+0x28>
  {
  }
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000008 	.word	0x20000008

08003198 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80031a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a4:	f023 0201 	bic.w	r2, r3, #1
 80031a8:	4904      	ldr	r1, [pc, #16]	@ (80031bc <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	46000400 	.word	0x46000400

080031c0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80031c8:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80031ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031cc:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80031d0:	4904      	ldr	r1, [pc, #16]	@ (80031e4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	46000400 	.word	0x46000400

080031e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	609a      	str	r2, [r3, #8]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a0a      	ldr	r2, [pc, #40]	@ (800328c <LL_ADC_SetResolution+0x3c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d104      	bne.n	8003270 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3b01      	subs	r3, #1
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f023 020c 	bic.w	r2, r3, #12
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	60da      	str	r2, [r3, #12]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	46021000 	.word	0x46021000

08003290 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3360      	adds	r3, #96	@ 0x60
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	430b      	orrs	r3, r1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3360      	adds	r3, #96	@ 0x60
 80032e0:	461a      	mov	r2, r3
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80032fe:	b480      	push	{r7}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3360      	adds	r3, #96	@ 0x60
 800330e:	461a      	mov	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	431a      	orrs	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	601a      	str	r2, [r3, #0]
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3360      	adds	r3, #96	@ 0x60
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	431a      	orrs	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	601a      	str	r2, [r3, #0]
}
 800335e:	bf00      	nop
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800336a:	b480      	push	{r7}
 800336c:	b087      	sub	sp, #28
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3360      	adds	r3, #96	@ 0x60
 800337a:	461a      	mov	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	431a      	orrs	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	601a      	str	r2, [r3, #0]
}
 8003394:	bf00      	nop
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	2a00      	cmp	r2, #0
 80033ca:	d002      	beq.n	80033d2 <LL_ADC_SetGainCompensation+0x32>
 80033cc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80033d0:	e000      	b.n	80033d4 <LL_ADC_SetGainCompensation+0x34>
 80033d2:	2200      	movs	r2, #0
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2107      	movs	r1, #7
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	401a      	ands	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	431a      	orrs	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	@ 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a2b      	ldr	r2, [pc, #172]	@ (8003508 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d020      	beq.n	80034a2 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3330      	adds	r3, #48	@ 0x30
 8003464:	461a      	mov	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	4413      	add	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	211f      	movs	r1, #31
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	401a      	ands	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	0e9b      	lsrs	r3, r3, #26
 800348c:	f003 011f 	and.w	r1, r3, #31
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	431a      	orrs	r2, r3
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80034a0:	e02b      	b.n	80034fa <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	210f      	movs	r1, #15
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	401a      	ands	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <LL_ADC_REG_SetSequencerRanks+0x7e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	0e9b      	lsrs	r3, r3, #26
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	e010      	b.n	80034ec <LL_ADC_REG_SetSequencerRanks+0xa0>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	613b      	str	r3, [r7, #16]
  return result;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80034e0:	2320      	movs	r3, #32
 80034e2:	e003      	b.n	80034ec <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	f001 011f 	and.w	r1, r1, #31
 80034f2:	408b      	lsls	r3, r1
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034fa:	bf00      	nop
 80034fc:	3724      	adds	r7, #36	@ 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	46021000 	.word	0x46021000

0800350c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d107      	bne.n	8003530 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	0e9b      	lsrs	r3, r3, #26
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2201      	movs	r2, #1
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	e015      	b.n	800355c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	60fb      	str	r3, [r7, #12]
  return result;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e003      	b.n	8003552 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	2201      	movs	r2, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	0e9b      	lsrs	r3, r3, #26
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	401a      	ands	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0303 	and.w	r3, r3, #3
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ca:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b08b      	sub	sp, #44	@ 0x2c
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a2d      	ldr	r2, [pc, #180]	@ (80036a8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d042      	beq.n	800367e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d104      	bne.n	800360c <LL_ADC_SetChannelSamplingTime+0x28>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	0e9b      	lsrs	r3, r3, #26
 8003606:	f003 021f 	and.w	r2, r3, #31
 800360a:	e011      	b.n	8003630 <LL_ADC_SetChannelSamplingTime+0x4c>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	617b      	str	r3, [r7, #20]
  return result;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003622:	2320      	movs	r3, #32
 8003624:	e003      	b.n	800362e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	0e5b      	lsrs	r3, r3, #25
 8003634:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003638:	460b      	mov	r3, r1
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	1ad2      	subs	r2, r2, r3
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3314      	adds	r3, #20
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	0e5b      	lsrs	r3, r3, #25
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	4413      	add	r3, r2
 800365c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	2107      	movs	r1, #7
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	401a      	ands	r2, r3
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	431a      	orrs	r2, r3
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 800367c:	e00e      	b.n	800369c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	43db      	mvns	r3, r3
 8003688:	401a      	ands	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	0219      	lsls	r1, r3, #8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	400b      	ands	r3, r1
 8003692:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003696:	431a      	orrs	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	615a      	str	r2, [r3, #20]
}
 800369c:	bf00      	nop
 800369e:	372c      	adds	r7, #44	@ 0x2c
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	46021000 	.word	0x46021000

080036ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036c4:	43db      	mvns	r3, r3
 80036c6:	401a      	ands	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0318 	and.w	r3, r3, #24
 80036ce:	4908      	ldr	r1, [pc, #32]	@ (80036f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036d0:	40d9      	lsrs	r1, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	400b      	ands	r3, r1
 80036d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036da:	431a      	orrs	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	000fffff 	.word	0x000fffff

080036f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 031f 	and.w	r3, r3, #31
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800373c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6093      	str	r3, [r2, #8]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003764:	d101      	bne.n	800376a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003788:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800378c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037b4:	d101      	bne.n	80037ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	609a      	str	r2, [r3, #8]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <LL_ADC_IsEnabled+0x18>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <LL_ADC_IsEnabled+0x1a>
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003826:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800382a:	f043 0204 	orr.w	r2, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	609a      	str	r2, [r3, #8]
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d101      	bne.n	8003856 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b08      	cmp	r3, #8
 8003876:	d101      	bne.n	800387c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b08b      	sub	sp, #44	@ 0x2c
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800389a:	2300      	movs	r3, #0
 800389c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e2ce      	b.n	8003e4a <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a95      	ldr	r2, [pc, #596]	@ (8003b10 <HAL_ADC_Init+0x284>)
 80038ba:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fe f9cb 	bl	8001c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff37 	bl	8003750 <LL_ADC_IsDeepPowerDownEnabled>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff1d 	bl	800372c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff52 	bl	80037a0 <LL_ADC_IsInternalRegulatorEnabled>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d115      	bne.n	800392e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff ff36 	bl	8003778 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800390c:	4b81      	ldr	r3, [pc, #516]	@ (8003b14 <HAL_ADC_Init+0x288>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	4a81      	ldr	r2, [pc, #516]	@ (8003b18 <HAL_ADC_Init+0x28c>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	099b      	lsrs	r3, r3, #6
 800391a:	3301      	adds	r3, #1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003920:	e002      	b.n	8003928 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3b01      	subs	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f9      	bne.n	8003922 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ff34 	bl	80037a0 <LL_ADC_IsInternalRegulatorEnabled>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10e      	bne.n	800395c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003942:	f043 0210 	orr.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff6c 	bl	800383e <LL_ADC_REG_IsConversionOngoing>
 8003966:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 825f 	bne.w	8003e34 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f040 825b 	bne.w	8003e34 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003982:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003986:	f043 0202 	orr.w	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff ff2c 	bl	80037f0 <LL_ADC_IsEnabled>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d14f      	bne.n	8003a3e <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b10 <HAL_ADC_Init+0x284>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d037      	beq.n	8003a18 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a5b      	ldr	r2, [pc, #364]	@ (8003b1c <HAL_ADC_Init+0x290>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_ADC_Init+0x130>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003b20 <HAL_ADC_Init+0x294>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d10e      	bne.n	80039da <HAL_ADC_Init+0x14e>
 80039bc:	4857      	ldr	r0, [pc, #348]	@ (8003b1c <HAL_ADC_Init+0x290>)
 80039be:	f7ff ff17 	bl	80037f0 <LL_ADC_IsEnabled>
 80039c2:	4604      	mov	r4, r0
 80039c4:	4856      	ldr	r0, [pc, #344]	@ (8003b20 <HAL_ADC_Init+0x294>)
 80039c6:	f7ff ff13 	bl	80037f0 <LL_ADC_IsEnabled>
 80039ca:	4603      	mov	r3, r0
 80039cc:	4323      	orrs	r3, r4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	e008      	b.n	80039ec <HAL_ADC_Init+0x160>
 80039da:	484d      	ldr	r0, [pc, #308]	@ (8003b10 <HAL_ADC_Init+0x284>)
 80039dc:	f7ff ff08 	bl	80037f0 <LL_ADC_IsEnabled>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf0c      	ite	eq
 80039e6:	2301      	moveq	r3, #1
 80039e8:	2300      	movne	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d026      	beq.n	8003a3e <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a49      	ldr	r2, [pc, #292]	@ (8003b1c <HAL_ADC_Init+0x290>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_ADC_Init+0x178>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a48      	ldr	r2, [pc, #288]	@ (8003b20 <HAL_ADC_Init+0x294>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <HAL_ADC_Init+0x17c>
 8003a04:	4a47      	ldr	r2, [pc, #284]	@ (8003b24 <HAL_ADC_Init+0x298>)
 8003a06:	e000      	b.n	8003a0a <HAL_ADC_Init+0x17e>
 8003a08:	4a47      	ldr	r2, [pc, #284]	@ (8003b28 <HAL_ADC_Init+0x29c>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4610      	mov	r0, r2
 8003a12:	f7ff fbe9 	bl	80031e8 <LL_ADC_SetCommonClock>
 8003a16:	e012      	b.n	8003a3e <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f7ff fc14 	bl	8003250 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003a28:	4b3f      	ldr	r3, [pc, #252]	@ (8003b28 <HAL_ADC_Init+0x29c>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003a38:	493b      	ldr	r1, [pc, #236]	@ (8003b28 <HAL_ADC_Init+0x29c>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a33      	ldr	r2, [pc, #204]	@ (8003b10 <HAL_ADC_Init+0x284>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d010      	beq.n	8003a6a <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a4e:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003a54:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003a5a:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003a62:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003a64:	4313      	orrs	r3, r2
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	e035      	b.n	8003ad6 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7f1b      	ldrb	r3, [r3, #28]
 8003a6e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a76:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a78:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003a7e:	2a00      	cmp	r2, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_ADC_Init+0x1fc>
 8003a82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a86:	e000      	b.n	8003a8a <HAL_ADC_Init+0x1fe>
 8003a88:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003a8a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003a90:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da04      	bge.n	8003aa4 <HAL_ADC_Init+0x218>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003aa2:	e001      	b.n	8003aa8 <HAL_ADC_Init+0x21c>
 8003aa4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003aa8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	491b      	ldr	r1, [pc, #108]	@ (8003b1c <HAL_ADC_Init+0x290>)
 8003ab0:	428b      	cmp	r3, r1
 8003ab2:	d004      	beq.n	8003abe <HAL_ADC_Init+0x232>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4919      	ldr	r1, [pc, #100]	@ (8003b20 <HAL_ADC_Init+0x294>)
 8003aba:	428b      	cmp	r3, r1
 8003abc:	d103      	bne.n	8003ac6 <HAL_ADC_Init+0x23a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ac4:	e003      	b.n	8003ace <HAL_ADC_Init+0x242>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003acc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003ace:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ad0:	6a3a      	ldr	r2, [r7, #32]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d131      	bne.n	8003b44 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <HAL_ADC_Init+0x284>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	3b01      	subs	r3, #1
 8003af0:	045b      	lsls	r3, r3, #17
 8003af2:	6a3a      	ldr	r2, [r7, #32]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	e024      	b.n	8003b44 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d113      	bne.n	8003b2c <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	e01a      	b.n	8003b44 <HAL_ADC_Init+0x2b8>
 8003b0e:	bf00      	nop
 8003b10:	46021000 	.word	0x46021000
 8003b14:	20000000 	.word	0x20000000
 8003b18:	053e2d63 	.word	0x053e2d63
 8003b1c:	42028000 	.word	0x42028000
 8003b20:	42028100 	.word	0x42028100
 8003b24:	42028300 	.word	0x42028300
 8003b28:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a75      	ldr	r2, [pc, #468]	@ (8003d20 <HAL_ADC_Init+0x494>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d018      	beq.n	8003b80 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b5a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b62:	4313      	orrs	r3, r2
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4b6c      	ldr	r3, [pc, #432]	@ (8003d24 <HAL_ADC_Init+0x498>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	6a39      	ldr	r1, [r7, #32]
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	60d3      	str	r3, [r2, #12]
 8003b7e:	e031      	b.n	8003be4 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	4313      	orrs	r3, r2
 8003b96:	6a3a      	ldr	r2, [r7, #32]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	4b61      	ldr	r3, [pc, #388]	@ (8003d28 <HAL_ADC_Init+0x49c>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	6a39      	ldr	r1, [r7, #32]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a4d      	ldr	r2, [pc, #308]	@ (8003d20 <HAL_ADC_Init+0x494>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	f000 80a4 	beq.w	8003d38 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fe22 	bl	800383e <LL_ADC_REG_IsConversionOngoing>
 8003bfa:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fe2f 	bl	8003864 <LL_ADC_INJ_IsConversionOngoing>
 8003c06:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d166      	bne.n	8003cdc <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d163      	bne.n	8003cdc <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7f1b      	ldrb	r3, [r3, #28]
 8003c18:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4943      	ldr	r1, [pc, #268]	@ (8003d2c <HAL_ADC_Init+0x4a0>)
 8003c20:	428b      	cmp	r3, r1
 8003c22:	d004      	beq.n	8003c2e <HAL_ADC_Init+0x3a2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4941      	ldr	r1, [pc, #260]	@ (8003d30 <HAL_ADC_Init+0x4a4>)
 8003c2a:	428b      	cmp	r3, r1
 8003c2c:	d102      	bne.n	8003c34 <HAL_ADC_Init+0x3a8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c32:	e002      	b.n	8003c3a <HAL_ADC_Init+0x3ae>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c38:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c48:	f023 0303 	bic.w	r3, r3, #3
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	6a39      	ldr	r1, [r7, #32]
 8003c52:	430b      	orrs	r3, r1
 8003c54:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f7ff fb99 	bl	80033a0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d11e      	bne.n	8003cb6 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7c:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	4b2b      	ldr	r3, [pc, #172]	@ (8003d34 <HAL_ADC_Init+0x4a8>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003c8c:	0411      	lsls	r1, r2, #16
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003c98:	4311      	orrs	r1, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003c9e:	4311      	orrs	r1, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ca4:	0892      	lsrs	r2, r2, #2
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	611a      	str	r2, [r3, #16]
 8003cb4:	e007      	b.n	8003cc6 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d10c      	bne.n	8003cfe <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	f023 010f 	bic.w	r1, r3, #15
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	1e5a      	subs	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cfc:	e007      	b.n	8003d0e <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 020f 	bic.w	r2, r2, #15
 8003d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	f043 0201 	orr.w	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003d1e:	e092      	b.n	8003e46 <HAL_ADC_Init+0x5ba>
 8003d20:	46021000 	.word	0x46021000
 8003d24:	fff0c013 	.word	0xfff0c013
 8003d28:	ffde800d 	.word	0xffde800d
 8003d2c:	42028000 	.word	0x42028000
 8003d30:	42028100 	.word	0x42028100
 8003d34:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d111      	bne.n	8003d66 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003d4a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003d50:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003d56:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	4b39      	ldr	r3, [pc, #228]	@ (8003e54 <HAL_ADC_Init+0x5c8>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	69f9      	ldr	r1, [r7, #28]
 8003d76:	430b      	orrs	r3, r1
 8003d78:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d82:	461a      	mov	r2, r3
 8003d84:	2100      	movs	r1, #0
 8003d86:	f7ff fb2e 	bl	80033e6 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d92:	461a      	mov	r2, r3
 8003d94:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003d98:	f7ff fb25 	bl	80033e6 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d108      	bne.n	8003db6 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f062 020f 	orn	r2, r2, #15
 8003db2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003db4:	e018      	b.n	8003de8 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dbe:	d113      	bne.n	8003de8 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	f003 031c 	and.w	r3, r3, #28
 8003dd2:	f06f 020f 	mvn.w	r2, #15
 8003dd6:	fa02 f103 	lsl.w	r1, r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	4b1a      	ldr	r3, [pc, #104]	@ (8003e58 <HAL_ADC_Init+0x5cc>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	6a3a      	ldr	r2, [r7, #32]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d10b      	bne.n	8003e10 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	f043 0201 	orr.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003e0e:	e01a      	b.n	8003e46 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e14:	f023 0312 	bic.w	r3, r3, #18
 8003e18:	f043 0210 	orr.w	r2, r3, #16
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e24:	f043 0201 	orr.w	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003e32:	e008      	b.n	8003e46 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e38:	f043 0210 	orr.w	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003e46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	372c      	adds	r7, #44	@ 0x2c
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd90      	pop	{r4, r7, pc}
 8003e52:	bf00      	nop
 8003e54:	f7fffc02 	.word	0xf7fffc02
 8003e58:	833ffff3 	.word	0x833ffff3

08003e5c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b0a2      	sub	sp, #136	@ 0x88
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a98      	ldr	r2, [pc, #608]	@ (80040d0 <HAL_ADC_Start_DMA+0x274>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_ADC_Start_DMA+0x20>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a97      	ldr	r2, [pc, #604]	@ (80040d4 <HAL_ADC_Start_DMA+0x278>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d101      	bne.n	8003e80 <HAL_ADC_Start_DMA+0x24>
 8003e7c:	4b96      	ldr	r3, [pc, #600]	@ (80040d8 <HAL_ADC_Start_DMA+0x27c>)
 8003e7e:	e000      	b.n	8003e82 <HAL_ADC_Start_DMA+0x26>
 8003e80:	4b96      	ldr	r3, [pc, #600]	@ (80040dc <HAL_ADC_Start_DMA+0x280>)
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fc36 	bl	80036f4 <LL_ADC_GetMultimode>
 8003e88:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fcd5 	bl	800383e <LL_ADC_REG_IsConversionOngoing>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 8111 	bne.w	80040be <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_ADC_Start_DMA+0x4e>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e10e      	b.n	80040c8 <HAL_ADC_Start_DMA+0x26c>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d006      	beq.n	8003ec6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003eb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d003      	beq.n	8003ec6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ebe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ec0:	2b09      	cmp	r3, #9
 8003ec2:	f040 80f4 	bne.w	80040ae <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f001 fa2c 	bl	8005324 <ADC_Enable>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ed2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 80e4 	bne.w	80040a4 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ee0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a7a      	ldr	r2, [pc, #488]	@ (80040e0 <HAL_ADC_Start_DMA+0x284>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d026      	beq.n	8003f48 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a75      	ldr	r2, [pc, #468]	@ (80040d4 <HAL_ADC_Start_DMA+0x278>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d002      	beq.n	8003f0a <HAL_ADC_Start_DMA+0xae>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	e000      	b.n	8003f0c <HAL_ADC_Start_DMA+0xb0>
 8003f0a:	4b71      	ldr	r3, [pc, #452]	@ (80040d0 <HAL_ADC_Start_DMA+0x274>)
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d002      	beq.n	8003f1a <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d105      	bne.n	8003f26 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f1e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d006      	beq.n	8003f40 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f36:	f023 0206 	bic.w	r2, r3, #6
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003f3e:	e006      	b.n	8003f4e <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003f46:	e002      	b.n	8003f4e <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f52:	4a64      	ldr	r2, [pc, #400]	@ (80040e4 <HAL_ADC_Start_DMA+0x288>)
 8003f54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5a:	4a63      	ldr	r2, [pc, #396]	@ (80040e8 <HAL_ADC_Start_DMA+0x28c>)
 8003f5c:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f62:	4a62      	ldr	r2, [pc, #392]	@ (80040ec <HAL_ADC_Start_DMA+0x290>)
 8003f64:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	221c      	movs	r2, #28
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0210 	orr.w	r2, r2, #16
 8003f84:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a55      	ldr	r2, [pc, #340]	@ (80040e0 <HAL_ADC_Start_DMA+0x284>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d107      	bne.n	8003fa0 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04f      	beq.n	800404e <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d046      	beq.n	8004046 <HAL_ADC_Start_DMA+0x1ea>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d040      	beq.n	8004046 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	f107 0310 	add.w	r3, r7, #16
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f002 fdf8 	bl	8006bc8 <HAL_DMAEx_List_GetNodeConfig>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e072      	b.n	80040c8 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d104      	bne.n	8003ff2 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ff0:	e00a      	b.n	8004008 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d104      	bne.n	8004002 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004000:	e002      	b.n	8004008 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004014:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004038:	4618      	mov	r0, r3
 800403a:	f002 fd1b 	bl	8006a74 <HAL_DMAEx_List_Start_IT>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004044:	e028      	b.n	8004098 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800404c:	e024      	b.n	8004098 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d104      	bne.n	8004062 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004060:	e00c      	b.n	800407c <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d104      	bne.n	8004076 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004074:	e002      	b.n	800407c <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3340      	adds	r3, #64	@ 0x40
 8004086:	4619      	mov	r1, r3
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800408e:	f001 fd5f 	bl	8005b50 <HAL_DMA_Start_IT>
 8004092:	4603      	mov	r3, r0
 8004094:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fbba 	bl	8003816 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80040a2:	e00f      	b.n	80040c4 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 80040ac:	e00a      	b.n	80040c4 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80040bc:	e002      	b.n	80040c4 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040be:	2302      	movs	r3, #2
 80040c0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80040c4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3788      	adds	r7, #136	@ 0x88
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	42028000 	.word	0x42028000
 80040d4:	42028100 	.word	0x42028100
 80040d8:	42028300 	.word	0x42028300
 80040dc:	46021300 	.word	0x46021300
 80040e0:	46021000 	.word	0x46021000
 80040e4:	08005459 	.word	0x08005459
 80040e8:	08005531 	.word	0x08005531
 80040ec:	0800554d 	.word	0x0800554d

080040f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	@ 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a77      	ldr	r2, [pc, #476]	@ (80042f0 <HAL_ADC_IRQHandler+0x200>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <HAL_ADC_IRQHandler+0x30>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a76      	ldr	r2, [pc, #472]	@ (80042f4 <HAL_ADC_IRQHandler+0x204>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d101      	bne.n	8004124 <HAL_ADC_IRQHandler+0x34>
 8004120:	4b75      	ldr	r3, [pc, #468]	@ (80042f8 <HAL_ADC_IRQHandler+0x208>)
 8004122:	e000      	b.n	8004126 <HAL_ADC_IRQHandler+0x36>
 8004124:	4b75      	ldr	r3, [pc, #468]	@ (80042fc <HAL_ADC_IRQHandler+0x20c>)
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fae4 	bl	80036f4 <LL_ADC_GetMultimode>
 800412c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d017      	beq.n	8004168 <HAL_ADC_IRQHandler+0x78>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d012      	beq.n	8004168 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b00      	cmp	r3, #0
 800414c:	d105      	bne.n	800415a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004152:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f001 fa2e 	bl	80055bc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2202      	movs	r2, #2
 8004166:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d004      	beq.n	800417c <HAL_ADC_IRQHandler+0x8c>
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80d1 	beq.w	800432a <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 80cb 	beq.w	800432a <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a53      	ldr	r2, [pc, #332]	@ (8004300 <HAL_ADC_IRQHandler+0x210>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d06c      	beq.n	8004290 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff f932 	bl	8003424 <LL_ADC_REG_IsTriggerSourceSWStart>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80aa 	beq.w	800431c <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a49      	ldr	r2, [pc, #292]	@ (80042f4 <HAL_ADC_IRQHandler+0x204>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d002      	beq.n	80041d8 <HAL_ADC_IRQHandler+0xe8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	e000      	b.n	80041da <HAL_ADC_IRQHandler+0xea>
 80041d8:	4b45      	ldr	r3, [pc, #276]	@ (80042f0 <HAL_ADC_IRQHandler+0x200>)
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	4293      	cmp	r3, r2
 80041e0:	d008      	beq.n	80041f4 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b05      	cmp	r3, #5
 80041ec:	d002      	beq.n	80041f4 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b09      	cmp	r3, #9
 80041f2:	d104      	bne.n	80041fe <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	623b      	str	r3, [r7, #32]
 80041fc:	e00c      	b.n	8004218 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3c      	ldr	r2, [pc, #240]	@ (80042f4 <HAL_ADC_IRQHandler+0x204>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d002      	beq.n	800420e <HAL_ADC_IRQHandler+0x11e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	e000      	b.n	8004210 <HAL_ADC_IRQHandler+0x120>
 800420e:	4b38      	ldr	r3, [pc, #224]	@ (80042f0 <HAL_ADC_IRQHandler+0x200>)
 8004210:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d17c      	bne.n	800431c <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b08      	cmp	r3, #8
 800422e:	d175      	bne.n	800431c <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fb02 	bl	800383e <LL_ADC_REG_IsConversionOngoing>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11a      	bne.n	8004276 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 020c 	bic.w	r2, r2, #12
 800424e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d159      	bne.n	800431c <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800426c:	f043 0201 	orr.w	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	679a      	str	r2, [r3, #120]	@ 0x78
 8004274:	e052      	b.n	800431c <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800427a:	f043 0210 	orr.w	r2, r3, #16
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004286:	f043 0201 	orr.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800428e:	e045      	b.n	800431c <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff f8c5 	bl	8003424 <LL_ADC_REG_IsTriggerSourceSWStart>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d03d      	beq.n	800431c <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d138      	bne.n	800431c <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d131      	bne.n	800431c <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fabe 	bl	800383e <LL_ADC_REG_IsConversionOngoing>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11d      	bne.n	8004304 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 020c 	bic.w	r2, r2, #12
 80042d6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	f043 0201 	orr.w	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	679a      	str	r2, [r3, #120]	@ 0x78
 80042ec:	e016      	b.n	800431c <HAL_ADC_IRQHandler+0x22c>
 80042ee:	bf00      	nop
 80042f0:	42028000 	.word	0x42028000
 80042f4:	42028100 	.word	0x42028100
 80042f8:	42028300 	.word	0x42028300
 80042fc:	46021300 	.word	0x46021300
 8004300:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004314:	f043 0201 	orr.w	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f99d 	bl	800465c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	220c      	movs	r2, #12
 8004328:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a8c      	ldr	r2, [pc, #560]	@ (8004560 <HAL_ADC_IRQHandler+0x470>)
 8004330:	4293      	cmp	r3, r2
 8004332:	f000 8095 	beq.w	8004460 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <HAL_ADC_IRQHandler+0x25a>
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8085 	beq.w	8004460 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d07f      	beq.n	8004460 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004370:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff f91e 	bl	80035be <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004382:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff f84b 	bl	8003424 <LL_ADC_REG_IsTriggerSourceSWStart>
 800438e:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a73      	ldr	r2, [pc, #460]	@ (8004564 <HAL_ADC_IRQHandler+0x474>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d002      	beq.n	80043a0 <HAL_ADC_IRQHandler+0x2b0>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	e000      	b.n	80043a2 <HAL_ADC_IRQHandler+0x2b2>
 80043a0:	4b71      	ldr	r3, [pc, #452]	@ (8004568 <HAL_ADC_IRQHandler+0x478>)
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d008      	beq.n	80043bc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d002      	beq.n	80043bc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b07      	cmp	r3, #7
 80043ba:	d104      	bne.n	80043c6 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	623b      	str	r3, [r7, #32]
 80043c4:	e00c      	b.n	80043e0 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a66      	ldr	r2, [pc, #408]	@ (8004564 <HAL_ADC_IRQHandler+0x474>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d002      	beq.n	80043d6 <HAL_ADC_IRQHandler+0x2e6>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	e000      	b.n	80043d8 <HAL_ADC_IRQHandler+0x2e8>
 80043d6:	4b64      	ldr	r3, [pc, #400]	@ (8004568 <HAL_ADC_IRQHandler+0x478>)
 80043d8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d035      	beq.n	8004452 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d007      	beq.n	8004400 <HAL_ADC_IRQHandler+0x310>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d02d      	beq.n	8004452 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d128      	bne.n	8004452 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440a:	2b40      	cmp	r3, #64	@ 0x40
 800440c:	d121      	bne.n	8004452 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fa26 	bl	8003864 <LL_ADC_INJ_IsConversionOngoing>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d119      	bne.n	8004452 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800442c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004432:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800443e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f001 f894 	bl	8005580 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2260      	movs	r2, #96	@ 0x60
 800445e:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d011      	beq.n	800448e <HAL_ADC_IRQHandler+0x39e>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004478:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8ff 	bl	8004684 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2280      	movs	r2, #128	@ 0x80
 800448c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d012      	beq.n	80044be <HAL_ADC_IRQHandler+0x3ce>
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00d      	beq.n	80044be <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f001 f870 	bl	8005594 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d012      	beq.n	80044ee <HAL_ADC_IRQHandler+0x3fe>
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 f862 	bl	80055a8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05d      	beq.n	80045b4 <HAL_ADC_IRQHandler+0x4c4>
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d058      	beq.n	80045b4 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 800450a:	2301      	movs	r3, #1
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
 800450e:	e03b      	b.n	8004588 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a12      	ldr	r2, [pc, #72]	@ (8004560 <HAL_ADC_IRQHandler+0x470>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d02c      	beq.n	8004574 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d015      	beq.n	800454c <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a10      	ldr	r2, [pc, #64]	@ (8004568 <HAL_ADC_IRQHandler+0x478>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_ADC_IRQHandler+0x444>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a0d      	ldr	r2, [pc, #52]	@ (8004564 <HAL_ADC_IRQHandler+0x474>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d101      	bne.n	8004538 <HAL_ADC_IRQHandler+0x448>
 8004534:	4b0d      	ldr	r3, [pc, #52]	@ (800456c <HAL_ADC_IRQHandler+0x47c>)
 8004536:	e000      	b.n	800453a <HAL_ADC_IRQHandler+0x44a>
 8004538:	4b0d      	ldr	r3, [pc, #52]	@ (8004570 <HAL_ADC_IRQHandler+0x480>)
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff f8e8 	bl	8003710 <LL_ADC_GetMultiDMATransfer>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d020      	beq.n	8004588 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004546:	2301      	movs	r3, #1
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
 800454a:	e01d      	b.n	8004588 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800455a:	2301      	movs	r3, #1
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
 800455e:	e013      	b.n	8004588 <HAL_ADC_IRQHandler+0x498>
 8004560:	46021000 	.word	0x46021000
 8004564:	42028100 	.word	0x42028100
 8004568:	42028000 	.word	0x42028000
 800456c:	42028300 	.word	0x42028300
 8004570:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff f812 	bl	80035a2 <LL_ADC_REG_GetDMATransfer>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004584:	2301      	movs	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	2b01      	cmp	r3, #1
 800458c:	d10e      	bne.n	80045ac <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004592:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800459e:	f043 0202 	orr.w	r2, r3, #2
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f876 	bl	8004698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2210      	movs	r2, #16
 80045b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01b      	beq.n	80045f6 <HAL_ADC_IRQHandler+0x506>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d016      	beq.n	80045f6 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f877 	bl	80046d4 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a17      	ldr	r2, [pc, #92]	@ (8004658 <HAL_ADC_IRQHandler+0x568>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d126      	bne.n	800464e <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_ADC_IRQHandler+0x534>
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f849 	bl	80046ac <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004622:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00f      	beq.n	800464e <HAL_ADC_IRQHandler+0x55e>
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f841 	bl	80046c0 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800464c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800464e:	bf00      	nop
 8004650:	3728      	adds	r7, #40	@ 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	46021000 	.word	0x46021000

0800465c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b0b7      	sub	sp, #220	@ 0xdc
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4aa8      	ldr	r2, [pc, #672]	@ (80049a4 <HAL_ADC_ConfigChannel+0x2bc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d103      	bne.n	800470e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004714:	2b01      	cmp	r3, #1
 8004716:	d102      	bne.n	800471e <HAL_ADC_ConfigChannel+0x36>
 8004718:	2302      	movs	r3, #2
 800471a:	f000 bdfe 	b.w	800531a <HAL_ADC_ConfigChannel+0xc32>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff f887 	bl	800383e <LL_ADC_REG_IsConversionOngoing>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 85c1 	bne.w	80052ba <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a99      	ldr	r2, [pc, #612]	@ (80049a4 <HAL_ADC_ConfigChannel+0x2bc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	f000 8409 	beq.w	8004f56 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d108      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x7a>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	0e9b      	lsrs	r3, r3, #26
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	2201      	movs	r2, #1
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	e01d      	b.n	800479e <HAL_ADC_ConfigChannel+0xb6>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800476e:	fa93 f3a3 	rbit	r3, r3
 8004772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004776:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800477a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800477e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8004786:	2320      	movs	r3, #32
 8004788:	e004      	b.n	8004794 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800478a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	69d1      	ldr	r1, [r2, #28]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	f7fe fe47 	bl	800344c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff f83b 	bl	800383e <LL_ADC_REG_IsConversionOngoing>
 80047c8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff f847 	bl	8003864 <LL_ADC_INJ_IsConversionOngoing>
 80047d6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 81df 	bne.w	8004ba2 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f040 81da 	bne.w	8004ba2 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f7fe fef2 	bl	80035e4 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	089b      	lsrs	r3, r3, #2
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b04      	cmp	r3, #4
 8004820:	d046      	beq.n	80048b0 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6919      	ldr	r1, [r3, #16]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004832:	f7fe fd2d 	bl	8003290 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6919      	ldr	r1, [r3, #16]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	461a      	mov	r2, r3
 8004844:	f7fe fd5b 	bl	80032fe <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	7e9b      	ldrb	r3, [r3, #26]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d11e      	bne.n	800488e <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x17e>
 8004860:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004864:	e000      	b.n	8004868 <HAL_ADC_ConfigChannel+0x180>
 8004866:	2300      	movs	r3, #0
 8004868:	461a      	mov	r2, r3
 800486a:	f7fe fd7e 	bl	800336a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800487a:	2b01      	cmp	r3, #1
 800487c:	d102      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x19c>
 800487e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004882:	e000      	b.n	8004886 <HAL_ADC_ConfigChannel+0x19e>
 8004884:	2300      	movs	r3, #0
 8004886:	461a      	mov	r2, r3
 8004888:	f7fe fd54 	bl	8003334 <LL_ADC_SetOffsetSignedSaturation>
 800488c:	e189      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2200      	movs	r2, #0
 8004898:	4619      	mov	r1, r3
 800489a:	f7fe fd66 	bl	800336a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2200      	movs	r2, #0
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7fe fd43 	bl	8003334 <LL_ADC_SetOffsetSignedSaturation>
 80048ae:	e178      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fd0b 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 80048bc:	4603      	mov	r3, r0
 80048be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x1f4>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe fd00 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 80048d2:	4603      	mov	r3, r0
 80048d4:	0e9b      	lsrs	r3, r3, #26
 80048d6:	f003 021f 	and.w	r2, r3, #31
 80048da:	e01e      	b.n	800491a <HAL_ADC_ConfigChannel+0x232>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fe fcf5 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80048fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004902:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800490a:	2320      	movs	r3, #32
 800490c:	e004      	b.n	8004918 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800490e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d105      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x24a>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	0e9b      	lsrs	r3, r3, #26
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	e018      	b.n	8004964 <HAL_ADC_ConfigChannel+0x27c>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800493e:	fa93 f3a3 	rbit	r3, r3
 8004942:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004946:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800494a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800494e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004956:	2320      	movs	r3, #32
 8004958:	e004      	b.n	8004964 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800495a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004964:	429a      	cmp	r2, r3
 8004966:	d107      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	2300      	movs	r3, #0
 8004972:	2100      	movs	r1, #0
 8004974:	f7fe fc8c 	bl	8003290 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2101      	movs	r1, #1
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fca7 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 8004984:	4603      	mov	r3, r0
 8004986:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10c      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x2c0>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2101      	movs	r1, #1
 8004994:	4618      	mov	r0, r3
 8004996:	f7fe fc9c 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 800499a:	4603      	mov	r3, r0
 800499c:	0e9b      	lsrs	r3, r3, #26
 800499e:	f003 021f 	and.w	r2, r3, #31
 80049a2:	e020      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x2fe>
 80049a4:	46021000 	.word	0x46021000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2101      	movs	r1, #1
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe fc8f 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049be:	fa93 f3a3 	rbit	r3, r3
 80049c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80049c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80049ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80049d6:	2320      	movs	r3, #32
 80049d8:	e004      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80049da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d105      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x316>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	0e9b      	lsrs	r3, r3, #26
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	e018      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x348>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004a22:	2320      	movs	r3, #32
 8004a24:	e004      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a2a:	fab3 f383 	clz	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d107      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2101      	movs	r1, #1
 8004a40:	f7fe fc26 	bl	8003290 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2102      	movs	r1, #2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fc41 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x388>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2102      	movs	r1, #2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe fc36 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 8004a66:	4603      	mov	r3, r0
 8004a68:	0e9b      	lsrs	r3, r3, #26
 8004a6a:	f003 021f 	and.w	r2, r3, #31
 8004a6e:	e01a      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x3be>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2102      	movs	r1, #2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fc2b 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004a88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004a96:	2320      	movs	r3, #32
 8004a98:	e004      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a9e:	fab3 f383 	clz	r3, r3
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d105      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x3d6>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	0e9b      	lsrs	r3, r3, #26
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	e011      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x3fa>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ace:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004ad0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	e003      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004ada:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d107      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	2300      	movs	r3, #0
 8004af0:	2102      	movs	r1, #2
 8004af2:	f7fe fbcd 	bl	8003290 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2103      	movs	r1, #3
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fbe8 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x43a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2103      	movs	r1, #3
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe fbdd 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	0e9b      	lsrs	r3, r3, #26
 8004b1c:	f003 021f 	and.w	r2, r3, #31
 8004b20:	e017      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x46a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2103      	movs	r1, #3
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe fbd2 	bl	80032d2 <LL_ADC_GetOffsetChannel>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004b3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004b44:	2320      	movs	r3, #32
 8004b46:	e003      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004b48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d105      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x482>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	0e9b      	lsrs	r3, r3, #26
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	e011      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x4a6>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b72:	fa93 f3a3 	rbit	r3, r3
 8004b76:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004b7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8004b82:	2320      	movs	r3, #32
 8004b84:	e003      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8004b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b88:	fab3 f383 	clz	r3, r3
 8004b8c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d107      	bne.n	8004ba2 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2103      	movs	r1, #3
 8004b9e:	f7fe fb77 	bl	8003290 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe fe22 	bl	80037f0 <LL_ADC_IsEnabled>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f040 83ad 	bne.w	800530e <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	6819      	ldr	r1, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f7fe fd73 	bl	80036ac <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bce:	f040 80d6 	bne.w	8004d7e <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10b      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x50e>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	0e9b      	lsrs	r3, r3, #26
 8004be4:	3301      	adds	r3, #1
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	2b09      	cmp	r3, #9
 8004bec:	bf94      	ite	ls
 8004bee:	2301      	movls	r3, #1
 8004bf0:	2300      	movhi	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	e019      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x542>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c06:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004c0e:	2320      	movs	r3, #32
 8004c10:	e003      	b.n	8004c1a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c14:	fab3 f383 	clz	r3, r3
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2b09      	cmp	r3, #9
 8004c22:	bf94      	ite	ls
 8004c24:	2301      	movls	r3, #1
 8004c26:	2300      	movhi	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d04d      	beq.n	8004cca <HAL_ADC_ConfigChannel+0x5e2>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d107      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x562>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	0e9b      	lsrs	r3, r3, #26
 8004c40:	3301      	adds	r3, #1
 8004c42:	069b      	lsls	r3, r3, #26
 8004c44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c48:	e015      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x58e>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c52:	fa93 f3a3 	rbit	r3, r3
 8004c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c5a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004c62:	2320      	movs	r3, #32
 8004c64:	e003      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c68:	fab3 f383 	clz	r3, r3
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	3301      	adds	r3, #1
 8004c70:	069b      	lsls	r3, r3, #26
 8004c72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x5ae>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	0e9b      	lsrs	r3, r3, #26
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2101      	movs	r1, #1
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	e017      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0x5de>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9e:	fa93 f3a3 	rbit	r3, r3
 8004ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8004cae:	2320      	movs	r3, #32
 8004cb0:	e003      	b.n	8004cba <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb4:	fab3 f383 	clz	r3, r3
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	e04e      	b.n	8004d68 <HAL_ADC_ConfigChannel+0x680>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x5fe>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	0e9b      	lsrs	r3, r3, #26
 8004cdc:	3301      	adds	r3, #1
 8004cde:	069b      	lsls	r3, r3, #26
 8004ce0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ce4:	e015      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x62a>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cee:	fa93 f3a3 	rbit	r3, r3
 8004cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004cfe:	2320      	movs	r3, #32
 8004d00:	e003      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d04:	fab3 f383 	clz	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	069b      	lsls	r3, r3, #26
 8004d0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x64a>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	0e9b      	lsrs	r3, r3, #26
 8004d24:	3301      	adds	r3, #1
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d30:	e017      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x67a>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	fa93 f3a3 	rbit	r3, r3
 8004d3e:	61bb      	str	r3, [r7, #24]
  return result;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	e003      	b.n	8004d56 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	3301      	adds	r3, #1
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	461a      	mov	r2, r3
 8004d76:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004d7a:	f7fe fc33 	bl	80035e4 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f280 82c3 	bge.w	800530e <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a92      	ldr	r2, [pc, #584]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d004      	beq.n	8004d9c <HAL_ADC_ConfigChannel+0x6b4>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a91      	ldr	r2, [pc, #580]	@ (8004fdc <HAL_ADC_ConfigChannel+0x8f4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d101      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x6b8>
 8004d9c:	4b90      	ldr	r3, [pc, #576]	@ (8004fe0 <HAL_ADC_ConfigChannel+0x8f8>)
 8004d9e:	e000      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x6ba>
 8004da0:	4b90      	ldr	r3, [pc, #576]	@ (8004fe4 <HAL_ADC_ConfigChannel+0x8fc>)
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe fa46 	bl	8003234 <LL_ADC_GetCommonPathInternalCh>
 8004da8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a89      	ldr	r2, [pc, #548]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <HAL_ADC_ConfigChannel+0x6d8>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a88      	ldr	r2, [pc, #544]	@ (8004fdc <HAL_ADC_ConfigChannel+0x8f4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10e      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x6f6>
 8004dc0:	4885      	ldr	r0, [pc, #532]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004dc2:	f7fe fd15 	bl	80037f0 <LL_ADC_IsEnabled>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	4884      	ldr	r0, [pc, #528]	@ (8004fdc <HAL_ADC_ConfigChannel+0x8f4>)
 8004dca:	f7fe fd11 	bl	80037f0 <LL_ADC_IsEnabled>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4323      	orrs	r3, r4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	e008      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x708>
 8004dde:	4882      	ldr	r0, [pc, #520]	@ (8004fe8 <HAL_ADC_ConfigChannel+0x900>)
 8004de0:	f7fe fd06 	bl	80037f0 <LL_ADC_IsEnabled>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 80a6 	beq.w	8004f42 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a7c      	ldr	r2, [pc, #496]	@ (8004fec <HAL_ADC_ConfigChannel+0x904>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d13c      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d136      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a71      	ldr	r2, [pc, #452]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00a      	beq.n	8004e2c <HAL_ADC_ConfigChannel+0x744>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a70      	ldr	r2, [pc, #448]	@ (8004fdc <HAL_ADC_ConfigChannel+0x8f4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d005      	beq.n	8004e2c <HAL_ADC_ConfigChannel+0x744>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a70      	ldr	r2, [pc, #448]	@ (8004fe8 <HAL_ADC_ConfigChannel+0x900>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	f040 826e 	bne.w	8005308 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a69      	ldr	r2, [pc, #420]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_ADC_ConfigChannel+0x758>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a68      	ldr	r2, [pc, #416]	@ (8004fdc <HAL_ADC_ConfigChannel+0x8f4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d101      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x75c>
 8004e40:	4a67      	ldr	r2, [pc, #412]	@ (8004fe0 <HAL_ADC_ConfigChannel+0x8f8>)
 8004e42:	e000      	b.n	8004e46 <HAL_ADC_ConfigChannel+0x75e>
 8004e44:	4a67      	ldr	r2, [pc, #412]	@ (8004fe4 <HAL_ADC_ConfigChannel+0x8fc>)
 8004e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7fe f9dc 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e56:	4b66      	ldr	r3, [pc, #408]	@ (8004ff0 <HAL_ADC_ConfigChannel+0x908>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	099b      	lsrs	r3, r3, #6
 8004e5c:	4a65      	ldr	r2, [pc, #404]	@ (8004ff4 <HAL_ADC_ConfigChannel+0x90c>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	099b      	lsrs	r3, r3, #6
 8004e64:	3301      	adds	r3, #1
 8004e66:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004e68:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004e6a:	e002      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f9      	bne.n	8004e6c <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e78:	e246      	b.n	8005308 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ff8 <HAL_ADC_ConfigChannel+0x910>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d12b      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d125      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a50      	ldr	r2, [pc, #320]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00a      	beq.n	8004eb0 <HAL_ADC_ConfigChannel+0x7c8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4f      	ldr	r2, [pc, #316]	@ (8004fdc <HAL_ADC_ConfigChannel+0x8f4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d005      	beq.n	8004eb0 <HAL_ADC_ConfigChannel+0x7c8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8004fe8 <HAL_ADC_ConfigChannel+0x900>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	f040 822e 	bne.w	800530c <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a48      	ldr	r2, [pc, #288]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_ADC_ConfigChannel+0x7dc>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a47      	ldr	r2, [pc, #284]	@ (8004fdc <HAL_ADC_ConfigChannel+0x8f4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d101      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x7e0>
 8004ec4:	4a46      	ldr	r2, [pc, #280]	@ (8004fe0 <HAL_ADC_ConfigChannel+0x8f8>)
 8004ec6:	e000      	b.n	8004eca <HAL_ADC_ConfigChannel+0x7e2>
 8004ec8:	4a46      	ldr	r2, [pc, #280]	@ (8004fe4 <HAL_ADC_ConfigChannel+0x8fc>)
 8004eca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	f7fe f99a 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eda:	e217      	b.n	800530c <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a46      	ldr	r2, [pc, #280]	@ (8004ffc <HAL_ADC_ConfigChannel+0x914>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	f040 8213 	bne.w	800530e <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 820c 	bne.w	800530e <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a37      	ldr	r2, [pc, #220]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00a      	beq.n	8004f16 <HAL_ADC_ConfigChannel+0x82e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a35      	ldr	r2, [pc, #212]	@ (8004fdc <HAL_ADC_ConfigChannel+0x8f4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d005      	beq.n	8004f16 <HAL_ADC_ConfigChannel+0x82e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a36      	ldr	r2, [pc, #216]	@ (8004fe8 <HAL_ADC_ConfigChannel+0x900>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	f040 81fc 	bne.w	800530e <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x8f0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_ADC_ConfigChannel+0x842>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a2d      	ldr	r2, [pc, #180]	@ (8004fdc <HAL_ADC_ConfigChannel+0x8f4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d101      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x846>
 8004f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe0 <HAL_ADC_ConfigChannel+0x8f8>)
 8004f2c:	e000      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x848>
 8004f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe4 <HAL_ADC_ConfigChannel+0x8fc>)
 8004f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fe f967 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
 8004f40:	e1e5      	b.n	800530e <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f46:	f043 0220 	orr.w	r2, r3, #32
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004f54:	e1db      	b.n	800530e <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	f000 811b 	beq.w	800519e <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f70:	d004      	beq.n	8004f7c <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004f76:	4a22      	ldr	r2, [pc, #136]	@ (8005000 <HAL_ADC_ConfigChannel+0x918>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d107      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe fac1 	bl	800350c <LL_ADC_REG_SetSequencerChAdd>
 8004f8a:	e059      	b.n	8005040 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	210f      	movs	r1, #15
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004fa8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x8d4>
 8004fb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004fb4:	0e9b      	lsrs	r3, r3, #26
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	e027      	b.n	800500c <HAL_ADC_ConfigChannel+0x924>
 8004fbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004fc0:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	60fb      	str	r3, [r7, #12]
  return result;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d117      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	e019      	b.n	800500c <HAL_ADC_ConfigChannel+0x924>
 8004fd8:	42028000 	.word	0x42028000
 8004fdc:	42028100 	.word	0x42028100
 8004fe0:	42028300 	.word	0x42028300
 8004fe4:	46021300 	.word	0x46021300
 8004fe8:	46021000 	.word	0x46021000
 8004fec:	ce080000 	.word	0xce080000
 8004ff0:	20000000 	.word	0x20000000
 8004ff4:	053e2d63 	.word	0x053e2d63
 8004ff8:	ca040000 	.word	0xca040000
 8004ffc:	80000001 	.word	0x80000001
 8005000:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	fab3 f383 	clz	r3, r3
 800500a:	b2db      	uxtb	r3, r3
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	6849      	ldr	r1, [r1, #4]
 8005010:	f001 011f 	and.w	r1, r1, #31
 8005014:	408b      	lsls	r3, r1
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502a:	429a      	cmp	r2, r3
 800502c:	d808      	bhi.n	8005040 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800503a:	4619      	mov	r1, r3
 800503c:	f7fe fa06 	bl	800344c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	461a      	mov	r2, r3
 800504a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800504e:	f7fe fac9 	bl	80035e4 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f280 8159 	bge.w	800530e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a9b      	ldr	r2, [pc, #620]	@ (80052d0 <HAL_ADC_ConfigChannel+0xbe8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_ADC_ConfigChannel+0x988>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a9a      	ldr	r2, [pc, #616]	@ (80052d4 <HAL_ADC_ConfigChannel+0xbec>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d101      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x98c>
 8005070:	4b99      	ldr	r3, [pc, #612]	@ (80052d8 <HAL_ADC_ConfigChannel+0xbf0>)
 8005072:	e000      	b.n	8005076 <HAL_ADC_ConfigChannel+0x98e>
 8005074:	4b99      	ldr	r3, [pc, #612]	@ (80052dc <HAL_ADC_ConfigChannel+0xbf4>)
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe f8dc 	bl	8003234 <LL_ADC_GetCommonPathInternalCh>
 800507c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a96      	ldr	r2, [pc, #600]	@ (80052e0 <HAL_ADC_ConfigChannel+0xbf8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d12b      	bne.n	80050e2 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800508a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800508e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d125      	bne.n	80050e2 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a8d      	ldr	r2, [pc, #564]	@ (80052d0 <HAL_ADC_ConfigChannel+0xbe8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_ADC_ConfigChannel+0x9c2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a8b      	ldr	r2, [pc, #556]	@ (80052d4 <HAL_ADC_ConfigChannel+0xbec>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d101      	bne.n	80050ae <HAL_ADC_ConfigChannel+0x9c6>
 80050aa:	4a8b      	ldr	r2, [pc, #556]	@ (80052d8 <HAL_ADC_ConfigChannel+0xbf0>)
 80050ac:	e000      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x9c8>
 80050ae:	4a8b      	ldr	r2, [pc, #556]	@ (80052dc <HAL_ADC_ConfigChannel+0xbf4>)
 80050b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fe f8a7 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80050c0:	4b88      	ldr	r3, [pc, #544]	@ (80052e4 <HAL_ADC_ConfigChannel+0xbfc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	099b      	lsrs	r3, r3, #6
 80050c6:	4a88      	ldr	r2, [pc, #544]	@ (80052e8 <HAL_ADC_ConfigChannel+0xc00>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	099b      	lsrs	r3, r3, #6
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80050d2:	e002      	b.n	80050da <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f9      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80050e0:	e045      	b.n	800516e <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a81      	ldr	r2, [pc, #516]	@ (80052ec <HAL_ADC_ConfigChannel+0xc04>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d11b      	bne.n	8005124 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80050ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d115      	bne.n	8005124 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a74      	ldr	r2, [pc, #464]	@ (80052d0 <HAL_ADC_ConfigChannel+0xbe8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <HAL_ADC_ConfigChannel+0xa24>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a73      	ldr	r2, [pc, #460]	@ (80052d4 <HAL_ADC_ConfigChannel+0xbec>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d101      	bne.n	8005110 <HAL_ADC_ConfigChannel+0xa28>
 800510c:	4a72      	ldr	r2, [pc, #456]	@ (80052d8 <HAL_ADC_ConfigChannel+0xbf0>)
 800510e:	e000      	b.n	8005112 <HAL_ADC_ConfigChannel+0xa2a>
 8005110:	4a72      	ldr	r2, [pc, #456]	@ (80052dc <HAL_ADC_ConfigChannel+0xbf4>)
 8005112:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7fe f876 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
 8005122:	e024      	b.n	800516e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a71      	ldr	r2, [pc, #452]	@ (80052f0 <HAL_ADC_ConfigChannel+0xc08>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d11f      	bne.n	800516e <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800512e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d115      	bne.n	8005166 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a64      	ldr	r2, [pc, #400]	@ (80052d0 <HAL_ADC_ConfigChannel+0xbe8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_ADC_ConfigChannel+0xa66>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a62      	ldr	r2, [pc, #392]	@ (80052d4 <HAL_ADC_ConfigChannel+0xbec>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <HAL_ADC_ConfigChannel+0xa6a>
 800514e:	4a62      	ldr	r2, [pc, #392]	@ (80052d8 <HAL_ADC_ConfigChannel+0xbf0>)
 8005150:	e000      	b.n	8005154 <HAL_ADC_ConfigChannel+0xa6c>
 8005152:	4a62      	ldr	r2, [pc, #392]	@ (80052dc <HAL_ADC_ConfigChannel+0xbf4>)
 8005154:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005158:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f7fe f855 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
 8005164:	e003      	b.n	800516e <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a62      	ldr	r2, [pc, #392]	@ (80052f4 <HAL_ADC_ConfigChannel+0xc0c>)
 800516c:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a61      	ldr	r2, [pc, #388]	@ (80052f8 <HAL_ADC_ConfigChannel+0xc10>)
 8005174:	4293      	cmp	r3, r2
 8005176:	f040 80ca 	bne.w	800530e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800517a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800517e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 80c3 	bne.w	800530e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800519c:	e0b7      	b.n	800530e <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051a6:	d004      	beq.n	80051b2 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80051ac:	4a53      	ldr	r2, [pc, #332]	@ (80052fc <HAL_ADC_ConfigChannel+0xc14>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d106      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe f9d9 	bl	8003572 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f280 80a2 	bge.w	800530e <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a40      	ldr	r2, [pc, #256]	@ (80052d0 <HAL_ADC_ConfigChannel+0xbe8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_ADC_ConfigChannel+0xaf6>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a3e      	ldr	r2, [pc, #248]	@ (80052d4 <HAL_ADC_ConfigChannel+0xbec>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <HAL_ADC_ConfigChannel+0xafa>
 80051de:	4b3e      	ldr	r3, [pc, #248]	@ (80052d8 <HAL_ADC_ConfigChannel+0xbf0>)
 80051e0:	e000      	b.n	80051e4 <HAL_ADC_ConfigChannel+0xafc>
 80051e2:	4b3e      	ldr	r3, [pc, #248]	@ (80052dc <HAL_ADC_ConfigChannel+0xbf4>)
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fe f825 	bl	8003234 <LL_ADC_GetCommonPathInternalCh>
 80051ea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a43      	ldr	r2, [pc, #268]	@ (8005300 <HAL_ADC_ConfigChannel+0xc18>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d115      	bne.n	8005224 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a34      	ldr	r2, [pc, #208]	@ (80052d0 <HAL_ADC_ConfigChannel+0xbe8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_ADC_ConfigChannel+0xb24>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a33      	ldr	r2, [pc, #204]	@ (80052d4 <HAL_ADC_ConfigChannel+0xbec>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <HAL_ADC_ConfigChannel+0xb28>
 800520c:	4a32      	ldr	r2, [pc, #200]	@ (80052d8 <HAL_ADC_ConfigChannel+0xbf0>)
 800520e:	e000      	b.n	8005212 <HAL_ADC_ConfigChannel+0xb2a>
 8005210:	4a32      	ldr	r2, [pc, #200]	@ (80052dc <HAL_ADC_ConfigChannel+0xbf4>)
 8005212:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005216:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f7fd fff6 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
 8005222:	e034      	b.n	800528e <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a36      	ldr	r2, [pc, #216]	@ (8005304 <HAL_ADC_ConfigChannel+0xc1c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d115      	bne.n	800525a <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a27      	ldr	r2, [pc, #156]	@ (80052d0 <HAL_ADC_ConfigChannel+0xbe8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_ADC_ConfigChannel+0xb5a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a25      	ldr	r2, [pc, #148]	@ (80052d4 <HAL_ADC_ConfigChannel+0xbec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d101      	bne.n	8005246 <HAL_ADC_ConfigChannel+0xb5e>
 8005242:	4a25      	ldr	r2, [pc, #148]	@ (80052d8 <HAL_ADC_ConfigChannel+0xbf0>)
 8005244:	e000      	b.n	8005248 <HAL_ADC_ConfigChannel+0xb60>
 8005246:	4a25      	ldr	r2, [pc, #148]	@ (80052dc <HAL_ADC_ConfigChannel+0xbf4>)
 8005248:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800524c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005250:	4619      	mov	r1, r3
 8005252:	4610      	mov	r0, r2
 8005254:	f7fd ffdb 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
 8005258:	e019      	b.n	800528e <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a24      	ldr	r2, [pc, #144]	@ (80052f0 <HAL_ADC_ConfigChannel+0xc08>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d114      	bne.n	800528e <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a19      	ldr	r2, [pc, #100]	@ (80052d0 <HAL_ADC_ConfigChannel+0xbe8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_ADC_ConfigChannel+0xb90>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a18      	ldr	r2, [pc, #96]	@ (80052d4 <HAL_ADC_ConfigChannel+0xbec>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <HAL_ADC_ConfigChannel+0xb94>
 8005278:	4a17      	ldr	r2, [pc, #92]	@ (80052d8 <HAL_ADC_ConfigChannel+0xbf0>)
 800527a:	e000      	b.n	800527e <HAL_ADC_ConfigChannel+0xb96>
 800527c:	4a17      	ldr	r2, [pc, #92]	@ (80052dc <HAL_ADC_ConfigChannel+0xbf4>)
 800527e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005282:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f7fd ffc0 	bl	800320e <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a19      	ldr	r2, [pc, #100]	@ (80052f8 <HAL_ADC_ConfigChannel+0xc10>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d13a      	bne.n	800530e <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800529c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d134      	bne.n	800530e <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80052b8:	e029      	b.n	800530e <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80052cc:	e01f      	b.n	800530e <HAL_ADC_ConfigChannel+0xc26>
 80052ce:	bf00      	nop
 80052d0:	42028000 	.word	0x42028000
 80052d4:	42028100 	.word	0x42028100
 80052d8:	42028300 	.word	0x42028300
 80052dc:	46021300 	.word	0x46021300
 80052e0:	b6002000 	.word	0xb6002000
 80052e4:	20000000 	.word	0x20000000
 80052e8:	053e2d63 	.word	0x053e2d63
 80052ec:	ba004000 	.word	0xba004000
 80052f0:	80000001 	.word	0x80000001
 80052f4:	b2001000 	.word	0xb2001000
 80052f8:	d7200000 	.word	0xd7200000
 80052fc:	80000010 	.word	0x80000010
 8005300:	ce080000 	.word	0xce080000
 8005304:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005308:	bf00      	nop
 800530a:	e000      	b.n	800530e <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800530c:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8005316:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800531a:	4618      	mov	r0, r3
 800531c:	37dc      	adds	r7, #220	@ 0xdc
 800531e:	46bd      	mov	sp, r7
 8005320:	bd90      	pop	{r4, r7, pc}
 8005322:	bf00      	nop

08005324 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe fa5d 	bl	80037f0 <LL_ADC_IsEnabled>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d17b      	bne.n	8005434 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	4b3f      	ldr	r3, [pc, #252]	@ (8005440 <ADC_Enable+0x11c>)
 8005344:	4013      	ands	r3, r2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00d      	beq.n	8005366 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800534e:	f043 0210 	orr.w	r2, r3, #16
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800535a:	f043 0201 	orr.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e067      	b.n	8005436 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fa28 	bl	80037c8 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <ADC_Enable+0x66>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2f      	ldr	r2, [pc, #188]	@ (8005444 <ADC_Enable+0x120>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d054      	beq.n	8005434 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800538a:	f7fd fed5 	bl	8003138 <HAL_GetTick>
 800538e:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a2c      	ldr	r2, [pc, #176]	@ (8005448 <ADC_Enable+0x124>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <ADC_Enable+0x80>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a2b      	ldr	r2, [pc, #172]	@ (800544c <ADC_Enable+0x128>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d101      	bne.n	80053a8 <ADC_Enable+0x84>
 80053a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005450 <ADC_Enable+0x12c>)
 80053a6:	e000      	b.n	80053aa <ADC_Enable+0x86>
 80053a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005454 <ADC_Enable+0x130>)
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe f9a2 	bl	80036f4 <LL_ADC_GetMultimode>
 80053b0:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a25      	ldr	r2, [pc, #148]	@ (800544c <ADC_Enable+0x128>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d002      	beq.n	80053c2 <ADC_Enable+0x9e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	e000      	b.n	80053c4 <ADC_Enable+0xa0>
 80053c2:	4b21      	ldr	r3, [pc, #132]	@ (8005448 <ADC_Enable+0x124>)
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d02c      	beq.n	8005426 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d130      	bne.n	8005434 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053d2:	e028      	b.n	8005426 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe fa09 	bl	80037f0 <LL_ADC_IsEnabled>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe f9ed 	bl	80037c8 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053ee:	f7fd fea3 	bl	8003138 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d914      	bls.n	8005426 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b01      	cmp	r3, #1
 8005408:	d00d      	beq.n	8005426 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800540e:	f043 0210 	orr.w	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800541a:	f043 0201 	orr.w	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e007      	b.n	8005436 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d1cf      	bne.n	80053d4 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	8000003f 	.word	0x8000003f
 8005444:	46021000 	.word	0x46021000
 8005448:	42028000 	.word	0x42028000
 800544c:	42028100 	.word	0x42028100
 8005450:	42028300 	.word	0x42028300
 8005454:	46021300 	.word	0x46021300

08005458 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005464:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800546a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800546e:	2b00      	cmp	r3, #0
 8005470:	d14b      	bne.n	800550a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005476:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d021      	beq.n	80054d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7fd ffc7 	bl	8003424 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d032      	beq.n	8005502 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d12b      	bne.n	8005502 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d11f      	bne.n	8005502 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054c6:	f043 0201 	orr.w	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	679a      	str	r2, [r3, #120]	@ 0x78
 80054ce:	e018      	b.n	8005502 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d111      	bne.n	8005502 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d105      	bne.n	8005502 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054fa:	f043 0201 	orr.w	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff f8aa 	bl	800465c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005508:	e00e      	b.n	8005528 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff f8be 	bl	8004698 <HAL_ADC_ErrorCallback>
}
 800551c:	e004      	b.n	8005528 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	4798      	blx	r3
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff f896 	bl	8004670 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005558:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800555e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800556a:	f043 0204 	orr.w	r2, r3, #4
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff f890 	bl	8004698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005614 <__NVIC_SetPriorityGrouping+0x44>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055ec:	4013      	ands	r3, r2
 80055ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005602:	4a04      	ldr	r2, [pc, #16]	@ (8005614 <__NVIC_SetPriorityGrouping+0x44>)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	60d3      	str	r3, [r2, #12]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	e000ed00 	.word	0xe000ed00

08005618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800561c:	4b04      	ldr	r3, [pc, #16]	@ (8005630 <__NVIC_GetPriorityGrouping+0x18>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	0a1b      	lsrs	r3, r3, #8
 8005622:	f003 0307 	and.w	r3, r3, #7
}
 8005626:	4618      	mov	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	e000ed00 	.word	0xe000ed00

08005634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800563e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005642:	2b00      	cmp	r3, #0
 8005644:	db0b      	blt.n	800565e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	f003 021f 	and.w	r2, r3, #31
 800564c:	4907      	ldr	r1, [pc, #28]	@ (800566c <__NVIC_EnableIRQ+0x38>)
 800564e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	2001      	movs	r0, #1
 8005656:	fa00 f202 	lsl.w	r2, r0, r2
 800565a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	e000e100 	.word	0xe000e100

08005670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	6039      	str	r1, [r7, #0]
 800567a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800567c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005680:	2b00      	cmp	r3, #0
 8005682:	db0a      	blt.n	800569a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	490c      	ldr	r1, [pc, #48]	@ (80056bc <__NVIC_SetPriority+0x4c>)
 800568a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800568e:	0112      	lsls	r2, r2, #4
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	440b      	add	r3, r1
 8005694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005698:	e00a      	b.n	80056b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	4908      	ldr	r1, [pc, #32]	@ (80056c0 <__NVIC_SetPriority+0x50>)
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	3b04      	subs	r3, #4
 80056a8:	0112      	lsls	r2, r2, #4
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	440b      	add	r3, r1
 80056ae:	761a      	strb	r2, [r3, #24]
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	e000e100 	.word	0xe000e100
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	@ 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f1c3 0307 	rsb	r3, r3, #7
 80056de:	2b04      	cmp	r3, #4
 80056e0:	bf28      	it	cs
 80056e2:	2304      	movcs	r3, #4
 80056e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3304      	adds	r3, #4
 80056ea:	2b06      	cmp	r3, #6
 80056ec:	d902      	bls.n	80056f4 <NVIC_EncodePriority+0x30>
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	3b03      	subs	r3, #3
 80056f2:	e000      	b.n	80056f6 <NVIC_EncodePriority+0x32>
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	43da      	mvns	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	401a      	ands	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800570c:	f04f 31ff 	mov.w	r1, #4294967295
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	43d9      	mvns	r1, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800571c:	4313      	orrs	r3, r2
         );
}
 800571e:	4618      	mov	r0, r3
 8005720:	3724      	adds	r7, #36	@ 0x24
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff ff4c 	bl	80055d0 <__NVIC_SetPriorityGrouping>
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800574e:	f7ff ff63 	bl	8005618 <__NVIC_GetPriorityGrouping>
 8005752:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	6978      	ldr	r0, [r7, #20]
 800575a:	f7ff ffb3 	bl	80056c4 <NVIC_EncodePriority>
 800575e:	4602      	mov	r2, r0
 8005760:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff ff82 	bl	8005670 <__NVIC_SetPriority>
}
 800576c:	bf00      	nop
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800577e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff ff56 	bl	8005634 <__NVIC_EnableIRQ>
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3b01      	subs	r3, #1
 800579c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057a0:	d301      	bcc.n	80057a6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80057a2:	2301      	movs	r3, #1
 80057a4:	e00d      	b.n	80057c2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80057a6:	4a0a      	ldr	r2, [pc, #40]	@ (80057d0 <HAL_SYSTICK_Config+0x40>)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80057ae:	4b08      	ldr	r3, [pc, #32]	@ (80057d0 <HAL_SYSTICK_Config+0x40>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80057b4:	4b06      	ldr	r3, [pc, #24]	@ (80057d0 <HAL_SYSTICK_Config+0x40>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a05      	ldr	r2, [pc, #20]	@ (80057d0 <HAL_SYSTICK_Config+0x40>)
 80057ba:	f043 0303 	orr.w	r3, r3, #3
 80057be:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	e000e010 	.word	0xe000e010

080057d4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d844      	bhi.n	800586c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80057e2:	a201      	add	r2, pc, #4	@ (adr r2, 80057e8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800580b 	.word	0x0800580b
 80057ec:	08005829 	.word	0x08005829
 80057f0:	0800584b 	.word	0x0800584b
 80057f4:	0800586d 	.word	0x0800586d
 80057f8:	080057fd 	.word	0x080057fd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80057fc:	4b1f      	ldr	r3, [pc, #124]	@ (800587c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1e      	ldr	r2, [pc, #120]	@ (800587c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005802:	f043 0304 	orr.w	r3, r3, #4
 8005806:	6013      	str	r3, [r2, #0]
      break;
 8005808:	e031      	b.n	800586e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800580a:	4b1c      	ldr	r3, [pc, #112]	@ (800587c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005810:	f023 0304 	bic.w	r3, r3, #4
 8005814:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005816:	4b1a      	ldr	r3, [pc, #104]	@ (8005880 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800581c:	4a18      	ldr	r2, [pc, #96]	@ (8005880 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800581e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005826:	e022      	b.n	800586e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005828:	4b14      	ldr	r3, [pc, #80]	@ (800587c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a13      	ldr	r2, [pc, #76]	@ (800587c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800582e:	f023 0304 	bic.w	r3, r3, #4
 8005832:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005834:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800583a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800583e:	4a10      	ldr	r2, [pc, #64]	@ (8005880 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005840:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005848:	e011      	b.n	800586e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800584a:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a0b      	ldr	r2, [pc, #44]	@ (800587c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005856:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800585c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005860:	4a07      	ldr	r2, [pc, #28]	@ (8005880 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005862:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005866:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800586a:	e000      	b.n	800586e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800586c:	bf00      	nop
  }
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	e000e010 	.word	0xe000e010
 8005880:	46020c00 	.word	0x46020c00

08005884 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800588a:	4b19      	ldr	r3, [pc, #100]	@ (80058f0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005896:	2304      	movs	r3, #4
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	e021      	b.n	80058e0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800589c:	4b15      	ldr	r3, [pc, #84]	@ (80058f4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800589e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058a2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80058a6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058ae:	d011      	beq.n	80058d4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058b6:	d810      	bhi.n	80058da <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058c4:	d003      	beq.n	80058ce <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80058c6:	e008      	b.n	80058da <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80058c8:	2300      	movs	r3, #0
 80058ca:	607b      	str	r3, [r7, #4]
        break;
 80058cc:	e008      	b.n	80058e0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80058ce:	2301      	movs	r3, #1
 80058d0:	607b      	str	r3, [r7, #4]
        break;
 80058d2:	e005      	b.n	80058e0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80058d4:	2302      	movs	r3, #2
 80058d6:	607b      	str	r3, [r7, #4]
        break;
 80058d8:	e002      	b.n	80058e0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]
        break;
 80058de:	bf00      	nop
    }
  }
  return systick_source;
 80058e0:	687b      	ldr	r3, [r7, #4]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	e000e010 	.word	0xe000e010
 80058f4:	46020c00 	.word	0x46020c00

080058f8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005900:	f7fd fc1a 	bl	8003138 <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0db      	b.n	8005ac8 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a6e      	ldr	r2, [pc, #440]	@ (8005ad0 <HAL_DMA_Init+0x1d8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	f000 809f 	beq.w	8005a5a <HAL_DMA_Init+0x162>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a6c      	ldr	r2, [pc, #432]	@ (8005ad4 <HAL_DMA_Init+0x1dc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	f000 8099 	beq.w	8005a5a <HAL_DMA_Init+0x162>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a6a      	ldr	r2, [pc, #424]	@ (8005ad8 <HAL_DMA_Init+0x1e0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	f000 8093 	beq.w	8005a5a <HAL_DMA_Init+0x162>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a68      	ldr	r2, [pc, #416]	@ (8005adc <HAL_DMA_Init+0x1e4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	f000 808d 	beq.w	8005a5a <HAL_DMA_Init+0x162>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a66      	ldr	r2, [pc, #408]	@ (8005ae0 <HAL_DMA_Init+0x1e8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	f000 8087 	beq.w	8005a5a <HAL_DMA_Init+0x162>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a64      	ldr	r2, [pc, #400]	@ (8005ae4 <HAL_DMA_Init+0x1ec>)
 8005952:	4293      	cmp	r3, r2
 8005954:	f000 8081 	beq.w	8005a5a <HAL_DMA_Init+0x162>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a62      	ldr	r2, [pc, #392]	@ (8005ae8 <HAL_DMA_Init+0x1f0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d07b      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a61      	ldr	r2, [pc, #388]	@ (8005aec <HAL_DMA_Init+0x1f4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d076      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a5f      	ldr	r2, [pc, #380]	@ (8005af0 <HAL_DMA_Init+0x1f8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d071      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a5e      	ldr	r2, [pc, #376]	@ (8005af4 <HAL_DMA_Init+0x1fc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d06c      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a5c      	ldr	r2, [pc, #368]	@ (8005af8 <HAL_DMA_Init+0x200>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d067      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a5b      	ldr	r2, [pc, #364]	@ (8005afc <HAL_DMA_Init+0x204>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d062      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a59      	ldr	r2, [pc, #356]	@ (8005b00 <HAL_DMA_Init+0x208>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d05d      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a58      	ldr	r2, [pc, #352]	@ (8005b04 <HAL_DMA_Init+0x20c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d058      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a56      	ldr	r2, [pc, #344]	@ (8005b08 <HAL_DMA_Init+0x210>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d053      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a55      	ldr	r2, [pc, #340]	@ (8005b0c <HAL_DMA_Init+0x214>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d04e      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a53      	ldr	r2, [pc, #332]	@ (8005b10 <HAL_DMA_Init+0x218>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d049      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a52      	ldr	r2, [pc, #328]	@ (8005b14 <HAL_DMA_Init+0x21c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d044      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a50      	ldr	r2, [pc, #320]	@ (8005b18 <HAL_DMA_Init+0x220>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d03f      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a4f      	ldr	r2, [pc, #316]	@ (8005b1c <HAL_DMA_Init+0x224>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d03a      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a4d      	ldr	r2, [pc, #308]	@ (8005b20 <HAL_DMA_Init+0x228>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d035      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a4c      	ldr	r2, [pc, #304]	@ (8005b24 <HAL_DMA_Init+0x22c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d030      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a4a      	ldr	r2, [pc, #296]	@ (8005b28 <HAL_DMA_Init+0x230>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d02b      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a49      	ldr	r2, [pc, #292]	@ (8005b2c <HAL_DMA_Init+0x234>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d026      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a47      	ldr	r2, [pc, #284]	@ (8005b30 <HAL_DMA_Init+0x238>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d021      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a46      	ldr	r2, [pc, #280]	@ (8005b34 <HAL_DMA_Init+0x23c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d01c      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a44      	ldr	r2, [pc, #272]	@ (8005b38 <HAL_DMA_Init+0x240>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d017      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a43      	ldr	r2, [pc, #268]	@ (8005b3c <HAL_DMA_Init+0x244>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d012      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a41      	ldr	r2, [pc, #260]	@ (8005b40 <HAL_DMA_Init+0x248>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00d      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a40      	ldr	r2, [pc, #256]	@ (8005b44 <HAL_DMA_Init+0x24c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d008      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b48 <HAL_DMA_Init+0x250>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d003      	beq.n	8005a5a <HAL_DMA_Init+0x162>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a3d      	ldr	r2, [pc, #244]	@ (8005b4c <HAL_DMA_Init+0x254>)
 8005a58:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2202      	movs	r2, #2
 8005a66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0206 	orr.w	r2, r2, #6
 8005a78:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005a7a:	e00f      	b.n	8005a9c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005a7c:	f7fd fb5c 	bl	8003138 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b05      	cmp	r3, #5
 8005a88:	d908      	bls.n	8005a9c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2210      	movs	r2, #16
 8005a8e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2203      	movs	r2, #3
 8005a94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e015      	b.n	8005ac8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e8      	bne.n	8005a7c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb26 	bl	80060fc <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40020050 	.word	0x40020050
 8005ad4:	50020050 	.word	0x50020050
 8005ad8:	400200d0 	.word	0x400200d0
 8005adc:	500200d0 	.word	0x500200d0
 8005ae0:	40020150 	.word	0x40020150
 8005ae4:	50020150 	.word	0x50020150
 8005ae8:	400201d0 	.word	0x400201d0
 8005aec:	500201d0 	.word	0x500201d0
 8005af0:	40020250 	.word	0x40020250
 8005af4:	50020250 	.word	0x50020250
 8005af8:	400202d0 	.word	0x400202d0
 8005afc:	500202d0 	.word	0x500202d0
 8005b00:	40020350 	.word	0x40020350
 8005b04:	50020350 	.word	0x50020350
 8005b08:	400203d0 	.word	0x400203d0
 8005b0c:	500203d0 	.word	0x500203d0
 8005b10:	40020450 	.word	0x40020450
 8005b14:	50020450 	.word	0x50020450
 8005b18:	400204d0 	.word	0x400204d0
 8005b1c:	500204d0 	.word	0x500204d0
 8005b20:	40020550 	.word	0x40020550
 8005b24:	50020550 	.word	0x50020550
 8005b28:	400205d0 	.word	0x400205d0
 8005b2c:	500205d0 	.word	0x500205d0
 8005b30:	40020650 	.word	0x40020650
 8005b34:	50020650 	.word	0x50020650
 8005b38:	400206d0 	.word	0x400206d0
 8005b3c:	500206d0 	.word	0x500206d0
 8005b40:	40020750 	.word	0x40020750
 8005b44:	50020750 	.word	0x50020750
 8005b48:	400207d0 	.word	0x400207d0
 8005b4c:	500207d0 	.word	0x500207d0

08005b50 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e04f      	b.n	8005c08 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_DMA_Start_IT+0x26>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e048      	b.n	8005c08 <HAL_DMA_Start_IT+0xb8>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d136      	bne.n	8005bf8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fa86 	bl	80060b0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005bb2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bca:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005be2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e007      	b.n	8005c08 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2240      	movs	r2, #64	@ 0x40
 8005bfc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005c18:	f7fd fa8e 	bl	8003138 <HAL_GetTick>
 8005c1c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e06b      	b.n	8005d00 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d008      	beq.n	8005c46 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e05c      	b.n	8005d00 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0204 	orr.w	r2, r2, #4
 8005c54:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2205      	movs	r2, #5
 8005c5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005c5e:	e020      	b.n	8005ca2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005c60:	f7fd fa6a 	bl	8003138 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b05      	cmp	r3, #5
 8005c6c:	d919      	bls.n	8005ca2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c72:	f043 0210 	orr.w	r2, r3, #16
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c92:	2201      	movs	r2, #1
 8005c94:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e02e      	b.n	8005d00 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0d7      	beq.n	8005c60 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0202 	orr.w	r2, r2, #2
 8005cbe:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005cd0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cea:	2201      	movs	r2, #1
 8005cec:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e019      	b.n	8005d4e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d004      	beq.n	8005d30 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e00e      	b.n	8005d4e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2204      	movs	r2, #4
 8005d34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005d46:	f043 0304 	orr.w	r3, r3, #4
 8005d4a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005d6a:	f023 030f 	bic.w	r3, r3, #15
 8005d6e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d78:	3b50      	subs	r3, #80	@ 0x50
 8005d7a:	09db      	lsrs	r3, r3, #7
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	2201      	movs	r2, #1
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 813b 	beq.w	8006010 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d011      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dbe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc4:	f043 0201 	orr.w	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d011      	beq.n	8005dfe <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005df0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df6:	f043 0202 	orr.w	r2, r3, #2
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d011      	beq.n	8005e30 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e22:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e28:	f043 0204 	orr.w	r2, r3, #4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d011      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005e54:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5a:	f043 0208 	orr.w	r2, r3, #8
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d013      	beq.n	8005e98 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e86:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d04c      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d045      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005ebc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d12e      	bne.n	8005f28 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ed8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0202 	orr.w	r2, r2, #2
 8005ee8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f02:	2201      	movs	r2, #1
 8005f04:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d07a      	beq.n	8006014 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
        }

        return;
 8005f26:	e075      	b.n	8006014 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2205      	movs	r2, #5
 8005f2c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d039      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d032      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d012      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d116      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d111      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f88:	2201      	movs	r2, #1
 8005f8a:	731a      	strb	r2, [r3, #12]
 8005f8c:	e008      	b.n	8005fa0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d103      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005fa8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d025      	beq.n	8006016 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695a      	ldr	r2, [r3, #20]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0202 	orr.w	r2, r2, #2
 8005fd8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
 800600e:	e002      	b.n	8006016 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8006014:	bf00      	nop
    }
  }
}
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800602a:	b2db      	uxtb	r3, r3
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e02b      	b.n	80060a4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006054:	f023 030f 	bic.w	r3, r3, #15
 8006058:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006062:	3b50      	subs	r3, #80	@ 0x50
 8006064:	09db      	lsrs	r3, r3, #7
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	2201      	movs	r2, #1
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	d012      	beq.n	80060a2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f003 0311 	and.w	r3, r3, #17
 8006082:	2b11      	cmp	r3, #17
 8006084:	d106      	bne.n	8006094 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	431a      	orrs	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	605a      	str	r2, [r3, #4]
 8006092:	e006      	b.n	80060a2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	43db      	mvns	r3, r3
 800609c:	401a      	ands	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c4:	0c1b      	lsrs	r3, r3, #16
 80060c6:	041b      	lsls	r3, r3, #16
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	b291      	uxth	r1, r2
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80060dc:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	430a      	orrs	r2, r1
 800611c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a53      	ldr	r2, [pc, #332]	@ (8006288 <DMA_Init+0x18c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	f000 80a0 	beq.w	8006282 <DMA_Init+0x186>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a51      	ldr	r2, [pc, #324]	@ (800628c <DMA_Init+0x190>)
 8006148:	4293      	cmp	r3, r2
 800614a:	f000 809a 	beq.w	8006282 <DMA_Init+0x186>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a4f      	ldr	r2, [pc, #316]	@ (8006290 <DMA_Init+0x194>)
 8006154:	4293      	cmp	r3, r2
 8006156:	f000 8094 	beq.w	8006282 <DMA_Init+0x186>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a4d      	ldr	r2, [pc, #308]	@ (8006294 <DMA_Init+0x198>)
 8006160:	4293      	cmp	r3, r2
 8006162:	f000 808e 	beq.w	8006282 <DMA_Init+0x186>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a4b      	ldr	r2, [pc, #300]	@ (8006298 <DMA_Init+0x19c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	f000 8088 	beq.w	8006282 <DMA_Init+0x186>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a49      	ldr	r2, [pc, #292]	@ (800629c <DMA_Init+0x1a0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	f000 8082 	beq.w	8006282 <DMA_Init+0x186>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a47      	ldr	r2, [pc, #284]	@ (80062a0 <DMA_Init+0x1a4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d07c      	beq.n	8006282 <DMA_Init+0x186>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a45      	ldr	r2, [pc, #276]	@ (80062a4 <DMA_Init+0x1a8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d077      	beq.n	8006282 <DMA_Init+0x186>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a44      	ldr	r2, [pc, #272]	@ (80062a8 <DMA_Init+0x1ac>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d072      	beq.n	8006282 <DMA_Init+0x186>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a42      	ldr	r2, [pc, #264]	@ (80062ac <DMA_Init+0x1b0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d06d      	beq.n	8006282 <DMA_Init+0x186>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a41      	ldr	r2, [pc, #260]	@ (80062b0 <DMA_Init+0x1b4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d068      	beq.n	8006282 <DMA_Init+0x186>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a3f      	ldr	r2, [pc, #252]	@ (80062b4 <DMA_Init+0x1b8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d063      	beq.n	8006282 <DMA_Init+0x186>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3e      	ldr	r2, [pc, #248]	@ (80062b8 <DMA_Init+0x1bc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d05e      	beq.n	8006282 <DMA_Init+0x186>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a3c      	ldr	r2, [pc, #240]	@ (80062bc <DMA_Init+0x1c0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d059      	beq.n	8006282 <DMA_Init+0x186>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a3b      	ldr	r2, [pc, #236]	@ (80062c0 <DMA_Init+0x1c4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d054      	beq.n	8006282 <DMA_Init+0x186>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a39      	ldr	r2, [pc, #228]	@ (80062c4 <DMA_Init+0x1c8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d04f      	beq.n	8006282 <DMA_Init+0x186>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a38      	ldr	r2, [pc, #224]	@ (80062c8 <DMA_Init+0x1cc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d04a      	beq.n	8006282 <DMA_Init+0x186>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a36      	ldr	r2, [pc, #216]	@ (80062cc <DMA_Init+0x1d0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d045      	beq.n	8006282 <DMA_Init+0x186>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a35      	ldr	r2, [pc, #212]	@ (80062d0 <DMA_Init+0x1d4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d040      	beq.n	8006282 <DMA_Init+0x186>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a33      	ldr	r2, [pc, #204]	@ (80062d4 <DMA_Init+0x1d8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d03b      	beq.n	8006282 <DMA_Init+0x186>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a32      	ldr	r2, [pc, #200]	@ (80062d8 <DMA_Init+0x1dc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d036      	beq.n	8006282 <DMA_Init+0x186>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a30      	ldr	r2, [pc, #192]	@ (80062dc <DMA_Init+0x1e0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d031      	beq.n	8006282 <DMA_Init+0x186>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2f      	ldr	r2, [pc, #188]	@ (80062e0 <DMA_Init+0x1e4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d02c      	beq.n	8006282 <DMA_Init+0x186>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2d      	ldr	r2, [pc, #180]	@ (80062e4 <DMA_Init+0x1e8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d027      	beq.n	8006282 <DMA_Init+0x186>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2c      	ldr	r2, [pc, #176]	@ (80062e8 <DMA_Init+0x1ec>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d022      	beq.n	8006282 <DMA_Init+0x186>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a2a      	ldr	r2, [pc, #168]	@ (80062ec <DMA_Init+0x1f0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01d      	beq.n	8006282 <DMA_Init+0x186>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a29      	ldr	r2, [pc, #164]	@ (80062f0 <DMA_Init+0x1f4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d018      	beq.n	8006282 <DMA_Init+0x186>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a27      	ldr	r2, [pc, #156]	@ (80062f4 <DMA_Init+0x1f8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <DMA_Init+0x186>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a26      	ldr	r2, [pc, #152]	@ (80062f8 <DMA_Init+0x1fc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00e      	beq.n	8006282 <DMA_Init+0x186>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a24      	ldr	r2, [pc, #144]	@ (80062fc <DMA_Init+0x200>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d009      	beq.n	8006282 <DMA_Init+0x186>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a23      	ldr	r2, [pc, #140]	@ (8006300 <DMA_Init+0x204>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <DMA_Init+0x186>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a21      	ldr	r2, [pc, #132]	@ (8006304 <DMA_Init+0x208>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d142      	bne.n	8006308 <DMA_Init+0x20c>
 8006282:	2301      	movs	r3, #1
 8006284:	e041      	b.n	800630a <DMA_Init+0x20e>
 8006286:	bf00      	nop
 8006288:	40020050 	.word	0x40020050
 800628c:	50020050 	.word	0x50020050
 8006290:	400200d0 	.word	0x400200d0
 8006294:	500200d0 	.word	0x500200d0
 8006298:	40020150 	.word	0x40020150
 800629c:	50020150 	.word	0x50020150
 80062a0:	400201d0 	.word	0x400201d0
 80062a4:	500201d0 	.word	0x500201d0
 80062a8:	40020250 	.word	0x40020250
 80062ac:	50020250 	.word	0x50020250
 80062b0:	400202d0 	.word	0x400202d0
 80062b4:	500202d0 	.word	0x500202d0
 80062b8:	40020350 	.word	0x40020350
 80062bc:	50020350 	.word	0x50020350
 80062c0:	400203d0 	.word	0x400203d0
 80062c4:	500203d0 	.word	0x500203d0
 80062c8:	40020450 	.word	0x40020450
 80062cc:	50020450 	.word	0x50020450
 80062d0:	400204d0 	.word	0x400204d0
 80062d4:	500204d0 	.word	0x500204d0
 80062d8:	40020550 	.word	0x40020550
 80062dc:	50020550 	.word	0x50020550
 80062e0:	400205d0 	.word	0x400205d0
 80062e4:	500205d0 	.word	0x500205d0
 80062e8:	40020650 	.word	0x40020650
 80062ec:	50020650 	.word	0x50020650
 80062f0:	400206d0 	.word	0x400206d0
 80062f4:	500206d0 	.word	0x500206d0
 80062f8:	40020750 	.word	0x40020750
 80062fc:	50020750 	.word	0x50020750
 8006300:	400207d0 	.word	0x400207d0
 8006304:	500207d0 	.word	0x500207d0
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d012      	beq.n	8006334 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006316:	3b01      	subs	r3, #1
 8006318:	051b      	lsls	r3, r3, #20
 800631a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800631e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006324:	3b01      	subs	r3, #1
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800632c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	430a      	orrs	r2, r1
 8006346:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006366:	f040 80b0 	bne.w	80064ca <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a82      	ldr	r2, [pc, #520]	@ (8006578 <DMA_Init+0x47c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	f000 80a0 	beq.w	80064b6 <DMA_Init+0x3ba>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a80      	ldr	r2, [pc, #512]	@ (800657c <DMA_Init+0x480>)
 800637c:	4293      	cmp	r3, r2
 800637e:	f000 809a 	beq.w	80064b6 <DMA_Init+0x3ba>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a7e      	ldr	r2, [pc, #504]	@ (8006580 <DMA_Init+0x484>)
 8006388:	4293      	cmp	r3, r2
 800638a:	f000 8094 	beq.w	80064b6 <DMA_Init+0x3ba>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a7c      	ldr	r2, [pc, #496]	@ (8006584 <DMA_Init+0x488>)
 8006394:	4293      	cmp	r3, r2
 8006396:	f000 808e 	beq.w	80064b6 <DMA_Init+0x3ba>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a7a      	ldr	r2, [pc, #488]	@ (8006588 <DMA_Init+0x48c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	f000 8088 	beq.w	80064b6 <DMA_Init+0x3ba>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a78      	ldr	r2, [pc, #480]	@ (800658c <DMA_Init+0x490>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	f000 8082 	beq.w	80064b6 <DMA_Init+0x3ba>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a76      	ldr	r2, [pc, #472]	@ (8006590 <DMA_Init+0x494>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d07c      	beq.n	80064b6 <DMA_Init+0x3ba>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a74      	ldr	r2, [pc, #464]	@ (8006594 <DMA_Init+0x498>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d077      	beq.n	80064b6 <DMA_Init+0x3ba>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a73      	ldr	r2, [pc, #460]	@ (8006598 <DMA_Init+0x49c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d072      	beq.n	80064b6 <DMA_Init+0x3ba>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a71      	ldr	r2, [pc, #452]	@ (800659c <DMA_Init+0x4a0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d06d      	beq.n	80064b6 <DMA_Init+0x3ba>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a70      	ldr	r2, [pc, #448]	@ (80065a0 <DMA_Init+0x4a4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d068      	beq.n	80064b6 <DMA_Init+0x3ba>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a6e      	ldr	r2, [pc, #440]	@ (80065a4 <DMA_Init+0x4a8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d063      	beq.n	80064b6 <DMA_Init+0x3ba>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a6d      	ldr	r2, [pc, #436]	@ (80065a8 <DMA_Init+0x4ac>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d05e      	beq.n	80064b6 <DMA_Init+0x3ba>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a6b      	ldr	r2, [pc, #428]	@ (80065ac <DMA_Init+0x4b0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d059      	beq.n	80064b6 <DMA_Init+0x3ba>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a6a      	ldr	r2, [pc, #424]	@ (80065b0 <DMA_Init+0x4b4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d054      	beq.n	80064b6 <DMA_Init+0x3ba>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a68      	ldr	r2, [pc, #416]	@ (80065b4 <DMA_Init+0x4b8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d04f      	beq.n	80064b6 <DMA_Init+0x3ba>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a67      	ldr	r2, [pc, #412]	@ (80065b8 <DMA_Init+0x4bc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d04a      	beq.n	80064b6 <DMA_Init+0x3ba>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a65      	ldr	r2, [pc, #404]	@ (80065bc <DMA_Init+0x4c0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d045      	beq.n	80064b6 <DMA_Init+0x3ba>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a64      	ldr	r2, [pc, #400]	@ (80065c0 <DMA_Init+0x4c4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d040      	beq.n	80064b6 <DMA_Init+0x3ba>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a62      	ldr	r2, [pc, #392]	@ (80065c4 <DMA_Init+0x4c8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d03b      	beq.n	80064b6 <DMA_Init+0x3ba>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a61      	ldr	r2, [pc, #388]	@ (80065c8 <DMA_Init+0x4cc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d036      	beq.n	80064b6 <DMA_Init+0x3ba>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a5f      	ldr	r2, [pc, #380]	@ (80065cc <DMA_Init+0x4d0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d031      	beq.n	80064b6 <DMA_Init+0x3ba>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a5e      	ldr	r2, [pc, #376]	@ (80065d0 <DMA_Init+0x4d4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d02c      	beq.n	80064b6 <DMA_Init+0x3ba>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a5c      	ldr	r2, [pc, #368]	@ (80065d4 <DMA_Init+0x4d8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d027      	beq.n	80064b6 <DMA_Init+0x3ba>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a5b      	ldr	r2, [pc, #364]	@ (80065d8 <DMA_Init+0x4dc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <DMA_Init+0x3ba>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a59      	ldr	r2, [pc, #356]	@ (80065dc <DMA_Init+0x4e0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01d      	beq.n	80064b6 <DMA_Init+0x3ba>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a58      	ldr	r2, [pc, #352]	@ (80065e0 <DMA_Init+0x4e4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <DMA_Init+0x3ba>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a56      	ldr	r2, [pc, #344]	@ (80065e4 <DMA_Init+0x4e8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <DMA_Init+0x3ba>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a55      	ldr	r2, [pc, #340]	@ (80065e8 <DMA_Init+0x4ec>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <DMA_Init+0x3ba>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a53      	ldr	r2, [pc, #332]	@ (80065ec <DMA_Init+0x4f0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <DMA_Init+0x3ba>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a52      	ldr	r2, [pc, #328]	@ (80065f0 <DMA_Init+0x4f4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <DMA_Init+0x3ba>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a50      	ldr	r2, [pc, #320]	@ (80065f4 <DMA_Init+0x4f8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d101      	bne.n	80064ba <DMA_Init+0x3be>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <DMA_Init+0x3c0>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00d      	beq.n	80064dc <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e008      	b.n	80064dc <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d2:	d103      	bne.n	80064dc <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064da:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064e2:	4b45      	ldr	r3, [pc, #276]	@ (80065f8 <DMA_Init+0x4fc>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	68f9      	ldr	r1, [r7, #12]
 80064ec:	430b      	orrs	r3, r1
 80064ee:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2200      	movs	r2, #0
 80064f6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a36      	ldr	r2, [pc, #216]	@ (80065d8 <DMA_Init+0x4dc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d022      	beq.n	8006548 <DMA_Init+0x44c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a35      	ldr	r2, [pc, #212]	@ (80065dc <DMA_Init+0x4e0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d01d      	beq.n	8006548 <DMA_Init+0x44c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a33      	ldr	r2, [pc, #204]	@ (80065e0 <DMA_Init+0x4e4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d018      	beq.n	8006548 <DMA_Init+0x44c>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a32      	ldr	r2, [pc, #200]	@ (80065e4 <DMA_Init+0x4e8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <DMA_Init+0x44c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a30      	ldr	r2, [pc, #192]	@ (80065e8 <DMA_Init+0x4ec>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00e      	beq.n	8006548 <DMA_Init+0x44c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a2f      	ldr	r2, [pc, #188]	@ (80065ec <DMA_Init+0x4f0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d009      	beq.n	8006548 <DMA_Init+0x44c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a2d      	ldr	r2, [pc, #180]	@ (80065f0 <DMA_Init+0x4f4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <DMA_Init+0x44c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2c      	ldr	r2, [pc, #176]	@ (80065f4 <DMA_Init+0x4f8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d101      	bne.n	800654c <DMA_Init+0x450>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <DMA_Init+0x452>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2200      	movs	r2, #0
 8006558:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2200      	movs	r2, #0
 8006560:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2200      	movs	r2, #0
 8006568:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40020050 	.word	0x40020050
 800657c:	50020050 	.word	0x50020050
 8006580:	400200d0 	.word	0x400200d0
 8006584:	500200d0 	.word	0x500200d0
 8006588:	40020150 	.word	0x40020150
 800658c:	50020150 	.word	0x50020150
 8006590:	400201d0 	.word	0x400201d0
 8006594:	500201d0 	.word	0x500201d0
 8006598:	40020250 	.word	0x40020250
 800659c:	50020250 	.word	0x50020250
 80065a0:	400202d0 	.word	0x400202d0
 80065a4:	500202d0 	.word	0x500202d0
 80065a8:	40020350 	.word	0x40020350
 80065ac:	50020350 	.word	0x50020350
 80065b0:	400203d0 	.word	0x400203d0
 80065b4:	500203d0 	.word	0x500203d0
 80065b8:	40020450 	.word	0x40020450
 80065bc:	50020450 	.word	0x50020450
 80065c0:	400204d0 	.word	0x400204d0
 80065c4:	500204d0 	.word	0x500204d0
 80065c8:	40020550 	.word	0x40020550
 80065cc:	50020550 	.word	0x50020550
 80065d0:	400205d0 	.word	0x400205d0
 80065d4:	500205d0 	.word	0x500205d0
 80065d8:	40020650 	.word	0x40020650
 80065dc:	50020650 	.word	0x50020650
 80065e0:	400206d0 	.word	0x400206d0
 80065e4:	500206d0 	.word	0x500206d0
 80065e8:	40020750 	.word	0x40020750
 80065ec:	50020750 	.word	0x50020750
 80065f0:	400207d0 	.word	0x400207d0
 80065f4:	500207d0 	.word	0x500207d0
 80065f8:	3c803180 	.word	0x3c803180

080065fc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e053      	b.n	80066b6 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fb fd64 	bl	80020f0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800663a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6851      	ldr	r1, [r2, #4]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	69d2      	ldr	r2, [r2, #28]
 8006646:	4311      	orrs	r1, r2
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	430b      	orrs	r3, r1
 800664e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006656:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6891      	ldr	r1, [r2, #8]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6992      	ldr	r2, [r2, #24]
 8006666:	4311      	orrs	r1, r2
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	430b      	orrs	r3, r1
 800666e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	0c1b      	lsrs	r3, r3, #16
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	68d1      	ldr	r1, [r2, #12]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	430b      	orrs	r3, r1
 8006684:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800668c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	051a      	lsls	r2, r3, #20
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	055b      	lsls	r3, r3, #21
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_DMA2D_ConfigLayer+0x24>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e092      	b.n	800680a <HAL_DMA2D_ConfigLayer+0x14a>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	4613      	mov	r3, r2
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	3328      	adds	r3, #40	@ 0x28
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	041b      	lsls	r3, r3, #16
 8006710:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006718:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006724:	4b3c      	ldr	r3, [pc, #240]	@ (8006818 <HAL_DMA2D_ConfigLayer+0x158>)
 8006726:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b0a      	cmp	r3, #10
 800672e:	d003      	beq.n	8006738 <HAL_DMA2D_ConfigLayer+0x78>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b09      	cmp	r3, #9
 8006736:	d107      	bne.n	8006748 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	e005      	b.n	8006754 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	061b      	lsls	r3, r3, #24
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d120      	bne.n	800679c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	43db      	mvns	r3, r3
 8006764:	ea02 0103 	and.w	r1, r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	430a      	orrs	r2, r1
 8006770:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b0a      	cmp	r3, #10
 8006782:	d003      	beq.n	800678c <HAL_DMA2D_ConfigLayer+0xcc>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b09      	cmp	r3, #9
 800678a:	d135      	bne.n	80067f8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006798:	629a      	str	r2, [r3, #40]	@ 0x28
 800679a:	e02d      	b.n	80067f8 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2b0b      	cmp	r3, #11
 80067a2:	d109      	bne.n	80067b8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	049b      	lsls	r3, r3, #18
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80067b6:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	ea02 0103 	and.w	r1, r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b0a      	cmp	r3, #10
 80067e0:	d003      	beq.n	80067ea <HAL_DMA2D_ConfigLayer+0x12a>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d106      	bne.n	80067f8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80067f6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	ff33000f 	.word	0xff33000f

0800681c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006824:	f7fc fc88 	bl	8003138 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e0db      	b.n	80069ec <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a6e      	ldr	r2, [pc, #440]	@ (80069f4 <HAL_DMAEx_List_Init+0x1d8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	f000 809f 	beq.w	800697e <HAL_DMAEx_List_Init+0x162>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a6c      	ldr	r2, [pc, #432]	@ (80069f8 <HAL_DMAEx_List_Init+0x1dc>)
 8006846:	4293      	cmp	r3, r2
 8006848:	f000 8099 	beq.w	800697e <HAL_DMAEx_List_Init+0x162>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a6a      	ldr	r2, [pc, #424]	@ (80069fc <HAL_DMAEx_List_Init+0x1e0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	f000 8093 	beq.w	800697e <HAL_DMAEx_List_Init+0x162>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a68      	ldr	r2, [pc, #416]	@ (8006a00 <HAL_DMAEx_List_Init+0x1e4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	f000 808d 	beq.w	800697e <HAL_DMAEx_List_Init+0x162>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a66      	ldr	r2, [pc, #408]	@ (8006a04 <HAL_DMAEx_List_Init+0x1e8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	f000 8087 	beq.w	800697e <HAL_DMAEx_List_Init+0x162>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a64      	ldr	r2, [pc, #400]	@ (8006a08 <HAL_DMAEx_List_Init+0x1ec>)
 8006876:	4293      	cmp	r3, r2
 8006878:	f000 8081 	beq.w	800697e <HAL_DMAEx_List_Init+0x162>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a62      	ldr	r2, [pc, #392]	@ (8006a0c <HAL_DMAEx_List_Init+0x1f0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d07b      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a61      	ldr	r2, [pc, #388]	@ (8006a10 <HAL_DMAEx_List_Init+0x1f4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d076      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a5f      	ldr	r2, [pc, #380]	@ (8006a14 <HAL_DMAEx_List_Init+0x1f8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d071      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a5e      	ldr	r2, [pc, #376]	@ (8006a18 <HAL_DMAEx_List_Init+0x1fc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d06c      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a5c      	ldr	r2, [pc, #368]	@ (8006a1c <HAL_DMAEx_List_Init+0x200>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d067      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a5b      	ldr	r2, [pc, #364]	@ (8006a20 <HAL_DMAEx_List_Init+0x204>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d062      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a59      	ldr	r2, [pc, #356]	@ (8006a24 <HAL_DMAEx_List_Init+0x208>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d05d      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a58      	ldr	r2, [pc, #352]	@ (8006a28 <HAL_DMAEx_List_Init+0x20c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d058      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a56      	ldr	r2, [pc, #344]	@ (8006a2c <HAL_DMAEx_List_Init+0x210>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d053      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a55      	ldr	r2, [pc, #340]	@ (8006a30 <HAL_DMAEx_List_Init+0x214>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d04e      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a53      	ldr	r2, [pc, #332]	@ (8006a34 <HAL_DMAEx_List_Init+0x218>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d049      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a52      	ldr	r2, [pc, #328]	@ (8006a38 <HAL_DMAEx_List_Init+0x21c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d044      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a50      	ldr	r2, [pc, #320]	@ (8006a3c <HAL_DMAEx_List_Init+0x220>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d03f      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a4f      	ldr	r2, [pc, #316]	@ (8006a40 <HAL_DMAEx_List_Init+0x224>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d03a      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a4d      	ldr	r2, [pc, #308]	@ (8006a44 <HAL_DMAEx_List_Init+0x228>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d035      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a4c      	ldr	r2, [pc, #304]	@ (8006a48 <HAL_DMAEx_List_Init+0x22c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d030      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a4a      	ldr	r2, [pc, #296]	@ (8006a4c <HAL_DMAEx_List_Init+0x230>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d02b      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a49      	ldr	r2, [pc, #292]	@ (8006a50 <HAL_DMAEx_List_Init+0x234>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d026      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a47      	ldr	r2, [pc, #284]	@ (8006a54 <HAL_DMAEx_List_Init+0x238>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d021      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a46      	ldr	r2, [pc, #280]	@ (8006a58 <HAL_DMAEx_List_Init+0x23c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d01c      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a44      	ldr	r2, [pc, #272]	@ (8006a5c <HAL_DMAEx_List_Init+0x240>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d017      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a43      	ldr	r2, [pc, #268]	@ (8006a60 <HAL_DMAEx_List_Init+0x244>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d012      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a41      	ldr	r2, [pc, #260]	@ (8006a64 <HAL_DMAEx_List_Init+0x248>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00d      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a40      	ldr	r2, [pc, #256]	@ (8006a68 <HAL_DMAEx_List_Init+0x24c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d008      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a3e      	ldr	r2, [pc, #248]	@ (8006a6c <HAL_DMAEx_List_Init+0x250>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d003      	beq.n	800697e <HAL_DMAEx_List_Init+0x162>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a3d      	ldr	r2, [pc, #244]	@ (8006a70 <HAL_DMAEx_List_Init+0x254>)
 800697c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695a      	ldr	r2, [r3, #20]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0206 	orr.w	r2, r2, #6
 800699c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800699e:	e00f      	b.n	80069c0 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80069a0:	f7fc fbca 	bl	8003138 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b05      	cmp	r3, #5
 80069ac:	d908      	bls.n	80069c0 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2210      	movs	r2, #16
 80069b2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2203      	movs	r2, #3
 80069b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e015      	b.n	80069ec <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e8      	bne.n	80069a0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fb16 	bl	8007000 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	40020050 	.word	0x40020050
 80069f8:	50020050 	.word	0x50020050
 80069fc:	400200d0 	.word	0x400200d0
 8006a00:	500200d0 	.word	0x500200d0
 8006a04:	40020150 	.word	0x40020150
 8006a08:	50020150 	.word	0x50020150
 8006a0c:	400201d0 	.word	0x400201d0
 8006a10:	500201d0 	.word	0x500201d0
 8006a14:	40020250 	.word	0x40020250
 8006a18:	50020250 	.word	0x50020250
 8006a1c:	400202d0 	.word	0x400202d0
 8006a20:	500202d0 	.word	0x500202d0
 8006a24:	40020350 	.word	0x40020350
 8006a28:	50020350 	.word	0x50020350
 8006a2c:	400203d0 	.word	0x400203d0
 8006a30:	500203d0 	.word	0x500203d0
 8006a34:	40020450 	.word	0x40020450
 8006a38:	50020450 	.word	0x50020450
 8006a3c:	400204d0 	.word	0x400204d0
 8006a40:	500204d0 	.word	0x500204d0
 8006a44:	40020550 	.word	0x40020550
 8006a48:	50020550 	.word	0x50020550
 8006a4c:	400205d0 	.word	0x400205d0
 8006a50:	500205d0 	.word	0x500205d0
 8006a54:	40020650 	.word	0x40020650
 8006a58:	50020650 	.word	0x50020650
 8006a5c:	400206d0 	.word	0x400206d0
 8006a60:	500206d0 	.word	0x500206d0
 8006a64:	40020750 	.word	0x40020750
 8006a68:	50020750 	.word	0x50020750
 8006a6c:	400207d0 	.word	0x400207d0
 8006a70:	500207d0 	.word	0x500207d0

08006a74 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_DMAEx_List_Start_IT+0x16>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e082      	b.n	8006b94 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006a94:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006aa0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d005      	beq.n	8006ab4 <HAL_DMAEx_List_Start_IT+0x40>
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d16a      	bne.n	8006b84 <HAL_DMAEx_List_Start_IT+0x110>
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d067      	beq.n	8006b84 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d157      	bne.n	8006b70 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_DMAEx_List_Start_IT+0x5a>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e062      	b.n	8006b94 <HAL_DMAEx_List_Start_IT+0x120>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af0:	2200      	movs	r2, #0
 8006af2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695a      	ldr	r2, [r3, #20]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006b02:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695a      	ldr	r2, [r3, #20]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b1a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695a      	ldr	r2, [r3, #20]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b32:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f107 010c 	add.w	r1, r7, #12
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fe7d 	bl	8007840 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	0c0b      	lsrs	r3, r1, #16
 8006b54:	041b      	lsls	r3, r3, #16
 8006b56:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006b64:	4013      	ands	r3, r2
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6812      	ldr	r2, [r2, #0]
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	e007      	b.n	8006b94 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2240      	movs	r2, #64	@ 0x40
 8006b88:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_DMAEx_List_BuildNode+0x16>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e004      	b.n	8006bc0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fb79 	bl	80072b0 <DMA_List_BuildNode>

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e004      	b.n	8006bec <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fcb5 	bl	8007554 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08c      	sub	sp, #48	@ 0x30
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <HAL_DMAEx_List_InsertNode+0x18>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e0b6      	b.n	8006d7e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d104      	bne.n	8006c22 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e0ad      	b.n	8006d7e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fd9c 	bl	8007768 <DMA_List_CheckNodesBaseAddresses>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d004      	beq.n	8006c40 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2205      	movs	r2, #5
 8006c3a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e09e      	b.n	8006d7e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fdbd 	bl	80077c8 <DMA_List_CheckNodesTypes>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d004      	beq.n	8006c5e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2204      	movs	r2, #4
 8006c58:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e08f      	b.n	8006d7e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2202      	movs	r2, #2
 8006c62:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006c6a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006c6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fde3 	bl	8007840 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d11a      	bne.n	8006cb8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d106      	bne.n	8006c96 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	609a      	str	r2, [r3, #8]
 8006c94:	e06c      	b.n	8006d70 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ca6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ca8:	4319      	orrs	r1, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	609a      	str	r2, [r3, #8]
 8006cb6:	e05b      	b.n	8006d70 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10f      	bne.n	8006cde <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006cc8:	4013      	ands	r3, r2
 8006cca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cce:	4319      	orrs	r1, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e043      	b.n	8006d66 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8006cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006ce2:	f107 0314 	add.w	r3, r7, #20
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 fdd8 	bl	80078a0 <DMA_List_FindNode>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d132      	bne.n	8006d5c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d11a      	bne.n	8006d36 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006d12:	4013      	ands	r3, r2
 8006d14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d18:	4319      	orrs	r1, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006d26:	4013      	ands	r3, r2
 8006d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d2c:	4319      	orrs	r1, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006d34:	e017      	b.n	8006d66 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006d36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d52:	4319      	orrs	r1, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006d5a:	e004      	b.n	8006d66 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2206      	movs	r2, #6
 8006d60:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e00b      	b.n	8006d7e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3730      	adds	r7, #48	@ 0x30
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b08a      	sub	sp, #40	@ 0x28
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e052      	b.n	8006e3e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e049      	b.n	8006e3e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00c      	beq.n	8006dcc <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d101      	bne.n	8006dc2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e03d      	b.n	8006e3e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e038      	b.n	8006e3e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d104      	bne.n	8006dde <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e02f      	b.n	8006e3e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f107 0220 	add.w	r2, r7, #32
 8006df2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fd22 	bl	8007840 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	461a      	mov	r2, r3
 8006e06:	2100      	movs	r1, #0
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fd49 	bl	80078a0 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006e18:	4013      	ands	r3, r2
 8006e1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	4610      	mov	r0, r2
 8006e20:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006e22:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006e24:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3728      	adds	r7, #40	@ 0x28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <HAL_DMAEx_List_LinkQ+0x16>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e072      	b.n	8006f48 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006e68:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d002      	beq.n	8006e7c <HAL_DMAEx_List_LinkQ+0x34>
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	2b05      	cmp	r3, #5
 8006e7a:	d108      	bne.n	8006e8e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2240      	movs	r2, #64	@ 0x40
 8006e80:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e05c      	b.n	8006f48 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	7b1b      	ldrb	r3, [r3, #12]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d104      	bne.n	8006ea2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e052      	b.n	8006f48 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8006f54 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d022      	beq.n	8006ef2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a29      	ldr	r2, [pc, #164]	@ (8006f58 <HAL_DMAEx_List_LinkQ+0x110>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01d      	beq.n	8006ef2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a28      	ldr	r2, [pc, #160]	@ (8006f5c <HAL_DMAEx_List_LinkQ+0x114>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d018      	beq.n	8006ef2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a26      	ldr	r2, [pc, #152]	@ (8006f60 <HAL_DMAEx_List_LinkQ+0x118>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d013      	beq.n	8006ef2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a25      	ldr	r2, [pc, #148]	@ (8006f64 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00e      	beq.n	8006ef2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a23      	ldr	r2, [pc, #140]	@ (8006f68 <HAL_DMAEx_List_LinkQ+0x120>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d009      	beq.n	8006ef2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a22      	ldr	r2, [pc, #136]	@ (8006f6c <HAL_DMAEx_List_LinkQ+0x124>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d004      	beq.n	8006ef2 <HAL_DMAEx_List_LinkQ+0xaa>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a20      	ldr	r2, [pc, #128]	@ (8006f70 <HAL_DMAEx_List_LinkQ+0x128>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d101      	bne.n	8006ef6 <HAL_DMAEx_List_LinkQ+0xae>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <HAL_DMAEx_List_LinkQ+0xb0>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10b      	bne.n	8006f14 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e019      	b.n	8006f48 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f18:	2b81      	cmp	r3, #129	@ 0x81
 8006f1a:	d108      	bne.n	8006f2e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10d      	bne.n	8006f40 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2204      	movs	r2, #4
 8006f28:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e00c      	b.n	8006f48 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d004      	beq.n	8006f40 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e003      	b.n	8006f48 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40020650 	.word	0x40020650
 8006f58:	50020650 	.word	0x50020650
 8006f5c:	400206d0 	.word	0x400206d0
 8006f60:	500206d0 	.word	0x500206d0
 8006f64:	40020750 	.word	0x40020750
 8006f68:	50020750 	.word	0x50020750
 8006f6c:	400207d0 	.word	0x400207d0
 8006f70:	500207d0 	.word	0x500207d0

08006f74 <HAL_DMAEx_ConfigTrigger>:
  * @param  pConfigTrigger : Pointer to a DMA_TriggerConfTypeDef structure that contains the trigger configuration.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigTrigger(DMA_HandleTypeDef *const hdma,
                                          DMA_TriggerConfTypeDef const *const pConfigTrigger)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  /* Check the DMA peripheral handle and trigger parameters */
  if ((hdma == NULL) || (pConfigTrigger == NULL))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <HAL_DMAEx_ConfigTrigger+0x16>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_DMAEx_ConfigTrigger+0x1a>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e023      	b.n	8006fd6 <HAL_DMAEx_ConfigTrigger+0x62>
  assert_param(IS_DMA_TRIGGER_POLARITY(pConfigTrigger->TriggerPolarity));
  assert_param(IS_DMA_TRIGGER_MODE(pConfigTrigger->TriggerMode));
  assert_param(IS_DMA_TRIGGER_SELECTION(pConfigTrigger->TriggerSelection));

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d115      	bne.n	8006fc6 <HAL_DMAEx_ConfigTrigger+0x52>
  {
    MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM),
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa0:	f023 735f 	bic.w	r3, r3, #58458112	@ 0x37c0000
 8006fa4:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	6851      	ldr	r1, [r2, #4]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	4311      	orrs	r1, r2
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	6892      	ldr	r2, [r2, #8]
 8006fb6:	0412      	lsls	r2, r2, #16
 8006fb8:	4311      	orrs	r1, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	6453      	str	r3, [r2, #68]	@ 0x44
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e007      	b.n	8006fd6 <HAL_DMAEx_ConfigTrigger+0x62>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2240      	movs	r2, #64	@ 0x40
 8006fca:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	b2db      	uxtb	r3, r3
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a85      	ldr	r2, [pc, #532]	@ (8007230 <DMA_List_Init+0x230>)
 800701a:	4293      	cmp	r3, r2
 800701c:	f000 80a0 	beq.w	8007160 <DMA_List_Init+0x160>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a83      	ldr	r2, [pc, #524]	@ (8007234 <DMA_List_Init+0x234>)
 8007026:	4293      	cmp	r3, r2
 8007028:	f000 809a 	beq.w	8007160 <DMA_List_Init+0x160>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a81      	ldr	r2, [pc, #516]	@ (8007238 <DMA_List_Init+0x238>)
 8007032:	4293      	cmp	r3, r2
 8007034:	f000 8094 	beq.w	8007160 <DMA_List_Init+0x160>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a7f      	ldr	r2, [pc, #508]	@ (800723c <DMA_List_Init+0x23c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	f000 808e 	beq.w	8007160 <DMA_List_Init+0x160>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a7d      	ldr	r2, [pc, #500]	@ (8007240 <DMA_List_Init+0x240>)
 800704a:	4293      	cmp	r3, r2
 800704c:	f000 8088 	beq.w	8007160 <DMA_List_Init+0x160>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a7b      	ldr	r2, [pc, #492]	@ (8007244 <DMA_List_Init+0x244>)
 8007056:	4293      	cmp	r3, r2
 8007058:	f000 8082 	beq.w	8007160 <DMA_List_Init+0x160>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a79      	ldr	r2, [pc, #484]	@ (8007248 <DMA_List_Init+0x248>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d07c      	beq.n	8007160 <DMA_List_Init+0x160>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a78      	ldr	r2, [pc, #480]	@ (800724c <DMA_List_Init+0x24c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d077      	beq.n	8007160 <DMA_List_Init+0x160>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a76      	ldr	r2, [pc, #472]	@ (8007250 <DMA_List_Init+0x250>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d072      	beq.n	8007160 <DMA_List_Init+0x160>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a75      	ldr	r2, [pc, #468]	@ (8007254 <DMA_List_Init+0x254>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d06d      	beq.n	8007160 <DMA_List_Init+0x160>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a73      	ldr	r2, [pc, #460]	@ (8007258 <DMA_List_Init+0x258>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d068      	beq.n	8007160 <DMA_List_Init+0x160>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a72      	ldr	r2, [pc, #456]	@ (800725c <DMA_List_Init+0x25c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d063      	beq.n	8007160 <DMA_List_Init+0x160>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a70      	ldr	r2, [pc, #448]	@ (8007260 <DMA_List_Init+0x260>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d05e      	beq.n	8007160 <DMA_List_Init+0x160>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a6f      	ldr	r2, [pc, #444]	@ (8007264 <DMA_List_Init+0x264>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d059      	beq.n	8007160 <DMA_List_Init+0x160>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a6d      	ldr	r2, [pc, #436]	@ (8007268 <DMA_List_Init+0x268>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d054      	beq.n	8007160 <DMA_List_Init+0x160>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a6c      	ldr	r2, [pc, #432]	@ (800726c <DMA_List_Init+0x26c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d04f      	beq.n	8007160 <DMA_List_Init+0x160>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a6a      	ldr	r2, [pc, #424]	@ (8007270 <DMA_List_Init+0x270>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d04a      	beq.n	8007160 <DMA_List_Init+0x160>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a69      	ldr	r2, [pc, #420]	@ (8007274 <DMA_List_Init+0x274>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d045      	beq.n	8007160 <DMA_List_Init+0x160>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a67      	ldr	r2, [pc, #412]	@ (8007278 <DMA_List_Init+0x278>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d040      	beq.n	8007160 <DMA_List_Init+0x160>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a66      	ldr	r2, [pc, #408]	@ (800727c <DMA_List_Init+0x27c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d03b      	beq.n	8007160 <DMA_List_Init+0x160>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a64      	ldr	r2, [pc, #400]	@ (8007280 <DMA_List_Init+0x280>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d036      	beq.n	8007160 <DMA_List_Init+0x160>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a63      	ldr	r2, [pc, #396]	@ (8007284 <DMA_List_Init+0x284>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d031      	beq.n	8007160 <DMA_List_Init+0x160>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a61      	ldr	r2, [pc, #388]	@ (8007288 <DMA_List_Init+0x288>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d02c      	beq.n	8007160 <DMA_List_Init+0x160>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a60      	ldr	r2, [pc, #384]	@ (800728c <DMA_List_Init+0x28c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d027      	beq.n	8007160 <DMA_List_Init+0x160>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a5e      	ldr	r2, [pc, #376]	@ (8007290 <DMA_List_Init+0x290>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <DMA_List_Init+0x160>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a5d      	ldr	r2, [pc, #372]	@ (8007294 <DMA_List_Init+0x294>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d01d      	beq.n	8007160 <DMA_List_Init+0x160>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a5b      	ldr	r2, [pc, #364]	@ (8007298 <DMA_List_Init+0x298>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <DMA_List_Init+0x160>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a5a      	ldr	r2, [pc, #360]	@ (800729c <DMA_List_Init+0x29c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <DMA_List_Init+0x160>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a58      	ldr	r2, [pc, #352]	@ (80072a0 <DMA_List_Init+0x2a0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <DMA_List_Init+0x160>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a57      	ldr	r2, [pc, #348]	@ (80072a4 <DMA_List_Init+0x2a4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <DMA_List_Init+0x160>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a55      	ldr	r2, [pc, #340]	@ (80072a8 <DMA_List_Init+0x2a8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <DMA_List_Init+0x160>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a54      	ldr	r2, [pc, #336]	@ (80072ac <DMA_List_Init+0x2ac>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <DMA_List_Init+0x164>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <DMA_List_Init+0x166>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	430a      	orrs	r2, r1
 8007186:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007198:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2200      	movs	r2, #0
 80071a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2200      	movs	r2, #0
 80071a8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2200      	movs	r2, #0
 80071b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a36      	ldr	r2, [pc, #216]	@ (8007290 <DMA_List_Init+0x290>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d022      	beq.n	8007202 <DMA_List_Init+0x202>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a34      	ldr	r2, [pc, #208]	@ (8007294 <DMA_List_Init+0x294>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d01d      	beq.n	8007202 <DMA_List_Init+0x202>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a33      	ldr	r2, [pc, #204]	@ (8007298 <DMA_List_Init+0x298>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d018      	beq.n	8007202 <DMA_List_Init+0x202>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a31      	ldr	r2, [pc, #196]	@ (800729c <DMA_List_Init+0x29c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <DMA_List_Init+0x202>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a30      	ldr	r2, [pc, #192]	@ (80072a0 <DMA_List_Init+0x2a0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00e      	beq.n	8007202 <DMA_List_Init+0x202>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2e      	ldr	r2, [pc, #184]	@ (80072a4 <DMA_List_Init+0x2a4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <DMA_List_Init+0x202>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2d      	ldr	r2, [pc, #180]	@ (80072a8 <DMA_List_Init+0x2a8>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <DMA_List_Init+0x202>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2b      	ldr	r2, [pc, #172]	@ (80072ac <DMA_List_Init+0x2ac>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d101      	bne.n	8007206 <DMA_List_Init+0x206>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <DMA_List_Init+0x208>
 8007206:	2300      	movs	r3, #0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2200      	movs	r2, #0
 8007212:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2200      	movs	r2, #0
 800721a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2200      	movs	r2, #0
 8007222:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	40020050 	.word	0x40020050
 8007234:	50020050 	.word	0x50020050
 8007238:	400200d0 	.word	0x400200d0
 800723c:	500200d0 	.word	0x500200d0
 8007240:	40020150 	.word	0x40020150
 8007244:	50020150 	.word	0x50020150
 8007248:	400201d0 	.word	0x400201d0
 800724c:	500201d0 	.word	0x500201d0
 8007250:	40020250 	.word	0x40020250
 8007254:	50020250 	.word	0x50020250
 8007258:	400202d0 	.word	0x400202d0
 800725c:	500202d0 	.word	0x500202d0
 8007260:	40020350 	.word	0x40020350
 8007264:	50020350 	.word	0x50020350
 8007268:	400203d0 	.word	0x400203d0
 800726c:	500203d0 	.word	0x500203d0
 8007270:	40020450 	.word	0x40020450
 8007274:	50020450 	.word	0x50020450
 8007278:	400204d0 	.word	0x400204d0
 800727c:	500204d0 	.word	0x500204d0
 8007280:	40020550 	.word	0x40020550
 8007284:	50020550 	.word	0x50020550
 8007288:	400205d0 	.word	0x400205d0
 800728c:	500205d0 	.word	0x500205d0
 8007290:	40020650 	.word	0x40020650
 8007294:	50020650 	.word	0x50020650
 8007298:	400206d0 	.word	0x400206d0
 800729c:	500206d0 	.word	0x500206d0
 80072a0:	40020750 	.word	0x40020750
 80072a4:	50020750 	.word	0x50020750
 80072a8:	400207d0 	.word	0x400207d0
 80072ac:	500207d0 	.word	0x500207d0

080072b0 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80072c2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80072c8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80072ce:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80072d4:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d017      	beq.n	8007316 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f2:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f8:	3b01      	subs	r3, #1
 80072fa:	051b      	lsls	r3, r3, #20
 80072fc:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007300:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007306:	3b01      	subs	r3, #1
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800730e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007310:	431a      	orrs	r2, r3
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6859      	ldr	r1, [r3, #4]
 800731e:	f240 237f 	movw	r3, #639	@ 0x27f
 8007322:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007324:	431a      	orrs	r2, r3
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007332:	d10c      	bne.n	800734e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d011      	beq.n	8007364 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	605a      	str	r2, [r3, #4]
 800734c:	e00a      	b.n	8007364 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007356:	d105      	bne.n	8007364 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00f      	beq.n	800738c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007378:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800737e:	041b      	lsls	r3, r3, #16
 8007380:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007384:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007386:	431a      	orrs	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007390:	b29a      	uxth	r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d04e      	beq.n	8007440 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073aa:	3b01      	subs	r3, #1
 80073ac:	0419      	lsls	r1, r3, #16
 80073ae:	4b67      	ldr	r3, [pc, #412]	@ (800754c <DMA_List_BuildNode+0x29c>)
 80073b0:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80073b2:	431a      	orrs	r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073bc:	2b00      	cmp	r3, #0
 80073be:	da06      	bge.n	80073ce <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	609a      	str	r2, [r3, #8]
 80073cc:	e005      	b.n	80073da <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073de:	2b00      	cmp	r3, #0
 80073e0:	da06      	bge.n	80073f0 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	609a      	str	r2, [r3, #8]
 80073ee:	e005      	b.n	80073fc <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007400:	2b00      	cmp	r3, #0
 8007402:	da06      	bge.n	8007412 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	609a      	str	r2, [r3, #8]
 8007410:	e005      	b.n	800741e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007422:	2b00      	cmp	r3, #0
 8007424:	da06      	bge.n	8007434 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	609a      	str	r2, [r3, #8]
 8007432:	e005      	b.n	8007440 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d059      	beq.n	8007510 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007460:	2b00      	cmp	r3, #0
 8007462:	da09      	bge.n	8007478 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007468:	425b      	negs	r3, r3
 800746a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	615a      	str	r2, [r3, #20]
 8007476:	e005      	b.n	8007484 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800747c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007488:	2b00      	cmp	r3, #0
 800748a:	da0d      	bge.n	80074a8 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007490:	425b      	negs	r3, r3
 8007492:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	695a      	ldr	r2, [r3, #20]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	0419      	lsls	r1, r3, #16
 800749c:	4b2c      	ldr	r3, [pc, #176]	@ (8007550 <DMA_List_BuildNode+0x2a0>)
 800749e:	400b      	ands	r3, r1
 80074a0:	431a      	orrs	r2, r3
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	615a      	str	r2, [r3, #20]
 80074a6:	e009      	b.n	80074bc <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b0:	0419      	lsls	r1, r3, #16
 80074b2:	4b27      	ldr	r3, [pc, #156]	@ (8007550 <DMA_List_BuildNode+0x2a0>)
 80074b4:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80074b6:	431a      	orrs	r2, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da08      	bge.n	80074d6 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c8:	425b      	negs	r3, r3
 80074ca:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	619a      	str	r2, [r3, #24]
 80074d4:	e004      	b.n	80074e0 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074da:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	da0b      	bge.n	8007500 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ec:	425b      	negs	r3, r3
 80074ee:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80074f8:	431a      	orrs	r2, r3
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	619a      	str	r2, [r3, #24]
 80074fe:	e007      	b.n	8007510 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007508:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800750a:	431a      	orrs	r2, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d006      	beq.n	8007532 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007530:	e005      	b.n	800753e <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	07ff0000 	.word	0x07ff0000
 8007550:	1fff0000 	.word	0x1fff0000

08007554 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	b2da      	uxtb	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0208 	and.w	r2, r3, #8
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0203 	and.w	r2, r3, #3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 800759c:	091b      	lsrs	r3, r3, #4
 800759e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075a2:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80075ac:	0d1b      	lsrs	r3, r3, #20
 80075ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075b2:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	4b66      	ldr	r3, [pc, #408]	@ (8007764 <DMA_List_GetNodeConfig+0x210>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075ee:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075f6:	60da      	str	r2, [r3, #12]
 80075f8:	e013      	b.n	8007622 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	e002      	b.n	8007622 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800764a:	0c1b      	lsrs	r3, r3, #16
 800764c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	b29a      	uxth	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d008      	beq.n	8007688 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	0c1b      	lsrs	r3, r3, #16
 800767c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007680:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007686:	e002      	b.n	800768e <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d04a      	beq.n	8007740 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076b4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80076b6:	89fa      	ldrh	r2, [r7, #14]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	0c1b      	lsrs	r3, r3, #16
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076c8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80076ca:	89fa      	ldrh	r2, [r7, #14]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076e0:	425a      	negs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d004      	beq.n	80076fc <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f6:	425a      	negs	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007702:	89fa      	ldrh	r2, [r7, #14]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	0c1b      	lsrs	r3, r3, #16
 800770e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007710:	89fa      	ldrh	r2, [r7, #14]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007726:	425a      	negs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	da11      	bge.n	8007758 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007738:	425a      	negs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800773e:	e00b      	b.n	8007758 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	0c002000 	.word	0x0c002000

08007768 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4313      	orrs	r3, r2
 800777e:	0c1b      	lsrs	r3, r3, #16
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	e00a      	b.n	80077aa <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	e004      	b.n	80077aa <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	0c1b      	lsrs	r3, r3, #16
 80077ae:	041b      	lsls	r3, r3, #16
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d001      	beq.n	80077ba <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	e00e      	b.n	8007806 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d004      	beq.n	80077f8 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	e006      	b.n	8007806 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d007      	beq.n	800781c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	b2db      	uxtb	r3, r3
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	429a      	cmp	r2, r3
 8007816:	d001      	beq.n	800781c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007818:	2302      	movs	r3, #2
 800781a:	e00b      	b.n	8007834 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	429a      	cmp	r2, r3
 800782c:	d001      	beq.n	8007832 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800782e:	2303      	movs	r3, #3
 8007830:	e000      	b.n	8007834 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00c      	beq.n	8007872 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	4a0d      	ldr	r2, [pc, #52]	@ (8007898 <DMA_List_GetCLLRNodeInfo+0x58>)
 8007862:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00f      	beq.n	800788a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2207      	movs	r2, #7
 800786e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007870:	e00b      	b.n	800788a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4a08      	ldr	r2, [pc, #32]	@ (800789c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800787c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2205      	movs	r2, #5
 8007888:	601a      	str	r2, [r3, #0]
}
 800788a:	bf00      	nop
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	fe010000 	.word	0xfe010000
 800789c:	f8010000 	.word	0xf8010000

080078a0 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b089      	sub	sp, #36	@ 0x24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d142      	bne.n	800794a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80078c4:	e01d      	b.n	8007902 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d107      	bne.n	80078dc <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80078d6:	4013      	ands	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	e00f      	b.n	80078fc <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	0c1b      	lsrs	r3, r3, #16
 80078e6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	4413      	add	r3, r2
 80078ec:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80078f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80078f8:	4013      	ands	r3, r2
 80078fa:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	3301      	adds	r3, #1
 8007900:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	429a      	cmp	r2, r3
 800790a:	d3dc      	bcc.n	80078c6 <DMA_List_FindNode+0x26>
 800790c:	e029      	b.n	8007962 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d107      	bne.n	8007924 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800791e:	4013      	ands	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	e00f      	b.n	8007944 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	0c1b      	lsrs	r3, r3, #16
 800792e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	4413      	add	r3, r2
 8007934:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800793c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007940:	4013      	ands	r3, r2
 8007942:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	3301      	adds	r3, #1
 8007948:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	69fa      	ldr	r2, [r7, #28]
 8007950:	429a      	cmp	r2, r3
 8007952:	d206      	bcs.n	8007962 <DMA_List_FindNode+0xc2>
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800795a:	4013      	ands	r3, r2
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	429a      	cmp	r2, r3
 8007960:	d1d5      	bne.n	800790e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d008      	beq.n	800797a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800796e:	4013      	ands	r3, r2
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	429a      	cmp	r2, r3
 8007974:	d001      	beq.n	800797a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8007976:	2301      	movs	r3, #1
 8007978:	e02b      	b.n	80079d2 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	0c1b      	lsrs	r3, r3, #16
 8007986:	041b      	lsls	r3, r3, #16
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	041b      	lsls	r3, r3, #16
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	461a      	mov	r2, r3
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00f      	beq.n	80079d0 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	461a      	mov	r2, r3
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079bc:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80079c0:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	0c1b      	lsrs	r3, r3, #16
 80079c8:	041b      	lsls	r3, r3, #16
 80079ca:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3724      	adds	r7, #36	@ 0x24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
	...

080079e0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b089      	sub	sp, #36	@ 0x24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80079f2:	e1ba      	b.n	8007d6a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	2101      	movs	r1, #1
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007a00:	4013      	ands	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 81aa 	beq.w	8007d64 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a55      	ldr	r2, [pc, #340]	@ (8007b68 <HAL_GPIO_Init+0x188>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d15d      	bne.n	8007ad4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007a1e:	2201      	movs	r2, #1
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	43db      	mvns	r3, r3
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f003 0201 	and.w	r2, r3, #1
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007a48:	4a48      	ldr	r2, [pc, #288]	@ (8007b6c <HAL_GPIO_Init+0x18c>)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a50:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007a52:	4a46      	ldr	r2, [pc, #280]	@ (8007b6c <HAL_GPIO_Init+0x18c>)
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	4413      	add	r3, r2
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	08da      	lsrs	r2, r3, #3
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	3208      	adds	r2, #8
 8007a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	220f      	movs	r2, #15
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	220b      	movs	r2, #11
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	69fa      	ldr	r2, [r7, #28]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	08da      	lsrs	r2, r3, #3
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	3208      	adds	r2, #8
 8007a9e:	69f9      	ldr	r1, [r7, #28]
 8007aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	2203      	movs	r2, #3
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	43db      	mvns	r3, r3
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	4013      	ands	r3, r2
 8007aba:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	e067      	b.n	8007ba4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d003      	beq.n	8007ae4 <HAL_GPIO_Init+0x104>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b12      	cmp	r3, #18
 8007ae2:	d145      	bne.n	8007b70 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	08da      	lsrs	r2, r3, #3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3208      	adds	r2, #8
 8007aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	220f      	movs	r2, #15
 8007afc:	fa02 f303 	lsl.w	r3, r2, r3
 8007b00:	43db      	mvns	r3, r3
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	4013      	ands	r3, r2
 8007b06:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 020f 	and.w	r2, r3, #15
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	08da      	lsrs	r2, r3, #3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3208      	adds	r2, #8
 8007b2a:	69f9      	ldr	r1, [r7, #28]
 8007b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	43db      	mvns	r3, r3
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	4013      	ands	r3, r2
 8007b46:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f003 0203 	and.w	r2, r3, #3
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	fa02 f303 	lsl.w	r3, r2, r3
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e01e      	b.n	8007ba4 <HAL_GPIO_Init+0x1c4>
 8007b66:	bf00      	nop
 8007b68:	46020000 	.word	0x46020000
 8007b6c:	080115c8 	.word	0x080115c8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	2203      	movs	r2, #3
 8007b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b80:	43db      	mvns	r3, r3
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	4013      	ands	r3, r2
 8007b86:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f003 0203 	and.w	r2, r3, #3
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	fa02 f303 	lsl.w	r3, r2, r3
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d00b      	beq.n	8007bc4 <HAL_GPIO_Init+0x1e4>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d007      	beq.n	8007bc4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007bb8:	2b11      	cmp	r3, #17
 8007bba:	d003      	beq.n	8007bc4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b12      	cmp	r3, #18
 8007bc2:	d130      	bne.n	8007c26 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	2203      	movs	r2, #3
 8007bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	fa02 f303 	lsl.w	r3, r2, r3
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	43db      	mvns	r3, r3
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	4013      	ands	r3, r2
 8007c08:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	091b      	lsrs	r3, r3, #4
 8007c10:	f003 0201 	and.w	r2, r3, #1
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d017      	beq.n	8007c5e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	2203      	movs	r2, #3
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	4013      	ands	r3, r2
 8007c44:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d07c      	beq.n	8007d64 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007c6a:	4a47      	ldr	r2, [pc, #284]	@ (8007d88 <HAL_GPIO_Init+0x3a8>)
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	089b      	lsrs	r3, r3, #2
 8007c70:	3318      	adds	r3, #24
 8007c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c76:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	220f      	movs	r2, #15
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	43db      	mvns	r3, r3
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	0a9a      	lsrs	r2, r3, #10
 8007c92:	4b3e      	ldr	r3, [pc, #248]	@ (8007d8c <HAL_GPIO_Init+0x3ac>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	f002 0203 	and.w	r2, r2, #3
 8007c9c:	00d2      	lsls	r2, r2, #3
 8007c9e:	4093      	lsls	r3, r2
 8007ca0:	69fa      	ldr	r2, [r7, #28]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007ca6:	4938      	ldr	r1, [pc, #224]	@ (8007d88 <HAL_GPIO_Init+0x3a8>)
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	089b      	lsrs	r3, r3, #2
 8007cac:	3318      	adds	r3, #24
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007cb4:	4b34      	ldr	r3, [pc, #208]	@ (8007d88 <HAL_GPIO_Init+0x3a8>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8007d88 <HAL_GPIO_Init+0x3a8>)
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007cde:	4b2a      	ldr	r3, [pc, #168]	@ (8007d88 <HAL_GPIO_Init+0x3a8>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	4013      	ands	r3, r2
 8007cec:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007d02:	4a21      	ldr	r2, [pc, #132]	@ (8007d88 <HAL_GPIO_Init+0x3a8>)
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007d08:	4b1f      	ldr	r3, [pc, #124]	@ (8007d88 <HAL_GPIO_Init+0x3a8>)
 8007d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	43db      	mvns	r3, r3
 8007d14:	69fa      	ldr	r2, [r7, #28]
 8007d16:	4013      	ands	r3, r2
 8007d18:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007d26:	69fa      	ldr	r2, [r7, #28]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007d2e:	4a16      	ldr	r2, [pc, #88]	@ (8007d88 <HAL_GPIO_Init+0x3a8>)
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8007d36:	4b14      	ldr	r3, [pc, #80]	@ (8007d88 <HAL_GPIO_Init+0x3a8>)
 8007d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	69fa      	ldr	r2, [r7, #28]
 8007d44:	4013      	ands	r3, r2
 8007d46:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007d54:	69fa      	ldr	r2, [r7, #28]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d88 <HAL_GPIO_Init+0x3a8>)
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	3301      	adds	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	fa22 f303 	lsr.w	r3, r2, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f47f ae3d 	bne.w	80079f4 <HAL_GPIO_Init+0x14>
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	3724      	adds	r7, #36	@ 0x24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	46022000 	.word	0x46022000
 8007d8c:	002f7f7f 	.word	0x002f7f7f

08007d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	807b      	strh	r3, [r7, #2]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007da0:	787b      	ldrb	r3, [r7, #1]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007da6:	887a      	ldrh	r2, [r7, #2]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007dac:	e002      	b.n	8007db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007dae:	887a      	ldrh	r2, [r7, #2]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007dd2:	887a      	ldrh	r2, [r7, #2]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	041a      	lsls	r2, r3, #16
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	43d9      	mvns	r1, r3
 8007dde:	887b      	ldrh	r3, [r7, #2]
 8007de0:	400b      	ands	r3, r1
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	619a      	str	r2, [r3, #24]
}
 8007de8:	bf00      	nop
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8007e3c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	4013      	ands	r3, r2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d006      	beq.n	8007e18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8007e3c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007e10:	88fb      	ldrh	r3, [r7, #6]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f814 	bl	8007e40 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007e18:	4b08      	ldr	r3, [pc, #32]	@ (8007e3c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	88fb      	ldrh	r3, [r7, #6]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d006      	beq.n	8007e32 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007e24:	4a05      	ldr	r2, [pc, #20]	@ (8007e3c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007e26:	88fb      	ldrh	r3, [r7, #6]
 8007e28:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007e2a:	88fb      	ldrh	r3, [r7, #6]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 f812 	bl	8007e56 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	46022000 	.word	0x46022000

08007e40 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e08d      	b.n	8007f9a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7fa f9ba 	bl	800220c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2224      	movs	r2, #36	@ 0x24
 8007e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0201 	bic.w	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007ebc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ecc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d107      	bne.n	8007ee6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689a      	ldr	r2, [r3, #8]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ee2:	609a      	str	r2, [r3, #8]
 8007ee4:	e006      	b.n	8007ef4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007ef2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d108      	bne.n	8007f0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f0a:	605a      	str	r2, [r3, #4]
 8007f0c:	e007      	b.n	8007f1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6812      	ldr	r2, [r2, #0]
 8007f28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691a      	ldr	r2, [r3, #16]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	69d9      	ldr	r1, [r3, #28]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a1a      	ldr	r2, [r3, #32]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	68f9      	ldr	r1, [r7, #12]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
  }
}
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b086      	sub	sp, #24
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00f      	beq.n	8008018 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008006:	f043 0201 	orr.w	r2, r3, #1
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008016:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00f      	beq.n	8008042 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00a      	beq.n	8008042 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008030:	f043 0208 	orr.w	r2, r3, #8
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008040:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00f      	beq.n	800806c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800805a:	f043 0202 	orr.w	r2, r3, #2
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800806a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008070:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f003 030b 	and.w	r3, r3, #11
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800807c:	68f9      	ldr	r1, [r7, #12]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fbe8 	bl	8008854 <I2C_ITError>
  }
}
 8008084:	bf00      	nop
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
 80080c0:	4613      	mov	r3, r2
 80080c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <I2C_Slave_ISR_IT+0x24>
 800812c:	2302      	movs	r3, #2
 800812e:	e0e2      	b.n	80082f6 <I2C_Slave_ISR_IT+0x1ea>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008148:	2b00      	cmp	r3, #0
 800814a:	d004      	beq.n	8008156 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800814c:	6939      	ldr	r1, [r7, #16]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 f9b6 	bl	80084c0 <I2C_ITSlaveCplt>
 8008154:	e0ca      	b.n	80082ec <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	2b00      	cmp	r3, #0
 800815e:	d04b      	beq.n	80081f8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008166:	2b00      	cmp	r3, #0
 8008168:	d046      	beq.n	80081f8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800816e:	b29b      	uxth	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d128      	bne.n	80081c6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b28      	cmp	r3, #40	@ 0x28
 800817e:	d108      	bne.n	8008192 <I2C_Slave_ISR_IT+0x86>
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008186:	d104      	bne.n	8008192 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008188:	6939      	ldr	r1, [r7, #16]
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 fb0e 	bl	80087ac <I2C_ITListenCplt>
 8008190:	e031      	b.n	80081f6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b29      	cmp	r3, #41	@ 0x29
 800819c:	d10e      	bne.n	80081bc <I2C_Slave_ISR_IT+0xb0>
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80081a4:	d00a      	beq.n	80081bc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2210      	movs	r2, #16
 80081ac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 fc67 	bl	8008a82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 f926 	bl	8008406 <I2C_ITSlaveSeqCplt>
 80081ba:	e01c      	b.n	80081f6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2210      	movs	r2, #16
 80081c2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80081c4:	e08f      	b.n	80082e6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2210      	movs	r2, #16
 80081cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d2:	f043 0204 	orr.w	r2, r3, #4
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <I2C_Slave_ISR_IT+0xdc>
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081e6:	d17e      	bne.n	80082e6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ec:	4619      	mov	r1, r3
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 fb30 	bl	8008854 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80081f4:	e077      	b.n	80082e6 <I2C_Slave_ISR_IT+0x1da>
 80081f6:	e076      	b.n	80082e6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d02f      	beq.n	8008262 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008208:	2b00      	cmp	r3, #0
 800820a:	d02a      	beq.n	8008262 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d018      	beq.n	8008248 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008220:	b2d2      	uxtb	r2, r2
 8008222:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800823e:	b29b      	uxth	r3, r3
 8008240:	3b01      	subs	r3, #1
 8008242:	b29a      	uxth	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800824c:	b29b      	uxth	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d14b      	bne.n	80082ea <I2C_Slave_ISR_IT+0x1de>
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008258:	d047      	beq.n	80082ea <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f8d3 	bl	8008406 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008260:	e043      	b.n	80082ea <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f003 0308 	and.w	r3, r3, #8
 8008268:	2b00      	cmp	r3, #0
 800826a:	d009      	beq.n	8008280 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008276:	6939      	ldr	r1, [r7, #16]
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 f840 	bl	80082fe <I2C_ITAddrCplt>
 800827e:	e035      	b.n	80082ec <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d030      	beq.n	80082ec <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008290:	2b00      	cmp	r3, #0
 8008292:	d02b      	beq.n	80082ec <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d018      	beq.n	80082d0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a2:	781a      	ldrb	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b29a      	uxth	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80082ce:	e00d      	b.n	80082ec <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082d6:	d002      	beq.n	80082de <I2C_Slave_ISR_IT+0x1d2>
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 f891 	bl	8008406 <I2C_ITSlaveSeqCplt>
 80082e4:	e002      	b.n	80082ec <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80082e6:	bf00      	nop
 80082e8:	e000      	b.n	80082ec <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80082ea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800830e:	b2db      	uxtb	r3, r3
 8008310:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008314:	2b28      	cmp	r3, #40	@ 0x28
 8008316:	d16a      	bne.n	80083ee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	0c1b      	lsrs	r3, r3, #16
 8008320:	b2db      	uxtb	r3, r3
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	0c1b      	lsrs	r3, r3, #16
 8008330:	b29b      	uxth	r3, r3
 8008332:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008336:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	b29b      	uxth	r3, r3
 8008340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008344:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008352:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d138      	bne.n	80083ce <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800835c:	897b      	ldrh	r3, [r7, #10]
 800835e:	09db      	lsrs	r3, r3, #7
 8008360:	b29a      	uxth	r2, r3
 8008362:	89bb      	ldrh	r3, [r7, #12]
 8008364:	4053      	eors	r3, r2
 8008366:	b29b      	uxth	r3, r3
 8008368:	f003 0306 	and.w	r3, r3, #6
 800836c:	2b00      	cmp	r3, #0
 800836e:	d11c      	bne.n	80083aa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008370:	897b      	ldrh	r3, [r7, #10]
 8008372:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008382:	2b02      	cmp	r3, #2
 8008384:	d13b      	bne.n	80083fe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2208      	movs	r2, #8
 8008392:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800839c:	89ba      	ldrh	r2, [r7, #12]
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fe86 	bl	80080b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80083a8:	e029      	b.n	80083fe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80083aa:	893b      	ldrh	r3, [r7, #8]
 80083ac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80083ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fba7 	bl	8008b06 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80083c0:	89ba      	ldrh	r2, [r7, #12]
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff fe74 	bl	80080b4 <HAL_I2C_AddrCallback>
}
 80083cc:	e017      	b.n	80083fe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80083ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fb97 	bl	8008b06 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80083e0:	89ba      	ldrh	r2, [r7, #12]
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff fe64 	bl	80080b4 <HAL_I2C_AddrCallback>
}
 80083ec:	e007      	b.n	80083fe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2208      	movs	r2, #8
 80083f4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d008      	beq.n	800843a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	e00c      	b.n	8008454 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d007      	beq.n	8008454 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008452:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b29      	cmp	r3, #41	@ 0x29
 800845e:	d112      	bne.n	8008486 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2228      	movs	r2, #40	@ 0x28
 8008464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2221      	movs	r2, #33	@ 0x21
 800846c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800846e:	2101      	movs	r1, #1
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fb48 	bl	8008b06 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fe04 	bl	800808c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008484:	e017      	b.n	80084b6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008490:	d111      	bne.n	80084b6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2228      	movs	r2, #40	@ 0x28
 8008496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2222      	movs	r2, #34	@ 0x22
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80084a0:	2102      	movs	r1, #2
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fb2f 	bl	8008b06 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fdf5 	bl	80080a0 <HAL_I2C_SlaveRxCpltCallback>
}
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80084c0:	b590      	push	{r4, r7, lr}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084da:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084e2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2220      	movs	r2, #32
 80084ea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	2b21      	cmp	r3, #33	@ 0x21
 80084f0:	d002      	beq.n	80084f8 <I2C_ITSlaveCplt+0x38>
 80084f2:	7afb      	ldrb	r3, [r7, #11]
 80084f4:	2b29      	cmp	r3, #41	@ 0x29
 80084f6:	d108      	bne.n	800850a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80084f8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fb02 	bl	8008b06 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2221      	movs	r2, #33	@ 0x21
 8008506:	631a      	str	r2, [r3, #48]	@ 0x30
 8008508:	e019      	b.n	800853e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800850a:	7afb      	ldrb	r3, [r7, #11]
 800850c:	2b22      	cmp	r3, #34	@ 0x22
 800850e:	d002      	beq.n	8008516 <I2C_ITSlaveCplt+0x56>
 8008510:	7afb      	ldrb	r3, [r7, #11]
 8008512:	2b2a      	cmp	r3, #42	@ 0x2a
 8008514:	d108      	bne.n	8008528 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008516:	f248 0102 	movw	r1, #32770	@ 0x8002
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 faf3 	bl	8008b06 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2222      	movs	r2, #34	@ 0x22
 8008524:	631a      	str	r2, [r3, #48]	@ 0x30
 8008526:	e00a      	b.n	800853e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	2b28      	cmp	r3, #40	@ 0x28
 800852c:	d107      	bne.n	800853e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800852e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fae7 	bl	8008b06 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800854c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6859      	ldr	r1, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	4b92      	ldr	r3, [pc, #584]	@ (80087a4 <I2C_ITSlaveCplt+0x2e4>)
 800855a:	400b      	ands	r3, r1
 800855c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fa8f 	bl	8008a82 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d01c      	beq.n	80085a8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800857c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008582:	2b00      	cmp	r3, #0
 8008584:	d031      	beq.n	80085ea <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800858e:	b29c      	uxth	r4, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe fd24 	bl	8006fe2 <HAL_DMAEx_GetFifoLevel>
 800859a:	4603      	mov	r3, r0
 800859c:	b29b      	uxth	r3, r3
 800859e:	4423      	add	r3, r4
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80085a6:	e020      	b.n	80085ea <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01b      	beq.n	80085ea <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80085c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00f      	beq.n	80085ea <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085d2:	b29c      	uxth	r4, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fe fd02 	bl	8006fe2 <HAL_DMAEx_GetFifoLevel>
 80085de:	4603      	mov	r3, r0
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	4423      	add	r3, r4
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d020      	beq.n	8008636 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f023 0304 	bic.w	r3, r3, #4
 80085fa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00c      	beq.n	8008636 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008620:	3b01      	subs	r3, #1
 8008622:	b29a      	uxth	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008644:	f043 0204 	orr.w	r2, r3, #4
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f003 0310 	and.w	r3, r3, #16
 8008652:	2b00      	cmp	r3, #0
 8008654:	d049      	beq.n	80086ea <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800865c:	2b00      	cmp	r3, #0
 800865e:	d044      	beq.n	80086ea <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d128      	bne.n	80086bc <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b28      	cmp	r3, #40	@ 0x28
 8008674:	d108      	bne.n	8008688 <I2C_ITSlaveCplt+0x1c8>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800867c:	d104      	bne.n	8008688 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800867e:	6979      	ldr	r1, [r7, #20]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f893 	bl	80087ac <I2C_ITListenCplt>
 8008686:	e030      	b.n	80086ea <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b29      	cmp	r3, #41	@ 0x29
 8008692:	d10e      	bne.n	80086b2 <I2C_ITSlaveCplt+0x1f2>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800869a:	d00a      	beq.n	80086b2 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2210      	movs	r2, #16
 80086a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f9ec 	bl	8008a82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7ff feab 	bl	8008406 <I2C_ITSlaveSeqCplt>
 80086b0:	e01b      	b.n	80086ea <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2210      	movs	r2, #16
 80086b8:	61da      	str	r2, [r3, #28]
 80086ba:	e016      	b.n	80086ea <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2210      	movs	r2, #16
 80086c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c8:	f043 0204 	orr.w	r2, r3, #4
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <I2C_ITSlaveCplt+0x21e>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086dc:	d105      	bne.n	80086ea <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f8b5 	bl	8008854 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d010      	beq.n	8008722 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f8a4 	bl	8008854 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b28      	cmp	r3, #40	@ 0x28
 8008716:	d141      	bne.n	800879c <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008718:	6979      	ldr	r1, [r7, #20]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f846 	bl	80087ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008720:	e03c      	b.n	800879c <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008726:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800872a:	d014      	beq.n	8008756 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7ff fe6a 	bl	8008406 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <I2C_ITSlaveCplt+0x2e8>)
 8008736:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2220      	movs	r2, #32
 800873c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff fcbe 	bl	80080d0 <HAL_I2C_ListenCpltCallback>
}
 8008754:	e022      	b.n	800879c <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b22      	cmp	r3, #34	@ 0x22
 8008760:	d10e      	bne.n	8008780 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2220      	movs	r2, #32
 8008766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff fc91 	bl	80080a0 <HAL_I2C_SlaveRxCpltCallback>
}
 800877e:	e00d      	b.n	800879c <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2220      	movs	r2, #32
 8008784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff fc78 	bl	800808c <HAL_I2C_SlaveTxCpltCallback>
}
 800879c:	bf00      	nop
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd90      	pop	{r4, r7, pc}
 80087a4:	fe00e800 	.word	0xfe00e800
 80087a8:	ffff0000 	.word	0xffff0000

080087ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a25      	ldr	r2, [pc, #148]	@ (8008850 <I2C_ITListenCplt+0xa4>)
 80087ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d022      	beq.n	8008828 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d012      	beq.n	8008828 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008806:	3b01      	subs	r3, #1
 8008808:	b29a      	uxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008812:	b29b      	uxth	r3, r3
 8008814:	3b01      	subs	r3, #1
 8008816:	b29a      	uxth	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008820:	f043 0204 	orr.w	r2, r3, #4
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008828:	f248 0103 	movw	r1, #32771	@ 0x8003
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f96a 	bl	8008b06 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2210      	movs	r2, #16
 8008838:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fc44 	bl	80080d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	ffff0000 	.word	0xffff0000

08008854 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008864:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a6d      	ldr	r2, [pc, #436]	@ (8008a28 <I2C_ITError+0x1d4>)
 8008872:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2b28      	cmp	r3, #40	@ 0x28
 800888a:	d005      	beq.n	8008898 <I2C_ITError+0x44>
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	2b29      	cmp	r3, #41	@ 0x29
 8008890:	d002      	beq.n	8008898 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	2b2a      	cmp	r3, #42	@ 0x2a
 8008896:	d10b      	bne.n	80088b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008898:	2103      	movs	r1, #3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f933 	bl	8008b06 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2228      	movs	r2, #40	@ 0x28
 80088a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a60      	ldr	r2, [pc, #384]	@ (8008a2c <I2C_ITError+0x1d8>)
 80088ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80088ae:	e030      	b.n	8008912 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80088b0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f926 	bl	8008b06 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f8e1 	bl	8008a82 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b60      	cmp	r3, #96	@ 0x60
 80088ca:	d01f      	beq.n	800890c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2220      	movs	r2, #32
 80088d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d114      	bne.n	800890c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	f003 0310 	and.w	r3, r3, #16
 80088ec:	2b10      	cmp	r3, #16
 80088ee:	d109      	bne.n	8008904 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2210      	movs	r2, #16
 80088f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088fc:	f043 0204 	orr.w	r2, r3, #4
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2220      	movs	r2, #32
 800890a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008916:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891c:	2b00      	cmp	r3, #0
 800891e:	d039      	beq.n	8008994 <I2C_ITError+0x140>
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2b11      	cmp	r3, #17
 8008924:	d002      	beq.n	800892c <I2C_ITError+0xd8>
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b21      	cmp	r3, #33	@ 0x21
 800892a:	d133      	bne.n	8008994 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008936:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800893a:	d107      	bne.n	800894c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800894a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008950:	4618      	mov	r0, r3
 8008952:	f7fd fb63 	bl	800601c <HAL_DMA_GetState>
 8008956:	4603      	mov	r3, r0
 8008958:	2b01      	cmp	r3, #1
 800895a:	d017      	beq.n	800898c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008960:	4a33      	ldr	r2, [pc, #204]	@ (8008a30 <I2C_ITError+0x1dc>)
 8008962:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008970:	4618      	mov	r0, r3
 8008972:	f7fd f9c9 	bl	8005d08 <HAL_DMA_Abort_IT>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d04d      	beq.n	8008a18 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008986:	4610      	mov	r0, r2
 8008988:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800898a:	e045      	b.n	8008a18 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f851 	bl	8008a34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008992:	e041      	b.n	8008a18 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008998:	2b00      	cmp	r3, #0
 800899a:	d039      	beq.n	8008a10 <I2C_ITError+0x1bc>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2b12      	cmp	r3, #18
 80089a0:	d002      	beq.n	80089a8 <I2C_ITError+0x154>
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b22      	cmp	r3, #34	@ 0x22
 80089a6:	d133      	bne.n	8008a10 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089b6:	d107      	bne.n	80089c8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80089c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fd fb25 	bl	800601c <HAL_DMA_GetState>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d017      	beq.n	8008a08 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089dc:	4a14      	ldr	r2, [pc, #80]	@ (8008a30 <I2C_ITError+0x1dc>)
 80089de:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fd f98b 	bl	8005d08 <HAL_DMA_Abort_IT>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d011      	beq.n	8008a1c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a02:	4610      	mov	r0, r2
 8008a04:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a06:	e009      	b.n	8008a1c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f813 	bl	8008a34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a0e:	e005      	b.n	8008a1c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f80f 	bl	8008a34 <I2C_TreatErrorCallback>
  }
}
 8008a16:	e002      	b.n	8008a1e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a1c:	bf00      	nop
}
 8008a1e:	bf00      	nop
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	ffff0000 	.word	0xffff0000
 8008a2c:	0800810d 	.word	0x0800810d
 8008a30:	08008acb 	.word	0x08008acb

08008a34 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b60      	cmp	r3, #96	@ 0x60
 8008a46:	d10e      	bne.n	8008a66 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7ff fb4a 	bl	80080f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a64:	e009      	b.n	8008a7a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff fb35 	bl	80080e4 <HAL_I2C_ErrorCallback>
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d103      	bne.n	8008aa0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d007      	beq.n	8008abe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	699a      	ldr	r2, [r3, #24]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f042 0201 	orr.w	r2, r2, #1
 8008abc:	619a      	str	r2, [r3, #24]
  }
}
 8008abe:	bf00      	nop
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d003      	beq.n	8008af8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af4:	2200      	movs	r2, #0
 8008af6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff ff9b 	bl	8008a34 <I2C_TreatErrorCallback>
}
 8008afe:	bf00      	nop
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b085      	sub	sp, #20
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008b16:	887b      	ldrh	r3, [r7, #2]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00f      	beq.n	8008b40 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008b26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008b34:	2b28      	cmp	r3, #40	@ 0x28
 8008b36:	d003      	beq.n	8008b40 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008b3e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008b40:	887b      	ldrh	r3, [r7, #2]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00f      	beq.n	8008b6a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008b50:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008b5e:	2b28      	cmp	r3, #40	@ 0x28
 8008b60:	d003      	beq.n	8008b6a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008b68:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008b6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	da03      	bge.n	8008b7a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008b78:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008b7a:	887b      	ldrh	r3, [r7, #2]
 8008b7c:	2b10      	cmp	r3, #16
 8008b7e:	d103      	bne.n	8008b88 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008b86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008b88:	887b      	ldrh	r3, [r7, #2]
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	d103      	bne.n	8008b96 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f043 0320 	orr.w	r3, r3, #32
 8008b94:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008b96:	887b      	ldrh	r3, [r7, #2]
 8008b98:	2b40      	cmp	r3, #64	@ 0x40
 8008b9a:	d103      	bne.n	8008ba4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6819      	ldr	r1, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	43da      	mvns	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	400a      	ands	r2, r1
 8008bb4:	601a      	str	r2, [r3, #0]
}
 8008bb6:	bf00      	nop
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b20      	cmp	r3, #32
 8008bd6:	d138      	bne.n	8008c4a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d101      	bne.n	8008be6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008be2:	2302      	movs	r3, #2
 8008be4:	e032      	b.n	8008c4c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2224      	movs	r2, #36	@ 0x24
 8008bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 0201 	bic.w	r2, r2, #1
 8008c04:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c14:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6819      	ldr	r1, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f042 0201 	orr.w	r2, r2, #1
 8008c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	e000      	b.n	8008c4c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c4a:	2302      	movs	r3, #2
  }
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d139      	bne.n	8008ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e033      	b.n	8008ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2224      	movs	r2, #36	@ 0x24
 8008c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008caa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	021b      	lsls	r3, r3, #8
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f042 0201 	orr.w	r2, r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e000      	b.n	8008ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008ce2:	2302      	movs	r3, #2
  }
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8008d2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	73fb      	strb	r3, [r7, #15]
 8008d0c:	e007      	b.n	8008d1e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008d0e:	4b07      	ldr	r3, [pc, #28]	@ (8008d2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f023 0204 	bic.w	r2, r3, #4
 8008d16:	4905      	ldr	r1, [pc, #20]	@ (8008d2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	40030400 	.word	0x40030400

08008d30 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008d34:	4b05      	ldr	r3, [pc, #20]	@ (8008d4c <HAL_ICACHE_Enable+0x1c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a04      	ldr	r2, [pc, #16]	@ (8008d4c <HAL_ICACHE_Enable+0x1c>)
 8008d3a:	f043 0301 	orr.w	r3, r3, #1
 8008d3e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	40030400 	.word	0x40030400

08008d50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e0bf      	b.n	8008ee2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d106      	bne.n	8008d7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7f9 fb36 	bl	80023e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008d92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6999      	ldr	r1, [r3, #24]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008da8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6899      	ldr	r1, [r3, #8]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8008eec <HAL_LTDC_Init+0x19c>)
 8008dc4:	400b      	ands	r3, r1
 8008dc6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	041b      	lsls	r3, r3, #16
 8008dce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6899      	ldr	r1, [r3, #8]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68d9      	ldr	r1, [r3, #12]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	4b3e      	ldr	r3, [pc, #248]	@ (8008eec <HAL_LTDC_Init+0x19c>)
 8008df2:	400b      	ands	r3, r1
 8008df4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	041b      	lsls	r3, r3, #16
 8008dfc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68d9      	ldr	r1, [r3, #12]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1a      	ldr	r2, [r3, #32]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6919      	ldr	r1, [r3, #16]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	4b33      	ldr	r3, [pc, #204]	@ (8008eec <HAL_LTDC_Init+0x19c>)
 8008e20:	400b      	ands	r3, r1
 8008e22:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e28:	041b      	lsls	r3, r3, #16
 8008e2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6919      	ldr	r1, [r3, #16]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	431a      	orrs	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6959      	ldr	r1, [r3, #20]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	4b27      	ldr	r3, [pc, #156]	@ (8008eec <HAL_LTDC_Init+0x19c>)
 8008e4e:	400b      	ands	r3, r1
 8008e50:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e56:	041b      	lsls	r3, r3, #16
 8008e58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6959      	ldr	r1, [r3, #20]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	431a      	orrs	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e76:	021b      	lsls	r3, r3, #8
 8008e78:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008e80:	041b      	lsls	r3, r3, #16
 8008e82:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0206 	orr.w	r2, r2, #6
 8008ebe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699a      	ldr	r2, [r3, #24]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0201 	orr.w	r2, r2, #1
 8008ece:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	f000f800 	.word	0xf000f800

08008ef0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f06:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d023      	beq.n	8008f5a <HAL_LTDC_IRQHandler+0x6a>
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d01e      	beq.n	8008f5a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 0204 	bic.w	r2, r2, #4
 8008f2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2204      	movs	r2, #4
 8008f32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f3a:	f043 0201 	orr.w	r2, r3, #1
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2204      	movs	r2, #4
 8008f48:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f86f 	bl	8009038 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f003 0302 	and.w	r3, r3, #2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d023      	beq.n	8008fac <HAL_LTDC_IRQHandler+0xbc>
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01e      	beq.n	8008fac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0202 	bic.w	r2, r2, #2
 8008f7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2202      	movs	r2, #2
 8008f84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f8c:	f043 0202 	orr.w	r2, r3, #2
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2204      	movs	r2, #4
 8008f9a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f846 	bl	8009038 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d01b      	beq.n	8008fee <HAL_LTDC_IRQHandler+0xfe>
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d016      	beq.n	8008fee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0201 	bic.w	r2, r2, #1
 8008fce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f82f 	bl	800904c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01b      	beq.n	8009030 <HAL_LTDC_IRQHandler+0x140>
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d016      	beq.n	8009030 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0208 	bic.w	r2, r2, #8
 8009010:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2208      	movs	r2, #8
 8009018:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f818 	bl	8009060 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009074:	b5b0      	push	{r4, r5, r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_LTDC_ConfigLayer+0x1a>
 800908a:	2302      	movs	r3, #2
 800908c:	e02c      	b.n	80090e8 <HAL_LTDC_ConfigLayer+0x74>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2202      	movs	r2, #2
 800909a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2134      	movs	r1, #52	@ 0x34
 80090a4:	fb01 f303 	mul.w	r3, r1, r3
 80090a8:	4413      	add	r3, r2
 80090aa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	4614      	mov	r4, r2
 80090b2:	461d      	mov	r5, r3
 80090b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 f811 	bl	80090f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2201      	movs	r2, #1
 80090d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bdb0      	pop	{r4, r5, r7, pc}

080090f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b089      	sub	sp, #36	@ 0x24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800910c:	4413      	add	r3, r2
 800910e:	041b      	lsls	r3, r3, #16
 8009110:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	01db      	lsls	r3, r3, #7
 800911c:	4413      	add	r3, r2
 800911e:	3384      	adds	r3, #132	@ 0x84
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	6812      	ldr	r2, [r2, #0]
 8009126:	4611      	mov	r1, r2
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	01d2      	lsls	r2, r2, #7
 800912c:	440a      	add	r2, r1
 800912e:	3284      	adds	r2, #132	@ 0x84
 8009130:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009134:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	0c1b      	lsrs	r3, r3, #16
 8009142:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009146:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009148:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4619      	mov	r1, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	01db      	lsls	r3, r3, #7
 8009154:	440b      	add	r3, r1
 8009156:	3384      	adds	r3, #132	@ 0x84
 8009158:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800915e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800916e:	4413      	add	r3, r2
 8009170:	041b      	lsls	r3, r3, #16
 8009172:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	01db      	lsls	r3, r3, #7
 800917e:	4413      	add	r3, r2
 8009180:	3384      	adds	r3, #132	@ 0x84
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	6812      	ldr	r2, [r2, #0]
 8009188:	4611      	mov	r1, r2
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	01d2      	lsls	r2, r2, #7
 800918e:	440a      	add	r2, r1
 8009190:	3284      	adds	r2, #132	@ 0x84
 8009192:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009196:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091a6:	4413      	add	r3, r2
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4619      	mov	r1, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	01db      	lsls	r3, r3, #7
 80091b4:	440b      	add	r3, r1
 80091b6:	3384      	adds	r3, #132	@ 0x84
 80091b8:	4619      	mov	r1, r3
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	4313      	orrs	r3, r2
 80091be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	01db      	lsls	r3, r3, #7
 80091ca:	4413      	add	r3, r2
 80091cc:	3384      	adds	r3, #132	@ 0x84
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	6812      	ldr	r2, [r2, #0]
 80091d4:	4611      	mov	r1, r2
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	01d2      	lsls	r2, r2, #7
 80091da:	440a      	add	r2, r1
 80091dc:	3284      	adds	r2, #132	@ 0x84
 80091de:	f023 0307 	bic.w	r3, r3, #7
 80091e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	461a      	mov	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	01db      	lsls	r3, r3, #7
 80091ee:	4413      	add	r3, r2
 80091f0:	3384      	adds	r3, #132	@ 0x84
 80091f2:	461a      	mov	r2, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	061b      	lsls	r3, r3, #24
 8009214:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800921c:	461a      	mov	r2, r3
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	431a      	orrs	r2, r3
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	431a      	orrs	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4619      	mov	r1, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	01db      	lsls	r3, r3, #7
 8009230:	440b      	add	r3, r1
 8009232:	3384      	adds	r3, #132	@ 0x84
 8009234:	4619      	mov	r1, r3
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	4313      	orrs	r3, r2
 800923a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	01db      	lsls	r3, r3, #7
 8009246:	4413      	add	r3, r2
 8009248:	3384      	adds	r3, #132	@ 0x84
 800924a:	695b      	ldr	r3, [r3, #20]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	6812      	ldr	r2, [r2, #0]
 8009250:	4611      	mov	r1, r2
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	01d2      	lsls	r2, r2, #7
 8009256:	440a      	add	r2, r1
 8009258:	3284      	adds	r2, #132	@ 0x84
 800925a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800925e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	461a      	mov	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	01db      	lsls	r3, r3, #7
 800926a:	4413      	add	r3, r2
 800926c:	3384      	adds	r3, #132	@ 0x84
 800926e:	461a      	mov	r2, r3
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	695b      	ldr	r3, [r3, #20]
 8009274:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	01db      	lsls	r3, r3, #7
 8009280:	4413      	add	r3, r2
 8009282:	3384      	adds	r3, #132	@ 0x84
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	6812      	ldr	r2, [r2, #0]
 800928a:	4611      	mov	r1, r2
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	01d2      	lsls	r2, r2, #7
 8009290:	440a      	add	r2, r1
 8009292:	3284      	adds	r2, #132	@ 0x84
 8009294:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009298:	f023 0307 	bic.w	r3, r3, #7
 800929c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	69da      	ldr	r2, [r3, #28]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	68f9      	ldr	r1, [r7, #12]
 80092a8:	6809      	ldr	r1, [r1, #0]
 80092aa:	4608      	mov	r0, r1
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	01c9      	lsls	r1, r1, #7
 80092b0:	4401      	add	r1, r0
 80092b2:	3184      	adds	r1, #132	@ 0x84
 80092b4:	4313      	orrs	r3, r2
 80092b6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	01db      	lsls	r3, r3, #7
 80092c2:	4413      	add	r3, r2
 80092c4:	3384      	adds	r3, #132	@ 0x84
 80092c6:	461a      	mov	r2, r3
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092cc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 80092d6:	2304      	movs	r3, #4
 80092d8:	61fb      	str	r3, [r7, #28]
 80092da:	e01b      	b.n	8009314 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d102      	bne.n	80092ea <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 80092e4:	2303      	movs	r3, #3
 80092e6:	61fb      	str	r3, [r7, #28]
 80092e8:	e014      	b.n	8009314 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d00b      	beq.n	800930a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d007      	beq.n	800930a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d003      	beq.n	800930a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009306:	2b07      	cmp	r3, #7
 8009308:	d102      	bne.n	8009310 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 800930a:	2302      	movs	r3, #2
 800930c:	61fb      	str	r3, [r7, #28]
 800930e:	e001      	b.n	8009314 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8009310:	2301      	movs	r3, #1
 8009312:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	461a      	mov	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	01db      	lsls	r3, r3, #7
 800931e:	4413      	add	r3, r2
 8009320:	3384      	adds	r3, #132	@ 0x84
 8009322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	6812      	ldr	r2, [r2, #0]
 8009328:	4611      	mov	r1, r2
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	01d2      	lsls	r2, r2, #7
 800932e:	440a      	add	r2, r1
 8009330:	3284      	adds	r2, #132	@ 0x84
 8009332:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009336:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933c:	69fa      	ldr	r2, [r7, #28]
 800933e:	fb02 f303 	mul.w	r3, r2, r3
 8009342:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	6859      	ldr	r1, [r3, #4]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	1acb      	subs	r3, r1, r3
 800934e:	69f9      	ldr	r1, [r7, #28]
 8009350:	fb01 f303 	mul.w	r3, r1, r3
 8009354:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009356:	68f9      	ldr	r1, [r7, #12]
 8009358:	6809      	ldr	r1, [r1, #0]
 800935a:	4608      	mov	r0, r1
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	01c9      	lsls	r1, r1, #7
 8009360:	4401      	add	r1, r0
 8009362:	3184      	adds	r1, #132	@ 0x84
 8009364:	4313      	orrs	r3, r2
 8009366:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	01db      	lsls	r3, r3, #7
 8009372:	4413      	add	r3, r2
 8009374:	3384      	adds	r3, #132	@ 0x84
 8009376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	6812      	ldr	r2, [r2, #0]
 800937c:	4611      	mov	r1, r2
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	01d2      	lsls	r2, r2, #7
 8009382:	440a      	add	r2, r1
 8009384:	3284      	adds	r2, #132	@ 0x84
 8009386:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800938a:	f023 0307 	bic.w	r3, r3, #7
 800938e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	01db      	lsls	r3, r3, #7
 800939a:	4413      	add	r3, r2
 800939c:	3384      	adds	r3, #132	@ 0x84
 800939e:	461a      	mov	r2, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	01db      	lsls	r3, r3, #7
 80093b0:	4413      	add	r3, r2
 80093b2:	3384      	adds	r3, #132	@ 0x84
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	6812      	ldr	r2, [r2, #0]
 80093ba:	4611      	mov	r1, r2
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	01d2      	lsls	r2, r2, #7
 80093c0:	440a      	add	r2, r1
 80093c2:	3284      	adds	r2, #132	@ 0x84
 80093c4:	f043 0301 	orr.w	r3, r3, #1
 80093c8:	6013      	str	r3, [r2, #0]
}
 80093ca:	bf00      	nop
 80093cc:	3724      	adds	r7, #36	@ 0x24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b086      	sub	sp, #24
 80093da:	af02      	add	r7, sp, #8
 80093dc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e0fe      	b.n	80095e6 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d106      	bne.n	8009402 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7f9 fa8d 	bl	800291c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2203      	movs	r2, #3
 8009406:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4618      	mov	r0, r3
 8009410:	f007 fdcf 	bl	8010fb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6818      	ldr	r0, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	7c1a      	ldrb	r2, [r3, #16]
 800941c:	f88d 2000 	strb.w	r2, [sp]
 8009420:	3304      	adds	r3, #4
 8009422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009424:	f007 fd96 	bl	8010f54 <USB_CoreInit>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2202      	movs	r2, #2
 8009432:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e0d5      	b.n	80095e6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2100      	movs	r1, #0
 8009440:	4618      	mov	r0, r3
 8009442:	f007 fdc7 	bl	8010fd4 <USB_SetCurrentMode>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e0c6      	b.n	80095e6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
 800945c:	e04a      	b.n	80094f4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800945e:	7bfa      	ldrb	r2, [r7, #15]
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	4613      	mov	r3, r2
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	4413      	add	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	440b      	add	r3, r1
 800946c:	3315      	adds	r3, #21
 800946e:	2201      	movs	r2, #1
 8009470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009472:	7bfa      	ldrb	r2, [r7, #15]
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	3314      	adds	r3, #20
 8009482:	7bfa      	ldrb	r2, [r7, #15]
 8009484:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009486:	7bfa      	ldrb	r2, [r7, #15]
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	b298      	uxth	r0, r3
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	4613      	mov	r3, r2
 8009490:	00db      	lsls	r3, r3, #3
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	332e      	adds	r3, #46	@ 0x2e
 800949a:	4602      	mov	r2, r0
 800949c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800949e:	7bfa      	ldrb	r2, [r7, #15]
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	440b      	add	r3, r1
 80094ac:	3318      	adds	r3, #24
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80094b2:	7bfa      	ldrb	r2, [r7, #15]
 80094b4:	6879      	ldr	r1, [r7, #4]
 80094b6:	4613      	mov	r3, r2
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	440b      	add	r3, r1
 80094c0:	331c      	adds	r3, #28
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80094c6:	7bfa      	ldrb	r2, [r7, #15]
 80094c8:	6879      	ldr	r1, [r7, #4]
 80094ca:	4613      	mov	r3, r2
 80094cc:	00db      	lsls	r3, r3, #3
 80094ce:	4413      	add	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	440b      	add	r3, r1
 80094d4:	3320      	adds	r3, #32
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80094da:	7bfa      	ldrb	r2, [r7, #15]
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	4613      	mov	r3, r2
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	4413      	add	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	440b      	add	r3, r1
 80094e8:	3324      	adds	r3, #36	@ 0x24
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	3301      	adds	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	791b      	ldrb	r3, [r3, #4]
 80094f8:	7bfa      	ldrb	r2, [r7, #15]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d3af      	bcc.n	800945e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]
 8009502:	e044      	b.n	800958e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009504:	7bfa      	ldrb	r2, [r7, #15]
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	4613      	mov	r3, r2
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	440b      	add	r3, r1
 8009512:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009516:	2200      	movs	r2, #0
 8009518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800951a:	7bfa      	ldrb	r2, [r7, #15]
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800952c:	7bfa      	ldrb	r2, [r7, #15]
 800952e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009530:	7bfa      	ldrb	r2, [r7, #15]
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009542:	2200      	movs	r2, #0
 8009544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009546:	7bfa      	ldrb	r2, [r7, #15]
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	4613      	mov	r3, r2
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	440b      	add	r3, r1
 8009554:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800955c:	7bfa      	ldrb	r2, [r7, #15]
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4613      	mov	r3, r2
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009572:	7bfa      	ldrb	r2, [r7, #15]
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	4613      	mov	r3, r2
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	440b      	add	r3, r1
 8009580:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	3301      	adds	r3, #1
 800958c:	73fb      	strb	r3, [r7, #15]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	791b      	ldrb	r3, [r3, #4]
 8009592:	7bfa      	ldrb	r2, [r7, #15]
 8009594:	429a      	cmp	r2, r3
 8009596:	d3b5      	bcc.n	8009504 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	7c1a      	ldrb	r2, [r3, #16]
 80095a0:	f88d 2000 	strb.w	r2, [sp]
 80095a4:	3304      	adds	r3, #4
 80095a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095a8:	f007 fd60 	bl	801106c <USB_DevInit>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2202      	movs	r2, #2
 80095b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e013      	b.n	80095e6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	7b1b      	ldrb	r3, [r3, #12]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d102      	bne.n	80095da <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f80a 	bl	80095ee <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f007 ff2d 	bl	801143e <USB_DevDisconnect>

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800961c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009620:	f043 0303 	orr.w	r3, r3, #3
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
	...

08009638 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800963c:	4b05      	ldr	r3, [pc, #20]	@ (8009654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800963e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009640:	4a04      	ldr	r2, [pc, #16]	@ (8009654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009642:	f043 0301 	orr.w	r3, r3, #1
 8009646:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8009648:	bf00      	nop
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	46020800 	.word	0x46020800

08009658 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009660:	4b39      	ldr	r3, [pc, #228]	@ (8009748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009668:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d10b      	bne.n	800968a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009678:	d905      	bls.n	8009686 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800967a:	4b33      	ldr	r3, [pc, #204]	@ (8009748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	4a32      	ldr	r2, [pc, #200]	@ (8009748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009684:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	e057      	b.n	800973a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009690:	d90a      	bls.n	80096a8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8009692:	4b2d      	ldr	r3, [pc, #180]	@ (8009748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4313      	orrs	r3, r2
 800969e:	4a2a      	ldr	r2, [pc, #168]	@ (8009748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096a4:	60d3      	str	r3, [r2, #12]
 80096a6:	e007      	b.n	80096b8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80096a8:	4b27      	ldr	r3, [pc, #156]	@ (8009748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80096b0:	4925      	ldr	r1, [pc, #148]	@ (8009748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80096b8:	4b24      	ldr	r3, [pc, #144]	@ (800974c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a24      	ldr	r2, [pc, #144]	@ (8009750 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80096be:	fba2 2303 	umull	r2, r3, r2, r3
 80096c2:	099b      	lsrs	r3, r3, #6
 80096c4:	2232      	movs	r2, #50	@ 0x32
 80096c6:	fb02 f303 	mul.w	r3, r2, r3
 80096ca:	4a21      	ldr	r2, [pc, #132]	@ (8009750 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80096cc:	fba2 2303 	umull	r2, r3, r2, r3
 80096d0:	099b      	lsrs	r3, r3, #6
 80096d2:	3301      	adds	r3, #1
 80096d4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80096d6:	e002      	b.n	80096de <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3b01      	subs	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80096de:	4b1a      	ldr	r3, [pc, #104]	@ (8009748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d102      	bne.n	80096f0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1f3      	bne.n	80096d8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d01b      	beq.n	800972e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80096f6:	4b15      	ldr	r3, [pc, #84]	@ (800974c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a15      	ldr	r2, [pc, #84]	@ (8009750 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80096fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009700:	099b      	lsrs	r3, r3, #6
 8009702:	2232      	movs	r2, #50	@ 0x32
 8009704:	fb02 f303 	mul.w	r3, r2, r3
 8009708:	4a11      	ldr	r2, [pc, #68]	@ (8009750 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800970a:	fba2 2303 	umull	r2, r3, r2, r3
 800970e:	099b      	lsrs	r3, r3, #6
 8009710:	3301      	adds	r3, #1
 8009712:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009714:	e002      	b.n	800971c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3b01      	subs	r3, #1
 800971a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800971c:	4b0a      	ldr	r3, [pc, #40]	@ (8009748 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800971e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d102      	bne.n	800972e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1f3      	bne.n	8009716 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e000      	b.n	800973a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	46020800 	.word	0x46020800
 800974c:	20000000 	.word	0x20000000
 8009750:	10624dd3 	.word	0x10624dd3

08009754 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009754:	b480      	push	{r7}
 8009756:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009758:	4b04      	ldr	r3, [pc, #16]	@ (800976c <HAL_PWREx_GetVoltageRange+0x18>)
 800975a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8009760:	4618      	mov	r0, r3
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	46020800 	.word	0x46020800

08009770 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009778:	4b22      	ldr	r3, [pc, #136]	@ (8009804 <HAL_PWREx_ConfigSupply+0x94>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a22      	ldr	r2, [pc, #136]	@ (8009808 <HAL_PWREx_ConfigSupply+0x98>)
 800977e:	fba2 2303 	umull	r2, r3, r2, r3
 8009782:	099b      	lsrs	r3, r3, #6
 8009784:	2232      	movs	r2, #50	@ 0x32
 8009786:	fb02 f303 	mul.w	r3, r2, r3
 800978a:	4a1f      	ldr	r2, [pc, #124]	@ (8009808 <HAL_PWREx_ConfigSupply+0x98>)
 800978c:	fba2 2303 	umull	r2, r3, r2, r3
 8009790:	099b      	lsrs	r3, r3, #6
 8009792:	3301      	adds	r3, #1
 8009794:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d113      	bne.n	80097c4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800979c:	4b1b      	ldr	r3, [pc, #108]	@ (800980c <HAL_PWREx_ConfigSupply+0x9c>)
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	4a1a      	ldr	r2, [pc, #104]	@ (800980c <HAL_PWREx_ConfigSupply+0x9c>)
 80097a2:	f023 0302 	bic.w	r3, r3, #2
 80097a6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80097a8:	e002      	b.n	80097b0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80097b0:	4b16      	ldr	r3, [pc, #88]	@ (800980c <HAL_PWREx_ConfigSupply+0x9c>)
 80097b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d116      	bne.n	80097ea <HAL_PWREx_ConfigSupply+0x7a>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1f3      	bne.n	80097aa <HAL_PWREx_ConfigSupply+0x3a>
 80097c2:	e012      	b.n	80097ea <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80097c4:	4b11      	ldr	r3, [pc, #68]	@ (800980c <HAL_PWREx_ConfigSupply+0x9c>)
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	4a10      	ldr	r2, [pc, #64]	@ (800980c <HAL_PWREx_ConfigSupply+0x9c>)
 80097ca:	f043 0302 	orr.w	r3, r3, #2
 80097ce:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80097d0:	e002      	b.n	80097d8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80097d8:	4b0c      	ldr	r3, [pc, #48]	@ (800980c <HAL_PWREx_ConfigSupply+0x9c>)
 80097da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d102      	bne.n	80097ea <HAL_PWREx_ConfigSupply+0x7a>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1f3      	bne.n	80097d2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e000      	b.n	80097f6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20000000 	.word	0x20000000
 8009808:	10624dd3 	.word	0x10624dd3
 800980c:	46020800 	.word	0x46020800

08009810 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009810:	b480      	push	{r7}
 8009812:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009814:	4b05      	ldr	r3, [pc, #20]	@ (800982c <HAL_PWREx_EnableVddUSB+0x1c>)
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	4a04      	ldr	r2, [pc, #16]	@ (800982c <HAL_PWREx_EnableVddUSB+0x1c>)
 800981a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800981e:	6113      	str	r3, [r2, #16]
}
 8009820:	bf00      	nop
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	46020800 	.word	0x46020800

08009830 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009834:	4b05      	ldr	r3, [pc, #20]	@ (800984c <HAL_PWREx_EnableVddIO2+0x1c>)
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	4a04      	ldr	r2, [pc, #16]	@ (800984c <HAL_PWREx_EnableVddIO2+0x1c>)
 800983a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800983e:	6113      	str	r3, [r2, #16]
}
 8009840:	bf00      	nop
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	46020800 	.word	0x46020800

08009850 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009854:	4b05      	ldr	r3, [pc, #20]	@ (800986c <HAL_PWREx_EnableVddA+0x1c>)
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	4a04      	ldr	r2, [pc, #16]	@ (800986c <HAL_PWREx_EnableVddA+0x1c>)
 800985a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800985e:	6113      	str	r3, [r2, #16]
}
 8009860:	bf00      	nop
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	46020800 	.word	0x46020800

08009870 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8009876:	f7ff ff6d 	bl	8009754 <HAL_PWREx_GetVoltageRange>
 800987a:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009882:	d003      	beq.n	800988c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800988a:	d107      	bne.n	800989c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800988c:	4b06      	ldr	r3, [pc, #24]	@ (80098a8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	4a05      	ldr	r2, [pc, #20]	@ (80098a8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009892:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8009896:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	e000      	b.n	800989e <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	46020800 	.word	0x46020800

080098ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08e      	sub	sp, #56	@ 0x38
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80098b4:	2300      	movs	r3, #0
 80098b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d102      	bne.n	80098c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	f000 bec8 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098c6:	4b99      	ldr	r3, [pc, #612]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	f003 030c 	and.w	r3, r3, #12
 80098ce:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098d0:	4b96      	ldr	r3, [pc, #600]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80098d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d4:	f003 0303 	and.w	r3, r3, #3
 80098d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0310 	and.w	r3, r3, #16
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 816c 	beq.w	8009bc0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80098e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d007      	beq.n	80098fe <HAL_RCC_OscConfig+0x52>
 80098ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f0:	2b0c      	cmp	r3, #12
 80098f2:	f040 80de 	bne.w	8009ab2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80098f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	f040 80da 	bne.w	8009ab2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d102      	bne.n	800990c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	f000 bea5 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009910:	4b86      	ldr	r3, [pc, #536]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d004      	beq.n	8009926 <HAL_RCC_OscConfig+0x7a>
 800991c:	4b83      	ldr	r3, [pc, #524]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009924:	e005      	b.n	8009932 <HAL_RCC_OscConfig+0x86>
 8009926:	4b81      	ldr	r3, [pc, #516]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800992c:	041b      	lsls	r3, r3, #16
 800992e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009932:	4293      	cmp	r3, r2
 8009934:	d255      	bcs.n	80099e2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10a      	bne.n	8009952 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009940:	4618      	mov	r0, r3
 8009942:	f001 f9d9 	bl	800acf8 <RCC_SetFlashLatencyFromMSIRange>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f000 be82 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009952:	4b76      	ldr	r3, [pc, #472]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	4a75      	ldr	r2, [pc, #468]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009958:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800995c:	6093      	str	r3, [r2, #8]
 800995e:	4b73      	ldr	r3, [pc, #460]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996a:	4970      	ldr	r1, [pc, #448]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 800996c:	4313      	orrs	r3, r2
 800996e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009974:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009978:	d309      	bcc.n	800998e <HAL_RCC_OscConfig+0xe2>
 800997a:	4b6c      	ldr	r3, [pc, #432]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f023 021f 	bic.w	r2, r3, #31
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	4969      	ldr	r1, [pc, #420]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009988:	4313      	orrs	r3, r2
 800998a:	60cb      	str	r3, [r1, #12]
 800998c:	e07e      	b.n	8009a8c <HAL_RCC_OscConfig+0x1e0>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009992:	2b00      	cmp	r3, #0
 8009994:	da0a      	bge.n	80099ac <HAL_RCC_OscConfig+0x100>
 8009996:	4b65      	ldr	r3, [pc, #404]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	015b      	lsls	r3, r3, #5
 80099a4:	4961      	ldr	r1, [pc, #388]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	60cb      	str	r3, [r1, #12]
 80099aa:	e06f      	b.n	8009a8c <HAL_RCC_OscConfig+0x1e0>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099b4:	d30a      	bcc.n	80099cc <HAL_RCC_OscConfig+0x120>
 80099b6:	4b5d      	ldr	r3, [pc, #372]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	029b      	lsls	r3, r3, #10
 80099c4:	4959      	ldr	r1, [pc, #356]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	60cb      	str	r3, [r1, #12]
 80099ca:	e05f      	b.n	8009a8c <HAL_RCC_OscConfig+0x1e0>
 80099cc:	4b57      	ldr	r3, [pc, #348]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a1b      	ldr	r3, [r3, #32]
 80099d8:	03db      	lsls	r3, r3, #15
 80099da:	4954      	ldr	r1, [pc, #336]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	60cb      	str	r3, [r1, #12]
 80099e0:	e054      	b.n	8009a8c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80099e2:	4b52      	ldr	r3, [pc, #328]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	4a51      	ldr	r2, [pc, #324]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80099e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80099ec:	6093      	str	r3, [r2, #8]
 80099ee:	4b4f      	ldr	r3, [pc, #316]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fa:	494c      	ldr	r1, [pc, #304]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a04:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009a08:	d309      	bcc.n	8009a1e <HAL_RCC_OscConfig+0x172>
 8009a0a:	4b48      	ldr	r3, [pc, #288]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f023 021f 	bic.w	r2, r3, #31
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	4945      	ldr	r1, [pc, #276]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60cb      	str	r3, [r1, #12]
 8009a1c:	e028      	b.n	8009a70 <HAL_RCC_OscConfig+0x1c4>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	da0a      	bge.n	8009a3c <HAL_RCC_OscConfig+0x190>
 8009a26:	4b41      	ldr	r3, [pc, #260]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	015b      	lsls	r3, r3, #5
 8009a34:	493d      	ldr	r1, [pc, #244]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60cb      	str	r3, [r1, #12]
 8009a3a:	e019      	b.n	8009a70 <HAL_RCC_OscConfig+0x1c4>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a44:	d30a      	bcc.n	8009a5c <HAL_RCC_OscConfig+0x1b0>
 8009a46:	4b39      	ldr	r3, [pc, #228]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	029b      	lsls	r3, r3, #10
 8009a54:	4935      	ldr	r1, [pc, #212]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60cb      	str	r3, [r1, #12]
 8009a5a:	e009      	b.n	8009a70 <HAL_RCC_OscConfig+0x1c4>
 8009a5c:	4b33      	ldr	r3, [pc, #204]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	03db      	lsls	r3, r3, #15
 8009a6a:	4930      	ldr	r1, [pc, #192]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10a      	bne.n	8009a8c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 f93c 	bl	800acf8 <RCC_SetFlashLatencyFromMSIRange>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	f000 bde5 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009a8c:	f001 f8de 	bl	800ac4c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009a90:	4b27      	ldr	r3, [pc, #156]	@ (8009b30 <HAL_RCC_OscConfig+0x284>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7f9 fac5 	bl	8003024 <HAL_InitTick>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 808a 	beq.w	8009bbe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aae:	f000 bdd2 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d066      	beq.n	8009b88 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009aba:	4b1c      	ldr	r3, [pc, #112]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a1b      	ldr	r2, [pc, #108]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009ac0:	f043 0301 	orr.w	r3, r3, #1
 8009ac4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009ac6:	f7f9 fb37 	bl	8003138 <HAL_GetTick>
 8009aca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009acc:	e009      	b.n	8009ae2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009ace:	f7f9 fb33 	bl	8003138 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d902      	bls.n	8009ae2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	f000 bdba 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009ae2:	4b12      	ldr	r3, [pc, #72]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0304 	and.w	r3, r3, #4
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0ef      	beq.n	8009ace <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009aee:	4b0f      	ldr	r3, [pc, #60]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	4a0e      	ldr	r2, [pc, #56]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009af4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009af8:	6093      	str	r3, [r2, #8]
 8009afa:	4b0c      	ldr	r3, [pc, #48]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b06:	4909      	ldr	r1, [pc, #36]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b10:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009b14:	d30e      	bcc.n	8009b34 <HAL_RCC_OscConfig+0x288>
 8009b16:	4b05      	ldr	r3, [pc, #20]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f023 021f 	bic.w	r2, r3, #31
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a1b      	ldr	r3, [r3, #32]
 8009b22:	4902      	ldr	r1, [pc, #8]	@ (8009b2c <HAL_RCC_OscConfig+0x280>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	60cb      	str	r3, [r1, #12]
 8009b28:	e04a      	b.n	8009bc0 <HAL_RCC_OscConfig+0x314>
 8009b2a:	bf00      	nop
 8009b2c:	46020c00 	.word	0x46020c00
 8009b30:	20000004 	.word	0x20000004
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	da0a      	bge.n	8009b52 <HAL_RCC_OscConfig+0x2a6>
 8009b3c:	4b98      	ldr	r3, [pc, #608]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	015b      	lsls	r3, r3, #5
 8009b4a:	4995      	ldr	r1, [pc, #596]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60cb      	str	r3, [r1, #12]
 8009b50:	e036      	b.n	8009bc0 <HAL_RCC_OscConfig+0x314>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b5a:	d30a      	bcc.n	8009b72 <HAL_RCC_OscConfig+0x2c6>
 8009b5c:	4b90      	ldr	r3, [pc, #576]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a1b      	ldr	r3, [r3, #32]
 8009b68:	029b      	lsls	r3, r3, #10
 8009b6a:	498d      	ldr	r1, [pc, #564]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	60cb      	str	r3, [r1, #12]
 8009b70:	e026      	b.n	8009bc0 <HAL_RCC_OscConfig+0x314>
 8009b72:	4b8b      	ldr	r3, [pc, #556]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	03db      	lsls	r3, r3, #15
 8009b80:	4987      	ldr	r1, [pc, #540]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60cb      	str	r3, [r1, #12]
 8009b86:	e01b      	b.n	8009bc0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009b88:	4b85      	ldr	r3, [pc, #532]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a84      	ldr	r2, [pc, #528]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009b8e:	f023 0301 	bic.w	r3, r3, #1
 8009b92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009b94:	f7f9 fad0 	bl	8003138 <HAL_GetTick>
 8009b98:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009b9a:	e009      	b.n	8009bb0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b9c:	f7f9 facc 	bl	8003138 <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d902      	bls.n	8009bb0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	f000 bd53 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1ef      	bne.n	8009b9c <HAL_RCC_OscConfig+0x2f0>
 8009bbc:	e000      	b.n	8009bc0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009bbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 808b 	beq.w	8009ce4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d005      	beq.n	8009be0 <HAL_RCC_OscConfig+0x334>
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd6:	2b0c      	cmp	r3, #12
 8009bd8:	d109      	bne.n	8009bee <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d106      	bne.n	8009bee <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d17d      	bne.n	8009ce4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	f000 bd34 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bf6:	d106      	bne.n	8009c06 <HAL_RCC_OscConfig+0x35a>
 8009bf8:	4b69      	ldr	r3, [pc, #420]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a68      	ldr	r2, [pc, #416]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c02:	6013      	str	r3, [r2, #0]
 8009c04:	e041      	b.n	8009c8a <HAL_RCC_OscConfig+0x3de>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c0e:	d112      	bne.n	8009c36 <HAL_RCC_OscConfig+0x38a>
 8009c10:	4b63      	ldr	r3, [pc, #396]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a62      	ldr	r2, [pc, #392]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	4b60      	ldr	r3, [pc, #384]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a5f      	ldr	r2, [pc, #380]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c22:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	4b5d      	ldr	r3, [pc, #372]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a5c      	ldr	r2, [pc, #368]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	e029      	b.n	8009c8a <HAL_RCC_OscConfig+0x3de>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009c3e:	d112      	bne.n	8009c66 <HAL_RCC_OscConfig+0x3ba>
 8009c40:	4b57      	ldr	r3, [pc, #348]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a56      	ldr	r2, [pc, #344]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	4b54      	ldr	r3, [pc, #336]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a53      	ldr	r2, [pc, #332]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	4b51      	ldr	r3, [pc, #324]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a50      	ldr	r2, [pc, #320]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	e011      	b.n	8009c8a <HAL_RCC_OscConfig+0x3de>
 8009c66:	4b4e      	ldr	r3, [pc, #312]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	4b4b      	ldr	r3, [pc, #300]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a4a      	ldr	r2, [pc, #296]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c7c:	6013      	str	r3, [r2, #0]
 8009c7e:	4b48      	ldr	r3, [pc, #288]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a47      	ldr	r2, [pc, #284]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009c84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009c88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d014      	beq.n	8009cbc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009c92:	f7f9 fa51 	bl	8003138 <HAL_GetTick>
 8009c96:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c98:	e009      	b.n	8009cae <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c9a:	f7f9 fa4d 	bl	8003138 <HAL_GetTick>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	2b64      	cmp	r3, #100	@ 0x64
 8009ca6:	d902      	bls.n	8009cae <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	f000 bcd4 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009cae:	4b3c      	ldr	r3, [pc, #240]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0ef      	beq.n	8009c9a <HAL_RCC_OscConfig+0x3ee>
 8009cba:	e013      	b.n	8009ce4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009cbc:	f7f9 fa3c 	bl	8003138 <HAL_GetTick>
 8009cc0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009cc2:	e009      	b.n	8009cd8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cc4:	f7f9 fa38 	bl	8003138 <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b64      	cmp	r3, #100	@ 0x64
 8009cd0:	d902      	bls.n	8009cd8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	f000 bcbf 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009cd8:	4b31      	ldr	r3, [pc, #196]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1ef      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0302 	and.w	r3, r3, #2
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d05f      	beq.n	8009db0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf2:	2b04      	cmp	r3, #4
 8009cf4:	d005      	beq.n	8009d02 <HAL_RCC_OscConfig+0x456>
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf8:	2b0c      	cmp	r3, #12
 8009cfa:	d114      	bne.n	8009d26 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d111      	bne.n	8009d26 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d102      	bne.n	8009d10 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f000 bca3 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009d10:	4b23      	ldr	r3, [pc, #140]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	041b      	lsls	r3, r3, #16
 8009d1e:	4920      	ldr	r1, [pc, #128]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009d24:	e044      	b.n	8009db0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d024      	beq.n	8009d78 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a1b      	ldr	r2, [pc, #108]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d38:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d3a:	f7f9 f9fd 	bl	8003138 <HAL_GetTick>
 8009d3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d40:	e009      	b.n	8009d56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d42:	f7f9 f9f9 	bl	8003138 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d902      	bls.n	8009d56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	f000 bc80 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d56:	4b12      	ldr	r3, [pc, #72]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0ef      	beq.n	8009d42 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009d62:	4b0f      	ldr	r3, [pc, #60]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	041b      	lsls	r3, r3, #16
 8009d70:	490b      	ldr	r1, [pc, #44]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	610b      	str	r3, [r1, #16]
 8009d76:	e01b      	b.n	8009db0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009d78:	4b09      	ldr	r3, [pc, #36]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a08      	ldr	r2, [pc, #32]	@ (8009da0 <HAL_RCC_OscConfig+0x4f4>)
 8009d7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d82:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d84:	f7f9 f9d8 	bl	8003138 <HAL_GetTick>
 8009d88:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d8a:	e00b      	b.n	8009da4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d8c:	f7f9 f9d4 	bl	8003138 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d904      	bls.n	8009da4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	f000 bc5b 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
 8009da0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009da4:	4baf      	ldr	r3, [pc, #700]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1ed      	bne.n	8009d8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 0308 	and.w	r3, r3, #8
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80c8 	beq.w	8009f4e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009dc4:	4ba7      	ldr	r3, [pc, #668]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d111      	bne.n	8009df6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009dd2:	4ba4      	ldr	r3, [pc, #656]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009dd8:	4aa2      	ldr	r2, [pc, #648]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009dda:	f043 0304 	orr.w	r3, r3, #4
 8009dde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009de2:	4ba0      	ldr	r3, [pc, #640]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	617b      	str	r3, [r7, #20]
 8009dee:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009df0:	2301      	movs	r3, #1
 8009df2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009df6:	4b9c      	ldr	r3, [pc, #624]	@ (800a068 <HAL_RCC_OscConfig+0x7bc>)
 8009df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d119      	bne.n	8009e36 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009e02:	4b99      	ldr	r3, [pc, #612]	@ (800a068 <HAL_RCC_OscConfig+0x7bc>)
 8009e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e06:	4a98      	ldr	r2, [pc, #608]	@ (800a068 <HAL_RCC_OscConfig+0x7bc>)
 8009e08:	f043 0301 	orr.w	r3, r3, #1
 8009e0c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e0e:	f7f9 f993 	bl	8003138 <HAL_GetTick>
 8009e12:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e14:	e009      	b.n	8009e2a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e16:	f7f9 f98f 	bl	8003138 <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d902      	bls.n	8009e2a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	f000 bc16 	b.w	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e2a:	4b8f      	ldr	r3, [pc, #572]	@ (800a068 <HAL_RCC_OscConfig+0x7bc>)
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0ef      	beq.n	8009e16 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d05f      	beq.n	8009efe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009e3e:	4b89      	ldr	r3, [pc, #548]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e44:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d037      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d006      	beq.n	8009e6c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e3f4      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d01b      	beq.n	8009eae <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009e76:	4b7b      	ldr	r3, [pc, #492]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e7c:	4a79      	ldr	r2, [pc, #484]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009e7e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009e82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009e86:	f7f9 f957 	bl	8003138 <HAL_GetTick>
 8009e8a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009e8c:	e008      	b.n	8009ea0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e8e:	f7f9 f953 	bl	8003138 <HAL_GetTick>
 8009e92:	4602      	mov	r2, r0
 8009e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	2b05      	cmp	r3, #5
 8009e9a:	d901      	bls.n	8009ea0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e3da      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009ea0:	4b70      	ldr	r3, [pc, #448]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ea6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1ef      	bne.n	8009e8e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009eae:	4b6d      	ldr	r3, [pc, #436]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009eb4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	4969      	ldr	r1, [pc, #420]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009ec4:	4b67      	ldr	r3, [pc, #412]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009eca:	4a66      	ldr	r2, [pc, #408]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009ecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ed0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009ed4:	f7f9 f930 	bl	8003138 <HAL_GetTick>
 8009ed8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009eda:	e008      	b.n	8009eee <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009edc:	f7f9 f92c 	bl	8003138 <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	2b05      	cmp	r3, #5
 8009ee8:	d901      	bls.n	8009eee <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e3b3      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009eee:	4b5d      	ldr	r3, [pc, #372]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d0ef      	beq.n	8009edc <HAL_RCC_OscConfig+0x630>
 8009efc:	e01b      	b.n	8009f36 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009efe:	4b59      	ldr	r3, [pc, #356]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f04:	4a57      	ldr	r2, [pc, #348]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009f06:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009f0e:	f7f9 f913 	bl	8003138 <HAL_GetTick>
 8009f12:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f14:	e008      	b.n	8009f28 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f16:	f7f9 f90f 	bl	8003138 <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	2b05      	cmp	r3, #5
 8009f22:	d901      	bls.n	8009f28 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e396      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f28:	4b4e      	ldr	r3, [pc, #312]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1ef      	bne.n	8009f16 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f36:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d107      	bne.n	8009f4e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f3e:	4b49      	ldr	r3, [pc, #292]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f44:	4a47      	ldr	r2, [pc, #284]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009f46:	f023 0304 	bic.w	r3, r3, #4
 8009f4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0304 	and.w	r3, r3, #4
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 8111 	beq.w	800a17e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f62:	4b40      	ldr	r3, [pc, #256]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f68:	f003 0304 	and.w	r3, r3, #4
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d111      	bne.n	8009f94 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f70:	4b3c      	ldr	r3, [pc, #240]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f76:	4a3b      	ldr	r2, [pc, #236]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009f78:	f043 0304 	orr.w	r3, r3, #4
 8009f7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009f80:	4b38      	ldr	r3, [pc, #224]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f86:	f003 0304 	and.w	r3, r3, #4
 8009f8a:	613b      	str	r3, [r7, #16]
 8009f8c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009f94:	4b34      	ldr	r3, [pc, #208]	@ (800a068 <HAL_RCC_OscConfig+0x7bc>)
 8009f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d118      	bne.n	8009fd2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009fa0:	4b31      	ldr	r3, [pc, #196]	@ (800a068 <HAL_RCC_OscConfig+0x7bc>)
 8009fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa4:	4a30      	ldr	r2, [pc, #192]	@ (800a068 <HAL_RCC_OscConfig+0x7bc>)
 8009fa6:	f043 0301 	orr.w	r3, r3, #1
 8009faa:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fac:	f7f9 f8c4 	bl	8003138 <HAL_GetTick>
 8009fb0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fb2:	e008      	b.n	8009fc6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fb4:	f7f9 f8c0 	bl	8003138 <HAL_GetTick>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d901      	bls.n	8009fc6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e347      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fc6:	4b28      	ldr	r3, [pc, #160]	@ (800a068 <HAL_RCC_OscConfig+0x7bc>)
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0f0      	beq.n	8009fb4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d01f      	beq.n	800a01e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f003 0304 	and.w	r3, r3, #4
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d010      	beq.n	800a00c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009fea:	4b1e      	ldr	r3, [pc, #120]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ff0:	4a1c      	ldr	r2, [pc, #112]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009ff2:	f043 0304 	orr.w	r3, r3, #4
 8009ff6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009ffa:	4b1a      	ldr	r3, [pc, #104]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 8009ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a000:	4a18      	ldr	r2, [pc, #96]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 800a002:	f043 0301 	orr.w	r3, r3, #1
 800a006:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a00a:	e018      	b.n	800a03e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a00c:	4b15      	ldr	r3, [pc, #84]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 800a00e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a012:	4a14      	ldr	r2, [pc, #80]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 800a014:	f043 0301 	orr.w	r3, r3, #1
 800a018:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a01c:	e00f      	b.n	800a03e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a01e:	4b11      	ldr	r3, [pc, #68]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 800a020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a024:	4a0f      	ldr	r2, [pc, #60]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 800a026:	f023 0301 	bic.w	r3, r3, #1
 800a02a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a02e:	4b0d      	ldr	r3, [pc, #52]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 800a030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a034:	4a0b      	ldr	r2, [pc, #44]	@ (800a064 <HAL_RCC_OscConfig+0x7b8>)
 800a036:	f023 0304 	bic.w	r3, r3, #4
 800a03a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d057      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a046:	f7f9 f877 	bl	8003138 <HAL_GetTick>
 800a04a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a04c:	e00e      	b.n	800a06c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a04e:	f7f9 f873 	bl	8003138 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d905      	bls.n	800a06c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e2f8      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
 800a064:	46020c00 	.word	0x46020c00
 800a068:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a06c:	4b9c      	ldr	r3, [pc, #624]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a06e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0e9      	beq.n	800a04e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a082:	2b00      	cmp	r3, #0
 800a084:	d01b      	beq.n	800a0be <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a086:	4b96      	ldr	r3, [pc, #600]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a08c:	4a94      	ldr	r2, [pc, #592]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a08e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a092:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a096:	e00a      	b.n	800a0ae <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a098:	f7f9 f84e 	bl	8003138 <HAL_GetTick>
 800a09c:	4602      	mov	r2, r0
 800a09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d901      	bls.n	800a0ae <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e2d3      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a0ae:	4b8c      	ldr	r3, [pc, #560]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a0b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d0ed      	beq.n	800a098 <HAL_RCC_OscConfig+0x7ec>
 800a0bc:	e053      	b.n	800a166 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a0be:	4b88      	ldr	r3, [pc, #544]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a0c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0c4:	4a86      	ldr	r2, [pc, #536]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a0c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a0ce:	e00a      	b.n	800a0e6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0d0:	f7f9 f832 	bl	8003138 <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d901      	bls.n	800a0e6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e2b7      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a0e6:	4b7e      	ldr	r3, [pc, #504]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a0e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1ed      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x824>
 800a0f4:	e037      	b.n	800a166 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a0f6:	f7f9 f81f 	bl	8003138 <HAL_GetTick>
 800a0fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a0fc:	e00a      	b.n	800a114 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0fe:	f7f9 f81b 	bl	8003138 <HAL_GetTick>
 800a102:	4602      	mov	r2, r0
 800a104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d901      	bls.n	800a114 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a110:	2303      	movs	r3, #3
 800a112:	e2a0      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a114:	4b72      	ldr	r3, [pc, #456]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1ed      	bne.n	800a0fe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a122:	4b6f      	ldr	r3, [pc, #444]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d01a      	beq.n	800a166 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a130:	4b6b      	ldr	r3, [pc, #428]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a136:	4a6a      	ldr	r2, [pc, #424]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a138:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a13c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a140:	e00a      	b.n	800a158 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a142:	f7f8 fff9 	bl	8003138 <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a150:	4293      	cmp	r3, r2
 800a152:	d901      	bls.n	800a158 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a154:	2303      	movs	r3, #3
 800a156:	e27e      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a158:	4b61      	ldr	r3, [pc, #388]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a15a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a15e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1ed      	bne.n	800a142 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a166:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d107      	bne.n	800a17e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a16e:	4b5c      	ldr	r3, [pc, #368]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a174:	4a5a      	ldr	r2, [pc, #360]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a176:	f023 0304 	bic.w	r3, r3, #4
 800a17a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 0320 	and.w	r3, r3, #32
 800a186:	2b00      	cmp	r3, #0
 800a188:	d036      	beq.n	800a1f8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d019      	beq.n	800a1c6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a192:	4b53      	ldr	r3, [pc, #332]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a52      	ldr	r2, [pc, #328]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a198:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a19c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a19e:	f7f8 ffcb 	bl	8003138 <HAL_GetTick>
 800a1a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a1a4:	e008      	b.n	800a1b8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1a6:	f7f8 ffc7 	bl	8003138 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d901      	bls.n	800a1b8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e24e      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a1b8:	4b49      	ldr	r3, [pc, #292]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0f0      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x8fa>
 800a1c4:	e018      	b.n	800a1f8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a1c6:	4b46      	ldr	r3, [pc, #280]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a45      	ldr	r2, [pc, #276]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a1cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1d0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a1d2:	f7f8 ffb1 	bl	8003138 <HAL_GetTick>
 800a1d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a1d8:	e008      	b.n	800a1ec <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1da:	f7f8 ffad 	bl	8003138 <HAL_GetTick>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d901      	bls.n	800a1ec <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e234      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a1ec:	4b3c      	ldr	r3, [pc, #240]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1f0      	bne.n	800a1da <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a200:	2b00      	cmp	r3, #0
 800a202:	d036      	beq.n	800a272 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d019      	beq.n	800a240 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a20c:	4b34      	ldr	r3, [pc, #208]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a33      	ldr	r2, [pc, #204]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a216:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a218:	f7f8 ff8e 	bl	8003138 <HAL_GetTick>
 800a21c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a21e:	e008      	b.n	800a232 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a220:	f7f8 ff8a 	bl	8003138 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d901      	bls.n	800a232 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e211      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a232:	4b2b      	ldr	r3, [pc, #172]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0f0      	beq.n	800a220 <HAL_RCC_OscConfig+0x974>
 800a23e:	e018      	b.n	800a272 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a240:	4b27      	ldr	r3, [pc, #156]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a26      	ldr	r2, [pc, #152]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a24a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a24c:	f7f8 ff74 	bl	8003138 <HAL_GetTick>
 800a250:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a252:	e008      	b.n	800a266 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a254:	f7f8 ff70 	bl	8003138 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d901      	bls.n	800a266 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e1f7      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a266:	4b1e      	ldr	r3, [pc, #120]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1f0      	bne.n	800a254 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d07f      	beq.n	800a37e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a282:	2b00      	cmp	r3, #0
 800a284:	d062      	beq.n	800a34c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a286:	4b16      	ldr	r3, [pc, #88]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	4a15      	ldr	r2, [pc, #84]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a28c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a290:	6093      	str	r3, [r2, #8]
 800a292:	4b13      	ldr	r3, [pc, #76]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a29e:	4910      	ldr	r1, [pc, #64]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a2ac:	d309      	bcc.n	800a2c2 <HAL_RCC_OscConfig+0xa16>
 800a2ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f023 021f 	bic.w	r2, r3, #31
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	4909      	ldr	r1, [pc, #36]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	60cb      	str	r3, [r1, #12]
 800a2c0:	e02a      	b.n	800a318 <HAL_RCC_OscConfig+0xa6c>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	da0c      	bge.n	800a2e4 <HAL_RCC_OscConfig+0xa38>
 800a2ca:	4b05      	ldr	r3, [pc, #20]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	015b      	lsls	r3, r3, #5
 800a2d8:	4901      	ldr	r1, [pc, #4]	@ (800a2e0 <HAL_RCC_OscConfig+0xa34>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60cb      	str	r3, [r1, #12]
 800a2de:	e01b      	b.n	800a318 <HAL_RCC_OscConfig+0xa6c>
 800a2e0:	46020c00 	.word	0x46020c00
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ec:	d30a      	bcc.n	800a304 <HAL_RCC_OscConfig+0xa58>
 800a2ee:	4ba1      	ldr	r3, [pc, #644]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	029b      	lsls	r3, r3, #10
 800a2fc:	499d      	ldr	r1, [pc, #628]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60cb      	str	r3, [r1, #12]
 800a302:	e009      	b.n	800a318 <HAL_RCC_OscConfig+0xa6c>
 800a304:	4b9b      	ldr	r3, [pc, #620]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a1b      	ldr	r3, [r3, #32]
 800a310:	03db      	lsls	r3, r3, #15
 800a312:	4998      	ldr	r1, [pc, #608]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a314:	4313      	orrs	r3, r2
 800a316:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a318:	4b96      	ldr	r3, [pc, #600]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a95      	ldr	r2, [pc, #596]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a31e:	f043 0310 	orr.w	r3, r3, #16
 800a322:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a324:	f7f8 ff08 	bl	8003138 <HAL_GetTick>
 800a328:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a32a:	e008      	b.n	800a33e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a32c:	f7f8 ff04 	bl	8003138 <HAL_GetTick>
 800a330:	4602      	mov	r2, r0
 800a332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	2b02      	cmp	r3, #2
 800a338:	d901      	bls.n	800a33e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e18b      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a33e:	4b8d      	ldr	r3, [pc, #564]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0320 	and.w	r3, r3, #32
 800a346:	2b00      	cmp	r3, #0
 800a348:	d0f0      	beq.n	800a32c <HAL_RCC_OscConfig+0xa80>
 800a34a:	e018      	b.n	800a37e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a34c:	4b89      	ldr	r3, [pc, #548]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a88      	ldr	r2, [pc, #544]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a352:	f023 0310 	bic.w	r3, r3, #16
 800a356:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a358:	f7f8 feee 	bl	8003138 <HAL_GetTick>
 800a35c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a35e:	e008      	b.n	800a372 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a360:	f7f8 feea 	bl	8003138 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d901      	bls.n	800a372 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e171      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a372:	4b80      	ldr	r3, [pc, #512]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0320 	and.w	r3, r3, #32
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1f0      	bne.n	800a360 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 8166 	beq.w	800a654 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a38e:	4b79      	ldr	r3, [pc, #484]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f003 030c 	and.w	r3, r3, #12
 800a396:	2b0c      	cmp	r3, #12
 800a398:	f000 80f2 	beq.w	800a580 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	f040 80c5 	bne.w	800a530 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a3a6:	4b73      	ldr	r3, [pc, #460]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a72      	ldr	r2, [pc, #456]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a3ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a3b2:	f7f8 fec1 	bl	8003138 <HAL_GetTick>
 800a3b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a3b8:	e008      	b.n	800a3cc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3ba:	f7f8 febd 	bl	8003138 <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d901      	bls.n	800a3cc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e144      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a3cc:	4b69      	ldr	r3, [pc, #420]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1f0      	bne.n	800a3ba <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3d8:	4b66      	ldr	r3, [pc, #408]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a3da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3de:	f003 0304 	and.w	r3, r3, #4
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d111      	bne.n	800a40a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a3e6:	4b63      	ldr	r3, [pc, #396]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a3e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3ec:	4a61      	ldr	r2, [pc, #388]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a3ee:	f043 0304 	orr.w	r3, r3, #4
 800a3f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a3f6:	4b5f      	ldr	r3, [pc, #380]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a3f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a404:	2301      	movs	r3, #1
 800a406:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a40a:	4b5b      	ldr	r3, [pc, #364]	@ (800a578 <HAL_RCC_OscConfig+0xccc>)
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a416:	d102      	bne.n	800a41e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a418:	2301      	movs	r3, #1
 800a41a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a41e:	4b56      	ldr	r3, [pc, #344]	@ (800a578 <HAL_RCC_OscConfig+0xccc>)
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	4a55      	ldr	r2, [pc, #340]	@ (800a578 <HAL_RCC_OscConfig+0xccc>)
 800a424:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a428:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a42a:	4b52      	ldr	r3, [pc, #328]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a432:	f023 0303 	bic.w	r3, r3, #3
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a43e:	3a01      	subs	r2, #1
 800a440:	0212      	lsls	r2, r2, #8
 800a442:	4311      	orrs	r1, r2
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a448:	430a      	orrs	r2, r1
 800a44a:	494a      	ldr	r1, [pc, #296]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a450:	4b48      	ldr	r3, [pc, #288]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a454:	4b49      	ldr	r3, [pc, #292]	@ (800a57c <HAL_RCC_OscConfig+0xcd0>)
 800a456:	4013      	ands	r3, r2
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a45c:	3a01      	subs	r2, #1
 800a45e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a466:	3a01      	subs	r2, #1
 800a468:	0252      	lsls	r2, r2, #9
 800a46a:	b292      	uxth	r2, r2
 800a46c:	4311      	orrs	r1, r2
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a472:	3a01      	subs	r2, #1
 800a474:	0412      	lsls	r2, r2, #16
 800a476:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a47a:	4311      	orrs	r1, r2
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a480:	3a01      	subs	r2, #1
 800a482:	0612      	lsls	r2, r2, #24
 800a484:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a488:	430a      	orrs	r2, r1
 800a48a:	493a      	ldr	r1, [pc, #232]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a48c:	4313      	orrs	r3, r2
 800a48e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a490:	4b38      	ldr	r3, [pc, #224]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a494:	4a37      	ldr	r2, [pc, #220]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a496:	f023 0310 	bic.w	r3, r3, #16
 800a49a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4a0:	4a34      	ldr	r2, [pc, #208]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a4a6:	4b33      	ldr	r3, [pc, #204]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4aa:	4a32      	ldr	r2, [pc, #200]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a4ac:	f043 0310 	orr.w	r3, r3, #16
 800a4b0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a4b2:	4b30      	ldr	r3, [pc, #192]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b6:	f023 020c 	bic.w	r2, r3, #12
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4be:	492d      	ldr	r1, [pc, #180]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a4c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d105      	bne.n	800a4d8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a4cc:	4b2a      	ldr	r3, [pc, #168]	@ (800a578 <HAL_RCC_OscConfig+0xccc>)
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	4a29      	ldr	r2, [pc, #164]	@ (800a578 <HAL_RCC_OscConfig+0xccc>)
 800a4d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a4d6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a4d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d107      	bne.n	800a4f0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a4e0:	4b24      	ldr	r3, [pc, #144]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a4e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4e6:	4a23      	ldr	r2, [pc, #140]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a4e8:	f023 0304 	bic.w	r3, r3, #4
 800a4ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a4f0:	4b20      	ldr	r3, [pc, #128]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a1f      	ldr	r2, [pc, #124]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a4f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a4fc:	f7f8 fe1c 	bl	8003138 <HAL_GetTick>
 800a500:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a502:	e008      	b.n	800a516 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a504:	f7f8 fe18 	bl	8003138 <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d901      	bls.n	800a516 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e09f      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a516:	4b17      	ldr	r3, [pc, #92]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0f0      	beq.n	800a504 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a522:	4b14      	ldr	r3, [pc, #80]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a526:	4a13      	ldr	r2, [pc, #76]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a52c:	6293      	str	r3, [r2, #40]	@ 0x28
 800a52e:	e091      	b.n	800a654 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a530:	4b10      	ldr	r3, [pc, #64]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a0f      	ldr	r2, [pc, #60]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a536:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a53a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a53c:	f7f8 fdfc 	bl	8003138 <HAL_GetTick>
 800a540:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a542:	e008      	b.n	800a556 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a544:	f7f8 fdf8 	bl	8003138 <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d901      	bls.n	800a556 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a552:	2303      	movs	r3, #3
 800a554:	e07f      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a556:	4b07      	ldr	r3, [pc, #28]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1f0      	bne.n	800a544 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a562:	4b04      	ldr	r3, [pc, #16]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a566:	4a03      	ldr	r2, [pc, #12]	@ (800a574 <HAL_RCC_OscConfig+0xcc8>)
 800a568:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a56c:	f023 0303 	bic.w	r3, r3, #3
 800a570:	6293      	str	r3, [r2, #40]	@ 0x28
 800a572:	e06f      	b.n	800a654 <HAL_RCC_OscConfig+0xda8>
 800a574:	46020c00 	.word	0x46020c00
 800a578:	46020800 	.word	0x46020800
 800a57c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a580:	4b37      	ldr	r3, [pc, #220]	@ (800a660 <HAL_RCC_OscConfig+0xdb4>)
 800a582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a584:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a586:	4b36      	ldr	r3, [pc, #216]	@ (800a660 <HAL_RCC_OscConfig+0xdb4>)
 800a588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a58a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a590:	2b01      	cmp	r3, #1
 800a592:	d039      	beq.n	800a608 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	f003 0203 	and.w	r2, r3, #3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d132      	bne.n	800a608 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	0a1b      	lsrs	r3, r3, #8
 800a5a6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ae:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d129      	bne.n	800a608 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d122      	bne.n	800a608 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5cc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d11a      	bne.n	800a608 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	0a5b      	lsrs	r3, r3, #9
 800a5d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d111      	bne.n	800a608 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	0c1b      	lsrs	r3, r3, #16
 800a5e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5f0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d108      	bne.n	800a608 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	0e1b      	lsrs	r3, r3, #24
 800a5fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a602:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a604:	429a      	cmp	r2, r3
 800a606:	d001      	beq.n	800a60c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e024      	b.n	800a656 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a60c:	4b14      	ldr	r3, [pc, #80]	@ (800a660 <HAL_RCC_OscConfig+0xdb4>)
 800a60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a610:	08db      	lsrs	r3, r3, #3
 800a612:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d01a      	beq.n	800a654 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a61e:	4b10      	ldr	r3, [pc, #64]	@ (800a660 <HAL_RCC_OscConfig+0xdb4>)
 800a620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a622:	4a0f      	ldr	r2, [pc, #60]	@ (800a660 <HAL_RCC_OscConfig+0xdb4>)
 800a624:	f023 0310 	bic.w	r3, r3, #16
 800a628:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a62a:	f7f8 fd85 	bl	8003138 <HAL_GetTick>
 800a62e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a630:	bf00      	nop
 800a632:	f7f8 fd81 	bl	8003138 <HAL_GetTick>
 800a636:	4602      	mov	r2, r0
 800a638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d0f9      	beq.n	800a632 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a642:	4a07      	ldr	r2, [pc, #28]	@ (800a660 <HAL_RCC_OscConfig+0xdb4>)
 800a644:	00db      	lsls	r3, r3, #3
 800a646:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a648:	4b05      	ldr	r3, [pc, #20]	@ (800a660 <HAL_RCC_OscConfig+0xdb4>)
 800a64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64c:	4a04      	ldr	r2, [pc, #16]	@ (800a660 <HAL_RCC_OscConfig+0xdb4>)
 800a64e:	f043 0310 	orr.w	r3, r3, #16
 800a652:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3738      	adds	r7, #56	@ 0x38
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	46020c00 	.word	0x46020c00

0800a664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e1d9      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a678:	4b9b      	ldr	r3, [pc, #620]	@ (800a8e8 <HAL_RCC_ClockConfig+0x284>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 030f 	and.w	r3, r3, #15
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	429a      	cmp	r2, r3
 800a684:	d910      	bls.n	800a6a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a686:	4b98      	ldr	r3, [pc, #608]	@ (800a8e8 <HAL_RCC_ClockConfig+0x284>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f023 020f 	bic.w	r2, r3, #15
 800a68e:	4996      	ldr	r1, [pc, #600]	@ (800a8e8 <HAL_RCC_ClockConfig+0x284>)
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	4313      	orrs	r3, r2
 800a694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a696:	4b94      	ldr	r3, [pc, #592]	@ (800a8e8 <HAL_RCC_ClockConfig+0x284>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 030f 	and.w	r3, r3, #15
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d001      	beq.n	800a6a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e1c1      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0310 	and.w	r3, r3, #16
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d010      	beq.n	800a6d6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	695a      	ldr	r2, [r3, #20]
 800a6b8:	4b8c      	ldr	r3, [pc, #560]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d908      	bls.n	800a6d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a6c4:	4b89      	ldr	r3, [pc, #548]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	4986      	ldr	r1, [pc, #536]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0308 	and.w	r3, r3, #8
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d012      	beq.n	800a708 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	691a      	ldr	r2, [r3, #16]
 800a6e6:	4b81      	ldr	r3, [pc, #516]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	091b      	lsrs	r3, r3, #4
 800a6ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d909      	bls.n	800a708 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a6f4:	4b7d      	ldr	r3, [pc, #500]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a6f6:	6a1b      	ldr	r3, [r3, #32]
 800a6f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	011b      	lsls	r3, r3, #4
 800a702:	497a      	ldr	r1, [pc, #488]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a704:	4313      	orrs	r3, r2
 800a706:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	2b00      	cmp	r3, #0
 800a712:	d010      	beq.n	800a736 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	4b74      	ldr	r3, [pc, #464]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a720:	429a      	cmp	r2, r3
 800a722:	d908      	bls.n	800a736 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a724:	4b71      	ldr	r3, [pc, #452]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	496e      	ldr	r1, [pc, #440]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a732:	4313      	orrs	r3, r2
 800a734:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0302 	and.w	r3, r3, #2
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d010      	beq.n	800a764 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	689a      	ldr	r2, [r3, #8]
 800a746:	4b69      	ldr	r3, [pc, #420]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	f003 030f 	and.w	r3, r3, #15
 800a74e:	429a      	cmp	r2, r3
 800a750:	d908      	bls.n	800a764 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a752:	4b66      	ldr	r3, [pc, #408]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f023 020f 	bic.w	r2, r3, #15
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	4963      	ldr	r1, [pc, #396]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a760:	4313      	orrs	r3, r2
 800a762:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 80d2 	beq.w	800a916 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a772:	2300      	movs	r3, #0
 800a774:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d143      	bne.n	800a806 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a77e:	4b5b      	ldr	r3, [pc, #364]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d110      	bne.n	800a7ae <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a78c:	4b57      	ldr	r3, [pc, #348]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a78e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a792:	4a56      	ldr	r2, [pc, #344]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a794:	f043 0304 	orr.w	r3, r3, #4
 800a798:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a79c:	4b53      	ldr	r3, [pc, #332]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a79e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	60bb      	str	r3, [r7, #8]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a7ae:	f7f8 fcc3 	bl	8003138 <HAL_GetTick>
 800a7b2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a7b4:	4b4e      	ldr	r3, [pc, #312]	@ (800a8f0 <HAL_RCC_ClockConfig+0x28c>)
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00f      	beq.n	800a7e0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a7c0:	e008      	b.n	800a7d4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a7c2:	f7f8 fcb9 	bl	8003138 <HAL_GetTick>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d901      	bls.n	800a7d4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e12b      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a7d4:	4b46      	ldr	r3, [pc, #280]	@ (800a8f0 <HAL_RCC_ClockConfig+0x28c>)
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d0f0      	beq.n	800a7c2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a7e0:	7dfb      	ldrb	r3, [r7, #23]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d107      	bne.n	800a7f6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a7e6:	4b41      	ldr	r3, [pc, #260]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a7e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7ec:	4a3f      	ldr	r2, [pc, #252]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a7ee:	f023 0304 	bic.w	r3, r3, #4
 800a7f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a7f6:	4b3d      	ldr	r3, [pc, #244]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d121      	bne.n	800a846 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e112      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d107      	bne.n	800a81e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a80e:	4b37      	ldr	r3, [pc, #220]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d115      	bne.n	800a846 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e106      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d107      	bne.n	800a836 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a826:	4b31      	ldr	r3, [pc, #196]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 0304 	and.w	r3, r3, #4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d109      	bne.n	800a846 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e0fa      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a836:	4b2d      	ldr	r3, [pc, #180]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e0f2      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a846:	4b29      	ldr	r3, [pc, #164]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a848:	69db      	ldr	r3, [r3, #28]
 800a84a:	f023 0203 	bic.w	r2, r3, #3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	4926      	ldr	r1, [pc, #152]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a854:	4313      	orrs	r3, r2
 800a856:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a858:	f7f8 fc6e 	bl	8003138 <HAL_GetTick>
 800a85c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	2b03      	cmp	r3, #3
 800a864:	d112      	bne.n	800a88c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a866:	e00a      	b.n	800a87e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a868:	f7f8 fc66 	bl	8003138 <HAL_GetTick>
 800a86c:	4602      	mov	r2, r0
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a876:	4293      	cmp	r3, r2
 800a878:	d901      	bls.n	800a87e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e0d6      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a87e:	4b1b      	ldr	r3, [pc, #108]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	f003 030c 	and.w	r3, r3, #12
 800a886:	2b0c      	cmp	r3, #12
 800a888:	d1ee      	bne.n	800a868 <HAL_RCC_ClockConfig+0x204>
 800a88a:	e044      	b.n	800a916 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d112      	bne.n	800a8ba <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a894:	e00a      	b.n	800a8ac <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a896:	f7f8 fc4f 	bl	8003138 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d901      	bls.n	800a8ac <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e0bf      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8ac:	4b0f      	ldr	r3, [pc, #60]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a8ae:	69db      	ldr	r3, [r3, #28]
 800a8b0:	f003 030c 	and.w	r3, r3, #12
 800a8b4:	2b08      	cmp	r3, #8
 800a8b6:	d1ee      	bne.n	800a896 <HAL_RCC_ClockConfig+0x232>
 800a8b8:	e02d      	b.n	800a916 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d123      	bne.n	800a90a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a8c2:	e00a      	b.n	800a8da <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8c4:	f7f8 fc38 	bl	8003138 <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d901      	bls.n	800a8da <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e0a8      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a8da:	4b04      	ldr	r3, [pc, #16]	@ (800a8ec <HAL_RCC_ClockConfig+0x288>)
 800a8dc:	69db      	ldr	r3, [r3, #28]
 800a8de:	f003 030c 	and.w	r3, r3, #12
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1ee      	bne.n	800a8c4 <HAL_RCC_ClockConfig+0x260>
 800a8e6:	e016      	b.n	800a916 <HAL_RCC_ClockConfig+0x2b2>
 800a8e8:	40022000 	.word	0x40022000
 800a8ec:	46020c00 	.word	0x46020c00
 800a8f0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8f4:	f7f8 fc20 	bl	8003138 <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a902:	4293      	cmp	r3, r2
 800a904:	d901      	bls.n	800a90a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a906:	2303      	movs	r3, #3
 800a908:	e090      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a90a:	4b4a      	ldr	r3, [pc, #296]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	f003 030c 	and.w	r3, r3, #12
 800a912:	2b04      	cmp	r3, #4
 800a914:	d1ee      	bne.n	800a8f4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0302 	and.w	r3, r3, #2
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d010      	beq.n	800a944 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	4b43      	ldr	r3, [pc, #268]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	f003 030f 	and.w	r3, r3, #15
 800a92e:	429a      	cmp	r2, r3
 800a930:	d208      	bcs.n	800a944 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a932:	4b40      	ldr	r3, [pc, #256]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	f023 020f 	bic.w	r2, r3, #15
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	493d      	ldr	r1, [pc, #244]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a940:	4313      	orrs	r3, r2
 800a942:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a944:	4b3c      	ldr	r3, [pc, #240]	@ (800aa38 <HAL_RCC_ClockConfig+0x3d4>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 030f 	and.w	r3, r3, #15
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d210      	bcs.n	800a974 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a952:	4b39      	ldr	r3, [pc, #228]	@ (800aa38 <HAL_RCC_ClockConfig+0x3d4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f023 020f 	bic.w	r2, r3, #15
 800a95a:	4937      	ldr	r1, [pc, #220]	@ (800aa38 <HAL_RCC_ClockConfig+0x3d4>)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	4313      	orrs	r3, r2
 800a960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a962:	4b35      	ldr	r3, [pc, #212]	@ (800aa38 <HAL_RCC_ClockConfig+0x3d4>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 030f 	and.w	r3, r3, #15
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d001      	beq.n	800a974 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e05b      	b.n	800aa2c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d010      	beq.n	800a9a2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	4b2b      	ldr	r3, [pc, #172]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a986:	6a1b      	ldr	r3, [r3, #32]
 800a988:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d208      	bcs.n	800a9a2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a990:	4b28      	ldr	r3, [pc, #160]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a992:	6a1b      	ldr	r3, [r3, #32]
 800a994:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	4925      	ldr	r1, [pc, #148]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0308 	and.w	r3, r3, #8
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d012      	beq.n	800a9d4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	691a      	ldr	r2, [r3, #16]
 800a9b2:	4b20      	ldr	r3, [pc, #128]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a9b4:	6a1b      	ldr	r3, [r3, #32]
 800a9b6:	091b      	lsrs	r3, r3, #4
 800a9b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d209      	bcs.n	800a9d4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a9c0:	4b1c      	ldr	r3, [pc, #112]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	4919      	ldr	r1, [pc, #100]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 0310 	and.w	r3, r3, #16
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d010      	beq.n	800aa02 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	695a      	ldr	r2, [r3, #20]
 800a9e4:	4b13      	ldr	r3, [pc, #76]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d208      	bcs.n	800aa02 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a9f0:	4b10      	ldr	r3, [pc, #64]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	695b      	ldr	r3, [r3, #20]
 800a9fc:	490d      	ldr	r1, [pc, #52]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800aa02:	f000 f821 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800aa06:	4602      	mov	r2, r0
 800aa08:	4b0a      	ldr	r3, [pc, #40]	@ (800aa34 <HAL_RCC_ClockConfig+0x3d0>)
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	f003 030f 	and.w	r3, r3, #15
 800aa10:	490a      	ldr	r1, [pc, #40]	@ (800aa3c <HAL_RCC_ClockConfig+0x3d8>)
 800aa12:	5ccb      	ldrb	r3, [r1, r3]
 800aa14:	fa22 f303 	lsr.w	r3, r2, r3
 800aa18:	4a09      	ldr	r2, [pc, #36]	@ (800aa40 <HAL_RCC_ClockConfig+0x3dc>)
 800aa1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aa1c:	4b09      	ldr	r3, [pc, #36]	@ (800aa44 <HAL_RCC_ClockConfig+0x3e0>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7f8 faff 	bl	8003024 <HAL_InitTick>
 800aa26:	4603      	mov	r3, r0
 800aa28:	73fb      	strb	r3, [r7, #15]

  return status;
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	46020c00 	.word	0x46020c00
 800aa38:	40022000 	.word	0x40022000
 800aa3c:	08011570 	.word	0x08011570
 800aa40:	20000000 	.word	0x20000000
 800aa44:	20000004 	.word	0x20000004

0800aa48 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b08b      	sub	sp, #44	@ 0x2c
 800aa4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa56:	4b78      	ldr	r3, [pc, #480]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	f003 030c 	and.w	r3, r3, #12
 800aa5e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa60:	4b75      	ldr	r3, [pc, #468]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aa62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa64:	f003 0303 	and.w	r3, r3, #3
 800aa68:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d005      	beq.n	800aa7c <HAL_RCC_GetSysClockFreq+0x34>
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	2b0c      	cmp	r3, #12
 800aa74:	d121      	bne.n	800aaba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d11e      	bne.n	800aaba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800aa7c:	4b6e      	ldr	r3, [pc, #440]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d107      	bne.n	800aa98 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800aa88:	4b6b      	ldr	r3, [pc, #428]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aa8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa8e:	0b1b      	lsrs	r3, r3, #12
 800aa90:	f003 030f 	and.w	r3, r3, #15
 800aa94:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa96:	e005      	b.n	800aaa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800aa98:	4b67      	ldr	r3, [pc, #412]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	0f1b      	lsrs	r3, r3, #28
 800aa9e:	f003 030f 	and.w	r3, r3, #15
 800aaa2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aaa4:	4a65      	ldr	r2, [pc, #404]	@ (800ac3c <HAL_RCC_GetSysClockFreq+0x1f4>)
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaac:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d110      	bne.n	800aad6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800aab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800aab8:	e00d      	b.n	800aad6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aaba:	4b5f      	ldr	r3, [pc, #380]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	f003 030c 	and.w	r3, r3, #12
 800aac2:	2b04      	cmp	r3, #4
 800aac4:	d102      	bne.n	800aacc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aac6:	4b5e      	ldr	r3, [pc, #376]	@ (800ac40 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800aac8:	623b      	str	r3, [r7, #32]
 800aaca:	e004      	b.n	800aad6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	2b08      	cmp	r3, #8
 800aad0:	d101      	bne.n	800aad6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aad2:	4b5b      	ldr	r3, [pc, #364]	@ (800ac40 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800aad4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	2b0c      	cmp	r3, #12
 800aada:	f040 80a5 	bne.w	800ac28 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800aade:	4b56      	ldr	r3, [pc, #344]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae2:	f003 0303 	and.w	r3, r3, #3
 800aae6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800aae8:	4b53      	ldr	r3, [pc, #332]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aaea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaec:	0a1b      	lsrs	r3, r3, #8
 800aaee:	f003 030f 	and.w	r3, r3, #15
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800aaf6:	4b50      	ldr	r3, [pc, #320]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aaf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafa:	091b      	lsrs	r3, r3, #4
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ab02:	4b4d      	ldr	r3, [pc, #308]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab06:	08db      	lsrs	r3, r3, #3
 800ab08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	fb02 f303 	mul.w	r3, r2, r3
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d003      	beq.n	800ab2c <HAL_RCC_GetSysClockFreq+0xe4>
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d022      	beq.n	800ab70 <HAL_RCC_GetSysClockFreq+0x128>
 800ab2a:	e043      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	ee07 3a90 	vmov	s15, r3
 800ab32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab36:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800ac44 <HAL_RCC_GetSysClockFreq+0x1fc>
 800ab3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab3e:	4b3e      	ldr	r3, [pc, #248]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab46:	ee07 3a90 	vmov	s15, r3
 800ab4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ab4e:	ed97 6a01 	vldr	s12, [r7, #4]
 800ab52:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800ac48 <HAL_RCC_GetSysClockFreq+0x200>
 800ab56:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ab5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ab5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab62:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ab66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab6e:	e046      	b.n	800abfe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800ac44 <HAL_RCC_GetSysClockFreq+0x1fc>
 800ab7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab82:	4b2d      	ldr	r3, [pc, #180]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8a:	ee07 3a90 	vmov	s15, r3
 800ab8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ab92:	ed97 6a01 	vldr	s12, [r7, #4]
 800ab96:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800ac48 <HAL_RCC_GetSysClockFreq+0x200>
 800ab9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ab9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800aba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abb2:	e024      	b.n	800abfe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	ee07 3a90 	vmov	s15, r3
 800abc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abcc:	4b1a      	ldr	r3, [pc, #104]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd4:	ee07 3a90 	vmov	s15, r3
 800abd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800abdc:	ed97 6a01 	vldr	s12, [r7, #4]
 800abe0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800ac48 <HAL_RCC_GetSysClockFreq+0x200>
 800abe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800abec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abfc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800abfe:	4b0e      	ldr	r3, [pc, #56]	@ (800ac38 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac02:	0e1b      	lsrs	r3, r3, #24
 800ac04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac08:	3301      	adds	r3, #1
 800ac0a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac16:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac22:	ee17 3a90 	vmov	r3, s15
 800ac26:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800ac28:	6a3b      	ldr	r3, [r7, #32]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	372c      	adds	r7, #44	@ 0x2c
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	46020c00 	.word	0x46020c00
 800ac3c:	08011588 	.word	0x08011588
 800ac40:	00f42400 	.word	0x00f42400
 800ac44:	4b742400 	.word	0x4b742400
 800ac48:	46000000 	.word	0x46000000

0800ac4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ac50:	f7ff fefa 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800ac54:	4602      	mov	r2, r0
 800ac56:	4b07      	ldr	r3, [pc, #28]	@ (800ac74 <HAL_RCC_GetHCLKFreq+0x28>)
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	f003 030f 	and.w	r3, r3, #15
 800ac5e:	4906      	ldr	r1, [pc, #24]	@ (800ac78 <HAL_RCC_GetHCLKFreq+0x2c>)
 800ac60:	5ccb      	ldrb	r3, [r1, r3]
 800ac62:	fa22 f303 	lsr.w	r3, r2, r3
 800ac66:	4a05      	ldr	r2, [pc, #20]	@ (800ac7c <HAL_RCC_GetHCLKFreq+0x30>)
 800ac68:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800ac6a:	4b04      	ldr	r3, [pc, #16]	@ (800ac7c <HAL_RCC_GetHCLKFreq+0x30>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	46020c00 	.word	0x46020c00
 800ac78:	08011570 	.word	0x08011570
 800ac7c:	20000000 	.word	0x20000000

0800ac80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ac84:	f7ff ffe2 	bl	800ac4c <HAL_RCC_GetHCLKFreq>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	4b05      	ldr	r3, [pc, #20]	@ (800aca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	091b      	lsrs	r3, r3, #4
 800ac90:	f003 0307 	and.w	r3, r3, #7
 800ac94:	4903      	ldr	r1, [pc, #12]	@ (800aca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac96:	5ccb      	ldrb	r3, [r1, r3]
 800ac98:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	46020c00 	.word	0x46020c00
 800aca4:	08011580 	.word	0x08011580

0800aca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800acac:	f7ff ffce 	bl	800ac4c <HAL_RCC_GetHCLKFreq>
 800acb0:	4602      	mov	r2, r0
 800acb2:	4b05      	ldr	r3, [pc, #20]	@ (800acc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	0a1b      	lsrs	r3, r3, #8
 800acb8:	f003 0307 	and.w	r3, r3, #7
 800acbc:	4903      	ldr	r1, [pc, #12]	@ (800accc <HAL_RCC_GetPCLK2Freq+0x24>)
 800acbe:	5ccb      	ldrb	r3, [r1, r3]
 800acc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	46020c00 	.word	0x46020c00
 800accc:	08011580 	.word	0x08011580

0800acd0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800acd4:	f7ff ffba 	bl	800ac4c <HAL_RCC_GetHCLKFreq>
 800acd8:	4602      	mov	r2, r0
 800acda:	4b05      	ldr	r3, [pc, #20]	@ (800acf0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800acdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acde:	091b      	lsrs	r3, r3, #4
 800ace0:	f003 0307 	and.w	r3, r3, #7
 800ace4:	4903      	ldr	r1, [pc, #12]	@ (800acf4 <HAL_RCC_GetPCLK3Freq+0x24>)
 800ace6:	5ccb      	ldrb	r3, [r1, r3]
 800ace8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acec:	4618      	mov	r0, r3
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	46020c00 	.word	0x46020c00
 800acf4:	08011580 	.word	0x08011580

0800acf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ad00:	4b3e      	ldr	r3, [pc, #248]	@ (800adfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad06:	f003 0304 	and.w	r3, r3, #4
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ad0e:	f7fe fd21 	bl	8009754 <HAL_PWREx_GetVoltageRange>
 800ad12:	6178      	str	r0, [r7, #20]
 800ad14:	e019      	b.n	800ad4a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad16:	4b39      	ldr	r3, [pc, #228]	@ (800adfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad1c:	4a37      	ldr	r2, [pc, #220]	@ (800adfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad1e:	f043 0304 	orr.w	r3, r3, #4
 800ad22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ad26:	4b35      	ldr	r3, [pc, #212]	@ (800adfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	60fb      	str	r3, [r7, #12]
 800ad32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ad34:	f7fe fd0e 	bl	8009754 <HAL_PWREx_GetVoltageRange>
 800ad38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ad3a:	4b30      	ldr	r3, [pc, #192]	@ (800adfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad40:	4a2e      	ldr	r2, [pc, #184]	@ (800adfc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ad42:	f023 0304 	bic.w	r3, r3, #4
 800ad46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad50:	d003      	beq.n	800ad5a <RCC_SetFlashLatencyFromMSIRange+0x62>
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad58:	d109      	bne.n	800ad6e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad60:	d202      	bcs.n	800ad68 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800ad62:	2301      	movs	r3, #1
 800ad64:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ad66:	e033      	b.n	800add0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800ad68:	2300      	movs	r3, #0
 800ad6a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ad6c:	e030      	b.n	800add0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad74:	d208      	bcs.n	800ad88 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad7c:	d102      	bne.n	800ad84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800ad7e:	2303      	movs	r3, #3
 800ad80:	613b      	str	r3, [r7, #16]
 800ad82:	e025      	b.n	800add0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e035      	b.n	800adf4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad8e:	d90f      	bls.n	800adb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d109      	bne.n	800adaa <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad9c:	d902      	bls.n	800ada4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800ad9e:	2300      	movs	r3, #0
 800ada0:	613b      	str	r3, [r7, #16]
 800ada2:	e015      	b.n	800add0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800ada4:	2301      	movs	r3, #1
 800ada6:	613b      	str	r3, [r7, #16]
 800ada8:	e012      	b.n	800add0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800adaa:	2300      	movs	r3, #0
 800adac:	613b      	str	r3, [r7, #16]
 800adae:	e00f      	b.n	800add0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adb6:	d109      	bne.n	800adcc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adbe:	d102      	bne.n	800adc6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800adc0:	2301      	movs	r3, #1
 800adc2:	613b      	str	r3, [r7, #16]
 800adc4:	e004      	b.n	800add0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800adc6:	2302      	movs	r3, #2
 800adc8:	613b      	str	r3, [r7, #16]
 800adca:	e001      	b.n	800add0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800adcc:	2301      	movs	r3, #1
 800adce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800add0:	4b0b      	ldr	r3, [pc, #44]	@ (800ae00 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f023 020f 	bic.w	r2, r3, #15
 800add8:	4909      	ldr	r1, [pc, #36]	@ (800ae00 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	4313      	orrs	r3, r2
 800adde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800ade0:	4b07      	ldr	r3, [pc, #28]	@ (800ae00 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 030f 	and.w	r3, r3, #15
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	429a      	cmp	r2, r3
 800adec:	d001      	beq.n	800adf2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	e000      	b.n	800adf4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3718      	adds	r7, #24
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	46020c00 	.word	0x46020c00
 800ae00:	40022000 	.word	0x40022000

0800ae04 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800ae04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae08:	b0c8      	sub	sp, #288	@ 0x120
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae10:	2300      	movs	r3, #0
 800ae12:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae16:	2300      	movs	r3, #0
 800ae18:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ae1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f002 0401 	and.w	r4, r2, #1
 800ae28:	2500      	movs	r5, #0
 800ae2a:	ea54 0305 	orrs.w	r3, r4, r5
 800ae2e:	d00b      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800ae30:	4bd5      	ldr	r3, [pc, #852]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae36:	f023 0103 	bic.w	r1, r3, #3
 800ae3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae40:	4ad1      	ldr	r2, [pc, #836]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae42:	430b      	orrs	r3, r1
 800ae44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ae48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f002 0802 	and.w	r8, r2, #2
 800ae54:	f04f 0900 	mov.w	r9, #0
 800ae58:	ea58 0309 	orrs.w	r3, r8, r9
 800ae5c:	d00b      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800ae5e:	4bca      	ldr	r3, [pc, #808]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae64:	f023 010c 	bic.w	r1, r3, #12
 800ae68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae6e:	4ac6      	ldr	r2, [pc, #792]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae70:	430b      	orrs	r3, r1
 800ae72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ae76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	f002 0a04 	and.w	sl, r2, #4
 800ae82:	f04f 0b00 	mov.w	fp, #0
 800ae86:	ea5a 030b 	orrs.w	r3, sl, fp
 800ae8a:	d00b      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800ae8c:	4bbe      	ldr	r3, [pc, #760]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae92:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ae96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae9c:	4aba      	ldr	r2, [pc, #744]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f002 0308 	and.w	r3, r2, #8
 800aeb0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800aeba:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800aebe:	460b      	mov	r3, r1
 800aec0:	4313      	orrs	r3, r2
 800aec2:	d00b      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800aec4:	4bb0      	ldr	r3, [pc, #704]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aeca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800aece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aed4:	4aac      	ldr	r2, [pc, #688]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aed6:	430b      	orrs	r3, r1
 800aed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800aedc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f002 0310 	and.w	r3, r2, #16
 800aee8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800aeec:	2300      	movs	r3, #0
 800aeee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aef2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800aef6:	460b      	mov	r3, r1
 800aef8:	4313      	orrs	r3, r2
 800aefa:	d00b      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800aefc:	4ba2      	ldr	r3, [pc, #648]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aefe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800af06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af0c:	4a9e      	ldr	r2, [pc, #632]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af0e:	430b      	orrs	r3, r1
 800af10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800af14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800af20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800af24:	2300      	movs	r3, #0
 800af26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800af2a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800af2e:	460b      	mov	r3, r1
 800af30:	4313      	orrs	r3, r2
 800af32:	d00b      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800af34:	4b94      	ldr	r3, [pc, #592]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800af3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af44:	4a90      	ldr	r2, [pc, #576]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af46:	430b      	orrs	r3, r1
 800af48:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f002 0320 	and.w	r3, r2, #32
 800af58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800af5c:	2300      	movs	r3, #0
 800af5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af62:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800af66:	460b      	mov	r3, r1
 800af68:	4313      	orrs	r3, r2
 800af6a:	d00b      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800af6c:	4b86      	ldr	r3, [pc, #536]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af72:	f023 0107 	bic.w	r1, r3, #7
 800af76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af7c:	4a82      	ldr	r2, [pc, #520]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af7e:	430b      	orrs	r3, r1
 800af80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800af84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800af90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800af94:	2300      	movs	r3, #0
 800af96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800af9a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4313      	orrs	r3, r2
 800afa2:	d00b      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800afa4:	4b78      	ldr	r3, [pc, #480]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afaa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800afae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afb4:	4a74      	ldr	r2, [pc, #464]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afb6:	430b      	orrs	r3, r1
 800afb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800afbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800afc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800afcc:	2300      	movs	r3, #0
 800afce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800afd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800afd6:	460b      	mov	r3, r1
 800afd8:	4313      	orrs	r3, r2
 800afda:	d00b      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800afdc:	4b6a      	ldr	r3, [pc, #424]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afe2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800afe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afec:	4a66      	ldr	r2, [pc, #408]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afee:	430b      	orrs	r3, r1
 800aff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b004:	2300      	movs	r3, #0
 800b006:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b00a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b00e:	460b      	mov	r3, r1
 800b010:	4313      	orrs	r3, r2
 800b012:	d00b      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b014:	4b5c      	ldr	r3, [pc, #368]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b01a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b024:	4a58      	ldr	r2, [pc, #352]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b026:	430b      	orrs	r3, r1
 800b028:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b03c:	2300      	movs	r3, #0
 800b03e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b042:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b046:	460b      	mov	r3, r1
 800b048:	4313      	orrs	r3, r2
 800b04a:	d00b      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b04c:	4b4e      	ldr	r3, [pc, #312]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b04e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b052:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b05a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b05c:	4a4a      	ldr	r2, [pc, #296]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b05e:	430b      	orrs	r3, r1
 800b060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b070:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b074:	2300      	movs	r3, #0
 800b076:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b07a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b07e:	460b      	mov	r3, r1
 800b080:	4313      	orrs	r3, r2
 800b082:	d00b      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b084:	4b40      	ldr	r3, [pc, #256]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b086:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b08a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b08e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b094:	4a3c      	ldr	r2, [pc, #240]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b096:	430b      	orrs	r3, r1
 800b098:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b09c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b0a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b0b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	d00c      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b0bc:	4b32      	ldr	r3, [pc, #200]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ce:	4a2e      	ldr	r2, [pc, #184]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0d0:	430b      	orrs	r3, r1
 800b0d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b0e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b0ec:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	d00c      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b0f6:	4b24      	ldr	r3, [pc, #144]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b0fc:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b108:	4a1f      	ldr	r2, [pc, #124]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b10a:	430b      	orrs	r3, r1
 800b10c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b118:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b11c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b120:	2300      	movs	r3, #0
 800b122:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b126:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b12a:	460b      	mov	r3, r1
 800b12c:	4313      	orrs	r3, r2
 800b12e:	d00c      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b130:	4b15      	ldr	r3, [pc, #84]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b136:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b13a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b142:	4a11      	ldr	r2, [pc, #68]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b144:	430b      	orrs	r3, r1
 800b146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b14a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b15a:	2300      	movs	r3, #0
 800b15c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b160:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b164:	460b      	mov	r3, r1
 800b166:	4313      	orrs	r3, r2
 800b168:	d010      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b16a:	4b07      	ldr	r3, [pc, #28]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b16c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b170:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b17c:	4a02      	ldr	r2, [pc, #8]	@ (800b188 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b17e:	430b      	orrs	r3, r1
 800b180:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b184:	e002      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b186:	bf00      	nop
 800b188:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b18c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b19c:	2300      	movs	r3, #0
 800b19e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b1a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	d04c      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b1ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b1b4:	2b80      	cmp	r3, #128	@ 0x80
 800b1b6:	d02d      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b1b8:	2b80      	cmp	r3, #128	@ 0x80
 800b1ba:	d827      	bhi.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b1bc:	2b60      	cmp	r3, #96	@ 0x60
 800b1be:	d02b      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b1c0:	2b60      	cmp	r3, #96	@ 0x60
 800b1c2:	d823      	bhi.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b1c4:	2b40      	cmp	r3, #64	@ 0x40
 800b1c6:	d006      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b1c8:	2b40      	cmp	r3, #64	@ 0x40
 800b1ca:	d81f      	bhi.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d009      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	d011      	beq.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b1d4:	e01a      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b1d6:	4bc0      	ldr	r3, [pc, #768]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1da:	4abf      	ldr	r2, [pc, #764]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b1dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1e0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b1e2:	e01a      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b1e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f002 fcd6 	bl	800db9c <RCCEx_PLL2_Config>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b1f6:	e010      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b1f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1fc:	332c      	adds	r3, #44	@ 0x2c
 800b1fe:	4618      	mov	r0, r3
 800b200:	f002 fd64 	bl	800dccc <RCCEx_PLL3_Config>
 800b204:	4603      	mov	r3, r0
 800b206:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b20a:	e006      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b212:	e002      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b214:	bf00      	nop
 800b216:	e000      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b21a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10d      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b222:	4bad      	ldr	r3, [pc, #692]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b224:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b228:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b22c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b230:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b234:	4aa8      	ldr	r2, [pc, #672]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b236:	430b      	orrs	r3, r1
 800b238:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b23c:	e003      	b.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b23e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b242:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b252:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b256:	2300      	movs	r3, #0
 800b258:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b25c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b260:	460b      	mov	r3, r1
 800b262:	4313      	orrs	r3, r2
 800b264:	d053      	beq.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b26a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b26e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b272:	d033      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b278:	d82c      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b27a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b27e:	d02f      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b280:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b284:	d826      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b28a:	d008      	beq.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b28c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b290:	d820      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b29a:	d011      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b29c:	e01a      	b.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b29e:	4b8e      	ldr	r3, [pc, #568]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a2:	4a8d      	ldr	r2, [pc, #564]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2a8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b2aa:	e01a      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b2ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f002 fc72 	bl	800db9c <RCCEx_PLL2_Config>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b2be:	e010      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b2c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c4:	332c      	adds	r3, #44	@ 0x2c
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f002 fd00 	bl	800dccc <RCCEx_PLL3_Config>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b2d2:	e006      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b2da:	e002      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b2dc:	bf00      	nop
 800b2de:	e000      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b2e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2e2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10d      	bne.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b2ea:	4b7b      	ldr	r3, [pc, #492]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b2f0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b2f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2fc:	4a76      	ldr	r2, [pc, #472]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2fe:	430b      	orrs	r3, r1
 800b300:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b304:	e003      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b306:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b30a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b31a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b31e:	2300      	movs	r3, #0
 800b320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b324:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b328:	460b      	mov	r3, r1
 800b32a:	4313      	orrs	r3, r2
 800b32c:	d046      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b332:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b336:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b33a:	d028      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b33c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b340:	d821      	bhi.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b346:	d022      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b34c:	d81b      	bhi.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b34e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b352:	d01c      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b354:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b358:	d815      	bhi.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b35a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b35e:	d008      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b364:	d80f      	bhi.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b366:	2b00      	cmp	r3, #0
 800b368:	d011      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b36a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b36e:	d00e      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b370:	e009      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b376:	3308      	adds	r3, #8
 800b378:	4618      	mov	r0, r3
 800b37a:	f002 fc0f 	bl	800db9c <RCCEx_PLL2_Config>
 800b37e:	4603      	mov	r3, r0
 800b380:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b384:	e004      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b38c:	e000      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b38e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b390:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10d      	bne.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b398:	4b4f      	ldr	r3, [pc, #316]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b39a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b39e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b3aa:	4a4b      	ldr	r2, [pc, #300]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b3b2:	e003      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3b8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b3bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b3c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b3d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	d03f      	beq.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b3dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d81e      	bhi.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b3e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b42f 	.word	0x0800b42f
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b413 	.word	0x0800b413
 800b3fc:	0800b42f 	.word	0x0800b42f
 800b400:	0800b42f 	.word	0x0800b42f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b404:	4b34      	ldr	r3, [pc, #208]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b408:	4a33      	ldr	r2, [pc, #204]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b40a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b40e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b410:	e00e      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b416:	332c      	adds	r3, #44	@ 0x2c
 800b418:	4618      	mov	r0, r3
 800b41a:	f002 fc57 	bl	800dccc <RCCEx_PLL3_Config>
 800b41e:	4603      	mov	r3, r0
 800b420:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b424:	e004      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b42c:	e000      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b42e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b430:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10d      	bne.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b438:	4b27      	ldr	r3, [pc, #156]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b43a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b43e:	f023 0107 	bic.w	r1, r3, #7
 800b442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b44a:	4a23      	ldr	r2, [pc, #140]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b44c:	430b      	orrs	r3, r1
 800b44e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b452:	e003      	b.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b454:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b458:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b464:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b46a:	2300      	movs	r3, #0
 800b46c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b46e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b472:	460b      	mov	r3, r1
 800b474:	4313      	orrs	r3, r2
 800b476:	d04c      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b47c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b480:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b484:	d02a      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b48a:	d821      	bhi.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b48c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b490:	d026      	beq.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b492:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b496:	d81b      	bhi.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b498:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b49c:	d00e      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b49e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4a2:	d815      	bhi.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01d      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b4a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4ac:	d110      	bne.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b2:	4a09      	ldr	r2, [pc, #36]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4b8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b4ba:	e014      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4c0:	332c      	adds	r3, #44	@ 0x2c
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f002 fc02 	bl	800dccc <RCCEx_PLL3_Config>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4ce:	e00a      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4d6:	e006      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b4d8:	46020c00 	.word	0x46020c00
        break;
 800b4dc:	bf00      	nop
 800b4de:	e002      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b4e0:	bf00      	nop
 800b4e2:	e000      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b4e4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b4e6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10d      	bne.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b4ee:	4baf      	ldr	r3, [pc, #700]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b4f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b4f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b4f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b500:	4aaa      	ldr	r2, [pc, #680]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b502:	430b      	orrs	r3, r1
 800b504:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b508:	e003      	b.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b50a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b50e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b51e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b520:	2300      	movs	r3, #0
 800b522:	677b      	str	r3, [r7, #116]	@ 0x74
 800b524:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b528:	460b      	mov	r3, r1
 800b52a:	4313      	orrs	r3, r2
 800b52c:	f000 80b5 	beq.w	800b69a <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b530:	2300      	movs	r3, #0
 800b532:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b536:	4b9d      	ldr	r3, [pc, #628]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b53c:	f003 0304 	and.w	r3, r3, #4
 800b540:	2b00      	cmp	r3, #0
 800b542:	d113      	bne.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b544:	4b99      	ldr	r3, [pc, #612]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b54a:	4a98      	ldr	r2, [pc, #608]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b54c:	f043 0304 	orr.w	r3, r3, #4
 800b550:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b554:	4b95      	ldr	r3, [pc, #596]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b55a:	f003 0304 	and.w	r3, r3, #4
 800b55e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b562:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b566:	2301      	movs	r3, #1
 800b568:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b56c:	4b90      	ldr	r3, [pc, #576]	@ (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b570:	4a8f      	ldr	r2, [pc, #572]	@ (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b572:	f043 0301 	orr.w	r3, r3, #1
 800b576:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b578:	f7f7 fdde 	bl	8003138 <HAL_GetTick>
 800b57c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b580:	e00b      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b582:	f7f7 fdd9 	bl	8003138 <HAL_GetTick>
 800b586:	4602      	mov	r2, r0
 800b588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d903      	bls.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b598:	e005      	b.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b59a:	4b85      	ldr	r3, [pc, #532]	@ (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d0ed      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b5a6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d165      	bne.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b5ae:	4b7f      	ldr	r3, [pc, #508]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b5bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d023      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b5cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d01b      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b5d4:	4b75      	ldr	r3, [pc, #468]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b5de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b5e2:	4b72      	ldr	r3, [pc, #456]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5e8:	4a70      	ldr	r2, [pc, #448]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b5f2:	4b6e      	ldr	r3, [pc, #440]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5f8:	4a6c      	ldr	r2, [pc, #432]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b602:	4a6a      	ldr	r2, [pc, #424]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b608:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b60c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	d019      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b618:	f7f7 fd8e 	bl	8003138 <HAL_GetTick>
 800b61c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b620:	e00d      	b.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b622:	f7f7 fd89 	bl	8003138 <HAL_GetTick>
 800b626:	4602      	mov	r2, r0
 800b628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b62c:	1ad2      	subs	r2, r2, r3
 800b62e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b632:	429a      	cmp	r2, r3
 800b634:	d903      	bls.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b63c:	e006      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b63e:	4b5b      	ldr	r3, [pc, #364]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b644:	f003 0302 	and.w	r3, r3, #2
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d0ea      	beq.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b64c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10d      	bne.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b654:	4b55      	ldr	r3, [pc, #340]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b65a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b65e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b662:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b666:	4a51      	ldr	r2, [pc, #324]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b668:	430b      	orrs	r3, r1
 800b66a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b66e:	e008      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b670:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b674:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b678:	e003      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b67a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b67e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b682:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b686:	2b01      	cmp	r3, #1
 800b688:	d107      	bne.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b68a:	4b48      	ldr	r3, [pc, #288]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b68c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b690:	4a46      	ldr	r2, [pc, #280]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b692:	f023 0304 	bic.w	r3, r3, #4
 800b696:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b69a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b6a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b6ac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	d042      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b6b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b6be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b6c2:	d022      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b6c4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b6c8:	d81b      	bhi.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b6ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6ce:	d011      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b6d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6d4:	d815      	bhi.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d019      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b6da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6de:	d110      	bne.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b6e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6e4:	3308      	adds	r3, #8
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f002 fa58 	bl	800db9c <RCCEx_PLL2_Config>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b6f2:	e00d      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6f4:	4b2d      	ldr	r3, [pc, #180]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f8:	4a2c      	ldr	r2, [pc, #176]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6fe:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b700:	e006      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b708:	e002      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b70a:	bf00      	nop
 800b70c:	e000      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b70e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b710:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10d      	bne.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b718:	4b24      	ldr	r3, [pc, #144]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b71a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b71e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b72a:	4a20      	ldr	r2, [pc, #128]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b72c:	430b      	orrs	r3, r1
 800b72e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b732:	e003      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b734:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b738:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b748:	663b      	str	r3, [r7, #96]	@ 0x60
 800b74a:	2300      	movs	r3, #0
 800b74c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b74e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b752:	460b      	mov	r3, r1
 800b754:	4313      	orrs	r3, r2
 800b756:	d031      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b75c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b764:	d00b      	beq.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b76a:	d804      	bhi.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d008      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b774:	d007      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b776:	2301      	movs	r3, #1
 800b778:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b77c:	e004      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b77e:	bf00      	nop
 800b780:	e002      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b782:	bf00      	nop
 800b784:	e000      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b786:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b788:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d111      	bne.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b790:	4b06      	ldr	r3, [pc, #24]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b792:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b79a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b79e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7a2:	4a02      	ldr	r2, [pc, #8]	@ (800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7a4:	430b      	orrs	r3, r1
 800b7a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b7aa:	e007      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b7ac:	46020c00 	.word	0x46020c00
 800b7b0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7b8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b7bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b7c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	d00c      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b7d8:	4bb2      	ldr	r3, [pc, #712]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b7da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7de:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b7e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b7ea:	4aae      	ldr	r2, [pc, #696]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b7ec:	430b      	orrs	r3, r1
 800b7ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b7f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b7fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800b800:	2300      	movs	r3, #0
 800b802:	657b      	str	r3, [r7, #84]	@ 0x54
 800b804:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b808:	460b      	mov	r3, r1
 800b80a:	4313      	orrs	r3, r2
 800b80c:	d019      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b80e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b816:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b81a:	d105      	bne.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b81c:	4ba1      	ldr	r3, [pc, #644]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b820:	4aa0      	ldr	r2, [pc, #640]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b826:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b828:	4b9e      	ldr	r3, [pc, #632]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b82a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b82e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b83a:	4a9a      	ldr	r2, [pc, #616]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b83c:	430b      	orrs	r3, r1
 800b83e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b84e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b850:	2300      	movs	r3, #0
 800b852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b854:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b858:	460b      	mov	r3, r1
 800b85a:	4313      	orrs	r3, r2
 800b85c:	d00c      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b85e:	4b91      	ldr	r3, [pc, #580]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b864:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b86c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b870:	4a8c      	ldr	r2, [pc, #560]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b872:	430b      	orrs	r3, r1
 800b874:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b880:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b884:	643b      	str	r3, [r7, #64]	@ 0x40
 800b886:	2300      	movs	r3, #0
 800b888:	647b      	str	r3, [r7, #68]	@ 0x44
 800b88a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b88e:	460b      	mov	r3, r1
 800b890:	4313      	orrs	r3, r2
 800b892:	d00c      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b894:	4b83      	ldr	r3, [pc, #524]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b89a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b89e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b8a6:	4a7f      	ldr	r2, [pc, #508]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8a8:	430b      	orrs	r3, r1
 800b8aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b8ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b8ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8bc:	2300      	movs	r3, #0
 800b8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	d00c      	beq.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b8ca:	4b76      	ldr	r3, [pc, #472]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b8d0:	f023 0118 	bic.w	r1, r3, #24
 800b8d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b8dc:	4a71      	ldr	r2, [pc, #452]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8de:	430b      	orrs	r3, r1
 800b8e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b8e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b8f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	d032      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b904:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b908:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b90c:	d105      	bne.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b90e:	4b65      	ldr	r3, [pc, #404]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b912:	4a64      	ldr	r2, [pc, #400]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b918:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b91a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b91e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b922:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b926:	d108      	bne.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b92c:	3308      	adds	r3, #8
 800b92e:	4618      	mov	r0, r3
 800b930:	f002 f934 	bl	800db9c <RCCEx_PLL2_Config>
 800b934:	4603      	mov	r3, r0
 800b936:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b93a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d10d      	bne.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b942:	4b58      	ldr	r3, [pc, #352]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b944:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b948:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b94c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b950:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b954:	4a53      	ldr	r2, [pc, #332]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b956:	430b      	orrs	r3, r1
 800b958:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b95c:	e003      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b95e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b962:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	2100      	movs	r1, #0
 800b970:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b978:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b97c:	460b      	mov	r3, r1
 800b97e:	4313      	orrs	r3, r2
 800b980:	d04a      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800b982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b986:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b98a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b98e:	d01e      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800b990:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b994:	d825      	bhi.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b996:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b99a:	d00e      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800b99c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9a0:	d81f      	bhi.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d021      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800b9a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9aa:	d11a      	bne.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ac:	4b3d      	ldr	r3, [pc, #244]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b0:	4a3c      	ldr	r2, [pc, #240]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9b6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b9b8:	e018      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b9ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9be:	3308      	adds	r3, #8
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f002 f8eb 	bl	800db9c <RCCEx_PLL2_Config>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b9cc:	e00e      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b9ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9d2:	332c      	adds	r3, #44	@ 0x2c
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f002 f979 	bl	800dccc <RCCEx_PLL3_Config>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b9e0:	e004      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b9e8:	e000      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800b9ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10d      	bne.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800b9f4:	4b2b      	ldr	r3, [pc, #172]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b9fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b9fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ba06:	4927      	ldr	r1, [pc, #156]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800ba0e:	e003      	b.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba10:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba14:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800ba18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800ba24:	623b      	str	r3, [r7, #32]
 800ba26:	2300      	movs	r3, #0
 800ba28:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba2a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4313      	orrs	r3, r2
 800ba32:	d03d      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800ba34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba40:	d00e      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800ba42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba46:	d815      	bhi.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d017      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ba4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba50:	d110      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba52:	4b14      	ldr	r3, [pc, #80]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba56:	4a13      	ldr	r2, [pc, #76]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba5c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800ba5e:	e00e      	b.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba64:	3308      	adds	r3, #8
 800ba66:	4618      	mov	r0, r3
 800ba68:	f002 f898 	bl	800db9c <RCCEx_PLL2_Config>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800ba72:	e004      	b.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800ba74:	2301      	movs	r3, #1
 800ba76:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ba7a:	e000      	b.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ba7c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ba7e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d110      	bne.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800ba86:	4b07      	ldr	r3, [pc, #28]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba8c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ba90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba98:	4902      	ldr	r1, [pc, #8]	@ (800baa4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800baa0:	e006      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800baa2:	bf00      	nop
 800baa4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800baac:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800bab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800babc:	61bb      	str	r3, [r7, #24]
 800babe:	2300      	movs	r3, #0
 800bac0:	61fb      	str	r3, [r7, #28]
 800bac2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bac6:	460b      	mov	r3, r1
 800bac8:	4313      	orrs	r3, r2
 800baca:	d00c      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bacc:	4b68      	ldr	r3, [pc, #416]	@ (800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bad2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bada:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bade:	4964      	ldr	r1, [pc, #400]	@ (800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bae0:	4313      	orrs	r3, r2
 800bae2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	2100      	movs	r1, #0
 800baf0:	6139      	str	r1, [r7, #16]
 800baf2:	f003 0302 	and.w	r3, r3, #2
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bafc:	460b      	mov	r3, r1
 800bafe:	4313      	orrs	r3, r2
 800bb00:	d036      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800bb02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00c      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bb0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb12:	d113      	bne.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb18:	3308      	adds	r3, #8
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f002 f83e 	bl	800db9c <RCCEx_PLL2_Config>
 800bb20:	4603      	mov	r3, r0
 800bb22:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bb26:	e00d      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bb28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb2c:	332c      	adds	r3, #44	@ 0x2c
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f002 f8cc 	bl	800dccc <RCCEx_PLL3_Config>
 800bb34:	4603      	mov	r3, r0
 800bb36:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bb3a:	e003      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb44:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10d      	bne.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800bb4c:	4b48      	ldr	r3, [pc, #288]	@ (800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb52:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800bb56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bb5e:	4944      	ldr	r1, [pc, #272]	@ (800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb60:	4313      	orrs	r3, r2
 800bb62:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bb66:	e003      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb68:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb6c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bb70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	2100      	movs	r1, #0
 800bb7a:	60b9      	str	r1, [r7, #8]
 800bb7c:	f003 0304 	and.w	r3, r3, #4
 800bb80:	60fb      	str	r3, [r7, #12]
 800bb82:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb86:	460b      	mov	r3, r1
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	d024      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bb8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d108      	bne.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bb98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9c:	332c      	adds	r3, #44	@ 0x2c
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f002 f894 	bl	800dccc <RCCEx_PLL3_Config>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800bbaa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10d      	bne.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800bbb2:	4b2f      	ldr	r3, [pc, #188]	@ (800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bbb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbb8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bbbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bbc4:	492a      	ldr	r1, [pc, #168]	@ (800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bbcc:	e003      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbce:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbd2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800bbd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	2100      	movs	r1, #0
 800bbe0:	6039      	str	r1, [r7, #0]
 800bbe2:	f003 0308 	and.w	r3, r3, #8
 800bbe6:	607b      	str	r3, [r7, #4]
 800bbe8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bbec:	460b      	mov	r3, r1
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	d036      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800bbf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbf6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bbfa:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bbfe:	d00d      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800bc00:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bc04:	d811      	bhi.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bc06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc0a:	d012      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bc0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc10:	d80b      	bhi.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00d      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bc16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc1a:	d106      	bne.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc1c:	4b14      	ldr	r3, [pc, #80]	@ (800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc20:	4a13      	ldr	r2, [pc, #76]	@ (800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc26:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800bc28:	e004      	b.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bc30:	e000      	b.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800bc32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc34:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10d      	bne.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800bc3c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc42:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bc46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bc4e:	4908      	ldr	r1, [pc, #32]	@ (800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc56:	e003      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc58:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc5c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800bc60:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc70:	46020c00 	.word	0x46020c00

0800bc74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b089      	sub	sp, #36	@ 0x24
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bc7c:	4ba6      	ldr	r3, [pc, #664]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bc7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc84:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bc86:	4ba4      	ldr	r3, [pc, #656]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800bc90:	4ba1      	ldr	r3, [pc, #644]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bc92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc94:	0a1b      	lsrs	r3, r3, #8
 800bc96:	f003 030f 	and.w	r3, r3, #15
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bc9e:	4b9e      	ldr	r3, [pc, #632]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca2:	091b      	lsrs	r3, r3, #4
 800bca4:	f003 0301 	and.w	r3, r3, #1
 800bca8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bcaa:	4b9b      	ldr	r3, [pc, #620]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bcac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcae:	08db      	lsrs	r3, r3, #3
 800bcb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	fb02 f303 	mul.w	r3, r2, r3
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d062      	beq.n	800bd92 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	f200 8081 	bhi.w	800bdd6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d024      	beq.n	800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d17a      	bne.n	800bdd6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	ee07 3a90 	vmov	s15, r3
 800bce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcea:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bf1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bcee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcf2:	4b89      	ldr	r3, [pc, #548]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bcf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd02:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd06:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bd0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd22:	e08f      	b.n	800be44 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bd24:	4b7c      	ldr	r3, [pc, #496]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d005      	beq.n	800bd3c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800bd30:	4b79      	ldr	r3, [pc, #484]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	0f1b      	lsrs	r3, r3, #28
 800bd36:	f003 030f 	and.w	r3, r3, #15
 800bd3a:	e006      	b.n	800bd4a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800bd3c:	4b76      	ldr	r3, [pc, #472]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd42:	041b      	lsls	r3, r3, #16
 800bd44:	0f1b      	lsrs	r3, r3, #28
 800bd46:	f003 030f 	and.w	r3, r3, #15
 800bd4a:	4a76      	ldr	r2, [pc, #472]	@ (800bf24 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bd4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd50:	ee07 3a90 	vmov	s15, r3
 800bd54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	ee07 3a90 	vmov	s15, r3
 800bd5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	ee07 3a90 	vmov	s15, r3
 800bd6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd70:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd74:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bd78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd84:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bd88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd90:	e058      	b.n	800be44 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	ee07 3a90 	vmov	s15, r3
 800bd98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bda0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda4:	4b5c      	ldr	r3, [pc, #368]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bda6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bda8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdac:	ee07 3a90 	vmov	s15, r3
 800bdb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdb4:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdb8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bdbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd4:	e036      	b.n	800be44 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bdd6:	4b50      	ldr	r3, [pc, #320]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d005      	beq.n	800bdee <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800bde2:	4b4d      	ldr	r3, [pc, #308]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	0f1b      	lsrs	r3, r3, #28
 800bde8:	f003 030f 	and.w	r3, r3, #15
 800bdec:	e006      	b.n	800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800bdee:	4b4a      	ldr	r3, [pc, #296]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bdf4:	041b      	lsls	r3, r3, #16
 800bdf6:	0f1b      	lsrs	r3, r3, #28
 800bdf8:	f003 030f 	and.w	r3, r3, #15
 800bdfc:	4a49      	ldr	r2, [pc, #292]	@ (800bf24 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bdfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	ee07 3a90 	vmov	s15, r3
 800be10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be22:	ed97 6a02 	vldr	s12, [r7, #8]
 800be26:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be36:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be42:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800be44:	4b34      	ldr	r3, [pc, #208]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d017      	beq.n	800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800be50:	4b31      	ldr	r3, [pc, #196]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be54:	0a5b      	lsrs	r3, r3, #9
 800be56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be5a:	ee07 3a90 	vmov	s15, r3
 800be5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800be62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be66:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800be6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be76:	ee17 2a90 	vmov	r2, s15
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	601a      	str	r2, [r3, #0]
 800be7e:	e002      	b.n	800be86 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800be86:	4b24      	ldr	r3, [pc, #144]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d017      	beq.n	800bec2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800be92:	4b21      	ldr	r3, [pc, #132]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be96:	0c1b      	lsrs	r3, r3, #16
 800be98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be9c:	ee07 3a90 	vmov	s15, r3
 800bea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800bea4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bea8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800beac:	edd7 6a07 	vldr	s13, [r7, #28]
 800beb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb8:	ee17 2a90 	vmov	r2, s15
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	605a      	str	r2, [r3, #4]
 800bec0:	e002      	b.n	800bec8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800bec8:	4b13      	ldr	r3, [pc, #76]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800beca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800becc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d017      	beq.n	800bf04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bed4:	4b10      	ldr	r3, [pc, #64]	@ (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bed8:	0e1b      	lsrs	r3, r3, #24
 800beda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bede:	ee07 3a90 	vmov	s15, r3
 800bee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800bee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800beea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800beee:	edd7 6a07 	vldr	s13, [r7, #28]
 800bef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800befa:	ee17 2a90 	vmov	r2, s15
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bf02:	e002      	b.n	800bf0a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	609a      	str	r2, [r3, #8]
}
 800bf0a:	bf00      	nop
 800bf0c:	3724      	adds	r7, #36	@ 0x24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	46020c00 	.word	0x46020c00
 800bf1c:	4b742400 	.word	0x4b742400
 800bf20:	46000000 	.word	0x46000000
 800bf24:	08011588 	.word	0x08011588

0800bf28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b089      	sub	sp, #36	@ 0x24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800bf30:	4ba6      	ldr	r3, [pc, #664]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf38:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800bf3a:	4ba4      	ldr	r3, [pc, #656]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf3e:	f003 0303 	and.w	r3, r3, #3
 800bf42:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800bf44:	4ba1      	ldr	r3, [pc, #644]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf48:	0a1b      	lsrs	r3, r3, #8
 800bf4a:	f003 030f 	and.w	r3, r3, #15
 800bf4e:	3301      	adds	r3, #1
 800bf50:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800bf52:	4b9e      	ldr	r3, [pc, #632]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf56:	091b      	lsrs	r3, r3, #4
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800bf5e:	4b9b      	ldr	r3, [pc, #620]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bf60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf62:	08db      	lsrs	r3, r3, #3
 800bf64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	fb02 f303 	mul.w	r3, r2, r3
 800bf6e:	ee07 3a90 	vmov	s15, r3
 800bf72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf76:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d062      	beq.n	800c046 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	2b03      	cmp	r3, #3
 800bf84:	f200 8081 	bhi.w	800c08a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d024      	beq.n	800bfd8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d17a      	bne.n	800c08a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800bfa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa6:	4b89      	ldr	r3, [pc, #548]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfae:	ee07 3a90 	vmov	s15, r3
 800bfb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bfb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfba:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bfbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bfc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bfc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bfce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfd6:	e08f      	b.n	800c0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800bfd8:	4b7c      	ldr	r3, [pc, #496]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d005      	beq.n	800bff0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800bfe4:	4b79      	ldr	r3, [pc, #484]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	0f1b      	lsrs	r3, r3, #28
 800bfea:	f003 030f 	and.w	r3, r3, #15
 800bfee:	e006      	b.n	800bffe <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800bff0:	4b76      	ldr	r3, [pc, #472]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bff6:	041b      	lsls	r3, r3, #16
 800bff8:	0f1b      	lsrs	r3, r3, #28
 800bffa:	f003 030f 	and.w	r3, r3, #15
 800bffe:	4a76      	ldr	r2, [pc, #472]	@ (800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c004:	ee07 3a90 	vmov	s15, r3
 800c008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	ee07 3a90 	vmov	s15, r3
 800c012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	ee07 3a90 	vmov	s15, r3
 800c020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c024:	ed97 6a02 	vldr	s12, [r7, #8]
 800c028:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c02c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c034:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c038:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c040:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c044:	e058      	b.n	800c0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	ee07 3a90 	vmov	s15, r3
 800c04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c050:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c058:	4b5c      	ldr	r3, [pc, #368]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c05a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c060:	ee07 3a90 	vmov	s15, r3
 800c064:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c068:	ed97 6a02 	vldr	s12, [r7, #8]
 800c06c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c070:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c074:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c078:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c07c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c080:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c084:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c088:	e036      	b.n	800c0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c08a:	4b50      	ldr	r3, [pc, #320]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d005      	beq.n	800c0a2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c096:	4b4d      	ldr	r3, [pc, #308]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	0f1b      	lsrs	r3, r3, #28
 800c09c:	f003 030f 	and.w	r3, r3, #15
 800c0a0:	e006      	b.n	800c0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c0a2:	4b4a      	ldr	r3, [pc, #296]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c0a8:	041b      	lsls	r3, r3, #16
 800c0aa:	0f1b      	lsrs	r3, r3, #28
 800c0ac:	f003 030f 	and.w	r3, r3, #15
 800c0b0:	4a49      	ldr	r2, [pc, #292]	@ (800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0b6:	ee07 3a90 	vmov	s15, r3
 800c0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	ee07 3a90 	vmov	s15, r3
 800c0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	ee07 3a90 	vmov	s15, r3
 800c0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0da:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0f6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c0f8:	4b34      	ldr	r3, [pc, #208]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c100:	2b00      	cmp	r3, #0
 800c102:	d017      	beq.n	800c134 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c104:	4b31      	ldr	r3, [pc, #196]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c108:	0a5b      	lsrs	r3, r3, #9
 800c10a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c11a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c11e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c12a:	ee17 2a90 	vmov	r2, s15
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	e002      	b.n	800c13a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c13a:	4b24      	ldr	r3, [pc, #144]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c13e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c142:	2b00      	cmp	r3, #0
 800c144:	d017      	beq.n	800c176 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c146:	4b21      	ldr	r3, [pc, #132]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c14a:	0c1b      	lsrs	r3, r3, #16
 800c14c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c150:	ee07 3a90 	vmov	s15, r3
 800c154:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c15c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c160:	edd7 6a07 	vldr	s13, [r7, #28]
 800c164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c16c:	ee17 2a90 	vmov	r2, s15
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	605a      	str	r2, [r3, #4]
 800c174:	e002      	b.n	800c17c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c17c:	4b13      	ldr	r3, [pc, #76]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d017      	beq.n	800c1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c188:	4b10      	ldr	r3, [pc, #64]	@ (800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c18a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c18c:	0e1b      	lsrs	r3, r3, #24
 800c18e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c192:	ee07 3a90 	vmov	s15, r3
 800c196:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c19a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c19e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ae:	ee17 2a90 	vmov	r2, s15
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c1b6:	e002      	b.n	800c1be <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	609a      	str	r2, [r3, #8]
}
 800c1be:	bf00      	nop
 800c1c0:	3724      	adds	r7, #36	@ 0x24
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	46020c00 	.word	0x46020c00
 800c1d0:	4b742400 	.word	0x4b742400
 800c1d4:	46000000 	.word	0x46000000
 800c1d8:	08011588 	.word	0x08011588

0800c1dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b089      	sub	sp, #36	@ 0x24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c1e4:	4ba6      	ldr	r3, [pc, #664]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c1e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ec:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c1ee:	4ba4      	ldr	r3, [pc, #656]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c1f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1f2:	f003 0303 	and.w	r3, r3, #3
 800c1f6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c1f8:	4ba1      	ldr	r3, [pc, #644]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c1fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1fc:	0a1b      	lsrs	r3, r3, #8
 800c1fe:	f003 030f 	and.w	r3, r3, #15
 800c202:	3301      	adds	r3, #1
 800c204:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c206:	4b9e      	ldr	r3, [pc, #632]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c20a:	091b      	lsrs	r3, r3, #4
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c212:	4b9b      	ldr	r3, [pc, #620]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c216:	08db      	lsrs	r3, r3, #3
 800c218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	fb02 f303 	mul.w	r3, r2, r3
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2b03      	cmp	r3, #3
 800c232:	d062      	beq.n	800c2fa <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	2b03      	cmp	r3, #3
 800c238:	f200 8081 	bhi.w	800c33e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d024      	beq.n	800c28c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	2b02      	cmp	r3, #2
 800c246:	d17a      	bne.n	800c33e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	ee07 3a90 	vmov	s15, r3
 800c24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c252:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c25a:	4b89      	ldr	r3, [pc, #548]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c25c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c262:	ee07 3a90 	vmov	s15, r3
 800c266:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c26a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c26e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c488 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c272:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c276:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c27a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c286:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c28a:	e08f      	b.n	800c3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c28c:	4b7c      	ldr	r3, [pc, #496]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c294:	2b00      	cmp	r3, #0
 800c296:	d005      	beq.n	800c2a4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c298:	4b79      	ldr	r3, [pc, #484]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	0f1b      	lsrs	r3, r3, #28
 800c29e:	f003 030f 	and.w	r3, r3, #15
 800c2a2:	e006      	b.n	800c2b2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c2a4:	4b76      	ldr	r3, [pc, #472]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c2aa:	041b      	lsls	r3, r3, #16
 800c2ac:	0f1b      	lsrs	r3, r3, #28
 800c2ae:	f003 030f 	and.w	r3, r3, #15
 800c2b2:	4a76      	ldr	r2, [pc, #472]	@ (800c48c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2b8:	ee07 3a90 	vmov	s15, r3
 800c2bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	ee07 3a90 	vmov	s15, r3
 800c2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	ee07 3a90 	vmov	s15, r3
 800c2d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2d8:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2dc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c488 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c2e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c2f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2f8:	e058      	b.n	800c3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	ee07 3a90 	vmov	s15, r3
 800c300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c304:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c30c:	4b5c      	ldr	r3, [pc, #368]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c30e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c314:	ee07 3a90 	vmov	s15, r3
 800c318:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c31c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c320:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c488 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c324:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c328:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c32c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c330:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c334:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c338:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c33c:	e036      	b.n	800c3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c33e:	4b50      	ldr	r3, [pc, #320]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d005      	beq.n	800c356 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c34a:	4b4d      	ldr	r3, [pc, #308]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	0f1b      	lsrs	r3, r3, #28
 800c350:	f003 030f 	and.w	r3, r3, #15
 800c354:	e006      	b.n	800c364 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c356:	4b4a      	ldr	r3, [pc, #296]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c35c:	041b      	lsls	r3, r3, #16
 800c35e:	0f1b      	lsrs	r3, r3, #28
 800c360:	f003 030f 	and.w	r3, r3, #15
 800c364:	4a49      	ldr	r2, [pc, #292]	@ (800c48c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c36a:	ee07 3a90 	vmov	s15, r3
 800c36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	ee07 3a90 	vmov	s15, r3
 800c378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c37c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	ee07 3a90 	vmov	s15, r3
 800c386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c38a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c38e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c488 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c39a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3aa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c3ac:	4b34      	ldr	r3, [pc, #208]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d017      	beq.n	800c3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c3b8:	4b31      	ldr	r3, [pc, #196]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3bc:	0a5b      	lsrs	r3, r3, #9
 800c3be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c3ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3ce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c3d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3de:	ee17 2a90 	vmov	r2, s15
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	601a      	str	r2, [r3, #0]
 800c3e6:	e002      	b.n	800c3ee <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c3ee:	4b24      	ldr	r3, [pc, #144]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d017      	beq.n	800c42a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c3fa:	4b21      	ldr	r3, [pc, #132]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3fe:	0c1b      	lsrs	r3, r3, #16
 800c400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c404:	ee07 3a90 	vmov	s15, r3
 800c408:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c40c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c410:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c414:	edd7 6a07 	vldr	s13, [r7, #28]
 800c418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c41c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c420:	ee17 2a90 	vmov	r2, s15
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	605a      	str	r2, [r3, #4]
 800c428:	e002      	b.n	800c430 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c430:	4b13      	ldr	r3, [pc, #76]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d017      	beq.n	800c46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c43c:	4b10      	ldr	r3, [pc, #64]	@ (800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c43e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c440:	0e1b      	lsrs	r3, r3, #24
 800c442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c446:	ee07 3a90 	vmov	s15, r3
 800c44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c44e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c452:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c456:	edd7 6a07 	vldr	s13, [r7, #28]
 800c45a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c45e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c462:	ee17 2a90 	vmov	r2, s15
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c46a:	e002      	b.n	800c472 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	609a      	str	r2, [r3, #8]
}
 800c472:	bf00      	nop
 800c474:	3724      	adds	r7, #36	@ 0x24
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	46020c00 	.word	0x46020c00
 800c484:	4b742400 	.word	0x4b742400
 800c488:	46000000 	.word	0x46000000
 800c48c:	08011588 	.word	0x08011588

0800c490 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b08e      	sub	sp, #56	@ 0x38
 800c494:	af00      	add	r7, sp, #0
 800c496:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c49e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c4a2:	430b      	orrs	r3, r1
 800c4a4:	d145      	bne.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c4a6:	4ba7      	ldr	r3, [pc, #668]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c4a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4b0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c4b2:	4ba4      	ldr	r3, [pc, #656]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c4b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4b8:	f003 0302 	and.w	r3, r3, #2
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d108      	bne.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4c6:	d104      	bne.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c4c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4ce:	f001 bb5a 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c4d2:	4b9c      	ldr	r3, [pc, #624]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c4d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c4e0:	d114      	bne.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4e8:	d110      	bne.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c4ea:	4b96      	ldr	r3, [pc, #600]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c4ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4f8:	d103      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c4fa:	23fa      	movs	r3, #250	@ 0xfa
 800c4fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c4fe:	f001 bb42 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c502:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c506:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c508:	f001 bb3d 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c50c:	4b8d      	ldr	r3, [pc, #564]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c518:	d107      	bne.n	800c52a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c520:	d103      	bne.n	800c52a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c522:	4b89      	ldr	r3, [pc, #548]	@ (800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c524:	637b      	str	r3, [r7, #52]	@ 0x34
 800c526:	f001 bb2e 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c52a:	2300      	movs	r3, #0
 800c52c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c52e:	f001 bb2a 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c532:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c536:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c53a:	430b      	orrs	r3, r1
 800c53c:	d151      	bne.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c53e:	4b81      	ldr	r3, [pc, #516]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c540:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c544:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c548:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54c:	2b80      	cmp	r3, #128	@ 0x80
 800c54e:	d035      	beq.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c552:	2b80      	cmp	r3, #128	@ 0x80
 800c554:	d841      	bhi.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c558:	2b60      	cmp	r3, #96	@ 0x60
 800c55a:	d02a      	beq.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55e:	2b60      	cmp	r3, #96	@ 0x60
 800c560:	d83b      	bhi.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c564:	2b40      	cmp	r3, #64	@ 0x40
 800c566:	d009      	beq.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56a:	2b40      	cmp	r3, #64	@ 0x40
 800c56c:	d835      	bhi.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00c      	beq.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c576:	2b20      	cmp	r3, #32
 800c578:	d012      	beq.n	800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c57a:	e02e      	b.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c57c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c580:	4618      	mov	r0, r3
 800c582:	f7ff fb77 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c588:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c58a:	f001 bafc 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c58e:	f107 0318 	add.w	r3, r7, #24
 800c592:	4618      	mov	r0, r3
 800c594:	f7ff fcc8 	bl	800bf28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c59c:	f001 baf3 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5a0:	f107 030c 	add.w	r3, r7, #12
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7ff fe19 	bl	800c1dc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5ae:	f001 baea 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c5b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c5b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5b8:	f001 bae5 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5bc:	4b61      	ldr	r3, [pc, #388]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5c8:	d103      	bne.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c5ca:	4b60      	ldr	r3, [pc, #384]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c5cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c5ce:	f001 bada 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5d6:	f001 bad6 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5de:	f001 bad2 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c5e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5e6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c5ea:	430b      	orrs	r3, r1
 800c5ec:	d158      	bne.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c5ee:	4b55      	ldr	r3, [pc, #340]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c5f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c5f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c600:	d03b      	beq.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c608:	d846      	bhi.n	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c610:	d02e      	beq.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c614:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c618:	d83e      	bhi.n	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c620:	d00b      	beq.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c628:	d836      	bhi.n	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00d      	beq.n	800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c636:	d012      	beq.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c638:	e02e      	b.n	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c63a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c63e:	4618      	mov	r0, r3
 800c640:	f7ff fb18 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c646:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c648:	f001 ba9d 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c64c:	f107 0318 	add.w	r3, r7, #24
 800c650:	4618      	mov	r0, r3
 800c652:	f7ff fc69 	bl	800bf28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c65a:	f001 ba94 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c65e:	f107 030c 	add.w	r3, r7, #12
 800c662:	4618      	mov	r0, r3
 800c664:	f7ff fdba 	bl	800c1dc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c66c:	f001 ba8b 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c670:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c674:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c676:	f001 ba86 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c67a:	4b32      	ldr	r3, [pc, #200]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c686:	d103      	bne.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c688:	4b30      	ldr	r3, [pc, #192]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c68a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c68c:	f001 ba7b 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c690:	2300      	movs	r3, #0
 800c692:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c694:	f001 ba77 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c698:	2300      	movs	r3, #0
 800c69a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c69c:	f001 ba73 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c6a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6a4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c6a8:	430b      	orrs	r3, r1
 800c6aa:	d126      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c6ac:	4b25      	ldr	r3, [pc, #148]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c6b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c6b8:	4b22      	ldr	r3, [pc, #136]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6c4:	d106      	bne.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d103      	bne.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c6cc:	4b1f      	ldr	r3, [pc, #124]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c6ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6d0:	f001 ba59 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c6d4:	4b1b      	ldr	r3, [pc, #108]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6e0:	d107      	bne.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6e8:	d103      	bne.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c6ea:	4b19      	ldr	r3, [pc, #100]	@ (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c6ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6ee:	f001 ba4a 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6f6:	f001 ba46 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c6fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6fe:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c702:	430b      	orrs	r3, r1
 800c704:	d16e      	bne.n	800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c706:	4b0f      	ldr	r3, [pc, #60]	@ (800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c70c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c710:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c714:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c718:	d03d      	beq.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c720:	d85c      	bhi.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c728:	d014      	beq.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c730:	d854      	bhi.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c734:	2b00      	cmp	r3, #0
 800c736:	d01f      	beq.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c73e:	d012      	beq.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c740:	e04c      	b.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c742:	bf00      	nop
 800c744:	46020c00 	.word	0x46020c00
 800c748:	0007a120 	.word	0x0007a120
 800c74c:	00f42400 	.word	0x00f42400
 800c750:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c758:	4618      	mov	r0, r3
 800c75a:	f7ff fa8b 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c760:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c762:	f001 ba10 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c766:	f107 0318 	add.w	r3, r7, #24
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7ff fbdc 	bl	800bf28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c774:	f001 ba07 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c778:	4ba7      	ldr	r3, [pc, #668]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c784:	d103      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c786:	4ba5      	ldr	r3, [pc, #660]	@ (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c788:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c78a:	f001 b9fc 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c78e:	2300      	movs	r3, #0
 800c790:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c792:	f001 b9f8 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c796:	4ba0      	ldr	r3, [pc, #640]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f003 0320 	and.w	r3, r3, #32
 800c79e:	2b20      	cmp	r3, #32
 800c7a0:	d118      	bne.n	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c7a2:	4b9d      	ldr	r3, [pc, #628]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d005      	beq.n	800c7ba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c7ae:	4b9a      	ldr	r3, [pc, #616]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	0e1b      	lsrs	r3, r3, #24
 800c7b4:	f003 030f 	and.w	r3, r3, #15
 800c7b8:	e006      	b.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c7ba:	4b97      	ldr	r3, [pc, #604]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c7c0:	041b      	lsls	r3, r3, #16
 800c7c2:	0e1b      	lsrs	r3, r3, #24
 800c7c4:	f003 030f 	and.w	r3, r3, #15
 800c7c8:	4a95      	ldr	r2, [pc, #596]	@ (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c7d0:	f001 b9d9 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7d8:	f001 b9d5 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7e0:	f001 b9d1 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c7e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7e8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c7ec:	430b      	orrs	r3, r1
 800c7ee:	d17f      	bne.n	800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c7f0:	4b89      	ldr	r3, [pc, #548]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c7f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c7f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7fa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d165      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c802:	4b85      	ldr	r3, [pc, #532]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c808:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c80c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c810:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c814:	d034      	beq.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c818:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c81c:	d853      	bhi.n	800c8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c820:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c824:	d00b      	beq.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c828:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c82c:	d84b      	bhi.n	800c8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c830:	2b00      	cmp	r3, #0
 800c832:	d016      	beq.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c836:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c83a:	d009      	beq.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c83c:	e043      	b.n	800c8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c83e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c842:	4618      	mov	r0, r3
 800c844:	f7ff fa16 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c84c:	f001 b99b 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c850:	f107 0318 	add.w	r3, r7, #24
 800c854:	4618      	mov	r0, r3
 800c856:	f7ff fb67 	bl	800bf28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c85e:	f001 b992 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c862:	4b6d      	ldr	r3, [pc, #436]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c86a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c86e:	d103      	bne.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c870:	4b6a      	ldr	r3, [pc, #424]	@ (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c872:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c874:	f001 b987 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c878:	2300      	movs	r3, #0
 800c87a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c87c:	f001 b983 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c880:	4b65      	ldr	r3, [pc, #404]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 0320 	and.w	r3, r3, #32
 800c888:	2b20      	cmp	r3, #32
 800c88a:	d118      	bne.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c88c:	4b62      	ldr	r3, [pc, #392]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c894:	2b00      	cmp	r3, #0
 800c896:	d005      	beq.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c898:	4b5f      	ldr	r3, [pc, #380]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	0e1b      	lsrs	r3, r3, #24
 800c89e:	f003 030f 	and.w	r3, r3, #15
 800c8a2:	e006      	b.n	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c8a4:	4b5c      	ldr	r3, [pc, #368]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c8aa:	041b      	lsls	r3, r3, #16
 800c8ac:	0e1b      	lsrs	r3, r3, #24
 800c8ae:	f003 030f 	and.w	r3, r3, #15
 800c8b2:	4a5b      	ldr	r2, [pc, #364]	@ (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8b8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c8ba:	f001 b964 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c8c2:	f001 b960 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c8ca:	f001 b95c 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c8d4:	d108      	bne.n	800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff f9ca 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8e4:	f001 b94f 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8ec:	f001 b94b 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c8f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8f4:	1e51      	subs	r1, r2, #1
 800c8f6:	430b      	orrs	r3, r1
 800c8f8:	d136      	bne.n	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c8fa:	4b47      	ldr	r3, [pc, #284]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c900:	f003 0303 	and.w	r3, r3, #3
 800c904:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d104      	bne.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c90c:	f7fe f9cc 	bl	800aca8 <HAL_RCC_GetPCLK2Freq>
 800c910:	6378      	str	r0, [r7, #52]	@ 0x34
 800c912:	f001 b938 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d104      	bne.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c91c:	f7fe f894 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800c920:	6378      	str	r0, [r7, #52]	@ 0x34
 800c922:	f001 b930 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c926:	4b3c      	ldr	r3, [pc, #240]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c92e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c932:	d106      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c936:	2b02      	cmp	r3, #2
 800c938:	d103      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c93a:	4b3a      	ldr	r3, [pc, #232]	@ (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c93c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c93e:	f001 b922 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c942:	4b35      	ldr	r3, [pc, #212]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c948:	f003 0302 	and.w	r3, r3, #2
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d107      	bne.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c952:	2b03      	cmp	r3, #3
 800c954:	d104      	bne.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c95a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c95c:	f001 b913 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c960:	2300      	movs	r3, #0
 800c962:	637b      	str	r3, [r7, #52]	@ 0x34
 800c964:	f001 b90f 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c96c:	1e91      	subs	r1, r2, #2
 800c96e:	430b      	orrs	r3, r1
 800c970:	d136      	bne.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c972:	4b29      	ldr	r3, [pc, #164]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c978:	f003 030c 	and.w	r3, r3, #12
 800c97c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c980:	2b00      	cmp	r3, #0
 800c982:	d104      	bne.n	800c98e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c984:	f7fe f97c 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800c988:	6378      	str	r0, [r7, #52]	@ 0x34
 800c98a:	f001 b8fc 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c990:	2b04      	cmp	r3, #4
 800c992:	d104      	bne.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c994:	f7fe f858 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800c998:	6378      	str	r0, [r7, #52]	@ 0x34
 800c99a:	f001 b8f4 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c99e:	4b1e      	ldr	r3, [pc, #120]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9aa:	d106      	bne.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ae:	2b08      	cmp	r3, #8
 800c9b0:	d103      	bne.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c9b2:	4b1c      	ldr	r3, [pc, #112]	@ (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c9b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9b6:	f001 b8e6 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c9ba:	4b17      	ldr	r3, [pc, #92]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c9c0:	f003 0302 	and.w	r3, r3, #2
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d107      	bne.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ca:	2b0c      	cmp	r3, #12
 800c9cc:	d104      	bne.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800c9ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9d4:	f001 b8d7 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9dc:	f001 b8d3 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800c9e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9e4:	1f11      	subs	r1, r2, #4
 800c9e6:	430b      	orrs	r3, r1
 800c9e8:	d13f      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c9ea:	4b0b      	ldr	r3, [pc, #44]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c9f4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d104      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c9fc:	f7fe f940 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800ca00:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca02:	f001 b8c0 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ca06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca08:	2b10      	cmp	r3, #16
 800ca0a:	d10d      	bne.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca0c:	f7fe f81c 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800ca10:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca12:	f001 b8b8 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ca16:	bf00      	nop
 800ca18:	46020c00 	.word	0x46020c00
 800ca1c:	02dc6c00 	.word	0x02dc6c00
 800ca20:	08011588 	.word	0x08011588
 800ca24:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ca28:	4ba8      	ldr	r3, [pc, #672]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca34:	d106      	bne.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800ca36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca38:	2b20      	cmp	r3, #32
 800ca3a:	d103      	bne.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ca3c:	4ba4      	ldr	r3, [pc, #656]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ca3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca40:	f001 b8a1 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ca44:	4ba1      	ldr	r3, [pc, #644]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ca46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca4a:	f003 0302 	and.w	r3, r3, #2
 800ca4e:	2b02      	cmp	r3, #2
 800ca50:	d107      	bne.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ca52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca54:	2b30      	cmp	r3, #48	@ 0x30
 800ca56:	d104      	bne.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800ca58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca5e:	f001 b892 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800ca62:	2300      	movs	r3, #0
 800ca64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca66:	f001 b88e 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800ca6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca6e:	f1a2 0108 	sub.w	r1, r2, #8
 800ca72:	430b      	orrs	r3, r1
 800ca74:	d136      	bne.n	800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ca76:	4b95      	ldr	r3, [pc, #596]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ca78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca7c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ca80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800ca82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d104      	bne.n	800ca92 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca88:	f7fe f8fa 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800ca8c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca8e:	f001 b87a 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800ca92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca94:	2b40      	cmp	r3, #64	@ 0x40
 800ca96:	d104      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca98:	f7fd ffd6 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800ca9c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca9e:	f001 b872 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800caa2:	4b8a      	ldr	r3, [pc, #552]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800caaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caae:	d106      	bne.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800cab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab2:	2b80      	cmp	r3, #128	@ 0x80
 800cab4:	d103      	bne.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800cab6:	4b86      	ldr	r3, [pc, #536]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cab8:	637b      	str	r3, [r7, #52]	@ 0x34
 800caba:	f001 b864 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cabe:	4b83      	ldr	r3, [pc, #524]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cac4:	f003 0302 	and.w	r3, r3, #2
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d107      	bne.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cace:	2bc0      	cmp	r3, #192	@ 0xc0
 800cad0:	d104      	bne.n	800cadc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800cad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cad6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cad8:	f001 b855 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cadc:	2300      	movs	r3, #0
 800cade:	637b      	str	r3, [r7, #52]	@ 0x34
 800cae0:	f001 b851 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cae8:	f1a2 0110 	sub.w	r1, r2, #16
 800caec:	430b      	orrs	r3, r1
 800caee:	d139      	bne.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800caf0:	4b76      	ldr	r3, [pc, #472]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800caf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800caf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cafa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d104      	bne.n	800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb02:	f7fe f8bd 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800cb06:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb08:	f001 b83d 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb12:	d104      	bne.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb14:	f7fd ff98 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800cb18:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb1a:	f001 b834 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800cb1e:	4b6b      	ldr	r3, [pc, #428]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb2a:	d107      	bne.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800cb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb32:	d103      	bne.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800cb34:	4b66      	ldr	r3, [pc, #408]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cb36:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb38:	f001 b825 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800cb3c:	4b63      	ldr	r3, [pc, #396]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb42:	f003 0302 	and.w	r3, r3, #2
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	d108      	bne.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb50:	d104      	bne.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800cb52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb56:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb58:	f001 b815 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb60:	f001 b811 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800cb64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb68:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cb6c:	430b      	orrs	r3, r1
 800cb6e:	d139      	bne.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800cb70:	4b56      	ldr	r3, [pc, #344]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cb76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cb7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d104      	bne.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb82:	f7fe f87d 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800cb86:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb88:	f000 bffd 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb92:	d104      	bne.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb94:	f7fd ff58 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800cb98:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb9a:	f000 bff4 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800cb9e:	4b4b      	ldr	r3, [pc, #300]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbaa:	d107      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbb2:	d103      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800cbb4:	4b46      	ldr	r3, [pc, #280]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cbb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbb8:	f000 bfe5 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800cbbc:	4b43      	ldr	r3, [pc, #268]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cbc2:	f003 0302 	and.w	r3, r3, #2
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d108      	bne.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800cbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbcc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cbd0:	d104      	bne.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800cbd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbd8:	f000 bfd5 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbe0:	f000 bfd1 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800cbe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbe8:	f1a2 0120 	sub.w	r1, r2, #32
 800cbec:	430b      	orrs	r3, r1
 800cbee:	d158      	bne.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800cbf0:	4b36      	ldr	r3, [pc, #216]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cbf6:	f003 0307 	and.w	r3, r3, #7
 800cbfa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d104      	bne.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800cc02:	f7fe f865 	bl	800acd0 <HAL_RCC_GetPCLK3Freq>
 800cc06:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc08:	f000 bfbd 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d104      	bne.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc12:	f7fd ff19 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800cc16:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc18:	f000 bfb5 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800cc1c:	4b2b      	ldr	r3, [pc, #172]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc28:	d106      	bne.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d103      	bne.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800cc30:	4b27      	ldr	r3, [pc, #156]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc32:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc34:	f000 bfa7 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800cc38:	4b24      	ldr	r3, [pc, #144]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc3e:	f003 0302 	and.w	r3, r3, #2
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d107      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800cc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc48:	2b03      	cmp	r3, #3
 800cc4a:	d104      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800cc4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc50:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc52:	f000 bf98 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800cc56:	4b1d      	ldr	r3, [pc, #116]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f003 0320 	and.w	r3, r3, #32
 800cc5e:	2b20      	cmp	r3, #32
 800cc60:	d11b      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800cc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc64:	2b04      	cmp	r3, #4
 800cc66:	d118      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cc68:	4b18      	ldr	r3, [pc, #96]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d005      	beq.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800cc74:	4b15      	ldr	r3, [pc, #84]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	0e1b      	lsrs	r3, r3, #24
 800cc7a:	f003 030f 	and.w	r3, r3, #15
 800cc7e:	e006      	b.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800cc80:	4b12      	ldr	r3, [pc, #72]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc86:	041b      	lsls	r3, r3, #16
 800cc88:	0e1b      	lsrs	r3, r3, #24
 800cc8a:	f003 030f 	and.w	r3, r3, #15
 800cc8e:	4a11      	ldr	r2, [pc, #68]	@ (800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800cc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc94:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc96:	f000 bf76 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc9e:	f000 bf72 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800cca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cca6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ccaa:	430b      	orrs	r3, r1
 800ccac:	d172      	bne.n	800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ccae:	4b07      	ldr	r3, [pc, #28]	@ (800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ccb4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ccb8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ccba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccc0:	d10a      	bne.n	800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccc2:	f7fd fec1 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800ccc6:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccc8:	f000 bf5d 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cccc:	46020c00 	.word	0x46020c00
 800ccd0:	00f42400 	.word	0x00f42400
 800ccd4:	08011588 	.word	0x08011588
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800ccd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ccde:	d108      	bne.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cce0:	f107 0318 	add.w	r3, r7, #24
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7ff f91f 	bl	800bf28 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccee:	f000 bf4a 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d104      	bne.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800ccf8:	f7fd ffa8 	bl	800ac4c <HAL_RCC_GetHCLKFreq>
 800ccfc:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccfe:	f000 bf42 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800cd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd04:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cd08:	d122      	bne.n	800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cd0a:	4bb0      	ldr	r3, [pc, #704]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f003 0320 	and.w	r3, r3, #32
 800cd12:	2b20      	cmp	r3, #32
 800cd14:	d118      	bne.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd16:	4bad      	ldr	r3, [pc, #692]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d005      	beq.n	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800cd22:	4baa      	ldr	r3, [pc, #680]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	0e1b      	lsrs	r3, r3, #24
 800cd28:	f003 030f 	and.w	r3, r3, #15
 800cd2c:	e006      	b.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800cd2e:	4ba7      	ldr	r3, [pc, #668]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd34:	041b      	lsls	r3, r3, #16
 800cd36:	0e1b      	lsrs	r3, r3, #24
 800cd38:	f003 030f 	and.w	r3, r3, #15
 800cd3c:	4aa4      	ldr	r2, [pc, #656]	@ (800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cd3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd42:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd44:	f000 bf1f 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd4c:	f000 bf1b 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800cd50:	4b9e      	ldr	r3, [pc, #632]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd5c:	d107      	bne.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd64:	d103      	bne.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800cd66:	4b9b      	ldr	r3, [pc, #620]	@ (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cd68:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd6a:	f000 bf0c 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800cd6e:	4b97      	ldr	r3, [pc, #604]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd7a:	d107      	bne.n	800cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd82:	d103      	bne.n	800cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800cd84:	4b93      	ldr	r3, [pc, #588]	@ (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cd86:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd88:	f000 befd 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd90:	f000 bef9 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800cd94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd98:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cd9c:	430b      	orrs	r3, r1
 800cd9e:	d158      	bne.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800cda0:	4b8a      	ldr	r3, [pc, #552]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cda2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cda6:	f003 0307 	and.w	r3, r3, #7
 800cdaa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdae:	2b04      	cmp	r3, #4
 800cdb0:	d84b      	bhi.n	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800cdb2:	a201      	add	r2, pc, #4	@ (adr r2, 800cdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800cdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb8:	0800cdf1 	.word	0x0800cdf1
 800cdbc:	0800cdcd 	.word	0x0800cdcd
 800cdc0:	0800cddf 	.word	0x0800cddf
 800cdc4:	0800cdfb 	.word	0x0800cdfb
 800cdc8:	0800ce05 	.word	0x0800ce05
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fe ff4f 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cdda:	f000 bed4 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdde:	f107 030c 	add.w	r3, r7, #12
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7ff f9fa 	bl	800c1dc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cdec:	f000 becb 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cdf0:	f7fd ff2c 	bl	800ac4c <HAL_RCC_GetHCLKFreq>
 800cdf4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cdf6:	f000 bec6 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cdfa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cdfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce00:	f000 bec1 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ce04:	4b71      	ldr	r3, [pc, #452]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 0320 	and.w	r3, r3, #32
 800ce0c:	2b20      	cmp	r3, #32
 800ce0e:	d118      	bne.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce10:	4b6e      	ldr	r3, [pc, #440]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d005      	beq.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800ce1c:	4b6b      	ldr	r3, [pc, #428]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	0e1b      	lsrs	r3, r3, #24
 800ce22:	f003 030f 	and.w	r3, r3, #15
 800ce26:	e006      	b.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800ce28:	4b68      	ldr	r3, [pc, #416]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce2e:	041b      	lsls	r3, r3, #16
 800ce30:	0e1b      	lsrs	r3, r3, #24
 800ce32:	f003 030f 	and.w	r3, r3, #15
 800ce36:	4a66      	ldr	r2, [pc, #408]	@ (800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ce38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ce3e:	f000 bea2 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce46:	f000 be9e 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce4e:	f000 be9a 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ce52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce56:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800ce5a:	430b      	orrs	r3, r1
 800ce5c:	d167      	bne.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ce5e:	4b5b      	ldr	r3, [pc, #364]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ce64:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ce68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce70:	d036      	beq.n	800cee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800ce72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce78:	d855      	bhi.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ce7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ce80:	d029      	beq.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ce88:	d84d      	bhi.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ce8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce90:	d013      	beq.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800ce92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce98:	d845      	bhi.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d015      	beq.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800cea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cea6:	d13e      	bne.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fe fee1 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ceb6:	f000 be66 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ceba:	f107 030c 	add.w	r3, r7, #12
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7ff f98c 	bl	800c1dc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cec8:	f000 be5d 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cecc:	f7fd febe 	bl	800ac4c <HAL_RCC_GetHCLKFreq>
 800ced0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ced2:	f000 be58 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ced6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ceda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cedc:	f000 be53 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cee0:	4b3a      	ldr	r3, [pc, #232]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 0320 	and.w	r3, r3, #32
 800cee8:	2b20      	cmp	r3, #32
 800ceea:	d118      	bne.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ceec:	4b37      	ldr	r3, [pc, #220]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d005      	beq.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800cef8:	4b34      	ldr	r3, [pc, #208]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	0e1b      	lsrs	r3, r3, #24
 800cefe:	f003 030f 	and.w	r3, r3, #15
 800cf02:	e006      	b.n	800cf12 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cf04:	4b31      	ldr	r3, [pc, #196]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cf0a:	041b      	lsls	r3, r3, #16
 800cf0c:	0e1b      	lsrs	r3, r3, #24
 800cf0e:	f003 030f 	and.w	r3, r3, #15
 800cf12:	4a2f      	ldr	r2, [pc, #188]	@ (800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cf14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf18:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cf1a:	f000 be34 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf22:	f000 be30 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cf26:	2300      	movs	r3, #0
 800cf28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf2a:	f000 be2c 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800cf2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf32:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800cf36:	430b      	orrs	r3, r1
 800cf38:	d152      	bne.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800cf3a:	4b24      	ldr	r3, [pc, #144]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cf44:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800cf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d104      	bne.n	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cf4c:	f7fd fe98 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800cf50:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf52:	f000 be18 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800cf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf5c:	d104      	bne.n	800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cf5e:	f7fd fd73 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800cf62:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf64:	f000 be0f 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800cf68:	4b18      	ldr	r3, [pc, #96]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf74:	d107      	bne.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800cf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf7c:	d103      	bne.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800cf7e:	4b15      	ldr	r3, [pc, #84]	@ (800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800cf80:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf82:	f000 be00 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800cf86:	4b11      	ldr	r3, [pc, #68]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f003 0320 	and.w	r3, r3, #32
 800cf8e:	2b20      	cmp	r3, #32
 800cf90:	d122      	bne.n	800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800cf92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf98:	d11e      	bne.n	800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d005      	beq.n	800cfb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800cfa6:	4b09      	ldr	r3, [pc, #36]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	0e1b      	lsrs	r3, r3, #24
 800cfac:	f003 030f 	and.w	r3, r3, #15
 800cfb0:	e006      	b.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800cfb2:	4b06      	ldr	r3, [pc, #24]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfb8:	041b      	lsls	r3, r3, #16
 800cfba:	0e1b      	lsrs	r3, r3, #24
 800cfbc:	f003 030f 	and.w	r3, r3, #15
 800cfc0:	4a03      	ldr	r2, [pc, #12]	@ (800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfc8:	f000 bddd 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cfcc:	46020c00 	.word	0x46020c00
 800cfd0:	08011588 	.word	0x08011588
 800cfd4:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfdc:	f000 bdd3 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800cfe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfe4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800cfe8:	430b      	orrs	r3, r1
 800cfea:	d14c      	bne.n	800d086 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800cfec:	4ba8      	ldr	r3, [pc, #672]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cfee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cff2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cff6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800cff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d104      	bne.n	800d008 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cffe:	f7fd fe3f 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800d002:	6378      	str	r0, [r7, #52]	@ 0x34
 800d004:	f000 bdbf 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d00e:	d104      	bne.n	800d01a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d010:	f7fd fd1a 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800d014:	6378      	str	r0, [r7, #52]	@ 0x34
 800d016:	f000 bdb6 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d01a:	4b9d      	ldr	r3, [pc, #628]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d026:	d107      	bne.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d02e:	d103      	bne.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d030:	4b98      	ldr	r3, [pc, #608]	@ (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d032:	637b      	str	r3, [r7, #52]	@ 0x34
 800d034:	f000 bda7 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d038:	4b95      	ldr	r3, [pc, #596]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 0320 	and.w	r3, r3, #32
 800d040:	2b20      	cmp	r3, #32
 800d042:	d11c      	bne.n	800d07e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d046:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d04a:	d118      	bne.n	800d07e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d04c:	4b90      	ldr	r3, [pc, #576]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d054:	2b00      	cmp	r3, #0
 800d056:	d005      	beq.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d058:	4b8d      	ldr	r3, [pc, #564]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	0e1b      	lsrs	r3, r3, #24
 800d05e:	f003 030f 	and.w	r3, r3, #15
 800d062:	e006      	b.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d064:	4b8a      	ldr	r3, [pc, #552]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d06a:	041b      	lsls	r3, r3, #16
 800d06c:	0e1b      	lsrs	r3, r3, #24
 800d06e:	f003 030f 	and.w	r3, r3, #15
 800d072:	4a89      	ldr	r2, [pc, #548]	@ (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d078:	637b      	str	r3, [r7, #52]	@ 0x34
 800d07a:	f000 bd84 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d07e:	2300      	movs	r3, #0
 800d080:	637b      	str	r3, [r7, #52]	@ 0x34
 800d082:	f000 bd80 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d08a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d08e:	430b      	orrs	r3, r1
 800d090:	d158      	bne.n	800d144 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d092:	4b7f      	ldr	r3, [pc, #508]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d098:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d09c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a0:	2bc0      	cmp	r3, #192	@ 0xc0
 800d0a2:	d028      	beq.n	800d0f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d0a8:	d848      	bhi.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ac:	2b80      	cmp	r3, #128	@ 0x80
 800d0ae:	d00e      	beq.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b2:	2b80      	cmp	r3, #128	@ 0x80
 800d0b4:	d842      	bhi.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d003      	beq.n	800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0be:	2b40      	cmp	r3, #64	@ 0x40
 800d0c0:	d014      	beq.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d0c2:	e03b      	b.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d0c4:	f7fd fe04 	bl	800acd0 <HAL_RCC_GetPCLK3Freq>
 800d0c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d0ca:	f000 bd5c 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d0ce:	4b70      	ldr	r3, [pc, #448]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0da:	d103      	bne.n	800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d0dc:	4b6d      	ldr	r3, [pc, #436]	@ (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d0de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d0e0:	f000 bd51 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0e8:	f000 bd4d 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d0ec:	f7fd fcac 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800d0f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d0f2:	f000 bd48 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d0f6:	4b66      	ldr	r3, [pc, #408]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f003 0320 	and.w	r3, r3, #32
 800d0fe:	2b20      	cmp	r3, #32
 800d100:	d118      	bne.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d102:	4b63      	ldr	r3, [pc, #396]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d005      	beq.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d10e:	4b60      	ldr	r3, [pc, #384]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	0e1b      	lsrs	r3, r3, #24
 800d114:	f003 030f 	and.w	r3, r3, #15
 800d118:	e006      	b.n	800d128 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d11a:	4b5d      	ldr	r3, [pc, #372]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d11c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d120:	041b      	lsls	r3, r3, #16
 800d122:	0e1b      	lsrs	r3, r3, #24
 800d124:	f003 030f 	and.w	r3, r3, #15
 800d128:	4a5b      	ldr	r2, [pc, #364]	@ (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d12a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d12e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d130:	f000 bd29 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d134:	2300      	movs	r3, #0
 800d136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d138:	f000 bd25 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d13c:	2300      	movs	r3, #0
 800d13e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d140:	f000 bd21 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d144:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d148:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d14c:	430b      	orrs	r3, r1
 800d14e:	d14c      	bne.n	800d1ea <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d150:	4b4f      	ldr	r3, [pc, #316]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d156:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d15a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d104      	bne.n	800d16c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d162:	f7fd fd8d 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800d166:	6378      	str	r0, [r7, #52]	@ 0x34
 800d168:	f000 bd0d 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d172:	d104      	bne.n	800d17e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d174:	f7fd fc68 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800d178:	6378      	str	r0, [r7, #52]	@ 0x34
 800d17a:	f000 bd04 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d17e:	4b44      	ldr	r3, [pc, #272]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d18a:	d107      	bne.n	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d18e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d192:	d103      	bne.n	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d194:	4b3f      	ldr	r3, [pc, #252]	@ (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d196:	637b      	str	r3, [r7, #52]	@ 0x34
 800d198:	f000 bcf5 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d19c:	4b3c      	ldr	r3, [pc, #240]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 0320 	and.w	r3, r3, #32
 800d1a4:	2b20      	cmp	r3, #32
 800d1a6:	d11c      	bne.n	800d1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d1ae:	d118      	bne.n	800d1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1b0:	4b37      	ldr	r3, [pc, #220]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d005      	beq.n	800d1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d1bc:	4b34      	ldr	r3, [pc, #208]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	0e1b      	lsrs	r3, r3, #24
 800d1c2:	f003 030f 	and.w	r3, r3, #15
 800d1c6:	e006      	b.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d1c8:	4b31      	ldr	r3, [pc, #196]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d1ce:	041b      	lsls	r3, r3, #16
 800d1d0:	0e1b      	lsrs	r3, r3, #24
 800d1d2:	f003 030f 	and.w	r3, r3, #15
 800d1d6:	4a30      	ldr	r2, [pc, #192]	@ (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1de:	f000 bcd2 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1e6:	f000 bcce 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ee:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d1f2:	430b      	orrs	r3, r1
 800d1f4:	d152      	bne.n	800d29c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d1f6:	4b26      	ldr	r3, [pc, #152]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d1fc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d200:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d204:	2b00      	cmp	r3, #0
 800d206:	d104      	bne.n	800d212 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d208:	f7fd fd3a 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800d20c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d20e:	f000 bcba 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d218:	d104      	bne.n	800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d21a:	f7fd fc15 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800d21e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d220:	f000 bcb1 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d224:	4b1a      	ldr	r3, [pc, #104]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d22c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d230:	d107      	bne.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d238:	d103      	bne.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d23a:	4b16      	ldr	r3, [pc, #88]	@ (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d23e:	f000 bca2 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d242:	4b13      	ldr	r3, [pc, #76]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f003 0320 	and.w	r3, r3, #32
 800d24a:	2b20      	cmp	r3, #32
 800d24c:	d11c      	bne.n	800d288 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d250:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d254:	d118      	bne.n	800d288 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d256:	4b0e      	ldr	r3, [pc, #56]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d005      	beq.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d262:	4b0b      	ldr	r3, [pc, #44]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	0e1b      	lsrs	r3, r3, #24
 800d268:	f003 030f 	and.w	r3, r3, #15
 800d26c:	e006      	b.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d26e:	4b08      	ldr	r3, [pc, #32]	@ (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d274:	041b      	lsls	r3, r3, #16
 800d276:	0e1b      	lsrs	r3, r3, #24
 800d278:	f003 030f 	and.w	r3, r3, #15
 800d27c:	4a06      	ldr	r2, [pc, #24]	@ (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d282:	637b      	str	r3, [r7, #52]	@ 0x34
 800d284:	f000 bc7f 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d288:	2300      	movs	r3, #0
 800d28a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d28c:	f000 bc7b 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d290:	46020c00 	.word	0x46020c00
 800d294:	00f42400 	.word	0x00f42400
 800d298:	08011588 	.word	0x08011588
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d29c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2a0:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d2a4:	430b      	orrs	r3, r1
 800d2a6:	d14c      	bne.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d2a8:	4ba6      	ldr	r3, [pc, #664]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d2aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2ae:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d2b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d104      	bne.n	800d2c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d2ba:	f7fd fce1 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800d2be:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2c0:	f000 bc61 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d2ca:	d104      	bne.n	800d2d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d2cc:	f7fd fbbc 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800d2d0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2d2:	f000 bc58 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d2d6:	4b9b      	ldr	r3, [pc, #620]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2e2:	d107      	bne.n	800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2ea:	d103      	bne.n	800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d2ec:	4b96      	ldr	r3, [pc, #600]	@ (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d2ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2f0:	f000 bc49 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d2f4:	4b93      	ldr	r3, [pc, #588]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f003 0320 	and.w	r3, r3, #32
 800d2fc:	2b20      	cmp	r3, #32
 800d2fe:	d11c      	bne.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d302:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d306:	d118      	bne.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d308:	4b8e      	ldr	r3, [pc, #568]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d310:	2b00      	cmp	r3, #0
 800d312:	d005      	beq.n	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d314:	4b8b      	ldr	r3, [pc, #556]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	0e1b      	lsrs	r3, r3, #24
 800d31a:	f003 030f 	and.w	r3, r3, #15
 800d31e:	e006      	b.n	800d32e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d320:	4b88      	ldr	r3, [pc, #544]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d326:	041b      	lsls	r3, r3, #16
 800d328:	0e1b      	lsrs	r3, r3, #24
 800d32a:	f003 030f 	and.w	r3, r3, #15
 800d32e:	4a87      	ldr	r2, [pc, #540]	@ (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d334:	637b      	str	r3, [r7, #52]	@ 0x34
 800d336:	f000 bc26 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d33a:	2300      	movs	r3, #0
 800d33c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d33e:	f000 bc22 	b.w	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d342:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d346:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d34a:	430b      	orrs	r3, r1
 800d34c:	d164      	bne.n	800d418 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d34e:	4b7d      	ldr	r3, [pc, #500]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d354:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d358:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d120      	bne.n	800d3a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d360:	4b78      	ldr	r3, [pc, #480]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 0320 	and.w	r3, r3, #32
 800d368:	2b20      	cmp	r3, #32
 800d36a:	d117      	bne.n	800d39c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d36c:	4b75      	ldr	r3, [pc, #468]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d374:	2b00      	cmp	r3, #0
 800d376:	d005      	beq.n	800d384 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d378:	4b72      	ldr	r3, [pc, #456]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d37a:	689b      	ldr	r3, [r3, #8]
 800d37c:	0e1b      	lsrs	r3, r3, #24
 800d37e:	f003 030f 	and.w	r3, r3, #15
 800d382:	e006      	b.n	800d392 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d384:	4b6f      	ldr	r3, [pc, #444]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d38a:	041b      	lsls	r3, r3, #16
 800d38c:	0e1b      	lsrs	r3, r3, #24
 800d38e:	f003 030f 	and.w	r3, r3, #15
 800d392:	4a6e      	ldr	r2, [pc, #440]	@ (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d398:	637b      	str	r3, [r7, #52]	@ 0x34
 800d39a:	e3f4      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d39c:	2300      	movs	r3, #0
 800d39e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3a0:	e3f1      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d3a2:	4b68      	ldr	r3, [pc, #416]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d3a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3b0:	d112      	bne.n	800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3b8:	d10e      	bne.n	800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d3ba:	4b62      	ldr	r3, [pc, #392]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d3c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d3c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3c8:	d102      	bne.n	800d3d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d3ca:	23fa      	movs	r3, #250	@ 0xfa
 800d3cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d3ce:	e3da      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d3d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d3d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d3d6:	e3d6      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d3d8:	4b5a      	ldr	r3, [pc, #360]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3e4:	d106      	bne.n	800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3ec:	d102      	bne.n	800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d3ee:	4b56      	ldr	r3, [pc, #344]	@ (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3f2:	e3c8      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d3f4:	4b53      	ldr	r3, [pc, #332]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d3fa:	f003 0302 	and.w	r3, r3, #2
 800d3fe:	2b02      	cmp	r3, #2
 800d400:	d107      	bne.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d408:	d103      	bne.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d40a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d40e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d410:	e3b9      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d412:	2300      	movs	r3, #0
 800d414:	637b      	str	r3, [r7, #52]	@ 0x34
 800d416:	e3b6      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d41c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d420:	430b      	orrs	r3, r1
 800d422:	d164      	bne.n	800d4ee <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d424:	4b47      	ldr	r3, [pc, #284]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d42a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d42e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d432:	2b00      	cmp	r3, #0
 800d434:	d120      	bne.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d436:	4b43      	ldr	r3, [pc, #268]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f003 0320 	and.w	r3, r3, #32
 800d43e:	2b20      	cmp	r3, #32
 800d440:	d117      	bne.n	800d472 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d442:	4b40      	ldr	r3, [pc, #256]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d005      	beq.n	800d45a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d44e:	4b3d      	ldr	r3, [pc, #244]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	0e1b      	lsrs	r3, r3, #24
 800d454:	f003 030f 	and.w	r3, r3, #15
 800d458:	e006      	b.n	800d468 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d45a:	4b3a      	ldr	r3, [pc, #232]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d45c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d460:	041b      	lsls	r3, r3, #16
 800d462:	0e1b      	lsrs	r3, r3, #24
 800d464:	f003 030f 	and.w	r3, r3, #15
 800d468:	4a38      	ldr	r2, [pc, #224]	@ (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d46e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d470:	e389      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d472:	2300      	movs	r3, #0
 800d474:	637b      	str	r3, [r7, #52]	@ 0x34
 800d476:	e386      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d478:	4b32      	ldr	r3, [pc, #200]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d47a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d47e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d486:	d112      	bne.n	800d4ae <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d48a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d48e:	d10e      	bne.n	800d4ae <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d490:	4b2c      	ldr	r3, [pc, #176]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d49a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d49e:	d102      	bne.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d4a0:	23fa      	movs	r3, #250	@ 0xfa
 800d4a2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4a4:	e36f      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d4a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d4aa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4ac:	e36b      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d4ae:	4b25      	ldr	r3, [pc, #148]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4ba:	d106      	bne.n	800d4ca <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d4c2:	d102      	bne.n	800d4ca <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d4c4:	4b20      	ldr	r3, [pc, #128]	@ (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d4c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4c8:	e35d      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d4ca:	4b1e      	ldr	r3, [pc, #120]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4d0:	f003 0302 	and.w	r3, r3, #2
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	d107      	bne.n	800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d4de:	d103      	bne.n	800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d4e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e6:	e34e      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4ec:	e34b      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d4ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4f2:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d4f6:	430b      	orrs	r3, r1
 800d4f8:	d14e      	bne.n	800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d4fa:	4b12      	ldr	r3, [pc, #72]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d500:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d504:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d103      	bne.n	800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d50c:	f7fd fbb8 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800d510:	6378      	str	r0, [r7, #52]	@ 0x34
 800d512:	e338      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d514:	4b0b      	ldr	r3, [pc, #44]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d51a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d51e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d522:	d119      	bne.n	800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d526:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d52a:	d115      	bne.n	800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d52c:	4b05      	ldr	r3, [pc, #20]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d52e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d53a:	d109      	bne.n	800d550 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d53c:	23fa      	movs	r3, #250	@ 0xfa
 800d53e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d540:	e321      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d542:	bf00      	nop
 800d544:	46020c00 	.word	0x46020c00
 800d548:	00f42400 	.word	0x00f42400
 800d54c:	08011588 	.word	0x08011588
      }
      else
      {
        frequency = LSI_VALUE;
 800d550:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d554:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d556:	e316      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d558:	4ba8      	ldr	r3, [pc, #672]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d564:	d106      	bne.n	800d574 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d568:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d56c:	d102      	bne.n	800d574 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d56e:	4ba4      	ldr	r3, [pc, #656]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d570:	637b      	str	r3, [r7, #52]	@ 0x34
 800d572:	e308      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d574:	4ba1      	ldr	r3, [pc, #644]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d57a:	f003 0302 	and.w	r3, r3, #2
 800d57e:	2b02      	cmp	r3, #2
 800d580:	d107      	bne.n	800d592 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d584:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d588:	d103      	bne.n	800d592 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d58a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d58e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d590:	e2f9      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d592:	2300      	movs	r3, #0
 800d594:	637b      	str	r3, [r7, #52]	@ 0x34
 800d596:	e2f6      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d59c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d5a0:	430b      	orrs	r3, r1
 800d5a2:	d12d      	bne.n	800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d5a4:	4b95      	ldr	r3, [pc, #596]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5aa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d5ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d5b0:	4b92      	ldr	r3, [pc, #584]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5bc:	d105      	bne.n	800d5ca <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d102      	bne.n	800d5ca <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d5c4:	4b8e      	ldr	r3, [pc, #568]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d5c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5c8:	e2dd      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d5d0:	d107      	bne.n	800d5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe fb4c 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5e0:	e2d1      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d5e8:	d107      	bne.n	800d5fa <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5ea:	f107 0318 	add.w	r3, r7, #24
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fe fc9a 	bl	800bf28 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5f8:	e2c5      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5fe:	e2c2      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d604:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d608:	430b      	orrs	r3, r1
 800d60a:	d156      	bne.n	800d6ba <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d60c:	4b7b      	ldr	r3, [pc, #492]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d60e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d612:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d616:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d61e:	d028      	beq.n	800d672 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d622:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d626:	d845      	bhi.n	800d6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d62e:	d013      	beq.n	800d658 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d632:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d636:	d83d      	bhi.n	800d6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d004      	beq.n	800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d640:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d644:	d004      	beq.n	800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d646:	e035      	b.n	800d6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d648:	f7fd fb2e 	bl	800aca8 <HAL_RCC_GetPCLK2Freq>
 800d64c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d64e:	e29a      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d650:	f7fd f9fa 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800d654:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d656:	e296      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d658:	4b68      	ldr	r3, [pc, #416]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d664:	d102      	bne.n	800d66c <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d666:	4b66      	ldr	r3, [pc, #408]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d668:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d66a:	e28c      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d66c:	2300      	movs	r3, #0
 800d66e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d670:	e289      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d672:	4b62      	ldr	r3, [pc, #392]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f003 0320 	and.w	r3, r3, #32
 800d67a:	2b20      	cmp	r3, #32
 800d67c:	d117      	bne.n	800d6ae <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d67e:	4b5f      	ldr	r3, [pc, #380]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d686:	2b00      	cmp	r3, #0
 800d688:	d005      	beq.n	800d696 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d68a:	4b5c      	ldr	r3, [pc, #368]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	0e1b      	lsrs	r3, r3, #24
 800d690:	f003 030f 	and.w	r3, r3, #15
 800d694:	e006      	b.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d696:	4b59      	ldr	r3, [pc, #356]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d698:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d69c:	041b      	lsls	r3, r3, #16
 800d69e:	0e1b      	lsrs	r3, r3, #24
 800d6a0:	f003 030f 	and.w	r3, r3, #15
 800d6a4:	4a57      	ldr	r2, [pc, #348]	@ (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d6a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d6ac:	e26b      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6b2:	e268      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6b8:	e265      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d6ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6be:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d6c2:	430b      	orrs	r3, r1
 800d6c4:	d156      	bne.n	800d774 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d6c6:	4b4d      	ldr	r3, [pc, #308]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d6d0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d6d8:	d028      	beq.n	800d72c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d6e0:	d845      	bhi.n	800d76e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d6e8:	d013      	beq.n	800d712 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d6f0:	d83d      	bhi.n	800d76e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d004      	beq.n	800d702 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6fe:	d004      	beq.n	800d70a <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d700:	e035      	b.n	800d76e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d702:	f7fd fabd 	bl	800ac80 <HAL_RCC_GetPCLK1Freq>
 800d706:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d708:	e23d      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d70a:	f7fd f99d 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800d70e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d710:	e239      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d712:	4b3a      	ldr	r3, [pc, #232]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d71a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d71e:	d102      	bne.n	800d726 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d720:	4b37      	ldr	r3, [pc, #220]	@ (800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d722:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d724:	e22f      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d726:	2300      	movs	r3, #0
 800d728:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d72a:	e22c      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d72c:	4b33      	ldr	r3, [pc, #204]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f003 0320 	and.w	r3, r3, #32
 800d734:	2b20      	cmp	r3, #32
 800d736:	d117      	bne.n	800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d738:	4b30      	ldr	r3, [pc, #192]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d740:	2b00      	cmp	r3, #0
 800d742:	d005      	beq.n	800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d744:	4b2d      	ldr	r3, [pc, #180]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	0e1b      	lsrs	r3, r3, #24
 800d74a:	f003 030f 	and.w	r3, r3, #15
 800d74e:	e006      	b.n	800d75e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d750:	4b2a      	ldr	r3, [pc, #168]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d756:	041b      	lsls	r3, r3, #16
 800d758:	0e1b      	lsrs	r3, r3, #24
 800d75a:	f003 030f 	and.w	r3, r3, #15
 800d75e:	4a29      	ldr	r2, [pc, #164]	@ (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d764:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d766:	e20e      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d768:	2300      	movs	r3, #0
 800d76a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d76c:	e20b      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d76e:	2300      	movs	r3, #0
 800d770:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d772:	e208      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d774:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d778:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d77c:	430b      	orrs	r3, r1
 800d77e:	d17c      	bne.n	800d87a <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d780:	4b1e      	ldr	r3, [pc, #120]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d786:	f003 0318 	and.w	r3, r3, #24
 800d78a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78e:	2b18      	cmp	r3, #24
 800d790:	d870      	bhi.n	800d874 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d792:	a201      	add	r2, pc, #4	@ (adr r2, 800d798 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d798:	0800d809 	.word	0x0800d809
 800d79c:	0800d875 	.word	0x0800d875
 800d7a0:	0800d875 	.word	0x0800d875
 800d7a4:	0800d875 	.word	0x0800d875
 800d7a8:	0800d875 	.word	0x0800d875
 800d7ac:	0800d875 	.word	0x0800d875
 800d7b0:	0800d875 	.word	0x0800d875
 800d7b4:	0800d875 	.word	0x0800d875
 800d7b8:	0800d811 	.word	0x0800d811
 800d7bc:	0800d875 	.word	0x0800d875
 800d7c0:	0800d875 	.word	0x0800d875
 800d7c4:	0800d875 	.word	0x0800d875
 800d7c8:	0800d875 	.word	0x0800d875
 800d7cc:	0800d875 	.word	0x0800d875
 800d7d0:	0800d875 	.word	0x0800d875
 800d7d4:	0800d875 	.word	0x0800d875
 800d7d8:	0800d819 	.word	0x0800d819
 800d7dc:	0800d875 	.word	0x0800d875
 800d7e0:	0800d875 	.word	0x0800d875
 800d7e4:	0800d875 	.word	0x0800d875
 800d7e8:	0800d875 	.word	0x0800d875
 800d7ec:	0800d875 	.word	0x0800d875
 800d7f0:	0800d875 	.word	0x0800d875
 800d7f4:	0800d875 	.word	0x0800d875
 800d7f8:	0800d833 	.word	0x0800d833
 800d7fc:	46020c00 	.word	0x46020c00
 800d800:	00f42400 	.word	0x00f42400
 800d804:	08011588 	.word	0x08011588
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d808:	f7fd fa62 	bl	800acd0 <HAL_RCC_GetPCLK3Freq>
 800d80c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d80e:	e1ba      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d810:	f7fd f91a 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800d814:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d816:	e1b6      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d818:	4b9f      	ldr	r3, [pc, #636]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d824:	d102      	bne.n	800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d826:	4b9d      	ldr	r3, [pc, #628]	@ (800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d828:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d82a:	e1ac      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d82c:	2300      	movs	r3, #0
 800d82e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d830:	e1a9      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d832:	4b99      	ldr	r3, [pc, #612]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f003 0320 	and.w	r3, r3, #32
 800d83a:	2b20      	cmp	r3, #32
 800d83c:	d117      	bne.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d83e:	4b96      	ldr	r3, [pc, #600]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d005      	beq.n	800d856 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d84a:	4b93      	ldr	r3, [pc, #588]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d84c:	689b      	ldr	r3, [r3, #8]
 800d84e:	0e1b      	lsrs	r3, r3, #24
 800d850:	f003 030f 	and.w	r3, r3, #15
 800d854:	e006      	b.n	800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d856:	4b90      	ldr	r3, [pc, #576]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d85c:	041b      	lsls	r3, r3, #16
 800d85e:	0e1b      	lsrs	r3, r3, #24
 800d860:	f003 030f 	and.w	r3, r3, #15
 800d864:	4a8e      	ldr	r2, [pc, #568]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d86a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d86c:	e18b      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d86e:	2300      	movs	r3, #0
 800d870:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d872:	e188      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d874:	2300      	movs	r3, #0
 800d876:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d878:	e185      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d87a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d87e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d882:	430b      	orrs	r3, r1
 800d884:	d155      	bne.n	800d932 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d886:	4b84      	ldr	r3, [pc, #528]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d888:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d88c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d890:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d894:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d898:	d013      	beq.n	800d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d8a0:	d844      	bhi.n	800d92c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d8a8:	d013      	beq.n	800d8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d8b0:	d83c      	bhi.n	800d92c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d014      	beq.n	800d8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d8be:	d014      	beq.n	800d8ea <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d8c0:	e034      	b.n	800d92c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8c2:	f107 0318 	add.w	r3, r7, #24
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe fb2e 	bl	800bf28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8d0:	e159      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d8d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fe f9cc 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8e0:	e151      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d8e2:	f7fd f8b1 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800d8e6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8e8:	e14d      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d8ea:	4b6b      	ldr	r3, [pc, #428]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f003 0320 	and.w	r3, r3, #32
 800d8f2:	2b20      	cmp	r3, #32
 800d8f4:	d117      	bne.n	800d926 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d8f6:	4b68      	ldr	r3, [pc, #416]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d005      	beq.n	800d90e <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d902:	4b65      	ldr	r3, [pc, #404]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	0e1b      	lsrs	r3, r3, #24
 800d908:	f003 030f 	and.w	r3, r3, #15
 800d90c:	e006      	b.n	800d91c <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d90e:	4b62      	ldr	r3, [pc, #392]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d914:	041b      	lsls	r3, r3, #16
 800d916:	0e1b      	lsrs	r3, r3, #24
 800d918:	f003 030f 	and.w	r3, r3, #15
 800d91c:	4a60      	ldr	r2, [pc, #384]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d922:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d924:	e12f      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d926:	2300      	movs	r3, #0
 800d928:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d92a:	e12c      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d92c:	2300      	movs	r3, #0
 800d92e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d930:	e129      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d932:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d936:	1e59      	subs	r1, r3, #1
 800d938:	ea52 0301 	orrs.w	r3, r2, r1
 800d93c:	d13c      	bne.n	800d9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d93e:	4b56      	ldr	r3, [pc, #344]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d940:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d944:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d948:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d950:	d027      	beq.n	800d9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d954:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d958:	d82b      	bhi.n	800d9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d960:	d017      	beq.n	800d992 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d964:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d968:	d823      	bhi.n	800d9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d004      	beq.n	800d97a <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800d970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d976:	d004      	beq.n	800d982 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800d978:	e01b      	b.n	800d9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d97a:	f7fd f865 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800d97e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d980:	e101      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d986:	4618      	mov	r0, r3
 800d988:	f7fe f974 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d98e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d990:	e0f9      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d992:	f107 0318 	add.w	r3, r7, #24
 800d996:	4618      	mov	r0, r3
 800d998:	f7fe fac6 	bl	800bf28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9a0:	e0f1      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9a2:	f107 030c 	add.w	r3, r7, #12
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fc18 	bl	800c1dc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9b0:	e0e9      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9b6:	e0e6      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800d9b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9bc:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800d9c0:	430b      	orrs	r3, r1
 800d9c2:	d131      	bne.n	800da28 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800d9c4:	4b34      	ldr	r3, [pc, #208]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9ce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800d9d0:	4b31      	ldr	r3, [pc, #196]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d9d6:	f003 0302 	and.w	r3, r3, #2
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d106      	bne.n	800d9ec <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800d9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d103      	bne.n	800d9ec <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800d9e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9ea:	e0cc      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800d9ec:	4b2a      	ldr	r3, [pc, #168]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d9f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d9fa:	d112      	bne.n	800da22 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da02:	d10e      	bne.n	800da22 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800da04:	4b24      	ldr	r3, [pc, #144]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da12:	d102      	bne.n	800da1a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800da14:	23fa      	movs	r3, #250	@ 0xfa
 800da16:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800da18:	e0b5      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800da1a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800da1e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800da20:	e0b1      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800da22:	2300      	movs	r3, #0
 800da24:	637b      	str	r3, [r7, #52]	@ 0x34
 800da26:	e0ae      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800da28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da2c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800da30:	430b      	orrs	r3, r1
 800da32:	d13b      	bne.n	800daac <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800da34:	4b18      	ldr	r3, [pc, #96]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800da3a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800da3e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800da40:	4b15      	ldr	r3, [pc, #84]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da4c:	d105      	bne.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800da4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da50:	2b00      	cmp	r3, #0
 800da52:	d102      	bne.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800da54:	4b13      	ldr	r3, [pc, #76]	@ (800daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800da56:	637b      	str	r3, [r7, #52]	@ 0x34
 800da58:	e095      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800da5a:	4b0f      	ldr	r3, [pc, #60]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da66:	d106      	bne.n	800da76 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800da68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da6e:	d102      	bne.n	800da76 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800da70:	4b0d      	ldr	r3, [pc, #52]	@ (800daa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800da72:	637b      	str	r3, [r7, #52]	@ 0x34
 800da74:	e087      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800da76:	4b08      	ldr	r3, [pc, #32]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da82:	d106      	bne.n	800da92 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800da84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da8a:	d102      	bne.n	800da92 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800da8c:	4b03      	ldr	r3, [pc, #12]	@ (800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800da8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800da90:	e079      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800da92:	2300      	movs	r3, #0
 800da94:	637b      	str	r3, [r7, #52]	@ 0x34
 800da96:	e076      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800da98:	46020c00 	.word	0x46020c00
 800da9c:	00f42400 	.word	0x00f42400
 800daa0:	08011588 	.word	0x08011588
 800daa4:	02dc6c00 	.word	0x02dc6c00
 800daa8:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800daac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dab0:	1e99      	subs	r1, r3, #2
 800dab2:	ea52 0301 	orrs.w	r3, r2, r1
 800dab6:	d120      	bne.n	800dafa <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800dab8:	4b35      	ldr	r3, [pc, #212]	@ (800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800daba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dabe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dac2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d004      	beq.n	800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800daca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dacc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dad0:	d008      	beq.n	800dae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800dad2:	e00f      	b.n	800daf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dad4:	f107 030c 	add.w	r3, r7, #12
 800dad8:	4618      	mov	r0, r3
 800dada:	f7fe fb7f 	bl	800c1dc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dae2:	e050      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dae4:	f107 0318 	add.w	r3, r7, #24
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fe fa1d 	bl	800bf28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800daf2:	e048      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800daf4:	2300      	movs	r3, #0
 800daf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800daf8:	e045      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800dafa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dafe:	f1a3 0108 	sub.w	r1, r3, #8
 800db02:	ea52 0301 	orrs.w	r3, r2, r1
 800db06:	d13c      	bne.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800db08:	4b21      	ldr	r3, [pc, #132]	@ (800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800db12:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800db14:	4b1e      	ldr	r3, [pc, #120]	@ (800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db20:	d105      	bne.n	800db2e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800db22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db24:	2b00      	cmp	r3, #0
 800db26:	d102      	bne.n	800db2e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800db28:	4b1a      	ldr	r3, [pc, #104]	@ (800db94 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800db2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800db2c:	e02b      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800db2e:	4b18      	ldr	r3, [pc, #96]	@ (800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db3a:	d106      	bne.n	800db4a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800db3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db42:	d102      	bne.n	800db4a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800db44:	4b14      	ldr	r3, [pc, #80]	@ (800db98 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800db46:	637b      	str	r3, [r7, #52]	@ 0x34
 800db48:	e01d      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800db4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db50:	d107      	bne.n	800db62 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db56:	4618      	mov	r0, r3
 800db58:	f7fe f88c 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800db5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db60:	e011      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800db62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db64:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800db68:	d108      	bne.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fe f880 	bl	800bc74 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800db74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db76:	085b      	lsrs	r3, r3, #1
 800db78:	637b      	str	r3, [r7, #52]	@ 0x34
 800db7a:	e004      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800db7c:	2300      	movs	r3, #0
 800db7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db80:	e001      	b.n	800db86 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800db86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3738      	adds	r7, #56	@ 0x38
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	46020c00 	.word	0x46020c00
 800db94:	00f42400 	.word	0x00f42400
 800db98:	007a1200 	.word	0x007a1200

0800db9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800dba4:	4b47      	ldr	r3, [pc, #284]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a46      	ldr	r2, [pc, #280]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dbaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dbae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dbb0:	f7f5 fac2 	bl	8003138 <HAL_GetTick>
 800dbb4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dbb6:	e008      	b.n	800dbca <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dbb8:	f7f5 fabe 	bl	8003138 <HAL_GetTick>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d901      	bls.n	800dbca <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dbc6:	2303      	movs	r3, #3
 800dbc8:	e077      	b.n	800dcba <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dbca:	4b3e      	ldr	r3, [pc, #248]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d1f0      	bne.n	800dbb8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800dbd6:	4b3b      	ldr	r3, [pc, #236]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dbd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbda:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dbde:	f023 0303 	bic.w	r3, r3, #3
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	6811      	ldr	r1, [r2, #0]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	6852      	ldr	r2, [r2, #4]
 800dbea:	3a01      	subs	r2, #1
 800dbec:	0212      	lsls	r2, r2, #8
 800dbee:	430a      	orrs	r2, r1
 800dbf0:	4934      	ldr	r1, [pc, #208]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800dbf6:	4b33      	ldr	r3, [pc, #204]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dbf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbfa:	4b33      	ldr	r3, [pc, #204]	@ (800dcc8 <RCCEx_PLL2_Config+0x12c>)
 800dbfc:	4013      	ands	r3, r2
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	6892      	ldr	r2, [r2, #8]
 800dc02:	3a01      	subs	r2, #1
 800dc04:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	68d2      	ldr	r2, [r2, #12]
 800dc0c:	3a01      	subs	r2, #1
 800dc0e:	0252      	lsls	r2, r2, #9
 800dc10:	b292      	uxth	r2, r2
 800dc12:	4311      	orrs	r1, r2
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	6912      	ldr	r2, [r2, #16]
 800dc18:	3a01      	subs	r2, #1
 800dc1a:	0412      	lsls	r2, r2, #16
 800dc1c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dc20:	4311      	orrs	r1, r2
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	6952      	ldr	r2, [r2, #20]
 800dc26:	3a01      	subs	r2, #1
 800dc28:	0612      	lsls	r2, r2, #24
 800dc2a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	4924      	ldr	r1, [pc, #144]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc32:	4313      	orrs	r3, r2
 800dc34:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800dc36:	4b23      	ldr	r3, [pc, #140]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc3a:	f023 020c 	bic.w	r2, r3, #12
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	699b      	ldr	r3, [r3, #24]
 800dc42:	4920      	ldr	r1, [pc, #128]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc44:	4313      	orrs	r3, r2
 800dc46:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800dc48:	4b1e      	ldr	r3, [pc, #120]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a1b      	ldr	r3, [r3, #32]
 800dc50:	491c      	ldr	r1, [pc, #112]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc52:	4313      	orrs	r3, r2
 800dc54:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800dc56:	4b1b      	ldr	r3, [pc, #108]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc5a:	4a1a      	ldr	r2, [pc, #104]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc5c:	f023 0310 	bic.w	r3, r3, #16
 800dc60:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dc62:	4b18      	ldr	r3, [pc, #96]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dc6a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	69d2      	ldr	r2, [r2, #28]
 800dc72:	00d2      	lsls	r2, r2, #3
 800dc74:	4913      	ldr	r1, [pc, #76]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc76:	4313      	orrs	r3, r2
 800dc78:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800dc7a:	4b12      	ldr	r3, [pc, #72]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7e:	4a11      	ldr	r2, [pc, #68]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc80:	f043 0310 	orr.w	r3, r3, #16
 800dc84:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800dc86:	4b0f      	ldr	r3, [pc, #60]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a0e      	ldr	r2, [pc, #56]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dc8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dc90:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dc92:	f7f5 fa51 	bl	8003138 <HAL_GetTick>
 800dc96:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc98:	e008      	b.n	800dcac <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc9a:	f7f5 fa4d 	bl	8003138 <HAL_GetTick>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d901      	bls.n	800dcac <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	e006      	b.n	800dcba <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dcac:	4b05      	ldr	r3, [pc, #20]	@ (800dcc4 <RCCEx_PLL2_Config+0x128>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d0f0      	beq.n	800dc9a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800dcb8:	2300      	movs	r3, #0

}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	46020c00 	.word	0x46020c00
 800dcc8:	80800000 	.word	0x80800000

0800dccc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800dcd4:	4b47      	ldr	r3, [pc, #284]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a46      	ldr	r2, [pc, #280]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dcda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dcde:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dce0:	f7f5 fa2a 	bl	8003138 <HAL_GetTick>
 800dce4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dce6:	e008      	b.n	800dcfa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dce8:	f7f5 fa26 	bl	8003138 <HAL_GetTick>
 800dcec:	4602      	mov	r2, r0
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	1ad3      	subs	r3, r2, r3
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d901      	bls.n	800dcfa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dcf6:	2303      	movs	r3, #3
 800dcf8:	e077      	b.n	800ddea <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dcfa:	4b3e      	ldr	r3, [pc, #248]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1f0      	bne.n	800dce8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800dd06:	4b3b      	ldr	r3, [pc, #236]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dd0e:	f023 0303 	bic.w	r3, r3, #3
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	6811      	ldr	r1, [r2, #0]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	6852      	ldr	r2, [r2, #4]
 800dd1a:	3a01      	subs	r2, #1
 800dd1c:	0212      	lsls	r2, r2, #8
 800dd1e:	430a      	orrs	r2, r1
 800dd20:	4934      	ldr	r1, [pc, #208]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd22:	4313      	orrs	r3, r2
 800dd24:	630b      	str	r3, [r1, #48]	@ 0x30
 800dd26:	4b33      	ldr	r3, [pc, #204]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd2a:	4b33      	ldr	r3, [pc, #204]	@ (800ddf8 <RCCEx_PLL3_Config+0x12c>)
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	6892      	ldr	r2, [r2, #8]
 800dd32:	3a01      	subs	r2, #1
 800dd34:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	68d2      	ldr	r2, [r2, #12]
 800dd3c:	3a01      	subs	r2, #1
 800dd3e:	0252      	lsls	r2, r2, #9
 800dd40:	b292      	uxth	r2, r2
 800dd42:	4311      	orrs	r1, r2
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	6912      	ldr	r2, [r2, #16]
 800dd48:	3a01      	subs	r2, #1
 800dd4a:	0412      	lsls	r2, r2, #16
 800dd4c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dd50:	4311      	orrs	r1, r2
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	6952      	ldr	r2, [r2, #20]
 800dd56:	3a01      	subs	r2, #1
 800dd58:	0612      	lsls	r2, r2, #24
 800dd5a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dd5e:	430a      	orrs	r2, r1
 800dd60:	4924      	ldr	r1, [pc, #144]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd62:	4313      	orrs	r3, r2
 800dd64:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800dd66:	4b23      	ldr	r3, [pc, #140]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd6a:	f023 020c 	bic.w	r2, r3, #12
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	699b      	ldr	r3, [r3, #24]
 800dd72:	4920      	ldr	r1, [pc, #128]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd74:	4313      	orrs	r3, r2
 800dd76:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800dd78:	4b1e      	ldr	r3, [pc, #120]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6a1b      	ldr	r3, [r3, #32]
 800dd80:	491c      	ldr	r1, [pc, #112]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd82:	4313      	orrs	r3, r2
 800dd84:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800dd86:	4b1b      	ldr	r3, [pc, #108]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd8a:	4a1a      	ldr	r2, [pc, #104]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd8c:	f023 0310 	bic.w	r3, r3, #16
 800dd90:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dd92:	4b18      	ldr	r3, [pc, #96]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dd94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd9a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	69d2      	ldr	r2, [r2, #28]
 800dda2:	00d2      	lsls	r2, r2, #3
 800dda4:	4913      	ldr	r1, [pc, #76]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800dda6:	4313      	orrs	r3, r2
 800dda8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800ddaa:	4b12      	ldr	r3, [pc, #72]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800ddac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddae:	4a11      	ldr	r2, [pc, #68]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800ddb0:	f043 0310 	orr.w	r3, r3, #16
 800ddb4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800ddb6:	4b0f      	ldr	r3, [pc, #60]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a0e      	ldr	r2, [pc, #56]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800ddbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ddc0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ddc2:	f7f5 f9b9 	bl	8003138 <HAL_GetTick>
 800ddc6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ddc8:	e008      	b.n	800dddc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ddca:	f7f5 f9b5 	bl	8003138 <HAL_GetTick>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	1ad3      	subs	r3, r2, r3
 800ddd4:	2b02      	cmp	r3, #2
 800ddd6:	d901      	bls.n	800dddc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ddd8:	2303      	movs	r3, #3
 800ddda:	e006      	b.n	800ddea <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dddc:	4b05      	ldr	r3, [pc, #20]	@ (800ddf4 <RCCEx_PLL3_Config+0x128>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d0f0      	beq.n	800ddca <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800dde8:	2300      	movs	r3, #0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	46020c00 	.word	0x46020c00
 800ddf8:	80800000 	.word	0x80800000

0800ddfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800de04:	2301      	movs	r3, #1
 800de06:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d071      	beq.n	800def2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de14:	b2db      	uxtb	r3, r3
 800de16:	2b00      	cmp	r3, #0
 800de18:	d106      	bne.n	800de28 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f7f4 fc2e 	bl	8002684 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2202      	movs	r2, #2
 800de2c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800de30:	4b32      	ldr	r3, [pc, #200]	@ (800defc <HAL_RTC_Init+0x100>)
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	f003 0310 	and.w	r3, r3, #16
 800de38:	2b10      	cmp	r3, #16
 800de3a:	d051      	beq.n	800dee0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de3c:	4b2f      	ldr	r3, [pc, #188]	@ (800defc <HAL_RTC_Init+0x100>)
 800de3e:	22ca      	movs	r2, #202	@ 0xca
 800de40:	625a      	str	r2, [r3, #36]	@ 0x24
 800de42:	4b2e      	ldr	r3, [pc, #184]	@ (800defc <HAL_RTC_Init+0x100>)
 800de44:	2253      	movs	r2, #83	@ 0x53
 800de46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f000 f88b 	bl	800df64 <RTC_EnterInitMode>
 800de4e:	4603      	mov	r3, r0
 800de50:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800de52:	7bfb      	ldrb	r3, [r7, #15]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d13f      	bne.n	800ded8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800de58:	4b28      	ldr	r3, [pc, #160]	@ (800defc <HAL_RTC_Init+0x100>)
 800de5a:	699b      	ldr	r3, [r3, #24]
 800de5c:	4a27      	ldr	r2, [pc, #156]	@ (800defc <HAL_RTC_Init+0x100>)
 800de5e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800de62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de66:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800de68:	4b24      	ldr	r3, [pc, #144]	@ (800defc <HAL_RTC_Init+0x100>)
 800de6a:	699a      	ldr	r2, [r3, #24]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6859      	ldr	r1, [r3, #4]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	691b      	ldr	r3, [r3, #16]
 800de74:	4319      	orrs	r1, r3
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	430b      	orrs	r3, r1
 800de7c:	491f      	ldr	r1, [pc, #124]	@ (800defc <HAL_RTC_Init+0x100>)
 800de7e:	4313      	orrs	r3, r2
 800de80:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	68da      	ldr	r2, [r3, #12]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	041b      	lsls	r3, r3, #16
 800de8c:	491b      	ldr	r1, [pc, #108]	@ (800defc <HAL_RTC_Init+0x100>)
 800de8e:	4313      	orrs	r3, r2
 800de90:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800de92:	4b1a      	ldr	r3, [pc, #104]	@ (800defc <HAL_RTC_Init+0x100>)
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dea2:	430b      	orrs	r3, r1
 800dea4:	4915      	ldr	r1, [pc, #84]	@ (800defc <HAL_RTC_Init+0x100>)
 800dea6:	4313      	orrs	r3, r2
 800dea8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f896 	bl	800dfdc <RTC_ExitInitMode>
 800deb0:	4603      	mov	r3, r0
 800deb2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800deb4:	7bfb      	ldrb	r3, [r7, #15]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d10e      	bne.n	800ded8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800deba:	4b10      	ldr	r3, [pc, #64]	@ (800defc <HAL_RTC_Init+0x100>)
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a19      	ldr	r1, [r3, #32]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	69db      	ldr	r3, [r3, #28]
 800deca:	4319      	orrs	r1, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	695b      	ldr	r3, [r3, #20]
 800ded0:	430b      	orrs	r3, r1
 800ded2:	490a      	ldr	r1, [pc, #40]	@ (800defc <HAL_RTC_Init+0x100>)
 800ded4:	4313      	orrs	r3, r2
 800ded6:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ded8:	4b08      	ldr	r3, [pc, #32]	@ (800defc <HAL_RTC_Init+0x100>)
 800deda:	22ff      	movs	r2, #255	@ 0xff
 800dedc:	625a      	str	r2, [r3, #36]	@ 0x24
 800dede:	e001      	b.n	800dee4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800dee0:	2300      	movs	r3, #0
 800dee2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d103      	bne.n	800def2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2201      	movs	r2, #1
 800deee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800def2:	7bfb      	ldrb	r3, [r7, #15]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	46007800 	.word	0x46007800

0800df00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800df08:	4b15      	ldr	r3, [pc, #84]	@ (800df60 <HAL_RTC_WaitForSynchro+0x60>)
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	4a14      	ldr	r2, [pc, #80]	@ (800df60 <HAL_RTC_WaitForSynchro+0x60>)
 800df0e:	f023 0320 	bic.w	r3, r3, #32
 800df12:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800df14:	f7f5 f910 	bl	8003138 <HAL_GetTick>
 800df18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800df1a:	e013      	b.n	800df44 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800df1c:	f7f5 f90c 	bl	8003138 <HAL_GetTick>
 800df20:	4602      	mov	r2, r0
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	1ad3      	subs	r3, r2, r3
 800df26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800df2a:	d90b      	bls.n	800df44 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800df2c:	4b0c      	ldr	r3, [pc, #48]	@ (800df60 <HAL_RTC_WaitForSynchro+0x60>)
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	f003 0320 	and.w	r3, r3, #32
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10c      	bne.n	800df52 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2203      	movs	r2, #3
 800df3c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800df40:	2303      	movs	r3, #3
 800df42:	e008      	b.n	800df56 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800df44:	4b06      	ldr	r3, [pc, #24]	@ (800df60 <HAL_RTC_WaitForSynchro+0x60>)
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	f003 0320 	and.w	r3, r3, #32
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d0e5      	beq.n	800df1c <HAL_RTC_WaitForSynchro+0x1c>
 800df50:	e000      	b.n	800df54 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800df52:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	46007800 	.word	0x46007800

0800df64 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df6c:	2300      	movs	r3, #0
 800df6e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800df70:	4b19      	ldr	r3, [pc, #100]	@ (800dfd8 <RTC_EnterInitMode+0x74>)
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d128      	bne.n	800dfce <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800df7c:	4b16      	ldr	r3, [pc, #88]	@ (800dfd8 <RTC_EnterInitMode+0x74>)
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	4a15      	ldr	r2, [pc, #84]	@ (800dfd8 <RTC_EnterInitMode+0x74>)
 800df82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df86:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800df88:	f7f5 f8d6 	bl	8003138 <HAL_GetTick>
 800df8c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800df8e:	e013      	b.n	800dfb8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800df90:	f7f5 f8d2 	bl	8003138 <HAL_GetTick>
 800df94:	4602      	mov	r2, r0
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800df9e:	d90b      	bls.n	800dfb8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dfa0:	4b0d      	ldr	r3, [pc, #52]	@ (800dfd8 <RTC_EnterInitMode+0x74>)
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10f      	bne.n	800dfcc <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800dfac:	2303      	movs	r3, #3
 800dfae:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2203      	movs	r2, #3
 800dfb4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfb8:	4b07      	ldr	r3, [pc, #28]	@ (800dfd8 <RTC_EnterInitMode+0x74>)
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d104      	bne.n	800dfce <RTC_EnterInitMode+0x6a>
 800dfc4:	7bfb      	ldrb	r3, [r7, #15]
 800dfc6:	2b03      	cmp	r3, #3
 800dfc8:	d1e2      	bne.n	800df90 <RTC_EnterInitMode+0x2c>
 800dfca:	e000      	b.n	800dfce <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800dfcc:	bf00      	nop
        }
      }
    }
  }

  return status;
 800dfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3710      	adds	r7, #16
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	46007800 	.word	0x46007800

0800dfdc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dfe8:	4b1a      	ldr	r3, [pc, #104]	@ (800e054 <RTC_ExitInitMode+0x78>)
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	4a19      	ldr	r2, [pc, #100]	@ (800e054 <RTC_ExitInitMode+0x78>)
 800dfee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dff2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dff4:	4b17      	ldr	r3, [pc, #92]	@ (800e054 <RTC_ExitInitMode+0x78>)
 800dff6:	699b      	ldr	r3, [r3, #24]
 800dff8:	f003 0320 	and.w	r3, r3, #32
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d10c      	bne.n	800e01a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7ff ff7d 	bl	800df00 <HAL_RTC_WaitForSynchro>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d01e      	beq.n	800e04a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2203      	movs	r2, #3
 800e010:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e014:	2303      	movs	r3, #3
 800e016:	73fb      	strb	r3, [r7, #15]
 800e018:	e017      	b.n	800e04a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e01a:	4b0e      	ldr	r3, [pc, #56]	@ (800e054 <RTC_ExitInitMode+0x78>)
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	4a0d      	ldr	r2, [pc, #52]	@ (800e054 <RTC_ExitInitMode+0x78>)
 800e020:	f023 0320 	bic.w	r3, r3, #32
 800e024:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7ff ff6a 	bl	800df00 <HAL_RTC_WaitForSynchro>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d005      	beq.n	800e03e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2203      	movs	r2, #3
 800e036:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e03a:	2303      	movs	r3, #3
 800e03c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e03e:	4b05      	ldr	r3, [pc, #20]	@ (800e054 <RTC_ExitInitMode+0x78>)
 800e040:	699b      	ldr	r3, [r3, #24]
 800e042:	4a04      	ldr	r2, [pc, #16]	@ (800e054 <RTC_ExitInitMode+0x78>)
 800e044:	f043 0320 	orr.w	r3, r3, #32
 800e048:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	46007800 	.word	0x46007800

0800e058 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	4910      	ldr	r1, [pc, #64]	@ (800e0ac <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e06c:	4313      	orrs	r3, r2
 800e06e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	689a      	ldr	r2, [r3, #8]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	431a      	orrs	r2, r3
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	490c      	ldr	r1, [pc, #48]	@ (800e0b0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e080:	4313      	orrs	r3, r2
 800e082:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e084:	4b0a      	ldr	r3, [pc, #40]	@ (800e0b0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e086:	6a1b      	ldr	r3, [r3, #32]
 800e088:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	6919      	ldr	r1, [r3, #16]
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	695b      	ldr	r3, [r3, #20]
 800e094:	041b      	lsls	r3, r3, #16
 800e096:	430b      	orrs	r3, r1
 800e098:	4905      	ldr	r1, [pc, #20]	@ (800e0b0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e09a:	4313      	orrs	r3, r2
 800e09c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	370c      	adds	r7, #12
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr
 800e0ac:	46007800 	.word	0x46007800
 800e0b0:	46007c00 	.word	0x46007c00

0800e0b4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
 800e0c0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d904      	bls.n	800e0d2 <HAL_SAI_InitProtocol+0x1e>
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	3b03      	subs	r3, #3
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d812      	bhi.n	800e0f6 <HAL_SAI_InitProtocol+0x42>
 800e0d0:	e008      	b.n	800e0e4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	68b9      	ldr	r1, [r7, #8]
 800e0d8:	68f8      	ldr	r0, [r7, #12]
 800e0da:	f000 fa01 	bl	800e4e0 <SAI_InitI2S>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	75fb      	strb	r3, [r7, #23]
      break;
 800e0e2:	e00b      	b.n	800e0fc <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	68b9      	ldr	r1, [r7, #8]
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f000 faaa 	bl	800e644 <SAI_InitPCM>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	75fb      	strb	r3, [r7, #23]
      break;
 800e0f4:	e002      	b.n	800e0fc <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	75fb      	strb	r3, [r7, #23]
      break;
 800e0fa:	bf00      	nop
  }

  if (status == HAL_OK)
 800e0fc:	7dfb      	ldrb	r3, [r7, #23]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d104      	bne.n	800e10c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	f000 f808 	bl	800e118 <HAL_SAI_Init>
 800e108:	4603      	mov	r3, r0
 800e10a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e10c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3718      	adds	r7, #24
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
	...

0800e118 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b08a      	sub	sp, #40	@ 0x28
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d101      	bne.n	800e12a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e126:	2301      	movs	r3, #1
 800e128:	e1ce      	b.n	800e4c8 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e130:	2b01      	cmp	r3, #1
 800e132:	d10e      	bne.n	800e152 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a83      	ldr	r2, [pc, #524]	@ (800e348 <HAL_SAI_Init+0x230>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d107      	bne.n	800e14e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e142:	2b01      	cmp	r3, #1
 800e144:	d103      	bne.n	800e14e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d001      	beq.n	800e152 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e14e:	2301      	movs	r3, #1
 800e150:	e1ba      	b.n	800e4c8 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d106      	bne.n	800e16c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7f4 fc5e 	bl	8002a28 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 faeb 	bl	800e748 <SAI_Disable>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d001      	beq.n	800e17c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	e1a5      	b.n	800e4c8 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2202      	movs	r2, #2
 800e180:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d00c      	beq.n	800e1a6 <HAL_SAI_Init+0x8e>
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d80d      	bhi.n	800e1ac <HAL_SAI_Init+0x94>
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <HAL_SAI_Init+0x82>
 800e194:	2b01      	cmp	r3, #1
 800e196:	d003      	beq.n	800e1a0 <HAL_SAI_Init+0x88>
 800e198:	e008      	b.n	800e1ac <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e19a:	2300      	movs	r3, #0
 800e19c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e19e:	e008      	b.n	800e1b2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e1a0:	2310      	movs	r3, #16
 800e1a2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1a4:	e005      	b.n	800e1b2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e1a6:	2320      	movs	r3, #32
 800e1a8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1aa:	e002      	b.n	800e1b2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1b0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	2b03      	cmp	r3, #3
 800e1b8:	d81d      	bhi.n	800e1f6 <HAL_SAI_Init+0xde>
 800e1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e1c0 <HAL_SAI_Init+0xa8>)
 800e1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c0:	0800e1d1 	.word	0x0800e1d1
 800e1c4:	0800e1d7 	.word	0x0800e1d7
 800e1c8:	0800e1df 	.word	0x0800e1df
 800e1cc:	0800e1e7 	.word	0x0800e1e7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61fb      	str	r3, [r7, #28]
      break;
 800e1d4:	e012      	b.n	800e1fc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e1d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e1da:	61fb      	str	r3, [r7, #28]
      break;
 800e1dc:	e00e      	b.n	800e1fc <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e1de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e1e2:	61fb      	str	r3, [r7, #28]
      break;
 800e1e4:	e00a      	b.n	800e1fc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e1e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e1ea:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ee:	f043 0301 	orr.w	r3, r3, #1
 800e1f2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e1f4:	e002      	b.n	800e1fc <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	61fb      	str	r3, [r7, #28]
      break;
 800e1fa:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a51      	ldr	r2, [pc, #324]	@ (800e348 <HAL_SAI_Init+0x230>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d004      	beq.n	800e210 <HAL_SAI_Init+0xf8>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a50      	ldr	r2, [pc, #320]	@ (800e34c <HAL_SAI_Init+0x234>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d103      	bne.n	800e218 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e210:	4a4f      	ldr	r2, [pc, #316]	@ (800e350 <HAL_SAI_Init+0x238>)
 800e212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	e002      	b.n	800e21e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e218:	4a4e      	ldr	r2, [pc, #312]	@ (800e354 <HAL_SAI_Init+0x23c>)
 800e21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21c:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a1b      	ldr	r3, [r3, #32]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d077      	beq.n	800e316 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a47      	ldr	r2, [pc, #284]	@ (800e348 <HAL_SAI_Init+0x230>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d004      	beq.n	800e23a <HAL_SAI_Init+0x122>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a45      	ldr	r2, [pc, #276]	@ (800e34c <HAL_SAI_Init+0x234>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d107      	bne.n	800e24a <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e23a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e23e:	f04f 0100 	mov.w	r1, #0
 800e242:	f7fe f925 	bl	800c490 <HAL_RCCEx_GetPeriphCLKFreq>
 800e246:	61b8      	str	r0, [r7, #24]
 800e248:	e006      	b.n	800e258 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e24a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e24e:	f04f 0100 	mov.w	r1, #0
 800e252:	f7fe f91d 	bl	800c490 <HAL_RCCEx_GetPeriphCLKFreq>
 800e256:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	699b      	ldr	r3, [r3, #24]
 800e25c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e260:	d120      	bne.n	800e2a4 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e266:	2b04      	cmp	r3, #4
 800e268:	d102      	bne.n	800e270 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e26a:	2340      	movs	r3, #64	@ 0x40
 800e26c:	613b      	str	r3, [r7, #16]
 800e26e:	e00a      	b.n	800e286 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e274:	2b08      	cmp	r3, #8
 800e276:	d103      	bne.n	800e280 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e27c:	613b      	str	r3, [r7, #16]
 800e27e:	e002      	b.n	800e286 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e284:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e286:	69ba      	ldr	r2, [r7, #24]
 800e288:	4613      	mov	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	4413      	add	r3, r2
 800e28e:	005b      	lsls	r3, r3, #1
 800e290:	4619      	mov	r1, r3
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a1b      	ldr	r3, [r3, #32]
 800e296:	693a      	ldr	r2, [r7, #16]
 800e298:	fb02 f303 	mul.w	r3, r2, r3
 800e29c:	fbb1 f3f3 	udiv	r3, r1, r3
 800e2a0:	617b      	str	r3, [r7, #20]
 800e2a2:	e017      	b.n	800e2d4 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e2ac:	d101      	bne.n	800e2b2 <HAL_SAI_Init+0x19a>
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	e000      	b.n	800e2b4 <HAL_SAI_Init+0x19c>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e2b6:	69ba      	ldr	r2, [r7, #24]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	68fa      	ldr	r2, [r7, #12]
 800e2c8:	fb02 f303 	mul.w	r3, r2, r3
 800e2cc:	021b      	lsls	r3, r3, #8
 800e2ce:	fbb1 f3f3 	udiv	r3, r1, r3
 800e2d2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	4a20      	ldr	r2, [pc, #128]	@ (800e358 <HAL_SAI_Init+0x240>)
 800e2d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e2dc:	08da      	lsrs	r2, r3, #3
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e2e2:	6979      	ldr	r1, [r7, #20]
 800e2e4:	4b1c      	ldr	r3, [pc, #112]	@ (800e358 <HAL_SAI_Init+0x240>)
 800e2e6:	fba3 2301 	umull	r2, r3, r3, r1
 800e2ea:	08da      	lsrs	r2, r3, #3
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4413      	add	r3, r2
 800e2f2:	005b      	lsls	r3, r3, #1
 800e2f4:	1aca      	subs	r2, r1, r3
 800e2f6:	2a08      	cmp	r2, #8
 800e2f8:	d904      	bls.n	800e304 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2fe:	1c5a      	adds	r2, r3, #1
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e308:	2b04      	cmp	r3, #4
 800e30a:	d104      	bne.n	800e316 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e310:	085a      	lsrs	r2, r3, #1
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d003      	beq.n	800e326 <HAL_SAI_Init+0x20e>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	2b02      	cmp	r3, #2
 800e324:	d109      	bne.n	800e33a <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d101      	bne.n	800e332 <HAL_SAI_Init+0x21a>
 800e32e:	2300      	movs	r3, #0
 800e330:	e001      	b.n	800e336 <HAL_SAI_Init+0x21e>
 800e332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e336:	623b      	str	r3, [r7, #32]
 800e338:	e012      	b.n	800e360 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d10c      	bne.n	800e35c <HAL_SAI_Init+0x244>
 800e342:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e346:	e00a      	b.n	800e35e <HAL_SAI_Init+0x246>
 800e348:	40015404 	.word	0x40015404
 800e34c:	40015424 	.word	0x40015424
 800e350:	40015400 	.word	0x40015400
 800e354:	40015800 	.word	0x40015800
 800e358:	cccccccd 	.word	0xcccccccd
 800e35c:	2300      	movs	r3, #0
 800e35e:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	6819      	ldr	r1, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	4b59      	ldr	r3, [pc, #356]	@ (800e4d0 <HAL_SAI_Init+0x3b8>)
 800e36c:	400b      	ands	r3, r1
 800e36e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6819      	ldr	r1, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	685a      	ldr	r2, [r3, #4]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e37e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e384:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e38a:	431a      	orrs	r2, r3
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e398:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	695b      	ldr	r3, [r3, #20]
 800e39e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e3a4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3aa:	051b      	lsls	r3, r3, #20
 800e3ac:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e3b2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	430a      	orrs	r2, r1
 800e3c0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	6812      	ldr	r2, [r2, #0]
 800e3cc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e3d0:	f023 030f 	bic.w	r3, r3, #15
 800e3d4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	6859      	ldr	r1, [r3, #4]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	69da      	ldr	r2, [r3, #28]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3e4:	431a      	orrs	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3ea:	431a      	orrs	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	430a      	orrs	r2, r1
 800e3f2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	6899      	ldr	r1, [r3, #8]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	4b35      	ldr	r3, [pc, #212]	@ (800e4d4 <HAL_SAI_Init+0x3bc>)
 800e400:	400b      	ands	r3, r1
 800e402:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	6899      	ldr	r1, [r3, #8]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e40e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e414:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e41a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e420:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e426:	3b01      	subs	r3, #1
 800e428:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e42a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	430a      	orrs	r2, r1
 800e432:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	68d9      	ldr	r1, [r3, #12]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e442:	400b      	ands	r3, r1
 800e444:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	68d9      	ldr	r1, [r3, #12]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e454:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e45a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e45c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e462:	3b01      	subs	r3, #1
 800e464:	021b      	lsls	r3, r3, #8
 800e466:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	430a      	orrs	r2, r1
 800e46e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a18      	ldr	r2, [pc, #96]	@ (800e4d8 <HAL_SAI_Init+0x3c0>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d119      	bne.n	800e4ae <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e47a:	4b18      	ldr	r3, [pc, #96]	@ (800e4dc <HAL_SAI_Init+0x3c4>)
 800e47c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e47e:	4a17      	ldr	r2, [pc, #92]	@ (800e4dc <HAL_SAI_Init+0x3c4>)
 800e480:	f023 0301 	bic.w	r3, r3, #1
 800e484:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d10e      	bne.n	800e4ae <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e498:	3b01      	subs	r3, #1
 800e49a:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e49c:	490f      	ldr	r1, [pc, #60]	@ (800e4dc <HAL_SAI_Init+0x3c4>)
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e4a2:	4b0e      	ldr	r3, [pc, #56]	@ (800e4dc <HAL_SAI_Init+0x3c4>)
 800e4a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4a6:	4a0d      	ldr	r2, [pc, #52]	@ (800e4dc <HAL_SAI_Init+0x3c4>)
 800e4a8:	f043 0301 	orr.w	r3, r3, #1
 800e4ac:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e4c6:	2300      	movs	r3, #0
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3728      	adds	r7, #40	@ 0x28
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	f005c010 	.word	0xf005c010
 800e4d4:	fff88000 	.word	0xfff88000
 800e4d8:	40015404 	.word	0x40015404
 800e4dc:	40015400 	.word	0x40015400

0800e4e0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b087      	sub	sp, #28
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
 800e4ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <SAI_InitI2S+0x2e>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	d103      	bne.n	800e516 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2200      	movs	r2, #0
 800e512:	651a      	str	r2, [r3, #80]	@ 0x50
 800e514:	e002      	b.n	800e51c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2201      	movs	r2, #1
 800e51a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e522:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e52a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2200      	movs	r2, #0
 800e530:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	683a      	ldr	r2, [r7, #0]
 800e536:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	f003 0301 	and.w	r3, r3, #1
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d001      	beq.n	800e546 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e542:	2301      	movs	r3, #1
 800e544:	e077      	b.n	800e636 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d107      	bne.n	800e55c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2200      	movs	r2, #0
 800e550:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e558:	665a      	str	r2, [r3, #100]	@ 0x64
 800e55a:	e006      	b.n	800e56a <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e562:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2200      	movs	r2, #0
 800e568:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	d84f      	bhi.n	800e610 <SAI_InitI2S+0x130>
 800e570:	a201      	add	r2, pc, #4	@ (adr r2, 800e578 <SAI_InitI2S+0x98>)
 800e572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e576:	bf00      	nop
 800e578:	0800e589 	.word	0x0800e589
 800e57c:	0800e5ab 	.word	0x0800e5ab
 800e580:	0800e5cd 	.word	0x0800e5cd
 800e584:	0800e5ef 	.word	0x0800e5ef
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2280      	movs	r2, #128	@ 0x80
 800e58c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	085b      	lsrs	r3, r3, #1
 800e592:	015a      	lsls	r2, r3, #5
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	085b      	lsrs	r3, r3, #1
 800e59c:	011a      	lsls	r2, r3, #4
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2240      	movs	r2, #64	@ 0x40
 800e5a6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e5a8:	e035      	b.n	800e616 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2280      	movs	r2, #128	@ 0x80
 800e5ae:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	085b      	lsrs	r3, r3, #1
 800e5b4:	019a      	lsls	r2, r3, #6
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	085b      	lsrs	r3, r3, #1
 800e5be:	015a      	lsls	r2, r3, #5
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2280      	movs	r2, #128	@ 0x80
 800e5c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e5ca:	e024      	b.n	800e616 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	22c0      	movs	r2, #192	@ 0xc0
 800e5d0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	085b      	lsrs	r3, r3, #1
 800e5d6:	019a      	lsls	r2, r3, #6
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	085b      	lsrs	r3, r3, #1
 800e5e0:	015a      	lsls	r2, r3, #5
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2280      	movs	r2, #128	@ 0x80
 800e5ea:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e5ec:	e013      	b.n	800e616 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	22e0      	movs	r2, #224	@ 0xe0
 800e5f2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	085b      	lsrs	r3, r3, #1
 800e5f8:	019a      	lsls	r2, r3, #6
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	085b      	lsrs	r3, r3, #1
 800e602:	015a      	lsls	r2, r3, #5
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2280      	movs	r2, #128	@ 0x80
 800e60c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e60e:	e002      	b.n	800e616 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e610:	2301      	movs	r3, #1
 800e612:	75fb      	strb	r3, [r7, #23]
      break;
 800e614:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	2b02      	cmp	r3, #2
 800e61a:	d10b      	bne.n	800e634 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d102      	bne.n	800e628 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2210      	movs	r2, #16
 800e626:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b02      	cmp	r3, #2
 800e62c:	d102      	bne.n	800e634 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2208      	movs	r2, #8
 800e632:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800e634:	7dfb      	ldrb	r3, [r7, #23]
}
 800e636:	4618      	mov	r0, r3
 800e638:	371c      	adds	r7, #28
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr
 800e642:	bf00      	nop

0800e644 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e644:	b480      	push	{r7}
 800e646:	b087      	sub	sp, #28
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
 800e650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2200      	movs	r2, #0
 800e65a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d003      	beq.n	800e672 <SAI_InitPCM+0x2e>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	2b02      	cmp	r3, #2
 800e670:	d103      	bne.n	800e67a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2201      	movs	r2, #1
 800e676:	651a      	str	r2, [r3, #80]	@ 0x50
 800e678:	e002      	b.n	800e680 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2200      	movs	r2, #0
 800e67e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2200      	movs	r2, #0
 800e684:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e68c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e694:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2200      	movs	r2, #0
 800e69a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	683a      	ldr	r2, [r7, #0]
 800e6a0:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e6a8:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	2b04      	cmp	r3, #4
 800e6ae:	d103      	bne.n	800e6b8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	659a      	str	r2, [r3, #88]	@ 0x58
 800e6b6:	e002      	b.n	800e6be <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	220d      	movs	r2, #13
 800e6bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b03      	cmp	r3, #3
 800e6c2:	d837      	bhi.n	800e734 <SAI_InitPCM+0xf0>
 800e6c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e6cc <SAI_InitPCM+0x88>)
 800e6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ca:	bf00      	nop
 800e6cc:	0800e6dd 	.word	0x0800e6dd
 800e6d0:	0800e6f3 	.word	0x0800e6f3
 800e6d4:	0800e709 	.word	0x0800e709
 800e6d8:	0800e71f 	.word	0x0800e71f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2280      	movs	r2, #128	@ 0x80
 800e6e0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	011a      	lsls	r2, r3, #4
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2240      	movs	r2, #64	@ 0x40
 800e6ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e6f0:	e023      	b.n	800e73a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2280      	movs	r2, #128	@ 0x80
 800e6f6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	015a      	lsls	r2, r3, #5
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2280      	movs	r2, #128	@ 0x80
 800e704:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e706:	e018      	b.n	800e73a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	22c0      	movs	r2, #192	@ 0xc0
 800e70c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	015a      	lsls	r2, r3, #5
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2280      	movs	r2, #128	@ 0x80
 800e71a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e71c:	e00d      	b.n	800e73a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	22e0      	movs	r2, #224	@ 0xe0
 800e722:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	015a      	lsls	r2, r3, #5
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2280      	movs	r2, #128	@ 0x80
 800e730:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e732:	e002      	b.n	800e73a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e734:	2301      	movs	r3, #1
 800e736:	75fb      	strb	r3, [r7, #23]
      break;
 800e738:	bf00      	nop
  }

  return status;
 800e73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	371c      	adds	r7, #28
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e750:	4b18      	ldr	r3, [pc, #96]	@ (800e7b4 <SAI_Disable+0x6c>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4a18      	ldr	r2, [pc, #96]	@ (800e7b8 <SAI_Disable+0x70>)
 800e756:	fba2 2303 	umull	r2, r3, r2, r3
 800e75a:	0b1b      	lsrs	r3, r3, #12
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800e772:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10a      	bne.n	800e790 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e780:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800e78a:	2303      	movs	r3, #3
 800e78c:	72fb      	strb	r3, [r7, #11]
      break;
 800e78e:	e009      	b.n	800e7a4 <SAI_Disable+0x5c>
    }
    count--;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	3b01      	subs	r3, #1
 800e794:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1e7      	bne.n	800e774 <SAI_Disable+0x2c>

  return status;
 800e7a4:	7afb      	ldrb	r3, [r7, #11]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3714      	adds	r7, #20
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	20000000 	.word	0x20000000
 800e7b8:	95cbec1b 	.word	0x95cbec1b

0800e7bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e049      	b.n	800e862 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d106      	bne.n	800e7e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f7f3 ffbc 	bl	8002760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2202      	movs	r2, #2
 800e7ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	f000 fb3c 	bl	800ee78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2201      	movs	r2, #1
 800e844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e860:	2300      	movs	r3, #0
}
 800e862:	4618      	mov	r0, r3
 800e864:	3708      	adds	r7, #8
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
	...

0800e86c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d001      	beq.n	800e884 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e880:	2301      	movs	r3, #1
 800e882:	e06a      	b.n	800e95a <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2202      	movs	r2, #2
 800e888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a35      	ldr	r2, [pc, #212]	@ (800e968 <HAL_TIM_Base_Start+0xfc>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d040      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a34      	ldr	r2, [pc, #208]	@ (800e96c <HAL_TIM_Base_Start+0x100>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d03b      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8a8:	d036      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e8b2:	d031      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a2d      	ldr	r2, [pc, #180]	@ (800e970 <HAL_TIM_Base_Start+0x104>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d02c      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4a2c      	ldr	r2, [pc, #176]	@ (800e974 <HAL_TIM_Base_Start+0x108>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d027      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a2a      	ldr	r2, [pc, #168]	@ (800e978 <HAL_TIM_Base_Start+0x10c>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d022      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4a29      	ldr	r2, [pc, #164]	@ (800e97c <HAL_TIM_Base_Start+0x110>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d01d      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a27      	ldr	r2, [pc, #156]	@ (800e980 <HAL_TIM_Base_Start+0x114>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d018      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4a26      	ldr	r2, [pc, #152]	@ (800e984 <HAL_TIM_Base_Start+0x118>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d013      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a24      	ldr	r2, [pc, #144]	@ (800e988 <HAL_TIM_Base_Start+0x11c>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d00e      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4a23      	ldr	r2, [pc, #140]	@ (800e98c <HAL_TIM_Base_Start+0x120>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d009      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4a21      	ldr	r2, [pc, #132]	@ (800e990 <HAL_TIM_Base_Start+0x124>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d004      	beq.n	800e918 <HAL_TIM_Base_Start+0xac>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	4a20      	ldr	r2, [pc, #128]	@ (800e994 <HAL_TIM_Base_Start+0x128>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d115      	bne.n	800e944 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	689a      	ldr	r2, [r3, #8]
 800e91e:	4b1e      	ldr	r3, [pc, #120]	@ (800e998 <HAL_TIM_Base_Start+0x12c>)
 800e920:	4013      	ands	r3, r2
 800e922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2b06      	cmp	r3, #6
 800e928:	d015      	beq.n	800e956 <HAL_TIM_Base_Start+0xea>
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e930:	d011      	beq.n	800e956 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f042 0201 	orr.w	r2, r2, #1
 800e940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e942:	e008      	b.n	800e956 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f042 0201 	orr.w	r2, r2, #1
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	e000      	b.n	800e958 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3714      	adds	r7, #20
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr
 800e966:	bf00      	nop
 800e968:	40012c00 	.word	0x40012c00
 800e96c:	50012c00 	.word	0x50012c00
 800e970:	40000400 	.word	0x40000400
 800e974:	50000400 	.word	0x50000400
 800e978:	40000800 	.word	0x40000800
 800e97c:	50000800 	.word	0x50000800
 800e980:	40000c00 	.word	0x40000c00
 800e984:	50000c00 	.word	0x50000c00
 800e988:	40013400 	.word	0x40013400
 800e98c:	50013400 	.word	0x50013400
 800e990:	40014000 	.word	0x40014000
 800e994:	50014000 	.word	0x50014000
 800e998:	00010007 	.word	0x00010007

0800e99c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d101      	bne.n	800e9ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e049      	b.n	800ea42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d106      	bne.n	800e9c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f7f3 feaa 	bl	800271c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2202      	movs	r2, #2
 800e9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3304      	adds	r3, #4
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4610      	mov	r0, r2
 800e9dc:	f000 fa4c 	bl	800ee78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2201      	movs	r2, #1
 800ea14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2201      	movs	r2, #1
 800ea24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
	...

0800ea4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b086      	sub	sp, #24
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	60b9      	str	r1, [r7, #8]
 800ea56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d101      	bne.n	800ea6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ea66:	2302      	movs	r3, #2
 800ea68:	e0ff      	b.n	800ec6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2b14      	cmp	r3, #20
 800ea76:	f200 80f0 	bhi.w	800ec5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ea7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ea7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea80:	0800ead5 	.word	0x0800ead5
 800ea84:	0800ec5b 	.word	0x0800ec5b
 800ea88:	0800ec5b 	.word	0x0800ec5b
 800ea8c:	0800ec5b 	.word	0x0800ec5b
 800ea90:	0800eb15 	.word	0x0800eb15
 800ea94:	0800ec5b 	.word	0x0800ec5b
 800ea98:	0800ec5b 	.word	0x0800ec5b
 800ea9c:	0800ec5b 	.word	0x0800ec5b
 800eaa0:	0800eb57 	.word	0x0800eb57
 800eaa4:	0800ec5b 	.word	0x0800ec5b
 800eaa8:	0800ec5b 	.word	0x0800ec5b
 800eaac:	0800ec5b 	.word	0x0800ec5b
 800eab0:	0800eb97 	.word	0x0800eb97
 800eab4:	0800ec5b 	.word	0x0800ec5b
 800eab8:	0800ec5b 	.word	0x0800ec5b
 800eabc:	0800ec5b 	.word	0x0800ec5b
 800eac0:	0800ebd9 	.word	0x0800ebd9
 800eac4:	0800ec5b 	.word	0x0800ec5b
 800eac8:	0800ec5b 	.word	0x0800ec5b
 800eacc:	0800ec5b 	.word	0x0800ec5b
 800ead0:	0800ec19 	.word	0x0800ec19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	68b9      	ldr	r1, [r7, #8]
 800eada:	4618      	mov	r0, r3
 800eadc:	f000 fad2 	bl	800f084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	699a      	ldr	r2, [r3, #24]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f042 0208 	orr.w	r2, r2, #8
 800eaee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	699a      	ldr	r2, [r3, #24]
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f022 0204 	bic.w	r2, r2, #4
 800eafe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	6999      	ldr	r1, [r3, #24]
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	691a      	ldr	r2, [r3, #16]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	430a      	orrs	r2, r1
 800eb10:	619a      	str	r2, [r3, #24]
      break;
 800eb12:	e0a5      	b.n	800ec60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	68b9      	ldr	r1, [r7, #8]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f000 fb74 	bl	800f208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	699a      	ldr	r2, [r3, #24]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eb2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	699a      	ldr	r2, [r3, #24]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eb3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	6999      	ldr	r1, [r3, #24]
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	021a      	lsls	r2, r3, #8
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	430a      	orrs	r2, r1
 800eb52:	619a      	str	r2, [r3, #24]
      break;
 800eb54:	e084      	b.n	800ec60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68b9      	ldr	r1, [r7, #8]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f000 fc03 	bl	800f368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	69da      	ldr	r2, [r3, #28]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f042 0208 	orr.w	r2, r2, #8
 800eb70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	69da      	ldr	r2, [r3, #28]
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f022 0204 	bic.w	r2, r2, #4
 800eb80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	69d9      	ldr	r1, [r3, #28]
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	691a      	ldr	r2, [r3, #16]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	430a      	orrs	r2, r1
 800eb92:	61da      	str	r2, [r3, #28]
      break;
 800eb94:	e064      	b.n	800ec60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	68b9      	ldr	r1, [r7, #8]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f000 fc91 	bl	800f4c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	69da      	ldr	r2, [r3, #28]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ebb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	69da      	ldr	r2, [r3, #28]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ebc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	69d9      	ldr	r1, [r3, #28]
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	691b      	ldr	r3, [r3, #16]
 800ebcc:	021a      	lsls	r2, r3, #8
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	430a      	orrs	r2, r1
 800ebd4:	61da      	str	r2, [r3, #28]
      break;
 800ebd6:	e043      	b.n	800ec60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	68b9      	ldr	r1, [r7, #8]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f000 fd20 	bl	800f624 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f042 0208 	orr.w	r2, r2, #8
 800ebf2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f022 0204 	bic.w	r2, r2, #4
 800ec02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	691a      	ldr	r2, [r3, #16]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	430a      	orrs	r2, r1
 800ec14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ec16:	e023      	b.n	800ec60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	68b9      	ldr	r1, [r7, #8]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f000 fd82 	bl	800f728 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	021a      	lsls	r2, r3, #8
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	430a      	orrs	r2, r1
 800ec56:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ec58:	e002      	b.n	800ec60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ec5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2200      	movs	r2, #0
 800ec64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ec68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop

0800ec74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d101      	bne.n	800ec90 <HAL_TIM_ConfigClockSource+0x1c>
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	e0e6      	b.n	800ee5e <HAL_TIM_ConfigClockSource+0x1ea>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2201      	movs	r2, #1
 800ec94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2202      	movs	r2, #2
 800ec9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	689b      	ldr	r3, [r3, #8]
 800eca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ecae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ecb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ecba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68ba      	ldr	r2, [r7, #8]
 800ecc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a67      	ldr	r2, [pc, #412]	@ (800ee68 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	f000 80b1 	beq.w	800ee32 <HAL_TIM_ConfigClockSource+0x1be>
 800ecd0:	4a65      	ldr	r2, [pc, #404]	@ (800ee68 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	f200 80b6 	bhi.w	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ecd8:	4a64      	ldr	r2, [pc, #400]	@ (800ee6c <HAL_TIM_ConfigClockSource+0x1f8>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	f000 80a9 	beq.w	800ee32 <HAL_TIM_ConfigClockSource+0x1be>
 800ece0:	4a62      	ldr	r2, [pc, #392]	@ (800ee6c <HAL_TIM_ConfigClockSource+0x1f8>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	f200 80ae 	bhi.w	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ece8:	4a61      	ldr	r2, [pc, #388]	@ (800ee70 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	f000 80a1 	beq.w	800ee32 <HAL_TIM_ConfigClockSource+0x1be>
 800ecf0:	4a5f      	ldr	r2, [pc, #380]	@ (800ee70 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	f200 80a6 	bhi.w	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ecf8:	4a5e      	ldr	r2, [pc, #376]	@ (800ee74 <HAL_TIM_ConfigClockSource+0x200>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	f000 8099 	beq.w	800ee32 <HAL_TIM_ConfigClockSource+0x1be>
 800ed00:	4a5c      	ldr	r2, [pc, #368]	@ (800ee74 <HAL_TIM_ConfigClockSource+0x200>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	f200 809e 	bhi.w	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ed0c:	f000 8091 	beq.w	800ee32 <HAL_TIM_ConfigClockSource+0x1be>
 800ed10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ed14:	f200 8096 	bhi.w	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed1c:	f000 8089 	beq.w	800ee32 <HAL_TIM_ConfigClockSource+0x1be>
 800ed20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed24:	f200 808e 	bhi.w	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed2c:	d03e      	beq.n	800edac <HAL_TIM_ConfigClockSource+0x138>
 800ed2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed32:	f200 8087 	bhi.w	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed3a:	f000 8086 	beq.w	800ee4a <HAL_TIM_ConfigClockSource+0x1d6>
 800ed3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed42:	d87f      	bhi.n	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed44:	2b70      	cmp	r3, #112	@ 0x70
 800ed46:	d01a      	beq.n	800ed7e <HAL_TIM_ConfigClockSource+0x10a>
 800ed48:	2b70      	cmp	r3, #112	@ 0x70
 800ed4a:	d87b      	bhi.n	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed4c:	2b60      	cmp	r3, #96	@ 0x60
 800ed4e:	d050      	beq.n	800edf2 <HAL_TIM_ConfigClockSource+0x17e>
 800ed50:	2b60      	cmp	r3, #96	@ 0x60
 800ed52:	d877      	bhi.n	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed54:	2b50      	cmp	r3, #80	@ 0x50
 800ed56:	d03c      	beq.n	800edd2 <HAL_TIM_ConfigClockSource+0x15e>
 800ed58:	2b50      	cmp	r3, #80	@ 0x50
 800ed5a:	d873      	bhi.n	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed5c:	2b40      	cmp	r3, #64	@ 0x40
 800ed5e:	d058      	beq.n	800ee12 <HAL_TIM_ConfigClockSource+0x19e>
 800ed60:	2b40      	cmp	r3, #64	@ 0x40
 800ed62:	d86f      	bhi.n	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed64:	2b30      	cmp	r3, #48	@ 0x30
 800ed66:	d064      	beq.n	800ee32 <HAL_TIM_ConfigClockSource+0x1be>
 800ed68:	2b30      	cmp	r3, #48	@ 0x30
 800ed6a:	d86b      	bhi.n	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed6c:	2b20      	cmp	r3, #32
 800ed6e:	d060      	beq.n	800ee32 <HAL_TIM_ConfigClockSource+0x1be>
 800ed70:	2b20      	cmp	r3, #32
 800ed72:	d867      	bhi.n	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d05c      	beq.n	800ee32 <HAL_TIM_ConfigClockSource+0x1be>
 800ed78:	2b10      	cmp	r3, #16
 800ed7a:	d05a      	beq.n	800ee32 <HAL_TIM_ConfigClockSource+0x1be>
 800ed7c:	e062      	b.n	800ee44 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ed8e:	f000 fdcb 	bl	800f928 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800eda0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	68ba      	ldr	r2, [r7, #8]
 800eda8:	609a      	str	r2, [r3, #8]
      break;
 800edaa:	e04f      	b.n	800ee4c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800edbc:	f000 fdb4 	bl	800f928 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	689a      	ldr	r2, [r3, #8]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800edce:	609a      	str	r2, [r3, #8]
      break;
 800edd0:	e03c      	b.n	800ee4c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800edde:	461a      	mov	r2, r3
 800ede0:	f000 fd26 	bl	800f830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2150      	movs	r1, #80	@ 0x50
 800edea:	4618      	mov	r0, r3
 800edec:	f000 fd7f 	bl	800f8ee <TIM_ITRx_SetConfig>
      break;
 800edf0:	e02c      	b.n	800ee4c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800edfe:	461a      	mov	r2, r3
 800ee00:	f000 fd45 	bl	800f88e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2160      	movs	r1, #96	@ 0x60
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f000 fd6f 	bl	800f8ee <TIM_ITRx_SetConfig>
      break;
 800ee10:	e01c      	b.n	800ee4c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee1e:	461a      	mov	r2, r3
 800ee20:	f000 fd06 	bl	800f830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	2140      	movs	r1, #64	@ 0x40
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 fd5f 	bl	800f8ee <TIM_ITRx_SetConfig>
      break;
 800ee30:	e00c      	b.n	800ee4c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	4610      	mov	r0, r2
 800ee3e:	f000 fd56 	bl	800f8ee <TIM_ITRx_SetConfig>
      break;
 800ee42:	e003      	b.n	800ee4c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800ee44:	2301      	movs	r3, #1
 800ee46:	73fb      	strb	r3, [r7, #15]
      break;
 800ee48:	e000      	b.n	800ee4c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800ee4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ee5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	00100070 	.word	0x00100070
 800ee6c:	00100040 	.word	0x00100040
 800ee70:	00100030 	.word	0x00100030
 800ee74:	00100020 	.word	0x00100020

0800ee78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b085      	sub	sp, #20
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4a6e      	ldr	r2, [pc, #440]	@ (800f044 <TIM_Base_SetConfig+0x1cc>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d02b      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a6d      	ldr	r2, [pc, #436]	@ (800f048 <TIM_Base_SetConfig+0x1d0>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d027      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee9e:	d023      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eea6:	d01f      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	4a68      	ldr	r2, [pc, #416]	@ (800f04c <TIM_Base_SetConfig+0x1d4>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d01b      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	4a67      	ldr	r2, [pc, #412]	@ (800f050 <TIM_Base_SetConfig+0x1d8>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d017      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	4a66      	ldr	r2, [pc, #408]	@ (800f054 <TIM_Base_SetConfig+0x1dc>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d013      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	4a65      	ldr	r2, [pc, #404]	@ (800f058 <TIM_Base_SetConfig+0x1e0>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d00f      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a64      	ldr	r2, [pc, #400]	@ (800f05c <TIM_Base_SetConfig+0x1e4>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d00b      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a63      	ldr	r2, [pc, #396]	@ (800f060 <TIM_Base_SetConfig+0x1e8>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d007      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4a62      	ldr	r2, [pc, #392]	@ (800f064 <TIM_Base_SetConfig+0x1ec>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d003      	beq.n	800eee8 <TIM_Base_SetConfig+0x70>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a61      	ldr	r2, [pc, #388]	@ (800f068 <TIM_Base_SetConfig+0x1f0>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d108      	bne.n	800eefa <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eeee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	4313      	orrs	r3, r2
 800eef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4a51      	ldr	r2, [pc, #324]	@ (800f044 <TIM_Base_SetConfig+0x1cc>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d043      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	4a50      	ldr	r2, [pc, #320]	@ (800f048 <TIM_Base_SetConfig+0x1d0>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d03f      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef10:	d03b      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef18:	d037      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4a4b      	ldr	r2, [pc, #300]	@ (800f04c <TIM_Base_SetConfig+0x1d4>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d033      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4a4a      	ldr	r2, [pc, #296]	@ (800f050 <TIM_Base_SetConfig+0x1d8>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d02f      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4a49      	ldr	r2, [pc, #292]	@ (800f054 <TIM_Base_SetConfig+0x1dc>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d02b      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4a48      	ldr	r2, [pc, #288]	@ (800f058 <TIM_Base_SetConfig+0x1e0>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d027      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4a47      	ldr	r2, [pc, #284]	@ (800f05c <TIM_Base_SetConfig+0x1e4>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d023      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4a46      	ldr	r2, [pc, #280]	@ (800f060 <TIM_Base_SetConfig+0x1e8>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d01f      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4a45      	ldr	r2, [pc, #276]	@ (800f064 <TIM_Base_SetConfig+0x1ec>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d01b      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a44      	ldr	r2, [pc, #272]	@ (800f068 <TIM_Base_SetConfig+0x1f0>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d017      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4a43      	ldr	r2, [pc, #268]	@ (800f06c <TIM_Base_SetConfig+0x1f4>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d013      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4a42      	ldr	r2, [pc, #264]	@ (800f070 <TIM_Base_SetConfig+0x1f8>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d00f      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	4a41      	ldr	r2, [pc, #260]	@ (800f074 <TIM_Base_SetConfig+0x1fc>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d00b      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4a40      	ldr	r2, [pc, #256]	@ (800f078 <TIM_Base_SetConfig+0x200>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d007      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4a3f      	ldr	r2, [pc, #252]	@ (800f07c <TIM_Base_SetConfig+0x204>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d003      	beq.n	800ef8a <TIM_Base_SetConfig+0x112>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4a3e      	ldr	r2, [pc, #248]	@ (800f080 <TIM_Base_SetConfig+0x208>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d108      	bne.n	800ef9c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	68fa      	ldr	r2, [r7, #12]
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	695b      	ldr	r3, [r3, #20]
 800efa6:	4313      	orrs	r3, r2
 800efa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	689a      	ldr	r2, [r3, #8]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a20      	ldr	r2, [pc, #128]	@ (800f044 <TIM_Base_SetConfig+0x1cc>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d023      	beq.n	800f010 <TIM_Base_SetConfig+0x198>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4a1f      	ldr	r2, [pc, #124]	@ (800f048 <TIM_Base_SetConfig+0x1d0>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d01f      	beq.n	800f010 <TIM_Base_SetConfig+0x198>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	4a24      	ldr	r2, [pc, #144]	@ (800f064 <TIM_Base_SetConfig+0x1ec>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d01b      	beq.n	800f010 <TIM_Base_SetConfig+0x198>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4a23      	ldr	r2, [pc, #140]	@ (800f068 <TIM_Base_SetConfig+0x1f0>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d017      	beq.n	800f010 <TIM_Base_SetConfig+0x198>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	4a22      	ldr	r2, [pc, #136]	@ (800f06c <TIM_Base_SetConfig+0x1f4>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d013      	beq.n	800f010 <TIM_Base_SetConfig+0x198>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a21      	ldr	r2, [pc, #132]	@ (800f070 <TIM_Base_SetConfig+0x1f8>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d00f      	beq.n	800f010 <TIM_Base_SetConfig+0x198>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4a20      	ldr	r2, [pc, #128]	@ (800f074 <TIM_Base_SetConfig+0x1fc>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d00b      	beq.n	800f010 <TIM_Base_SetConfig+0x198>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	4a1f      	ldr	r2, [pc, #124]	@ (800f078 <TIM_Base_SetConfig+0x200>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d007      	beq.n	800f010 <TIM_Base_SetConfig+0x198>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a1e      	ldr	r2, [pc, #120]	@ (800f07c <TIM_Base_SetConfig+0x204>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d003      	beq.n	800f010 <TIM_Base_SetConfig+0x198>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4a1d      	ldr	r2, [pc, #116]	@ (800f080 <TIM_Base_SetConfig+0x208>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d103      	bne.n	800f018 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	691a      	ldr	r2, [r3, #16]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2201      	movs	r2, #1
 800f01c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	691b      	ldr	r3, [r3, #16]
 800f022:	f003 0301 	and.w	r3, r3, #1
 800f026:	2b01      	cmp	r3, #1
 800f028:	d105      	bne.n	800f036 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	691b      	ldr	r3, [r3, #16]
 800f02e:	f023 0201 	bic.w	r2, r3, #1
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	611a      	str	r2, [r3, #16]
  }
}
 800f036:	bf00      	nop
 800f038:	3714      	adds	r7, #20
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop
 800f044:	40012c00 	.word	0x40012c00
 800f048:	50012c00 	.word	0x50012c00
 800f04c:	40000400 	.word	0x40000400
 800f050:	50000400 	.word	0x50000400
 800f054:	40000800 	.word	0x40000800
 800f058:	50000800 	.word	0x50000800
 800f05c:	40000c00 	.word	0x40000c00
 800f060:	50000c00 	.word	0x50000c00
 800f064:	40013400 	.word	0x40013400
 800f068:	50013400 	.word	0x50013400
 800f06c:	40014000 	.word	0x40014000
 800f070:	50014000 	.word	0x50014000
 800f074:	40014400 	.word	0x40014400
 800f078:	50014400 	.word	0x50014400
 800f07c:	40014800 	.word	0x40014800
 800f080:	50014800 	.word	0x50014800

0800f084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f084:	b480      	push	{r7}
 800f086:	b087      	sub	sp, #28
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a1b      	ldr	r3, [r3, #32]
 800f092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6a1b      	ldr	r3, [r3, #32]
 800f098:	f023 0201 	bic.w	r2, r3, #1
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	699b      	ldr	r3, [r3, #24]
 800f0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f0b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f023 0303 	bic.w	r3, r3, #3
 800f0be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	f023 0302 	bic.w	r3, r3, #2
 800f0d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	697a      	ldr	r2, [r7, #20]
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a40      	ldr	r2, [pc, #256]	@ (800f1e0 <TIM_OC1_SetConfig+0x15c>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d023      	beq.n	800f12c <TIM_OC1_SetConfig+0xa8>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a3f      	ldr	r2, [pc, #252]	@ (800f1e4 <TIM_OC1_SetConfig+0x160>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d01f      	beq.n	800f12c <TIM_OC1_SetConfig+0xa8>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4a3e      	ldr	r2, [pc, #248]	@ (800f1e8 <TIM_OC1_SetConfig+0x164>)
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d01b      	beq.n	800f12c <TIM_OC1_SetConfig+0xa8>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4a3d      	ldr	r2, [pc, #244]	@ (800f1ec <TIM_OC1_SetConfig+0x168>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d017      	beq.n	800f12c <TIM_OC1_SetConfig+0xa8>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4a3c      	ldr	r2, [pc, #240]	@ (800f1f0 <TIM_OC1_SetConfig+0x16c>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d013      	beq.n	800f12c <TIM_OC1_SetConfig+0xa8>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4a3b      	ldr	r2, [pc, #236]	@ (800f1f4 <TIM_OC1_SetConfig+0x170>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d00f      	beq.n	800f12c <TIM_OC1_SetConfig+0xa8>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	4a3a      	ldr	r2, [pc, #232]	@ (800f1f8 <TIM_OC1_SetConfig+0x174>)
 800f110:	4293      	cmp	r3, r2
 800f112:	d00b      	beq.n	800f12c <TIM_OC1_SetConfig+0xa8>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4a39      	ldr	r2, [pc, #228]	@ (800f1fc <TIM_OC1_SetConfig+0x178>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d007      	beq.n	800f12c <TIM_OC1_SetConfig+0xa8>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	4a38      	ldr	r2, [pc, #224]	@ (800f200 <TIM_OC1_SetConfig+0x17c>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d003      	beq.n	800f12c <TIM_OC1_SetConfig+0xa8>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	4a37      	ldr	r2, [pc, #220]	@ (800f204 <TIM_OC1_SetConfig+0x180>)
 800f128:	4293      	cmp	r3, r2
 800f12a:	d10c      	bne.n	800f146 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	f023 0308 	bic.w	r3, r3, #8
 800f132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	697a      	ldr	r2, [r7, #20]
 800f13a:	4313      	orrs	r3, r2
 800f13c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	f023 0304 	bic.w	r3, r3, #4
 800f144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4a25      	ldr	r2, [pc, #148]	@ (800f1e0 <TIM_OC1_SetConfig+0x15c>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d023      	beq.n	800f196 <TIM_OC1_SetConfig+0x112>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4a24      	ldr	r2, [pc, #144]	@ (800f1e4 <TIM_OC1_SetConfig+0x160>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d01f      	beq.n	800f196 <TIM_OC1_SetConfig+0x112>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	4a23      	ldr	r2, [pc, #140]	@ (800f1e8 <TIM_OC1_SetConfig+0x164>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d01b      	beq.n	800f196 <TIM_OC1_SetConfig+0x112>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4a22      	ldr	r2, [pc, #136]	@ (800f1ec <TIM_OC1_SetConfig+0x168>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d017      	beq.n	800f196 <TIM_OC1_SetConfig+0x112>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4a21      	ldr	r2, [pc, #132]	@ (800f1f0 <TIM_OC1_SetConfig+0x16c>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d013      	beq.n	800f196 <TIM_OC1_SetConfig+0x112>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4a20      	ldr	r2, [pc, #128]	@ (800f1f4 <TIM_OC1_SetConfig+0x170>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d00f      	beq.n	800f196 <TIM_OC1_SetConfig+0x112>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4a1f      	ldr	r2, [pc, #124]	@ (800f1f8 <TIM_OC1_SetConfig+0x174>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d00b      	beq.n	800f196 <TIM_OC1_SetConfig+0x112>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4a1e      	ldr	r2, [pc, #120]	@ (800f1fc <TIM_OC1_SetConfig+0x178>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d007      	beq.n	800f196 <TIM_OC1_SetConfig+0x112>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4a1d      	ldr	r2, [pc, #116]	@ (800f200 <TIM_OC1_SetConfig+0x17c>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d003      	beq.n	800f196 <TIM_OC1_SetConfig+0x112>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4a1c      	ldr	r2, [pc, #112]	@ (800f204 <TIM_OC1_SetConfig+0x180>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d111      	bne.n	800f1ba <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f19c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f1a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	693a      	ldr	r2, [r7, #16]
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	699b      	ldr	r3, [r3, #24]
 800f1b4:	693a      	ldr	r2, [r7, #16]
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	693a      	ldr	r2, [r7, #16]
 800f1be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	685a      	ldr	r2, [r3, #4]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	697a      	ldr	r2, [r7, #20]
 800f1d2:	621a      	str	r2, [r3, #32]
}
 800f1d4:	bf00      	nop
 800f1d6:	371c      	adds	r7, #28
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr
 800f1e0:	40012c00 	.word	0x40012c00
 800f1e4:	50012c00 	.word	0x50012c00
 800f1e8:	40013400 	.word	0x40013400
 800f1ec:	50013400 	.word	0x50013400
 800f1f0:	40014000 	.word	0x40014000
 800f1f4:	50014000 	.word	0x50014000
 800f1f8:	40014400 	.word	0x40014400
 800f1fc:	50014400 	.word	0x50014400
 800f200:	40014800 	.word	0x40014800
 800f204:	50014800 	.word	0x50014800

0800f208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f208:	b480      	push	{r7}
 800f20a:	b087      	sub	sp, #28
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6a1b      	ldr	r3, [r3, #32]
 800f21c:	f023 0210 	bic.w	r2, r3, #16
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	699b      	ldr	r3, [r3, #24]
 800f22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	021b      	lsls	r3, r3, #8
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	4313      	orrs	r3, r2
 800f24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	f023 0320 	bic.w	r3, r3, #32
 800f256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	689b      	ldr	r3, [r3, #8]
 800f25c:	011b      	lsls	r3, r3, #4
 800f25e:	697a      	ldr	r2, [r7, #20]
 800f260:	4313      	orrs	r3, r2
 800f262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a36      	ldr	r2, [pc, #216]	@ (800f340 <TIM_OC2_SetConfig+0x138>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d00b      	beq.n	800f284 <TIM_OC2_SetConfig+0x7c>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a35      	ldr	r2, [pc, #212]	@ (800f344 <TIM_OC2_SetConfig+0x13c>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d007      	beq.n	800f284 <TIM_OC2_SetConfig+0x7c>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a34      	ldr	r2, [pc, #208]	@ (800f348 <TIM_OC2_SetConfig+0x140>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d003      	beq.n	800f284 <TIM_OC2_SetConfig+0x7c>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4a33      	ldr	r2, [pc, #204]	@ (800f34c <TIM_OC2_SetConfig+0x144>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d10d      	bne.n	800f2a0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f28a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	011b      	lsls	r3, r3, #4
 800f292:	697a      	ldr	r2, [r7, #20]
 800f294:	4313      	orrs	r3, r2
 800f296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f29e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	4a27      	ldr	r2, [pc, #156]	@ (800f340 <TIM_OC2_SetConfig+0x138>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d023      	beq.n	800f2f0 <TIM_OC2_SetConfig+0xe8>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	4a26      	ldr	r2, [pc, #152]	@ (800f344 <TIM_OC2_SetConfig+0x13c>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d01f      	beq.n	800f2f0 <TIM_OC2_SetConfig+0xe8>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	4a25      	ldr	r2, [pc, #148]	@ (800f348 <TIM_OC2_SetConfig+0x140>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d01b      	beq.n	800f2f0 <TIM_OC2_SetConfig+0xe8>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	4a24      	ldr	r2, [pc, #144]	@ (800f34c <TIM_OC2_SetConfig+0x144>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d017      	beq.n	800f2f0 <TIM_OC2_SetConfig+0xe8>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4a23      	ldr	r2, [pc, #140]	@ (800f350 <TIM_OC2_SetConfig+0x148>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d013      	beq.n	800f2f0 <TIM_OC2_SetConfig+0xe8>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	4a22      	ldr	r2, [pc, #136]	@ (800f354 <TIM_OC2_SetConfig+0x14c>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d00f      	beq.n	800f2f0 <TIM_OC2_SetConfig+0xe8>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4a21      	ldr	r2, [pc, #132]	@ (800f358 <TIM_OC2_SetConfig+0x150>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d00b      	beq.n	800f2f0 <TIM_OC2_SetConfig+0xe8>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4a20      	ldr	r2, [pc, #128]	@ (800f35c <TIM_OC2_SetConfig+0x154>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d007      	beq.n	800f2f0 <TIM_OC2_SetConfig+0xe8>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4a1f      	ldr	r2, [pc, #124]	@ (800f360 <TIM_OC2_SetConfig+0x158>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d003      	beq.n	800f2f0 <TIM_OC2_SetConfig+0xe8>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	4a1e      	ldr	r2, [pc, #120]	@ (800f364 <TIM_OC2_SetConfig+0x15c>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d113      	bne.n	800f318 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f2f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f2fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	695b      	ldr	r3, [r3, #20]
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	693a      	ldr	r2, [r7, #16]
 800f308:	4313      	orrs	r3, r2
 800f30a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	699b      	ldr	r3, [r3, #24]
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	693a      	ldr	r2, [r7, #16]
 800f314:	4313      	orrs	r3, r2
 800f316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	693a      	ldr	r2, [r7, #16]
 800f31c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	685a      	ldr	r2, [r3, #4]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	697a      	ldr	r2, [r7, #20]
 800f330:	621a      	str	r2, [r3, #32]
}
 800f332:	bf00      	nop
 800f334:	371c      	adds	r7, #28
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	40012c00 	.word	0x40012c00
 800f344:	50012c00 	.word	0x50012c00
 800f348:	40013400 	.word	0x40013400
 800f34c:	50013400 	.word	0x50013400
 800f350:	40014000 	.word	0x40014000
 800f354:	50014000 	.word	0x50014000
 800f358:	40014400 	.word	0x40014400
 800f35c:	50014400 	.word	0x50014400
 800f360:	40014800 	.word	0x40014800
 800f364:	50014800 	.word	0x50014800

0800f368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f368:	b480      	push	{r7}
 800f36a:	b087      	sub	sp, #28
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6a1b      	ldr	r3, [r3, #32]
 800f376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6a1b      	ldr	r3, [r3, #32]
 800f37c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	69db      	ldr	r3, [r3, #28]
 800f38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f39a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f023 0303 	bic.w	r3, r3, #3
 800f3a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f3b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	021b      	lsls	r3, r3, #8
 800f3bc:	697a      	ldr	r2, [r7, #20]
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4a35      	ldr	r2, [pc, #212]	@ (800f49c <TIM_OC3_SetConfig+0x134>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d00b      	beq.n	800f3e2 <TIM_OC3_SetConfig+0x7a>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4a34      	ldr	r2, [pc, #208]	@ (800f4a0 <TIM_OC3_SetConfig+0x138>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d007      	beq.n	800f3e2 <TIM_OC3_SetConfig+0x7a>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4a33      	ldr	r2, [pc, #204]	@ (800f4a4 <TIM_OC3_SetConfig+0x13c>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d003      	beq.n	800f3e2 <TIM_OC3_SetConfig+0x7a>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	4a32      	ldr	r2, [pc, #200]	@ (800f4a8 <TIM_OC3_SetConfig+0x140>)
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d10d      	bne.n	800f3fe <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f3e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	021b      	lsls	r3, r3, #8
 800f3f0:	697a      	ldr	r2, [r7, #20]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f3fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	4a26      	ldr	r2, [pc, #152]	@ (800f49c <TIM_OC3_SetConfig+0x134>)
 800f402:	4293      	cmp	r3, r2
 800f404:	d023      	beq.n	800f44e <TIM_OC3_SetConfig+0xe6>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4a25      	ldr	r2, [pc, #148]	@ (800f4a0 <TIM_OC3_SetConfig+0x138>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d01f      	beq.n	800f44e <TIM_OC3_SetConfig+0xe6>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4a24      	ldr	r2, [pc, #144]	@ (800f4a4 <TIM_OC3_SetConfig+0x13c>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d01b      	beq.n	800f44e <TIM_OC3_SetConfig+0xe6>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4a23      	ldr	r2, [pc, #140]	@ (800f4a8 <TIM_OC3_SetConfig+0x140>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d017      	beq.n	800f44e <TIM_OC3_SetConfig+0xe6>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4a22      	ldr	r2, [pc, #136]	@ (800f4ac <TIM_OC3_SetConfig+0x144>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d013      	beq.n	800f44e <TIM_OC3_SetConfig+0xe6>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	4a21      	ldr	r2, [pc, #132]	@ (800f4b0 <TIM_OC3_SetConfig+0x148>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d00f      	beq.n	800f44e <TIM_OC3_SetConfig+0xe6>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4a20      	ldr	r2, [pc, #128]	@ (800f4b4 <TIM_OC3_SetConfig+0x14c>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d00b      	beq.n	800f44e <TIM_OC3_SetConfig+0xe6>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4a1f      	ldr	r2, [pc, #124]	@ (800f4b8 <TIM_OC3_SetConfig+0x150>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d007      	beq.n	800f44e <TIM_OC3_SetConfig+0xe6>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a1e      	ldr	r2, [pc, #120]	@ (800f4bc <TIM_OC3_SetConfig+0x154>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d003      	beq.n	800f44e <TIM_OC3_SetConfig+0xe6>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4a1d      	ldr	r2, [pc, #116]	@ (800f4c0 <TIM_OC3_SetConfig+0x158>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d113      	bne.n	800f476 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f45c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	695b      	ldr	r3, [r3, #20]
 800f462:	011b      	lsls	r3, r3, #4
 800f464:	693a      	ldr	r2, [r7, #16]
 800f466:	4313      	orrs	r3, r2
 800f468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	699b      	ldr	r3, [r3, #24]
 800f46e:	011b      	lsls	r3, r3, #4
 800f470:	693a      	ldr	r2, [r7, #16]
 800f472:	4313      	orrs	r3, r2
 800f474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	693a      	ldr	r2, [r7, #16]
 800f47a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	68fa      	ldr	r2, [r7, #12]
 800f480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	685a      	ldr	r2, [r3, #4]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	697a      	ldr	r2, [r7, #20]
 800f48e:	621a      	str	r2, [r3, #32]
}
 800f490:	bf00      	nop
 800f492:	371c      	adds	r7, #28
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr
 800f49c:	40012c00 	.word	0x40012c00
 800f4a0:	50012c00 	.word	0x50012c00
 800f4a4:	40013400 	.word	0x40013400
 800f4a8:	50013400 	.word	0x50013400
 800f4ac:	40014000 	.word	0x40014000
 800f4b0:	50014000 	.word	0x50014000
 800f4b4:	40014400 	.word	0x40014400
 800f4b8:	50014400 	.word	0x50014400
 800f4bc:	40014800 	.word	0x40014800
 800f4c0:	50014800 	.word	0x50014800

0800f4c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b087      	sub	sp, #28
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6a1b      	ldr	r3, [r3, #32]
 800f4d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6a1b      	ldr	r3, [r3, #32]
 800f4d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	69db      	ldr	r3, [r3, #28]
 800f4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f4f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f4fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	021b      	lsls	r3, r3, #8
 800f506:	68fa      	ldr	r2, [r7, #12]
 800f508:	4313      	orrs	r3, r2
 800f50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	689b      	ldr	r3, [r3, #8]
 800f518:	031b      	lsls	r3, r3, #12
 800f51a:	697a      	ldr	r2, [r7, #20]
 800f51c:	4313      	orrs	r3, r2
 800f51e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a36      	ldr	r2, [pc, #216]	@ (800f5fc <TIM_OC4_SetConfig+0x138>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d00b      	beq.n	800f540 <TIM_OC4_SetConfig+0x7c>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4a35      	ldr	r2, [pc, #212]	@ (800f600 <TIM_OC4_SetConfig+0x13c>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d007      	beq.n	800f540 <TIM_OC4_SetConfig+0x7c>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4a34      	ldr	r2, [pc, #208]	@ (800f604 <TIM_OC4_SetConfig+0x140>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d003      	beq.n	800f540 <TIM_OC4_SetConfig+0x7c>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4a33      	ldr	r2, [pc, #204]	@ (800f608 <TIM_OC4_SetConfig+0x144>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d10d      	bne.n	800f55c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	031b      	lsls	r3, r3, #12
 800f54e:	697a      	ldr	r2, [r7, #20]
 800f550:	4313      	orrs	r3, r2
 800f552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f55a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a27      	ldr	r2, [pc, #156]	@ (800f5fc <TIM_OC4_SetConfig+0x138>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d023      	beq.n	800f5ac <TIM_OC4_SetConfig+0xe8>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a26      	ldr	r2, [pc, #152]	@ (800f600 <TIM_OC4_SetConfig+0x13c>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d01f      	beq.n	800f5ac <TIM_OC4_SetConfig+0xe8>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a25      	ldr	r2, [pc, #148]	@ (800f604 <TIM_OC4_SetConfig+0x140>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d01b      	beq.n	800f5ac <TIM_OC4_SetConfig+0xe8>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4a24      	ldr	r2, [pc, #144]	@ (800f608 <TIM_OC4_SetConfig+0x144>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d017      	beq.n	800f5ac <TIM_OC4_SetConfig+0xe8>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4a23      	ldr	r2, [pc, #140]	@ (800f60c <TIM_OC4_SetConfig+0x148>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d013      	beq.n	800f5ac <TIM_OC4_SetConfig+0xe8>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4a22      	ldr	r2, [pc, #136]	@ (800f610 <TIM_OC4_SetConfig+0x14c>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d00f      	beq.n	800f5ac <TIM_OC4_SetConfig+0xe8>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	4a21      	ldr	r2, [pc, #132]	@ (800f614 <TIM_OC4_SetConfig+0x150>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d00b      	beq.n	800f5ac <TIM_OC4_SetConfig+0xe8>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4a20      	ldr	r2, [pc, #128]	@ (800f618 <TIM_OC4_SetConfig+0x154>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d007      	beq.n	800f5ac <TIM_OC4_SetConfig+0xe8>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4a1f      	ldr	r2, [pc, #124]	@ (800f61c <TIM_OC4_SetConfig+0x158>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d003      	beq.n	800f5ac <TIM_OC4_SetConfig+0xe8>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4a1e      	ldr	r2, [pc, #120]	@ (800f620 <TIM_OC4_SetConfig+0x15c>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d113      	bne.n	800f5d4 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f5b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f5ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	695b      	ldr	r3, [r3, #20]
 800f5c0:	019b      	lsls	r3, r3, #6
 800f5c2:	693a      	ldr	r2, [r7, #16]
 800f5c4:	4313      	orrs	r3, r2
 800f5c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	699b      	ldr	r3, [r3, #24]
 800f5cc:	019b      	lsls	r3, r3, #6
 800f5ce:	693a      	ldr	r2, [r7, #16]
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	693a      	ldr	r2, [r7, #16]
 800f5d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	685a      	ldr	r2, [r3, #4]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	621a      	str	r2, [r3, #32]
}
 800f5ee:	bf00      	nop
 800f5f0:	371c      	adds	r7, #28
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	40012c00 	.word	0x40012c00
 800f600:	50012c00 	.word	0x50012c00
 800f604:	40013400 	.word	0x40013400
 800f608:	50013400 	.word	0x50013400
 800f60c:	40014000 	.word	0x40014000
 800f610:	50014000 	.word	0x50014000
 800f614:	40014400 	.word	0x40014400
 800f618:	50014400 	.word	0x50014400
 800f61c:	40014800 	.word	0x40014800
 800f620:	50014800 	.word	0x50014800

0800f624 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f624:	b480      	push	{r7}
 800f626:	b087      	sub	sp, #28
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6a1b      	ldr	r3, [r3, #32]
 800f632:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a1b      	ldr	r3, [r3, #32]
 800f638:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	4313      	orrs	r3, r2
 800f660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f668:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	041b      	lsls	r3, r3, #16
 800f670:	693a      	ldr	r2, [r7, #16]
 800f672:	4313      	orrs	r3, r2
 800f674:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	4a21      	ldr	r2, [pc, #132]	@ (800f700 <TIM_OC5_SetConfig+0xdc>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	d023      	beq.n	800f6c6 <TIM_OC5_SetConfig+0xa2>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4a20      	ldr	r2, [pc, #128]	@ (800f704 <TIM_OC5_SetConfig+0xe0>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d01f      	beq.n	800f6c6 <TIM_OC5_SetConfig+0xa2>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4a1f      	ldr	r2, [pc, #124]	@ (800f708 <TIM_OC5_SetConfig+0xe4>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d01b      	beq.n	800f6c6 <TIM_OC5_SetConfig+0xa2>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4a1e      	ldr	r2, [pc, #120]	@ (800f70c <TIM_OC5_SetConfig+0xe8>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d017      	beq.n	800f6c6 <TIM_OC5_SetConfig+0xa2>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a1d      	ldr	r2, [pc, #116]	@ (800f710 <TIM_OC5_SetConfig+0xec>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d013      	beq.n	800f6c6 <TIM_OC5_SetConfig+0xa2>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4a1c      	ldr	r2, [pc, #112]	@ (800f714 <TIM_OC5_SetConfig+0xf0>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d00f      	beq.n	800f6c6 <TIM_OC5_SetConfig+0xa2>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	4a1b      	ldr	r2, [pc, #108]	@ (800f718 <TIM_OC5_SetConfig+0xf4>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d00b      	beq.n	800f6c6 <TIM_OC5_SetConfig+0xa2>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4a1a      	ldr	r2, [pc, #104]	@ (800f71c <TIM_OC5_SetConfig+0xf8>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d007      	beq.n	800f6c6 <TIM_OC5_SetConfig+0xa2>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4a19      	ldr	r2, [pc, #100]	@ (800f720 <TIM_OC5_SetConfig+0xfc>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d003      	beq.n	800f6c6 <TIM_OC5_SetConfig+0xa2>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4a18      	ldr	r2, [pc, #96]	@ (800f724 <TIM_OC5_SetConfig+0x100>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d109      	bne.n	800f6da <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f6cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	021b      	lsls	r3, r3, #8
 800f6d4:	697a      	ldr	r2, [r7, #20]
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	697a      	ldr	r2, [r7, #20]
 800f6de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	68fa      	ldr	r2, [r7, #12]
 800f6e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	685a      	ldr	r2, [r3, #4]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	693a      	ldr	r2, [r7, #16]
 800f6f2:	621a      	str	r2, [r3, #32]
}
 800f6f4:	bf00      	nop
 800f6f6:	371c      	adds	r7, #28
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr
 800f700:	40012c00 	.word	0x40012c00
 800f704:	50012c00 	.word	0x50012c00
 800f708:	40013400 	.word	0x40013400
 800f70c:	50013400 	.word	0x50013400
 800f710:	40014000 	.word	0x40014000
 800f714:	50014000 	.word	0x50014000
 800f718:	40014400 	.word	0x40014400
 800f71c:	50014400 	.word	0x50014400
 800f720:	40014800 	.word	0x40014800
 800f724:	50014800 	.word	0x50014800

0800f728 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f728:	b480      	push	{r7}
 800f72a:	b087      	sub	sp, #28
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6a1b      	ldr	r3, [r3, #32]
 800f736:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6a1b      	ldr	r3, [r3, #32]
 800f73c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f75a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	021b      	lsls	r3, r3, #8
 800f762:	68fa      	ldr	r2, [r7, #12]
 800f764:	4313      	orrs	r3, r2
 800f766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f76e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	051b      	lsls	r3, r3, #20
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	4313      	orrs	r3, r2
 800f77a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	4a22      	ldr	r2, [pc, #136]	@ (800f808 <TIM_OC6_SetConfig+0xe0>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d023      	beq.n	800f7cc <TIM_OC6_SetConfig+0xa4>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	4a21      	ldr	r2, [pc, #132]	@ (800f80c <TIM_OC6_SetConfig+0xe4>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d01f      	beq.n	800f7cc <TIM_OC6_SetConfig+0xa4>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	4a20      	ldr	r2, [pc, #128]	@ (800f810 <TIM_OC6_SetConfig+0xe8>)
 800f790:	4293      	cmp	r3, r2
 800f792:	d01b      	beq.n	800f7cc <TIM_OC6_SetConfig+0xa4>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	4a1f      	ldr	r2, [pc, #124]	@ (800f814 <TIM_OC6_SetConfig+0xec>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d017      	beq.n	800f7cc <TIM_OC6_SetConfig+0xa4>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a1e      	ldr	r2, [pc, #120]	@ (800f818 <TIM_OC6_SetConfig+0xf0>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d013      	beq.n	800f7cc <TIM_OC6_SetConfig+0xa4>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a1d      	ldr	r2, [pc, #116]	@ (800f81c <TIM_OC6_SetConfig+0xf4>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d00f      	beq.n	800f7cc <TIM_OC6_SetConfig+0xa4>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a1c      	ldr	r2, [pc, #112]	@ (800f820 <TIM_OC6_SetConfig+0xf8>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d00b      	beq.n	800f7cc <TIM_OC6_SetConfig+0xa4>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a1b      	ldr	r2, [pc, #108]	@ (800f824 <TIM_OC6_SetConfig+0xfc>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d007      	beq.n	800f7cc <TIM_OC6_SetConfig+0xa4>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a1a      	ldr	r2, [pc, #104]	@ (800f828 <TIM_OC6_SetConfig+0x100>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d003      	beq.n	800f7cc <TIM_OC6_SetConfig+0xa4>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a19      	ldr	r2, [pc, #100]	@ (800f82c <TIM_OC6_SetConfig+0x104>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d109      	bne.n	800f7e0 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f7d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	695b      	ldr	r3, [r3, #20]
 800f7d8:	029b      	lsls	r3, r3, #10
 800f7da:	697a      	ldr	r2, [r7, #20]
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	697a      	ldr	r2, [r7, #20]
 800f7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	685a      	ldr	r2, [r3, #4]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	693a      	ldr	r2, [r7, #16]
 800f7f8:	621a      	str	r2, [r3, #32]
}
 800f7fa:	bf00      	nop
 800f7fc:	371c      	adds	r7, #28
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr
 800f806:	bf00      	nop
 800f808:	40012c00 	.word	0x40012c00
 800f80c:	50012c00 	.word	0x50012c00
 800f810:	40013400 	.word	0x40013400
 800f814:	50013400 	.word	0x50013400
 800f818:	40014000 	.word	0x40014000
 800f81c:	50014000 	.word	0x50014000
 800f820:	40014400 	.word	0x40014400
 800f824:	50014400 	.word	0x50014400
 800f828:	40014800 	.word	0x40014800
 800f82c:	50014800 	.word	0x50014800

0800f830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f830:	b480      	push	{r7}
 800f832:	b087      	sub	sp, #28
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	6a1b      	ldr	r3, [r3, #32]
 800f840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6a1b      	ldr	r3, [r3, #32]
 800f846:	f023 0201 	bic.w	r2, r3, #1
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f85a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	011b      	lsls	r3, r3, #4
 800f860:	693a      	ldr	r2, [r7, #16]
 800f862:	4313      	orrs	r3, r2
 800f864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	f023 030a 	bic.w	r3, r3, #10
 800f86c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f86e:	697a      	ldr	r2, [r7, #20]
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	4313      	orrs	r3, r2
 800f874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	697a      	ldr	r2, [r7, #20]
 800f880:	621a      	str	r2, [r3, #32]
}
 800f882:	bf00      	nop
 800f884:	371c      	adds	r7, #28
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr

0800f88e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f88e:	b480      	push	{r7}
 800f890:	b087      	sub	sp, #28
 800f892:	af00      	add	r7, sp, #0
 800f894:	60f8      	str	r0, [r7, #12]
 800f896:	60b9      	str	r1, [r7, #8]
 800f898:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	6a1b      	ldr	r3, [r3, #32]
 800f89e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6a1b      	ldr	r3, [r3, #32]
 800f8a4:	f023 0210 	bic.w	r2, r3, #16
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	699b      	ldr	r3, [r3, #24]
 800f8b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f8b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	031b      	lsls	r3, r3, #12
 800f8be:	693a      	ldr	r2, [r7, #16]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f8ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	011b      	lsls	r3, r3, #4
 800f8d0:	697a      	ldr	r2, [r7, #20]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	693a      	ldr	r2, [r7, #16]
 800f8da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	697a      	ldr	r2, [r7, #20]
 800f8e0:	621a      	str	r2, [r3, #32]
}
 800f8e2:	bf00      	nop
 800f8e4:	371c      	adds	r7, #28
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr

0800f8ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f8ee:	b480      	push	{r7}
 800f8f0:	b085      	sub	sp, #20
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6078      	str	r0, [r7, #4]
 800f8f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f90a:	683a      	ldr	r2, [r7, #0]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	4313      	orrs	r3, r2
 800f910:	f043 0307 	orr.w	r3, r3, #7
 800f914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	68fa      	ldr	r2, [r7, #12]
 800f91a:	609a      	str	r2, [r3, #8]
}
 800f91c:	bf00      	nop
 800f91e:	3714      	adds	r7, #20
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f928:	b480      	push	{r7}
 800f92a:	b087      	sub	sp, #28
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
 800f934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	689b      	ldr	r3, [r3, #8]
 800f93a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	021a      	lsls	r2, r3, #8
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	431a      	orrs	r2, r3
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	4313      	orrs	r3, r2
 800f950:	697a      	ldr	r2, [r7, #20]
 800f952:	4313      	orrs	r3, r2
 800f954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	697a      	ldr	r2, [r7, #20]
 800f95a:	609a      	str	r2, [r3, #8]
}
 800f95c:	bf00      	nop
 800f95e:	371c      	adds	r7, #28
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d101      	bne.n	800f980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f97c:	2302      	movs	r3, #2
 800f97e:	e097      	b.n	800fab0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2201      	movs	r2, #1
 800f984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2202      	movs	r2, #2
 800f98c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	689b      	ldr	r3, [r3, #8]
 800f99e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4a45      	ldr	r2, [pc, #276]	@ (800fabc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d00e      	beq.n	800f9c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	4a44      	ldr	r2, [pc, #272]	@ (800fac0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d009      	beq.n	800f9c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a42      	ldr	r2, [pc, #264]	@ (800fac4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d004      	beq.n	800f9c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4a41      	ldr	r2, [pc, #260]	@ (800fac8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d108      	bne.n	800f9da <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f9ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f9e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f9e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68fa      	ldr	r2, [r7, #12]
 800f9ec:	4313      	orrs	r3, r2
 800f9ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a2f      	ldr	r2, [pc, #188]	@ (800fabc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d040      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	4a2e      	ldr	r2, [pc, #184]	@ (800fac0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d03b      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa14:	d036      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fa1e:	d031      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4a29      	ldr	r2, [pc, #164]	@ (800facc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d02c      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4a28      	ldr	r2, [pc, #160]	@ (800fad0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d027      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a26      	ldr	r2, [pc, #152]	@ (800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d022      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a25      	ldr	r2, [pc, #148]	@ (800fad8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d01d      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	4a23      	ldr	r2, [pc, #140]	@ (800fadc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d018      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a22      	ldr	r2, [pc, #136]	@ (800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d013      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a18      	ldr	r2, [pc, #96]	@ (800fac4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d00e      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a17      	ldr	r2, [pc, #92]	@ (800fac8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d009      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a1b      	ldr	r2, [pc, #108]	@ (800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d004      	beq.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	4a1a      	ldr	r2, [pc, #104]	@ (800fae8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d10c      	bne.n	800fa9e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	68ba      	ldr	r2, [r7, #8]
 800fa92:	4313      	orrs	r3, r2
 800fa94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	68ba      	ldr	r2, [r7, #8]
 800fa9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2200      	movs	r2, #0
 800faaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3714      	adds	r7, #20
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr
 800fabc:	40012c00 	.word	0x40012c00
 800fac0:	50012c00 	.word	0x50012c00
 800fac4:	40013400 	.word	0x40013400
 800fac8:	50013400 	.word	0x50013400
 800facc:	40000400 	.word	0x40000400
 800fad0:	50000400 	.word	0x50000400
 800fad4:	40000800 	.word	0x40000800
 800fad8:	50000800 	.word	0x50000800
 800fadc:	40000c00 	.word	0x40000c00
 800fae0:	50000c00 	.word	0x50000c00
 800fae4:	40014000 	.word	0x40014000
 800fae8:	50014000 	.word	0x50014000

0800faec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d101      	bne.n	800fafe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fafa:	2301      	movs	r3, #1
 800fafc:	e042      	b.n	800fb84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d106      	bne.n	800fb16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7f2 fe81 	bl	8002818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2224      	movs	r2, #36	@ 0x24
 800fb1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f022 0201 	bic.w	r2, r2, #1
 800fb2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d002      	beq.n	800fb3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 fd02 	bl	8010540 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 fb51 	bl	80101e4 <UART_SetConfig>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d101      	bne.n	800fb4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	e01b      	b.n	800fb84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	685a      	ldr	r2, [r3, #4]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fb5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	689a      	ldr	r2, [r3, #8]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fb6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f042 0201 	orr.w	r2, r2, #1
 800fb7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fd81 	bl	8010684 <UART_CheckIdleState>
 800fb82:	4603      	mov	r3, r0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b0ba      	sub	sp, #232	@ 0xe8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	69db      	ldr	r3, [r3, #28]
 800fb9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fbb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fbb6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fbba:	4013      	ands	r3, r2
 800fbbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fbc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d11b      	bne.n	800fc00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fbc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbcc:	f003 0320 	and.w	r3, r3, #32
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d015      	beq.n	800fc00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fbd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbd8:	f003 0320 	and.w	r3, r3, #32
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d105      	bne.n	800fbec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fbe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fbe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d009      	beq.n	800fc00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f000 82cb 	beq.w	801018c <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	4798      	blx	r3
      }
      return;
 800fbfe:	e2c5      	b.n	801018c <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fc00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f000 8123 	beq.w	800fe50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fc0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fc0e:	4b8d      	ldr	r3, [pc, #564]	@ (800fe44 <HAL_UART_IRQHandler+0x2b8>)
 800fc10:	4013      	ands	r3, r2
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d106      	bne.n	800fc24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fc16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fc1a:	4b8b      	ldr	r3, [pc, #556]	@ (800fe48 <HAL_UART_IRQHandler+0x2bc>)
 800fc1c:	4013      	ands	r3, r2
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f000 8116 	beq.w	800fe50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc28:	f003 0301 	and.w	r3, r3, #1
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d011      	beq.n	800fc54 <HAL_UART_IRQHandler+0xc8>
 800fc30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d00b      	beq.n	800fc54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2201      	movs	r2, #1
 800fc42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc4a:	f043 0201 	orr.w	r2, r3, #1
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc58:	f003 0302 	and.w	r3, r3, #2
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d011      	beq.n	800fc84 <HAL_UART_IRQHandler+0xf8>
 800fc60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc64:	f003 0301 	and.w	r3, r3, #1
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d00b      	beq.n	800fc84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2202      	movs	r2, #2
 800fc72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc7a:	f043 0204 	orr.w	r2, r3, #4
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc88:	f003 0304 	and.w	r3, r3, #4
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d011      	beq.n	800fcb4 <HAL_UART_IRQHandler+0x128>
 800fc90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc94:	f003 0301 	and.w	r3, r3, #1
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00b      	beq.n	800fcb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2204      	movs	r2, #4
 800fca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcaa:	f043 0202 	orr.w	r2, r3, #2
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fcb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcb8:	f003 0308 	and.w	r3, r3, #8
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d017      	beq.n	800fcf0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fcc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fcc4:	f003 0320 	and.w	r3, r3, #32
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d105      	bne.n	800fcd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fccc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fcd0:	4b5c      	ldr	r3, [pc, #368]	@ (800fe44 <HAL_UART_IRQHandler+0x2b8>)
 800fcd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d00b      	beq.n	800fcf0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	2208      	movs	r2, #8
 800fcde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fce6:	f043 0208 	orr.w	r2, r3, #8
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fcf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d012      	beq.n	800fd22 <HAL_UART_IRQHandler+0x196>
 800fcfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d00c      	beq.n	800fd22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd18:	f043 0220 	orr.w	r2, r3, #32
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f000 8231 	beq.w	8010190 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd32:	f003 0320 	and.w	r3, r3, #32
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d013      	beq.n	800fd62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd3e:	f003 0320 	and.w	r3, r3, #32
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d105      	bne.n	800fd52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d007      	beq.n	800fd62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d003      	beq.n	800fd62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd76:	2b40      	cmp	r3, #64	@ 0x40
 800fd78:	d005      	beq.n	800fd86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fd7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fd7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d054      	beq.n	800fe30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 fd93 	bl	80108b2 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	689b      	ldr	r3, [r3, #8]
 800fd92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd96:	2b40      	cmp	r3, #64	@ 0x40
 800fd98:	d146      	bne.n	800fe28 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	3308      	adds	r3, #8
 800fda0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fda8:	e853 3f00 	ldrex	r3, [r3]
 800fdac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fdb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fdb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fdb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	3308      	adds	r3, #8
 800fdc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fdc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fdca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fdd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fdd6:	e841 2300 	strex	r3, r2, [r1]
 800fdda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fdde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d1d9      	bne.n	800fd9a <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d017      	beq.n	800fe20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdf6:	4a15      	ldr	r2, [pc, #84]	@ (800fe4c <HAL_UART_IRQHandler+0x2c0>)
 800fdf8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7f5 ff81 	bl	8005d08 <HAL_DMA_Abort_IT>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d019      	beq.n	800fe40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fe1a:	4610      	mov	r0, r2
 800fe1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe1e:	e00f      	b.n	800fe40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 f9c9 	bl	80101b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe26:	e00b      	b.n	800fe40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 f9c5 	bl	80101b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe2e:	e007      	b.n	800fe40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 f9c1 	bl	80101b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fe3e:	e1a7      	b.n	8010190 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe40:	bf00      	nop
    return;
 800fe42:	e1a5      	b.n	8010190 <HAL_UART_IRQHandler+0x604>
 800fe44:	10000001 	.word	0x10000001
 800fe48:	04000120 	.word	0x04000120
 800fe4c:	0801097f 	.word	0x0801097f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	f040 8150 	bne.w	80100fa <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fe5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe5e:	f003 0310 	and.w	r3, r3, #16
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f000 8149 	beq.w	80100fa <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fe68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe6c:	f003 0310 	and.w	r3, r3, #16
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	f000 8142 	beq.w	80100fa <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	2210      	movs	r2, #16
 800fe7c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe88:	2b40      	cmp	r3, #64	@ 0x40
 800fe8a:	f040 80b8 	bne.w	800fffe <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fe9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f000 8177 	beq.w	8010194 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800feac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800feb0:	429a      	cmp	r2, r3
 800feb2:	f080 816f 	bcs.w	8010194 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800febc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fec8:	2b81      	cmp	r3, #129	@ 0x81
 800feca:	f000 8087 	beq.w	800ffdc <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800feda:	e853 3f00 	ldrex	r3, [r3]
 800fede:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fee6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800feea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	461a      	mov	r2, r3
 800fef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fef8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fefc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ff04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ff08:	e841 2300 	strex	r3, r2, [r1]
 800ff0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ff10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d1da      	bne.n	800fece <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	3308      	adds	r3, #8
 800ff1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ff22:	e853 3f00 	ldrex	r3, [r3]
 800ff26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ff28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ff2a:	f023 0301 	bic.w	r3, r3, #1
 800ff2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	3308      	adds	r3, #8
 800ff38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ff3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ff40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ff44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ff48:	e841 2300 	strex	r3, r2, [r1]
 800ff4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ff4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d1e1      	bne.n	800ff18 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	3308      	adds	r3, #8
 800ff5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ff5e:	e853 3f00 	ldrex	r3, [r3]
 800ff62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ff64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	3308      	adds	r3, #8
 800ff74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ff78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ff7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ff7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ff80:	e841 2300 	strex	r3, r2, [r1]
 800ff84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ff86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1e3      	bne.n	800ff54 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2220      	movs	r2, #32
 800ff90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2200      	movs	r2, #0
 800ff98:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffa2:	e853 3f00 	ldrex	r3, [r3]
 800ffa6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ffa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ffaa:	f023 0310 	bic.w	r3, r3, #16
 800ffae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ffbe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ffc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ffc4:	e841 2300 	strex	r3, r2, [r1]
 800ffc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ffca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1e4      	bne.n	800ff9a <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7f5 fe1a 	bl	8005c10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2202      	movs	r2, #2
 800ffe0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	4619      	mov	r1, r3
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 f8e8 	bl	80101cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fffc:	e0ca      	b.n	8010194 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801000a:	b29b      	uxth	r3, r3
 801000c:	1ad3      	subs	r3, r2, r3
 801000e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010018:	b29b      	uxth	r3, r3
 801001a:	2b00      	cmp	r3, #0
 801001c:	f000 80bc 	beq.w	8010198 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8010020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010024:	2b00      	cmp	r3, #0
 8010026:	f000 80b7 	beq.w	8010198 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010032:	e853 3f00 	ldrex	r3, [r3]
 8010036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801003a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801003e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	461a      	mov	r2, r3
 8010048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801004c:	647b      	str	r3, [r7, #68]	@ 0x44
 801004e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010054:	e841 2300 	strex	r3, r2, [r1]
 8010058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801005a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801005c:	2b00      	cmp	r3, #0
 801005e:	d1e4      	bne.n	801002a <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	3308      	adds	r3, #8
 8010066:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006a:	e853 3f00 	ldrex	r3, [r3]
 801006e:	623b      	str	r3, [r7, #32]
   return(result);
 8010070:	6a3b      	ldr	r3, [r7, #32]
 8010072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010076:	f023 0301 	bic.w	r3, r3, #1
 801007a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	3308      	adds	r3, #8
 8010084:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010088:	633a      	str	r2, [r7, #48]	@ 0x30
 801008a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801008c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801008e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010090:	e841 2300 	strex	r3, r2, [r1]
 8010094:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010098:	2b00      	cmp	r3, #0
 801009a:	d1e1      	bne.n	8010060 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2220      	movs	r2, #32
 80100a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2200      	movs	r2, #0
 80100ae:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	e853 3f00 	ldrex	r3, [r3]
 80100bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	f023 0310 	bic.w	r3, r3, #16
 80100c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	461a      	mov	r2, r3
 80100ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80100d2:	61fb      	str	r3, [r7, #28]
 80100d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100d6:	69b9      	ldr	r1, [r7, #24]
 80100d8:	69fa      	ldr	r2, [r7, #28]
 80100da:	e841 2300 	strex	r3, r2, [r1]
 80100de:	617b      	str	r3, [r7, #20]
   return(result);
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d1e4      	bne.n	80100b0 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2202      	movs	r2, #2
 80100ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80100ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80100f0:	4619      	mov	r1, r3
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 f86a 	bl	80101cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80100f8:	e04e      	b.n	8010198 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80100fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010102:	2b00      	cmp	r3, #0
 8010104:	d014      	beq.n	8010130 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801010a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801010e:	2b00      	cmp	r3, #0
 8010110:	d105      	bne.n	801011e <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801011a:	2b00      	cmp	r3, #0
 801011c:	d008      	beq.n	8010130 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010122:	2b00      	cmp	r3, #0
 8010124:	d03a      	beq.n	801019c <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	4798      	blx	r3
    }
    return;
 801012e:	e035      	b.n	801019c <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010138:	2b00      	cmp	r3, #0
 801013a:	d009      	beq.n	8010150 <HAL_UART_IRQHandler+0x5c4>
 801013c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010144:	2b00      	cmp	r3, #0
 8010146:	d003      	beq.n	8010150 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 fc2e 	bl	80109aa <UART_EndTransmit_IT>
    return;
 801014e:	e026      	b.n	801019e <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010158:	2b00      	cmp	r3, #0
 801015a:	d009      	beq.n	8010170 <HAL_UART_IRQHandler+0x5e4>
 801015c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010160:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010164:	2b00      	cmp	r3, #0
 8010166:	d003      	beq.n	8010170 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f000 fc53 	bl	8010a14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801016e:	e016      	b.n	801019e <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010174:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010178:	2b00      	cmp	r3, #0
 801017a:	d010      	beq.n	801019e <HAL_UART_IRQHandler+0x612>
 801017c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010180:	2b00      	cmp	r3, #0
 8010182:	da0c      	bge.n	801019e <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 fc3b 	bl	8010a00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801018a:	e008      	b.n	801019e <HAL_UART_IRQHandler+0x612>
      return;
 801018c:	bf00      	nop
 801018e:	e006      	b.n	801019e <HAL_UART_IRQHandler+0x612>
    return;
 8010190:	bf00      	nop
 8010192:	e004      	b.n	801019e <HAL_UART_IRQHandler+0x612>
      return;
 8010194:	bf00      	nop
 8010196:	e002      	b.n	801019e <HAL_UART_IRQHandler+0x612>
      return;
 8010198:	bf00      	nop
 801019a:	e000      	b.n	801019e <HAL_UART_IRQHandler+0x612>
    return;
 801019c:	bf00      	nop
  }
}
 801019e:	37e8      	adds	r7, #232	@ 0xe8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80101ac:	bf00      	nop
 80101ae:	370c      	adds	r7, #12
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr

080101b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80101c0:	bf00      	nop
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr

080101cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b083      	sub	sp, #12
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	460b      	mov	r3, r1
 80101d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80101d8:	bf00      	nop
 80101da:	370c      	adds	r7, #12
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr

080101e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80101e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80101e8:	b094      	sub	sp, #80	@ 0x50
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80101ee:	2300      	movs	r3, #0
 80101f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80101f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	4b83      	ldr	r3, [pc, #524]	@ (8010408 <UART_SetConfig+0x224>)
 80101fa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80101fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101fe:	689a      	ldr	r2, [r3, #8]
 8010200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010202:	691b      	ldr	r3, [r3, #16]
 8010204:	431a      	orrs	r2, r3
 8010206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010208:	695b      	ldr	r3, [r3, #20]
 801020a:	431a      	orrs	r2, r3
 801020c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020e:	69db      	ldr	r3, [r3, #28]
 8010210:	4313      	orrs	r3, r2
 8010212:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	497c      	ldr	r1, [pc, #496]	@ (801040c <UART_SetConfig+0x228>)
 801021c:	4019      	ands	r1, r3
 801021e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010224:	430b      	orrs	r3, r1
 8010226:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010234:	68d9      	ldr	r1, [r3, #12]
 8010236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	ea40 0301 	orr.w	r3, r0, r1
 801023e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010242:	699b      	ldr	r3, [r3, #24]
 8010244:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	4b6f      	ldr	r3, [pc, #444]	@ (8010408 <UART_SetConfig+0x224>)
 801024c:	429a      	cmp	r2, r3
 801024e:	d009      	beq.n	8010264 <UART_SetConfig+0x80>
 8010250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	4b6e      	ldr	r3, [pc, #440]	@ (8010410 <UART_SetConfig+0x22c>)
 8010256:	429a      	cmp	r2, r3
 8010258:	d004      	beq.n	8010264 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801025a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801025c:	6a1a      	ldr	r2, [r3, #32]
 801025e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010260:	4313      	orrs	r3, r2
 8010262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801026e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8010272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010278:	430b      	orrs	r3, r1
 801027a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801027c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010282:	f023 000f 	bic.w	r0, r3, #15
 8010286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010288:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801028a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	ea40 0301 	orr.w	r3, r0, r1
 8010292:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	4b5e      	ldr	r3, [pc, #376]	@ (8010414 <UART_SetConfig+0x230>)
 801029a:	429a      	cmp	r2, r3
 801029c:	d102      	bne.n	80102a4 <UART_SetConfig+0xc0>
 801029e:	2301      	movs	r3, #1
 80102a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102a2:	e032      	b.n	801030a <UART_SetConfig+0x126>
 80102a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	4b5b      	ldr	r3, [pc, #364]	@ (8010418 <UART_SetConfig+0x234>)
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d102      	bne.n	80102b4 <UART_SetConfig+0xd0>
 80102ae:	2302      	movs	r3, #2
 80102b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102b2:	e02a      	b.n	801030a <UART_SetConfig+0x126>
 80102b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	4b58      	ldr	r3, [pc, #352]	@ (801041c <UART_SetConfig+0x238>)
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d102      	bne.n	80102c4 <UART_SetConfig+0xe0>
 80102be:	2304      	movs	r3, #4
 80102c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102c2:	e022      	b.n	801030a <UART_SetConfig+0x126>
 80102c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	4b55      	ldr	r3, [pc, #340]	@ (8010420 <UART_SetConfig+0x23c>)
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d102      	bne.n	80102d4 <UART_SetConfig+0xf0>
 80102ce:	2308      	movs	r3, #8
 80102d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102d2:	e01a      	b.n	801030a <UART_SetConfig+0x126>
 80102d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	4b52      	ldr	r3, [pc, #328]	@ (8010424 <UART_SetConfig+0x240>)
 80102da:	429a      	cmp	r2, r3
 80102dc:	d102      	bne.n	80102e4 <UART_SetConfig+0x100>
 80102de:	2310      	movs	r3, #16
 80102e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102e2:	e012      	b.n	801030a <UART_SetConfig+0x126>
 80102e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	4b4f      	ldr	r3, [pc, #316]	@ (8010428 <UART_SetConfig+0x244>)
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d103      	bne.n	80102f6 <UART_SetConfig+0x112>
 80102ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80102f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102f4:	e009      	b.n	801030a <UART_SetConfig+0x126>
 80102f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	4b43      	ldr	r3, [pc, #268]	@ (8010408 <UART_SetConfig+0x224>)
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d102      	bne.n	8010306 <UART_SetConfig+0x122>
 8010300:	2320      	movs	r3, #32
 8010302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010304:	e001      	b.n	801030a <UART_SetConfig+0x126>
 8010306:	2300      	movs	r3, #0
 8010308:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801030a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801030c:	681a      	ldr	r2, [r3, #0]
 801030e:	4b3e      	ldr	r3, [pc, #248]	@ (8010408 <UART_SetConfig+0x224>)
 8010310:	429a      	cmp	r2, r3
 8010312:	d005      	beq.n	8010320 <UART_SetConfig+0x13c>
 8010314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	4b3d      	ldr	r3, [pc, #244]	@ (8010410 <UART_SetConfig+0x22c>)
 801031a:	429a      	cmp	r2, r3
 801031c:	f040 8088 	bne.w	8010430 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010322:	2200      	movs	r2, #0
 8010324:	623b      	str	r3, [r7, #32]
 8010326:	627a      	str	r2, [r7, #36]	@ 0x24
 8010328:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801032c:	f7fc f8b0 	bl	800c490 <HAL_RCCEx_GetPeriphCLKFreq>
 8010330:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8010332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010334:	2b00      	cmp	r3, #0
 8010336:	f000 80eb 	beq.w	8010510 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801033a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801033c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801033e:	4a3b      	ldr	r2, [pc, #236]	@ (801042c <UART_SetConfig+0x248>)
 8010340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010344:	461a      	mov	r2, r3
 8010346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010348:	fbb3 f3f2 	udiv	r3, r3, r2
 801034c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801034e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010350:	685a      	ldr	r2, [r3, #4]
 8010352:	4613      	mov	r3, r2
 8010354:	005b      	lsls	r3, r3, #1
 8010356:	4413      	add	r3, r2
 8010358:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801035a:	429a      	cmp	r2, r3
 801035c:	d305      	bcc.n	801036a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801035e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010366:	429a      	cmp	r2, r3
 8010368:	d903      	bls.n	8010372 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 801036a:	2301      	movs	r3, #1
 801036c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010370:	e048      	b.n	8010404 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010374:	2200      	movs	r2, #0
 8010376:	61bb      	str	r3, [r7, #24]
 8010378:	61fa      	str	r2, [r7, #28]
 801037a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801037c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801037e:	4a2b      	ldr	r2, [pc, #172]	@ (801042c <UART_SetConfig+0x248>)
 8010380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010384:	b29b      	uxth	r3, r3
 8010386:	2200      	movs	r2, #0
 8010388:	613b      	str	r3, [r7, #16]
 801038a:	617a      	str	r2, [r7, #20]
 801038c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010390:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010394:	f7ef ff8e 	bl	80002b4 <__aeabi_uldivmod>
 8010398:	4602      	mov	r2, r0
 801039a:	460b      	mov	r3, r1
 801039c:	4610      	mov	r0, r2
 801039e:	4619      	mov	r1, r3
 80103a0:	f04f 0200 	mov.w	r2, #0
 80103a4:	f04f 0300 	mov.w	r3, #0
 80103a8:	020b      	lsls	r3, r1, #8
 80103aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80103ae:	0202      	lsls	r2, r0, #8
 80103b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103b2:	6849      	ldr	r1, [r1, #4]
 80103b4:	0849      	lsrs	r1, r1, #1
 80103b6:	2000      	movs	r0, #0
 80103b8:	460c      	mov	r4, r1
 80103ba:	4605      	mov	r5, r0
 80103bc:	eb12 0804 	adds.w	r8, r2, r4
 80103c0:	eb43 0905 	adc.w	r9, r3, r5
 80103c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103c6:	685b      	ldr	r3, [r3, #4]
 80103c8:	2200      	movs	r2, #0
 80103ca:	60bb      	str	r3, [r7, #8]
 80103cc:	60fa      	str	r2, [r7, #12]
 80103ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80103d2:	4640      	mov	r0, r8
 80103d4:	4649      	mov	r1, r9
 80103d6:	f7ef ff6d 	bl	80002b4 <__aeabi_uldivmod>
 80103da:	4602      	mov	r2, r0
 80103dc:	460b      	mov	r3, r1
 80103de:	4613      	mov	r3, r2
 80103e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80103e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80103e8:	d308      	bcc.n	80103fc <UART_SetConfig+0x218>
 80103ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80103f0:	d204      	bcs.n	80103fc <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80103f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80103f8:	60da      	str	r2, [r3, #12]
 80103fa:	e003      	b.n	8010404 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80103fc:	2301      	movs	r3, #1
 80103fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8010402:	e085      	b.n	8010510 <UART_SetConfig+0x32c>
 8010404:	e084      	b.n	8010510 <UART_SetConfig+0x32c>
 8010406:	bf00      	nop
 8010408:	46002400 	.word	0x46002400
 801040c:	cfff69f3 	.word	0xcfff69f3
 8010410:	56002400 	.word	0x56002400
 8010414:	40013800 	.word	0x40013800
 8010418:	40004400 	.word	0x40004400
 801041c:	40004800 	.word	0x40004800
 8010420:	40004c00 	.word	0x40004c00
 8010424:	40005000 	.word	0x40005000
 8010428:	40006400 	.word	0x40006400
 801042c:	08011648 	.word	0x08011648
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010432:	69db      	ldr	r3, [r3, #28]
 8010434:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010438:	d13c      	bne.n	80104b4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801043a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801043c:	2200      	movs	r2, #0
 801043e:	603b      	str	r3, [r7, #0]
 8010440:	607a      	str	r2, [r7, #4]
 8010442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010446:	f7fc f823 	bl	800c490 <HAL_RCCEx_GetPeriphCLKFreq>
 801044a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801044c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801044e:	2b00      	cmp	r3, #0
 8010450:	d05e      	beq.n	8010510 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010456:	4a39      	ldr	r2, [pc, #228]	@ (801053c <UART_SetConfig+0x358>)
 8010458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801045c:	461a      	mov	r2, r3
 801045e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010460:	fbb3 f3f2 	udiv	r3, r3, r2
 8010464:	005a      	lsls	r2, r3, #1
 8010466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	085b      	lsrs	r3, r3, #1
 801046c:	441a      	add	r2, r3
 801046e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	fbb2 f3f3 	udiv	r3, r2, r3
 8010476:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801047a:	2b0f      	cmp	r3, #15
 801047c:	d916      	bls.n	80104ac <UART_SetConfig+0x2c8>
 801047e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010484:	d212      	bcs.n	80104ac <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010488:	b29b      	uxth	r3, r3
 801048a:	f023 030f 	bic.w	r3, r3, #15
 801048e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010492:	085b      	lsrs	r3, r3, #1
 8010494:	b29b      	uxth	r3, r3
 8010496:	f003 0307 	and.w	r3, r3, #7
 801049a:	b29a      	uxth	r2, r3
 801049c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801049e:	4313      	orrs	r3, r2
 80104a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80104a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80104a8:	60da      	str	r2, [r3, #12]
 80104aa:	e031      	b.n	8010510 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80104ac:	2301      	movs	r3, #1
 80104ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80104b2:	e02d      	b.n	8010510 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80104b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80104b6:	2200      	movs	r2, #0
 80104b8:	469a      	mov	sl, r3
 80104ba:	4693      	mov	fp, r2
 80104bc:	4650      	mov	r0, sl
 80104be:	4659      	mov	r1, fp
 80104c0:	f7fb ffe6 	bl	800c490 <HAL_RCCEx_GetPeriphCLKFreq>
 80104c4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80104c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d021      	beq.n	8010510 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104d0:	4a1a      	ldr	r2, [pc, #104]	@ (801053c <UART_SetConfig+0x358>)
 80104d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104d6:	461a      	mov	r2, r3
 80104d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104da:	fbb3 f2f2 	udiv	r2, r3, r2
 80104de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	085b      	lsrs	r3, r3, #1
 80104e4:	441a      	add	r2, r3
 80104e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80104ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80104f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104f2:	2b0f      	cmp	r3, #15
 80104f4:	d909      	bls.n	801050a <UART_SetConfig+0x326>
 80104f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104fc:	d205      	bcs.n	801050a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80104fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010500:	b29a      	uxth	r2, r3
 8010502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	60da      	str	r2, [r3, #12]
 8010508:	e002      	b.n	8010510 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 801050a:	2301      	movs	r3, #1
 801050c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010512:	2201      	movs	r2, #1
 8010514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051a:	2201      	movs	r2, #1
 801051c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010522:	2200      	movs	r2, #0
 8010524:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010528:	2200      	movs	r2, #0
 801052a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801052c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010530:	4618      	mov	r0, r3
 8010532:	3750      	adds	r7, #80	@ 0x50
 8010534:	46bd      	mov	sp, r7
 8010536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801053a:	bf00      	nop
 801053c:	08011648 	.word	0x08011648

08010540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801054c:	f003 0308 	and.w	r3, r3, #8
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00a      	beq.n	801056a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	430a      	orrs	r2, r1
 8010568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801056e:	f003 0301 	and.w	r3, r3, #1
 8010572:	2b00      	cmp	r3, #0
 8010574:	d00a      	beq.n	801058c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	430a      	orrs	r2, r1
 801058a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010590:	f003 0302 	and.w	r3, r3, #2
 8010594:	2b00      	cmp	r3, #0
 8010596:	d00a      	beq.n	80105ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	430a      	orrs	r2, r1
 80105ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105b2:	f003 0304 	and.w	r3, r3, #4
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d00a      	beq.n	80105d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	430a      	orrs	r2, r1
 80105ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105d4:	f003 0310 	and.w	r3, r3, #16
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d00a      	beq.n	80105f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	689b      	ldr	r3, [r3, #8]
 80105e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	430a      	orrs	r2, r1
 80105f0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105f6:	f003 0320 	and.w	r3, r3, #32
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d00a      	beq.n	8010614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	430a      	orrs	r2, r1
 8010612:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801061c:	2b00      	cmp	r3, #0
 801061e:	d01a      	beq.n	8010656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	430a      	orrs	r2, r1
 8010634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801063a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801063e:	d10a      	bne.n	8010656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	430a      	orrs	r2, r1
 8010654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801065a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00a      	beq.n	8010678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	430a      	orrs	r2, r1
 8010676:	605a      	str	r2, [r3, #4]
  }
}
 8010678:	bf00      	nop
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b098      	sub	sp, #96	@ 0x60
 8010688:	af02      	add	r7, sp, #8
 801068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010694:	f7f2 fd50 	bl	8003138 <HAL_GetTick>
 8010698:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f003 0308 	and.w	r3, r3, #8
 80106a4:	2b08      	cmp	r3, #8
 80106a6:	d12f      	bne.n	8010708 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106b0:	2200      	movs	r2, #0
 80106b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 f88e 	bl	80107d8 <UART_WaitOnFlagUntilTimeout>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d022      	beq.n	8010708 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ca:	e853 3f00 	ldrex	r3, [r3]
 80106ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80106d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80106d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	461a      	mov	r2, r3
 80106de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80106e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80106e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80106e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80106e8:	e841 2300 	strex	r3, r2, [r1]
 80106ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80106ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d1e6      	bne.n	80106c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2220      	movs	r2, #32
 80106f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010704:	2303      	movs	r3, #3
 8010706:	e063      	b.n	80107d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f003 0304 	and.w	r3, r3, #4
 8010712:	2b04      	cmp	r3, #4
 8010714:	d149      	bne.n	80107aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010716:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801071a:	9300      	str	r3, [sp, #0]
 801071c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801071e:	2200      	movs	r2, #0
 8010720:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 f857 	bl	80107d8 <UART_WaitOnFlagUntilTimeout>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d03c      	beq.n	80107aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010738:	e853 3f00 	ldrex	r3, [r3]
 801073c:	623b      	str	r3, [r7, #32]
   return(result);
 801073e:	6a3b      	ldr	r3, [r7, #32]
 8010740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	461a      	mov	r2, r3
 801074c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801074e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010750:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010752:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010756:	e841 2300 	strex	r3, r2, [r1]
 801075a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801075c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801075e:	2b00      	cmp	r3, #0
 8010760:	d1e6      	bne.n	8010730 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	3308      	adds	r3, #8
 8010768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076a:	693b      	ldr	r3, [r7, #16]
 801076c:	e853 3f00 	ldrex	r3, [r3]
 8010770:	60fb      	str	r3, [r7, #12]
   return(result);
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f023 0301 	bic.w	r3, r3, #1
 8010778:	64bb      	str	r3, [r7, #72]	@ 0x48
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	3308      	adds	r3, #8
 8010780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010782:	61fa      	str	r2, [r7, #28]
 8010784:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010786:	69b9      	ldr	r1, [r7, #24]
 8010788:	69fa      	ldr	r2, [r7, #28]
 801078a:	e841 2300 	strex	r3, r2, [r1]
 801078e:	617b      	str	r3, [r7, #20]
   return(result);
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d1e5      	bne.n	8010762 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2220      	movs	r2, #32
 801079a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2200      	movs	r2, #0
 80107a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107a6:	2303      	movs	r3, #3
 80107a8:	e012      	b.n	80107d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2220      	movs	r2, #32
 80107ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2220      	movs	r2, #32
 80107b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2200      	movs	r2, #0
 80107be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2200      	movs	r2, #0
 80107c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2200      	movs	r2, #0
 80107ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80107ce:	2300      	movs	r3, #0
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3758      	adds	r7, #88	@ 0x58
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	603b      	str	r3, [r7, #0]
 80107e4:	4613      	mov	r3, r2
 80107e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80107e8:	e04f      	b.n	801088a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107f0:	d04b      	beq.n	801088a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80107f2:	f7f2 fca1 	bl	8003138 <HAL_GetTick>
 80107f6:	4602      	mov	r2, r0
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	69ba      	ldr	r2, [r7, #24]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d302      	bcc.n	8010808 <UART_WaitOnFlagUntilTimeout+0x30>
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d101      	bne.n	801080c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010808:	2303      	movs	r3, #3
 801080a:	e04e      	b.n	80108aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f003 0304 	and.w	r3, r3, #4
 8010816:	2b00      	cmp	r3, #0
 8010818:	d037      	beq.n	801088a <UART_WaitOnFlagUntilTimeout+0xb2>
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	2b80      	cmp	r3, #128	@ 0x80
 801081e:	d034      	beq.n	801088a <UART_WaitOnFlagUntilTimeout+0xb2>
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	2b40      	cmp	r3, #64	@ 0x40
 8010824:	d031      	beq.n	801088a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	69db      	ldr	r3, [r3, #28]
 801082c:	f003 0308 	and.w	r3, r3, #8
 8010830:	2b08      	cmp	r3, #8
 8010832:	d110      	bne.n	8010856 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2208      	movs	r2, #8
 801083a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801083c:	68f8      	ldr	r0, [r7, #12]
 801083e:	f000 f838 	bl	80108b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2208      	movs	r2, #8
 8010846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	2200      	movs	r2, #0
 801084e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010852:	2301      	movs	r3, #1
 8010854:	e029      	b.n	80108aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	69db      	ldr	r3, [r3, #28]
 801085c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010864:	d111      	bne.n	801088a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801086e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010870:	68f8      	ldr	r0, [r7, #12]
 8010872:	f000 f81e 	bl	80108b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2220      	movs	r2, #32
 801087a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2200      	movs	r2, #0
 8010882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010886:	2303      	movs	r3, #3
 8010888:	e00f      	b.n	80108aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	69da      	ldr	r2, [r3, #28]
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	4013      	ands	r3, r2
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	429a      	cmp	r2, r3
 8010898:	bf0c      	ite	eq
 801089a:	2301      	moveq	r3, #1
 801089c:	2300      	movne	r3, #0
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	461a      	mov	r2, r3
 80108a2:	79fb      	ldrb	r3, [r7, #7]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d0a0      	beq.n	80107ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80108a8:	2300      	movs	r3, #0
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80108b2:	b480      	push	{r7}
 80108b4:	b095      	sub	sp, #84	@ 0x54
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108c2:	e853 3f00 	ldrex	r3, [r3]
 80108c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80108c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80108ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	461a      	mov	r2, r3
 80108d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80108da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80108de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80108e0:	e841 2300 	strex	r3, r2, [r1]
 80108e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80108e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d1e6      	bne.n	80108ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	3308      	adds	r3, #8
 80108f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f4:	6a3b      	ldr	r3, [r7, #32]
 80108f6:	e853 3f00 	ldrex	r3, [r3]
 80108fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010902:	f023 0301 	bic.w	r3, r3, #1
 8010906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	3308      	adds	r3, #8
 801090e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010910:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010912:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010918:	e841 2300 	strex	r3, r2, [r1]
 801091c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801091e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1e3      	bne.n	80108ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010928:	2b01      	cmp	r3, #1
 801092a:	d118      	bne.n	801095e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	e853 3f00 	ldrex	r3, [r3]
 8010938:	60bb      	str	r3, [r7, #8]
   return(result);
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	f023 0310 	bic.w	r3, r3, #16
 8010940:	647b      	str	r3, [r7, #68]	@ 0x44
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	461a      	mov	r2, r3
 8010948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801094a:	61bb      	str	r3, [r7, #24]
 801094c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801094e:	6979      	ldr	r1, [r7, #20]
 8010950:	69ba      	ldr	r2, [r7, #24]
 8010952:	e841 2300 	strex	r3, r2, [r1]
 8010956:	613b      	str	r3, [r7, #16]
   return(result);
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d1e6      	bne.n	801092c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2220      	movs	r2, #32
 8010962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2200      	movs	r2, #0
 801096a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010972:	bf00      	nop
 8010974:	3754      	adds	r7, #84	@ 0x54
 8010976:	46bd      	mov	sp, r7
 8010978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097c:	4770      	bx	lr

0801097e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801097e:	b580      	push	{r7, lr}
 8010980:	b084      	sub	sp, #16
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801098a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2200      	movs	r2, #0
 8010990:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	2200      	movs	r2, #0
 8010998:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801099c:	68f8      	ldr	r0, [r7, #12]
 801099e:	f7ff fc0b 	bl	80101b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109a2:	bf00      	nop
 80109a4:	3710      	adds	r7, #16
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}

080109aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b088      	sub	sp, #32
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	e853 3f00 	ldrex	r3, [r3]
 80109be:	60bb      	str	r3, [r7, #8]
   return(result);
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80109c6:	61fb      	str	r3, [r7, #28]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	461a      	mov	r2, r3
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	61bb      	str	r3, [r7, #24]
 80109d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d4:	6979      	ldr	r1, [r7, #20]
 80109d6:	69ba      	ldr	r2, [r7, #24]
 80109d8:	e841 2300 	strex	r3, r2, [r1]
 80109dc:	613b      	str	r3, [r7, #16]
   return(result);
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d1e6      	bne.n	80109b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2220      	movs	r2, #32
 80109e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2200      	movs	r2, #0
 80109f0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7ff fbd6 	bl	80101a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109f8:	bf00      	nop
 80109fa:	3720      	adds	r7, #32
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010a00:	b480      	push	{r7}
 8010a02:	b083      	sub	sp, #12
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010a08:	bf00      	nop
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010a1c:	bf00      	nop
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b085      	sub	sp, #20
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a36:	2b01      	cmp	r3, #1
 8010a38:	d101      	bne.n	8010a3e <HAL_UARTEx_DisableFifoMode+0x16>
 8010a3a:	2302      	movs	r3, #2
 8010a3c:	e027      	b.n	8010a8e <HAL_UARTEx_DisableFifoMode+0x66>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2201      	movs	r2, #1
 8010a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2224      	movs	r2, #36	@ 0x24
 8010a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	681a      	ldr	r2, [r3, #0]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f022 0201 	bic.w	r2, r2, #1
 8010a64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010a6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2200      	movs	r2, #0
 8010a72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	68fa      	ldr	r2, [r7, #12]
 8010a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2220      	movs	r2, #32
 8010a80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2200      	movs	r2, #0
 8010a88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a8c:	2300      	movs	r3, #0
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3714      	adds	r7, #20
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr

08010a9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a9a:	b580      	push	{r7, lr}
 8010a9c:	b084      	sub	sp, #16
 8010a9e:	af00      	add	r7, sp, #0
 8010aa0:	6078      	str	r0, [r7, #4]
 8010aa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d101      	bne.n	8010ab2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010aae:	2302      	movs	r3, #2
 8010ab0:	e02d      	b.n	8010b0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2224      	movs	r2, #36	@ 0x24
 8010abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	f022 0201 	bic.w	r2, r2, #1
 8010ad8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	689b      	ldr	r3, [r3, #8]
 8010ae0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	683a      	ldr	r2, [r7, #0]
 8010aea:	430a      	orrs	r2, r1
 8010aec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 f850 	bl	8010b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	68fa      	ldr	r2, [r7, #12]
 8010afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2220      	movs	r2, #32
 8010b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2200      	movs	r2, #0
 8010b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b0c:	2300      	movs	r3, #0
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3710      	adds	r7, #16
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b084      	sub	sp, #16
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d101      	bne.n	8010b2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b2a:	2302      	movs	r3, #2
 8010b2c:	e02d      	b.n	8010b8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2201      	movs	r2, #1
 8010b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2224      	movs	r2, #36	@ 0x24
 8010b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	681a      	ldr	r2, [r3, #0]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f022 0201 	bic.w	r2, r2, #1
 8010b54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	689b      	ldr	r3, [r3, #8]
 8010b5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	683a      	ldr	r2, [r7, #0]
 8010b66:	430a      	orrs	r2, r1
 8010b68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f000 f812 	bl	8010b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2220      	movs	r2, #32
 8010b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b88:	2300      	movs	r3, #0
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
	...

08010b94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b085      	sub	sp, #20
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d108      	bne.n	8010bb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2201      	movs	r2, #1
 8010bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010bb4:	e031      	b.n	8010c1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010bb6:	2308      	movs	r3, #8
 8010bb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010bba:	2308      	movs	r3, #8
 8010bbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	0e5b      	lsrs	r3, r3, #25
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	f003 0307 	and.w	r3, r3, #7
 8010bcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	689b      	ldr	r3, [r3, #8]
 8010bd4:	0f5b      	lsrs	r3, r3, #29
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	f003 0307 	and.w	r3, r3, #7
 8010bdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010bde:	7bbb      	ldrb	r3, [r7, #14]
 8010be0:	7b3a      	ldrb	r2, [r7, #12]
 8010be2:	4911      	ldr	r1, [pc, #68]	@ (8010c28 <UARTEx_SetNbDataToProcess+0x94>)
 8010be4:	5c8a      	ldrb	r2, [r1, r2]
 8010be6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010bea:	7b3a      	ldrb	r2, [r7, #12]
 8010bec:	490f      	ldr	r1, [pc, #60]	@ (8010c2c <UARTEx_SetNbDataToProcess+0x98>)
 8010bee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010bfc:	7bfb      	ldrb	r3, [r7, #15]
 8010bfe:	7b7a      	ldrb	r2, [r7, #13]
 8010c00:	4909      	ldr	r1, [pc, #36]	@ (8010c28 <UARTEx_SetNbDataToProcess+0x94>)
 8010c02:	5c8a      	ldrb	r2, [r1, r2]
 8010c04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010c08:	7b7a      	ldrb	r2, [r7, #13]
 8010c0a:	4908      	ldr	r1, [pc, #32]	@ (8010c2c <UARTEx_SetNbDataToProcess+0x98>)
 8010c0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010c1a:	bf00      	nop
 8010c1c:	3714      	adds	r7, #20
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c24:	4770      	bx	lr
 8010c26:	bf00      	nop
 8010c28:	08011660 	.word	0x08011660
 8010c2c:	08011668 	.word	0x08011668

08010c30 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b086      	sub	sp, #24
 8010c34:	af02      	add	r7, sp, #8
 8010c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010c3c:	f7f2 fa7c 	bl	8003138 <HAL_GetTick>
 8010c40:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d102      	bne.n	8010c4e <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	73fb      	strb	r3, [r7, #15]
 8010c4c:	e137      	b.n	8010ebe <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	4a76      	ldr	r2, [pc, #472]	@ (8010e2c <HAL_XSPI_Init+0x1fc>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d008      	beq.n	8010c6a <HAL_XSPI_Init+0x3a>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4a74      	ldr	r2, [pc, #464]	@ (8010e30 <HAL_XSPI_Init+0x200>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d003      	beq.n	8010c6a <HAL_XSPI_Init+0x3a>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4a73      	ldr	r2, [pc, #460]	@ (8010e34 <HAL_XSPI_Init+0x204>)
 8010c68:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	4a72      	ldr	r2, [pc, #456]	@ (8010e38 <HAL_XSPI_Init+0x208>)
 8010c70:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	4a6d      	ldr	r2, [pc, #436]	@ (8010e2c <HAL_XSPI_Init+0x1fc>)
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d008      	beq.n	8010c8e <HAL_XSPI_Init+0x5e>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	4a6b      	ldr	r2, [pc, #428]	@ (8010e30 <HAL_XSPI_Init+0x200>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d003      	beq.n	8010c8e <HAL_XSPI_Init+0x5e>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	4a6a      	ldr	r2, [pc, #424]	@ (8010e34 <HAL_XSPI_Init+0x204>)
 8010c8c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	4a66      	ldr	r2, [pc, #408]	@ (8010e2c <HAL_XSPI_Init+0x1fc>)
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d008      	beq.n	8010caa <HAL_XSPI_Init+0x7a>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4a64      	ldr	r2, [pc, #400]	@ (8010e30 <HAL_XSPI_Init+0x200>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d003      	beq.n	8010caa <HAL_XSPI_Init+0x7a>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	4a63      	ldr	r2, [pc, #396]	@ (8010e34 <HAL_XSPI_Init+0x204>)
 8010ca8:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	f040 8102 	bne.w	8010ebe <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f7f1 fa3a 	bl	8002134 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8010cc0:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 f8ff 	bl	8010ec8 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	689a      	ldr	r2, [r3, #8]
 8010cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8010e3c <HAL_XSPI_Init+0x20c>)
 8010cd2:	4013      	ands	r3, r2
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	68d1      	ldr	r1, [r2, #12]
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	6912      	ldr	r2, [r2, #16]
 8010cdc:	0412      	lsls	r2, r2, #16
 8010cde:	4311      	orrs	r1, r2
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	6952      	ldr	r2, [r2, #20]
 8010ce4:	3a01      	subs	r2, #1
 8010ce6:	0212      	lsls	r2, r2, #8
 8010ce8:	4311      	orrs	r1, r2
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	69d2      	ldr	r2, [r2, #28]
 8010cee:	4311      	orrs	r1, r2
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	6812      	ldr	r2, [r2, #0]
 8010cf4:	430b      	orrs	r3, r1
 8010cf6:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	4a4b      	ldr	r2, [pc, #300]	@ (8010e2c <HAL_XSPI_Init+0x1fc>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d00e      	beq.n	8010d20 <HAL_XSPI_Init+0xf0>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4a4a      	ldr	r2, [pc, #296]	@ (8010e30 <HAL_XSPI_Init+0x200>)
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	d009      	beq.n	8010d20 <HAL_XSPI_Init+0xf0>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4a48      	ldr	r2, [pc, #288]	@ (8010e34 <HAL_XSPI_Init+0x204>)
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d004      	beq.n	8010d20 <HAL_XSPI_Init+0xf0>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4a49      	ldr	r2, [pc, #292]	@ (8010e40 <HAL_XSPI_Init+0x210>)
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	d10a      	bne.n	8010d36 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	689b      	ldr	r3, [r3, #8]
 8010d26:	f023 0108 	bic.w	r1, r3, #8
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	430a      	orrs	r2, r1
 8010d34:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6a1a      	ldr	r2, [r3, #32]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	430a      	orrs	r2, r1
 8010d4a:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	691b      	ldr	r3, [r3, #16]
 8010d52:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d5a:	041a      	lsls	r2, r3, #16
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	430a      	orrs	r2, r1
 8010d62:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	4a30      	ldr	r2, [pc, #192]	@ (8010e2c <HAL_XSPI_Init+0x1fc>)
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d00e      	beq.n	8010d8c <HAL_XSPI_Init+0x15c>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	4a2f      	ldr	r2, [pc, #188]	@ (8010e30 <HAL_XSPI_Init+0x200>)
 8010d74:	4293      	cmp	r3, r2
 8010d76:	d009      	beq.n	8010d8c <HAL_XSPI_Init+0x15c>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8010e34 <HAL_XSPI_Init+0x204>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d004      	beq.n	8010d8c <HAL_XSPI_Init+0x15c>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4a2e      	ldr	r2, [pc, #184]	@ (8010e40 <HAL_XSPI_Init+0x210>)
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	d10a      	bne.n	8010da2 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	691b      	ldr	r3, [r3, #16]
 8010d92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	430a      	orrs	r2, r1
 8010da0:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010daa:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	3b01      	subs	r3, #1
 8010dbc:	021a      	lsls	r2, r3, #8
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	430a      	orrs	r2, r1
 8010dc4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010dca:	9300      	str	r3, [sp, #0]
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	2120      	movs	r1, #32
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f000 f887 	bl	8010ee6 <XSPI_WaitFlagStateUntilTimeout>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010ddc:	7bfb      	ldrb	r3, [r7, #15]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d16d      	bne.n	8010ebe <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	68db      	ldr	r3, [r3, #12]
 8010de8:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	430a      	orrs	r2, r1
 8010df6:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4a0e      	ldr	r2, [pc, #56]	@ (8010e38 <HAL_XSPI_Init+0x208>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d004      	beq.n	8010e0c <HAL_XSPI_Init+0x1dc>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a0f      	ldr	r2, [pc, #60]	@ (8010e44 <HAL_XSPI_Init+0x214>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d11d      	bne.n	8010e48 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	2200      	movs	r2, #0
 8010e16:	2120      	movs	r1, #32
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f000 f864 	bl	8010ee6 <XSPI_WaitFlagStateUntilTimeout>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8010e22:	7bfb      	ldrb	r3, [r7, #15]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d00f      	beq.n	8010e48 <HAL_XSPI_Init+0x218>
          {
            return status;
 8010e28:	7bfb      	ldrb	r3, [r7, #15]
 8010e2a:	e049      	b.n	8010ec0 <HAL_XSPI_Init+0x290>
 8010e2c:	420d1400 	.word	0x420d1400
 8010e30:	520d1400 	.word	0x520d1400
 8010e34:	420d2400 	.word	0x420d2400
 8010e38:	420d3400 	.word	0x420d3400
 8010e3c:	f8e0c0fc 	.word	0xf8e0c0fc
 8010e40:	520d2400 	.word	0x520d2400
 8010e44:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	689a      	ldr	r2, [r3, #8]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	430a      	orrs	r2, r1
 8010e5c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010e66:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e72:	431a      	orrs	r2, r3
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	430a      	orrs	r2, r1
 8010e7a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f042 0201 	orr.w	r2, r2, #1
 8010e8c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	699b      	ldr	r3, [r3, #24]
 8010e92:	2b02      	cmp	r3, #2
 8010e94:	d107      	bne.n	8010ea6 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	689a      	ldr	r2, [r3, #8]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f042 0202 	orr.w	r2, r2, #2
 8010ea4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010eae:	d103      	bne.n	8010eb8 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	655a      	str	r2, [r3, #84]	@ 0x54
 8010eb6:	e002      	b.n	8010ebe <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2202      	movs	r2, #2
 8010ebc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8010ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3710      	adds	r7, #16
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8010ec8:	b480      	push	{r7}
 8010eca:	b083      	sub	sp, #12
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	683a      	ldr	r2, [r7, #0]
 8010ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8010ed8:	2300      	movs	r3, #0
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	370c      	adds	r7, #12
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr

08010ee6 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010ee6:	b580      	push	{r7, lr}
 8010ee8:	b084      	sub	sp, #16
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	60f8      	str	r0, [r7, #12]
 8010eee:	60b9      	str	r1, [r7, #8]
 8010ef0:	603b      	str	r3, [r7, #0]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010ef6:	e01a      	b.n	8010f2e <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ef8:	69bb      	ldr	r3, [r7, #24]
 8010efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efe:	d016      	beq.n	8010f2e <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f00:	f7f2 f91a 	bl	8003138 <HAL_GetTick>
 8010f04:	4602      	mov	r2, r0
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	69ba      	ldr	r2, [r7, #24]
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d302      	bcc.n	8010f16 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d10b      	bne.n	8010f2e <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f1c:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f22:	f043 0201 	orr.w	r2, r3, #1
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8010f2a:	2303      	movs	r3, #3
 8010f2c:	e00e      	b.n	8010f4c <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	6a1a      	ldr	r2, [r3, #32]
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	4013      	ands	r3, r2
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	bf14      	ite	ne
 8010f3c:	2301      	movne	r3, #1
 8010f3e:	2300      	moveq	r3, #0
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	461a      	mov	r2, r3
 8010f44:	79fb      	ldrb	r3, [r7, #7]
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d1d6      	bne.n	8010ef8 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010f4a:	2300      	movs	r3, #0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3710      	adds	r7, #16
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010f54:	b084      	sub	sp, #16
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b084      	sub	sp, #16
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
 8010f5e:	f107 001c 	add.w	r0, r7, #28
 8010f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010f66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010f6a:	2b03      	cmp	r3, #3
 8010f6c:	d105      	bne.n	8010f7a <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	68db      	ldr	r3, [r3, #12]
 8010f72:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 fa8e 	bl	801149c <USB_CoreReset>
 8010f80:	4603      	mov	r3, r0
 8010f82:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8010f84:	7fbb      	ldrb	r3, [r7, #30]
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	d10b      	bne.n	8010fa2 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	689b      	ldr	r3, [r3, #8]
 8010f8e:	f043 0208 	orr.w	r2, r3, #8
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	689b      	ldr	r3, [r3, #8]
 8010f9a:	f043 0220 	orr.w	r2, r3, #32
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8010fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3710      	adds	r7, #16
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010fae:	b004      	add	sp, #16
 8010fb0:	4770      	bx	lr

08010fb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010fb2:	b480      	push	{r7}
 8010fb4:	b083      	sub	sp, #12
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	689b      	ldr	r3, [r3, #8]
 8010fbe:	f023 0201 	bic.w	r2, r3, #1
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010fc6:	2300      	movs	r3, #0
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	370c      	adds	r7, #12
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr

08010fd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b084      	sub	sp, #16
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	460b      	mov	r3, r1
 8010fde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010ff0:	78fb      	ldrb	r3, [r7, #3]
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d115      	bne.n	8011022 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	68db      	ldr	r3, [r3, #12]
 8010ffa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011002:	200a      	movs	r0, #10
 8011004:	f7f2 f8a4 	bl	8003150 <HAL_Delay>
      ms += 10U;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	330a      	adds	r3, #10
 801100c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f000 fa36 	bl	8011480 <USB_GetMode>
 8011014:	4603      	mov	r3, r0
 8011016:	2b01      	cmp	r3, #1
 8011018:	d01e      	beq.n	8011058 <USB_SetCurrentMode+0x84>
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2bc7      	cmp	r3, #199	@ 0xc7
 801101e:	d9f0      	bls.n	8011002 <USB_SetCurrentMode+0x2e>
 8011020:	e01a      	b.n	8011058 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011022:	78fb      	ldrb	r3, [r7, #3]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d115      	bne.n	8011054 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011034:	200a      	movs	r0, #10
 8011036:	f7f2 f88b 	bl	8003150 <HAL_Delay>
      ms += 10U;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	330a      	adds	r3, #10
 801103e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fa1d 	bl	8011480 <USB_GetMode>
 8011046:	4603      	mov	r3, r0
 8011048:	2b00      	cmp	r3, #0
 801104a:	d005      	beq.n	8011058 <USB_SetCurrentMode+0x84>
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	2bc7      	cmp	r3, #199	@ 0xc7
 8011050:	d9f0      	bls.n	8011034 <USB_SetCurrentMode+0x60>
 8011052:	e001      	b.n	8011058 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011054:	2301      	movs	r3, #1
 8011056:	e005      	b.n	8011064 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2bc8      	cmp	r3, #200	@ 0xc8
 801105c:	d101      	bne.n	8011062 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801105e:	2301      	movs	r3, #1
 8011060:	e000      	b.n	8011064 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011062:	2300      	movs	r3, #0
}
 8011064:	4618      	mov	r0, r3
 8011066:	3710      	adds	r7, #16
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801106c:	b084      	sub	sp, #16
 801106e:	b580      	push	{r7, lr}
 8011070:	b086      	sub	sp, #24
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
 8011076:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801107a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801107e:	2300      	movs	r3, #0
 8011080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011086:	2300      	movs	r3, #0
 8011088:	613b      	str	r3, [r7, #16]
 801108a:	e009      	b.n	80110a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	3340      	adds	r3, #64	@ 0x40
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	4413      	add	r3, r2
 8011096:	2200      	movs	r2, #0
 8011098:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	3301      	adds	r3, #1
 801109e:	613b      	str	r3, [r7, #16]
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	2b0e      	cmp	r3, #14
 80110a4:	d9f2      	bls.n	801108c <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80110b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d11c      	bne.n	80110f4 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	68fa      	ldr	r2, [r7, #12]
 80110c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80110c8:	f043 0302 	orr.w	r3, r3, #2
 80110cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110de:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110ea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80110f2:	e011      	b.n	8011118 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011104:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011110:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801111e:	461a      	mov	r2, r3
 8011120:	2300      	movs	r3, #0
 8011122:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8011124:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011128:	2b03      	cmp	r3, #3
 801112a:	d10d      	bne.n	8011148 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801112c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011130:	2b00      	cmp	r3, #0
 8011132:	d104      	bne.n	801113e <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011134:	2100      	movs	r1, #0
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f000 f968 	bl	801140c <USB_SetDevSpeed>
 801113c:	e008      	b.n	8011150 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801113e:	2101      	movs	r1, #1
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f000 f963 	bl	801140c <USB_SetDevSpeed>
 8011146:	e003      	b.n	8011150 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011148:	2103      	movs	r1, #3
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f000 f95e 	bl	801140c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011150:	2110      	movs	r1, #16
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 f8fa 	bl	801134c <USB_FlushTxFifo>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d001      	beq.n	8011162 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 801115e:	2301      	movs	r3, #1
 8011160:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f000 f924 	bl	80113b0 <USB_FlushRxFifo>
 8011168:	4603      	mov	r3, r0
 801116a:	2b00      	cmp	r3, #0
 801116c:	d001      	beq.n	8011172 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 801116e:	2301      	movs	r3, #1
 8011170:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011178:	461a      	mov	r2, r3
 801117a:	2300      	movs	r3, #0
 801117c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011184:	461a      	mov	r2, r3
 8011186:	2300      	movs	r3, #0
 8011188:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011190:	461a      	mov	r2, r3
 8011192:	2300      	movs	r3, #0
 8011194:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011196:	2300      	movs	r3, #0
 8011198:	613b      	str	r3, [r7, #16]
 801119a:	e043      	b.n	8011224 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	015a      	lsls	r2, r3, #5
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	4413      	add	r3, r2
 80111a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80111ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80111b2:	d118      	bne.n	80111e6 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d10a      	bne.n	80111d0 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	015a      	lsls	r2, r3, #5
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	4413      	add	r3, r2
 80111c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80111c6:	461a      	mov	r2, r3
 80111c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80111cc:	6013      	str	r3, [r2, #0]
 80111ce:	e013      	b.n	80111f8 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	015a      	lsls	r2, r3, #5
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	4413      	add	r3, r2
 80111d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80111dc:	461a      	mov	r2, r3
 80111de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80111e2:	6013      	str	r3, [r2, #0]
 80111e4:	e008      	b.n	80111f8 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	015a      	lsls	r2, r3, #5
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	4413      	add	r3, r2
 80111ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80111f2:	461a      	mov	r2, r3
 80111f4:	2300      	movs	r3, #0
 80111f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	015a      	lsls	r2, r3, #5
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	4413      	add	r3, r2
 8011200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011204:	461a      	mov	r2, r3
 8011206:	2300      	movs	r3, #0
 8011208:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	015a      	lsls	r2, r3, #5
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	4413      	add	r3, r2
 8011212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011216:	461a      	mov	r2, r3
 8011218:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801121c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801121e:	693b      	ldr	r3, [r7, #16]
 8011220:	3301      	adds	r3, #1
 8011222:	613b      	str	r3, [r7, #16]
 8011224:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011228:	461a      	mov	r2, r3
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	4293      	cmp	r3, r2
 801122e:	d3b5      	bcc.n	801119c <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011230:	2300      	movs	r3, #0
 8011232:	613b      	str	r3, [r7, #16]
 8011234:	e043      	b.n	80112be <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	015a      	lsls	r2, r3, #5
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	4413      	add	r3, r2
 801123e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801124c:	d118      	bne.n	8011280 <USB_DevInit+0x214>
    {
      if (i == 0U)
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d10a      	bne.n	801126a <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	015a      	lsls	r2, r3, #5
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	4413      	add	r3, r2
 801125c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011260:	461a      	mov	r2, r3
 8011262:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011266:	6013      	str	r3, [r2, #0]
 8011268:	e013      	b.n	8011292 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	015a      	lsls	r2, r3, #5
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	4413      	add	r3, r2
 8011272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011276:	461a      	mov	r2, r3
 8011278:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801127c:	6013      	str	r3, [r2, #0]
 801127e:	e008      	b.n	8011292 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	015a      	lsls	r2, r3, #5
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	4413      	add	r3, r2
 8011288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801128c:	461a      	mov	r2, r3
 801128e:	2300      	movs	r3, #0
 8011290:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	015a      	lsls	r2, r3, #5
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	4413      	add	r3, r2
 801129a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801129e:	461a      	mov	r2, r3
 80112a0:	2300      	movs	r3, #0
 80112a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	015a      	lsls	r2, r3, #5
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	4413      	add	r3, r2
 80112ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112b0:	461a      	mov	r2, r3
 80112b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80112b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80112b8:	693b      	ldr	r3, [r7, #16]
 80112ba:	3301      	adds	r3, #1
 80112bc:	613b      	str	r3, [r7, #16]
 80112be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80112c2:	461a      	mov	r2, r3
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d3b5      	bcc.n	8011236 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112d0:	691b      	ldr	r3, [r3, #16]
 80112d2:	68fa      	ldr	r2, [r7, #12]
 80112d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80112d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80112dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2200      	movs	r2, #0
 80112e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80112ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80112ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d105      	bne.n	8011300 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	699b      	ldr	r3, [r3, #24]
 80112f8:	f043 0210 	orr.w	r2, r3, #16
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	699a      	ldr	r2, [r3, #24]
 8011304:	4b10      	ldr	r3, [pc, #64]	@ (8011348 <USB_DevInit+0x2dc>)
 8011306:	4313      	orrs	r3, r2
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801130c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011310:	2b00      	cmp	r3, #0
 8011312:	d005      	beq.n	8011320 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	699b      	ldr	r3, [r3, #24]
 8011318:	f043 0208 	orr.w	r2, r3, #8
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011320:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011324:	2b01      	cmp	r3, #1
 8011326:	d107      	bne.n	8011338 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	699b      	ldr	r3, [r3, #24]
 801132c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011330:	f043 0304 	orr.w	r3, r3, #4
 8011334:	687a      	ldr	r2, [r7, #4]
 8011336:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011338:	7dfb      	ldrb	r3, [r7, #23]
}
 801133a:	4618      	mov	r0, r3
 801133c:	3718      	adds	r7, #24
 801133e:	46bd      	mov	sp, r7
 8011340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011344:	b004      	add	sp, #16
 8011346:	4770      	bx	lr
 8011348:	803c3800 	.word	0x803c3800

0801134c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801134c:	b480      	push	{r7}
 801134e:	b085      	sub	sp, #20
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011356:	2300      	movs	r3, #0
 8011358:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	3301      	adds	r3, #1
 801135e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011366:	d901      	bls.n	801136c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011368:	2303      	movs	r3, #3
 801136a:	e01b      	b.n	80113a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	691b      	ldr	r3, [r3, #16]
 8011370:	2b00      	cmp	r3, #0
 8011372:	daf2      	bge.n	801135a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011374:	2300      	movs	r3, #0
 8011376:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	019b      	lsls	r3, r3, #6
 801137c:	f043 0220 	orr.w	r2, r3, #32
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	3301      	adds	r3, #1
 8011388:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011390:	d901      	bls.n	8011396 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011392:	2303      	movs	r3, #3
 8011394:	e006      	b.n	80113a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	691b      	ldr	r3, [r3, #16]
 801139a:	f003 0320 	and.w	r3, r3, #32
 801139e:	2b20      	cmp	r3, #32
 80113a0:	d0f0      	beq.n	8011384 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80113a2:	2300      	movs	r3, #0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3714      	adds	r7, #20
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr

080113b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b085      	sub	sp, #20
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80113b8:	2300      	movs	r3, #0
 80113ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	3301      	adds	r3, #1
 80113c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113c8:	d901      	bls.n	80113ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80113ca:	2303      	movs	r3, #3
 80113cc:	e018      	b.n	8011400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	691b      	ldr	r3, [r3, #16]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	daf2      	bge.n	80113bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80113d6:	2300      	movs	r3, #0
 80113d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2210      	movs	r2, #16
 80113de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	3301      	adds	r3, #1
 80113e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113ec:	d901      	bls.n	80113f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80113ee:	2303      	movs	r3, #3
 80113f0:	e006      	b.n	8011400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	691b      	ldr	r3, [r3, #16]
 80113f6:	f003 0310 	and.w	r3, r3, #16
 80113fa:	2b10      	cmp	r3, #16
 80113fc:	d0f0      	beq.n	80113e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80113fe:	2300      	movs	r3, #0
}
 8011400:	4618      	mov	r0, r3
 8011402:	3714      	adds	r7, #20
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr

0801140c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801140c:	b480      	push	{r7}
 801140e:	b085      	sub	sp, #20
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	460b      	mov	r3, r1
 8011416:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011422:	681a      	ldr	r2, [r3, #0]
 8011424:	78fb      	ldrb	r3, [r7, #3]
 8011426:	68f9      	ldr	r1, [r7, #12]
 8011428:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801142c:	4313      	orrs	r3, r2
 801142e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011430:	2300      	movs	r3, #0
}
 8011432:	4618      	mov	r0, r3
 8011434:	3714      	adds	r7, #20
 8011436:	46bd      	mov	sp, r7
 8011438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143c:	4770      	bx	lr

0801143e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801143e:	b480      	push	{r7}
 8011440:	b085      	sub	sp, #20
 8011442:	af00      	add	r7, sp, #0
 8011444:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	68fa      	ldr	r2, [r7, #12]
 8011454:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011458:	f023 0303 	bic.w	r3, r3, #3
 801145c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	68fa      	ldr	r2, [r7, #12]
 8011468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801146c:	f043 0302 	orr.w	r3, r3, #2
 8011470:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011472:	2300      	movs	r3, #0
}
 8011474:	4618      	mov	r0, r3
 8011476:	3714      	adds	r7, #20
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr

08011480 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011480:	b480      	push	{r7}
 8011482:	b083      	sub	sp, #12
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	695b      	ldr	r3, [r3, #20]
 801148c:	f003 0301 	and.w	r3, r3, #1
}
 8011490:	4618      	mov	r0, r3
 8011492:	370c      	adds	r7, #12
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr

0801149c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801149c:	b480      	push	{r7}
 801149e:	b085      	sub	sp, #20
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80114a4:	2300      	movs	r3, #0
 80114a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	3301      	adds	r3, #1
 80114ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80114b4:	d901      	bls.n	80114ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80114b6:	2303      	movs	r3, #3
 80114b8:	e01b      	b.n	80114f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	691b      	ldr	r3, [r3, #16]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	daf2      	bge.n	80114a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80114c2:	2300      	movs	r3, #0
 80114c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	691b      	ldr	r3, [r3, #16]
 80114ca:	f043 0201 	orr.w	r2, r3, #1
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	3301      	adds	r3, #1
 80114d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80114de:	d901      	bls.n	80114e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80114e0:	2303      	movs	r3, #3
 80114e2:	e006      	b.n	80114f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	691b      	ldr	r3, [r3, #16]
 80114e8:	f003 0301 	and.w	r3, r3, #1
 80114ec:	2b01      	cmp	r3, #1
 80114ee:	d0f0      	beq.n	80114d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80114f0:	2300      	movs	r3, #0
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3714      	adds	r7, #20
 80114f6:	46bd      	mov	sp, r7
 80114f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fc:	4770      	bx	lr

080114fe <memset>:
 80114fe:	4402      	add	r2, r0
 8011500:	4603      	mov	r3, r0
 8011502:	4293      	cmp	r3, r2
 8011504:	d100      	bne.n	8011508 <memset+0xa>
 8011506:	4770      	bx	lr
 8011508:	f803 1b01 	strb.w	r1, [r3], #1
 801150c:	e7f9      	b.n	8011502 <memset+0x4>
	...

08011510 <__libc_init_array>:
 8011510:	b570      	push	{r4, r5, r6, lr}
 8011512:	4d0d      	ldr	r5, [pc, #52]	@ (8011548 <__libc_init_array+0x38>)
 8011514:	2600      	movs	r6, #0
 8011516:	4c0d      	ldr	r4, [pc, #52]	@ (801154c <__libc_init_array+0x3c>)
 8011518:	1b64      	subs	r4, r4, r5
 801151a:	10a4      	asrs	r4, r4, #2
 801151c:	42a6      	cmp	r6, r4
 801151e:	d109      	bne.n	8011534 <__libc_init_array+0x24>
 8011520:	4d0b      	ldr	r5, [pc, #44]	@ (8011550 <__libc_init_array+0x40>)
 8011522:	2600      	movs	r6, #0
 8011524:	4c0b      	ldr	r4, [pc, #44]	@ (8011554 <__libc_init_array+0x44>)
 8011526:	f000 f817 	bl	8011558 <_init>
 801152a:	1b64      	subs	r4, r4, r5
 801152c:	10a4      	asrs	r4, r4, #2
 801152e:	42a6      	cmp	r6, r4
 8011530:	d105      	bne.n	801153e <__libc_init_array+0x2e>
 8011532:	bd70      	pop	{r4, r5, r6, pc}
 8011534:	f855 3b04 	ldr.w	r3, [r5], #4
 8011538:	3601      	adds	r6, #1
 801153a:	4798      	blx	r3
 801153c:	e7ee      	b.n	801151c <__libc_init_array+0xc>
 801153e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011542:	3601      	adds	r6, #1
 8011544:	4798      	blx	r3
 8011546:	e7f2      	b.n	801152e <__libc_init_array+0x1e>
 8011548:	08011678 	.word	0x08011678
 801154c:	08011678 	.word	0x08011678
 8011550:	08011678 	.word	0x08011678
 8011554:	0801167c 	.word	0x0801167c

08011558 <_init>:
 8011558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155a:	bf00      	nop
 801155c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801155e:	bc08      	pop	{r3}
 8011560:	469e      	mov	lr, r3
 8011562:	4770      	bx	lr

08011564 <_fini>:
 8011564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011566:	bf00      	nop
 8011568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801156a:	bc08      	pop	{r3}
 801156c:	469e      	mov	lr, r3
 801156e:	4770      	bx	lr
